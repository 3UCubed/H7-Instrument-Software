
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08017760  08017760  00027760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017bf8  08017bf8  00027bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017c00  08017c00  00027c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017c04  08017c04  00027c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017c08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  08017d10  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  08017d10  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033c05  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002788  00000000  00000000  00069430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002570  00000000  00000000  0006bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032550  00000000  00000000  000ae22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b90  00000000  00000000  000e077e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027530e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b10c  00000000  00000000  00275360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017748 	.word	0x08017748

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017748 	.word	0x08017748

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c4c 	.word	0x24000c4c

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 ffa6 	bl	8013568 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 ff9b 	bl	8013568 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 ff90 	bl	8013568 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 ff85 	bl	8013568 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fcc1 	bl	8016fe8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c6c 	.word	0x24000c6c
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080177e8 	.word	0x080177e8

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f ffdd 	bl	8010654 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 845d 	bhi.w	8000f62 <HAL_UART_RxCpltCallback+0x8da>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cfd 	.word	0x08000cfd
 80006dc:	08000d3b 	.word	0x08000d3b
 80006e0:	08000e31 	.word	0x08000e31
 80006e4:	08000e83 	.word	0x08000e83
 80006e8:	08000ee5 	.word	0x08000ee5
 80006ec:	08000f0d 	.word	0x08000f0d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d13 	.word	0x08000d13
 8000720:	08000d51 	.word	0x08000d51
 8000724:	08000e47 	.word	0x08000e47
 8000728:	08000ebd 	.word	0x08000ebd
 800072c:	08000f63 	.word	0x08000f63
 8000730:	08000f63 	.word	0x08000f63
 8000734:	08000f63 	.word	0x08000f63
 8000738:	08000f63 	.word	0x08000f63
 800073c:	08000f63 	.word	0x08000f63
 8000740:	08000f63 	.word	0x08000f63
 8000744:	08000f63 	.word	0x08000f63
 8000748:	08000f63 	.word	0x08000f63
 800074c:	08000f63 	.word	0x08000f63
 8000750:	08000f63 	.word	0x08000f63
 8000754:	08000f63 	.word	0x08000f63
 8000758:	08000f63 	.word	0x08000f63
 800075c:	08000f63 	.word	0x08000f63
 8000760:	08000f63 	.word	0x08000f63
 8000764:	08000f63 	.word	0x08000f63
 8000768:	08000f63 	.word	0x08000f63
 800076c:	08000f63 	.word	0x08000f63
 8000770:	08000f63 	.word	0x08000f63
 8000774:	08000f63 	.word	0x08000f63
 8000778:	08000f63 	.word	0x08000f63
 800077c:	08000f63 	.word	0x08000f63
 8000780:	08000f63 	.word	0x08000f63
 8000784:	08000f63 	.word	0x08000f63
 8000788:	08000f63 	.word	0x08000f63
 800078c:	08000f63 	.word	0x08000f63
 8000790:	08000f63 	.word	0x08000f63
 8000794:	08000f63 	.word	0x08000f63
 8000798:	08000f63 	.word	0x08000f63
 800079c:	08000f63 	.word	0x08000f63
 80007a0:	08000f63 	.word	0x08000f63
 80007a4:	08000f63 	.word	0x08000f63
 80007a8:	08000f63 	.word	0x08000f63
 80007ac:	08000f63 	.word	0x08000f63
 80007b0:	08000f63 	.word	0x08000f63
 80007b4:	08000f63 	.word	0x08000f63
 80007b8:	08000f63 	.word	0x08000f63
 80007bc:	08000f63 	.word	0x08000f63
 80007c0:	08000f63 	.word	0x08000f63
 80007c4:	08000f63 	.word	0x08000f63
 80007c8:	08000f63 	.word	0x08000f63
 80007cc:	08000f63 	.word	0x08000f63
 80007d0:	08000f63 	.word	0x08000f63
 80007d4:	08000f63 	.word	0x08000f63
 80007d8:	08000f63 	.word	0x08000f63
 80007dc:	08000f63 	.word	0x08000f63
 80007e0:	08000f63 	.word	0x08000f63
 80007e4:	08000f63 	.word	0x08000f63
 80007e8:	08000f63 	.word	0x08000f63
 80007ec:	08000f63 	.word	0x08000f63
 80007f0:	08000f63 	.word	0x08000f63
 80007f4:	08000f63 	.word	0x08000f63
 80007f8:	08000f63 	.word	0x08000f63
 80007fc:	08000f63 	.word	0x08000f63
 8000800:	08000f63 	.word	0x08000f63
 8000804:	08000f63 	.word	0x08000f63
 8000808:	08000f63 	.word	0x08000f63
 800080c:	08000f63 	.word	0x08000f63
 8000810:	08000f63 	.word	0x08000f63
 8000814:	08000f63 	.word	0x08000f63
 8000818:	08000f63 	.word	0x08000f63
 800081c:	08000f63 	.word	0x08000f63
 8000820:	08000f63 	.word	0x08000f63
 8000824:	08000f63 	.word	0x08000f63
 8000828:	08000f63 	.word	0x08000f63
 800082c:	08000f63 	.word	0x08000f63
 8000830:	08000f63 	.word	0x08000f63
 8000834:	08000f63 	.word	0x08000f63
 8000838:	08000f63 	.word	0x08000f63
 800083c:	08000f63 	.word	0x08000f63
 8000840:	08000f63 	.word	0x08000f63
 8000844:	08000f63 	.word	0x08000f63
 8000848:	08000f63 	.word	0x08000f63
 800084c:	08000f63 	.word	0x08000f63
 8000850:	08000f63 	.word	0x08000f63
 8000854:	08000f63 	.word	0x08000f63
 8000858:	08000f63 	.word	0x08000f63
 800085c:	08000f63 	.word	0x08000f63
 8000860:	08000f63 	.word	0x08000f63
 8000864:	08000f63 	.word	0x08000f63
 8000868:	08000f63 	.word	0x08000f63
 800086c:	08000f63 	.word	0x08000f63
 8000870:	08000f63 	.word	0x08000f63
 8000874:	08000f63 	.word	0x08000f63
 8000878:	08000f63 	.word	0x08000f63
 800087c:	08000f63 	.word	0x08000f63
 8000880:	08000f63 	.word	0x08000f63
 8000884:	08000f63 	.word	0x08000f63
 8000888:	08000f63 	.word	0x08000f63
 800088c:	08000f63 	.word	0x08000f63
 8000890:	08000f63 	.word	0x08000f63
 8000894:	08000f63 	.word	0x08000f63
 8000898:	08000f63 	.word	0x08000f63
 800089c:	08000f63 	.word	0x08000f63
 80008a0:	08000f63 	.word	0x08000f63
 80008a4:	08000f63 	.word	0x08000f63
 80008a8:	08000f63 	.word	0x08000f63
 80008ac:	08000f63 	.word	0x08000f63
 80008b0:	08000f63 	.word	0x08000f63
 80008b4:	08000f63 	.word	0x08000f63
 80008b8:	08000f63 	.word	0x08000f63
 80008bc:	08000f63 	.word	0x08000f63
 80008c0:	08000f63 	.word	0x08000f63
 80008c4:	08000f63 	.word	0x08000f63
 80008c8:	08000f63 	.word	0x08000f63
 80008cc:	08000f63 	.word	0x08000f63
 80008d0:	08000f63 	.word	0x08000f63
 80008d4:	08000f63 	.word	0x08000f63
 80008d8:	08000f63 	.word	0x08000f63
 80008dc:	08000f63 	.word	0x08000f63
 80008e0:	08000f63 	.word	0x08000f63
 80008e4:	08000f63 	.word	0x08000f63
 80008e8:	08000f63 	.word	0x08000f63
 80008ec:	08000f63 	.word	0x08000f63
 80008f0:	08000f63 	.word	0x08000f63
 80008f4:	08000f63 	.word	0x08000f63
 80008f8:	08000f63 	.word	0x08000f63
 80008fc:	08000f63 	.word	0x08000f63
 8000900:	08000f63 	.word	0x08000f63
 8000904:	08000f63 	.word	0x08000f63
 8000908:	08000f63 	.word	0x08000f63
 800090c:	08000f63 	.word	0x08000f63
 8000910:	08000f63 	.word	0x08000f63
 8000914:	08000f63 	.word	0x08000f63
 8000918:	08000f63 	.word	0x08000f63
 800091c:	08000f63 	.word	0x08000f63
 8000920:	08000f63 	.word	0x08000f63
 8000924:	08000f63 	.word	0x08000f63
 8000928:	08000f63 	.word	0x08000f63
 800092c:	08000f63 	.word	0x08000f63
 8000930:	08000f63 	.word	0x08000f63
 8000934:	08000f63 	.word	0x08000f63
 8000938:	08000f63 	.word	0x08000f63
 800093c:	08000f63 	.word	0x08000f63
 8000940:	08000f63 	.word	0x08000f63
 8000944:	08000f63 	.word	0x08000f63
 8000948:	08000f63 	.word	0x08000f63
 800094c:	08000f63 	.word	0x08000f63
 8000950:	08000f63 	.word	0x08000f63
 8000954:	08000f63 	.word	0x08000f63
 8000958:	08000f63 	.word	0x08000f63
 800095c:	08000f63 	.word	0x08000f63
 8000960:	08000f63 	.word	0x08000f63
 8000964:	08000f63 	.word	0x08000f63
 8000968:	08000f63 	.word	0x08000f63
 800096c:	08000f45 	.word	0x08000f45
 8000970:	08000f63 	.word	0x08000f63
 8000974:	08000f63 	.word	0x08000f63
 8000978:	08000f63 	.word	0x08000f63
 800097c:	08000f63 	.word	0x08000f63
 8000980:	08000f63 	.word	0x08000f63
 8000984:	08000f63 	.word	0x08000f63
 8000988:	08000f63 	.word	0x08000f63
 800098c:	08000f63 	.word	0x08000f63
 8000990:	08000f63 	.word	0x08000f63
 8000994:	08000f63 	.word	0x08000f63
 8000998:	08000f63 	.word	0x08000f63
 800099c:	08000f63 	.word	0x08000f63
 80009a0:	08000f63 	.word	0x08000f63
 80009a4:	08000f63 	.word	0x08000f63
 80009a8:	08000f63 	.word	0x08000f63
 80009ac:	08000f4b 	.word	0x08000f4b
 80009b0:	08000f63 	.word	0x08000f63
 80009b4:	08000f63 	.word	0x08000f63
 80009b8:	08000f63 	.word	0x08000f63
 80009bc:	08000f63 	.word	0x08000f63
 80009c0:	08000f63 	.word	0x08000f63
 80009c4:	08000f63 	.word	0x08000f63
 80009c8:	08000f63 	.word	0x08000f63
 80009cc:	08000f63 	.word	0x08000f63
 80009d0:	08000f63 	.word	0x08000f63
 80009d4:	08000f63 	.word	0x08000f63
 80009d8:	08000f63 	.word	0x08000f63
 80009dc:	08000f63 	.word	0x08000f63
 80009e0:	08000f63 	.word	0x08000f63
 80009e4:	08000f63 	.word	0x08000f63
 80009e8:	08000f63 	.word	0x08000f63
 80009ec:	08000f57 	.word	0x08000f57
 80009f0:	08000f33 	.word	0x08000f33
 80009f4:	08000f63 	.word	0x08000f63
 80009f8:	08000f63 	.word	0x08000f63
 80009fc:	08000f63 	.word	0x08000f63
 8000a00:	08000f63 	.word	0x08000f63
 8000a04:	08000f63 	.word	0x08000f63
 8000a08:	08000f63 	.word	0x08000f63
 8000a0c:	08000f63 	.word	0x08000f63
 8000a10:	08000f63 	.word	0x08000f63
 8000a14:	08000f63 	.word	0x08000f63
 8000a18:	08000f63 	.word	0x08000f63
 8000a1c:	08000f63 	.word	0x08000f63
 8000a20:	08000f63 	.word	0x08000f63
 8000a24:	08000f63 	.word	0x08000f63
 8000a28:	08000f63 	.word	0x08000f63
 8000a2c:	08000f63 	.word	0x08000f63
 8000a30:	08000f21 	.word	0x08000f21
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 fad7 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fd23 	bl	800948c <HAL_GPIO_WritePin>
		break;
 8000a46:	e297      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 facd 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fd19 	bl	800948c <HAL_GPIO_WritePin>
		break;
 8000a5a:	e28d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
 8000a5c:	24000c70 	.word	0x24000c70
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017800 	.word	0x08017800
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	08017808 	.word	0x08017808
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48c1      	ldr	r0, [pc, #772]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a72:	f016 fab9 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fd05 	bl	800948c <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbf      	ldr	r3, [pc, #764]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e276      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48be      	ldr	r0, [pc, #760]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000a8c:	f016 faac 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bba      	ldr	r3, [pc, #744]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fcf8 	bl	800948c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb7      	ldr	r3, [pc, #732]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fcf2 	bl	800948c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb7      	ldr	r3, [pc, #732]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fceb 	bl	800948c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fce4 	bl	800948c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bb0      	ldr	r3, [pc, #704]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fcdd 	bl	800948c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fcd7 	bl	800948c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fcd1 	bl	800948c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba7      	ldr	r3, [pc, #668]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fcca 	bl	800948c <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4ba1      	ldr	r3, [pc, #644]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4ba2      	ldr	r3, [pc, #648]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e223      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489e      	ldr	r0, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b32:	f016 fa59 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fca4 	bl	800948c <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e215      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4898      	ldr	r0, [pc, #608]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b4e:	f016 fa4b 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fc96 	bl	800948c <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e207      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	4892      	ldr	r0, [pc, #584]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b6a:	f016 fa3d 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fc89 	bl	800948c <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1fa      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488d      	ldr	r0, [pc, #564]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000b84:	f016 fa30 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fc7c 	bl	800948c <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1ed      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000b9e:	f016 fa23 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fc6f 	bl	800948c <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1e0      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	4882      	ldr	r0, [pc, #520]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000bb8:	f016 fa16 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fc62 	bl	800948c <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1d3      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bd2:	f016 fa09 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fc54 	bl	800948c <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1c5      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000bee:	f016 f9fb 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fc46 	bl	800948c <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e1b7      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c0a:	f016 f9ed 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fc38 	bl	800948c <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e1a9      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	486a      	ldr	r0, [pc, #424]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c26:	f016 f9df 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fc2a 	bl	800948c <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e19b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4864      	ldr	r0, [pc, #400]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c42:	f016 f9d1 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fc1c 	bl	800948c <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e18d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000c5e:	f016 f9c3 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fc0e 	bl	800948c <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e17f      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4858      	ldr	r0, [pc, #352]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000c7a:	f016 f9b5 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fc01 	bl	800948c <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e172      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4853      	ldr	r0, [pc, #332]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000c94:	f016 f9a8 	bl	8016fe8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fbf4 	bl	800948c <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e165      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f016 f99b 	bl	8016fe8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cbe:	f005 f849 	bl	8005d54 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e159      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000cc6:	f016 f98f 	bl	8016fe8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f005 f901 	bl	8005ed4 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e151      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd6:	f016 f987 	bl	8016fe8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cde:	f00d ffd9 	bl	800ec94 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f012 fc3d 	bl	8013568 <osEventFlagsSet>
		ERPA_ON = 1;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		break;
 8000cfa:	e13d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000cfe:	f016 f973 	bl	8016fe8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d02:	210c      	movs	r1, #12
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000d06:	f00e f91f 	bl	800ef48 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
		break;
 8000d10:	e132      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d12:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d14:	f016 f968 	bl	8016fe8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	483d      	ldr	r0, [pc, #244]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d1c:	f00d ffba 	bl	800ec94 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 fc1e 	bl	8013568 <osEventFlagsSet>
		PMT_ON = 1;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
		break;
 8000d38:	e11e      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d3c:	f016 f954 	bl	8016fe8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d44:	f00e f900 	bl	800ef48 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		break;
 8000d4e:	e113      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d52:	f016 f949 	bl	8016fe8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <HAL_UART_RxCpltCallback+0x79c>)
 8000d5a:	f00d ff9b 	bl	800ec94 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f012 fbff 	bl	8013568 <osEventFlagsSet>
		HK_ON = 1;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_UART_RxCpltCallback+0x7a4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
		break;
 8000d76:	e0ff      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
 8000d78:	08017814 	.word	0x08017814
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24000c24 	.word	0x24000c24
 8000d84:	08017820 	.word	0x08017820
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	24000c25 	.word	0x24000c25
 8000d90:	24000c26 	.word	0x24000c26
 8000d94:	24000c27 	.word	0x24000c27
 8000d98:	24000c28 	.word	0x24000c28
 8000d9c:	24000c29 	.word	0x24000c29
 8000da0:	24000c2a 	.word	0x24000c2a
 8000da4:	24000c2b 	.word	0x24000c2b
 8000da8:	24000c2c 	.word	0x24000c2c
 8000dac:	0801782c 	.word	0x0801782c
 8000db0:	08017838 	.word	0x08017838
 8000db4:	08017848 	.word	0x08017848
 8000db8:	08017854 	.word	0x08017854
 8000dbc:	08017860 	.word	0x08017860
 8000dc0:	0801786c 	.word	0x0801786c
 8000dc4:	0801787c 	.word	0x0801787c
 8000dc8:	08017888 	.word	0x08017888
 8000dcc:	08017894 	.word	0x08017894
 8000dd0:	080178a0 	.word	0x080178a0
 8000dd4:	080178ac 	.word	0x080178ac
 8000dd8:	080178bc 	.word	0x080178bc
 8000ddc:	080178cc 	.word	0x080178cc
 8000de0:	080178d8 	.word	0x080178d8
 8000de4:	080178e8 	.word	0x080178e8
 8000de8:	24000010 	.word	0x24000010
 8000dec:	240002f4 	.word	0x240002f4
 8000df0:	080178f8 	.word	0x080178f8
 8000df4:	08017908 	.word	0x08017908
 8000df8:	24000554 	.word	0x24000554
 8000dfc:	24000c6c 	.word	0x24000c6c
 8000e00:	24000c67 	.word	0x24000c67
 8000e04:	24000c60 	.word	0x24000c60
 8000e08:	08017910 	.word	0x08017910
 8000e0c:	0801791c 	.word	0x0801791c
 8000e10:	24000508 	.word	0x24000508
 8000e14:	24000c66 	.word	0x24000c66
 8000e18:	24000c5c 	.word	0x24000c5c
 8000e1c:	08017924 	.word	0x08017924
 8000e20:	0801792c 	.word	0x0801792c
 8000e24:	240005a0 	.word	0x240005a0
 8000e28:	24000c68 	.word	0x24000c68
 8000e2c:	24000c64 	.word	0x24000c64
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e30:	4853      	ldr	r0, [pc, #332]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e32:	f016 f8d9 	bl	8016fe8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	4852      	ldr	r0, [pc, #328]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e3a:	f00e f885 	bl	800ef48 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000e3e:	4b52      	ldr	r3, [pc, #328]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e098      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e46:	4851      	ldr	r0, [pc, #324]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000e48:	f016 f8ce 	bl	8016fe8 <puts>
		if (step < 17) {
 8000e4c:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	f200 808a 	bhi.w	8000f6a <HAL_UART_RxCpltCallback+0x8e2>
			step += 2;
 8000e56:	4b4e      	ldr	r3, [pc, #312]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	4849      	ldr	r0, [pc, #292]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000e74:	f005 f8d1 	bl	800601a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4847      	ldr	r0, [pc, #284]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000e7c:	f004 ff12 	bl	8005ca4 <HAL_DAC_Start>
		}
		break;
 8000e80:	e073      	b.n	8000f6a <HAL_UART_RxCpltCallback+0x8e2>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e82:	4846      	ldr	r0, [pc, #280]	; (8000f9c <HAL_UART_RxCpltCallback+0x914>)
 8000e84:	f016 f8b0 	bl	8016fe8 <puts>
		if (step > 3) {
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d96e      	bls.n	8000f6e <HAL_UART_RxCpltCallback+0x8e6>
			step -= 2;
 8000e90:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3b02      	subs	r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	483a      	ldr	r0, [pc, #232]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000eae:	f005 f8b4 	bl	800601a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4838      	ldr	r0, [pc, #224]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000eb6:	f004 fef5 	bl	8005ca4 <HAL_DAC_Start>
		}
		break;
 8000eba:	e058      	b.n	8000f6e <HAL_UART_RxCpltCallback+0x8e6>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ebc:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <HAL_UART_RxCpltCallback+0x918>)
 8000ebe:	f016 f893 	bl	8016fe8 <puts>
		if (cadence <= 50000) {
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d851      	bhi.n	8000f72 <HAL_UART_RxCpltCallback+0x8ea>
			cadence *= 2;
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ed6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee2:	e046      	b.n	8000f72 <HAL_UART_RxCpltCallback+0x8ea>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ee4:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <HAL_UART_RxCpltCallback+0x920>)
 8000ee6:	f016 f87f 	bl	8016fe8 <puts>
		if (cadence >= 6250) {
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d93f      	bls.n	8000f76 <HAL_UART_RxCpltCallback+0x8ee>
			cadence /= 2;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000efe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000f0a:	e034      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x8ee>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000f0c:	4827      	ldr	r0, [pc, #156]	; (8000fac <HAL_UART_RxCpltCallback+0x924>)
 8000f0e:	f016 f86b 	bl	8016fe8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_UART_RxCpltCallback+0x928>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2116      	movs	r1, #22
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 fb25 	bl	8013568 <osEventFlagsSet>
		break;
 8000f1e:	e02b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f20:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <HAL_UART_RxCpltCallback+0x92c>)
 8000f22:	f016 f861 	bl	8016fe8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_UART_RxCpltCallback+0x930>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f014 f8c2 	bl	80150b4 <xTaskResumeFromISR>
		break;
 8000f30:	e022      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f32:	4822      	ldr	r0, [pc, #136]	; (8000fbc <HAL_UART_RxCpltCallback+0x934>)
 8000f34:	f016 f858 	bl	8016fe8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_UART_RxCpltCallback+0x938>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f014 f8b9 	bl	80150b4 <xTaskResumeFromISR>
		break;
 8000f42:	e019      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xAF: {
		sync();
 8000f44:	f001 fa4a 	bl	80023dc <sync>
		break;
 8000f48:	e016      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xBF: {
		xTaskResumeFromISR(Flight_taskHandle);
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_UART_RxCpltCallback+0x93c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f014 f8b0 	bl	80150b4 <xTaskResumeFromISR>
		break;
 8000f54:	e010      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xCF: {
		xTaskResumeFromISR(UnFlight_taskHandle);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_UART_RxCpltCallback+0x940>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f014 f8aa 	bl	80150b4 <xTaskResumeFromISR>
		break;
 8000f60:	e00a      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	default: {
		printf("Unknown Command\n");
 8000f62:	481a      	ldr	r0, [pc, #104]	; (8000fcc <HAL_UART_RxCpltCallback+0x944>)
 8000f64:	f016 f840 	bl	8016fe8 <puts>
		break;
 8000f68:	e006      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f6a:	bf00      	nop
 8000f6c:	e004      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f6e:	bf00      	nop
 8000f70:	e002      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f72:	bf00      	nop
 8000f74:	e000      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f76:	bf00      	nop
	}
	}
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08017934 	.word	0x08017934
 8000f84:	240005a0 	.word	0x240005a0
 8000f88:	24000c68 	.word	0x24000c68
 8000f8c:	0801793c 	.word	0x0801793c
 8000f90:	2400000c 	.word	0x2400000c
 8000f94:	24000010 	.word	0x24000010
 8000f98:	240002f4 	.word	0x240002f4
 8000f9c:	08017944 	.word	0x08017944
 8000fa0:	08017950 	.word	0x08017950
 8000fa4:	24000008 	.word	0x24000008
 8000fa8:	0801795c 	.word	0x0801795c
 8000fac:	08017968 	.word	0x08017968
 8000fb0:	24000c6c 	.word	0x24000c6c
 8000fb4:	08017978 	.word	0x08017978
 8000fb8:	24000750 	.word	0x24000750
 8000fbc:	08017984 	.word	0x08017984
 8000fc0:	240009b0 	.word	0x240009b0
 8000fc4:	24000c1c 	.word	0x24000c1c
 8000fc8:	24000c20 	.word	0x24000c20
 8000fcc:	08017990 	.word	0x08017990

08000fd0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd4:	f003 f8d2 	bl	800417c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd8:	f000 f8c8 	bl	800116c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000fdc:	f000 f946 	bl	800126c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fe0:	f000 ff08 	bl	8001df4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000fe4:	f000 fece 	bl	8001d84 <MX_DMA_Init>
	MX_TIM3_Init();
 8000fe8:	f000 fdc8 	bl	8001b7c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000fec:	f000 fe62 	bl	8001cb4 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000ff0:	f000 fb52 	bl	8001698 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000ff4:	f000 fc48 	bl	8001888 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000ff8:	f000 fd4a 	bl	8001a90 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000ffc:	f000 fc9c 	bl	8001938 <MX_TIM1_Init>
	MX_ADC3_Init();
 8001000:	f000 fa86 	bl	8001510 <MX_ADC3_Init>
	MX_ADC1_Init();
 8001004:	f000 f962 	bl	80012cc <MX_ADC1_Init>
	MX_DAC1_Init();
 8001008:	f000 fb14 	bl	8001634 <MX_DAC1_Init>
	MX_SPI1_Init();
 800100c:	f000 fbe4 	bl	80017d8 <MX_SPI1_Init>
	MX_RTC_Init();
 8001010:	f000 fb84 	bl	800171c <MX_RTC_Init>
	MX_TIM4_Init();
 8001014:	f000 fe00 	bl	8001c18 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001018:	f012 f92e 	bl	8013278 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 800101c:	2200      	movs	r2, #0
 800101e:	2108      	movs	r1, #8
 8001020:	2080      	movs	r0, #128	; 0x80
 8001022:	f012 fb9e 	bl	8013762 <osMessageQueueNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <main+0x118>)
 800102a:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PMT_task */
	PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <main+0x11c>)
 800102e:	2100      	movs	r1, #0
 8001030:	482f      	ldr	r0, [pc, #188]	; (80010f0 <main+0x120>)
 8001032:	f012 f96b 	bl	801330c <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <main+0x124>)
 800103a:	6013      	str	r3, [r2, #0]

	/* creation of ERPA_task */
	ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <main+0x128>)
 800103e:	2100      	movs	r1, #0
 8001040:	482e      	ldr	r0, [pc, #184]	; (80010fc <main+0x12c>)
 8001042:	f012 f963 	bl	801330c <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <main+0x130>)
 800104a:	6013      	str	r3, [r2, #0]

	/* creation of HK_task */
	HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 800104c:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <main+0x134>)
 800104e:	2100      	movs	r1, #0
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <main+0x138>)
 8001052:	f012 f95b 	bl	801330c <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a2c      	ldr	r2, [pc, #176]	; (800110c <main+0x13c>)
 800105a:	6013      	str	r3, [r2, #0]

	/* creation of GPIO_on_task */
	GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL,
 800105c:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <main+0x140>)
 800105e:	2100      	movs	r1, #0
 8001060:	482c      	ldr	r0, [pc, #176]	; (8001114 <main+0x144>)
 8001062:	f012 f953 	bl	801330c <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <main+0x148>)
 800106a:	6013      	str	r3, [r2, #0]
			&GPIO_on_task_attributes);

	/* creation of GPIO_off_task */
	GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL,
 800106c:	4a2b      	ldr	r2, [pc, #172]	; (800111c <main+0x14c>)
 800106e:	2100      	movs	r1, #0
 8001070:	482b      	ldr	r0, [pc, #172]	; (8001120 <main+0x150>)
 8001072:	f012 f94b 	bl	801330c <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <main+0x154>)
 800107a:	6013      	str	r3, [r2, #0]
			&GPIO_off_task_attributes);

	/* creation of UART_TX_task */
	UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL,
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <main+0x158>)
 800107e:	2100      	movs	r1, #0
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <main+0x15c>)
 8001082:	f012 f943 	bl	801330c <osThreadNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <main+0x160>)
 800108a:	6013      	str	r3, [r2, #0]
			&UART_TX_task_attributes);

	/* creation of Voltage_Monitor */
	Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL,
 800108c:	4a29      	ldr	r2, [pc, #164]	; (8001134 <main+0x164>)
 800108e:	2100      	movs	r1, #0
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <main+0x168>)
 8001092:	f012 f93b 	bl	801330c <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <main+0x16c>)
 800109a:	6013      	str	r3, [r2, #0]
			&Voltage_Monitor_attributes);

	/* creation of FLAG_task */
	FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <main+0x170>)
 800109e:	2100      	movs	r1, #0
 80010a0:	4828      	ldr	r0, [pc, #160]	; (8001144 <main+0x174>)
 80010a2:	f012 f933 	bl	801330c <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <main+0x178>)
 80010aa:	6013      	str	r3, [r2, #0]

	/* creation of Flight_task */
	Flight_taskHandle = osThreadNew(Flight_init, NULL, &Flight_task_attributes);
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <main+0x17c>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4827      	ldr	r0, [pc, #156]	; (8001150 <main+0x180>)
 80010b2:	f012 f92b 	bl	801330c <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <main+0x184>)
 80010ba:	6013      	str	r3, [r2, #0]

	/* creation of UnFlight_task */
	UnFlight_taskHandle = osThreadNew(UnFlight_init, NULL,
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <main+0x188>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4826      	ldr	r0, [pc, #152]	; (800115c <main+0x18c>)
 80010c2:	f012 f923 	bl	801330c <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a25      	ldr	r2, [pc, #148]	; (8001160 <main+0x190>)
 80010ca:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f012 fa0b 	bl	80134e8 <osEventFlagsNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <main+0x194>)
 80010d6:	6013      	str	r3, [r2, #0]
	system_setup();
 80010d8:	f001 f9ea 	bl	80024b0 <system_setup>
	printf("Starting kernal...\n");
 80010dc:	4822      	ldr	r0, [pc, #136]	; (8001168 <main+0x198>)
 80010de:	f015 ff83 	bl	8016fe8 <puts>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80010e2:	f012 f8ed 	bl	80132c0 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010e6:	e7fe      	b.n	80010e6 <main+0x116>
 80010e8:	24000c50 	.word	0x24000c50
 80010ec:	080179ec 	.word	0x080179ec
 80010f0:	08002c75 	.word	0x08002c75
 80010f4:	24000744 	.word	0x24000744
 80010f8:	08017a10 	.word	0x08017a10
 80010fc:	08002cb9 	.word	0x08002cb9
 8001100:	24000748 	.word	0x24000748
 8001104:	08017a34 	.word	0x08017a34
 8001108:	08002cf9 	.word	0x08002cf9
 800110c:	2400074c 	.word	0x2400074c
 8001110:	08017a58 	.word	0x08017a58
 8001114:	08002d3d 	.word	0x08002d3d
 8001118:	24000750 	.word	0x24000750
 800111c:	08017a7c 	.word	0x08017a7c
 8001120:	08002de5 	.word	0x08002de5
 8001124:	240009b0 	.word	0x240009b0
 8001128:	08017aa0 	.word	0x08017aa0
 800112c:	08002e8d 	.word	0x08002e8d
 8001130:	24000c10 	.word	0x24000c10
 8001134:	08017ac4 	.word	0x08017ac4
 8001138:	08002f45 	.word	0x08002f45
 800113c:	24000c14 	.word	0x24000c14
 8001140:	08017ae8 	.word	0x08017ae8
 8001144:	0800303d 	.word	0x0800303d
 8001148:	24000c18 	.word	0x24000c18
 800114c:	08017b0c 	.word	0x08017b0c
 8001150:	08003079 	.word	0x08003079
 8001154:	24000c1c 	.word	0x24000c1c
 8001158:	08017b30 	.word	0x08017b30
 800115c:	080031d5 	.word	0x080031d5
 8001160:	24000c20 	.word	0x24000c20
 8001164:	24000c6c 	.word	0x24000c6c
 8001168:	080179a0 	.word	0x080179a0

0800116c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b09c      	sub	sp, #112	; 0x70
 8001170:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	224c      	movs	r2, #76	; 0x4c
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f015 fdde 	bl	8016d3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f015 fdd8 	bl	8016d3c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800118c:	2002      	movs	r0, #2
 800118e:	f008 ffdf 	bl	800a150 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <SystemClock_Config+0xf8>)
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <SystemClock_Config+0xf8>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <SystemClock_Config+0xf8>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <SystemClock_Config+0xfc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b4:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <SystemClock_Config+0xfc>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <SystemClock_Config+0xfc>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80011c8:	bf00      	nop
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <SystemClock_Config+0xfc>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d6:	d1f8      	bne.n	80011ca <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80011d8:	2303      	movs	r3, #3
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80011e2:	2309      	movs	r3, #9
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	2302      	movs	r3, #2
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 32;
 80011f6:	2320      	movs	r3, #32
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fe:	2304      	movs	r3, #4
 8001200:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001206:	2308      	movs	r3, #8
 8001208:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800120a:	2300      	movs	r3, #0
 800120c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4618      	mov	r0, r3
 8001218:	f008 ffd4 	bl	800a1c4 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xba>
		Error_Handler();
 8001222:	f002 f869 	bl	80032f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001226:	233f      	movs	r3, #63	; 0x3f
 8001228:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2303      	movs	r3, #3
 800122c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f009 fc14 	bl	800aa78 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xee>
		Error_Handler();
 8001256:	f002 f84f 	bl	80032f8 <Error_Handler>
	}
}
 800125a:	bf00      	nop
 800125c:	3770      	adds	r7, #112	; 0x70
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	58000400 	.word	0x58000400
 8001268:	58024800 	.word	0x58024800

0800126c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b0b0      	sub	sp, #192	; 0xc0
 8001270:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001272:	463b      	mov	r3, r7
 8001274:	22c0      	movs	r2, #192	; 0xc0
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f015 fd5f 	bl	8016d3c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800127e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 32;
 800128e:	2320      	movs	r3, #32
 8001290:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001292:	2308      	movs	r3, #8
 8001294:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80012b0:	463b      	mov	r3, r7
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 ffae 	bl	800b214 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 80012be:	f002 f81b 	bl	80032f8 <Error_Handler>
	}
}
 80012c2:	bf00      	nop
 80012c4:	37c0      	adds	r7, #192	; 0xc0
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012f0:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <MX_ADC1_Init+0x210>)
 80012f2:	4a7b      	ldr	r2, [pc, #492]	; (80014e0 <MX_ADC1_Init+0x214>)
 80012f4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012f6:	4b79      	ldr	r3, [pc, #484]	; (80014dc <MX_ADC1_Init+0x210>)
 80012f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012fc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <MX_ADC1_Init+0x210>)
 8001300:	2208      	movs	r2, #8
 8001302:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001304:	4b75      	ldr	r3, [pc, #468]	; (80014dc <MX_ADC1_Init+0x210>)
 8001306:	2201      	movs	r2, #1
 8001308:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130a:	4b74      	ldr	r3, [pc, #464]	; (80014dc <MX_ADC1_Init+0x210>)
 800130c:	2204      	movs	r2, #4
 800130e:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001310:	4b72      	ldr	r3, [pc, #456]	; (80014dc <MX_ADC1_Init+0x210>)
 8001312:	2200      	movs	r2, #0
 8001314:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001316:	4b71      	ldr	r3, [pc, #452]	; (80014dc <MX_ADC1_Init+0x210>)
 8001318:	2201      	movs	r2, #1
 800131a:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 11;
 800131c:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <MX_ADC1_Init+0x210>)
 800131e:	220b      	movs	r2, #11
 8001320:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001322:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <MX_ADC1_Init+0x210>)
 8001324:	2200      	movs	r2, #0
 8001326:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001328:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <MX_ADC1_Init+0x210>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132e:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <MX_ADC1_Init+0x210>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001334:	4b69      	ldr	r3, [pc, #420]	; (80014dc <MX_ADC1_Init+0x210>)
 8001336:	2203      	movs	r2, #3
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800133a:	4b68      	ldr	r3, [pc, #416]	; (80014dc <MX_ADC1_Init+0x210>)
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001342:	4b66      	ldr	r3, [pc, #408]	; (80014dc <MX_ADC1_Init+0x210>)
 8001344:	2200      	movs	r2, #0
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <MX_ADC1_Init+0x210>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001350:	4862      	ldr	r0, [pc, #392]	; (80014dc <MX_ADC1_Init+0x210>)
 8001352:	f003 f99f 	bl	8004694 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x94>
		Error_Handler();
 800135c:	f001 ffcc 	bl	80032f8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	485c      	ldr	r0, [pc, #368]	; (80014dc <MX_ADC1_Init+0x210>)
 800136c:	f004 faba 	bl	80058e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xae>
		Error_Handler();
 8001376:	f001 ffbf 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <MX_ADC1_Init+0x218>)
 800137c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800137e:	2306      	movs	r3, #6
 8001380:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001382:	2307      	movs	r3, #7
 8001384:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001386:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800138a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138c:	2304      	movs	r3, #4
 800138e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	484f      	ldr	r0, [pc, #316]	; (80014dc <MX_ADC1_Init+0x210>)
 800139e:	f003 fbfd 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0xe0>
		Error_Handler();
 80013a8:	f001 ffa6 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80013ac:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <MX_ADC1_Init+0x21c>)
 80013ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b0:	230c      	movs	r3, #12
 80013b2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4848      	ldr	r0, [pc, #288]	; (80014dc <MX_ADC1_Init+0x210>)
 80013ba:	f003 fbef 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0xfc>
		Error_Handler();
 80013c4:	f001 ff98 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <MX_ADC1_Init+0x220>)
 80013ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80013cc:	2312      	movs	r3, #18
 80013ce:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4841      	ldr	r0, [pc, #260]	; (80014dc <MX_ADC1_Init+0x210>)
 80013d6:	f003 fbe1 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x118>
		Error_Handler();
 80013e0:	f001 ff8a 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <MX_ADC1_Init+0x224>)
 80013e6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80013e8:	2318      	movs	r3, #24
 80013ea:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	483a      	ldr	r0, [pc, #232]	; (80014dc <MX_ADC1_Init+0x210>)
 80013f2:	f003 fbd3 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x134>
		Error_Handler();
 80013fc:	f001 ff7c 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <MX_ADC1_Init+0x228>)
 8001402:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8001404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001408:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4833      	ldr	r0, [pc, #204]	; (80014dc <MX_ADC1_Init+0x210>)
 8001410:	f003 fbc4 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0x152>
		Error_Handler();
 800141a:	f001 ff6d 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <MX_ADC1_Init+0x22c>)
 8001420:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8001422:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001426:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	482b      	ldr	r0, [pc, #172]	; (80014dc <MX_ADC1_Init+0x210>)
 800142e:	f003 fbb5 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x170>
		Error_Handler();
 8001438:	f001 ff5e 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_ADC1_Init+0x230>)
 800143e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8001440:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001444:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4824      	ldr	r0, [pc, #144]	; (80014dc <MX_ADC1_Init+0x210>)
 800144c:	f003 fba6 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x18e>
		Error_Handler();
 8001456:	f001 ff4f 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_ADC1_Init+0x234>)
 800145c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 800145e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001462:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	481c      	ldr	r0, [pc, #112]	; (80014dc <MX_ADC1_Init+0x210>)
 800146a:	f003 fb97 	bl	8004b9c <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x1ac>
		Error_Handler();
 8001474:	f001 ff40 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_ADC1_Init+0x238>)
 800147a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800147c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001480:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4815      	ldr	r0, [pc, #84]	; (80014dc <MX_ADC1_Init+0x210>)
 8001488:	f003 fb88 	bl	8004b9c <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0x1ca>
		Error_Handler();
 8001492:	f001 ff31 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_ADC1_Init+0x23c>)
 8001498:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 800149a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_ADC1_Init+0x210>)
 80014a6:	f003 fb79 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0x1e8>
		Error_Handler();
 80014b0:	f001 ff22 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_ADC1_Init+0x240>)
 80014b6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_11;
 80014b8:	f240 2306 	movw	r3, #518	; 0x206
 80014bc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_ADC1_Init+0x210>)
 80014c4:	f003 fb6a 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x206>
		Error_Handler();
 80014ce:	f001 ff13 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2400013c 	.word	0x2400013c
 80014e0:	40022000 	.word	0x40022000
 80014e4:	0c900008 	.word	0x0c900008
 80014e8:	10c00010 	.word	0x10c00010
 80014ec:	14f00020 	.word	0x14f00020
 80014f0:	1d500080 	.word	0x1d500080
 80014f4:	21800100 	.word	0x21800100
 80014f8:	25b00200 	.word	0x25b00200
 80014fc:	2a000400 	.word	0x2a000400
 8001500:	2e300800 	.word	0x2e300800
 8001504:	3ac04000 	.word	0x3ac04000
 8001508:	3ef08000 	.word	0x3ef08000
 800150c:	47520000 	.word	0x47520000

08001510 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <MX_ADC3_Init+0x110>)
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <MX_ADC3_Init+0x114>)
 800152c:	601a      	str	r2, [r3, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_ADC3_Init+0x110>)
 8001530:	2208      	movs	r2, #8
 8001532:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <MX_ADC3_Init+0x110>)
 8001536:	2201      	movs	r2, #1
 8001538:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <MX_ADC3_Init+0x110>)
 800153c:	2204      	movs	r2, #4
 800153e:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MX_ADC3_Init+0x110>)
 8001542:	2200      	movs	r2, #0
 8001544:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <MX_ADC3_Init+0x110>)
 8001548:	2201      	movs	r2, #1
 800154a:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 4;
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <MX_ADC3_Init+0x110>)
 800154e:	2204      	movs	r2, #4
 8001550:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <MX_ADC3_Init+0x110>)
 8001554:	2200      	movs	r2, #0
 8001556:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <MX_ADC3_Init+0x110>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_ADC3_Init+0x110>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <MX_ADC3_Init+0x110>)
 8001566:	2203      	movs	r2, #3
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_ADC3_Init+0x110>)
 800156c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_ADC3_Init+0x110>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_ADC3_Init+0x110>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001580:	4827      	ldr	r0, [pc, #156]	; (8001620 <MX_ADC3_Init+0x110>)
 8001582:	f003 f887 	bl	8004694 <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC3_Init+0x80>
		Error_Handler();
 800158c:	f001 feb4 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <MX_ADC3_Init+0x118>)
 8001592:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001594:	2306      	movs	r3, #6
 8001596:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001598:	2307      	movs	r3, #7
 800159a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015a0:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a2:	2304      	movs	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	481b      	ldr	r0, [pc, #108]	; (8001620 <MX_ADC3_Init+0x110>)
 80015b4:	f003 faf2 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC3_Init+0xb2>
		Error_Handler();
 80015be:	f001 fe9b 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_ADC3_Init+0x11c>)
 80015c4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80015c6:	230c      	movs	r3, #12
 80015c8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MX_ADC3_Init+0x110>)
 80015d0:	f003 fae4 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC3_Init+0xce>
		Error_Handler();
 80015da:	f001 fe8d 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80015de:	2301      	movs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e2:	2312      	movs	r3, #18
 80015e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_ADC3_Init+0x110>)
 80015ec:	f003 fad6 	bl	8004b9c <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC3_Init+0xea>
		Error_Handler();
 80015f6:	f001 fe7f 	bl	80032f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MX_ADC3_Init+0x120>)
 80015fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80015fe:	2318      	movs	r3, #24
 8001600:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_ADC3_Init+0x110>)
 8001608:	f003 fac8 	bl	8004b9c <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC3_Init+0x106>
		Error_Handler();
 8001612:	f001 fe71 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	240001a0 	.word	0x240001a0
 8001624:	58026000 	.word	0x58026000
 8001628:	cb840000 	.word	0xcb840000
 800162c:	cfb80000 	.word	0xcfb80000
 8001630:	04300002 	.word	0x04300002

08001634 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2224      	movs	r2, #36	; 0x24
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f015 fb7b 	bl	8016d3c <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_DAC1_Init+0x5c>)
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_DAC1_Init+0x60>)
 800164a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <MX_DAC1_Init+0x5c>)
 800164e:	f004 fb07 	bl	8005c60 <HAL_DAC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_DAC1_Init+0x28>
		Error_Handler();
 8001658:	f001 fe4e 	bl	80032f8 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001660:	230a      	movs	r3, #10
 8001662:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_DAC1_Init+0x5c>)
 8001678:	f004 fd22 	bl	80060c0 <HAL_DAC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_DAC1_Init+0x52>
		Error_Handler();
 8001682:	f001 fe39 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	240002f4 	.word	0x240002f4
 8001694:	40007400 	.word	0x40007400

08001698 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_I2C1_Init+0x78>)
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <MX_I2C1_Init+0x7c>)
 80016a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0020081F;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_I2C1_Init+0x78>)
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <MX_I2C1_Init+0x80>)
 80016a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_I2C1_Init+0x78>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_I2C1_Init+0x78>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_I2C1_Init+0x78>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_I2C1_Init+0x78>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_I2C1_Init+0x78>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C1_Init+0x78>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_I2C1_Init+0x78>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016d2:	480f      	ldr	r0, [pc, #60]	; (8001710 <MX_I2C1_Init+0x78>)
 80016d4:	f007 fef4 	bl	80094c0 <HAL_I2C_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80016de:	f001 fe0b 	bl	80032f8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016e2:	2100      	movs	r1, #0
 80016e4:	480a      	ldr	r0, [pc, #40]	; (8001710 <MX_I2C1_Init+0x78>)
 80016e6:	f008 fc3b 	bl	8009f60 <HAL_I2CEx_ConfigAnalogFilter>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80016f0:	f001 fe02 	bl	80032f8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016f4:	2100      	movs	r1, #0
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <MX_I2C1_Init+0x78>)
 80016f8:	f008 fc7d 	bl	8009ff6 <HAL_I2CEx_ConfigDigitalFilter>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001702:	f001 fdf9 	bl	80032f8 <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001706:	2001      	movs	r0, #1
 8001708:	f008 fcc2 	bl	800a090 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	24000380 	.word	0x24000380
 8001714:	40005400 	.word	0x40005400
 8001718:	0020081f 	.word	0x0020081f

0800171c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001736:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <MX_RTC_Init+0xb8>)
 8001738:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_RTC_Init+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 100 - 1;
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001742:	2263      	movs	r2, #99	; 0x63
 8001744:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 10000 - 1;
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001748:	f242 720f 	movw	r2, #9999	; 0x270f
 800174c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_RTC_Init+0xb4>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001766:	481a      	ldr	r0, [pc, #104]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001768:	f00c fa52 	bl	800dc10 <HAL_RTC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0x5a>
		Error_Handler();
 8001772:	f001 fdc1 	bl	80032f8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001776:	2300      	movs	r3, #0
 8001778:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800177a:	2300      	movs	r3, #0
 800177c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800177e:	2300      	movs	r3, #0
 8001780:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001792:	f00c fabf 	bl	800dd14 <HAL_RTC_SetTime>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_RTC_Init+0x84>
		Error_Handler();
 800179c:	f001 fdac 	bl	80032f8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80017a4:	2301      	movs	r3, #1
 80017a6:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80017b0:	463b      	mov	r3, r7
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <MX_RTC_Init+0xb4>)
 80017b8:	f00c fba6 	bl	800df08 <HAL_RTC_SetDate>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_RTC_Init+0xaa>
		Error_Handler();
 80017c2:	f001 fd99 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	240003d4 	.word	0x240003d4
 80017d4:	58004000 	.word	0x58004000

080017d8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <MX_SPI1_Init+0xac>)
 80017e0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017e8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017f0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017f4:	220f      	movs	r2, #15
 80017f6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001806:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800180a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_SPI1_Init+0xa8>)
 800180e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001812:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_SPI1_Init+0xa8>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001828:	2200      	movs	r2, #0
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_SPI1_Init+0xa8>)
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_SPI1_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_SPI1_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_SPI1_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_SPI1_Init+0xa8>)
 800186c:	f00c fcf2 	bl	800e254 <HAL_SPI_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_SPI1_Init+0xa2>
		Error_Handler();
 8001876:	f001 fd3f 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	240003f8 	.word	0x240003f8
 8001884:	40013000 	.word	0x40013000

08001888 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <MX_SPI2_Init+0xa8>)
 800188e:	4a29      	ldr	r2, [pc, #164]	; (8001934 <MX_SPI2_Init+0xac>)
 8001890:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001894:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001898:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MX_SPI2_Init+0xa8>)
 800189c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018a0:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018a4:	220f      	movs	r2, #15
 80018a6:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018ba:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80018c2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001904:	2200      	movs	r2, #0
 8001906:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_SPI2_Init+0xa8>)
 800190a:	2200      	movs	r2, #0
 800190c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001910:	2200      	movs	r2, #0
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001916:	2200      	movs	r2, #0
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_SPI2_Init+0xa8>)
 800191c:	f00c fc9a 	bl	800e254 <HAL_SPI_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_SPI2_Init+0xa2>
		Error_Handler();
 8001926:	f001 fce7 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	24000480 	.word	0x24000480
 8001934:	40003800 	.word	0x40003800

08001938 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b09a      	sub	sp, #104	; 0x68
 800193c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800193e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800194c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	615a      	str	r2, [r3, #20]
 800196a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	222c      	movs	r2, #44	; 0x2c
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f015 f9e2 	bl	8016d3c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <MX_TIM1_Init+0x150>)
 800197a:	4a44      	ldr	r2, [pc, #272]	; (8001a8c <MX_TIM1_Init+0x154>)
 800197c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 50 - 1;
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <MX_TIM1_Init+0x150>)
 8001980:	2231      	movs	r2, #49	; 0x31
 8001982:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <MX_TIM1_Init+0x150>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62500 - 1;
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <MX_TIM1_Init+0x150>)
 800198c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001990:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <MX_TIM1_Init+0x150>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <MX_TIM1_Init+0x150>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <MX_TIM1_Init+0x150>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80019a4:	4838      	ldr	r0, [pc, #224]	; (8001a88 <MX_TIM1_Init+0x150>)
 80019a6:	f00d f8a6 	bl	800eaf6 <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x7c>
		Error_Handler();
 80019b0:	f001 fca2 	bl	80032f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80019ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019be:	4619      	mov	r1, r3
 80019c0:	4831      	ldr	r0, [pc, #196]	; (8001a88 <MX_TIM1_Init+0x150>)
 80019c2:	f00d fe21 	bl	800f608 <HAL_TIM_ConfigClockSource>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x98>
		Error_Handler();
 80019cc:	f001 fc94 	bl	80032f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80019d0:	482d      	ldr	r0, [pc, #180]	; (8001a88 <MX_TIM1_Init+0x150>)
 80019d2:	f00d fb9d 	bl	800f110 <HAL_TIM_PWM_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xa8>
		Error_Handler();
 80019dc:	f001 fc8c 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80019ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4825      	ldr	r0, [pc, #148]	; (8001a88 <MX_TIM1_Init+0x150>)
 80019f4:	f00e fb5e 	bl	80100b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80019fe:	f001 fc7b 	bl	80032f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a02:	2360      	movs	r3, #96	; 0x60
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_TIM1_Init+0x150>)
 8001a28:	f00d fcda 	bl	800f3e0 <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 8001a32:	f001 fc61 	bl	80032f8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM1_Init+0x150>)
 8001a6c:	f00e fbb0 	bl	80101d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001a76:	f001 fc3f 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM1_Init+0x150>)
 8001a7c:	f001 ffec 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3768      	adds	r7, #104	; 0x68
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	24000508 	.word	0x24000508
 8001a8c:	40010000 	.word	0x40010000

08001a90 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50 - 1;
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001acc:	2231      	movs	r2, #49	; 0x31
 8001ace:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3125 - 1;
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001ad8:	f640 4234 	movw	r2, #3124	; 0xc34
 8001adc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001aea:	4823      	ldr	r0, [pc, #140]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001aec:	f00d f803 	bl	800eaf6 <HAL_TIM_Base_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001af6:	f001 fbff 	bl	80032f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b04:	4619      	mov	r1, r3
 8001b06:	481c      	ldr	r0, [pc, #112]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001b08:	f00d fd7e 	bl	800f608 <HAL_TIM_ConfigClockSource>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001b12:	f001 fbf1 	bl	80032f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001b16:	4818      	ldr	r0, [pc, #96]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001b18:	f00d fafa 	bl	800f110 <HAL_TIM_PWM_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001b22:	f001 fbe9 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b26:	2320      	movs	r3, #32
 8001b28:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001b36:	f00e fabd 	bl	80100b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001b40:	f001 fbda 	bl	80032f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8001b54:	463b      	mov	r3, r7
 8001b56:	220c      	movs	r2, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4807      	ldr	r0, [pc, #28]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001b5c:	f00d fc40 	bl	800f3e0 <HAL_TIM_PWM_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001b66:	f001 fbc7 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <MX_TIM2_Init+0xe8>)
 8001b6c:	f001 ff74 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 8001b70:	bf00      	nop
 8001b72:	3738      	adds	r7, #56	; 0x38
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	24000554 	.word	0x24000554

08001b7c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <MX_TIM3_Init+0x98>)
 8001b9e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10 - 1;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001ba2:	2209      	movs	r2, #9
 8001ba4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bae:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bb2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001bc0:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bc2:	f00c ff98 	bl	800eaf6 <HAL_TIM_Base_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001bcc:	f001 fb94 	bl	80032f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bde:	f00d fd13 	bl	800f608 <HAL_TIM_ConfigClockSource>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM3_Init+0x70>
		Error_Handler();
 8001be8:	f001 fb86 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bfa:	f00e fa5b 	bl	80100b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001c04:	f001 fb78 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	240005a0 	.word	0x240005a0
 8001c14:	40000400 	.word	0x40000400

08001c18 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c38:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <MX_TIM4_Init+0x98>)
 8001c3a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 10 - 1;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c3e:	2209      	movs	r2, #9
 8001c40:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 50000 - 1;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c4a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c4e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001c5c:	4813      	ldr	r0, [pc, #76]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c5e:	f00c ff4a 	bl	800eaf6 <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM4_Init+0x54>
		Error_Handler();
 8001c68:	f001 fb46 	bl	80032f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c7a:	f00d fcc5 	bl	800f608 <HAL_TIM_ConfigClockSource>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x70>
		Error_Handler();
 8001c84:	f001 fb38 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_TIM4_Init+0x94>)
 8001c96:	f00e fa0d 	bl	80100b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001ca0:	f001 fb2a 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	240005ec 	.word	0x240005ec
 8001cb0:	40000800 	.word	0x40000800

08001cb4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cba:	4a31      	ldr	r2, [pc, #196]	; (8001d80 <MX_USART1_UART_Init+0xcc>)
 8001cbc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cc0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001cc4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001cfc:	481f      	ldr	r0, [pc, #124]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001cfe:	f00e fb03 	bl	8010308 <HAL_UART_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001d08:	f001 faf6 	bl	80032f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	481b      	ldr	r0, [pc, #108]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d10:	f011 f9a3 	bl	801305a <HAL_UARTEx_SetTxFifoThreshold>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001d1a:	f001 faed 	bl	80032f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4816      	ldr	r0, [pc, #88]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d22:	f011 f9d8 	bl	80130d6 <HAL_UARTEx_SetRxFifoThreshold>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001d2c:	f001 fae4 	bl	80032f8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001d30:	4812      	ldr	r0, [pc, #72]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d32:	f011 f959 	bl	8012fe8 <HAL_UARTEx_DisableFifoMode>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001d3c:	f001 fadc 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001d40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d46:	f011 f9c6 	bl	80130d6 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d4c:	f011 f911 	bl	8012f72 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001d50:	480a      	ldr	r0, [pc, #40]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d52:	f011 f8db 	bl	8012f0c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d64:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <MX_USART1_UART_Init+0xc8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d74:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
	/* USER CODE END USART1_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	24000638 	.word	0x24000638
 8001d80:	40011000 	.word	0x40011000

08001d84 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_DMA_Init+0x6c>)
 8001d8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <MX_DMA_Init+0x6c>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_DMA_Init+0x6c>)
 8001d9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2105      	movs	r1, #5
 8001dac:	200b      	movs	r0, #11
 8001dae:	f003 ff2f 	bl	8005c10 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001db2:	200b      	movs	r0, #11
 8001db4:	f003 ff46 	bl	8005c44 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2105      	movs	r1, #5
 8001dbc:	200c      	movs	r0, #12
 8001dbe:	f003 ff27 	bl	8005c10 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dc2:	200c      	movs	r0, #12
 8001dc4:	f003 ff3e 	bl	8005c44 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2105      	movs	r1, #5
 8001dcc:	200d      	movs	r0, #13
 8001dce:	f003 ff1f 	bl	8005c10 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001dd2:	200d      	movs	r0, #13
 8001dd4:	f003 ff36 	bl	8005c44 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2105      	movs	r1, #5
 8001ddc:	2010      	movs	r0, #16
 8001dde:	f003 ff17 	bl	8005c10 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001de2:	2010      	movs	r0, #16
 8001de4:	f003 ff2e 	bl	8005c44 <HAL_NVIC_EnableIRQ>

}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58024400 	.word	0x58024400

08001df4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	4a32      	ldr	r2, [pc, #200]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001e28:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_GPIO_Init+0xe8>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e88:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <MX_GPIO_Init+0xec>)
 8001e8a:	f007 faff 	bl	800948c <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6,
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2164      	movs	r1, #100	; 0x64
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <MX_GPIO_Init+0xf0>)
 8001e94:	f007 fafa 	bl	800948c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001e98:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e9c:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <MX_GPIO_Init+0xec>)
 8001eb2:	f007 f923 	bl	80090fc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 8001eb6:	2364      	movs	r3, #100	; 0x64
 8001eb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_GPIO_Init+0xf0>)
 8001ece:	f007 f915 	bl	80090fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	58020800 	.word	0x58020800
 8001ee4:	58020400 	.word	0x58020400

08001ee8 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	4817      	ldr	r0, [pc, #92]	; (8001f64 <poll_i2c_sensor+0x7c>)
 8001f08:	f007 fb76 	bl	80095f8 <HAL_I2C_Master_Transmit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001f10:	7b7b      	ldrb	r3, [r7, #13]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001f16:	4814      	ldr	r0, [pc, #80]	; (8001f68 <poll_i2c_sensor+0x80>)
 8001f18:	f015 f866 	bl	8016fe8 <puts>
 8001f1c:	e01c      	b.n	8001f58 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	b299      	uxth	r1, r3
 8001f22:	f107 0208 	add.w	r2, r7, #8
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	480d      	ldr	r0, [pc, #52]	; (8001f64 <poll_i2c_sensor+0x7c>)
 8001f30:	f007 fc7a 	bl	8009828 <HAL_I2C_Master_Receive>
 8001f34:	4603      	mov	r3, r0
 8001f36:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001f38:	7b7b      	ldrb	r3, [r7, #13]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <poll_i2c_sensor+0x84>)
 8001f40:	f015 f852 	bl	8016fe8 <puts>
 8001f44:	e008      	b.n	8001f58 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001f46:	7a3b      	ldrb	r3, [r7, #8]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f50:	7a7a      	ldrb	r2, [r7, #9]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	10db      	asrs	r3, r3, #3
 8001f56:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001f58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	24000380 	.word	0x24000380
 8001f68:	080179b4 	.word	0x080179b4
 8001f6c:	080179c4 	.word	0x080179c4

08001f70 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f78:	f107 010c 	add.w	r1, r7, #12
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	2201      	movs	r2, #1
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <receive_pmt_spi+0x44>)
 8001f82:	f00c fa8b 	bl	800e49c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f86:	2300      	movs	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f8a:	7b7b      	ldrb	r3, [r7, #13]
 8001f8c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <receive_pmt_spi+0x44>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <receive_pmt_spi+0x44>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f9c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7bba      	ldrb	r2, [r7, #14]
 8001fa2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	701a      	strb	r2, [r3, #0]
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	240003f8 	.word	0x240003f8

08001fb8 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001fc0:	f107 010c 	add.w	r1, r7, #12
 8001fc4:	2364      	movs	r3, #100	; 0x64
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <receive_erpa_spi+0x44>)
 8001fca:	f00c fa67 	bl	800e49c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001fd2:	7b7b      	ldrb	r3, [r7, #13]
 8001fd4:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <receive_erpa_spi+0x44>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <receive_erpa_spi+0x44>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fe4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7bba      	ldrb	r2, [r7, #14]
 8001fea:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	701a      	strb	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	24000480 	.word	0x24000480

08002000 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <receive_erpa_adc+0x20>)
 800200a:	885b      	ldrh	r3, [r3, #2]
 800200c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	89fa      	ldrh	r2, [r7, #14]
 8002012:	801a      	strh	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	24000cc0 	.word	0x24000cc0

08002024 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800202c:	2390      	movs	r3, #144	; 0x90
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff5a 	bl	8001ee8 <poll_i2c_sensor>
 8002034:	4603      	mov	r3, r0
 8002036:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002038:	2394      	movs	r3, #148	; 0x94
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff54 	bl	8001ee8 <poll_i2c_sensor>
 8002040:	4603      	mov	r3, r0
 8002042:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002044:	2392      	movs	r3, #146	; 0x92
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff4e 	bl	8001ee8 <poll_i2c_sensor>
 800204c:	4603      	mov	r3, r0
 800204e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002050:	2396      	movs	r3, #150	; 0x96
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff48 	bl	8001ee8 <poll_i2c_sensor>
 8002058:	4603      	mov	r3, r0
 800205a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	89fa      	ldrh	r2, [r7, #14]
 8002060:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3302      	adds	r3, #2
 8002066:	89ba      	ldrh	r2, [r7, #12]
 8002068:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	897a      	ldrh	r2, [r7, #10]
 8002070:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3306      	adds	r3, #6
 8002076:	893a      	ldrh	r2, [r7, #8]
 8002078:	801a      	strh	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <receive_hk_adc1+0xa0>)
 800208e:	8a9b      	ldrh	r3, [r3, #20]
 8002090:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <receive_hk_adc1+0xa0>)
 8002094:	8a1b      	ldrh	r3, [r3, #16]
 8002096:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <receive_hk_adc1+0xa0>)
 800209a:	899b      	ldrh	r3, [r3, #12]
 800209c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <receive_hk_adc1+0xa0>)
 80020a0:	8a5b      	ldrh	r3, [r3, #18]
 80020a2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <receive_hk_adc1+0xa0>)
 80020a6:	889b      	ldrh	r3, [r3, #4]
 80020a8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <receive_hk_adc1+0xa0>)
 80020ac:	88db      	ldrh	r3, [r3, #6]
 80020ae:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80020b0:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <receive_hk_adc1+0xa0>)
 80020b2:	89db      	ldrh	r3, [r3, #14]
 80020b4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <receive_hk_adc1+0xa0>)
 80020b8:	891b      	ldrh	r3, [r3, #8]
 80020ba:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <receive_hk_adc1+0xa0>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <receive_hk_adc1+0xa0>)
 80020c4:	895b      	ldrh	r3, [r3, #10]
 80020c6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8bfa      	ldrh	r2, [r7, #30]
 80020cc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3302      	adds	r3, #2
 80020d2:	8bba      	ldrh	r2, [r7, #28]
 80020d4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	8b7a      	ldrh	r2, [r7, #26]
 80020dc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3306      	adds	r3, #6
 80020e2:	8b3a      	ldrh	r2, [r7, #24]
 80020e4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3308      	adds	r3, #8
 80020ea:	8afa      	ldrh	r2, [r7, #22]
 80020ec:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	330a      	adds	r3, #10
 80020f2:	8aba      	ldrh	r2, [r7, #20]
 80020f4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	330c      	adds	r3, #12
 80020fa:	8a7a      	ldrh	r2, [r7, #18]
 80020fc:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	330e      	adds	r3, #14
 8002102:	8a3a      	ldrh	r2, [r7, #16]
 8002104:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3310      	adds	r3, #16
 800210a:	89fa      	ldrh	r2, [r7, #14]
 800210c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3312      	adds	r3, #18
 8002112:	89ba      	ldrh	r2, [r7, #12]
 8002114:	801a      	strh	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	24000cc0 	.word	0x24000cc0

08002128 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <receive_hk_adc3+0x4c>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <receive_hk_adc3+0x4c>)
 8002138:	885b      	ldrh	r3, [r3, #2]
 800213a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <receive_hk_adc3+0x4c>)
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <receive_hk_adc3+0x4c>)
 8002144:	88db      	ldrh	r3, [r3, #6]
 8002146:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	89fa      	ldrh	r2, [r7, #14]
 800214c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3302      	adds	r3, #2
 8002152:	89ba      	ldrh	r2, [r7, #12]
 8002154:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	897a      	ldrh	r2, [r7, #10]
 800215c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3306      	adds	r3, #6
 8002162:	893a      	ldrh	r2, [r7, #8]
 8002164:	801a      	strh	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	24000ce0 	.word	0x24000ce0

08002178 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <get_current_step+0xc0>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f640 72ff 	movw	r2, #4095	; 0xfff
 800218a:	4293      	cmp	r3, r2
 800218c:	d04a      	beq.n	8002224 <get_current_step+0xac>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002194:	da48      	bge.n	8002228 <get_current_step+0xb0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f640 628b 	movw	r2, #3723	; 0xe8b
 800219c:	4293      	cmp	r3, r2
 800219e:	d03f      	beq.n	8002220 <get_current_step+0xa8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021a6:	4293      	cmp	r3, r2
 80021a8:	dc3e      	bgt.n	8002228 <get_current_step+0xb0>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d033      	beq.n	800221c <get_current_step+0xa4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021ba:	da35      	bge.n	8002228 <get_current_step+0xb0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d028      	beq.n	8002218 <get_current_step+0xa0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021cc:	4293      	cmp	r3, r2
 80021ce:	dc2b      	bgt.n	8002228 <get_current_step+0xb0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f240 7245 	movw	r2, #1861	; 0x745
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01c      	beq.n	8002214 <get_current_step+0x9c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f240 7245 	movw	r2, #1861	; 0x745
 80021e0:	4293      	cmp	r3, r2
 80021e2:	dc21      	bgt.n	8002228 <get_current_step+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d010      	beq.n	8002210 <get_current_step+0x98>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021f4:	4293      	cmp	r3, r2
 80021f6:	dc17      	bgt.n	8002228 <get_current_step+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <get_current_step+0x90>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002204:	d002      	beq.n	800220c <get_current_step+0x94>
 8002206:	e00f      	b.n	8002228 <get_current_step+0xb0>
	case 0:
		return 0;
 8002208:	2300      	movs	r3, #0
 800220a:	e00e      	b.n	800222a <get_current_step+0xb2>
	case 620:
		return 1;
 800220c:	2301      	movs	r3, #1
 800220e:	e00c      	b.n	800222a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002210:	2302      	movs	r3, #2
 8002212:	e00a      	b.n	800222a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002214:	2303      	movs	r3, #3
 8002216:	e008      	b.n	800222a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002218:	2304      	movs	r3, #4
 800221a:	e006      	b.n	800222a <get_current_step+0xb2>
	case 3103:
		return 5;
 800221c:	2305      	movs	r3, #5
 800221e:	e004      	b.n	800222a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002220:	2306      	movs	r3, #6
 8002222:	e002      	b.n	800222a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002224:	2307      	movs	r3, #7
 8002226:	e000      	b.n	800222a <get_current_step+0xb2>
	default:
		return -1;
 8002228:	23ff      	movs	r3, #255	; 0xff
	}
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40007400 	.word	0x40007400

0800223c <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 8002240:	f000 f8f2 	bl	8002428 <send_ACK>

	vTaskSuspendAll();
 8002244:	f013 f80e 	bl	8015264 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002248:	2101      	movs	r1, #1
 800224a:	2001      	movs	r0, #1
 800224c:	f007 ff44 	bl	800a0d8 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 8002250:	f7fe ff8c 	bl	800116c <SystemClock_Config>
	xTaskResumeAll();
 8002254:	f013 f814 	bl	8015280 <xTaskResumeAll>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <RTC_SetTime>:

void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d051      	beq.n	8002316 <RTC_SetTime+0xba>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	22ca      	movs	r2, #202	; 0xca
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2253      	movs	r2, #83	; 0x53
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f00b ff32 	bl	800e0fc <RTC_EnterInitMode>
 8002298:	4603      	mov	r3, r0
 800229a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d129      	bne.n	80022f6 <RTC_SetTime+0x9a>

		sTime->TimeFormat = 0x00U;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2200      	movs	r2, #0
 80022a6:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00b ff97 	bl	800e1e0 <RTC_ByteToBcd2>
 80022b2:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80022b4:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f00b ff90 	bl	800e1e0 <RTC_ByteToBcd2>
 80022c0:	4603      	mov	r3, r0
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	789b      	ldrb	r3, [r3, #2]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00b ff88 	bl	800e1e0 <RTC_ByteToBcd2>
 80022d0:	4603      	mov	r3, r0
 80022d2:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6939      	ldr	r1, [r7, #16]
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <RTC_SetTime+0xc4>)
 80022e8:	400b      	ands	r3, r1
 80022ea:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f00b ff39 	bl	800e164 <RTC_ExitInitMode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	22ff      	movs	r2, #255	; 0xff
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <RTC_SetTime+0xb0>
		hrtc->State = HAL_RTC_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2020 	strb.w	r2, [r3, #32]
 8002314:	e000      	b.n	8002318 <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 8002316:	bf00      	nop

}
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	007f7f7f 	.word	0x007f7f7f

08002324 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	785b      	ldrb	r3, [r3, #1]
 8002330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	789b      	ldrb	r3, [r3, #2]
 8002338:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	791b      	ldrb	r3, [r3, #4]
 8002348:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	795b      	ldrb	r3, [r3, #5]
 8002350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	799b      	ldrb	r3, [r3, #6]
 8002358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3307      	adds	r3, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3308      	adds	r3, #8
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21b      	sxth	r3, r3
 8002372:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8002374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 800237c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8002384:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 800238c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002390:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002396:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8002398:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800239c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800239e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	480b      	ldr	r0, [pc, #44]	; (80023d8 <calibrateRTC+0xb4>)
 80023ac:	f00b fdac 	bl	800df08 <HAL_RTC_SetDate>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80023b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <calibrateRTC+0x9e>
		Error_Handler();
 80023be:	f000 ff9b 	bl	80032f8 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	2200      	movs	r2, #0
 80023c8:	4619      	mov	r1, r3
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <calibrateRTC+0xb4>)
 80023cc:	f7ff ff46 	bl	800225c <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	; 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	240003d4 	.word	0x240003d4

080023dc <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	send_ACK();
 80023e2:	f000 f821 	bl	8002428 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80023e6:	480e      	ldr	r0, [pc, #56]	; (8002420 <sync+0x44>)
 80023e8:	f00e fa00 	bl	80107ec <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	2209      	movs	r2, #9
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <sync+0x48>)
 80023f2:	480b      	ldr	r0, [pc, #44]	; (8002420 <sync+0x44>)
 80023f4:	f00e f866 	bl	80104c4 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <sync+0x48>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	2bff      	cmp	r3, #255	; 0xff
 8002402:	d1f3      	bne.n	80023ec <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 8002404:	4807      	ldr	r0, [pc, #28]	; (8002424 <sync+0x48>)
 8002406:	f7ff ff8d 	bl	8002324 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800240a:	2201      	movs	r2, #1
 800240c:	4905      	ldr	r1, [pc, #20]	; (8002424 <sync+0x48>)
 800240e:	4804      	ldr	r0, [pc, #16]	; (8002420 <sync+0x44>)
 8002410:	f00e f920 	bl	8010654 <HAL_UART_Receive_IT>

	send_ACK();
 8002414:	f000 f808 	bl	8002428 <send_ACK>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	24000638 	.word	0x24000638
 8002424:	24000c70 	.word	0x24000c70

08002428 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <send_ACK+0x1c>)
 800242e:	22ff      	movs	r2, #255	; 0xff
 8002430:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002432:	2364      	movs	r3, #100	; 0x64
 8002434:	2201      	movs	r2, #1
 8002436:	4903      	ldr	r1, [pc, #12]	; (8002444 <send_ACK+0x1c>)
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <send_ACK+0x20>)
 800243a:	f00d ffb5 	bl	80103a8 <HAL_UART_Transmit>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	24000ce8 	.word	0x24000ce8
 8002448:	24000638 	.word	0x24000638

0800244c <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_UART_TxCpltCallback+0x1c>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	24000000 	.word	0x24000000

0800246c <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	4613      	mov	r3, r2
 8002478:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4618      	mov	r0, r3
 800247e:	f014 fc3f 	bl	8016d00 <malloc>
 8002482:	4603      	mov	r3, r0
 8002484:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	4618      	mov	r0, r3
 800248e:	f014 fc47 	bl	8016d20 <memcpy>
	packet.size = size;
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	461a      	mov	r2, r3
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80024b4:	2100      	movs	r1, #0
 80024b6:	481d      	ldr	r0, [pc, #116]	; (800252c <system_setup+0x7c>)
 80024b8:	f00c fbec 	bl	800ec94 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80024bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80024c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ce:	4818      	ldr	r0, [pc, #96]	; (8002530 <system_setup+0x80>)
 80024d0:	f003 f9a4 	bl	800581c <HAL_ADCEx_Calibration_Start>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80024da:	f000 ff0d 	bl	80032f8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80024de:	220b      	movs	r2, #11
 80024e0:	4914      	ldr	r1, [pc, #80]	; (8002534 <system_setup+0x84>)
 80024e2:	4813      	ldr	r0, [pc, #76]	; (8002530 <system_setup+0x80>)
 80024e4:	f002 fa78 	bl	80049d8 <HAL_ADC_Start_DMA>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80024ee:	f000 ff03 	bl	80032f8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80024f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024fa:	480f      	ldr	r0, [pc, #60]	; (8002538 <system_setup+0x88>)
 80024fc:	f003 f98e 	bl	800581c <HAL_ADCEx_Calibration_Start>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002506:	f000 fef7 	bl	80032f8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800250a:	2204      	movs	r2, #4
 800250c:	490b      	ldr	r1, [pc, #44]	; (800253c <system_setup+0x8c>)
 800250e:	480a      	ldr	r0, [pc, #40]	; (8002538 <system_setup+0x88>)
 8002510:	f002 fa62 	bl	80049d8 <HAL_ADC_Start_DMA>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800251a:	f000 feed 	bl	80032f8 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800251e:	2201      	movs	r2, #1
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <system_setup+0x90>)
 8002522:	4808      	ldr	r0, [pc, #32]	; (8002544 <system_setup+0x94>)
 8002524:	f00e f896 	bl	8010654 <HAL_UART_Receive_IT>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	240005ec 	.word	0x240005ec
 8002530:	2400013c 	.word	0x2400013c
 8002534:	24000cc0 	.word	0x24000cc0
 8002538:	240001a0 	.word	0x240001a0
 800253c:	24000ce0 	.word	0x24000ce0
 8002540:	24000c70 	.word	0x24000c70
 8002544:	24000638 	.word	0x24000638

08002548 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <get_uptime+0x88>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <get_uptime+0x8c>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <get_uptime+0x88>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	429a      	cmp	r2, r3
 8002568:	d005      	beq.n	8002576 <get_uptime+0x2e>
		ms = uptime_millis;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <get_uptime+0x88>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <get_uptime+0x8c>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800257c:	fb03 f202 	mul.w	r2, r3, r2
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <get_uptime+0x8c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	3301      	adds	r3, #1
 8002586:	4914      	ldr	r1, [pc, #80]	; (80025d8 <get_uptime+0x90>)
 8002588:	fba1 1303 	umull	r1, r3, r1, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	6939      	ldr	r1, [r7, #16]
 8002590:	fbb1 f3f3 	udiv	r3, r1, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	0e1b      	lsrs	r3, r3, #24
 800259c:	b2da      	uxtb	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0c1a      	lsrs	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	0a1a      	lsrs	r2, r3, #8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3302      	adds	r3, #2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3303      	adds	r3, #3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	24000c4c 	.word	0x24000c4c
 80025d4:	e000e010 	.word	0xe000e010
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	4821      	ldr	r0, [pc, #132]	; (8002674 <getTimestamp+0x98>)
 80025ee:	f00b fc2f 	bl	800de50 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	481e      	ldr	r0, [pc, #120]	; (8002674 <getTimestamp+0x98>)
 80025fc:	f00b fd0c 	bl	800e018 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2264      	movs	r2, #100	; 0x64
 8002604:	fb03 f202 	mul.w	r2, r3, r2
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <getTimestamp+0x9c>)
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	7b7a      	ldrb	r2, [r7, #13]
 800261a:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3302      	adds	r3, #2
 8002620:	7bba      	ldrb	r2, [r7, #14]
 8002622:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3303      	adds	r3, #3
 8002628:	7c3a      	ldrb	r2, [r7, #16]
 800262a:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	7c7a      	ldrb	r2, [r7, #17]
 8002632:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3305      	adds	r3, #5
 8002638:	7cba      	ldrb	r2, [r7, #18]
 800263a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	0e1a      	lsrs	r2, r3, #24
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3306      	adds	r3, #6
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	0c1a      	lsrs	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3307      	adds	r3, #7
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	0a1a      	lsrs	r2, r3, #8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3308      	adds	r3, #8
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3309      	adds	r3, #9
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	240003d4 	.word	0x240003d4
 8002678:	000f4240 	.word	0x000f4240

0800267c <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002682:	bf00      	nop
 8002684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002688:	4833      	ldr	r0, [pc, #204]	; (8002758 <sample_pmt+0xdc>)
 800268a:	f006 fee7 	bl	800945c <HAL_GPIO_ReadPin>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f7      	bne.n	8002684 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002694:	200a      	movs	r0, #10
 8002696:	f014 fb33 	bl	8016d00 <malloc>
 800269a:	4603      	mov	r3, r0
 800269c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800269e:	2002      	movs	r0, #2
 80026a0:	f014 fb2e 	bl	8016d00 <malloc>
 80026a4:	4603      	mov	r3, r0
 80026a6:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80026a8:	2004      	movs	r0, #4
 80026aa:	f014 fb29 	bl	8016d00 <malloc>
 80026ae:	4603      	mov	r3, r0
 80026b0:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ff48 	bl	8002548 <get_uptime>

	receive_pmt_spi(pmt_spi);
 80026b8:	6938      	ldr	r0, [r7, #16]
 80026ba:	f7ff fc59 	bl	8001f70 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	22bb      	movs	r2, #187	; 0xbb
 80026c2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	22bb      	movs	r2, #187	; 0xbb
 80026ca:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <sample_pmt+0xe0>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3302      	adds	r3, #2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <sample_pmt+0xe0>)
 80026de:	881a      	ldrh	r2, [r3, #0]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3303      	adds	r3, #3
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3304      	adds	r3, #4
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3305      	adds	r3, #5
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	7852      	ldrb	r2, [r2, #1]
 80026fa:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3306      	adds	r3, #6
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3307      	adds	r3, #7
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	7852      	ldrb	r2, [r2, #1]
 800270e:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3308      	adds	r3, #8
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	7892      	ldrb	r2, [r2, #2]
 8002718:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3309      	adds	r3, #9
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	78d2      	ldrb	r2, [r2, #3]
 8002722:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	220a      	movs	r2, #10
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fe9e 	bl	800246c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <sample_pmt+0xe4>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	1d39      	adds	r1, r7, #4
 8002736:	2300      	movs	r3, #0
 8002738:	2200      	movs	r2, #0
 800273a:	f011 f885 	bl	8013848 <osMessageQueuePut>
	free(buffer);
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f014 fae6 	bl	8016d10 <free>
	free(pmt_spi);
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f014 fae3 	bl	8016d10 <free>
	free(uptime);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f014 fae0 	bl	8016d10 <free>
}
 8002750:	bf00      	nop
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	58020000 	.word	0x58020000
 800275c:	24000c5c 	.word	0x24000c5c
 8002760:	24000c50 	.word	0x24000c50

08002764 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800276a:	bf00      	nop
 800276c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002770:	4848      	ldr	r0, [pc, #288]	; (8002894 <sample_erpa+0x130>)
 8002772:	f006 fe73 	bl	800945c <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f7      	bne.n	800276c <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800277c:	200e      	movs	r0, #14
 800277e:	f014 fabf 	bl	8016d00 <malloc>
 8002782:	4603      	mov	r3, r0
 8002784:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002786:	2002      	movs	r0, #2
 8002788:	f014 faba 	bl	8016d00 <malloc>
 800278c:	4603      	mov	r3, r0
 800278e:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002790:	2002      	movs	r0, #2
 8002792:	f014 fab5 	bl	8016d00 <malloc>
 8002796:	4603      	mov	r3, r0
 8002798:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800279a:	2004      	movs	r0, #4
 800279c:	f014 fab0 	bl	8016d00 <malloc>
 80027a0:	4603      	mov	r3, r0
 80027a2:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 80027a4:	23ff      	movs	r3, #255	; 0xff
 80027a6:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 80027a8:	6938      	ldr	r0, [r7, #16]
 80027aa:	f7ff fecd 	bl	8002548 <get_uptime>
	sweep_step = get_current_step();
 80027ae:	f7ff fce3 	bl	8002178 <get_current_step>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 80027b6:	69b8      	ldr	r0, [r7, #24]
 80027b8:	f7ff fbfe 	bl	8001fb8 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f7ff fc1f 	bl	8002000 <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	22aa      	movs	r2, #170	; 0xaa
 80027c6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	22aa      	movs	r2, #170	; 0xaa
 80027ce:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <sample_erpa+0x134>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0c1a      	lsrs	r2, r3, #16
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3302      	adds	r3, #2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <sample_erpa+0x134>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0a1a      	lsrs	r2, r3, #8
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3303      	adds	r3, #3
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <sample_erpa+0x134>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3304      	adds	r3, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	3305      	adds	r3, #5
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b29a      	uxth	r2, r3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3306      	adds	r3, #6
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	881a      	ldrh	r2, [r3, #0]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3307      	adds	r3, #7
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	3308      	adds	r3, #8
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3309      	adds	r3, #9
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	7852      	ldrb	r2, [r2, #1]
 800282e:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	330a      	adds	r3, #10
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	330b      	adds	r3, #11
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	7852      	ldrb	r2, [r2, #1]
 8002842:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	330c      	adds	r3, #12
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	7892      	ldrb	r2, [r2, #2]
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	330d      	adds	r3, #13
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	78d2      	ldrb	r2, [r2, #3]
 8002856:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	220e      	movs	r2, #14
 800285c:	69f9      	ldr	r1, [r7, #28]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fe04 	bl	800246c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <sample_erpa+0x138>)
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	1d39      	adds	r1, r7, #4
 800286a:	2300      	movs	r3, #0
 800286c:	2200      	movs	r2, #0
 800286e:	f010 ffeb 	bl	8013848 <osMessageQueuePut>
	free(buffer);
 8002872:	69f8      	ldr	r0, [r7, #28]
 8002874:	f014 fa4c 	bl	8016d10 <free>
	free(erpa_spi);
 8002878:	69b8      	ldr	r0, [r7, #24]
 800287a:	f014 fa49 	bl	8016d10 <free>
	free(erpa_adc);
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f014 fa46 	bl	8016d10 <free>
	free(uptime);
 8002884:	6938      	ldr	r0, [r7, #16]
 8002886:	f014 fa43 	bl	8016d10 <free>
}
 800288a:	bf00      	nop
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	58020400 	.word	0x58020400
 8002898:	24000c60 	.word	0x24000c60
 800289c:	24000c50 	.word	0x24000c50

080028a0 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80028a6:	2032      	movs	r0, #50	; 0x32
 80028a8:	f014 fa2a 	bl	8016d00 <malloc>
 80028ac:	4603      	mov	r3, r0
 80028ae:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80028b0:	2008      	movs	r0, #8
 80028b2:	f014 fa25 	bl	8016d00 <malloc>
 80028b6:	4603      	mov	r3, r0
 80028b8:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80028ba:	200a      	movs	r0, #10
 80028bc:	f014 fa20 	bl	8016d00 <malloc>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fe89 	bl	80025dc <getTimestamp>

	if (TEMPERATURE_COUNTER > 999) {
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <sample_hk+0x78>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d2:	db25      	blt.n	8002920 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 80028d4:	6938      	ldr	r0, [r7, #16]
 80028d6:	f7ff fba5 	bl	8002024 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <sample_hk+0x7c>)
 80028e4:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	3302      	adds	r3, #2
 80028ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <sample_hk+0x7c>)
 80028f2:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3304      	adds	r3, #4
 80028f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <sample_hk+0x7c>)
 8002900:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	3306      	adds	r3, #6
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <sample_hk+0x7c>)
 800290e:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002910:	4b01      	ldr	r3, [pc, #4]	; (8002918 <sample_hk+0x78>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e01f      	b.n	8002958 <sample_hk+0xb8>
 8002918:	24000004 	.word	0x24000004
 800291c:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 8002920:	4b9f      	ldr	r3, [pc, #636]	; (8002ba0 <sample_hk+0x300>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a9e      	ldr	r2, [pc, #632]	; (8002ba0 <sample_hk+0x300>)
 8002928:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800292a:	4b9e      	ldr	r3, [pc, #632]	; (8002ba4 <sample_hk+0x304>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b21a      	sxth	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002934:	4b9b      	ldr	r3, [pc, #620]	; (8002ba4 <sample_hk+0x304>)
 8002936:	885a      	ldrh	r2, [r3, #2]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3302      	adds	r3, #2
 800293c:	b212      	sxth	r2, r2
 800293e:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002940:	4b98      	ldr	r3, [pc, #608]	; (8002ba4 <sample_hk+0x304>)
 8002942:	889a      	ldrh	r2, [r3, #4]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	3304      	adds	r3, #4
 8002948:	b212      	sxth	r2, r2
 800294a:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 800294c:	4b95      	ldr	r3, [pc, #596]	; (8002ba4 <sample_hk+0x304>)
 800294e:	88da      	ldrh	r2, [r3, #6]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3306      	adds	r3, #6
 8002954:	b212      	sxth	r2, r2
 8002956:	801a      	strh	r2, [r3, #0]
	}

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	22cc      	movs	r2, #204	; 0xcc
 800295c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	22cc      	movs	r2, #204	; 0xcc
 8002964:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002966:	4b90      	ldr	r3, [pc, #576]	; (8002ba8 <sample_hk+0x308>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b29a      	uxth	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3302      	adds	r3, #2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002976:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <sample_hk+0x308>)
 8002978:	881a      	ldrh	r2, [r3, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3303      	adds	r3, #3
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002982:	4b8a      	ldr	r3, [pc, #552]	; (8002bac <sample_hk+0x30c>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b29a      	uxth	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3304      	adds	r3, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002992:	4b86      	ldr	r3, [pc, #536]	; (8002bac <sample_hk+0x30c>)
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3305      	adds	r3, #5
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800299e:	4b84      	ldr	r3, [pc, #528]	; (8002bb0 <sample_hk+0x310>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3306      	adds	r3, #6
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 80029ae:	4b80      	ldr	r3, [pc, #512]	; (8002bb0 <sample_hk+0x310>)
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3307      	adds	r3, #7
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c0:	121a      	asrs	r2, r3, #8
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3308      	adds	r3, #8
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3309      	adds	r3, #9
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3302      	adds	r3, #2
 80029dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e0:	121a      	asrs	r2, r3, #8
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	330a      	adds	r3, #10
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3302      	adds	r3, #2
 80029ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	330b      	adds	r3, #11
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	3304      	adds	r3, #4
 80029fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a02:	121a      	asrs	r2, r3, #8
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	330c      	adds	r3, #12
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	330d      	adds	r3, #13
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	3306      	adds	r3, #6
 8002a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a24:	121a      	asrs	r2, r3, #8
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	330e      	adds	r3, #14
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	3306      	adds	r3, #6
 8002a32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	330f      	adds	r3, #15
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <sample_hk+0x314>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002a4e:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <sample_hk+0x314>)
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3311      	adds	r3, #17
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002a5a:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <sample_hk+0x318>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3312      	adds	r3, #18
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002a6a:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <sample_hk+0x318>)
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3313      	adds	r3, #19
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <sample_hk+0x31c>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3314      	adds	r3, #20
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002a86:	4b4d      	ldr	r3, [pc, #308]	; (8002bbc <sample_hk+0x31c>)
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3315      	adds	r3, #21
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002a92:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <sample_hk+0x320>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3316      	adds	r3, #22
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <sample_hk+0x320>)
 8002aa4:	881a      	ldrh	r2, [r3, #0]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3317      	adds	r3, #23
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002aae:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <sample_hk+0x324>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3318      	adds	r3, #24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002abe:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <sample_hk+0x324>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3319      	adds	r3, #25
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <sample_hk+0x328>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	331a      	adds	r3, #26
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <sample_hk+0x328>)
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	331b      	adds	r3, #27
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <sample_hk+0x32c>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	331c      	adds	r3, #28
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002af6:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <sample_hk+0x32c>)
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	331d      	adds	r3, #29
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002b02:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <sample_hk+0x330>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	331e      	adds	r3, #30
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <sample_hk+0x330>)
 8002b14:	881a      	ldrh	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	331f      	adds	r3, #31
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <sample_hk+0x334>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3320      	adds	r3, #32
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <sample_hk+0x334>)
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3321      	adds	r3, #33	; 0x21
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <sample_hk+0x338>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3322      	adds	r3, #34	; 0x22
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <sample_hk+0x338>)
 8002b4c:	881a      	ldrh	r2, [r3, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3323      	adds	r3, #35	; 0x23
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <sample_hk+0x33c>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3324      	adds	r3, #36	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <sample_hk+0x33c>)
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3325      	adds	r3, #37	; 0x25
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <sample_hk+0x340>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3326      	adds	r3, #38	; 0x26
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <sample_hk+0x340>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3327      	adds	r3, #39	; 0x27
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3328      	adds	r3, #40	; 0x28
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3329      	adds	r3, #41	; 0x29
 8002b9c:	e022      	b.n	8002be4 <sample_hk+0x344>
 8002b9e:	bf00      	nop
 8002ba0:	24000004 	.word	0x24000004
 8002ba4:	24000cec 	.word	0x24000cec
 8002ba8:	24000c64 	.word	0x24000c64
 8002bac:	24000c2e 	.word	0x24000c2e
 8002bb0:	24000c30 	.word	0x24000c30
 8002bb4:	24000c32 	.word	0x24000c32
 8002bb8:	24000c34 	.word	0x24000c34
 8002bbc:	24000c36 	.word	0x24000c36
 8002bc0:	24000c38 	.word	0x24000c38
 8002bc4:	24000c3a 	.word	0x24000c3a
 8002bc8:	24000c3c 	.word	0x24000c3c
 8002bcc:	24000c3e 	.word	0x24000c3e
 8002bd0:	24000c40 	.word	0x24000c40
 8002bd4:	24000c42 	.word	0x24000c42
 8002bd8:	24000c44 	.word	0x24000c44
 8002bdc:	24000c46 	.word	0x24000c46
 8002be0:	24000c48 	.word	0x24000c48
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	7852      	ldrb	r2, [r2, #1]
 8002be8:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	332a      	adds	r3, #42	; 0x2a
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	7892      	ldrb	r2, [r2, #2]
 8002bf2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	332b      	adds	r3, #43	; 0x2b
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	78d2      	ldrb	r2, [r2, #3]
 8002bfc:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	332c      	adds	r3, #44	; 0x2c
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	7912      	ldrb	r2, [r2, #4]
 8002c06:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	332d      	adds	r3, #45	; 0x2d
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	7952      	ldrb	r2, [r2, #5]
 8002c10:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	332e      	adds	r3, #46	; 0x2e
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	7992      	ldrb	r2, [r2, #6]
 8002c1a:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	332f      	adds	r3, #47	; 0x2f
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	79d2      	ldrb	r2, [r2, #7]
 8002c24:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3330      	adds	r3, #48	; 0x30
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	7a12      	ldrb	r2, [r2, #8]
 8002c2e:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3331      	adds	r3, #49	; 0x31
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	7a52      	ldrb	r2, [r2, #9]
 8002c38:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2232      	movs	r2, #50	; 0x32
 8002c3e:	6979      	ldr	r1, [r7, #20]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc13 	bl	800246c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <sample_hk+0x3d0>)
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	1d39      	adds	r1, r7, #4
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f010 fdfa 	bl	8013848 <osMessageQueuePut>

	free(buffer);
 8002c54:	6978      	ldr	r0, [r7, #20]
 8002c56:	f014 f85b 	bl	8016d10 <free>
	free(hk_i2c);
 8002c5a:	6938      	ldr	r0, [r7, #16]
 8002c5c:	f014 f858 	bl	8016d10 <free>
	free(timestamp);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f014 f855 	bl	8016d10 <free>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000c50 	.word	0x24000c50

08002c74 <PMT_init>:
 * @brief  Function implementing the PMT_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <PMT_init+0x38>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c84:	2200      	movs	r2, #0
 8002c86:	2101      	movs	r1, #1
 8002c88:	f010 fd05 	bl	8013696 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <PMT_init+0x3c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <PMT_init+0x30>
			sample_pmt();
 8002c94:	f7ff fcf2 	bl	800267c <sample_pmt>
			pmt_seq++;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <PMT_init+0x40>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <PMT_init+0x40>)
 8002ca2:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002ca4:	f010 fbc4 	bl	8013430 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002ca8:	e7e8      	b.n	8002c7c <PMT_init+0x8>
 8002caa:	bf00      	nop
 8002cac:	24000c6c 	.word	0x24000c6c
 8002cb0:	24000c66 	.word	0x24000c66
 8002cb4:	24000c5c 	.word	0x24000c5c

08002cb8 <ERPA_init>:
 * @brief Function implementing the ERPA_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <ERPA_init+0x34>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2102      	movs	r1, #2
 8002ccc:	f010 fce3 	bl	8013696 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <ERPA_init+0x38>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <ERPA_init+0x2e>
			sample_erpa();
 8002cd8:	f7ff fd44 	bl	8002764 <sample_erpa>
			erpa_seq++;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <ERPA_init+0x3c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <ERPA_init+0x3c>)
 8002ce4:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002ce6:	f010 fba3 	bl	8013430 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002cea:	e7e9      	b.n	8002cc0 <ERPA_init+0x8>
 8002cec:	24000c6c 	.word	0x24000c6c
 8002cf0:	24000c67 	.word	0x24000c67
 8002cf4:	24000c60 	.word	0x24000c60

08002cf8 <HK_init>:
 * @brief Function implementing the HK_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HK_init+0x38>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	f010 fcc3 	bl	8013696 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HK_init+0x3c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HK_init+0x30>
			sample_hk();
 8002d18:	f7ff fdc2 	bl	80028a0 <sample_hk>
			hk_seq++;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HK_init+0x40>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HK_init+0x40>)
 8002d26:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002d28:	f010 fb82 	bl	8013430 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d2c:	e7e8      	b.n	8002d00 <HK_init+0x8>
 8002d2e:	bf00      	nop
 8002d30:	24000c6c 	.word	0x24000c6c
 8002d34:	24000c68 	.word	0x24000c68
 8002d38:	24000c64 	.word	0x24000c64

08002d3c <GPIO_on_init>:
 * @brief Function implementing the GPIO_on_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <GPIO_on_init+0x9c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f010 fb91 	bl	8013470 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <GPIO_on_init+0xa0>)
 8002d50:	2104      	movs	r1, #4
 8002d52:	2201      	movs	r2, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f006 fb99 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d5a:	2064      	movs	r0, #100	; 0x64
 8002d5c:	f010 fba9 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <GPIO_on_init+0xa0>)
 8002d62:	2120      	movs	r1, #32
 8002d64:	2201      	movs	r2, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f006 fb90 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d6c:	2064      	movs	r0, #100	; 0x64
 8002d6e:	f010 fba0 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <GPIO_on_init+0xa4>)
 8002d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f006 fb86 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d80:	2064      	movs	r0, #100	; 0x64
 8002d82:	f010 fb96 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <GPIO_on_init+0xa4>)
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f006 fb7d 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	f010 fb8d 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <GPIO_on_init+0xa4>)
 8002d9a:	2140      	movs	r1, #64	; 0x40
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f006 fb74 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002da4:	2064      	movs	r0, #100	; 0x64
 8002da6:	f010 fb84 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <GPIO_on_init+0xa4>)
 8002dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002db0:	2201      	movs	r2, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f006 fb6a 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002db8:	2064      	movs	r0, #100	; 0x64
 8002dba:	f010 fb7a 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <GPIO_on_init+0xa4>)
 8002dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f006 fb60 	bl	800948c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <GPIO_on_init+0x9c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f010 fb4d 	bl	8013470 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002dd6:	e7ba      	b.n	8002d4e <GPIO_on_init+0x12>
 8002dd8:	24000750 	.word	0x24000750
 8002ddc:	58020400 	.word	0x58020400
 8002de0:	58020800 	.word	0x58020800

08002de4 <GPIO_off_init>:
 * @brief Function implementing the GPIO_off_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <GPIO_off_init+0x9c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f010 fb3d 	bl	8013470 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <GPIO_off_init+0xa0>)
 8002df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f006 fb44 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002e04:	2064      	movs	r0, #100	; 0x64
 8002e06:	f010 fb54 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <GPIO_off_init+0xa0>)
 8002e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e10:	2200      	movs	r2, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 fb3a 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	f010 fb4a 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <GPIO_off_init+0xa0>)
 8002e20:	2140      	movs	r1, #64	; 0x40
 8002e22:	2200      	movs	r2, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f006 fb31 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002e2a:	2064      	movs	r0, #100	; 0x64
 8002e2c:	f010 fb41 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <GPIO_off_init+0xa0>)
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	2200      	movs	r2, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f006 fb28 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002e3c:	2064      	movs	r0, #100	; 0x64
 8002e3e:	f010 fb38 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <GPIO_off_init+0xa0>)
 8002e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f006 fb1e 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002e50:	2064      	movs	r0, #100	; 0x64
 8002e52:	f010 fb2e 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <GPIO_off_init+0xa4>)
 8002e58:	2120      	movs	r1, #32
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f006 fb15 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8002e62:	2064      	movs	r0, #100	; 0x64
 8002e64:	f010 fb25 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <GPIO_off_init+0xa4>)
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f006 fb0c 	bl	800948c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <GPIO_off_init+0x9c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f010 faf9 	bl	8013470 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002e7e:	e7ba      	b.n	8002df6 <GPIO_off_init+0x12>
 8002e80:	240009b0 	.word	0x240009b0
 8002e84:	58020800 	.word	0x58020800
 8002e88:	58020400 	.word	0x58020400

08002e8c <UART_TX_init>:
 * and transmitting data as long as the task is running.
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002e9c:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <UART_TX_init+0xa4>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4923      	ldr	r1, [pc, #140]	; (8002f34 <UART_TX_init+0xa8>)
 8002ea8:	f010 fd2e 	bl	8013908 <osMessageQueueGet>
 8002eac:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d121      	bne.n	8002ef8 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <UART_TX_init+0xa8>)
 8002eb6:	889b      	ldrh	r3, [r3, #4]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec2:	d219      	bcs.n	8002ef8 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <UART_TX_init+0xac>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <UART_TX_init+0xa8>)
 8002ecc:	6811      	ldr	r1, [r2, #0]
 8002ece:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <UART_TX_init+0xa8>)
 8002ed0:	8892      	ldrh	r2, [r2, #4]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f013 ff24 	bl	8016d20 <memcpy>
					free(msg.array);
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <UART_TX_init+0xa8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f013 ff17 	bl	8016d10 <free>
					total_size += msg.size;
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <UART_TX_init+0xa8>)
 8002ee4:	889b      	ldrh	r3, [r3, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d803      	bhi.n	8002f00 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ce      	beq.n	8002e9c <UART_TX_init+0x10>
 8002efe:	e000      	b.n	8002f02 <UART_TX_init+0x76>
						break;
 8002f00:	bf00      	nop

		if (total_size > 0) {
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	490a      	ldr	r1, [pc, #40]	; (8002f38 <UART_TX_init+0xac>)
 8002f10:	480a      	ldr	r0, [pc, #40]	; (8002f3c <UART_TX_init+0xb0>)
 8002f12:	f00d fbeb 	bl	80106ec <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002f16:	e001      	b.n	8002f1c <UART_TX_init+0x90>
				osThreadYield();
 8002f18:	f010 fa8a 	bl	8013430 <osThreadYield>
			while (tx_flag == 0) {
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <UART_TX_init+0xb4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f9      	beq.n	8002f18 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <UART_TX_init+0xb4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002f2a:	f010 fa81 	bl	8013430 <osThreadYield>
		total_size = 0;
 8002f2e:	e7b3      	b.n	8002e98 <UART_TX_init+0xc>
 8002f30:	24000c50 	.word	0x24000c50
 8002f34:	24000c54 	.word	0x24000c54
 8002f38:	24000cf4 	.word	0x24000cf4
 8002f3c:	24000638 	.word	0x24000638
 8002f40:	24000000 	.word	0x24000000

08002f44 <Voltage_Monitor_init>:
 * @brief Function implementing the Voltage_Monitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <Voltage_Monitor_init+0xbc>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f54:	2200      	movs	r2, #0
 8002f56:	2108      	movs	r1, #8
 8002f58:	f010 fb9d 	bl	8013696 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002f5c:	2014      	movs	r0, #20
 8002f5e:	f013 fecf 	bl	8016d00 <malloc>
 8002f62:	4603      	mov	r3, r0
 8002f64:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002f66:	2008      	movs	r0, #8
 8002f68:	f013 feca 	bl	8016d00 <malloc>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff f887 	bl	8002084 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002f76:	68b8      	ldr	r0, [r7, #8]
 8002f78:	f7ff f8d6 	bl	8002128 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	885a      	ldrh	r2, [r3, #2]
 8002f80:	4b20      	ldr	r3, [pc, #128]	; (8003004 <Voltage_Monitor_init+0xc0>)
 8002f82:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <Voltage_Monitor_init+0xc4>)
 8002f8a:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <Voltage_Monitor_init+0xc8>)
 8002f92:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	885a      	ldrh	r2, [r3, #2]
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <Voltage_Monitor_init+0xcc>)
 8002f9a:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	889a      	ldrh	r2, [r3, #4]
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <Voltage_Monitor_init+0xd0>)
 8002fa2:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	88da      	ldrh	r2, [r3, #6]
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <Voltage_Monitor_init+0xd4>)
 8002faa:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	899a      	ldrh	r2, [r3, #12]
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <Voltage_Monitor_init+0xd8>)
 8002fb2:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88da      	ldrh	r2, [r3, #6]
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <Voltage_Monitor_init+0xdc>)
 8002fba:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	889a      	ldrh	r2, [r3, #4]
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <Voltage_Monitor_init+0xe0>)
 8002fc2:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	89da      	ldrh	r2, [r3, #14]
 8002fc8:	4b17      	ldr	r3, [pc, #92]	; (8003028 <Voltage_Monitor_init+0xe4>)
 8002fca:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8a1a      	ldrh	r2, [r3, #16]
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <Voltage_Monitor_init+0xe8>)
 8002fd2:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	891a      	ldrh	r2, [r3, #8]
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <Voltage_Monitor_init+0xec>)
 8002fda:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	895a      	ldrh	r2, [r3, #10]
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <Voltage_Monitor_init+0xf0>)
 8002fe2:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8a5a      	ldrh	r2, [r3, #18]
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <Voltage_Monitor_init+0xf4>)
 8002fea:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f013 fe8f 	bl	8016d10 <free>
		free(hk_adc3);
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f013 fe8c 	bl	8016d10 <free>

		osThreadYield();
 8002ff8:	f010 fa1a 	bl	8013430 <osThreadYield>
	for (;;) {
 8002ffc:	e7a6      	b.n	8002f4c <Voltage_Monitor_init+0x8>
 8002ffe:	bf00      	nop
 8003000:	24000c6c 	.word	0x24000c6c
 8003004:	24000c2e 	.word	0x24000c2e
 8003008:	24000c30 	.word	0x24000c30
 800300c:	24000c32 	.word	0x24000c32
 8003010:	24000c34 	.word	0x24000c34
 8003014:	24000c36 	.word	0x24000c36
 8003018:	24000c38 	.word	0x24000c38
 800301c:	24000c3a 	.word	0x24000c3a
 8003020:	24000c3c 	.word	0x24000c3c
 8003024:	24000c3e 	.word	0x24000c3e
 8003028:	24000c40 	.word	0x24000c40
 800302c:	24000c42 	.word	0x24000c42
 8003030:	24000c44 	.word	0x24000c44
 8003034:	24000c46 	.word	0x24000c46
 8003038:	24000c48 	.word	0x24000c48

0800303c <FLAG_init>:
 * @brief Function implementing the FLAG_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <FLAG_init+0x38>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f010 fb03 	bl	8013654 <osEventFlagsGet>
 800304e:	4603      	mov	r3, r0
 8003050:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0316 	and.w	r3, r3, #22
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <FLAG_init+0x38>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2116      	movs	r1, #22
 8003062:	4618      	mov	r0, r3
 8003064:	f010 fac4 	bl	80135f0 <osEventFlagsClear>
			enter_stop();
 8003068:	f7ff f8e8 	bl	800223c <enter_stop>
		}
		osDelay(1);
 800306c:	2001      	movs	r0, #1
 800306e:	f010 fa20 	bl	80134b2 <osDelay>
	for (;;) {
 8003072:	e7e7      	b.n	8003044 <FLAG_init+0x8>
 8003074:	24000c6c 	.word	0x24000c6c

08003078 <Flight_init>:
 * @brief Function implementing the Flight_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Flight_init */
void Flight_init(void *argument) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af02      	add	r7, sp, #8
 800307e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Flight_init */
	osThreadSuspend(Flight_taskHandle);
 8003080:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <Flight_init+0x12c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f010 f9f3 	bl	8013470 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <Flight_init+0x130>)
 800308c:	2104      	movs	r1, #4
 800308e:	2201      	movs	r2, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f006 f9fb 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003096:	2064      	movs	r0, #100	; 0x64
 8003098:	f010 fa0b 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 800309c:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <Flight_init+0x130>)
 800309e:	2120      	movs	r1, #32
 80030a0:	2201      	movs	r2, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f006 f9f2 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	f010 fa02 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <Flight_init+0x134>)
 80030b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030b4:	2201      	movs	r2, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f006 f9e8 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	f010 f9f8 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <Flight_init+0x134>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	2201      	movs	r2, #1
 80030c8:	4618      	mov	r0, r3
 80030ca:	f006 f9df 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 80030ce:	2064      	movs	r0, #100	; 0x64
 80030d0:	f010 f9ef 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <Flight_init+0x134>)
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	2201      	movs	r2, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f006 f9d6 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	f010 f9e6 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <Flight_init+0x134>)
 80030e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ec:	2201      	movs	r2, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f006 f9cc 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 80030f4:	2064      	movs	r0, #100	; 0x64
 80030f6:	f010 f9dc 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 80030fa:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <Flight_init+0x134>)
 80030fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003100:	2201      	movs	r2, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f006 f9c2 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(300);
 8003108:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800310c:	f010 f9d1 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);// Enable n200v
 8003110:	4b26      	ldr	r3, [pc, #152]	; (80031ac <Flight_init+0x134>)
 8003112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003116:	2201      	movs	r2, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f006 f9b7 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(300);
 800311e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003122:	f010 f9c6 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);// Enable n800v
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <Flight_init+0x130>)
 8003128:	2140      	movs	r1, #64	; 0x40
 800312a:	2201      	movs	r2, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f006 f9ad 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(300);
 8003132:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003136:	f010 f9bc 	bl	80134b2 <osDelay>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2320      	movs	r3, #32
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <Flight_init+0x138>)
 8003142:	2100      	movs	r1, #0
 8003144:	481b      	ldr	r0, [pc, #108]	; (80031b4 <Flight_init+0x13c>)
 8003146:	f002 fe05 	bl	8005d54 <HAL_DAC_Start_DMA>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 800314a:	210c      	movs	r1, #12
 800314c:	481a      	ldr	r0, [pc, #104]	; (80031b8 <Flight_init+0x140>)
 800314e:	f00b fda1 	bl	800ec94 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <Flight_init+0x144>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <Flight_init+0x148>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f010 fa02 	bl	8013568 <osEventFlagsSet>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 8003164:	2100      	movs	r1, #0
 8003166:	4817      	ldr	r0, [pc, #92]	; (80031c4 <Flight_init+0x14c>)
 8003168:	f00b fd94 	bl	800ec94 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <Flight_init+0x150>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <Flight_init+0x148>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f010 f9f5 	bl	8013568 <osEventFlagsSet>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);				// HK packet on
 800317e:	2100      	movs	r1, #0
 8003180:	4812      	ldr	r0, [pc, #72]	; (80031cc <Flight_init+0x154>)
 8003182:	f00b fd87 	bl	800ec94 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <Flight_init+0x158>)
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <Flight_init+0x148>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2104      	movs	r1, #4
 8003192:	4618      	mov	r0, r3
 8003194:	f010 f9e8 	bl	8013568 <osEventFlagsSet>

		osThreadSuspend(Flight_taskHandle);
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <Flight_init+0x12c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f010 f967 	bl	8013470 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80031a2:	e772      	b.n	800308a <Flight_init+0x12>
 80031a4:	24000c1c 	.word	0x24000c1c
 80031a8:	58020400 	.word	0x58020400
 80031ac:	58020800 	.word	0x58020800
 80031b0:	24000010 	.word	0x24000010
 80031b4:	240002f4 	.word	0x240002f4
 80031b8:	24000554 	.word	0x24000554
 80031bc:	24000c67 	.word	0x24000c67
 80031c0:	24000c6c 	.word	0x24000c6c
 80031c4:	24000508 	.word	0x24000508
 80031c8:	24000c66 	.word	0x24000c66
 80031cc:	240005a0 	.word	0x240005a0
 80031d0:	24000c68 	.word	0x24000c68

080031d4 <UnFlight_init>:
 * @brief Function implementing the UnFlight_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UnFlight_init */
void UnFlight_init(void *argument) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UnFlight_init */
	osThreadSuspend(UnFlight_taskHandle);
 80031dc:	4b37      	ldr	r3, [pc, #220]	; (80032bc <UnFlight_init+0xe8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f010 f945 	bl	8013470 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80031e6:	2100      	movs	r1, #0
 80031e8:	4835      	ldr	r0, [pc, #212]	; (80032c0 <UnFlight_init+0xec>)
 80031ea:	f00b fead 	bl	800ef48 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80031ee:	2100      	movs	r1, #0
 80031f0:	4834      	ldr	r0, [pc, #208]	; (80032c4 <UnFlight_init+0xf0>)
 80031f2:	f00b fea9 	bl	800ef48 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80031f6:	210c      	movs	r1, #12
 80031f8:	4833      	ldr	r0, [pc, #204]	; (80032c8 <UnFlight_init+0xf4>)
 80031fa:	f00b fea5 	bl	800ef48 <HAL_TIM_OC_Stop_IT>
		osDelay(100);
 80031fe:	2064      	movs	r0, #100	; 0x64
 8003200:	f010 f957 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET); // Enable n800v
 8003204:	4b31      	ldr	r3, [pc, #196]	; (80032cc <UnFlight_init+0xf8>)
 8003206:	2140      	movs	r1, #64	; 0x40
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f006 f93e 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003210:	2064      	movs	r0, #100	; 0x64
 8003212:	f010 f94e 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET); // Enable n200v
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <UnFlight_init+0xfc>)
 8003218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800321c:	2200      	movs	r2, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f006 f934 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	f010 f944 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v off pc9
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <UnFlight_init+0xfc>)
 800322c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f006 f92a 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003238:	2064      	movs	r0, #100	; 0x64
 800323a:	f010 f93a 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v off pc8
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <UnFlight_init+0xfc>)
 8003240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003244:	2200      	movs	r2, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f006 f920 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 800324c:	2064      	movs	r0, #100	; 0x64
 800324e:	f010 f930 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 off pc6
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <UnFlight_init+0xfc>)
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	2200      	movs	r2, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f006 f917 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 800325e:	2064      	movs	r0, #100	; 0x64
 8003260:	f010 f927 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v off pc7
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <UnFlight_init+0xfc>)
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	2200      	movs	r2, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f006 f90e 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003270:	2064      	movs	r0, #100	; 0x64
 8003272:	f010 f91e 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 off pc1
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <UnFlight_init+0xfc>)
 8003278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800327c:	2200      	movs	r2, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f006 f904 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003284:	2064      	movs	r0, #100	; 0x64
 8003286:	f010 f914 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys off pb5
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <UnFlight_init+0xf8>)
 800328c:	2120      	movs	r1, #32
 800328e:	2200      	movs	r2, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f006 f8fb 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 8003296:	2064      	movs	r0, #100	; 0x64
 8003298:	f010 f90b 	bl	80134b2 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <UnFlight_init+0xf8>)
 800329e:	2104      	movs	r1, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f006 f8f2 	bl	800948c <HAL_GPIO_WritePin>
		osDelay(100);
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	f010 f902 	bl	80134b2 <osDelay>

		osThreadSuspend(UnFlight_taskHandle);
 80032ae:	4b03      	ldr	r3, [pc, #12]	; (80032bc <UnFlight_init+0xe8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f010 f8dc 	bl	8013470 <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80032b8:	e795      	b.n	80031e6 <UnFlight_init+0x12>
 80032ba:	bf00      	nop
 80032bc:	24000c20 	.word	0x24000c20
 80032c0:	240005a0 	.word	0x240005a0
 80032c4:	24000508 	.word	0x24000508
 80032c8:	24000554 	.word	0x24000554
 80032cc:	58020400 	.word	0x58020400
 80032d0:	58020800 	.word	0x58020800

080032d4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80032e6:	f000 ff85 	bl	80041f4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40001000 	.word	0x40001000

080032f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
}
 80032fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003300:	e7fe      	b.n	8003300 <Error_Handler+0x8>
	...

08003304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_MspInit+0x38>)
 800330c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_MspInit+0x38>)
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_MspInit+0x38>)
 800331c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	210f      	movs	r1, #15
 800332c:	f06f 0001 	mvn.w	r0, #1
 8003330:	f002 fc6e 	bl	8005c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400

08003340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08e      	sub	sp, #56	; 0x38
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a7b      	ldr	r2, [pc, #492]	; (800354c <HAL_ADC_MspInit+0x20c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f040 8091 	bne.w	8003486 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003364:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003366:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800336a:	4a79      	ldr	r2, [pc, #484]	; (8003550 <HAL_ADC_MspInit+0x210>)
 800336c:	f043 0320 	orr.w	r3, r3, #32
 8003370:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003374:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003382:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003388:	4a71      	ldr	r2, [pc, #452]	; (8003550 <HAL_ADC_MspInit+0x210>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b0:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	4a62      	ldr	r2, [pc, #392]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ce:	4b60      	ldr	r3, [pc, #384]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80033dc:	2333      	movs	r3, #51	; 0x33
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e0:	2303      	movs	r3, #3
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ec:	4619      	mov	r1, r3
 80033ee:	4859      	ldr	r0, [pc, #356]	; (8003554 <HAL_ADC_MspInit+0x214>)
 80033f0:	f005 fe84 	bl	80090fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80033f4:	23ce      	movs	r3, #206	; 0xce
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f8:	2303      	movs	r3, #3
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003404:	4619      	mov	r1, r3
 8003406:	4854      	ldr	r0, [pc, #336]	; (8003558 <HAL_ADC_MspInit+0x218>)
 8003408:	f005 fe78 	bl	80090fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800340c:	2303      	movs	r3, #3
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003410:	2303      	movs	r3, #3
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341c:	4619      	mov	r1, r3
 800341e:	484f      	ldr	r0, [pc, #316]	; (800355c <HAL_ADC_MspInit+0x21c>)
 8003420:	f005 fe6c 	bl	80090fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003424:	4b4e      	ldr	r3, [pc, #312]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003426:	4a4f      	ldr	r2, [pc, #316]	; (8003564 <HAL_ADC_MspInit+0x224>)
 8003428:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800342a:	4b4d      	ldr	r3, [pc, #308]	; (8003560 <HAL_ADC_MspInit+0x220>)
 800342c:	2209      	movs	r2, #9
 800342e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003436:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	4b48      	ldr	r3, [pc, #288]	; (8003560 <HAL_ADC_MspInit+0x220>)
 800343e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003442:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800344c:	4b44      	ldr	r3, [pc, #272]	; (8003560 <HAL_ADC_MspInit+0x220>)
 800344e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003452:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003454:	4b42      	ldr	r3, [pc, #264]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_ADC_MspInit+0x220>)
 800345e:	2200      	movs	r2, #0
 8003460:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003464:	2200      	movs	r2, #0
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003468:	483d      	ldr	r0, [pc, #244]	; (8003560 <HAL_ADC_MspInit+0x220>)
 800346a:	f002 ffff 	bl	800646c <HAL_DMA_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003474:	f7ff ff40 	bl	80032f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a39      	ldr	r2, [pc, #228]	; (8003560 <HAL_ADC_MspInit+0x220>)
 800347c:	64da      	str	r2, [r3, #76]	; 0x4c
 800347e:	4a38      	ldr	r2, [pc, #224]	; (8003560 <HAL_ADC_MspInit+0x220>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003484:	e05e      	b.n	8003544 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a37      	ldr	r2, [pc, #220]	; (8003568 <HAL_ADC_MspInit+0x228>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d159      	bne.n	8003544 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003496:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <HAL_ADC_MspInit+0x210>)
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80034a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80034b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_ADC_MspInit+0x210>)
 80034c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80034cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80034d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80034d4:	f000 feba 	bl	800424c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80034d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80034dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80034e0:	f000 feb4 	bl	800424c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_ADC_MspInit+0x22c>)
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_ADC_MspInit+0x230>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_ADC_MspInit+0x22c>)
 80034ec:	2273      	movs	r2, #115	; 0x73
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_ADC_MspInit+0x22c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_ADC_MspInit+0x22c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_ADC_MspInit+0x22c>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003502:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_ADC_MspInit+0x22c>)
 8003506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_ADC_MspInit+0x22c>)
 800350e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003512:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_ADC_MspInit+0x22c>)
 8003516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800351a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <HAL_ADC_MspInit+0x22c>)
 800351e:	2200      	movs	r2, #0
 8003520:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_ADC_MspInit+0x22c>)
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003528:	4810      	ldr	r0, [pc, #64]	; (800356c <HAL_ADC_MspInit+0x22c>)
 800352a:	f002 ff9f 	bl	800646c <HAL_DMA_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003534:	f7ff fee0 	bl	80032f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <HAL_ADC_MspInit+0x22c>)
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <HAL_ADC_MspInit+0x22c>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003544:	bf00      	nop
 8003546:	3738      	adds	r7, #56	; 0x38
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40022000 	.word	0x40022000
 8003550:	58024400 	.word	0x58024400
 8003554:	58020800 	.word	0x58020800
 8003558:	58020000 	.word	0x58020000
 800355c:	58020400 	.word	0x58020400
 8003560:	24000204 	.word	0x24000204
 8003564:	40020010 	.word	0x40020010
 8003568:	58026000 	.word	0x58026000
 800356c:	2400027c 	.word	0x2400027c
 8003570:	40020028 	.word	0x40020028

08003574 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a34      	ldr	r2, [pc, #208]	; (8003664 <HAL_DAC_MspInit+0xf0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d161      	bne.n	800365a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_DAC_MspInit+0xf4>)
 8003598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800359c:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_DAC_MspInit+0xf4>)
 800359e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_DAC_MspInit+0xf4>)
 80035a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_DAC_MspInit+0xf4>)
 80035b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <HAL_DAC_MspInit+0xf4>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_DAC_MspInit+0xf4>)
 80035c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035d2:	2310      	movs	r3, #16
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d6:	2303      	movs	r3, #3
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	4821      	ldr	r0, [pc, #132]	; (800366c <HAL_DAC_MspInit+0xf8>)
 80035e6:	f005 fd89 	bl	80090fc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 80035ec:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_DAC_MspInit+0x100>)
 80035ee:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 80035f2:	2243      	movs	r2, #67	; 0x43
 80035f4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 8003604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003608:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 800360c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003610:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 8003614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003618:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 800361c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003620:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 8003624:	2200      	movs	r2, #0
 8003626:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 800362a:	2200      	movs	r2, #0
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800362e:	4810      	ldr	r0, [pc, #64]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 8003630:	f002 ff1c 	bl	800646c <HAL_DMA_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800363a:	f7ff fe5d 	bl	80032f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_DAC_MspInit+0xfc>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2105      	movs	r1, #5
 800364e:	2036      	movs	r0, #54	; 0x36
 8003650:	f002 fade 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003654:	2036      	movs	r0, #54	; 0x36
 8003656:	f002 faf5 	bl	8005c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800365a:	bf00      	nop
 800365c:	3728      	adds	r7, #40	; 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40007400 	.word	0x40007400
 8003668:	58024400 	.word	0x58024400
 800366c:	58020000 	.word	0x58020000
 8003670:	24000308 	.word	0x24000308
 8003674:	40020088 	.word	0x40020088

08003678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0ba      	sub	sp, #232	; 0xe8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	22c0      	movs	r2, #192	; 0xc0
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f013 fb4f 	bl	8016d3c <memset>
  if(hi2c->Instance==I2C1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a27      	ldr	r2, [pc, #156]	; (8003740 <HAL_I2C_MspInit+0xc8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d146      	bne.n	8003736 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036a8:	f04f 0208 	mov.w	r2, #8
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ba:	f107 0310 	add.w	r3, r7, #16
 80036be:	4618      	mov	r0, r3
 80036c0:	f007 fda8 	bl	800b214 <HAL_RCCEx_PeriphCLKConfig>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80036ca:	f7ff fe15 	bl	80032f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_I2C_MspInit+0xcc>)
 80036d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_I2C_MspInit+0xcc>)
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_I2C_MspInit+0xcc>)
 80036e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f4:	2312      	movs	r3, #18
 80036f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003706:	2304      	movs	r3, #4
 8003708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003710:	4619      	mov	r1, r3
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <HAL_I2C_MspInit+0xd0>)
 8003714:	f005 fcf2 	bl	80090fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_I2C_MspInit+0xcc>)
 800371a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_I2C_MspInit+0xcc>)
 8003720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_I2C_MspInit+0xcc>)
 800372a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800372e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003736:	bf00      	nop
 8003738:	37e8      	adds	r7, #232	; 0xe8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40005400 	.word	0x40005400
 8003744:	58024400 	.word	0x58024400
 8003748:	58020400 	.word	0x58020400

0800374c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b0b2      	sub	sp, #200	; 0xc8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	22c0      	movs	r2, #192	; 0xc0
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f013 faed 	bl	8016d3c <memset>
  if(hrtc->Instance==RTC)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <HAL_RTC_MspInit+0x5c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d118      	bne.n	800379e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800376c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <HAL_RTC_MspInit+0x60>)
 800377a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4618      	mov	r0, r3
 8003784:	f007 fd46 	bl	800b214 <HAL_RCCEx_PeriphCLKConfig>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800378e:	f7ff fdb3 	bl	80032f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RTC_MspInit+0x64>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <HAL_RTC_MspInit+0x64>)
 8003798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800379e:	bf00      	nop
 80037a0:	37c8      	adds	r7, #200	; 0xc8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	58004000 	.word	0x58004000
 80037ac:	00019300 	.word	0x00019300
 80037b0:	58024400 	.word	0x58024400

080037b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0bc      	sub	sp, #240	; 0xf0
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037cc:	f107 0318 	add.w	r3, r7, #24
 80037d0:	22c0      	movs	r2, #192	; 0xc0
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f013 fab1 	bl	8016d3c <memset>
  if(hspi->Instance==SPI1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a4c      	ldr	r2, [pc, #304]	; (8003910 <HAL_SPI_MspInit+0x15c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d145      	bne.n	8003870 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80037e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f4:	f107 0318 	add.w	r3, r7, #24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f007 fd0b 	bl	800b214 <HAL_RCCEx_PeriphCLKConfig>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003804:	f7ff fd78 	bl	80032f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003808:	4b42      	ldr	r3, [pc, #264]	; (8003914 <HAL_SPI_MspInit+0x160>)
 800380a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800380e:	4a41      	ldr	r2, [pc, #260]	; (8003914 <HAL_SPI_MspInit+0x160>)
 8003810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003814:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003818:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <HAL_SPI_MspInit+0x160>)
 800381a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800381e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_SPI_MspInit+0x160>)
 8003828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382c:	4a39      	ldr	r2, [pc, #228]	; (8003914 <HAL_SPI_MspInit+0x160>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_SPI_MspInit+0x160>)
 8003838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003844:	2318      	movs	r3, #24
 8003846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800385c:	2305      	movs	r3, #5
 800385e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003866:	4619      	mov	r1, r3
 8003868:	482b      	ldr	r0, [pc, #172]	; (8003918 <HAL_SPI_MspInit+0x164>)
 800386a:	f005 fc47 	bl	80090fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800386e:	e04a      	b.n	8003906 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_SPI_MspInit+0x168>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d145      	bne.n	8003906 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800387a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003886:	2300      	movs	r3, #0
 8003888:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388a:	f107 0318 	add.w	r3, r7, #24
 800388e:	4618      	mov	r0, r3
 8003890:	f007 fcc0 	bl	800b214 <HAL_RCCEx_PeriphCLKConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800389a:	f7ff fd2d 	bl	80032f8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_SPI_MspInit+0x160>)
 80038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_SPI_MspInit+0x160>)
 80038a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ae:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_SPI_MspInit+0x160>)
 80038b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_SPI_MspInit+0x160>)
 80038be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <HAL_SPI_MspInit+0x160>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_SPI_MspInit+0x160>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80038da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80038de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038f4:	2305      	movs	r3, #5
 80038f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038fe:	4619      	mov	r1, r3
 8003900:	4805      	ldr	r0, [pc, #20]	; (8003918 <HAL_SPI_MspInit+0x164>)
 8003902:	f005 fbfb 	bl	80090fc <HAL_GPIO_Init>
}
 8003906:	bf00      	nop
 8003908:	37f0      	adds	r7, #240	; 0xf0
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40013000 	.word	0x40013000
 8003914:	58024400 	.word	0x58024400
 8003918:	58020400 	.word	0x58020400
 800391c:	40003800 	.word	0x40003800

08003920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_TIM_Base_MspInit+0x128>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12f      	bne.n	8003992 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003932:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 8003934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003938:	4a44      	ldr	r2, [pc, #272]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 8003944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003950:	2200      	movs	r2, #0
 8003952:	2105      	movs	r1, #5
 8003954:	2018      	movs	r0, #24
 8003956:	f002 f95b 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800395a:	2018      	movs	r0, #24
 800395c:	f002 f972 	bl	8005c44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003960:	2200      	movs	r2, #0
 8003962:	2105      	movs	r1, #5
 8003964:	2019      	movs	r0, #25
 8003966:	f002 f953 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800396a:	2019      	movs	r0, #25
 800396c:	f002 f96a 	bl	8005c44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003970:	2200      	movs	r2, #0
 8003972:	2105      	movs	r1, #5
 8003974:	201a      	movs	r0, #26
 8003976:	f002 f94b 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800397a:	201a      	movs	r0, #26
 800397c:	f002 f962 	bl	8005c44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003980:	2200      	movs	r2, #0
 8003982:	2105      	movs	r1, #5
 8003984:	201b      	movs	r0, #27
 8003986:	f002 f943 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800398a:	201b      	movs	r0, #27
 800398c:	f002 f95a 	bl	8005c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003990:	e055      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d117      	bne.n	80039cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 800399e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039a2:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039ac:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 80039ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2105      	movs	r1, #5
 80039be:	201c      	movs	r0, #28
 80039c0:	f002 f926 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039c4:	201c      	movs	r0, #28
 80039c6:	f002 f93d 	bl	8005c44 <HAL_NVIC_EnableIRQ>
}
 80039ca:	e038      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_TIM_Base_MspInit+0x130>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d117      	bne.n	8003a06 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 80039d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 80039e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2105      	movs	r1, #5
 80039f8:	201d      	movs	r0, #29
 80039fa:	f002 f909 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039fe:	201d      	movs	r0, #29
 8003a00:	f002 f920 	bl	8005c44 <HAL_NVIC_EnableIRQ>
}
 8003a04:	e01b      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <HAL_TIM_Base_MspInit+0x134>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d116      	bne.n	8003a3e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 8003a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a16:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_TIM_Base_MspInit+0x12c>)
 8003a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2105      	movs	r1, #5
 8003a32:	201e      	movs	r0, #30
 8003a34:	f002 f8ec 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a38:	201e      	movs	r0, #30
 8003a3a:	f002 f903 	bl	8005c44 <HAL_NVIC_EnableIRQ>
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800

08003a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <HAL_TIM_MspPostInit+0xb8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d120      	bne.n	8003abc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7a:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <HAL_TIM_MspPostInit+0xbc>)
 8003a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a80:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <HAL_TIM_MspPostInit+0xbc>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_TIM_MspPostInit+0xbc>)
 8003a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4818      	ldr	r0, [pc, #96]	; (8003b18 <HAL_TIM_MspPostInit+0xc0>)
 8003ab6:	f005 fb21 	bl	80090fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003aba:	e024      	b.n	8003b06 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d11f      	bne.n	8003b06 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_TIM_MspPostInit+0xbc>)
 8003ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_TIM_MspPostInit+0xbc>)
 8003ace:	f043 0302 	orr.w	r3, r3, #2
 8003ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_TIM_MspPostInit+0xbc>)
 8003ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	4619      	mov	r1, r3
 8003b00:	4806      	ldr	r0, [pc, #24]	; (8003b1c <HAL_TIM_MspPostInit+0xc4>)
 8003b02:	f005 fafb 	bl	80090fc <HAL_GPIO_Init>
}
 8003b06:	bf00      	nop
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	58024400 	.word	0x58024400
 8003b18:	58020000 	.word	0x58020000
 8003b1c:	58020400 	.word	0x58020400

08003b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b0ba      	sub	sp, #232	; 0xe8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	22c0      	movs	r2, #192	; 0xc0
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f013 f8fb 	bl	8016d3c <memset>
  if(huart->Instance==USART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <HAL_UART_MspInit+0x130>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d17b      	bne.n	8003c48 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b50:	f04f 0201 	mov.w	r2, #1
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003b5c:	2318      	movs	r3, #24
 8003b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b62:	f107 0310 	add.w	r3, r7, #16
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 fb54 	bl	800b214 <HAL_RCCEx_PeriphCLKConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003b72:	f7ff fbc1 	bl	80032f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <HAL_UART_MspInit+0x134>)
 8003b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b7c:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <HAL_UART_MspInit+0x134>)
 8003b7e:	f043 0310 	orr.w	r3, r3, #16
 8003b82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_UART_MspInit+0x134>)
 8003b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_UART_MspInit+0x134>)
 8003b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <HAL_UART_MspInit+0x134>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_UART_MspInit+0x134>)
 8003ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	481f      	ldr	r0, [pc, #124]	; (8003c58 <HAL_UART_MspInit+0x138>)
 8003bda:	f005 fa8f 	bl	80090fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_UART_MspInit+0x140>)
 8003be2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003be6:	222a      	movs	r2, #42	; 0x2a
 8003be8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bfe:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c04:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c1c:	480f      	ldr	r0, [pc, #60]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c1e:	f002 fc25 	bl	800646c <HAL_DMA_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003c28:	f7ff fb66 	bl	80032f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c30:	67da      	str	r2, [r3, #124]	; 0x7c
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_UART_MspInit+0x13c>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2105      	movs	r1, #5
 8003c3c:	2025      	movs	r0, #37	; 0x25
 8003c3e:	f001 ffe7 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c42:	2025      	movs	r0, #37	; 0x25
 8003c44:	f001 fffe 	bl	8005c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c48:	bf00      	nop
 8003c4a:	37e8      	adds	r7, #232	; 0xe8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40011000 	.word	0x40011000
 8003c54:	58024400 	.word	0x58024400
 8003c58:	58020000 	.word	0x58020000
 8003c5c:	240006cc 	.word	0x240006cc
 8003c60:	40020040 	.word	0x40020040

08003c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b090      	sub	sp, #64	; 0x40
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d827      	bhi.n	8003cc2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003c72:	2200      	movs	r2, #0
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	2036      	movs	r0, #54	; 0x36
 8003c78:	f001 ffca 	bl	8005c10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c7c:	2036      	movs	r0, #54	; 0x36
 8003c7e:	f001 ffe1 	bl	8005c44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003c82:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <HAL_InitTick+0xc4>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_InitTick+0xc8>)
 8003c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c8e:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <HAL_InitTick+0xc8>)
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_InitTick+0xc8>)
 8003c9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ca6:	f107 0210 	add.w	r2, r7, #16
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f007 fa6d 	bl	800b190 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <HAL_InitTick+0x6a>
 8003cc0:	e001      	b.n	8003cc6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e02b      	b.n	8003d1e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f007 fa37 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 8003cca:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003ccc:	e004      	b.n	8003cd8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cce:	f007 fa33 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_InitTick+0xcc>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <HAL_InitTick+0xd0>)
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <HAL_InitTick+0xd4>)
 8003cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_InitTick+0xd0>)
 8003cee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <HAL_InitTick+0xd0>)
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_InitTick+0xd0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_InitTick+0xd0>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d06:	480b      	ldr	r0, [pc, #44]	; (8003d34 <HAL_InitTick+0xd0>)
 8003d08:	f00a fef5 	bl	800eaf6 <HAL_TIM_Base_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003d12:	4808      	ldr	r0, [pc, #32]	; (8003d34 <HAL_InitTick+0xd0>)
 8003d14:	f00a ff46 	bl	800eba4 <HAL_TIM_Base_Start_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e000      	b.n	8003d1e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3740      	adds	r7, #64	; 0x40
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	24000098 	.word	0x24000098
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	431bde83 	.word	0x431bde83
 8003d34:	240010dc 	.word	0x240010dc
 8003d38:	40001000 	.word	0x40001000

08003d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003d40:	e7fe      	b.n	8003d40 <NMI_Handler+0x4>

08003d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d46:	e7fe      	b.n	8003d46 <HardFault_Handler+0x4>

08003d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d4c:	e7fe      	b.n	8003d4c <MemManage_Handler+0x4>

08003d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d52:	e7fe      	b.n	8003d52 <BusFault_Handler+0x4>

08003d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d58:	e7fe      	b.n	8003d58 <UsageFault_Handler+0x4>

08003d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA1_Stream0_IRQHandler+0x10>)
 8003d6e:	f003 fea7 	bl	8007ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	24000204 	.word	0x24000204

08003d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA1_Stream1_IRQHandler+0x10>)
 8003d82:	f003 fe9d 	bl	8007ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2400027c 	.word	0x2400027c

08003d90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <DMA1_Stream2_IRQHandler+0x10>)
 8003d96:	f003 fe93 	bl	8007ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	240006cc 	.word	0x240006cc

08003da4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <DMA1_Stream5_IRQHandler+0x10>)
 8003daa:	f003 fe89 	bl	8007ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	24000308 	.word	0x24000308

08003db8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <TIM1_BRK_IRQHandler+0x10>)
 8003dbe:	f00b fa08 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	24000508 	.word	0x24000508

08003dcc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <TIM1_UP_IRQHandler+0x10>)
 8003dd2:	f00b f9fe 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	24000508 	.word	0x24000508

08003de0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003de6:	f00b f9f4 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	24000508 	.word	0x24000508

08003df4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <TIM1_CC_IRQHandler+0x10>)
 8003dfa:	f00b f9ea 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	24000508 	.word	0x24000508

08003e08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <TIM2_IRQHandler+0x10>)
 8003e0e:	f00b f9e0 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	24000554 	.word	0x24000554

08003e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <TIM3_IRQHandler+0x10>)
 8003e22:	f00b f9d6 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	240005a0 	.word	0x240005a0

08003e30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <TIM4_IRQHandler+0x10>)
 8003e36:	f00b f9cc 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	240005ec 	.word	0x240005ec

08003e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e48:	4802      	ldr	r0, [pc, #8]	; (8003e54 <USART1_IRQHandler+0x10>)
 8003e4a:	f00c fd85 	bl	8010958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	24000638 	.word	0x24000638

08003e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <TIM6_DAC_IRQHandler+0x20>)
 8003e5e:	791b      	ldrb	r3, [r3, #4]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003e66:	4804      	ldr	r0, [pc, #16]	; (8003e78 <TIM6_DAC_IRQHandler+0x20>)
 8003e68:	f002 f881 	bl	8005f6e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003e6c:	4803      	ldr	r0, [pc, #12]	; (8003e7c <TIM6_DAC_IRQHandler+0x24>)
 8003e6e:	f00b f9b0 	bl	800f1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	240002f4 	.word	0x240002f4
 8003e7c:	240010dc 	.word	0x240010dc

08003e80 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <ITM_SendChar+0x48>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <ITM_SendChar+0x48>)
 8003e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e94:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <ITM_SendChar+0x4c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <ITM_SendChar+0x4c>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003ea2:	bf00      	nop
 8003ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f8      	beq.n	8003ea4 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003eb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	6013      	str	r3, [r2, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000edfc 	.word	0xe000edfc
 8003ecc:	e0000e00 	.word	0xe0000e00

08003ed0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e00a      	b.n	8003ef8 <_read+0x28>
		*ptr++ = __io_getchar();
 8003ee2:	f3af 8000 	nop.w
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	60ba      	str	r2, [r7, #8]
 8003eee:	b2ca      	uxtb	r2, r1
 8003ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	dbf0      	blt.n	8003ee2 <_read+0x12>
	}

	return len;
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e009      	b.n	8003f30 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	60ba      	str	r2, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ffab 	bl	8003e80 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	dbf1      	blt.n	8003f1c <_write+0x12>
	}
	return len;
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_close>:

int _close(int file) {
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <_fstat>:

int _fstat(int file, struct stat *st) {
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_isatty>:

int _isatty(int file) {
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003f82:	2301      	movs	r3, #1
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_sbrk+0x64>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_sbrk+0x64>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <_sbrk+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <_sbrk+0x40>
		errno = ENOMEM;
 8003fdc:	f012 fe66 	bl	8016cac <__errno>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fea:	e009      	b.n	8004000 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <_sbrk+0x64>)
 8003ffc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	24080000 	.word	0x24080000
 800400c:	00000400 	.word	0x00000400
 8004010:	24001128 	.word	0x24001128
 8004014:	24005a90 	.word	0x24005a90

08004018 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800401c:	4b37      	ldr	r3, [pc, #220]	; (80040fc <SystemInit+0xe4>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	4a36      	ldr	r2, [pc, #216]	; (80040fc <SystemInit+0xe4>)
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800402c:	4b34      	ldr	r3, [pc, #208]	; (8004100 <SystemInit+0xe8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2b06      	cmp	r3, #6
 8004036:	d807      	bhi.n	8004048 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004038:	4b31      	ldr	r3, [pc, #196]	; (8004100 <SystemInit+0xe8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 030f 	bic.w	r3, r3, #15
 8004040:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <SystemInit+0xe8>)
 8004042:	f043 0307 	orr.w	r3, r3, #7
 8004046:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <SystemInit+0xec>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <SystemInit+0xec>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <SystemInit+0xec>)
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <SystemInit+0xec>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4929      	ldr	r1, [pc, #164]	; (8004104 <SystemInit+0xec>)
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <SystemInit+0xf0>)
 8004062:	4013      	ands	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004066:	4b26      	ldr	r3, [pc, #152]	; (8004100 <SystemInit+0xe8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <SystemInit+0xe8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 030f 	bic.w	r3, r3, #15
 800407a:	4a21      	ldr	r2, [pc, #132]	; (8004100 <SystemInit+0xe8>)
 800407c:	f043 0307 	orr.w	r3, r3, #7
 8004080:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <SystemInit+0xec>)
 8004084:	2200      	movs	r2, #0
 8004086:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <SystemInit+0xec>)
 800408a:	2200      	movs	r2, #0
 800408c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <SystemInit+0xec>)
 8004090:	2200      	movs	r2, #0
 8004092:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <SystemInit+0xec>)
 8004096:	4a1d      	ldr	r2, [pc, #116]	; (800410c <SystemInit+0xf4>)
 8004098:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <SystemInit+0xec>)
 800409c:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <SystemInit+0xf8>)
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <SystemInit+0xec>)
 80040a2:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <SystemInit+0xfc>)
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <SystemInit+0xec>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <SystemInit+0xec>)
 80040ae:	4a19      	ldr	r2, [pc, #100]	; (8004114 <SystemInit+0xfc>)
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <SystemInit+0xec>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <SystemInit+0xec>)
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <SystemInit+0xfc>)
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <SystemInit+0xec>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <SystemInit+0xec>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <SystemInit+0xec>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <SystemInit+0xec>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <SystemInit+0x100>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <SystemInit+0x104>)
 80040dc:	4013      	ands	r3, r2
 80040de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e2:	d202      	bcs.n	80040ea <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80040e4:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <SystemInit+0x108>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <SystemInit+0x10c>)
 80040ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80040f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00
 8004100:	52002000 	.word	0x52002000
 8004104:	58024400 	.word	0x58024400
 8004108:	eaf6ed7f 	.word	0xeaf6ed7f
 800410c:	02020200 	.word	0x02020200
 8004110:	01ff0000 	.word	0x01ff0000
 8004114:	01010280 	.word	0x01010280
 8004118:	5c001000 	.word	0x5c001000
 800411c:	ffff0000 	.word	0xffff0000
 8004120:	51008108 	.word	0x51008108
 8004124:	52004000 	.word	0x52004000

08004128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800412c:	f7ff ff74 	bl	8004018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004130:	480c      	ldr	r0, [pc, #48]	; (8004164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004132:	490d      	ldr	r1, [pc, #52]	; (8004168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004138:	e002      	b.n	8004140 <LoopCopyDataInit>

0800413a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800413c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800413e:	3304      	adds	r3, #4

08004140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004144:	d3f9      	bcc.n	800413a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004148:	4c0a      	ldr	r4, [pc, #40]	; (8004174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800414a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800414c:	e001      	b.n	8004152 <LoopFillZerobss>

0800414e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800414e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004150:	3204      	adds	r2, #4

08004152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004154:	d3fb      	bcc.n	800414e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004156:	f012 fdaf 	bl	8016cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800415a:	f7fc ff39 	bl	8000fd0 <main>
  bx  lr
 800415e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004160:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004164:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004168:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 800416c:	08017c08 	.word	0x08017c08
  ldr r2, =_sbss
 8004170:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004174:	24005a90 	.word	0x24005a90

08004178 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004178:	e7fe      	b.n	8004178 <ADC3_IRQHandler>
	...

0800417c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004182:	2003      	movs	r0, #3
 8004184:	f001 fd39 	bl	8005bfa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004188:	f006 fe2c 	bl	800ade4 <HAL_RCC_GetSysClockFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_Init+0x68>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	4913      	ldr	r1, [pc, #76]	; (80041e8 <HAL_Init+0x6c>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <HAL_Init+0x68>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_Init+0x6c>)
 80041b0:	5cd3      	ldrb	r3, [r2, r3]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
 80041bc:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <HAL_Init+0x70>)
 80041be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <HAL_Init+0x74>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041c6:	2005      	movs	r0, #5
 80041c8:	f7ff fd4c 	bl	8003c64 <HAL_InitTick>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e002      	b.n	80041dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041d6:	f7ff f895 	bl	8003304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	58024400 	.word	0x58024400
 80041e8:	08017b54 	.word	0x08017b54
 80041ec:	24000094 	.word	0x24000094
 80041f0:	24000090 	.word	0x24000090

080041f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x20>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_IncTick+0x24>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4413      	add	r3, r2
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_IncTick+0x24>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2400009c 	.word	0x2400009c
 8004218:	2400112c 	.word	0x2400112c

0800421c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return uwTick;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_GetTick+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	2400112c 	.word	0x2400112c

08004234 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_GetREVID+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0c1b      	lsrs	r3, r3, #16
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	5c001000 	.word	0x5c001000

0800424c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	58000400 	.word	0x58000400

08004278 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	430b      	orrs	r3, r1
 800430e:	431a      	orrs	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	611a      	str	r2, [r3, #16]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004352:	b480      	push	{r7}
 8004354:	b087      	sub	sp, #28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3360      	adds	r3, #96	; 0x60
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	431a      	orrs	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	601a      	str	r2, [r3, #0]
  }
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3330      	adds	r3, #48	; 0x30
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	4413      	add	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	211f      	movs	r1, #31
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	401a      	ands	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	f003 011f 	and.w	r1, r3, #31
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f023 0203 	bic.w	r2, r3, #3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3314      	adds	r3, #20
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	0e5b      	lsrs	r3, r3, #25
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	4413      	add	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2107      	movs	r1, #7
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	401a      	ands	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	0d1b      	lsrs	r3, r3, #20
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449c:	43db      	mvns	r3, r3
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0318 	and.w	r3, r3, #24
 80044a6:	4908      	ldr	r1, [pc, #32]	; (80044c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80044a8:	40d9      	lsrs	r1, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	400b      	ands	r3, r1
 80044ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	000fffff 	.word	0x000fffff

080044cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 031f 	and.w	r3, r3, #31
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <LL_ADC_DisableDeepPowerDown+0x20>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6093      	str	r3, [r2, #8]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	5fffffc0 	.word	0x5fffffc0

0800450c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004520:	d101      	bne.n	8004526 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <LL_ADC_EnableInternalRegulator+0x24>)
 8004542:	4013      	ands	r3, r2
 8004544:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	6fffffc0 	.word	0x6fffffc0

0800455c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004570:	d101      	bne.n	8004576 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <LL_ADC_Enable+0x24>)
 8004592:	4013      	ands	r3, r2
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	7fffffc0 	.word	0x7fffffc0

080045ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <LL_ADC_Disable+0x24>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	f043 0202 	orr.w	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	7fffffc0 	.word	0x7fffffc0

080045d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <LL_ADC_IsEnabled+0x18>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <LL_ADC_IsEnabled+0x1a>
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d101      	bne.n	8004612 <LL_ADC_IsDisableOngoing+0x18>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <LL_ADC_IsDisableOngoing+0x1a>
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <LL_ADC_REG_StartConversion+0x24>)
 800462e:	4013      	ands	r3, r2
 8004630:	f043 0204 	orr.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	7fffffc0 	.word	0x7fffffc0

08004648 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b04      	cmp	r3, #4
 800465a:	d101      	bne.n	8004660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b08      	cmp	r3, #8
 8004680:	d101      	bne.n	8004686 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e18f      	b.n	80049ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fe fe3f 	bl	8003340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff19 	bl	800450c <LL_ADC_IsDeepPowerDownEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff feff 	bl	80044e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff34 	bl	800455c <LL_ADC_IsInternalRegulatorEnabled>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d114      	bne.n	8004724 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff18 	bl	8004534 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004704:	4b87      	ldr	r3, [pc, #540]	; (8004924 <HAL_ADC_Init+0x290>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	4a87      	ldr	r2, [pc, #540]	; (8004928 <HAL_ADC_Init+0x294>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	3301      	adds	r3, #1
 8004714:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004716:	e002      	b.n	800471e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3b01      	subs	r3, #1
 800471c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f9      	bne.n	8004718 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff17 	bl	800455c <LL_ADC_IsInternalRegulatorEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	f043 0210 	orr.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff77 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 800475a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 8129 	bne.w	80049bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f040 8125 	bne.w	80049bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800477a:	f043 0202 	orr.w	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff24 	bl	80045d4 <LL_ADC_IsEnabled>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d136      	bne.n	8004800 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a65      	ldr	r2, [pc, #404]	; (800492c <HAL_ADC_Init+0x298>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_ADC_Init+0x112>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a63      	ldr	r2, [pc, #396]	; (8004930 <HAL_ADC_Init+0x29c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10e      	bne.n	80047c4 <HAL_ADC_Init+0x130>
 80047a6:	4861      	ldr	r0, [pc, #388]	; (800492c <HAL_ADC_Init+0x298>)
 80047a8:	f7ff ff14 	bl	80045d4 <LL_ADC_IsEnabled>
 80047ac:	4604      	mov	r4, r0
 80047ae:	4860      	ldr	r0, [pc, #384]	; (8004930 <HAL_ADC_Init+0x29c>)
 80047b0:	f7ff ff10 	bl	80045d4 <LL_ADC_IsEnabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4323      	orrs	r3, r4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e008      	b.n	80047d6 <HAL_ADC_Init+0x142>
 80047c4:	485b      	ldr	r0, [pc, #364]	; (8004934 <HAL_ADC_Init+0x2a0>)
 80047c6:	f7ff ff05 	bl	80045d4 <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d012      	beq.n	8004800 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a53      	ldr	r2, [pc, #332]	; (800492c <HAL_ADC_Init+0x298>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_ADC_Init+0x15a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a51      	ldr	r2, [pc, #324]	; (8004930 <HAL_ADC_Init+0x29c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_Init+0x15e>
 80047ee:	4a52      	ldr	r2, [pc, #328]	; (8004938 <HAL_ADC_Init+0x2a4>)
 80047f0:	e000      	b.n	80047f4 <HAL_ADC_Init+0x160>
 80047f2:	4a52      	ldr	r2, [pc, #328]	; (800493c <HAL_ADC_Init+0x2a8>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7ff fd3c 	bl	8004278 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004800:	f7ff fd18 	bl	8004234 <HAL_GetREVID>
 8004804:	4603      	mov	r3, r0
 8004806:	f241 0203 	movw	r2, #4099	; 0x1003
 800480a:	4293      	cmp	r3, r2
 800480c:	d914      	bls.n	8004838 <HAL_ADC_Init+0x1a4>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b10      	cmp	r3, #16
 8004814:	d110      	bne.n	8004838 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7d5b      	ldrb	r3, [r3, #21]
 800481a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004820:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004826:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7f1b      	ldrb	r3, [r3, #28]
 800482c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800482e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004830:	f043 030c 	orr.w	r3, r3, #12
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e00d      	b.n	8004854 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7d5b      	ldrb	r3, [r3, #21]
 800483c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004842:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004848:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	7f1b      	ldrb	r3, [r3, #28]
 800484e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7f1b      	ldrb	r3, [r3, #28]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	3b01      	subs	r3, #1
 8004862:	045b      	lsls	r3, r3, #17
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <HAL_ADC_Init+0x2ac>)
 800488e:	4013      	ands	r3, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	430b      	orrs	r3, r1
 8004898:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fed2 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 80048a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fedf 	bl	800466e <LL_ADC_INJ_IsConversionOngoing>
 80048b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d15f      	bne.n	8004978 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d15c      	bne.n	8004978 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7d1b      	ldrb	r3, [r3, #20]
 80048c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <HAL_ADC_Init+0x2b0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	69b9      	ldr	r1, [r7, #24]
 80048dc:	430b      	orrs	r3, r1
 80048de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d130      	bne.n	800494c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HAL_ADC_Init+0x2b4>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048fe:	3a01      	subs	r2, #1
 8004900:	0411      	lsls	r1, r2, #16
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800490c:	4311      	orrs	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004912:	430a      	orrs	r2, r1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	611a      	str	r2, [r3, #16]
 8004920:	e01c      	b.n	800495c <HAL_ADC_Init+0x2c8>
 8004922:	bf00      	nop
 8004924:	24000090 	.word	0x24000090
 8004928:	053e2d63 	.word	0x053e2d63
 800492c:	40022000 	.word	0x40022000
 8004930:	40022100 	.word	0x40022100
 8004934:	58026000 	.word	0x58026000
 8004938:	40022300 	.word	0x40022300
 800493c:	58026300 	.word	0x58026300
 8004940:	fff0c003 	.word	0xfff0c003
 8004944:	ffffbffc 	.word	0xffffbffc
 8004948:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fdec 	bl	8005550 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10c      	bne.n	800499a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f023 010f 	bic.w	r1, r3, #15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
 8004998:	e007      	b.n	80049aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 020f 	bic.w	r2, r2, #15
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
 80049ba:	e007      	b.n	80049cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f043 0210 	orr.w	r2, r3, #16
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd90      	pop	{r4, r7, pc}
 80049d6:	bf00      	nop

080049d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a55      	ldr	r2, [pc, #340]	; (8004b40 <HAL_ADC_Start_DMA+0x168>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_ADC_Start_DMA+0x20>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a54      	ldr	r2, [pc, #336]	; (8004b44 <HAL_ADC_Start_DMA+0x16c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_Start_DMA+0x24>
 80049f8:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <HAL_ADC_Start_DMA+0x170>)
 80049fa:	e000      	b.n	80049fe <HAL_ADC_Start_DMA+0x26>
 80049fc:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <HAL_ADC_Start_DMA+0x174>)
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fd64 	bl	80044cc <LL_ADC_GetMultimode>
 8004a04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fe1c 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 808c 	bne.w	8004b30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_Start_DMA+0x4e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e087      	b.n	8004b36 <HAL_ADC_Start_DMA+0x15e>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d002      	beq.n	8004a40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d170      	bne.n	8004b22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fc07 	bl	8005254 <ADC_Enable>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d163      	bne.n	8004b18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a54:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <HAL_ADC_Start_DMA+0x178>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <HAL_ADC_Start_DMA+0x16c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d002      	beq.n	8004a70 <HAL_ADC_Start_DMA+0x98>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e000      	b.n	8004a72 <HAL_ADC_Start_DMA+0x9a>
 8004a70:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <HAL_ADC_Start_DMA+0x168>)
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d002      	beq.n	8004a80 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	f023 0206 	bic.w	r2, r3, #6
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8004aa4:	e002      	b.n	8004aac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <HAL_ADC_Start_DMA+0x17c>)
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <HAL_ADC_Start_DMA+0x180>)
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <HAL_ADC_Start_DMA+0x184>)
 8004ac2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	221c      	movs	r2, #28
 8004aca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0210 	orr.w	r2, r2, #16
 8004ae2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7ff fc89 	bl	8004406 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3340      	adds	r3, #64	; 0x40
 8004afe:	4619      	mov	r1, r3
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f002 f80e 	bl	8006b24 <HAL_DMA_Start_IT>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fd85 	bl	8004620 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b16:	e00d      	b.n	8004b34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004b20:	e008      	b.n	8004b34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b2e:	e001      	b.n	8004b34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
 8004b32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40022100 	.word	0x40022100
 8004b48:	40022300 	.word	0x40022300
 8004b4c:	58026300 	.word	0x58026300
 8004b50:	fffff0fe 	.word	0xfffff0fe
 8004b54:	08005427 	.word	0x08005427
 8004b58:	080054ff 	.word	0x080054ff
 8004b5c:	0800551b 	.word	0x0800551b

08004b60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b0a1      	sub	sp, #132	; 0x84
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_ADC_ConfigChannel+0x1b0>)
 8004bb6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x2a>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e32e      	b.n	8005224 <HAL_ADC_ConfigChannel+0x688>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fd38 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f040 8313 	bne.w	8005206 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db2c      	blt.n	8004c42 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d108      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x6a>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0e9b      	lsrs	r3, r3, #26
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2201      	movs	r2, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	e016      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x98>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c16:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004c1e:	2320      	movs	r3, #32
 8004c20:	e003      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2201      	movs	r2, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	69d1      	ldr	r1, [r2, #28]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f7ff fbad 	bl	80043ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fcf5 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 8004c5e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fd02 	bl	800466e <LL_ADC_INJ_IsConversionOngoing>
 8004c6a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 80b8 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 80b4 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f7ff fbcf 	bl	800442c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_ADC_ConfigChannel+0x1b4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x118>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	e01d      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x154>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x13e>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	e00a      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x154>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d02c      	beq.n	8004d54 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6919      	ldr	r1, [r3, #16]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d08:	f7ff faea 	bl	80042e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6919      	ldr	r1, [r3, #16]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	7e5b      	ldrb	r3, [r3, #25]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x186>
 8004d1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d20:	e000      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x188>
 8004d22:	2300      	movs	r3, #0
 8004d24:	461a      	mov	r2, r3
 8004d26:	f7ff fb14 	bl	8004352 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6919      	ldr	r1, [r3, #16]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	7e1b      	ldrb	r3, [r3, #24]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d102      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x1a4>
 8004d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d3e:	e000      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x1a6>
 8004d40:	2300      	movs	r3, #0
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7ff faec 	bl	8004320 <LL_ADC_SetDataRightShift>
 8004d48:	e04c      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x248>
 8004d4a:	bf00      	nop
 8004d4c:	47ff0000 	.word	0x47ff0000
 8004d50:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	069b      	lsls	r3, r3, #26
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	069b      	lsls	r3, r3, #26
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d107      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d9a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	069b      	lsls	r3, r3, #26
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d107      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dbe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	069b      	lsls	r3, r3, #26
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d107      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004de2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fbf3 	bl	80045d4 <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 8211 	bne.w	8005218 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f7ff fb3e 	bl	8004484 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4aa1      	ldr	r2, [pc, #644]	; (8005094 <HAL_ADC_ConfigChannel+0x4f8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	f040 812e 	bne.w	8005070 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x2a0>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0e9b      	lsrs	r3, r3, #26
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	bf94      	ite	ls
 8004e34:	2301      	movls	r3, #1
 8004e36:	2300      	movhi	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	e019      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x2d4>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e44:	fa93 f3a3 	rbit	r3, r3
 8004e48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004e54:	2320      	movs	r3, #32
 8004e56:	e003      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5a:	fab3 f383 	clz	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	3301      	adds	r3, #1
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2b09      	cmp	r3, #9
 8004e68:	bf94      	ite	ls
 8004e6a:	2301      	movls	r3, #1
 8004e6c:	2300      	movhi	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d079      	beq.n	8004f68 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x2f4>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	069b      	lsls	r3, r3, #26
 8004e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8e:	e015      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x320>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e003      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	069b      	lsls	r3, r3, #26
 8004eb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x340>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	0e9b      	lsrs	r3, r3, #26
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	e017      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x370>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	e003      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	ea42 0103 	orr.w	r1, r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x396>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0e9b      	lsrs	r3, r3, #26
 8004f22:	3301      	adds	r3, #1
 8004f24:	f003 021f 	and.w	r2, r3, #31
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	051b      	lsls	r3, r3, #20
 8004f30:	e018      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x3c8>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	e003      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	fab3 f383 	clz	r3, r3
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	f003 021f 	and.w	r2, r3, #31
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f64:	430b      	orrs	r3, r1
 8004f66:	e07e      	b.n	8005066 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x3e8>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0e9b      	lsrs	r3, r3, #26
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	069b      	lsls	r3, r3, #26
 8004f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f82:	e015      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x414>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3301      	adds	r3, #1
 8004faa:	069b      	lsls	r3, r3, #26
 8004fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x434>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0e9b      	lsrs	r3, r3, #26
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	e017      	b.n	8005000 <HAL_ADC_ConfigChannel+0x464>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa93 f3a3 	rbit	r3, r3
 8004fdc:	61bb      	str	r3, [r7, #24]
  return result;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004fe8:	2320      	movs	r3, #32
 8004fea:	e003      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	fab3 f383 	clz	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	ea42 0103 	orr.w	r1, r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_ADC_ConfigChannel+0x490>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0e9b      	lsrs	r3, r3, #26
 8005016:	3301      	adds	r3, #1
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	3b1e      	subs	r3, #30
 8005024:	051b      	lsls	r3, r3, #20
 8005026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800502a:	e01b      	b.n	8005064 <HAL_ADC_ConfigChannel+0x4c8>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	fa93 f3a3 	rbit	r3, r3
 8005038:	60fb      	str	r3, [r7, #12]
  return result;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005044:	2320      	movs	r3, #32
 8005046:	e003      	b.n	8005050 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	3301      	adds	r3, #1
 8005052:	f003 021f 	and.w	r2, r3, #31
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	3b1e      	subs	r3, #30
 800505e:	051b      	lsls	r3, r3, #20
 8005060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005064:	430b      	orrs	r3, r1
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	4619      	mov	r1, r3
 800506c:	f7ff f9de 	bl	800442c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f280 80cf 	bge.w	8005218 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a06      	ldr	r2, [pc, #24]	; (8005098 <HAL_ADC_ConfigChannel+0x4fc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_ADC_ConfigChannel+0x4f2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a04      	ldr	r2, [pc, #16]	; (800509c <HAL_ADC_ConfigChannel+0x500>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10a      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x508>
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <HAL_ADC_ConfigChannel+0x504>)
 8005090:	e009      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x50a>
 8005092:	bf00      	nop
 8005094:	47ff0000 	.word	0x47ff0000
 8005098:	40022000 	.word	0x40022000
 800509c:	40022100 	.word	0x40022100
 80050a0:	40022300 	.word	0x40022300
 80050a4:	4b61      	ldr	r3, [pc, #388]	; (800522c <HAL_ADC_ConfigChannel+0x690>)
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff f90c 	bl	80042c4 <LL_ADC_GetCommonPathInternalCh>
 80050ac:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a5f      	ldr	r2, [pc, #380]	; (8005230 <HAL_ADC_ConfigChannel+0x694>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_ADC_ConfigChannel+0x526>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a5d      	ldr	r2, [pc, #372]	; (8005234 <HAL_ADC_ConfigChannel+0x698>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10e      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x544>
 80050c2:	485b      	ldr	r0, [pc, #364]	; (8005230 <HAL_ADC_ConfigChannel+0x694>)
 80050c4:	f7ff fa86 	bl	80045d4 <LL_ADC_IsEnabled>
 80050c8:	4604      	mov	r4, r0
 80050ca:	485a      	ldr	r0, [pc, #360]	; (8005234 <HAL_ADC_ConfigChannel+0x698>)
 80050cc:	f7ff fa82 	bl	80045d4 <LL_ADC_IsEnabled>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4323      	orrs	r3, r4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e008      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x556>
 80050e0:	4855      	ldr	r0, [pc, #340]	; (8005238 <HAL_ADC_ConfigChannel+0x69c>)
 80050e2:	f7ff fa77 	bl	80045d4 <LL_ADC_IsEnabled>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d07d      	beq.n	80051f2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_ADC_ConfigChannel+0x6a0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d130      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x5c6>
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d12b      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a4a      	ldr	r2, [pc, #296]	; (8005238 <HAL_ADC_ConfigChannel+0x69c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	f040 8081 	bne.w	8005218 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a45      	ldr	r2, [pc, #276]	; (8005230 <HAL_ADC_ConfigChannel+0x694>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d004      	beq.n	800512a <HAL_ADC_ConfigChannel+0x58e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a43      	ldr	r2, [pc, #268]	; (8005234 <HAL_ADC_ConfigChannel+0x698>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_ADC_ConfigChannel+0x592>
 800512a:	4a45      	ldr	r2, [pc, #276]	; (8005240 <HAL_ADC_ConfigChannel+0x6a4>)
 800512c:	e000      	b.n	8005130 <HAL_ADC_ConfigChannel+0x594>
 800512e:	4a3f      	ldr	r2, [pc, #252]	; (800522c <HAL_ADC_ConfigChannel+0x690>)
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7ff f8b0 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_ADC_ConfigChannel+0x6a8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	099b      	lsrs	r3, r3, #6
 8005144:	4a40      	ldr	r2, [pc, #256]	; (8005248 <HAL_ADC_ConfigChannel+0x6ac>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	3301      	adds	r3, #1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005152:	e002      	b.n	800515a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	3b01      	subs	r3, #1
 8005158:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f9      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005160:	e05a      	b.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a39      	ldr	r2, [pc, #228]	; (800524c <HAL_ADC_ConfigChannel+0x6b0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d11e      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x60e>
 800516c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d119      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2f      	ldr	r2, [pc, #188]	; (8005238 <HAL_ADC_ConfigChannel+0x69c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d14b      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_ADC_ConfigChannel+0x694>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_ADC_ConfigChannel+0x5f8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a29      	ldr	r2, [pc, #164]	; (8005234 <HAL_ADC_ConfigChannel+0x698>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x5fc>
 8005194:	4a2a      	ldr	r2, [pc, #168]	; (8005240 <HAL_ADC_ConfigChannel+0x6a4>)
 8005196:	e000      	b.n	800519a <HAL_ADC_ConfigChannel+0x5fe>
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <HAL_ADC_ConfigChannel+0x690>)
 800519a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7ff f87b 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051a8:	e036      	b.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a28      	ldr	r2, [pc, #160]	; (8005250 <HAL_ADC_ConfigChannel+0x6b4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d131      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
 80051b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d12c      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_ADC_ConfigChannel+0x69c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d127      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a18      	ldr	r2, [pc, #96]	; (8005230 <HAL_ADC_ConfigChannel+0x694>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_ADC_ConfigChannel+0x640>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_ADC_ConfigChannel+0x698>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x644>
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_ADC_ConfigChannel+0x6a4>)
 80051de:	e000      	b.n	80051e2 <HAL_ADC_ConfigChannel+0x646>
 80051e0:	4a12      	ldr	r2, [pc, #72]	; (800522c <HAL_ADC_ConfigChannel+0x690>)
 80051e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7ff f857 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
 80051f0:	e012      	b.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f6:	f043 0220 	orr.w	r2, r3, #32
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005204:	e008      	b.n	8005218 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005220:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005224:	4618      	mov	r0, r3
 8005226:	3784      	adds	r7, #132	; 0x84
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}
 800522c:	58026300 	.word	0x58026300
 8005230:	40022000 	.word	0x40022000
 8005234:	40022100 	.word	0x40022100
 8005238:	58026000 	.word	0x58026000
 800523c:	cb840000 	.word	0xcb840000
 8005240:	40022300 	.word	0x40022300
 8005244:	24000090 	.word	0x24000090
 8005248:	053e2d63 	.word	0x053e2d63
 800524c:	c7520000 	.word	0xc7520000
 8005250:	cfb80000 	.word	0xcfb80000

08005254 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f9b7 	bl	80045d4 <LL_ADC_IsEnabled>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d16e      	bne.n	800534a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	4b38      	ldr	r3, [pc, #224]	; (8005354 <ADC_Enable+0x100>)
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	f043 0201 	orr.w	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e05a      	b.n	800534c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff f972 	bl	8004584 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052a0:	f7fe ffbc 	bl	800421c <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <ADC_Enable+0x104>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <ADC_Enable+0x66>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a29      	ldr	r2, [pc, #164]	; (800535c <ADC_Enable+0x108>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <ADC_Enable+0x6a>
 80052ba:	4b29      	ldr	r3, [pc, #164]	; (8005360 <ADC_Enable+0x10c>)
 80052bc:	e000      	b.n	80052c0 <ADC_Enable+0x6c>
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <ADC_Enable+0x110>)
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff f903 	bl	80044cc <LL_ADC_GetMultimode>
 80052c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a23      	ldr	r2, [pc, #140]	; (800535c <ADC_Enable+0x108>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d002      	beq.n	80052d8 <ADC_Enable+0x84>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	e000      	b.n	80052da <ADC_Enable+0x86>
 80052d8:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <ADC_Enable+0x104>)
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	4293      	cmp	r3, r2
 80052e0:	d02c      	beq.n	800533c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d130      	bne.n	800534a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052e8:	e028      	b.n	800533c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f970 	bl	80045d4 <LL_ADC_IsEnabled>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff f940 	bl	8004584 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005304:	f7fe ff8a 	bl	800421c <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d914      	bls.n	800533c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d00d      	beq.n	800533c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f043 0210 	orr.w	r2, r3, #16
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	f043 0201 	orr.w	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e007      	b.n	800534c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b01      	cmp	r3, #1
 8005348:	d1cf      	bne.n	80052ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	8000003f 	.word	0x8000003f
 8005358:	40022000 	.word	0x40022000
 800535c:	40022100 	.word	0x40022100
 8005360:	40022300 	.word	0x40022300
 8005364:	58026300 	.word	0x58026300

08005368 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f940 	bl	80045fa <LL_ADC_IsDisableOngoing>
 800537a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff f927 	bl	80045d4 <LL_ADC_IsEnabled>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d047      	beq.n	800541c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d144      	bne.n	800541c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 030d 	and.w	r3, r3, #13
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10c      	bne.n	80053ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff f901 	bl	80045ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2203      	movs	r2, #3
 80053b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053b2:	f7fe ff33 	bl	800421c <HAL_GetTick>
 80053b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053b8:	e029      	b.n	800540e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f043 0210 	orr.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e023      	b.n	800541e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053d6:	f7fe ff21 	bl	800421c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d914      	bls.n	800540e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e007      	b.n	800541e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1dc      	bne.n	80053d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800543c:	2b00      	cmp	r3, #0
 800543e:	d14b      	bne.n	80054d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d021      	beq.n	800549e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe ff92 	bl	8004388 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d032      	beq.n	80054d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d12b      	bne.n	80054d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11f      	bne.n	80054d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	655a      	str	r2, [r3, #84]	; 0x54
 800549c:	e018      	b.n	80054d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fb45 	bl	8004b60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054d6:	e00e      	b.n	80054f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fb4f 	bl	8004b88 <HAL_ADC_ErrorCallback>
}
 80054ea:	e004      	b.n	80054f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff fb31 	bl	8004b74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	f043 0204 	orr.w	r2, r3, #4
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff fb21 	bl	8004b88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a7a      	ldr	r2, [pc, #488]	; (8005748 <ADC_ConfigureBoostMode+0x1f8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <ADC_ConfigureBoostMode+0x1c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a79      	ldr	r2, [pc, #484]	; (800574c <ADC_ConfigureBoostMode+0x1fc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d109      	bne.n	8005580 <ADC_ConfigureBoostMode+0x30>
 800556c:	4b78      	ldr	r3, [pc, #480]	; (8005750 <ADC_ConfigureBoostMode+0x200>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	e008      	b.n	8005592 <ADC_ConfigureBoostMode+0x42>
 8005580:	4b74      	ldr	r3, [pc, #464]	; (8005754 <ADC_ConfigureBoostMode+0x204>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01c      	beq.n	80055d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005596:	f005 fd9f 	bl	800b0d8 <HAL_RCC_GetHCLKFreq>
 800559a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055a4:	d010      	beq.n	80055c8 <ADC_ConfigureBoostMode+0x78>
 80055a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055aa:	d873      	bhi.n	8005694 <ADC_ConfigureBoostMode+0x144>
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d002      	beq.n	80055b8 <ADC_ConfigureBoostMode+0x68>
 80055b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b6:	d16d      	bne.n	8005694 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	60fb      	str	r3, [r7, #12]
        break;
 80055c6:	e068      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	60fb      	str	r3, [r7, #12]
        break;
 80055ce:	e064      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80055d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055d4:	f04f 0100 	mov.w	r1, #0
 80055d8:	f007 f826 	bl	800c628 <HAL_RCCEx_GetPeriphCLKFreq>
 80055dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80055e6:	d051      	beq.n	800568c <ADC_ConfigureBoostMode+0x13c>
 80055e8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80055ec:	d854      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 80055ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80055f2:	d047      	beq.n	8005684 <ADC_ConfigureBoostMode+0x134>
 80055f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80055f8:	d84e      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 80055fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80055fe:	d03d      	beq.n	800567c <ADC_ConfigureBoostMode+0x12c>
 8005600:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005604:	d848      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 8005606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560a:	d033      	beq.n	8005674 <ADC_ConfigureBoostMode+0x124>
 800560c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005610:	d842      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 8005612:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005616:	d029      	beq.n	800566c <ADC_ConfigureBoostMode+0x11c>
 8005618:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800561c:	d83c      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 800561e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005622:	d01a      	beq.n	800565a <ADC_ConfigureBoostMode+0x10a>
 8005624:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005628:	d836      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 800562a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800562e:	d014      	beq.n	800565a <ADC_ConfigureBoostMode+0x10a>
 8005630:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005634:	d830      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563a:	d00e      	beq.n	800565a <ADC_ConfigureBoostMode+0x10a>
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005640:	d82a      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 8005642:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005646:	d008      	beq.n	800565a <ADC_ConfigureBoostMode+0x10a>
 8005648:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800564c:	d824      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x148>
 800564e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005652:	d002      	beq.n	800565a <ADC_ConfigureBoostMode+0x10a>
 8005654:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005658:	d11e      	bne.n	8005698 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	0c9b      	lsrs	r3, r3, #18
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	60fb      	str	r3, [r7, #12]
        break;
 800566a:	e016      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	60fb      	str	r3, [r7, #12]
        break;
 8005672:	e012      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	60fb      	str	r3, [r7, #12]
        break;
 800567a:	e00e      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	60fb      	str	r3, [r7, #12]
        break;
 8005682:	e00a      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
        break;
 800568a:	e006      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	60fb      	str	r3, [r7, #12]
        break;
 8005692:	e002      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005694:	bf00      	nop
 8005696:	e000      	b.n	800569a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005698:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800569a:	f7fe fdcb 	bl	8004234 <HAL_GetREVID>
 800569e:	4603      	mov	r3, r0
 80056a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d815      	bhi.n	80056d4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <ADC_ConfigureBoostMode+0x208>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d908      	bls.n	80056c2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056be:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80056c0:	e03e      	b.n	8005740 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d0:	609a      	str	r2, [r3, #8]
}
 80056d2:	e035      	b.n	8005740 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <ADC_ConfigureBoostMode+0x20c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d808      	bhi.n	80056f4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056f0:	609a      	str	r2, [r3, #8]
}
 80056f2:	e025      	b.n	8005740 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <ADC_ConfigureBoostMode+0x210>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d80a      	bhi.n	8005712 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	e016      	b.n	8005740 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <ADC_ConfigureBoostMode+0x214>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d80a      	bhi.n	8005730 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572c:	609a      	str	r2, [r3, #8]
}
 800572e:	e007      	b.n	8005740 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40022000 	.word	0x40022000
 800574c:	40022100 	.word	0x40022100
 8005750:	40022300 	.word	0x40022300
 8005754:	58026300 	.word	0x58026300
 8005758:	01312d00 	.word	0x01312d00
 800575c:	005f5e10 	.word	0x005f5e10
 8005760:	00bebc20 	.word	0x00bebc20
 8005764:	017d7840 	.word	0x017d7840

08005768 <LL_ADC_IsEnabled>:
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <LL_ADC_IsEnabled+0x18>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <LL_ADC_IsEnabled+0x1a>
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <LL_ADC_StartCalibration>:
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <LL_ADC_StartCalibration+0x38>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057b0:	430a      	orrs	r2, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	609a      	str	r2, [r3, #8]
}
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	3ffeffc0 	.word	0x3ffeffc0

080057cc <LL_ADC_IsCalibrationOnGoing>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e0:	d101      	bne.n	80057e6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d101      	bne.n	800580c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_ADCEx_Calibration_Start+0x1e>
 8005836:	2302      	movs	r3, #2
 8005838:	e04c      	b.n	80058d4 <HAL_ADCEx_Calibration_Start+0xb8>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff fd90 	bl	8005368 <ADC_Disable>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d135      	bne.n	80058be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005858:	4013      	ands	r3, r2
 800585a:	f043 0202 	orr.w	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff ff90 	bl	8005790 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005870:	e014      	b.n	800589c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d30d      	bcc.n	800589c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	f023 0312 	bic.w	r3, r3, #18
 8005888:	f043 0210 	orr.w	r2, r3, #16
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e01b      	b.n	80058d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff93 	bl	80057cc <LL_ADC_IsCalibrationOnGoing>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e2      	bne.n	8005872 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b0:	f023 0303 	bic.w	r3, r3, #3
 80058b4:	f043 0201 	orr.w	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
 80058bc:	e005      	b.n	80058ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	f043 0210 	orr.w	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	ffffeefd 	.word	0xffffeefd
 80058e0:	25c3f800 	.word	0x25c3f800

080058e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b09f      	sub	sp, #124	; 0x7c
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0be      	b.n	8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800590a:	2300      	movs	r3, #0
 800590c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800590e:	2300      	movs	r3, #0
 8005910:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5c      	ldr	r2, [pc, #368]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d102      	bne.n	8005922 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800591c:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	e001      	b.n	8005926 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e09d      	b.n	8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff54 	bl	80057f4 <LL_ADC_REG_IsConversionOngoing>
 800594c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff4e 	bl	80057f4 <LL_ADC_REG_IsConversionOngoing>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d17f      	bne.n	8005a5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800595e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005960:	2b00      	cmp	r3, #0
 8005962:	d17c      	bne.n	8005a5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a47      	ldr	r2, [pc, #284]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a46      	ldr	r2, [pc, #280]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d101      	bne.n	800597c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005978:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800597a:	e000      	b.n	800597e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800597c:	4b45      	ldr	r3, [pc, #276]	; (8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800597e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d039      	beq.n	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	431a      	orrs	r2, r3
 8005996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005998:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3a      	ldr	r2, [pc, #232]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10e      	bne.n	80059cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80059ae:	4836      	ldr	r0, [pc, #216]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059b0:	f7ff feda 	bl	8005768 <LL_ADC_IsEnabled>
 80059b4:	4604      	mov	r4, r0
 80059b6:	4835      	ldr	r0, [pc, #212]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059b8:	f7ff fed6 	bl	8005768 <LL_ADC_IsEnabled>
 80059bc:	4603      	mov	r3, r0
 80059be:	4323      	orrs	r3, r4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e008      	b.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80059cc:	4832      	ldr	r0, [pc, #200]	; (8005a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80059ce:	f7ff fecb 	bl	8005768 <LL_ADC_IsEnabled>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d047      	beq.n	8005a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	6811      	ldr	r1, [r2, #0]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	6892      	ldr	r2, [r2, #8]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	431a      	orrs	r2, r3
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059fa:	e03a      	b.n	8005a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80059fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1d      	ldr	r2, [pc, #116]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10e      	bne.n	8005a3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005a1c:	481a      	ldr	r0, [pc, #104]	; (8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a1e:	f7ff fea3 	bl	8005768 <LL_ADC_IsEnabled>
 8005a22:	4604      	mov	r4, r0
 8005a24:	4819      	ldr	r0, [pc, #100]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a26:	f7ff fe9f 	bl	8005768 <LL_ADC_IsEnabled>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4323      	orrs	r3, r4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf0c      	ite	eq
 8005a32:	2301      	moveq	r3, #1
 8005a34:	2300      	movne	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	e008      	b.n	8005a4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005a3a:	4817      	ldr	r0, [pc, #92]	; (8005a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005a3c:	f7ff fe94 	bl	8005768 <LL_ADC_IsEnabled>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d010      	beq.n	8005a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a5c:	e009      	b.n	8005a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005a70:	e000      	b.n	8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	377c      	adds	r7, #124	; 0x7c
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd90      	pop	{r4, r7, pc}
 8005a88:	40022000 	.word	0x40022000
 8005a8c:	40022100 	.word	0x40022100
 8005a90:	40022300 	.word	0x40022300
 8005a94:	58026300 	.word	0x58026300
 8005a98:	58026000 	.word	0x58026000
 8005a9c:	fffff0e0 	.word	0xfffff0e0

08005aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005abc:	4013      	ands	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ace:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	60d3      	str	r3, [r2, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	e000ed00 	.word	0xe000ed00
 8005ae4:	05fa0000 	.word	0x05fa0000

08005ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <__NVIC_GetPriorityGrouping+0x18>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f003 0307 	and.w	r3, r3, #7
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	db0b      	blt.n	8005b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	f003 021f 	and.w	r2, r3, #31
 8005b1c:	4907      	ldr	r1, [pc, #28]	; (8005b3c <__NVIC_EnableIRQ+0x38>)
 8005b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2001      	movs	r0, #1
 8005b26:	fa00 f202 	lsl.w	r2, r0, r2
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e100 	.word	0xe000e100

08005b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db0a      	blt.n	8005b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	490c      	ldr	r1, [pc, #48]	; (8005b8c <__NVIC_SetPriority+0x4c>)
 8005b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	440b      	add	r3, r1
 8005b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b68:	e00a      	b.n	8005b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4908      	ldr	r1, [pc, #32]	; (8005b90 <__NVIC_SetPriority+0x50>)
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	3b04      	subs	r3, #4
 8005b78:	0112      	lsls	r2, r2, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	761a      	strb	r2, [r3, #24]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000e100 	.word	0xe000e100
 8005b90:	e000ed00 	.word	0xe000ed00

08005b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f1c3 0307 	rsb	r3, r3, #7
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf28      	it	cs
 8005bb2:	2304      	movcs	r3, #4
 8005bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d902      	bls.n	8005bc4 <NVIC_EncodePriority+0x30>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3b03      	subs	r3, #3
 8005bc2:	e000      	b.n	8005bc6 <NVIC_EncodePriority+0x32>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	43d9      	mvns	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bec:	4313      	orrs	r3, r2
         );
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff ff4c 	bl	8005aa0 <__NVIC_SetPriorityGrouping>
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c1e:	f7ff ff63 	bl	8005ae8 <__NVIC_GetPriorityGrouping>
 8005c22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f7ff ffb3 	bl	8005b94 <NVIC_EncodePriority>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff ff82 	bl	8005b40 <__NVIC_SetPriority>
}
 8005c3c:	bf00      	nop
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff ff56 	bl	8005b04 <__NVIC_EnableIRQ>
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e014      	b.n	8005c9c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	791b      	ldrb	r3, [r3, #4]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fd fc76 	bl	8003574 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e046      	b.n	8005d46 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	795b      	ldrb	r3, [r3, #5]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_DAC_Start+0x20>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e040      	b.n	8005d46 <HAL_DAC_Start+0xa2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10f      	bne.n	8005d0e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d11d      	bne.n	8005d38 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	e014      	b.n	8005d38 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2102      	movs	r1, #2
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d107      	bne.n	8005d38 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0202 	orr.w	r2, r2, #2
 8005d36:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0a2      	b.n	8005eb2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	795b      	ldrb	r3, [r3, #5]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_DAC_Start_DMA+0x24>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e09c      	b.n	8005eb2 <HAL_DAC_Start_DMA+0x15e>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2202      	movs	r2, #2
 8005d82:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d129      	bne.n	8005dde <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <HAL_DAC_Start_DMA+0x168>)
 8005d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4a4a      	ldr	r2, [pc, #296]	; (8005ec0 <HAL_DAC_Start_DMA+0x16c>)
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	4a49      	ldr	r2, [pc, #292]	; (8005ec4 <HAL_DAC_Start_DMA+0x170>)
 8005da0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005db0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_DAC_Start_DMA+0x6c>
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d005      	beq.n	8005dca <HAL_DAC_Start_DMA+0x76>
 8005dbe:	e009      	b.n	8005dd4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	613b      	str	r3, [r7, #16]
        break;
 8005dc8:	e033      	b.n	8005e32 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	613b      	str	r3, [r7, #16]
        break;
 8005dd2:	e02e      	b.n	8005e32 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3310      	adds	r3, #16
 8005dda:	613b      	str	r3, [r7, #16]
        break;
 8005ddc:	e029      	b.n	8005e32 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4a39      	ldr	r2, [pc, #228]	; (8005ec8 <HAL_DAC_Start_DMA+0x174>)
 8005de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4a38      	ldr	r2, [pc, #224]	; (8005ecc <HAL_DAC_Start_DMA+0x178>)
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4a37      	ldr	r2, [pc, #220]	; (8005ed0 <HAL_DAC_Start_DMA+0x17c>)
 8005df4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_DAC_Start_DMA+0xc0>
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d005      	beq.n	8005e1e <HAL_DAC_Start_DMA+0xca>
 8005e12:	e009      	b.n	8005e28 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	613b      	str	r3, [r7, #16]
        break;
 8005e1c:	e009      	b.n	8005e32 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3318      	adds	r3, #24
 8005e24:	613b      	str	r3, [r7, #16]
        break;
 8005e26:	e004      	b.n	8005e32 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	331c      	adds	r3, #28
 8005e2e:	613b      	str	r3, [r7, #16]
        break;
 8005e30:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d111      	bne.n	8005e5c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6898      	ldr	r0, [r3, #8]
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	f000 fe67 	bl	8006b24 <HAL_DMA_Start_IT>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]
 8005e5a:	e010      	b.n	8005e7e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005e6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68d8      	ldr	r0, [r3, #12]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	f000 fe55 	bl	8006b24 <HAL_DMA_Start_IT>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10c      	bne.n	8005ea4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	2201      	movs	r2, #1
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e005      	b.n	8005eb0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f043 0204 	orr.w	r2, r3, #4
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	08006345 	.word	0x08006345
 8005ec0:	08006367 	.word	0x08006367
 8005ec4:	08006383 	.word	0x08006383
 8005ec8:	08006401 	.word	0x08006401
 8005ecc:	08006423 	.word	0x08006423
 8005ed0:	0800643f 	.word	0x0800643f

08005ed4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e03e      	b.n	8005f66 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43da      	mvns	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	400a      	ands	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2201      	movs	r2, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43da      	mvns	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	400a      	ands	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f863 	bl	8006ff8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e00c      	b.n	8005f5e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 f855 	bl	8006ff8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005f5c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d018      	beq.n	8005fcc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f043 0201 	orr.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f86f 	bl	80060aa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01d      	beq.n	8006012 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d018      	beq.n	8006012 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f043 0202 	orr.w	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ffa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9ed 	bl	80063ec <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e015      	b.n	8006062 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	3308      	adds	r3, #8
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e004      	b.n	8006058 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	3314      	adds	r3, #20
 8006056:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	461a      	mov	r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_DAC_ConfigChannel+0x1e>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e12a      	b.n	8006338 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	795b      	ldrb	r3, [r3, #5]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_DAC_ConfigChannel+0x2e>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e124      	b.n	8006338 <HAL_DAC_ConfigChannel+0x278>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2202      	movs	r2, #2
 80060f8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d17a      	bne.n	80061f8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006102:	f7fe f88b 	bl	800421c <HAL_GetTick>
 8006106:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d13d      	bne.n	800618a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800610e:	e018      	b.n	8006142 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006110:	f7fe f884 	bl	800421c <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d911      	bls.n	8006142 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006124:	4b86      	ldr	r3, [pc, #536]	; (8006340 <HAL_DAC_ConfigChannel+0x280>)
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f043 0208 	orr.w	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2203      	movs	r2, #3
 800613c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e0fa      	b.n	8006338 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006148:	4b7d      	ldr	r3, [pc, #500]	; (8006340 <HAL_DAC_ConfigChannel+0x280>)
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1df      	bne.n	8006110 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	6992      	ldr	r2, [r2, #24]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
 800615a:	e020      	b.n	800619e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800615c:	f7fe f85e 	bl	800421c <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	d90f      	bls.n	800618a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006170:	2b00      	cmp	r3, #0
 8006172:	da0a      	bge.n	800618a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f043 0208 	orr.w	r2, r3, #8
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2203      	movs	r2, #3
 8006184:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e0d6      	b.n	8006338 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006190:	2b00      	cmp	r3, #0
 8006192:	dbe3      	blt.n	800615c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	6992      	ldr	r2, [r2, #24]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80061ae:	fa01 f303 	lsl.w	r3, r1, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	ea02 0103 	and.w	r1, r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	409a      	lsls	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	21ff      	movs	r1, #255	; 0xff
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	ea02 0103 	and.w	r1, r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d11d      	bne.n	800623c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	221f      	movs	r2, #31
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4313      	orrs	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2207      	movs	r2, #7
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4013      	ands	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d102      	bne.n	8006266 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
 8006264:	e00f      	b.n	8006286 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d102      	bne.n	8006274 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800626e:	2301      	movs	r3, #1
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	e008      	b.n	8006286 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800627c:	2301      	movs	r3, #1
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
 8006280:	e001      	b.n	8006286 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006282:	2300      	movs	r3, #0
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43da      	mvns	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	400a      	ands	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	43db      	mvns	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4313      	orrs	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6819      	ldr	r1, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	22c0      	movs	r2, #192	; 0xc0
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43da      	mvns	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	400a      	ands	r2, r1
 8006326:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006338:	4618      	mov	r0, r3
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20008000 	.word	0x20008000

08006344 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fe8b 	bl	800606e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	711a      	strb	r2, [r3, #4]
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff fe84 	bl	8006082 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fe7a 	bl	8006096 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	711a      	strb	r2, [r3, #4]
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ffce 	bl	80063b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	711a      	strb	r2, [r3, #4]
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff ffc7 	bl	80063c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f043 0204 	orr.w	r2, r3, #4
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff ffbd 	bl	80063d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	711a      	strb	r2, [r3, #4]
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006474:	f7fd fed2 	bl	800421c <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e316      	b.n	8006ab2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a66      	ldr	r2, [pc, #408]	; (8006624 <HAL_DMA_Init+0x1b8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d04a      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a65      	ldr	r2, [pc, #404]	; (8006628 <HAL_DMA_Init+0x1bc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d045      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a63      	ldr	r2, [pc, #396]	; (800662c <HAL_DMA_Init+0x1c0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d040      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a62      	ldr	r2, [pc, #392]	; (8006630 <HAL_DMA_Init+0x1c4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d03b      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a60      	ldr	r2, [pc, #384]	; (8006634 <HAL_DMA_Init+0x1c8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d036      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a5f      	ldr	r2, [pc, #380]	; (8006638 <HAL_DMA_Init+0x1cc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d031      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a5d      	ldr	r2, [pc, #372]	; (800663c <HAL_DMA_Init+0x1d0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d02c      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5c      	ldr	r2, [pc, #368]	; (8006640 <HAL_DMA_Init+0x1d4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d027      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5a      	ldr	r2, [pc, #360]	; (8006644 <HAL_DMA_Init+0x1d8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d022      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a59      	ldr	r2, [pc, #356]	; (8006648 <HAL_DMA_Init+0x1dc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d01d      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a57      	ldr	r2, [pc, #348]	; (800664c <HAL_DMA_Init+0x1e0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d018      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a56      	ldr	r2, [pc, #344]	; (8006650 <HAL_DMA_Init+0x1e4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a54      	ldr	r2, [pc, #336]	; (8006654 <HAL_DMA_Init+0x1e8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00e      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a53      	ldr	r2, [pc, #332]	; (8006658 <HAL_DMA_Init+0x1ec>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d009      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a51      	ldr	r2, [pc, #324]	; (800665c <HAL_DMA_Init+0x1f0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_DMA_Init+0xb8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a50      	ldr	r2, [pc, #320]	; (8006660 <HAL_DMA_Init+0x1f4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <HAL_DMA_Init+0xbc>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <HAL_DMA_Init+0xbe>
 8006528:	2300      	movs	r3, #0
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 813b 	beq.w	80067a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a37      	ldr	r2, [pc, #220]	; (8006624 <HAL_DMA_Init+0x1b8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d04a      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a36      	ldr	r2, [pc, #216]	; (8006628 <HAL_DMA_Init+0x1bc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d045      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a34      	ldr	r2, [pc, #208]	; (800662c <HAL_DMA_Init+0x1c0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d040      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a33      	ldr	r2, [pc, #204]	; (8006630 <HAL_DMA_Init+0x1c4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d03b      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a31      	ldr	r2, [pc, #196]	; (8006634 <HAL_DMA_Init+0x1c8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d036      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a30      	ldr	r2, [pc, #192]	; (8006638 <HAL_DMA_Init+0x1cc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d031      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2e      	ldr	r2, [pc, #184]	; (800663c <HAL_DMA_Init+0x1d0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d02c      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a2d      	ldr	r2, [pc, #180]	; (8006640 <HAL_DMA_Init+0x1d4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d027      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <HAL_DMA_Init+0x1d8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d022      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <HAL_DMA_Init+0x1dc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d01d      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a28      	ldr	r2, [pc, #160]	; (800664c <HAL_DMA_Init+0x1e0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d018      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a27      	ldr	r2, [pc, #156]	; (8006650 <HAL_DMA_Init+0x1e4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a25      	ldr	r2, [pc, #148]	; (8006654 <HAL_DMA_Init+0x1e8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00e      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a24      	ldr	r2, [pc, #144]	; (8006658 <HAL_DMA_Init+0x1ec>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d009      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a22      	ldr	r2, [pc, #136]	; (800665c <HAL_DMA_Init+0x1f0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_DMA_Init+0x174>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a21      	ldr	r2, [pc, #132]	; (8006660 <HAL_DMA_Init+0x1f4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <HAL_DMA_Init+0x186>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e007      	b.n	8006602 <HAL_DMA_Init+0x196>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0201 	bic.w	r2, r2, #1
 8006600:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006602:	e02f      	b.n	8006664 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006604:	f7fd fe0a 	bl	800421c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b05      	cmp	r3, #5
 8006610:	d928      	bls.n	8006664 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2203      	movs	r2, #3
 800661c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e246      	b.n	8006ab2 <HAL_DMA_Init+0x646>
 8006624:	40020010 	.word	0x40020010
 8006628:	40020028 	.word	0x40020028
 800662c:	40020040 	.word	0x40020040
 8006630:	40020058 	.word	0x40020058
 8006634:	40020070 	.word	0x40020070
 8006638:	40020088 	.word	0x40020088
 800663c:	400200a0 	.word	0x400200a0
 8006640:	400200b8 	.word	0x400200b8
 8006644:	40020410 	.word	0x40020410
 8006648:	40020428 	.word	0x40020428
 800664c:	40020440 	.word	0x40020440
 8006650:	40020458 	.word	0x40020458
 8006654:	40020470 	.word	0x40020470
 8006658:	40020488 	.word	0x40020488
 800665c:	400204a0 	.word	0x400204a0
 8006660:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1c8      	bne.n	8006604 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4b83      	ldr	r3, [pc, #524]	; (800688c <HAL_DMA_Init+0x420>)
 800667e:	4013      	ands	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800668a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006696:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4313      	orrs	r3, r2
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80066c8:	4b71      	ldr	r3, [pc, #452]	; (8006890 <HAL_DMA_Init+0x424>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b71      	ldr	r3, [pc, #452]	; (8006894 <HAL_DMA_Init+0x428>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d328      	bcc.n	8006728 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b28      	cmp	r3, #40	; 0x28
 80066dc:	d903      	bls.n	80066e6 <HAL_DMA_Init+0x27a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b2e      	cmp	r3, #46	; 0x2e
 80066e4:	d917      	bls.n	8006716 <HAL_DMA_Init+0x2aa>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b3e      	cmp	r3, #62	; 0x3e
 80066ec:	d903      	bls.n	80066f6 <HAL_DMA_Init+0x28a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b42      	cmp	r3, #66	; 0x42
 80066f4:	d90f      	bls.n	8006716 <HAL_DMA_Init+0x2aa>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b46      	cmp	r3, #70	; 0x46
 80066fc:	d903      	bls.n	8006706 <HAL_DMA_Init+0x29a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b48      	cmp	r3, #72	; 0x48
 8006704:	d907      	bls.n	8006716 <HAL_DMA_Init+0x2aa>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b4e      	cmp	r3, #78	; 0x4e
 800670c:	d905      	bls.n	800671a <HAL_DMA_Init+0x2ae>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b52      	cmp	r3, #82	; 0x52
 8006714:	d801      	bhi.n	800671a <HAL_DMA_Init+0x2ae>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <HAL_DMA_Init+0x2b0>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006726:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	2b04      	cmp	r3, #4
 8006750:	d117      	bne.n	8006782 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f002 fb3f 	bl	8008de8 <DMA_CheckFifoParam>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e197      	b.n	8006ab2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f002 fa7a 	bl	8008c84 <DMA_CalcBaseAndBitshift>
 8006790:	4603      	mov	r3, r0
 8006792:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	223f      	movs	r2, #63	; 0x3f
 800679e:	409a      	lsls	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	e0cd      	b.n	8006942 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a3b      	ldr	r2, [pc, #236]	; (8006898 <HAL_DMA_Init+0x42c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d022      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a39      	ldr	r2, [pc, #228]	; (800689c <HAL_DMA_Init+0x430>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d01d      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a38      	ldr	r2, [pc, #224]	; (80068a0 <HAL_DMA_Init+0x434>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a36      	ldr	r2, [pc, #216]	; (80068a4 <HAL_DMA_Init+0x438>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a35      	ldr	r2, [pc, #212]	; (80068a8 <HAL_DMA_Init+0x43c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a33      	ldr	r2, [pc, #204]	; (80068ac <HAL_DMA_Init+0x440>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a32      	ldr	r2, [pc, #200]	; (80068b0 <HAL_DMA_Init+0x444>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_DMA_Init+0x38a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a30      	ldr	r2, [pc, #192]	; (80068b4 <HAL_DMA_Init+0x448>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <HAL_DMA_Init+0x38e>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <HAL_DMA_Init+0x390>
 80067fa:	2300      	movs	r3, #0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8097 	beq.w	8006930 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a24      	ldr	r2, [pc, #144]	; (8006898 <HAL_DMA_Init+0x42c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d021      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a22      	ldr	r2, [pc, #136]	; (800689c <HAL_DMA_Init+0x430>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01c      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a21      	ldr	r2, [pc, #132]	; (80068a0 <HAL_DMA_Init+0x434>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d017      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <HAL_DMA_Init+0x438>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d012      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1e      	ldr	r2, [pc, #120]	; (80068a8 <HAL_DMA_Init+0x43c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00d      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1c      	ldr	r2, [pc, #112]	; (80068ac <HAL_DMA_Init+0x440>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d008      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <HAL_DMA_Init+0x444>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <HAL_DMA_Init+0x3e4>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <HAL_DMA_Init+0x448>)
 800684e:	4293      	cmp	r3, r2
 8006850:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_DMA_Init+0x44c>)
 800686e:	4013      	ands	r3, r2
 8006870:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d020      	beq.n	80068bc <HAL_DMA_Init+0x450>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d102      	bne.n	8006888 <HAL_DMA_Init+0x41c>
 8006882:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006886:	e01a      	b.n	80068be <HAL_DMA_Init+0x452>
 8006888:	2300      	movs	r3, #0
 800688a:	e018      	b.n	80068be <HAL_DMA_Init+0x452>
 800688c:	fe10803f 	.word	0xfe10803f
 8006890:	5c001000 	.word	0x5c001000
 8006894:	ffff0000 	.word	0xffff0000
 8006898:	58025408 	.word	0x58025408
 800689c:	5802541c 	.word	0x5802541c
 80068a0:	58025430 	.word	0x58025430
 80068a4:	58025444 	.word	0x58025444
 80068a8:	58025458 	.word	0x58025458
 80068ac:	5802546c 	.word	0x5802546c
 80068b0:	58025480 	.word	0x58025480
 80068b4:	58025494 	.word	0x58025494
 80068b8:	fffe000f 	.word	0xfffe000f
 80068bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	68d2      	ldr	r2, [r2, #12]
 80068c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	4b6e      	ldr	r3, [pc, #440]	; (8006abc <HAL_DMA_Init+0x650>)
 8006904:	4413      	add	r3, r2
 8006906:	4a6e      	ldr	r2, [pc, #440]	; (8006ac0 <HAL_DMA_Init+0x654>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	009a      	lsls	r2, r3, #2
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f002 f9b5 	bl	8008c84 <DMA_CalcBaseAndBitshift>
 800691a:	4603      	mov	r3, r0
 800691c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	2201      	movs	r2, #1
 8006928:	409a      	lsls	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	e008      	b.n	8006942 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2240      	movs	r2, #64	; 0x40
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2203      	movs	r2, #3
 800693a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e0b7      	b.n	8006ab2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a5f      	ldr	r2, [pc, #380]	; (8006ac4 <HAL_DMA_Init+0x658>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d072      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a5d      	ldr	r2, [pc, #372]	; (8006ac8 <HAL_DMA_Init+0x65c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d06d      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a5c      	ldr	r2, [pc, #368]	; (8006acc <HAL_DMA_Init+0x660>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d068      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a5a      	ldr	r2, [pc, #360]	; (8006ad0 <HAL_DMA_Init+0x664>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d063      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a59      	ldr	r2, [pc, #356]	; (8006ad4 <HAL_DMA_Init+0x668>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d05e      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a57      	ldr	r2, [pc, #348]	; (8006ad8 <HAL_DMA_Init+0x66c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d059      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a56      	ldr	r2, [pc, #344]	; (8006adc <HAL_DMA_Init+0x670>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d054      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a54      	ldr	r2, [pc, #336]	; (8006ae0 <HAL_DMA_Init+0x674>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d04f      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a53      	ldr	r2, [pc, #332]	; (8006ae4 <HAL_DMA_Init+0x678>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d04a      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a51      	ldr	r2, [pc, #324]	; (8006ae8 <HAL_DMA_Init+0x67c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d045      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a50      	ldr	r2, [pc, #320]	; (8006aec <HAL_DMA_Init+0x680>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d040      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a4e      	ldr	r2, [pc, #312]	; (8006af0 <HAL_DMA_Init+0x684>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d03b      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a4d      	ldr	r2, [pc, #308]	; (8006af4 <HAL_DMA_Init+0x688>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d036      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a4b      	ldr	r2, [pc, #300]	; (8006af8 <HAL_DMA_Init+0x68c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d031      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a4a      	ldr	r2, [pc, #296]	; (8006afc <HAL_DMA_Init+0x690>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d02c      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a48      	ldr	r2, [pc, #288]	; (8006b00 <HAL_DMA_Init+0x694>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d027      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a47      	ldr	r2, [pc, #284]	; (8006b04 <HAL_DMA_Init+0x698>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d022      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a45      	ldr	r2, [pc, #276]	; (8006b08 <HAL_DMA_Init+0x69c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d01d      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a44      	ldr	r2, [pc, #272]	; (8006b0c <HAL_DMA_Init+0x6a0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d018      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a42      	ldr	r2, [pc, #264]	; (8006b10 <HAL_DMA_Init+0x6a4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a41      	ldr	r2, [pc, #260]	; (8006b14 <HAL_DMA_Init+0x6a8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00e      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a3f      	ldr	r2, [pc, #252]	; (8006b18 <HAL_DMA_Init+0x6ac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d009      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a3e      	ldr	r2, [pc, #248]	; (8006b1c <HAL_DMA_Init+0x6b0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d004      	beq.n	8006a32 <HAL_DMA_Init+0x5c6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3c      	ldr	r2, [pc, #240]	; (8006b20 <HAL_DMA_Init+0x6b4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <HAL_DMA_Init+0x5ca>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <HAL_DMA_Init+0x5cc>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d032      	beq.n	8006aa2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 fa4f 	bl	8008ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b80      	cmp	r3, #128	; 0x80
 8006a48:	d102      	bne.n	8006a50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d010      	beq.n	8006a90 <HAL_DMA_Init+0x624>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d80c      	bhi.n	8006a90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f002 facc 	bl	8009014 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a8c:	605a      	str	r2, [r3, #4]
 8006a8e:	e008      	b.n	8006aa2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	a7fdabf8 	.word	0xa7fdabf8
 8006ac0:	cccccccd 	.word	0xcccccccd
 8006ac4:	40020010 	.word	0x40020010
 8006ac8:	40020028 	.word	0x40020028
 8006acc:	40020040 	.word	0x40020040
 8006ad0:	40020058 	.word	0x40020058
 8006ad4:	40020070 	.word	0x40020070
 8006ad8:	40020088 	.word	0x40020088
 8006adc:	400200a0 	.word	0x400200a0
 8006ae0:	400200b8 	.word	0x400200b8
 8006ae4:	40020410 	.word	0x40020410
 8006ae8:	40020428 	.word	0x40020428
 8006aec:	40020440 	.word	0x40020440
 8006af0:	40020458 	.word	0x40020458
 8006af4:	40020470 	.word	0x40020470
 8006af8:	40020488 	.word	0x40020488
 8006afc:	400204a0 	.word	0x400204a0
 8006b00:	400204b8 	.word	0x400204b8
 8006b04:	58025408 	.word	0x58025408
 8006b08:	5802541c 	.word	0x5802541c
 8006b0c:	58025430 	.word	0x58025430
 8006b10:	58025444 	.word	0x58025444
 8006b14:	58025458 	.word	0x58025458
 8006b18:	5802546c 	.word	0x5802546c
 8006b1c:	58025480 	.word	0x58025480
 8006b20:	58025494 	.word	0x58025494

08006b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e226      	b.n	8006f8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_DMA_Start_IT+0x2a>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e21f      	b.n	8006f8e <HAL_DMA_Start_IT+0x46a>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	f040 820a 	bne.w	8006f78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a68      	ldr	r2, [pc, #416]	; (8006d18 <HAL_DMA_Start_IT+0x1f4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d04a      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a66      	ldr	r2, [pc, #408]	; (8006d1c <HAL_DMA_Start_IT+0x1f8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d045      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a65      	ldr	r2, [pc, #404]	; (8006d20 <HAL_DMA_Start_IT+0x1fc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d040      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a63      	ldr	r2, [pc, #396]	; (8006d24 <HAL_DMA_Start_IT+0x200>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d03b      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a62      	ldr	r2, [pc, #392]	; (8006d28 <HAL_DMA_Start_IT+0x204>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d036      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a60      	ldr	r2, [pc, #384]	; (8006d2c <HAL_DMA_Start_IT+0x208>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d031      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a5f      	ldr	r2, [pc, #380]	; (8006d30 <HAL_DMA_Start_IT+0x20c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d02c      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a5d      	ldr	r2, [pc, #372]	; (8006d34 <HAL_DMA_Start_IT+0x210>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d027      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a5c      	ldr	r2, [pc, #368]	; (8006d38 <HAL_DMA_Start_IT+0x214>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d022      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a5a      	ldr	r2, [pc, #360]	; (8006d3c <HAL_DMA_Start_IT+0x218>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01d      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a59      	ldr	r2, [pc, #356]	; (8006d40 <HAL_DMA_Start_IT+0x21c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d018      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a57      	ldr	r2, [pc, #348]	; (8006d44 <HAL_DMA_Start_IT+0x220>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a56      	ldr	r2, [pc, #344]	; (8006d48 <HAL_DMA_Start_IT+0x224>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a54      	ldr	r2, [pc, #336]	; (8006d4c <HAL_DMA_Start_IT+0x228>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a53      	ldr	r2, [pc, #332]	; (8006d50 <HAL_DMA_Start_IT+0x22c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_DMA_Start_IT+0xee>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a51      	ldr	r2, [pc, #324]	; (8006d54 <HAL_DMA_Start_IT+0x230>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d108      	bne.n	8006c24 <HAL_DMA_Start_IT+0x100>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e007      	b.n	8006c34 <HAL_DMA_Start_IT+0x110>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f001 fe76 	bl	800892c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a34      	ldr	r2, [pc, #208]	; (8006d18 <HAL_DMA_Start_IT+0x1f4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d04a      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a33      	ldr	r2, [pc, #204]	; (8006d1c <HAL_DMA_Start_IT+0x1f8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d045      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a31      	ldr	r2, [pc, #196]	; (8006d20 <HAL_DMA_Start_IT+0x1fc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d040      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a30      	ldr	r2, [pc, #192]	; (8006d24 <HAL_DMA_Start_IT+0x200>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d03b      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2e      	ldr	r2, [pc, #184]	; (8006d28 <HAL_DMA_Start_IT+0x204>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d036      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2d      	ldr	r2, [pc, #180]	; (8006d2c <HAL_DMA_Start_IT+0x208>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d031      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <HAL_DMA_Start_IT+0x20c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d02c      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <HAL_DMA_Start_IT+0x210>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d027      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <HAL_DMA_Start_IT+0x214>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d022      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <HAL_DMA_Start_IT+0x218>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d01d      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a25      	ldr	r2, [pc, #148]	; (8006d40 <HAL_DMA_Start_IT+0x21c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d018      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a24      	ldr	r2, [pc, #144]	; (8006d44 <HAL_DMA_Start_IT+0x220>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <HAL_DMA_Start_IT+0x224>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_DMA_Start_IT+0x228>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <HAL_DMA_Start_IT+0x22c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_DMA_Start_IT+0x1bc>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <HAL_DMA_Start_IT+0x230>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_DMA_Start_IT+0x1c0>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_DMA_Start_IT+0x1c2>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d036      	beq.n	8006d58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 021e 	bic.w	r2, r3, #30
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0216 	orr.w	r2, r2, #22
 8006cfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03e      	beq.n	8006d84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0208 	orr.w	r2, r2, #8
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e035      	b.n	8006d84 <HAL_DMA_Start_IT+0x260>
 8006d18:	40020010 	.word	0x40020010
 8006d1c:	40020028 	.word	0x40020028
 8006d20:	40020040 	.word	0x40020040
 8006d24:	40020058 	.word	0x40020058
 8006d28:	40020070 	.word	0x40020070
 8006d2c:	40020088 	.word	0x40020088
 8006d30:	400200a0 	.word	0x400200a0
 8006d34:	400200b8 	.word	0x400200b8
 8006d38:	40020410 	.word	0x40020410
 8006d3c:	40020428 	.word	0x40020428
 8006d40:	40020440 	.word	0x40020440
 8006d44:	40020458 	.word	0x40020458
 8006d48:	40020470 	.word	0x40020470
 8006d4c:	40020488 	.word	0x40020488
 8006d50:	400204a0 	.word	0x400204a0
 8006d54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f023 020e 	bic.w	r2, r3, #14
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 020a 	orr.w	r2, r2, #10
 8006d6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0204 	orr.w	r2, r2, #4
 8006d82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a83      	ldr	r2, [pc, #524]	; (8006f98 <HAL_DMA_Start_IT+0x474>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d072      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a82      	ldr	r2, [pc, #520]	; (8006f9c <HAL_DMA_Start_IT+0x478>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d06d      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a80      	ldr	r2, [pc, #512]	; (8006fa0 <HAL_DMA_Start_IT+0x47c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d068      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a7f      	ldr	r2, [pc, #508]	; (8006fa4 <HAL_DMA_Start_IT+0x480>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d063      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a7d      	ldr	r2, [pc, #500]	; (8006fa8 <HAL_DMA_Start_IT+0x484>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d05e      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a7c      	ldr	r2, [pc, #496]	; (8006fac <HAL_DMA_Start_IT+0x488>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d059      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a7a      	ldr	r2, [pc, #488]	; (8006fb0 <HAL_DMA_Start_IT+0x48c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d054      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a79      	ldr	r2, [pc, #484]	; (8006fb4 <HAL_DMA_Start_IT+0x490>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d04f      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a77      	ldr	r2, [pc, #476]	; (8006fb8 <HAL_DMA_Start_IT+0x494>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d04a      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a76      	ldr	r2, [pc, #472]	; (8006fbc <HAL_DMA_Start_IT+0x498>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d045      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a74      	ldr	r2, [pc, #464]	; (8006fc0 <HAL_DMA_Start_IT+0x49c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d040      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a73      	ldr	r2, [pc, #460]	; (8006fc4 <HAL_DMA_Start_IT+0x4a0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d03b      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a71      	ldr	r2, [pc, #452]	; (8006fc8 <HAL_DMA_Start_IT+0x4a4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d036      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a70      	ldr	r2, [pc, #448]	; (8006fcc <HAL_DMA_Start_IT+0x4a8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d031      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6e      	ldr	r2, [pc, #440]	; (8006fd0 <HAL_DMA_Start_IT+0x4ac>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d02c      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6d      	ldr	r2, [pc, #436]	; (8006fd4 <HAL_DMA_Start_IT+0x4b0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d027      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a6b      	ldr	r2, [pc, #428]	; (8006fd8 <HAL_DMA_Start_IT+0x4b4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d022      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a6a      	ldr	r2, [pc, #424]	; (8006fdc <HAL_DMA_Start_IT+0x4b8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d01d      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a68      	ldr	r2, [pc, #416]	; (8006fe0 <HAL_DMA_Start_IT+0x4bc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d018      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a67      	ldr	r2, [pc, #412]	; (8006fe4 <HAL_DMA_Start_IT+0x4c0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d013      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a65      	ldr	r2, [pc, #404]	; (8006fe8 <HAL_DMA_Start_IT+0x4c4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00e      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a64      	ldr	r2, [pc, #400]	; (8006fec <HAL_DMA_Start_IT+0x4c8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d009      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a62      	ldr	r2, [pc, #392]	; (8006ff0 <HAL_DMA_Start_IT+0x4cc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d004      	beq.n	8006e74 <HAL_DMA_Start_IT+0x350>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a61      	ldr	r2, [pc, #388]	; (8006ff4 <HAL_DMA_Start_IT+0x4d0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d101      	bne.n	8006e78 <HAL_DMA_Start_IT+0x354>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_DMA_Start_IT+0x356>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01a      	beq.n	8006eb4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a37      	ldr	r2, [pc, #220]	; (8006f98 <HAL_DMA_Start_IT+0x474>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d04a      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a36      	ldr	r2, [pc, #216]	; (8006f9c <HAL_DMA_Start_IT+0x478>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d045      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a34      	ldr	r2, [pc, #208]	; (8006fa0 <HAL_DMA_Start_IT+0x47c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d040      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a33      	ldr	r2, [pc, #204]	; (8006fa4 <HAL_DMA_Start_IT+0x480>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d03b      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a31      	ldr	r2, [pc, #196]	; (8006fa8 <HAL_DMA_Start_IT+0x484>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d036      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a30      	ldr	r2, [pc, #192]	; (8006fac <HAL_DMA_Start_IT+0x488>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d031      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a2e      	ldr	r2, [pc, #184]	; (8006fb0 <HAL_DMA_Start_IT+0x48c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02c      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a2d      	ldr	r2, [pc, #180]	; (8006fb4 <HAL_DMA_Start_IT+0x490>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d027      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <HAL_DMA_Start_IT+0x494>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d022      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2a      	ldr	r2, [pc, #168]	; (8006fbc <HAL_DMA_Start_IT+0x498>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d01d      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <HAL_DMA_Start_IT+0x49c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <HAL_DMA_Start_IT+0x4a0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <HAL_DMA_Start_IT+0x4a4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a24      	ldr	r2, [pc, #144]	; (8006fcc <HAL_DMA_Start_IT+0x4a8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_DMA_Start_IT+0x4ac>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_DMA_Start_IT+0x430>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a21      	ldr	r2, [pc, #132]	; (8006fd4 <HAL_DMA_Start_IT+0x4b0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d108      	bne.n	8006f66 <HAL_DMA_Start_IT+0x442>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e012      	b.n	8006f8c <HAL_DMA_Start_IT+0x468>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e009      	b.n	8006f8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40020010 	.word	0x40020010
 8006f9c:	40020028 	.word	0x40020028
 8006fa0:	40020040 	.word	0x40020040
 8006fa4:	40020058 	.word	0x40020058
 8006fa8:	40020070 	.word	0x40020070
 8006fac:	40020088 	.word	0x40020088
 8006fb0:	400200a0 	.word	0x400200a0
 8006fb4:	400200b8 	.word	0x400200b8
 8006fb8:	40020410 	.word	0x40020410
 8006fbc:	40020428 	.word	0x40020428
 8006fc0:	40020440 	.word	0x40020440
 8006fc4:	40020458 	.word	0x40020458
 8006fc8:	40020470 	.word	0x40020470
 8006fcc:	40020488 	.word	0x40020488
 8006fd0:	400204a0 	.word	0x400204a0
 8006fd4:	400204b8 	.word	0x400204b8
 8006fd8:	58025408 	.word	0x58025408
 8006fdc:	5802541c 	.word	0x5802541c
 8006fe0:	58025430 	.word	0x58025430
 8006fe4:	58025444 	.word	0x58025444
 8006fe8:	58025458 	.word	0x58025458
 8006fec:	5802546c 	.word	0x5802546c
 8006ff0:	58025480 	.word	0x58025480
 8006ff4:	58025494 	.word	0x58025494

08006ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007000:	f7fd f90c 	bl	800421c <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e2dc      	b.n	80075ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d008      	beq.n	800702e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e2cd      	b.n	80075ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a76      	ldr	r2, [pc, #472]	; (800720c <HAL_DMA_Abort+0x214>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d04a      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a74      	ldr	r2, [pc, #464]	; (8007210 <HAL_DMA_Abort+0x218>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d045      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a73      	ldr	r2, [pc, #460]	; (8007214 <HAL_DMA_Abort+0x21c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d040      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a71      	ldr	r2, [pc, #452]	; (8007218 <HAL_DMA_Abort+0x220>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d03b      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a70      	ldr	r2, [pc, #448]	; (800721c <HAL_DMA_Abort+0x224>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d036      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a6e      	ldr	r2, [pc, #440]	; (8007220 <HAL_DMA_Abort+0x228>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d031      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a6d      	ldr	r2, [pc, #436]	; (8007224 <HAL_DMA_Abort+0x22c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d02c      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6b      	ldr	r2, [pc, #428]	; (8007228 <HAL_DMA_Abort+0x230>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d027      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a6a      	ldr	r2, [pc, #424]	; (800722c <HAL_DMA_Abort+0x234>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d022      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a68      	ldr	r2, [pc, #416]	; (8007230 <HAL_DMA_Abort+0x238>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01d      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a67      	ldr	r2, [pc, #412]	; (8007234 <HAL_DMA_Abort+0x23c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d018      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a65      	ldr	r2, [pc, #404]	; (8007238 <HAL_DMA_Abort+0x240>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a64      	ldr	r2, [pc, #400]	; (800723c <HAL_DMA_Abort+0x244>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a62      	ldr	r2, [pc, #392]	; (8007240 <HAL_DMA_Abort+0x248>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a61      	ldr	r2, [pc, #388]	; (8007244 <HAL_DMA_Abort+0x24c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_DMA_Abort+0xd6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a5f      	ldr	r2, [pc, #380]	; (8007248 <HAL_DMA_Abort+0x250>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d101      	bne.n	80070d2 <HAL_DMA_Abort+0xda>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <HAL_DMA_Abort+0xdc>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d013      	beq.n	8007100 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 021e 	bic.w	r2, r2, #30
 80070e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	e00a      	b.n	8007116 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 020e 	bic.w	r2, r2, #14
 800710e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3c      	ldr	r2, [pc, #240]	; (800720c <HAL_DMA_Abort+0x214>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d072      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3a      	ldr	r2, [pc, #232]	; (8007210 <HAL_DMA_Abort+0x218>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d06d      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a39      	ldr	r2, [pc, #228]	; (8007214 <HAL_DMA_Abort+0x21c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d068      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a37      	ldr	r2, [pc, #220]	; (8007218 <HAL_DMA_Abort+0x220>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d063      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a36      	ldr	r2, [pc, #216]	; (800721c <HAL_DMA_Abort+0x224>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d05e      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a34      	ldr	r2, [pc, #208]	; (8007220 <HAL_DMA_Abort+0x228>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d059      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a33      	ldr	r2, [pc, #204]	; (8007224 <HAL_DMA_Abort+0x22c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d054      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a31      	ldr	r2, [pc, #196]	; (8007228 <HAL_DMA_Abort+0x230>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d04f      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a30      	ldr	r2, [pc, #192]	; (800722c <HAL_DMA_Abort+0x234>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d04a      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2e      	ldr	r2, [pc, #184]	; (8007230 <HAL_DMA_Abort+0x238>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d045      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2d      	ldr	r2, [pc, #180]	; (8007234 <HAL_DMA_Abort+0x23c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d040      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2b      	ldr	r2, [pc, #172]	; (8007238 <HAL_DMA_Abort+0x240>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d03b      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2a      	ldr	r2, [pc, #168]	; (800723c <HAL_DMA_Abort+0x244>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d036      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a28      	ldr	r2, [pc, #160]	; (8007240 <HAL_DMA_Abort+0x248>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d031      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a27      	ldr	r2, [pc, #156]	; (8007244 <HAL_DMA_Abort+0x24c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d02c      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a25      	ldr	r2, [pc, #148]	; (8007248 <HAL_DMA_Abort+0x250>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d027      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a24      	ldr	r2, [pc, #144]	; (800724c <HAL_DMA_Abort+0x254>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <HAL_DMA_Abort+0x258>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01d      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a21      	ldr	r2, [pc, #132]	; (8007254 <HAL_DMA_Abort+0x25c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <HAL_DMA_Abort+0x260>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_DMA_Abort+0x264>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <HAL_DMA_Abort+0x268>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_DMA_Abort+0x26c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_DMA_Abort+0x20e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a19      	ldr	r2, [pc, #100]	; (8007268 <HAL_DMA_Abort+0x270>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d132      	bne.n	800726c <HAL_DMA_Abort+0x274>
 8007206:	2301      	movs	r3, #1
 8007208:	e031      	b.n	800726e <HAL_DMA_Abort+0x276>
 800720a:	bf00      	nop
 800720c:	40020010 	.word	0x40020010
 8007210:	40020028 	.word	0x40020028
 8007214:	40020040 	.word	0x40020040
 8007218:	40020058 	.word	0x40020058
 800721c:	40020070 	.word	0x40020070
 8007220:	40020088 	.word	0x40020088
 8007224:	400200a0 	.word	0x400200a0
 8007228:	400200b8 	.word	0x400200b8
 800722c:	40020410 	.word	0x40020410
 8007230:	40020428 	.word	0x40020428
 8007234:	40020440 	.word	0x40020440
 8007238:	40020458 	.word	0x40020458
 800723c:	40020470 	.word	0x40020470
 8007240:	40020488 	.word	0x40020488
 8007244:	400204a0 	.word	0x400204a0
 8007248:	400204b8 	.word	0x400204b8
 800724c:	58025408 	.word	0x58025408
 8007250:	5802541c 	.word	0x5802541c
 8007254:	58025430 	.word	0x58025430
 8007258:	58025444 	.word	0x58025444
 800725c:	58025458 	.word	0x58025458
 8007260:	5802546c 	.word	0x5802546c
 8007264:	58025480 	.word	0x58025480
 8007268:	58025494 	.word	0x58025494
 800726c:	2300      	movs	r3, #0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007280:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a6d      	ldr	r2, [pc, #436]	; (800743c <HAL_DMA_Abort+0x444>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d04a      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a6b      	ldr	r2, [pc, #428]	; (8007440 <HAL_DMA_Abort+0x448>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d045      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a6a      	ldr	r2, [pc, #424]	; (8007444 <HAL_DMA_Abort+0x44c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d040      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a68      	ldr	r2, [pc, #416]	; (8007448 <HAL_DMA_Abort+0x450>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d03b      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a67      	ldr	r2, [pc, #412]	; (800744c <HAL_DMA_Abort+0x454>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d036      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a65      	ldr	r2, [pc, #404]	; (8007450 <HAL_DMA_Abort+0x458>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d031      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a64      	ldr	r2, [pc, #400]	; (8007454 <HAL_DMA_Abort+0x45c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a62      	ldr	r2, [pc, #392]	; (8007458 <HAL_DMA_Abort+0x460>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d027      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a61      	ldr	r2, [pc, #388]	; (800745c <HAL_DMA_Abort+0x464>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a5f      	ldr	r2, [pc, #380]	; (8007460 <HAL_DMA_Abort+0x468>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a5e      	ldr	r2, [pc, #376]	; (8007464 <HAL_DMA_Abort+0x46c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a5c      	ldr	r2, [pc, #368]	; (8007468 <HAL_DMA_Abort+0x470>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a5b      	ldr	r2, [pc, #364]	; (800746c <HAL_DMA_Abort+0x474>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a59      	ldr	r2, [pc, #356]	; (8007470 <HAL_DMA_Abort+0x478>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a58      	ldr	r2, [pc, #352]	; (8007474 <HAL_DMA_Abort+0x47c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <HAL_DMA_Abort+0x32a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a56      	ldr	r2, [pc, #344]	; (8007478 <HAL_DMA_Abort+0x480>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d108      	bne.n	8007334 <HAL_DMA_Abort+0x33c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e007      	b.n	8007344 <HAL_DMA_Abort+0x34c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0201 	bic.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007344:	e013      	b.n	800736e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007346:	f7fc ff69 	bl	800421c <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b05      	cmp	r3, #5
 8007352:	d90c      	bls.n	800736e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2203      	movs	r2, #3
 800735e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e12d      	b.n	80075ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a2f      	ldr	r2, [pc, #188]	; (800743c <HAL_DMA_Abort+0x444>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d04a      	beq.n	800741a <HAL_DMA_Abort+0x422>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <HAL_DMA_Abort+0x448>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d045      	beq.n	800741a <HAL_DMA_Abort+0x422>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a2c      	ldr	r2, [pc, #176]	; (8007444 <HAL_DMA_Abort+0x44c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d040      	beq.n	800741a <HAL_DMA_Abort+0x422>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <HAL_DMA_Abort+0x450>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d03b      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a29      	ldr	r2, [pc, #164]	; (800744c <HAL_DMA_Abort+0x454>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d036      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a27      	ldr	r2, [pc, #156]	; (8007450 <HAL_DMA_Abort+0x458>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a26      	ldr	r2, [pc, #152]	; (8007454 <HAL_DMA_Abort+0x45c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d02c      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a24      	ldr	r2, [pc, #144]	; (8007458 <HAL_DMA_Abort+0x460>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d027      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a23      	ldr	r2, [pc, #140]	; (800745c <HAL_DMA_Abort+0x464>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a21      	ldr	r2, [pc, #132]	; (8007460 <HAL_DMA_Abort+0x468>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a20      	ldr	r2, [pc, #128]	; (8007464 <HAL_DMA_Abort+0x46c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <HAL_DMA_Abort+0x470>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1d      	ldr	r2, [pc, #116]	; (800746c <HAL_DMA_Abort+0x474>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Abort+0x422>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <HAL_DMA_Abort+0x478>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_DMA_Abort+0x422>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1a      	ldr	r2, [pc, #104]	; (8007474 <HAL_DMA_Abort+0x47c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_DMA_Abort+0x422>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a18      	ldr	r2, [pc, #96]	; (8007478 <HAL_DMA_Abort+0x480>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d101      	bne.n	800741e <HAL_DMA_Abort+0x426>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <HAL_DMA_Abort+0x428>
 800741e:	2300      	movs	r3, #0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02b      	beq.n	800747c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007428:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	223f      	movs	r2, #63	; 0x3f
 8007434:	409a      	lsls	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	609a      	str	r2, [r3, #8]
 800743a:	e02a      	b.n	8007492 <HAL_DMA_Abort+0x49a>
 800743c:	40020010 	.word	0x40020010
 8007440:	40020028 	.word	0x40020028
 8007444:	40020040 	.word	0x40020040
 8007448:	40020058 	.word	0x40020058
 800744c:	40020070 	.word	0x40020070
 8007450:	40020088 	.word	0x40020088
 8007454:	400200a0 	.word	0x400200a0
 8007458:	400200b8 	.word	0x400200b8
 800745c:	40020410 	.word	0x40020410
 8007460:	40020428 	.word	0x40020428
 8007464:	40020440 	.word	0x40020440
 8007468:	40020458 	.word	0x40020458
 800746c:	40020470 	.word	0x40020470
 8007470:	40020488 	.word	0x40020488
 8007474:	400204a0 	.word	0x400204a0
 8007478:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007480:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2201      	movs	r2, #1
 800748c:	409a      	lsls	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4f      	ldr	r2, [pc, #316]	; (80075d4 <HAL_DMA_Abort+0x5dc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d072      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a4d      	ldr	r2, [pc, #308]	; (80075d8 <HAL_DMA_Abort+0x5e0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d06d      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a4c      	ldr	r2, [pc, #304]	; (80075dc <HAL_DMA_Abort+0x5e4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d068      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a4a      	ldr	r2, [pc, #296]	; (80075e0 <HAL_DMA_Abort+0x5e8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d063      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a49      	ldr	r2, [pc, #292]	; (80075e4 <HAL_DMA_Abort+0x5ec>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d05e      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a47      	ldr	r2, [pc, #284]	; (80075e8 <HAL_DMA_Abort+0x5f0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d059      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a46      	ldr	r2, [pc, #280]	; (80075ec <HAL_DMA_Abort+0x5f4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d054      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a44      	ldr	r2, [pc, #272]	; (80075f0 <HAL_DMA_Abort+0x5f8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d04f      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a43      	ldr	r2, [pc, #268]	; (80075f4 <HAL_DMA_Abort+0x5fc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a41      	ldr	r2, [pc, #260]	; (80075f8 <HAL_DMA_Abort+0x600>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a40      	ldr	r2, [pc, #256]	; (80075fc <HAL_DMA_Abort+0x604>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3e      	ldr	r2, [pc, #248]	; (8007600 <HAL_DMA_Abort+0x608>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3d      	ldr	r2, [pc, #244]	; (8007604 <HAL_DMA_Abort+0x60c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3b      	ldr	r2, [pc, #236]	; (8007608 <HAL_DMA_Abort+0x610>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a3a      	ldr	r2, [pc, #232]	; (800760c <HAL_DMA_Abort+0x614>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a38      	ldr	r2, [pc, #224]	; (8007610 <HAL_DMA_Abort+0x618>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a37      	ldr	r2, [pc, #220]	; (8007614 <HAL_DMA_Abort+0x61c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a35      	ldr	r2, [pc, #212]	; (8007618 <HAL_DMA_Abort+0x620>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a34      	ldr	r2, [pc, #208]	; (800761c <HAL_DMA_Abort+0x624>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a32      	ldr	r2, [pc, #200]	; (8007620 <HAL_DMA_Abort+0x628>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a31      	ldr	r2, [pc, #196]	; (8007624 <HAL_DMA_Abort+0x62c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2f      	ldr	r2, [pc, #188]	; (8007628 <HAL_DMA_Abort+0x630>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2e      	ldr	r2, [pc, #184]	; (800762c <HAL_DMA_Abort+0x634>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_DMA_Abort+0x58a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2c      	ldr	r2, [pc, #176]	; (8007630 <HAL_DMA_Abort+0x638>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d101      	bne.n	8007586 <HAL_DMA_Abort+0x58e>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <HAL_DMA_Abort+0x590>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007594:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00c      	beq.n	80075b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40020010 	.word	0x40020010
 80075d8:	40020028 	.word	0x40020028
 80075dc:	40020040 	.word	0x40020040
 80075e0:	40020058 	.word	0x40020058
 80075e4:	40020070 	.word	0x40020070
 80075e8:	40020088 	.word	0x40020088
 80075ec:	400200a0 	.word	0x400200a0
 80075f0:	400200b8 	.word	0x400200b8
 80075f4:	40020410 	.word	0x40020410
 80075f8:	40020428 	.word	0x40020428
 80075fc:	40020440 	.word	0x40020440
 8007600:	40020458 	.word	0x40020458
 8007604:	40020470 	.word	0x40020470
 8007608:	40020488 	.word	0x40020488
 800760c:	400204a0 	.word	0x400204a0
 8007610:	400204b8 	.word	0x400204b8
 8007614:	58025408 	.word	0x58025408
 8007618:	5802541c 	.word	0x5802541c
 800761c:	58025430 	.word	0x58025430
 8007620:	58025444 	.word	0x58025444
 8007624:	58025458 	.word	0x58025458
 8007628:	5802546c 	.word	0x5802546c
 800762c:	58025480 	.word	0x58025480
 8007630:	58025494 	.word	0x58025494

08007634 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e237      	b.n	8007ab6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d004      	beq.n	800765c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2280      	movs	r2, #128	; 0x80
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e22c      	b.n	8007ab6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a5c      	ldr	r2, [pc, #368]	; (80077d4 <HAL_DMA_Abort_IT+0x1a0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d04a      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a5b      	ldr	r2, [pc, #364]	; (80077d8 <HAL_DMA_Abort_IT+0x1a4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d045      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a59      	ldr	r2, [pc, #356]	; (80077dc <HAL_DMA_Abort_IT+0x1a8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a58      	ldr	r2, [pc, #352]	; (80077e0 <HAL_DMA_Abort_IT+0x1ac>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d03b      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a56      	ldr	r2, [pc, #344]	; (80077e4 <HAL_DMA_Abort_IT+0x1b0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d036      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a55      	ldr	r2, [pc, #340]	; (80077e8 <HAL_DMA_Abort_IT+0x1b4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d031      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a53      	ldr	r2, [pc, #332]	; (80077ec <HAL_DMA_Abort_IT+0x1b8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d02c      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a52      	ldr	r2, [pc, #328]	; (80077f0 <HAL_DMA_Abort_IT+0x1bc>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d027      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a50      	ldr	r2, [pc, #320]	; (80077f4 <HAL_DMA_Abort_IT+0x1c0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d022      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a4f      	ldr	r2, [pc, #316]	; (80077f8 <HAL_DMA_Abort_IT+0x1c4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01d      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a4d      	ldr	r2, [pc, #308]	; (80077fc <HAL_DMA_Abort_IT+0x1c8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a4c      	ldr	r2, [pc, #304]	; (8007800 <HAL_DMA_Abort_IT+0x1cc>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a4a      	ldr	r2, [pc, #296]	; (8007804 <HAL_DMA_Abort_IT+0x1d0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00e      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a49      	ldr	r2, [pc, #292]	; (8007808 <HAL_DMA_Abort_IT+0x1d4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a47      	ldr	r2, [pc, #284]	; (800780c <HAL_DMA_Abort_IT+0x1d8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a46      	ldr	r2, [pc, #280]	; (8007810 <HAL_DMA_Abort_IT+0x1dc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <HAL_DMA_Abort_IT+0xcc>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_DMA_Abort_IT+0xce>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8086 	beq.w	8007814 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <HAL_DMA_Abort_IT+0x1a0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d04a      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a2e      	ldr	r2, [pc, #184]	; (80077d8 <HAL_DMA_Abort_IT+0x1a4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d045      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <HAL_DMA_Abort_IT+0x1a8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d040      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <HAL_DMA_Abort_IT+0x1ac>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d03b      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <HAL_DMA_Abort_IT+0x1b0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d036      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <HAL_DMA_Abort_IT+0x1b4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d031      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a26      	ldr	r2, [pc, #152]	; (80077ec <HAL_DMA_Abort_IT+0x1b8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d02c      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a25      	ldr	r2, [pc, #148]	; (80077f0 <HAL_DMA_Abort_IT+0x1bc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d027      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a23      	ldr	r2, [pc, #140]	; (80077f4 <HAL_DMA_Abort_IT+0x1c0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d022      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <HAL_DMA_Abort_IT+0x1c4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d01d      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a20      	ldr	r2, [pc, #128]	; (80077fc <HAL_DMA_Abort_IT+0x1c8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d018      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1f      	ldr	r2, [pc, #124]	; (8007800 <HAL_DMA_Abort_IT+0x1cc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d013      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <HAL_DMA_Abort_IT+0x1d0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00e      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <HAL_DMA_Abort_IT+0x1d4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d009      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <HAL_DMA_Abort_IT+0x1d8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_DMA_Abort_IT+0x17c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_DMA_Abort_IT+0x1dc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d108      	bne.n	80077c2 <HAL_DMA_Abort_IT+0x18e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e178      	b.n	8007ab4 <HAL_DMA_Abort_IT+0x480>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e16f      	b.n	8007ab4 <HAL_DMA_Abort_IT+0x480>
 80077d4:	40020010 	.word	0x40020010
 80077d8:	40020028 	.word	0x40020028
 80077dc:	40020040 	.word	0x40020040
 80077e0:	40020058 	.word	0x40020058
 80077e4:	40020070 	.word	0x40020070
 80077e8:	40020088 	.word	0x40020088
 80077ec:	400200a0 	.word	0x400200a0
 80077f0:	400200b8 	.word	0x400200b8
 80077f4:	40020410 	.word	0x40020410
 80077f8:	40020428 	.word	0x40020428
 80077fc:	40020440 	.word	0x40020440
 8007800:	40020458 	.word	0x40020458
 8007804:	40020470 	.word	0x40020470
 8007808:	40020488 	.word	0x40020488
 800780c:	400204a0 	.word	0x400204a0
 8007810:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 020e 	bic.w	r2, r2, #14
 8007822:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a6c      	ldr	r2, [pc, #432]	; (80079dc <HAL_DMA_Abort_IT+0x3a8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d04a      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a6b      	ldr	r2, [pc, #428]	; (80079e0 <HAL_DMA_Abort_IT+0x3ac>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d045      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a69      	ldr	r2, [pc, #420]	; (80079e4 <HAL_DMA_Abort_IT+0x3b0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d040      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a68      	ldr	r2, [pc, #416]	; (80079e8 <HAL_DMA_Abort_IT+0x3b4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d03b      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a66      	ldr	r2, [pc, #408]	; (80079ec <HAL_DMA_Abort_IT+0x3b8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d036      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a65      	ldr	r2, [pc, #404]	; (80079f0 <HAL_DMA_Abort_IT+0x3bc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d031      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a63      	ldr	r2, [pc, #396]	; (80079f4 <HAL_DMA_Abort_IT+0x3c0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d02c      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a62      	ldr	r2, [pc, #392]	; (80079f8 <HAL_DMA_Abort_IT+0x3c4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d027      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a60      	ldr	r2, [pc, #384]	; (80079fc <HAL_DMA_Abort_IT+0x3c8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d022      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a5f      	ldr	r2, [pc, #380]	; (8007a00 <HAL_DMA_Abort_IT+0x3cc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d01d      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a5d      	ldr	r2, [pc, #372]	; (8007a04 <HAL_DMA_Abort_IT+0x3d0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a5c      	ldr	r2, [pc, #368]	; (8007a08 <HAL_DMA_Abort_IT+0x3d4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a5a      	ldr	r2, [pc, #360]	; (8007a0c <HAL_DMA_Abort_IT+0x3d8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a59      	ldr	r2, [pc, #356]	; (8007a10 <HAL_DMA_Abort_IT+0x3dc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a57      	ldr	r2, [pc, #348]	; (8007a14 <HAL_DMA_Abort_IT+0x3e0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x290>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a56      	ldr	r2, [pc, #344]	; (8007a18 <HAL_DMA_Abort_IT+0x3e4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d108      	bne.n	80078d6 <HAL_DMA_Abort_IT+0x2a2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e007      	b.n	80078e6 <HAL_DMA_Abort_IT+0x2b2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3c      	ldr	r2, [pc, #240]	; (80079dc <HAL_DMA_Abort_IT+0x3a8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d072      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a3a      	ldr	r2, [pc, #232]	; (80079e0 <HAL_DMA_Abort_IT+0x3ac>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d06d      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a39      	ldr	r2, [pc, #228]	; (80079e4 <HAL_DMA_Abort_IT+0x3b0>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d068      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a37      	ldr	r2, [pc, #220]	; (80079e8 <HAL_DMA_Abort_IT+0x3b4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d063      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a36      	ldr	r2, [pc, #216]	; (80079ec <HAL_DMA_Abort_IT+0x3b8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d05e      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a34      	ldr	r2, [pc, #208]	; (80079f0 <HAL_DMA_Abort_IT+0x3bc>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d059      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a33      	ldr	r2, [pc, #204]	; (80079f4 <HAL_DMA_Abort_IT+0x3c0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d054      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a31      	ldr	r2, [pc, #196]	; (80079f8 <HAL_DMA_Abort_IT+0x3c4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d04f      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a30      	ldr	r2, [pc, #192]	; (80079fc <HAL_DMA_Abort_IT+0x3c8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d04a      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a2e      	ldr	r2, [pc, #184]	; (8007a00 <HAL_DMA_Abort_IT+0x3cc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d045      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a2d      	ldr	r2, [pc, #180]	; (8007a04 <HAL_DMA_Abort_IT+0x3d0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d040      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a2b      	ldr	r2, [pc, #172]	; (8007a08 <HAL_DMA_Abort_IT+0x3d4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d03b      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <HAL_DMA_Abort_IT+0x3d8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d036      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a28      	ldr	r2, [pc, #160]	; (8007a10 <HAL_DMA_Abort_IT+0x3dc>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d031      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a27      	ldr	r2, [pc, #156]	; (8007a14 <HAL_DMA_Abort_IT+0x3e0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d02c      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a25      	ldr	r2, [pc, #148]	; (8007a18 <HAL_DMA_Abort_IT+0x3e4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d027      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <HAL_DMA_Abort_IT+0x3e8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a22      	ldr	r2, [pc, #136]	; (8007a20 <HAL_DMA_Abort_IT+0x3ec>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a21      	ldr	r2, [pc, #132]	; (8007a24 <HAL_DMA_Abort_IT+0x3f0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1f      	ldr	r2, [pc, #124]	; (8007a28 <HAL_DMA_Abort_IT+0x3f4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1e      	ldr	r2, [pc, #120]	; (8007a2c <HAL_DMA_Abort_IT+0x3f8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <HAL_DMA_Abort_IT+0x3fc>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <HAL_DMA_Abort_IT+0x400>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <HAL_DMA_Abort_IT+0x3a2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a19      	ldr	r2, [pc, #100]	; (8007a38 <HAL_DMA_Abort_IT+0x404>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d132      	bne.n	8007a3c <HAL_DMA_Abort_IT+0x408>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e031      	b.n	8007a3e <HAL_DMA_Abort_IT+0x40a>
 80079da:	bf00      	nop
 80079dc:	40020010 	.word	0x40020010
 80079e0:	40020028 	.word	0x40020028
 80079e4:	40020040 	.word	0x40020040
 80079e8:	40020058 	.word	0x40020058
 80079ec:	40020070 	.word	0x40020070
 80079f0:	40020088 	.word	0x40020088
 80079f4:	400200a0 	.word	0x400200a0
 80079f8:	400200b8 	.word	0x400200b8
 80079fc:	40020410 	.word	0x40020410
 8007a00:	40020428 	.word	0x40020428
 8007a04:	40020440 	.word	0x40020440
 8007a08:	40020458 	.word	0x40020458
 8007a0c:	40020470 	.word	0x40020470
 8007a10:	40020488 	.word	0x40020488
 8007a14:	400204a0 	.word	0x400204a0
 8007a18:	400204b8 	.word	0x400204b8
 8007a1c:	58025408 	.word	0x58025408
 8007a20:	5802541c 	.word	0x5802541c
 8007a24:	58025430 	.word	0x58025430
 8007a28:	58025444 	.word	0x58025444
 8007a2c:	58025458 	.word	0x58025458
 8007a30:	5802546c 	.word	0x5802546c
 8007a34:	58025480 	.word	0x58025480
 8007a38:	58025494 	.word	0x58025494
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d028      	beq.n	8007a94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	2201      	movs	r2, #1
 8007a62:	409a      	lsls	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00c      	beq.n	8007a94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop

08007ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	; 0x28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007acc:	4b67      	ldr	r3, [pc, #412]	; (8007c6c <HAL_DMA_IRQHandler+0x1ac>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a67      	ldr	r2, [pc, #412]	; (8007c70 <HAL_DMA_IRQHandler+0x1b0>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	0a9b      	lsrs	r3, r3, #10
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a5f      	ldr	r2, [pc, #380]	; (8007c74 <HAL_DMA_IRQHandler+0x1b4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d04a      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a5d      	ldr	r2, [pc, #372]	; (8007c78 <HAL_DMA_IRQHandler+0x1b8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d045      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a5c      	ldr	r2, [pc, #368]	; (8007c7c <HAL_DMA_IRQHandler+0x1bc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d040      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a5a      	ldr	r2, [pc, #360]	; (8007c80 <HAL_DMA_IRQHandler+0x1c0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d03b      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a59      	ldr	r2, [pc, #356]	; (8007c84 <HAL_DMA_IRQHandler+0x1c4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d036      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a57      	ldr	r2, [pc, #348]	; (8007c88 <HAL_DMA_IRQHandler+0x1c8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d031      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a56      	ldr	r2, [pc, #344]	; (8007c8c <HAL_DMA_IRQHandler+0x1cc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d02c      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a54      	ldr	r2, [pc, #336]	; (8007c90 <HAL_DMA_IRQHandler+0x1d0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d027      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a53      	ldr	r2, [pc, #332]	; (8007c94 <HAL_DMA_IRQHandler+0x1d4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d022      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a51      	ldr	r2, [pc, #324]	; (8007c98 <HAL_DMA_IRQHandler+0x1d8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01d      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a50      	ldr	r2, [pc, #320]	; (8007c9c <HAL_DMA_IRQHandler+0x1dc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d018      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a4e      	ldr	r2, [pc, #312]	; (8007ca0 <HAL_DMA_IRQHandler+0x1e0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d013      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a4d      	ldr	r2, [pc, #308]	; (8007ca4 <HAL_DMA_IRQHandler+0x1e4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00e      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a4b      	ldr	r2, [pc, #300]	; (8007ca8 <HAL_DMA_IRQHandler+0x1e8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d009      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a4a      	ldr	r2, [pc, #296]	; (8007cac <HAL_DMA_IRQHandler+0x1ec>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d004      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xd2>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a48      	ldr	r2, [pc, #288]	; (8007cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <HAL_DMA_IRQHandler+0xd6>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <HAL_DMA_IRQHandler+0xd8>
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 842b 	beq.w	80083f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	409a      	lsls	r2, r3
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80a2 	beq.w	8007cf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2e      	ldr	r2, [pc, #184]	; (8007c74 <HAL_DMA_IRQHandler+0x1b4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04a      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a2d      	ldr	r2, [pc, #180]	; (8007c78 <HAL_DMA_IRQHandler+0x1b8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d045      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a2b      	ldr	r2, [pc, #172]	; (8007c7c <HAL_DMA_IRQHandler+0x1bc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d040      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a2a      	ldr	r2, [pc, #168]	; (8007c80 <HAL_DMA_IRQHandler+0x1c0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d03b      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a28      	ldr	r2, [pc, #160]	; (8007c84 <HAL_DMA_IRQHandler+0x1c4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d036      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a27      	ldr	r2, [pc, #156]	; (8007c88 <HAL_DMA_IRQHandler+0x1c8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d031      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <HAL_DMA_IRQHandler+0x1cc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a24      	ldr	r2, [pc, #144]	; (8007c90 <HAL_DMA_IRQHandler+0x1d0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d027      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <HAL_DMA_IRQHandler+0x1d4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <HAL_DMA_IRQHandler+0x1d8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <HAL_DMA_IRQHandler+0x1dc>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1e      	ldr	r2, [pc, #120]	; (8007ca0 <HAL_DMA_IRQHandler+0x1e0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1c      	ldr	r2, [pc, #112]	; (8007ca4 <HAL_DMA_IRQHandler+0x1e4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ca8 <HAL_DMA_IRQHandler+0x1e8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a19      	ldr	r2, [pc, #100]	; (8007cac <HAL_DMA_IRQHandler+0x1ec>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x194>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a18      	ldr	r2, [pc, #96]	; (8007cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d12f      	bne.n	8007cb4 <HAL_DMA_IRQHandler+0x1f4>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bf14      	ite	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	2300      	moveq	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	e02e      	b.n	8007cc8 <HAL_DMA_IRQHandler+0x208>
 8007c6a:	bf00      	nop
 8007c6c:	24000090 	.word	0x24000090
 8007c70:	1b4e81b5 	.word	0x1b4e81b5
 8007c74:	40020010 	.word	0x40020010
 8007c78:	40020028 	.word	0x40020028
 8007c7c:	40020040 	.word	0x40020040
 8007c80:	40020058 	.word	0x40020058
 8007c84:	40020070 	.word	0x40020070
 8007c88:	40020088 	.word	0x40020088
 8007c8c:	400200a0 	.word	0x400200a0
 8007c90:	400200b8 	.word	0x400200b8
 8007c94:	40020410 	.word	0x40020410
 8007c98:	40020428 	.word	0x40020428
 8007c9c:	40020440 	.word	0x40020440
 8007ca0:	40020458 	.word	0x40020458
 8007ca4:	40020470 	.word	0x40020470
 8007ca8:	40020488 	.word	0x40020488
 8007cac:	400204a0 	.word	0x400204a0
 8007cb0:	400204b8 	.word	0x400204b8
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bf14      	ite	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	2300      	moveq	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d015      	beq.n	8007cf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0204 	bic.w	r2, r2, #4
 8007cda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	f003 031f 	and.w	r3, r3, #31
 8007ce4:	2208      	movs	r2, #8
 8007ce6:	409a      	lsls	r2, r3
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	fa22 f303 	lsr.w	r3, r2, r3
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d06e      	beq.n	8007dec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a69      	ldr	r2, [pc, #420]	; (8007eb8 <HAL_DMA_IRQHandler+0x3f8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d04a      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a67      	ldr	r2, [pc, #412]	; (8007ebc <HAL_DMA_IRQHandler+0x3fc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d045      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a66      	ldr	r2, [pc, #408]	; (8007ec0 <HAL_DMA_IRQHandler+0x400>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d040      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a64      	ldr	r2, [pc, #400]	; (8007ec4 <HAL_DMA_IRQHandler+0x404>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d03b      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a63      	ldr	r2, [pc, #396]	; (8007ec8 <HAL_DMA_IRQHandler+0x408>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d036      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a61      	ldr	r2, [pc, #388]	; (8007ecc <HAL_DMA_IRQHandler+0x40c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d031      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a60      	ldr	r2, [pc, #384]	; (8007ed0 <HAL_DMA_IRQHandler+0x410>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d02c      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a5e      	ldr	r2, [pc, #376]	; (8007ed4 <HAL_DMA_IRQHandler+0x414>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d027      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a5d      	ldr	r2, [pc, #372]	; (8007ed8 <HAL_DMA_IRQHandler+0x418>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d022      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a5b      	ldr	r2, [pc, #364]	; (8007edc <HAL_DMA_IRQHandler+0x41c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d01d      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a5a      	ldr	r2, [pc, #360]	; (8007ee0 <HAL_DMA_IRQHandler+0x420>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d018      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a58      	ldr	r2, [pc, #352]	; (8007ee4 <HAL_DMA_IRQHandler+0x424>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a57      	ldr	r2, [pc, #348]	; (8007ee8 <HAL_DMA_IRQHandler+0x428>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00e      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a55      	ldr	r2, [pc, #340]	; (8007eec <HAL_DMA_IRQHandler+0x42c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d009      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a54      	ldr	r2, [pc, #336]	; (8007ef0 <HAL_DMA_IRQHandler+0x430>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_DMA_IRQHandler+0x2ee>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a52      	ldr	r2, [pc, #328]	; (8007ef4 <HAL_DMA_IRQHandler+0x434>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10a      	bne.n	8007dc4 <HAL_DMA_IRQHandler+0x304>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bf14      	ite	ne
 8007dbc:	2301      	movne	r3, #1
 8007dbe:	2300      	moveq	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e003      	b.n	8007dcc <HAL_DMA_IRQHandler+0x30c>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00d      	beq.n	8007dec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	2201      	movs	r2, #1
 8007dda:	409a      	lsls	r2, r3
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de4:	f043 0202 	orr.w	r2, r3, #2
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	2204      	movs	r2, #4
 8007df6:	409a      	lsls	r2, r3
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 808f 	beq.w	8007f20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <HAL_DMA_IRQHandler+0x3f8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d04a      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a2a      	ldr	r2, [pc, #168]	; (8007ebc <HAL_DMA_IRQHandler+0x3fc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d045      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a29      	ldr	r2, [pc, #164]	; (8007ec0 <HAL_DMA_IRQHandler+0x400>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d040      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a27      	ldr	r2, [pc, #156]	; (8007ec4 <HAL_DMA_IRQHandler+0x404>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d03b      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a26      	ldr	r2, [pc, #152]	; (8007ec8 <HAL_DMA_IRQHandler+0x408>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d036      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <HAL_DMA_IRQHandler+0x40c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d031      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a23      	ldr	r2, [pc, #140]	; (8007ed0 <HAL_DMA_IRQHandler+0x410>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d02c      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a21      	ldr	r2, [pc, #132]	; (8007ed4 <HAL_DMA_IRQHandler+0x414>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d027      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a20      	ldr	r2, [pc, #128]	; (8007ed8 <HAL_DMA_IRQHandler+0x418>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d022      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <HAL_DMA_IRQHandler+0x41c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d01d      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <HAL_DMA_IRQHandler+0x420>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d018      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <HAL_DMA_IRQHandler+0x424>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <HAL_DMA_IRQHandler+0x428>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00e      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a18      	ldr	r2, [pc, #96]	; (8007eec <HAL_DMA_IRQHandler+0x42c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d009      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a17      	ldr	r2, [pc, #92]	; (8007ef0 <HAL_DMA_IRQHandler+0x430>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <HAL_DMA_IRQHandler+0x3e2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <HAL_DMA_IRQHandler+0x434>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d12a      	bne.n	8007ef8 <HAL_DMA_IRQHandler+0x438>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bf14      	ite	ne
 8007eb0:	2301      	movne	r3, #1
 8007eb2:	2300      	moveq	r3, #0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	e023      	b.n	8007f00 <HAL_DMA_IRQHandler+0x440>
 8007eb8:	40020010 	.word	0x40020010
 8007ebc:	40020028 	.word	0x40020028
 8007ec0:	40020040 	.word	0x40020040
 8007ec4:	40020058 	.word	0x40020058
 8007ec8:	40020070 	.word	0x40020070
 8007ecc:	40020088 	.word	0x40020088
 8007ed0:	400200a0 	.word	0x400200a0
 8007ed4:	400200b8 	.word	0x400200b8
 8007ed8:	40020410 	.word	0x40020410
 8007edc:	40020428 	.word	0x40020428
 8007ee0:	40020440 	.word	0x40020440
 8007ee4:	40020458 	.word	0x40020458
 8007ee8:	40020470 	.word	0x40020470
 8007eec:	40020488 	.word	0x40020488
 8007ef0:	400204a0 	.word	0x400204a0
 8007ef4:	400204b8 	.word	0x400204b8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00d      	beq.n	8007f20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	f043 0204 	orr.w	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2210      	movs	r2, #16
 8007f2a:	409a      	lsls	r2, r3
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80a6 	beq.w	8008082 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a85      	ldr	r2, [pc, #532]	; (8008150 <HAL_DMA_IRQHandler+0x690>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d04a      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a83      	ldr	r2, [pc, #524]	; (8008154 <HAL_DMA_IRQHandler+0x694>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d045      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a82      	ldr	r2, [pc, #520]	; (8008158 <HAL_DMA_IRQHandler+0x698>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d040      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a80      	ldr	r2, [pc, #512]	; (800815c <HAL_DMA_IRQHandler+0x69c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d03b      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a7f      	ldr	r2, [pc, #508]	; (8008160 <HAL_DMA_IRQHandler+0x6a0>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d036      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a7d      	ldr	r2, [pc, #500]	; (8008164 <HAL_DMA_IRQHandler+0x6a4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d031      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a7c      	ldr	r2, [pc, #496]	; (8008168 <HAL_DMA_IRQHandler+0x6a8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d02c      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a7a      	ldr	r2, [pc, #488]	; (800816c <HAL_DMA_IRQHandler+0x6ac>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d027      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a79      	ldr	r2, [pc, #484]	; (8008170 <HAL_DMA_IRQHandler+0x6b0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d022      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a77      	ldr	r2, [pc, #476]	; (8008174 <HAL_DMA_IRQHandler+0x6b4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01d      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a76      	ldr	r2, [pc, #472]	; (8008178 <HAL_DMA_IRQHandler+0x6b8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d018      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a74      	ldr	r2, [pc, #464]	; (800817c <HAL_DMA_IRQHandler+0x6bc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d013      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a73      	ldr	r2, [pc, #460]	; (8008180 <HAL_DMA_IRQHandler+0x6c0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a71      	ldr	r2, [pc, #452]	; (8008184 <HAL_DMA_IRQHandler+0x6c4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d009      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a70      	ldr	r2, [pc, #448]	; (8008188 <HAL_DMA_IRQHandler+0x6c8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x516>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6e      	ldr	r2, [pc, #440]	; (800818c <HAL_DMA_IRQHandler+0x6cc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10a      	bne.n	8007fec <HAL_DMA_IRQHandler+0x52c>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bf14      	ite	ne
 8007fe4:	2301      	movne	r3, #1
 8007fe6:	2300      	moveq	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	e009      	b.n	8008000 <HAL_DMA_IRQHandler+0x540>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bf14      	ite	ne
 8007ffa:	2301      	movne	r3, #1
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d03e      	beq.n	8008082 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2210      	movs	r2, #16
 800800e:	409a      	lsls	r2, r3
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d018      	beq.n	8008054 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d108      	bne.n	8008042 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d024      	beq.n	8008082 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
 8008040:	e01f      	b.n	8008082 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01b      	beq.n	8008082 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
 8008052:	e016      	b.n	8008082 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805e:	2b00      	cmp	r3, #0
 8008060:	d107      	bne.n	8008072 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0208 	bic.w	r2, r2, #8
 8008070:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	2220      	movs	r2, #32
 800808c:	409a      	lsls	r2, r3
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8110 	beq.w	80082b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a2c      	ldr	r2, [pc, #176]	; (8008150 <HAL_DMA_IRQHandler+0x690>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d04a      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a2b      	ldr	r2, [pc, #172]	; (8008154 <HAL_DMA_IRQHandler+0x694>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d045      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a29      	ldr	r2, [pc, #164]	; (8008158 <HAL_DMA_IRQHandler+0x698>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d040      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a28      	ldr	r2, [pc, #160]	; (800815c <HAL_DMA_IRQHandler+0x69c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d03b      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a26      	ldr	r2, [pc, #152]	; (8008160 <HAL_DMA_IRQHandler+0x6a0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d036      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a25      	ldr	r2, [pc, #148]	; (8008164 <HAL_DMA_IRQHandler+0x6a4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d031      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a23      	ldr	r2, [pc, #140]	; (8008168 <HAL_DMA_IRQHandler+0x6a8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d02c      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a22      	ldr	r2, [pc, #136]	; (800816c <HAL_DMA_IRQHandler+0x6ac>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d027      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a20      	ldr	r2, [pc, #128]	; (8008170 <HAL_DMA_IRQHandler+0x6b0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d022      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <HAL_DMA_IRQHandler+0x6b4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d01d      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <HAL_DMA_IRQHandler+0x6b8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d018      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1c      	ldr	r2, [pc, #112]	; (800817c <HAL_DMA_IRQHandler+0x6bc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d013      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1a      	ldr	r2, [pc, #104]	; (8008180 <HAL_DMA_IRQHandler+0x6c0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00e      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a19      	ldr	r2, [pc, #100]	; (8008184 <HAL_DMA_IRQHandler+0x6c4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d009      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <HAL_DMA_IRQHandler+0x6c8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_DMA_IRQHandler+0x678>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a16      	ldr	r2, [pc, #88]	; (800818c <HAL_DMA_IRQHandler+0x6cc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d12b      	bne.n	8008190 <HAL_DMA_IRQHandler+0x6d0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0310 	and.w	r3, r3, #16
 8008142:	2b00      	cmp	r3, #0
 8008144:	bf14      	ite	ne
 8008146:	2301      	movne	r3, #1
 8008148:	2300      	moveq	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	e02a      	b.n	80081a4 <HAL_DMA_IRQHandler+0x6e4>
 800814e:	bf00      	nop
 8008150:	40020010 	.word	0x40020010
 8008154:	40020028 	.word	0x40020028
 8008158:	40020040 	.word	0x40020040
 800815c:	40020058 	.word	0x40020058
 8008160:	40020070 	.word	0x40020070
 8008164:	40020088 	.word	0x40020088
 8008168:	400200a0 	.word	0x400200a0
 800816c:	400200b8 	.word	0x400200b8
 8008170:	40020410 	.word	0x40020410
 8008174:	40020428 	.word	0x40020428
 8008178:	40020440 	.word	0x40020440
 800817c:	40020458 	.word	0x40020458
 8008180:	40020470 	.word	0x40020470
 8008184:	40020488 	.word	0x40020488
 8008188:	400204a0 	.word	0x400204a0
 800818c:	400204b8 	.word	0x400204b8
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	bf14      	ite	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	2300      	moveq	r3, #0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 8087 	beq.w	80082b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2220      	movs	r2, #32
 80081b4:	409a      	lsls	r2, r3
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d139      	bne.n	800823a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0216 	bic.w	r2, r2, #22
 80081d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <HAL_DMA_IRQHandler+0x736>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0208 	bic.w	r2, r2, #8
 8008204:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	223f      	movs	r2, #63	; 0x3f
 8008210:	409a      	lsls	r2, r3
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 834a 	beq.w	80088c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
          }
          return;
 8008238:	e344      	b.n	80088c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d018      	beq.n	800827a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d108      	bne.n	8008268 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825a:	2b00      	cmp	r3, #0
 800825c:	d02c      	beq.n	80082b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
 8008266:	e027      	b.n	80082b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d023      	beq.n	80082b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
 8008278:	e01e      	b.n	80082b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10f      	bne.n	80082a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0210 	bic.w	r2, r2, #16
 8008296:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8306 	beq.w	80088ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8088 	beq.w	80083e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a7a      	ldr	r2, [pc, #488]	; (80084c8 <HAL_DMA_IRQHandler+0xa08>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d04a      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a79      	ldr	r2, [pc, #484]	; (80084cc <HAL_DMA_IRQHandler+0xa0c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d045      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a77      	ldr	r2, [pc, #476]	; (80084d0 <HAL_DMA_IRQHandler+0xa10>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d040      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a76      	ldr	r2, [pc, #472]	; (80084d4 <HAL_DMA_IRQHandler+0xa14>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03b      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a74      	ldr	r2, [pc, #464]	; (80084d8 <HAL_DMA_IRQHandler+0xa18>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d036      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a73      	ldr	r2, [pc, #460]	; (80084dc <HAL_DMA_IRQHandler+0xa1c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d031      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a71      	ldr	r2, [pc, #452]	; (80084e0 <HAL_DMA_IRQHandler+0xa20>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d02c      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a70      	ldr	r2, [pc, #448]	; (80084e4 <HAL_DMA_IRQHandler+0xa24>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d027      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a6e      	ldr	r2, [pc, #440]	; (80084e8 <HAL_DMA_IRQHandler+0xa28>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d022      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a6d      	ldr	r2, [pc, #436]	; (80084ec <HAL_DMA_IRQHandler+0xa2c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01d      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a6b      	ldr	r2, [pc, #428]	; (80084f0 <HAL_DMA_IRQHandler+0xa30>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a6a      	ldr	r2, [pc, #424]	; (80084f4 <HAL_DMA_IRQHandler+0xa34>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a68      	ldr	r2, [pc, #416]	; (80084f8 <HAL_DMA_IRQHandler+0xa38>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a67      	ldr	r2, [pc, #412]	; (80084fc <HAL_DMA_IRQHandler+0xa3c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a65      	ldr	r2, [pc, #404]	; (8008500 <HAL_DMA_IRQHandler+0xa40>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_DMA_IRQHandler+0x8b8>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a64      	ldr	r2, [pc, #400]	; (8008504 <HAL_DMA_IRQHandler+0xa44>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d108      	bne.n	800838a <HAL_DMA_IRQHandler+0x8ca>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e007      	b.n	800839a <HAL_DMA_IRQHandler+0x8da>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d307      	bcc.n	80083b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1f2      	bne.n	800839a <HAL_DMA_IRQHandler+0x8da>
 80083b4:	e000      	b.n	80083b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80083b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2203      	movs	r2, #3
 80083ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80083ce:	e003      	b.n	80083d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8272 	beq.w	80088ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
 80083f2:	e26c      	b.n	80088ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a43      	ldr	r2, [pc, #268]	; (8008508 <HAL_DMA_IRQHandler+0xa48>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d022      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a42      	ldr	r2, [pc, #264]	; (800850c <HAL_DMA_IRQHandler+0xa4c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d01d      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a40      	ldr	r2, [pc, #256]	; (8008510 <HAL_DMA_IRQHandler+0xa50>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d018      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a3f      	ldr	r2, [pc, #252]	; (8008514 <HAL_DMA_IRQHandler+0xa54>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d013      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a3d      	ldr	r2, [pc, #244]	; (8008518 <HAL_DMA_IRQHandler+0xa58>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00e      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3c      	ldr	r2, [pc, #240]	; (800851c <HAL_DMA_IRQHandler+0xa5c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d009      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a3a      	ldr	r2, [pc, #232]	; (8008520 <HAL_DMA_IRQHandler+0xa60>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <HAL_DMA_IRQHandler+0x984>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a39      	ldr	r2, [pc, #228]	; (8008524 <HAL_DMA_IRQHandler+0xa64>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d101      	bne.n	8008448 <HAL_DMA_IRQHandler+0x988>
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <HAL_DMA_IRQHandler+0x98a>
 8008448:	2300      	movs	r3, #0
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 823f 	beq.w	80088ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800845c:	f003 031f 	and.w	r3, r3, #31
 8008460:	2204      	movs	r2, #4
 8008462:	409a      	lsls	r2, r3
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	4013      	ands	r3, r2
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80cd 	beq.w	8008608 <HAL_DMA_IRQHandler+0xb48>
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80c7 	beq.w	8008608 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	2204      	movs	r2, #4
 8008484:	409a      	lsls	r2, r3
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d049      	beq.n	8008528 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 8210 	beq.w	80088c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084b0:	e20a      	b.n	80088c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 8206 	beq.w	80088c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084c4:	e200      	b.n	80088c8 <HAL_DMA_IRQHandler+0xe08>
 80084c6:	bf00      	nop
 80084c8:	40020010 	.word	0x40020010
 80084cc:	40020028 	.word	0x40020028
 80084d0:	40020040 	.word	0x40020040
 80084d4:	40020058 	.word	0x40020058
 80084d8:	40020070 	.word	0x40020070
 80084dc:	40020088 	.word	0x40020088
 80084e0:	400200a0 	.word	0x400200a0
 80084e4:	400200b8 	.word	0x400200b8
 80084e8:	40020410 	.word	0x40020410
 80084ec:	40020428 	.word	0x40020428
 80084f0:	40020440 	.word	0x40020440
 80084f4:	40020458 	.word	0x40020458
 80084f8:	40020470 	.word	0x40020470
 80084fc:	40020488 	.word	0x40020488
 8008500:	400204a0 	.word	0x400204a0
 8008504:	400204b8 	.word	0x400204b8
 8008508:	58025408 	.word	0x58025408
 800850c:	5802541c 	.word	0x5802541c
 8008510:	58025430 	.word	0x58025430
 8008514:	58025444 	.word	0x58025444
 8008518:	58025458 	.word	0x58025458
 800851c:	5802546c 	.word	0x5802546c
 8008520:	58025480 	.word	0x58025480
 8008524:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d160      	bne.n	80085f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a7f      	ldr	r2, [pc, #508]	; (8008734 <HAL_DMA_IRQHandler+0xc74>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d04a      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a7d      	ldr	r2, [pc, #500]	; (8008738 <HAL_DMA_IRQHandler+0xc78>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d045      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a7c      	ldr	r2, [pc, #496]	; (800873c <HAL_DMA_IRQHandler+0xc7c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d040      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a7a      	ldr	r2, [pc, #488]	; (8008740 <HAL_DMA_IRQHandler+0xc80>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d03b      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a79      	ldr	r2, [pc, #484]	; (8008744 <HAL_DMA_IRQHandler+0xc84>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d036      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a77      	ldr	r2, [pc, #476]	; (8008748 <HAL_DMA_IRQHandler+0xc88>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d031      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a76      	ldr	r2, [pc, #472]	; (800874c <HAL_DMA_IRQHandler+0xc8c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d02c      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a74      	ldr	r2, [pc, #464]	; (8008750 <HAL_DMA_IRQHandler+0xc90>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d027      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a73      	ldr	r2, [pc, #460]	; (8008754 <HAL_DMA_IRQHandler+0xc94>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d022      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a71      	ldr	r2, [pc, #452]	; (8008758 <HAL_DMA_IRQHandler+0xc98>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d01d      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a70      	ldr	r2, [pc, #448]	; (800875c <HAL_DMA_IRQHandler+0xc9c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d018      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a6e      	ldr	r2, [pc, #440]	; (8008760 <HAL_DMA_IRQHandler+0xca0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d013      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a6d      	ldr	r2, [pc, #436]	; (8008764 <HAL_DMA_IRQHandler+0xca4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00e      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a6b      	ldr	r2, [pc, #428]	; (8008768 <HAL_DMA_IRQHandler+0xca8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a6a      	ldr	r2, [pc, #424]	; (800876c <HAL_DMA_IRQHandler+0xcac>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_DMA_IRQHandler+0xb12>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a68      	ldr	r2, [pc, #416]	; (8008770 <HAL_DMA_IRQHandler+0xcb0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d108      	bne.n	80085e4 <HAL_DMA_IRQHandler+0xb24>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 0208 	bic.w	r2, r2, #8
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	e007      	b.n	80085f4 <HAL_DMA_IRQHandler+0xb34>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0204 	bic.w	r2, r2, #4
 80085f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8165 	beq.w	80088c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008606:	e15f      	b.n	80088c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860c:	f003 031f 	and.w	r3, r3, #31
 8008610:	2202      	movs	r2, #2
 8008612:	409a      	lsls	r2, r3
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	4013      	ands	r3, r2
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80c5 	beq.w	80087a8 <HAL_DMA_IRQHandler+0xce8>
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80bf 	beq.w	80087a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2202      	movs	r2, #2
 8008634:	409a      	lsls	r2, r3
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d018      	beq.n	8008676 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 813a 	beq.w	80088cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008660:	e134      	b.n	80088cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8130 	beq.w	80088cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008674:	e12a      	b.n	80088cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	f040 8089 	bne.w	8008794 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a2b      	ldr	r2, [pc, #172]	; (8008734 <HAL_DMA_IRQHandler+0xc74>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d04a      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a29      	ldr	r2, [pc, #164]	; (8008738 <HAL_DMA_IRQHandler+0xc78>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d045      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a28      	ldr	r2, [pc, #160]	; (800873c <HAL_DMA_IRQHandler+0xc7c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d040      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a26      	ldr	r2, [pc, #152]	; (8008740 <HAL_DMA_IRQHandler+0xc80>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d03b      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a25      	ldr	r2, [pc, #148]	; (8008744 <HAL_DMA_IRQHandler+0xc84>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d036      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a23      	ldr	r2, [pc, #140]	; (8008748 <HAL_DMA_IRQHandler+0xc88>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d031      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a22      	ldr	r2, [pc, #136]	; (800874c <HAL_DMA_IRQHandler+0xc8c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d02c      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a20      	ldr	r2, [pc, #128]	; (8008750 <HAL_DMA_IRQHandler+0xc90>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d027      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1f      	ldr	r2, [pc, #124]	; (8008754 <HAL_DMA_IRQHandler+0xc94>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d022      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1d      	ldr	r2, [pc, #116]	; (8008758 <HAL_DMA_IRQHandler+0xc98>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d01d      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1c      	ldr	r2, [pc, #112]	; (800875c <HAL_DMA_IRQHandler+0xc9c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d018      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a1a      	ldr	r2, [pc, #104]	; (8008760 <HAL_DMA_IRQHandler+0xca0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d013      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a19      	ldr	r2, [pc, #100]	; (8008764 <HAL_DMA_IRQHandler+0xca4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00e      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a17      	ldr	r2, [pc, #92]	; (8008768 <HAL_DMA_IRQHandler+0xca8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d009      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a16      	ldr	r2, [pc, #88]	; (800876c <HAL_DMA_IRQHandler+0xcac>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <HAL_DMA_IRQHandler+0xc62>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a14      	ldr	r2, [pc, #80]	; (8008770 <HAL_DMA_IRQHandler+0xcb0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d128      	bne.n	8008774 <HAL_DMA_IRQHandler+0xcb4>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0214 	bic.w	r2, r2, #20
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e027      	b.n	8008784 <HAL_DMA_IRQHandler+0xcc4>
 8008734:	40020010 	.word	0x40020010
 8008738:	40020028 	.word	0x40020028
 800873c:	40020040 	.word	0x40020040
 8008740:	40020058 	.word	0x40020058
 8008744:	40020070 	.word	0x40020070
 8008748:	40020088 	.word	0x40020088
 800874c:	400200a0 	.word	0x400200a0
 8008750:	400200b8 	.word	0x400200b8
 8008754:	40020410 	.word	0x40020410
 8008758:	40020428 	.word	0x40020428
 800875c:	40020440 	.word	0x40020440
 8008760:	40020458 	.word	0x40020458
 8008764:	40020470 	.word	0x40020470
 8008768:	40020488 	.word	0x40020488
 800876c:	400204a0 	.word	0x400204a0
 8008770:	400204b8 	.word	0x400204b8
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 020a 	bic.w	r2, r2, #10
 8008782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8097 	beq.w	80088cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087a6:	e091      	b.n	80088cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	2208      	movs	r2, #8
 80087b2:	409a      	lsls	r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8088 	beq.w	80088ce <HAL_DMA_IRQHandler+0xe0e>
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8082 	beq.w	80088ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a41      	ldr	r2, [pc, #260]	; (80088d4 <HAL_DMA_IRQHandler+0xe14>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d04a      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a3f      	ldr	r2, [pc, #252]	; (80088d8 <HAL_DMA_IRQHandler+0xe18>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d045      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a3e      	ldr	r2, [pc, #248]	; (80088dc <HAL_DMA_IRQHandler+0xe1c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d040      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a3c      	ldr	r2, [pc, #240]	; (80088e0 <HAL_DMA_IRQHandler+0xe20>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d03b      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a3b      	ldr	r2, [pc, #236]	; (80088e4 <HAL_DMA_IRQHandler+0xe24>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d036      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a39      	ldr	r2, [pc, #228]	; (80088e8 <HAL_DMA_IRQHandler+0xe28>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d031      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a38      	ldr	r2, [pc, #224]	; (80088ec <HAL_DMA_IRQHandler+0xe2c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d02c      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a36      	ldr	r2, [pc, #216]	; (80088f0 <HAL_DMA_IRQHandler+0xe30>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d027      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a35      	ldr	r2, [pc, #212]	; (80088f4 <HAL_DMA_IRQHandler+0xe34>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d022      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a33      	ldr	r2, [pc, #204]	; (80088f8 <HAL_DMA_IRQHandler+0xe38>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01d      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a32      	ldr	r2, [pc, #200]	; (80088fc <HAL_DMA_IRQHandler+0xe3c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d018      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a30      	ldr	r2, [pc, #192]	; (8008900 <HAL_DMA_IRQHandler+0xe40>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a2f      	ldr	r2, [pc, #188]	; (8008904 <HAL_DMA_IRQHandler+0xe44>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00e      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a2d      	ldr	r2, [pc, #180]	; (8008908 <HAL_DMA_IRQHandler+0xe48>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d009      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a2c      	ldr	r2, [pc, #176]	; (800890c <HAL_DMA_IRQHandler+0xe4c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d004      	beq.n	800886a <HAL_DMA_IRQHandler+0xdaa>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a2a      	ldr	r2, [pc, #168]	; (8008910 <HAL_DMA_IRQHandler+0xe50>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d108      	bne.n	800887c <HAL_DMA_IRQHandler+0xdbc>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 021c 	bic.w	r2, r2, #28
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	e007      	b.n	800888c <HAL_DMA_IRQHandler+0xdcc>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 020e 	bic.w	r2, r2, #14
 800888a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008890:	f003 031f 	and.w	r3, r3, #31
 8008894:	2201      	movs	r2, #1
 8008896:	409a      	lsls	r2, r3
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
 80088c2:	e004      	b.n	80088ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80088c4:	bf00      	nop
 80088c6:	e002      	b.n	80088ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088c8:	bf00      	nop
 80088ca:	e000      	b.n	80088ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80088ce:	3728      	adds	r7, #40	; 0x28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	40020010 	.word	0x40020010
 80088d8:	40020028 	.word	0x40020028
 80088dc:	40020040 	.word	0x40020040
 80088e0:	40020058 	.word	0x40020058
 80088e4:	40020070 	.word	0x40020070
 80088e8:	40020088 	.word	0x40020088
 80088ec:	400200a0 	.word	0x400200a0
 80088f0:	400200b8 	.word	0x400200b8
 80088f4:	40020410 	.word	0x40020410
 80088f8:	40020428 	.word	0x40020428
 80088fc:	40020440 	.word	0x40020440
 8008900:	40020458 	.word	0x40020458
 8008904:	40020470 	.word	0x40020470
 8008908:	40020488 	.word	0x40020488
 800890c:	400204a0 	.word	0x400204a0
 8008910:	400204b8 	.word	0x400204b8

08008914 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008944:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a7f      	ldr	r2, [pc, #508]	; (8008b48 <DMA_SetConfig+0x21c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d072      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a7d      	ldr	r2, [pc, #500]	; (8008b4c <DMA_SetConfig+0x220>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d06d      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a7c      	ldr	r2, [pc, #496]	; (8008b50 <DMA_SetConfig+0x224>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d068      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a7a      	ldr	r2, [pc, #488]	; (8008b54 <DMA_SetConfig+0x228>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d063      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a79      	ldr	r2, [pc, #484]	; (8008b58 <DMA_SetConfig+0x22c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d05e      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a77      	ldr	r2, [pc, #476]	; (8008b5c <DMA_SetConfig+0x230>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d059      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a76      	ldr	r2, [pc, #472]	; (8008b60 <DMA_SetConfig+0x234>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d054      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a74      	ldr	r2, [pc, #464]	; (8008b64 <DMA_SetConfig+0x238>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d04f      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a73      	ldr	r2, [pc, #460]	; (8008b68 <DMA_SetConfig+0x23c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d04a      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a71      	ldr	r2, [pc, #452]	; (8008b6c <DMA_SetConfig+0x240>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d045      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a70      	ldr	r2, [pc, #448]	; (8008b70 <DMA_SetConfig+0x244>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d040      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a6e      	ldr	r2, [pc, #440]	; (8008b74 <DMA_SetConfig+0x248>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d03b      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a6d      	ldr	r2, [pc, #436]	; (8008b78 <DMA_SetConfig+0x24c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d036      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a6b      	ldr	r2, [pc, #428]	; (8008b7c <DMA_SetConfig+0x250>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d031      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a6a      	ldr	r2, [pc, #424]	; (8008b80 <DMA_SetConfig+0x254>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d02c      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a68      	ldr	r2, [pc, #416]	; (8008b84 <DMA_SetConfig+0x258>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d027      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a67      	ldr	r2, [pc, #412]	; (8008b88 <DMA_SetConfig+0x25c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d022      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a65      	ldr	r2, [pc, #404]	; (8008b8c <DMA_SetConfig+0x260>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d01d      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a64      	ldr	r2, [pc, #400]	; (8008b90 <DMA_SetConfig+0x264>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d018      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a62      	ldr	r2, [pc, #392]	; (8008b94 <DMA_SetConfig+0x268>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d013      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a61      	ldr	r2, [pc, #388]	; (8008b98 <DMA_SetConfig+0x26c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00e      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a5f      	ldr	r2, [pc, #380]	; (8008b9c <DMA_SetConfig+0x270>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d009      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a5e      	ldr	r2, [pc, #376]	; (8008ba0 <DMA_SetConfig+0x274>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d004      	beq.n	8008a36 <DMA_SetConfig+0x10a>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a5c      	ldr	r2, [pc, #368]	; (8008ba4 <DMA_SetConfig+0x278>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d101      	bne.n	8008a3a <DMA_SetConfig+0x10e>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <DMA_SetConfig+0x110>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00d      	beq.n	8008a5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d004      	beq.n	8008a5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a39      	ldr	r2, [pc, #228]	; (8008b48 <DMA_SetConfig+0x21c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d04a      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a38      	ldr	r2, [pc, #224]	; (8008b4c <DMA_SetConfig+0x220>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d045      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a36      	ldr	r2, [pc, #216]	; (8008b50 <DMA_SetConfig+0x224>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d040      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a35      	ldr	r2, [pc, #212]	; (8008b54 <DMA_SetConfig+0x228>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d03b      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a33      	ldr	r2, [pc, #204]	; (8008b58 <DMA_SetConfig+0x22c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d036      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a32      	ldr	r2, [pc, #200]	; (8008b5c <DMA_SetConfig+0x230>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d031      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a30      	ldr	r2, [pc, #192]	; (8008b60 <DMA_SetConfig+0x234>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d02c      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a2f      	ldr	r2, [pc, #188]	; (8008b64 <DMA_SetConfig+0x238>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d027      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a2d      	ldr	r2, [pc, #180]	; (8008b68 <DMA_SetConfig+0x23c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d022      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a2c      	ldr	r2, [pc, #176]	; (8008b6c <DMA_SetConfig+0x240>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d01d      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a2a      	ldr	r2, [pc, #168]	; (8008b70 <DMA_SetConfig+0x244>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d018      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a29      	ldr	r2, [pc, #164]	; (8008b74 <DMA_SetConfig+0x248>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d013      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a27      	ldr	r2, [pc, #156]	; (8008b78 <DMA_SetConfig+0x24c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d00e      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a26      	ldr	r2, [pc, #152]	; (8008b7c <DMA_SetConfig+0x250>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d009      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a24      	ldr	r2, [pc, #144]	; (8008b80 <DMA_SetConfig+0x254>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d004      	beq.n	8008afc <DMA_SetConfig+0x1d0>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a23      	ldr	r2, [pc, #140]	; (8008b84 <DMA_SetConfig+0x258>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d101      	bne.n	8008b00 <DMA_SetConfig+0x1d4>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e000      	b.n	8008b02 <DMA_SetConfig+0x1d6>
 8008b00:	2300      	movs	r3, #0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d059      	beq.n	8008bba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0a:	f003 031f 	and.w	r3, r3, #31
 8008b0e:	223f      	movs	r2, #63	; 0x3f
 8008b10:	409a      	lsls	r2, r3
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d138      	bne.n	8008ba8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b46:	e086      	b.n	8008c56 <DMA_SetConfig+0x32a>
 8008b48:	40020010 	.word	0x40020010
 8008b4c:	40020028 	.word	0x40020028
 8008b50:	40020040 	.word	0x40020040
 8008b54:	40020058 	.word	0x40020058
 8008b58:	40020070 	.word	0x40020070
 8008b5c:	40020088 	.word	0x40020088
 8008b60:	400200a0 	.word	0x400200a0
 8008b64:	400200b8 	.word	0x400200b8
 8008b68:	40020410 	.word	0x40020410
 8008b6c:	40020428 	.word	0x40020428
 8008b70:	40020440 	.word	0x40020440
 8008b74:	40020458 	.word	0x40020458
 8008b78:	40020470 	.word	0x40020470
 8008b7c:	40020488 	.word	0x40020488
 8008b80:	400204a0 	.word	0x400204a0
 8008b84:	400204b8 	.word	0x400204b8
 8008b88:	58025408 	.word	0x58025408
 8008b8c:	5802541c 	.word	0x5802541c
 8008b90:	58025430 	.word	0x58025430
 8008b94:	58025444 	.word	0x58025444
 8008b98:	58025458 	.word	0x58025458
 8008b9c:	5802546c 	.word	0x5802546c
 8008ba0:	58025480 	.word	0x58025480
 8008ba4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]
}
 8008bb8:	e04d      	b.n	8008c56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a29      	ldr	r2, [pc, #164]	; (8008c64 <DMA_SetConfig+0x338>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d022      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a27      	ldr	r2, [pc, #156]	; (8008c68 <DMA_SetConfig+0x33c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d01d      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a26      	ldr	r2, [pc, #152]	; (8008c6c <DMA_SetConfig+0x340>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d018      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a24      	ldr	r2, [pc, #144]	; (8008c70 <DMA_SetConfig+0x344>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d013      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a23      	ldr	r2, [pc, #140]	; (8008c74 <DMA_SetConfig+0x348>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00e      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a21      	ldr	r2, [pc, #132]	; (8008c78 <DMA_SetConfig+0x34c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d009      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a20      	ldr	r2, [pc, #128]	; (8008c7c <DMA_SetConfig+0x350>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d004      	beq.n	8008c0a <DMA_SetConfig+0x2de>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <DMA_SetConfig+0x354>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d101      	bne.n	8008c0e <DMA_SetConfig+0x2e2>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <DMA_SetConfig+0x2e4>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d020      	beq.n	8008c56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	409a      	lsls	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d108      	bne.n	8008c46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	60da      	str	r2, [r3, #12]
}
 8008c44:	e007      	b.n	8008c56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	60da      	str	r2, [r3, #12]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	58025408 	.word	0x58025408
 8008c68:	5802541c 	.word	0x5802541c
 8008c6c:	58025430 	.word	0x58025430
 8008c70:	58025444 	.word	0x58025444
 8008c74:	58025458 	.word	0x58025458
 8008c78:	5802546c 	.word	0x5802546c
 8008c7c:	58025480 	.word	0x58025480
 8008c80:	58025494 	.word	0x58025494

08008c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a42      	ldr	r2, [pc, #264]	; (8008d9c <DMA_CalcBaseAndBitshift+0x118>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d04a      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a41      	ldr	r2, [pc, #260]	; (8008da0 <DMA_CalcBaseAndBitshift+0x11c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d045      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a3f      	ldr	r2, [pc, #252]	; (8008da4 <DMA_CalcBaseAndBitshift+0x120>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d040      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a3e      	ldr	r2, [pc, #248]	; (8008da8 <DMA_CalcBaseAndBitshift+0x124>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d03b      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a3c      	ldr	r2, [pc, #240]	; (8008dac <DMA_CalcBaseAndBitshift+0x128>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d036      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a3b      	ldr	r2, [pc, #236]	; (8008db0 <DMA_CalcBaseAndBitshift+0x12c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d031      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a39      	ldr	r2, [pc, #228]	; (8008db4 <DMA_CalcBaseAndBitshift+0x130>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d02c      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a38      	ldr	r2, [pc, #224]	; (8008db8 <DMA_CalcBaseAndBitshift+0x134>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d027      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a36      	ldr	r2, [pc, #216]	; (8008dbc <DMA_CalcBaseAndBitshift+0x138>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d022      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a35      	ldr	r2, [pc, #212]	; (8008dc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d01d      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a33      	ldr	r2, [pc, #204]	; (8008dc4 <DMA_CalcBaseAndBitshift+0x140>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d018      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a32      	ldr	r2, [pc, #200]	; (8008dc8 <DMA_CalcBaseAndBitshift+0x144>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d013      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a30      	ldr	r2, [pc, #192]	; (8008dcc <DMA_CalcBaseAndBitshift+0x148>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00e      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a2f      	ldr	r2, [pc, #188]	; (8008dd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d009      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a2d      	ldr	r2, [pc, #180]	; (8008dd4 <DMA_CalcBaseAndBitshift+0x150>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d004      	beq.n	8008d2c <DMA_CalcBaseAndBitshift+0xa8>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a2c      	ldr	r2, [pc, #176]	; (8008dd8 <DMA_CalcBaseAndBitshift+0x154>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d101      	bne.n	8008d30 <DMA_CalcBaseAndBitshift+0xac>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <DMA_CalcBaseAndBitshift+0xae>
 8008d30:	2300      	movs	r3, #0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d024      	beq.n	8008d80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	3b10      	subs	r3, #16
 8008d3e:	4a27      	ldr	r2, [pc, #156]	; (8008ddc <DMA_CalcBaseAndBitshift+0x158>)
 8008d40:	fba2 2303 	umull	r2, r3, r2, r3
 8008d44:	091b      	lsrs	r3, r3, #4
 8008d46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	4a24      	ldr	r2, [pc, #144]	; (8008de0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008d50:	5cd3      	ldrb	r3, [r2, r3]
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d908      	bls.n	8008d70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <DMA_CalcBaseAndBitshift+0x160>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	659a      	str	r2, [r3, #88]	; 0x58
 8008d6e:	e00d      	b.n	8008d8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <DMA_CalcBaseAndBitshift+0x160>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d7e:	e005      	b.n	8008d8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40020010 	.word	0x40020010
 8008da0:	40020028 	.word	0x40020028
 8008da4:	40020040 	.word	0x40020040
 8008da8:	40020058 	.word	0x40020058
 8008dac:	40020070 	.word	0x40020070
 8008db0:	40020088 	.word	0x40020088
 8008db4:	400200a0 	.word	0x400200a0
 8008db8:	400200b8 	.word	0x400200b8
 8008dbc:	40020410 	.word	0x40020410
 8008dc0:	40020428 	.word	0x40020428
 8008dc4:	40020440 	.word	0x40020440
 8008dc8:	40020458 	.word	0x40020458
 8008dcc:	40020470 	.word	0x40020470
 8008dd0:	40020488 	.word	0x40020488
 8008dd4:	400204a0 	.word	0x400204a0
 8008dd8:	400204b8 	.word	0x400204b8
 8008ddc:	aaaaaaab 	.word	0xaaaaaaab
 8008de0:	08017b64 	.word	0x08017b64
 8008de4:	fffffc00 	.word	0xfffffc00

08008de8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d120      	bne.n	8008e3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d858      	bhi.n	8008eb6 <DMA_CheckFifoParam+0xce>
 8008e04:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <DMA_CheckFifoParam+0x24>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e1d 	.word	0x08008e1d
 8008e10:	08008e2f 	.word	0x08008e2f
 8008e14:	08008e1d 	.word	0x08008e1d
 8008e18:	08008eb7 	.word	0x08008eb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d048      	beq.n	8008eba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e2c:	e045      	b.n	8008eba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e36:	d142      	bne.n	8008ebe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e3c:	e03f      	b.n	8008ebe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e46:	d123      	bne.n	8008e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d838      	bhi.n	8008ec2 <DMA_CheckFifoParam+0xda>
 8008e50:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <DMA_CheckFifoParam+0x70>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08008e69 	.word	0x08008e69
 8008e5c:	08008e6f 	.word	0x08008e6f
 8008e60:	08008e69 	.word	0x08008e69
 8008e64:	08008e81 	.word	0x08008e81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
        break;
 8008e6c:	e030      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d025      	beq.n	8008ec6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e7e:	e022      	b.n	8008ec6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e88:	d11f      	bne.n	8008eca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e8e:	e01c      	b.n	8008eca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d902      	bls.n	8008e9e <DMA_CheckFifoParam+0xb6>
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d003      	beq.n	8008ea4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008e9c:	e018      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ea2:	e015      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e00b      	b.n	8008ece <DMA_CheckFifoParam+0xe6>
        break;
 8008eb6:	bf00      	nop
 8008eb8:	e00a      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8008eba:	bf00      	nop
 8008ebc:	e008      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8008ebe:	bf00      	nop
 8008ec0:	e006      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8008ec2:	bf00      	nop
 8008ec4:	e004      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8008ec6:	bf00      	nop
 8008ec8:	e002      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8008eca:	bf00      	nop
 8008ecc:	e000      	b.n	8008ed0 <DMA_CheckFifoParam+0xe8>
    break;
 8008ece:	bf00      	nop
    }
  }

  return status;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop

08008ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a38      	ldr	r2, [pc, #224]	; (8008fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d022      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a36      	ldr	r2, [pc, #216]	; (8008fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01d      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a35      	ldr	r2, [pc, #212]	; (8008fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d018      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a33      	ldr	r2, [pc, #204]	; (8008fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a32      	ldr	r2, [pc, #200]	; (8008fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00e      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a30      	ldr	r2, [pc, #192]	; (8008fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d009      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a2f      	ldr	r2, [pc, #188]	; (8008fec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d004      	beq.n	8008f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2d      	ldr	r2, [pc, #180]	; (8008ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d101      	bne.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008f42:	2300      	movs	r3, #0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01a      	beq.n	8008f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	3b08      	subs	r3, #8
 8008f50:	4a28      	ldr	r2, [pc, #160]	; (8008ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	091b      	lsrs	r3, r3, #4
 8008f58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4b26      	ldr	r3, [pc, #152]	; (8008ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a24      	ldr	r2, [pc, #144]	; (8008ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008f6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f003 031f 	and.w	r3, r3, #31
 8008f74:	2201      	movs	r2, #1
 8008f76:	409a      	lsls	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008f7c:	e024      	b.n	8008fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	3b10      	subs	r3, #16
 8008f86:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008f88:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4a1c      	ldr	r2, [pc, #112]	; (8009004 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d806      	bhi.n	8008fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4a1b      	ldr	r2, [pc, #108]	; (8009008 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d902      	bls.n	8008fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4b18      	ldr	r3, [pc, #96]	; (800900c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a16      	ldr	r2, [pc, #88]	; (8009010 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008fb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f003 031f 	and.w	r3, r3, #31
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	409a      	lsls	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	58025408 	.word	0x58025408
 8008fd8:	5802541c 	.word	0x5802541c
 8008fdc:	58025430 	.word	0x58025430
 8008fe0:	58025444 	.word	0x58025444
 8008fe4:	58025458 	.word	0x58025458
 8008fe8:	5802546c 	.word	0x5802546c
 8008fec:	58025480 	.word	0x58025480
 8008ff0:	58025494 	.word	0x58025494
 8008ff4:	cccccccd 	.word	0xcccccccd
 8008ff8:	16009600 	.word	0x16009600
 8008ffc:	58025880 	.word	0x58025880
 8009000:	aaaaaaab 	.word	0xaaaaaaab
 8009004:	400204b8 	.word	0x400204b8
 8009008:	4002040f 	.word	0x4002040f
 800900c:	10008200 	.word	0x10008200
 8009010:	40020880 	.word	0x40020880

08009014 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	b2db      	uxtb	r3, r3
 8009022:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d04a      	beq.n	80090c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b08      	cmp	r3, #8
 800902e:	d847      	bhi.n	80090c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a25      	ldr	r2, [pc, #148]	; (80090cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d022      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a24      	ldr	r2, [pc, #144]	; (80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d01d      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a22      	ldr	r2, [pc, #136]	; (80090d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d018      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d013      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a1f      	ldr	r2, [pc, #124]	; (80090dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d00e      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1e      	ldr	r2, [pc, #120]	; (80090e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d009      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1c      	ldr	r2, [pc, #112]	; (80090e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d004      	beq.n	8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d101      	bne.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009080:	2301      	movs	r3, #1
 8009082:	e000      	b.n	8009086 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009084:	2300      	movs	r3, #0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4b17      	ldr	r3, [pc, #92]	; (80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a15      	ldr	r2, [pc, #84]	; (80090f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800909c:	671a      	str	r2, [r3, #112]	; 0x70
 800909e:	e009      	b.n	80090b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	461a      	mov	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80090b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	2201      	movs	r2, #1
 80090ba:	409a      	lsls	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80090c0:	bf00      	nop
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	58025408 	.word	0x58025408
 80090d0:	5802541c 	.word	0x5802541c
 80090d4:	58025430 	.word	0x58025430
 80090d8:	58025444 	.word	0x58025444
 80090dc:	58025458 	.word	0x58025458
 80090e0:	5802546c 	.word	0x5802546c
 80090e4:	58025480 	.word	0x58025480
 80090e8:	58025494 	.word	0x58025494
 80090ec:	1600963f 	.word	0x1600963f
 80090f0:	58025940 	.word	0x58025940
 80090f4:	1000823f 	.word	0x1000823f
 80090f8:	40020940 	.word	0x40020940

080090fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b089      	sub	sp, #36	; 0x24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009106:	2300      	movs	r3, #0
 8009108:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800910a:	4b89      	ldr	r3, [pc, #548]	; (8009330 <HAL_GPIO_Init+0x234>)
 800910c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800910e:	e194      	b.n	800943a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	2101      	movs	r1, #1
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	fa01 f303 	lsl.w	r3, r1, r3
 800911c:	4013      	ands	r3, r2
 800911e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 8186 	beq.w	8009434 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	2b01      	cmp	r3, #1
 8009132:	d005      	beq.n	8009140 <HAL_GPIO_Init+0x44>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	2b02      	cmp	r3, #2
 800913e:	d130      	bne.n	80091a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	2203      	movs	r2, #3
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	43db      	mvns	r3, r3
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	4013      	ands	r3, r2
 8009156:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	4313      	orrs	r3, r2
 8009168:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009176:	2201      	movs	r2, #1
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	fa02 f303 	lsl.w	r3, r2, r3
 800917e:	43db      	mvns	r3, r3
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	4013      	ands	r3, r2
 8009184:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	f003 0201 	and.w	r2, r3, #1
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	fa02 f303 	lsl.w	r3, r2, r3
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	4313      	orrs	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d017      	beq.n	80091de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	2203      	movs	r2, #3
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	43db      	mvns	r3, r3
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	4013      	ands	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d123      	bne.n	8009232 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	08da      	lsrs	r2, r3, #3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3208      	adds	r2, #8
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	220f      	movs	r2, #15
 8009202:	fa02 f303 	lsl.w	r3, r2, r3
 8009206:	43db      	mvns	r3, r3
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	4013      	ands	r3, r2
 800920c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	691a      	ldr	r2, [r3, #16]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	fa02 f303 	lsl.w	r3, r2, r3
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	4313      	orrs	r3, r2
 8009222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	08da      	lsrs	r2, r3, #3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3208      	adds	r2, #8
 800922c:	69b9      	ldr	r1, [r7, #24]
 800922e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	2203      	movs	r2, #3
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	43db      	mvns	r3, r3
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	4013      	ands	r3, r2
 8009248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f003 0203 	and.w	r2, r3, #3
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	fa02 f303 	lsl.w	r3, r2, r3
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4313      	orrs	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80e0 	beq.w	8009434 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009274:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <HAL_GPIO_Init+0x238>)
 8009276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800927a:	4a2e      	ldr	r2, [pc, #184]	; (8009334 <HAL_GPIO_Init+0x238>)
 800927c:	f043 0302 	orr.w	r3, r3, #2
 8009280:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009284:	4b2b      	ldr	r3, [pc, #172]	; (8009334 <HAL_GPIO_Init+0x238>)
 8009286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009292:	4a29      	ldr	r2, [pc, #164]	; (8009338 <HAL_GPIO_Init+0x23c>)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	089b      	lsrs	r3, r3, #2
 8009298:	3302      	adds	r3, #2
 800929a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800929e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	220f      	movs	r2, #15
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	43db      	mvns	r3, r3
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	4013      	ands	r3, r2
 80092b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a20      	ldr	r2, [pc, #128]	; (800933c <HAL_GPIO_Init+0x240>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d052      	beq.n	8009364 <HAL_GPIO_Init+0x268>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a1f      	ldr	r2, [pc, #124]	; (8009340 <HAL_GPIO_Init+0x244>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d031      	beq.n	800932a <HAL_GPIO_Init+0x22e>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <HAL_GPIO_Init+0x248>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d02b      	beq.n	8009326 <HAL_GPIO_Init+0x22a>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a1d      	ldr	r2, [pc, #116]	; (8009348 <HAL_GPIO_Init+0x24c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d025      	beq.n	8009322 <HAL_GPIO_Init+0x226>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a1c      	ldr	r2, [pc, #112]	; (800934c <HAL_GPIO_Init+0x250>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d01f      	beq.n	800931e <HAL_GPIO_Init+0x222>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a1b      	ldr	r2, [pc, #108]	; (8009350 <HAL_GPIO_Init+0x254>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d019      	beq.n	800931a <HAL_GPIO_Init+0x21e>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a1a      	ldr	r2, [pc, #104]	; (8009354 <HAL_GPIO_Init+0x258>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <HAL_GPIO_Init+0x21a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a19      	ldr	r2, [pc, #100]	; (8009358 <HAL_GPIO_Init+0x25c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00d      	beq.n	8009312 <HAL_GPIO_Init+0x216>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a18      	ldr	r2, [pc, #96]	; (800935c <HAL_GPIO_Init+0x260>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d007      	beq.n	800930e <HAL_GPIO_Init+0x212>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a17      	ldr	r2, [pc, #92]	; (8009360 <HAL_GPIO_Init+0x264>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <HAL_GPIO_Init+0x20e>
 8009306:	2309      	movs	r3, #9
 8009308:	e02d      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 800930a:	230a      	movs	r3, #10
 800930c:	e02b      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 800930e:	2308      	movs	r3, #8
 8009310:	e029      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 8009312:	2307      	movs	r3, #7
 8009314:	e027      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 8009316:	2306      	movs	r3, #6
 8009318:	e025      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 800931a:	2305      	movs	r3, #5
 800931c:	e023      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 800931e:	2304      	movs	r3, #4
 8009320:	e021      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 8009322:	2303      	movs	r3, #3
 8009324:	e01f      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 8009326:	2302      	movs	r3, #2
 8009328:	e01d      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 800932a:	2301      	movs	r3, #1
 800932c:	e01b      	b.n	8009366 <HAL_GPIO_Init+0x26a>
 800932e:	bf00      	nop
 8009330:	58000080 	.word	0x58000080
 8009334:	58024400 	.word	0x58024400
 8009338:	58000400 	.word	0x58000400
 800933c:	58020000 	.word	0x58020000
 8009340:	58020400 	.word	0x58020400
 8009344:	58020800 	.word	0x58020800
 8009348:	58020c00 	.word	0x58020c00
 800934c:	58021000 	.word	0x58021000
 8009350:	58021400 	.word	0x58021400
 8009354:	58021800 	.word	0x58021800
 8009358:	58021c00 	.word	0x58021c00
 800935c:	58022000 	.word	0x58022000
 8009360:	58022400 	.word	0x58022400
 8009364:	2300      	movs	r3, #0
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	f002 0203 	and.w	r2, r2, #3
 800936c:	0092      	lsls	r2, r2, #2
 800936e:	4093      	lsls	r3, r2
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	4313      	orrs	r3, r2
 8009374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009376:	4938      	ldr	r1, [pc, #224]	; (8009458 <HAL_GPIO_Init+0x35c>)
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	089b      	lsrs	r3, r3, #2
 800937c:	3302      	adds	r3, #2
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	43db      	mvns	r3, r3
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	4013      	ands	r3, r2
 8009394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80093aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80093b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	43db      	mvns	r3, r3
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	4013      	ands	r3, r2
 80093c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80093d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	43db      	mvns	r3, r3
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	4013      	ands	r3, r2
 80093ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	43db      	mvns	r3, r3
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	4013      	ands	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009426:	69ba      	ldr	r2, [r7, #24]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	4313      	orrs	r3, r2
 800942c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	fa22 f303 	lsr.w	r3, r2, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	f47f ae63 	bne.w	8009110 <HAL_GPIO_Init+0x14>
  }
}
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	3724      	adds	r7, #36	; 0x24
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	58000400 	.word	0x58000400

0800945c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	887b      	ldrh	r3, [r7, #2]
 800946e:	4013      	ands	r3, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009474:	2301      	movs	r3, #1
 8009476:	73fb      	strb	r3, [r7, #15]
 8009478:	e001      	b.n	800947e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	807b      	strh	r3, [r7, #2]
 8009498:	4613      	mov	r3, r2
 800949a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800949c:	787b      	ldrb	r3, [r7, #1]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094a2:	887a      	ldrh	r2, [r7, #2]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80094a8:	e003      	b.n	80094b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80094aa:	887b      	ldrh	r3, [r7, #2]
 80094ac:	041a      	lsls	r2, r3, #16
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	619a      	str	r2, [r3, #24]
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
	...

080094c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e08b      	b.n	80095ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fa f8c6 	bl	8003678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2224      	movs	r2, #36	; 0x24
 80094f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0201 	bic.w	r2, r2, #1
 8009502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d107      	bne.n	800953a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689a      	ldr	r2, [r3, #8]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009536:	609a      	str	r2, [r3, #8]
 8009538:	e006      	b.n	8009548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d108      	bne.n	8009562 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800955e:	605a      	str	r2, [r3, #4]
 8009560:	e007      	b.n	8009572 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	4b1d      	ldr	r3, [pc, #116]	; (80095f4 <HAL_I2C_Init+0x134>)
 800957e:	430b      	orrs	r3, r1
 8009580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691a      	ldr	r2, [r3, #16]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	69d9      	ldr	r1, [r3, #28]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a1a      	ldr	r2, [r3, #32]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0201 	orr.w	r2, r2, #1
 80095ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	02008000 	.word	0x02008000

080095f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	461a      	mov	r2, r3
 8009604:	460b      	mov	r3, r1
 8009606:	817b      	strh	r3, [r7, #10]
 8009608:	4613      	mov	r3, r2
 800960a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b20      	cmp	r3, #32
 8009616:	f040 80fd 	bne.w	8009814 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <HAL_I2C_Master_Transmit+0x30>
 8009624:	2302      	movs	r3, #2
 8009626:	e0f6      	b.n	8009816 <HAL_I2C_Master_Transmit+0x21e>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009630:	f7fa fdf4 	bl	800421c <HAL_GetTick>
 8009634:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	2319      	movs	r3, #25
 800963c:	2201      	movs	r2, #1
 800963e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fa0a 	bl	8009a5c <I2C_WaitOnFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e0e1      	b.n	8009816 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2221      	movs	r2, #33	; 0x21
 8009656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2210      	movs	r2, #16
 800965e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	893a      	ldrh	r2, [r7, #8]
 8009672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967e:	b29b      	uxth	r3, r3
 8009680:	2bff      	cmp	r3, #255	; 0xff
 8009682:	d906      	bls.n	8009692 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	22ff      	movs	r2, #255	; 0xff
 8009688:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800968a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	e007      	b.n	80096a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800969c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d024      	beq.n	80096f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	3301      	adds	r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	8979      	ldrh	r1, [r7, #10]
 80096e6:	4b4e      	ldr	r3, [pc, #312]	; (8009820 <HAL_I2C_Master_Transmit+0x228>)
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fc05 	bl	8009efc <I2C_TransferConfig>
 80096f2:	e066      	b.n	80097c2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	8979      	ldrh	r1, [r7, #10]
 80096fc:	4b48      	ldr	r3, [pc, #288]	; (8009820 <HAL_I2C_Master_Transmit+0x228>)
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fbfa 	bl	8009efc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009708:	e05b      	b.n	80097c2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	6a39      	ldr	r1, [r7, #32]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f9fd 	bl	8009b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e07b      	b.n	8009816 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	781a      	ldrb	r2, [r3, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29a      	uxth	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009752:	b29b      	uxth	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d034      	beq.n	80097c2 <HAL_I2C_Master_Transmit+0x1ca>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975c:	2b00      	cmp	r3, #0
 800975e:	d130      	bne.n	80097c2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	2200      	movs	r2, #0
 8009768:	2180      	movs	r1, #128	; 0x80
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f976 	bl	8009a5c <I2C_WaitOnFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e04d      	b.n	8009816 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	2bff      	cmp	r3, #255	; 0xff
 8009782:	d90e      	bls.n	80097a2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	22ff      	movs	r2, #255	; 0xff
 8009788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978e:	b2da      	uxtb	r2, r3
 8009790:	8979      	ldrh	r1, [r7, #10]
 8009792:	2300      	movs	r3, #0
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fbae 	bl	8009efc <I2C_TransferConfig>
 80097a0:	e00f      	b.n	80097c2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	8979      	ldrh	r1, [r7, #10]
 80097b4:	2300      	movs	r3, #0
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 fb9d 	bl	8009efc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d19e      	bne.n	800970a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	6a39      	ldr	r1, [r7, #32]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f9e3 	bl	8009b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e01a      	b.n	8009816 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2220      	movs	r2, #32
 80097e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6859      	ldr	r1, [r3, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <HAL_I2C_Master_Transmit+0x22c>)
 80097f4:	400b      	ands	r3, r1
 80097f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
  }
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	80002000 	.word	0x80002000
 8009824:	fe00e800 	.word	0xfe00e800

08009828 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	461a      	mov	r2, r3
 8009834:	460b      	mov	r3, r1
 8009836:	817b      	strh	r3, [r7, #10]
 8009838:	4613      	mov	r3, r2
 800983a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b20      	cmp	r3, #32
 8009846:	f040 80db 	bne.w	8009a00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009850:	2b01      	cmp	r3, #1
 8009852:	d101      	bne.n	8009858 <HAL_I2C_Master_Receive+0x30>
 8009854:	2302      	movs	r3, #2
 8009856:	e0d4      	b.n	8009a02 <HAL_I2C_Master_Receive+0x1da>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009860:	f7fa fcdc 	bl	800421c <HAL_GetTick>
 8009864:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	2319      	movs	r3, #25
 800986c:	2201      	movs	r2, #1
 800986e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f8f2 	bl	8009a5c <I2C_WaitOnFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e0bf      	b.n	8009a02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2222      	movs	r2, #34	; 0x22
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2210      	movs	r2, #16
 800988e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	893a      	ldrh	r2, [r7, #8]
 80098a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2bff      	cmp	r3, #255	; 0xff
 80098b2:	d90e      	bls.n	80098d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	22ff      	movs	r2, #255	; 0xff
 80098b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	8979      	ldrh	r1, [r7, #10]
 80098c2:	4b52      	ldr	r3, [pc, #328]	; (8009a0c <HAL_I2C_Master_Receive+0x1e4>)
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fb16 	bl	8009efc <I2C_TransferConfig>
 80098d0:	e06d      	b.n	80099ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	8979      	ldrh	r1, [r7, #10]
 80098e4:	4b49      	ldr	r3, [pc, #292]	; (8009a0c <HAL_I2C_Master_Receive+0x1e4>)
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fb05 	bl	8009efc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80098f2:	e05c      	b.n	80099ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	6a39      	ldr	r1, [r7, #32]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 f993 	bl	8009c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e07c      	b.n	8009a02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b01      	subs	r3, #1
 8009934:	b29a      	uxth	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d034      	beq.n	80099ae <HAL_I2C_Master_Receive+0x186>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009948:	2b00      	cmp	r3, #0
 800994a:	d130      	bne.n	80099ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	2200      	movs	r2, #0
 8009954:	2180      	movs	r1, #128	; 0x80
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 f880 	bl	8009a5c <I2C_WaitOnFlagUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e04d      	b.n	8009a02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996a:	b29b      	uxth	r3, r3
 800996c:	2bff      	cmp	r3, #255	; 0xff
 800996e:	d90e      	bls.n	800998e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	22ff      	movs	r2, #255	; 0xff
 8009974:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997a:	b2da      	uxtb	r2, r3
 800997c:	8979      	ldrh	r1, [r7, #10]
 800997e:	2300      	movs	r3, #0
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fab8 	bl	8009efc <I2C_TransferConfig>
 800998c:	e00f      	b.n	80099ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999c:	b2da      	uxtb	r2, r3
 800999e:	8979      	ldrh	r1, [r7, #10]
 80099a0:	2300      	movs	r3, #0
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 faa7 	bl	8009efc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d19d      	bne.n	80098f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	6a39      	ldr	r1, [r7, #32]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 f8ed 	bl	8009b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e01a      	b.n	8009a02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2220      	movs	r2, #32
 80099d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6859      	ldr	r1, [r3, #4]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <HAL_I2C_Master_Receive+0x1e8>)
 80099e0:	400b      	ands	r3, r1
 80099e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
  }
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	80002400 	.word	0x80002400
 8009a10:	fe00e800 	.word	0xfe00e800

08009a14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d103      	bne.n	8009a32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d007      	beq.n	8009a50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0201 	orr.w	r2, r2, #1
 8009a4e:	619a      	str	r2, [r3, #24]
  }
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a6c:	e03b      	b.n	8009ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 f962 	bl	8009d3c <I2C_IsErrorOccurred>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e041      	b.n	8009b06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a88:	d02d      	beq.n	8009ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a8a:	f7fa fbc7 	bl	800421c <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d302      	bcc.n	8009aa0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d122      	bne.n	8009ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	bf0c      	ite	eq
 8009ab0:	2301      	moveq	r3, #1
 8009ab2:	2300      	movne	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d113      	bne.n	8009ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac2:	f043 0220 	orr.w	r2, r3, #32
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e00f      	b.n	8009b06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4013      	ands	r3, r2
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	bf0c      	ite	eq
 8009af6:	2301      	moveq	r3, #1
 8009af8:	2300      	movne	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d0b4      	beq.n	8009a6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b1a:	e033      	b.n	8009b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f90b 	bl	8009d3c <I2C_IsErrorOccurred>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e031      	b.n	8009b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b36:	d025      	beq.n	8009b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b38:	f7fa fb70 	bl	800421c <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d302      	bcc.n	8009b4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d11a      	bne.n	8009b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d013      	beq.n	8009b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b60:	f043 0220 	orr.w	r2, r3, #32
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e007      	b.n	8009b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d1c4      	bne.n	8009b1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ba8:	e02f      	b.n	8009c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 f8c4 	bl	8009d3c <I2C_IsErrorOccurred>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e02d      	b.n	8009c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bbe:	f7fa fb2d 	bl	800421c <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d302      	bcc.n	8009bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d11a      	bne.n	8009c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d013      	beq.n	8009c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	f043 0220 	orr.w	r2, r3, #32
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e007      	b.n	8009c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	d1c8      	bne.n	8009baa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009c34:	e071      	b.n	8009d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f87e 	bl	8009d3c <I2C_IsErrorOccurred>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	d13b      	bne.n	8009cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d138      	bne.n	8009cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	f003 0304 	and.w	r3, r3, #4
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d105      	bne.n	8009c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d121      	bne.n	8009cca <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2204      	movs	r2, #4
 8009c92:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6859      	ldr	r1, [r3, #4]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	4b24      	ldr	r3, [pc, #144]	; (8009d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009ca8:	400b      	ands	r3, r1
 8009caa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	75fb      	strb	r3, [r7, #23]
 8009cc8:	e002      	b.n	8009cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009cd0:	f7fa faa4 	bl	800421c <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d302      	bcc.n	8009ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d119      	bne.n	8009d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d116      	bne.n	8009d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d00f      	beq.n	8009d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfe:	f043 0220 	orr.w	r2, r3, #32
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2220      	movs	r2, #32
 8009d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d002      	beq.n	8009d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d083      	beq.n	8009c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	fe00e800 	.word	0xfe00e800

08009d3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d068      	beq.n	8009e3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2210      	movs	r2, #16
 8009d6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d70:	e049      	b.n	8009e06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d78:	d045      	beq.n	8009e06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d7a:	f7fa fa4f 	bl	800421c <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d302      	bcc.n	8009d90 <I2C_IsErrorOccurred+0x54>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d13a      	bne.n	8009e06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009da2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db2:	d121      	bne.n	8009df8 <I2C_IsErrorOccurred+0xbc>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dba:	d01d      	beq.n	8009df8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009dbc:	7cfb      	ldrb	r3, [r7, #19]
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d01a      	beq.n	8009df8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009dd2:	f7fa fa23 	bl	800421c <HAL_GetTick>
 8009dd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dd8:	e00e      	b.n	8009df8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009dda:	f7fa fa1f 	bl	800421c <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b19      	cmp	r3, #25
 8009de6:	d907      	bls.n	8009df8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	f043 0320 	orr.w	r3, r3, #32
 8009dee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009df6:	e006      	b.n	8009e06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	d1e9      	bne.n	8009dda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	f003 0320 	and.w	r3, r3, #32
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d003      	beq.n	8009e1c <I2C_IsErrorOccurred+0xe0>
 8009e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d0aa      	beq.n	8009d72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	f043 0304 	orr.w	r3, r3, #4
 8009e32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	f043 0301 	orr.w	r3, r3, #1
 8009e52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f043 0308 	orr.w	r3, r3, #8
 8009e74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d01c      	beq.n	8009eea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7ff fdaf 	bl	8009a14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6859      	ldr	r1, [r3, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <I2C_IsErrorOccurred+0x1bc>)
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	fe00e800 	.word	0xfe00e800

08009efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	607b      	str	r3, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	817b      	strh	r3, [r7, #10]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f0e:	897b      	ldrh	r3, [r7, #10]
 8009f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f14:	7a7b      	ldrb	r3, [r7, #9]
 8009f16:	041b      	lsls	r3, r3, #16
 8009f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	0d5b      	lsrs	r3, r3, #21
 8009f36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009f3a:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <I2C_TransferConfig+0x60>)
 8009f3c:	430b      	orrs	r3, r1
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	ea02 0103 	and.w	r1, r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	03ff63ff 	.word	0x03ff63ff

08009f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	d138      	bne.n	8009fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e032      	b.n	8009fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2224      	movs	r2, #36	; 0x24
 8009f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0201 	bic.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e000      	b.n	8009fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fe8:	2302      	movs	r3, #2
  }
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d139      	bne.n	800a080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a012:	2b01      	cmp	r3, #1
 800a014:	d101      	bne.n	800a01a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a016:	2302      	movs	r3, #2
 800a018:	e033      	b.n	800a082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2224      	movs	r2, #36	; 0x24
 800a026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0201 	bic.w	r2, r2, #1
 800a038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	021b      	lsls	r3, r3, #8
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4313      	orrs	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2220      	movs	r2, #32
 800a070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	e000      	b.n	800a082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a080:	2302      	movs	r3, #2
  }
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
	...

0800a090 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a098:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a09a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a09e:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a0a0:	f043 0302 	orr.w	r3, r3, #2
 800a0a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a0a8:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a0aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a0b6:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	4906      	ldr	r1, [pc, #24]	; (800a0d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	604b      	str	r3, [r1, #4]
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	58000400 	.word	0x58000400

0800a0d8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800a0e4:	4b18      	ldr	r3, [pc, #96]	; (800a148 <HAL_PWR_EnterSTOPMode+0x70>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f023 0201 	bic.w	r2, r3, #1
 800a0ec:	4916      	ldr	r1, [pc, #88]	; (800a148 <HAL_PWR_EnterSTOPMode+0x70>)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800a0f4:	4b14      	ldr	r3, [pc, #80]	; (800a148 <HAL_PWR_EnterSTOPMode+0x70>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	4a13      	ldr	r2, [pc, #76]	; (800a148 <HAL_PWR_EnterSTOPMode+0x70>)
 800a0fa:	f023 0305 	bic.w	r3, r3, #5
 800a0fe:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800a100:	4b11      	ldr	r3, [pc, #68]	; (800a148 <HAL_PWR_EnterSTOPMode+0x70>)
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	4a10      	ldr	r2, [pc, #64]	; (800a148 <HAL_PWR_EnterSTOPMode+0x70>)
 800a106:	f023 0302 	bic.w	r3, r3, #2
 800a10a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <HAL_PWR_EnterSTOPMode+0x74>)
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <HAL_PWR_EnterSTOPMode+0x74>)
 800a112:	f043 0304 	orr.w	r3, r3, #4
 800a116:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a118:	f3bf 8f4f 	dsb	sy
}
 800a11c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a11e:	f3bf 8f6f 	isb	sy
}
 800a122:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800a12a:	bf30      	wfi
 800a12c:	e000      	b.n	800a130 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800a12e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <HAL_PWR_EnterSTOPMode+0x74>)
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	4a05      	ldr	r2, [pc, #20]	; (800a14c <HAL_PWR_EnterSTOPMode+0x74>)
 800a136:	f023 0304 	bic.w	r3, r3, #4
 800a13a:	6113      	str	r3, [r2, #16]
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	58024800 	.word	0x58024800
 800a14c:	e000ed00 	.word	0xe000ed00

0800a150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a158:	4b19      	ldr	r3, [pc, #100]	; (800a1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f003 0304 	and.w	r3, r3, #4
 800a160:	2b04      	cmp	r3, #4
 800a162:	d00a      	beq.n	800a17a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a164:	4b16      	ldr	r3, [pc, #88]	; (800a1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d001      	beq.n	800a176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e01f      	b.n	800a1b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	e01d      	b.n	800a1b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a17a:	4b11      	ldr	r3, [pc, #68]	; (800a1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f023 0207 	bic.w	r2, r3, #7
 800a182:	490f      	ldr	r1, [pc, #60]	; (800a1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4313      	orrs	r3, r2
 800a188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a18a:	f7fa f847 	bl	800421c <HAL_GetTick>
 800a18e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a190:	e009      	b.n	800a1a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a192:	f7fa f843 	bl	800421c <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1a0:	d901      	bls.n	800a1a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e007      	b.n	800a1b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a1a6:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1b2:	d1ee      	bne.n	800a192 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	58024800 	.word	0x58024800

0800a1c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	; 0x30
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d102      	bne.n	800a1d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	f000 bc48 	b.w	800aa68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 8088 	beq.w	800a2f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1e6:	4b99      	ldr	r3, [pc, #612]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1f0:	4b96      	ldr	r3, [pc, #600]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	2b10      	cmp	r3, #16
 800a1fa:	d007      	beq.n	800a20c <HAL_RCC_OscConfig+0x48>
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2b18      	cmp	r3, #24
 800a200:	d111      	bne.n	800a226 <HAL_RCC_OscConfig+0x62>
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	f003 0303 	and.w	r3, r3, #3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d10c      	bne.n	800a226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a20c:	4b8f      	ldr	r3, [pc, #572]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d06d      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x130>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d169      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	f000 bc21 	b.w	800aa68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a22e:	d106      	bne.n	800a23e <HAL_RCC_OscConfig+0x7a>
 800a230:	4b86      	ldr	r3, [pc, #536]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a85      	ldr	r2, [pc, #532]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	e02e      	b.n	800a29c <HAL_RCC_OscConfig+0xd8>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10c      	bne.n	800a260 <HAL_RCC_OscConfig+0x9c>
 800a246:	4b81      	ldr	r3, [pc, #516]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a80      	ldr	r2, [pc, #512]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a24c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	4b7e      	ldr	r3, [pc, #504]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a7d      	ldr	r2, [pc, #500]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	e01d      	b.n	800a29c <HAL_RCC_OscConfig+0xd8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a268:	d10c      	bne.n	800a284 <HAL_RCC_OscConfig+0xc0>
 800a26a:	4b78      	ldr	r3, [pc, #480]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a77      	ldr	r2, [pc, #476]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	4b75      	ldr	r3, [pc, #468]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a74      	ldr	r2, [pc, #464]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a27c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	e00b      	b.n	800a29c <HAL_RCC_OscConfig+0xd8>
 800a284:	4b71      	ldr	r3, [pc, #452]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a70      	ldr	r2, [pc, #448]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a28a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	4b6e      	ldr	r3, [pc, #440]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a6d      	ldr	r2, [pc, #436]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a29a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d013      	beq.n	800a2cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7f9 ffba 	bl	800421c <HAL_GetTick>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2ac:	f7f9 ffb6 	bl	800421c <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b64      	cmp	r3, #100	; 0x64
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e3d4      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2be:	4b63      	ldr	r3, [pc, #396]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f0      	beq.n	800a2ac <HAL_RCC_OscConfig+0xe8>
 800a2ca:	e014      	b.n	800a2f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2cc:	f7f9 ffa6 	bl	800421c <HAL_GetTick>
 800a2d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2d4:	f7f9 ffa2 	bl	800421c <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b64      	cmp	r3, #100	; 0x64
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e3c0      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a2e6:	4b59      	ldr	r3, [pc, #356]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f0      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x110>
 800a2f2:	e000      	b.n	800a2f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80ca 	beq.w	800a498 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a304:	4b51      	ldr	r3, [pc, #324]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a30c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a30e:	4b4f      	ldr	r3, [pc, #316]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d007      	beq.n	800a32a <HAL_RCC_OscConfig+0x166>
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	2b18      	cmp	r3, #24
 800a31e:	d156      	bne.n	800a3ce <HAL_RCC_OscConfig+0x20a>
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d151      	bne.n	800a3ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a32a:	4b48      	ldr	r3, [pc, #288]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0304 	and.w	r3, r3, #4
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <HAL_RCC_OscConfig+0x17e>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e392      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a342:	4b42      	ldr	r3, [pc, #264]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f023 0219 	bic.w	r2, r3, #25
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	493f      	ldr	r1, [pc, #252]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a350:	4313      	orrs	r3, r2
 800a352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a354:	f7f9 ff62 	bl	800421c <HAL_GetTick>
 800a358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a35c:	f7f9 ff5e 	bl	800421c <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e37c      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a36e:	4b37      	ldr	r3, [pc, #220]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f0      	beq.n	800a35c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a37a:	f7f9 ff5b 	bl	8004234 <HAL_GetREVID>
 800a37e:	4603      	mov	r3, r0
 800a380:	f241 0203 	movw	r2, #4099	; 0x1003
 800a384:	4293      	cmp	r3, r2
 800a386:	d817      	bhi.n	800a3b8 <HAL_RCC_OscConfig+0x1f4>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	2b40      	cmp	r3, #64	; 0x40
 800a38e:	d108      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x1de>
 800a390:	4b2e      	ldr	r3, [pc, #184]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a398:	4a2c      	ldr	r2, [pc, #176]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a39a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a39e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3a0:	e07a      	b.n	800a498 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3a2:	4b2a      	ldr	r3, [pc, #168]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	031b      	lsls	r3, r3, #12
 800a3b0:	4926      	ldr	r1, [pc, #152]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3b6:	e06f      	b.n	800a498 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3b8:	4b24      	ldr	r3, [pc, #144]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	061b      	lsls	r3, r3, #24
 800a3c6:	4921      	ldr	r1, [pc, #132]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3cc:	e064      	b.n	800a498 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d047      	beq.n	800a466 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f023 0219 	bic.w	r2, r3, #25
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	491a      	ldr	r1, [pc, #104]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e8:	f7f9 ff18 	bl	800421c <HAL_GetTick>
 800a3ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3f0:	f7f9 ff14 	bl	800421c <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e332      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a402:	4b12      	ldr	r3, [pc, #72]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f0      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a40e:	f7f9 ff11 	bl	8004234 <HAL_GetREVID>
 800a412:	4603      	mov	r3, r0
 800a414:	f241 0203 	movw	r2, #4099	; 0x1003
 800a418:	4293      	cmp	r3, r2
 800a41a:	d819      	bhi.n	800a450 <HAL_RCC_OscConfig+0x28c>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	2b40      	cmp	r3, #64	; 0x40
 800a422:	d108      	bne.n	800a436 <HAL_RCC_OscConfig+0x272>
 800a424:	4b09      	ldr	r3, [pc, #36]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a42c:	4a07      	ldr	r2, [pc, #28]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a42e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a432:	6053      	str	r3, [r2, #4]
 800a434:	e030      	b.n	800a498 <HAL_RCC_OscConfig+0x2d4>
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	031b      	lsls	r3, r3, #12
 800a444:	4901      	ldr	r1, [pc, #4]	; (800a44c <HAL_RCC_OscConfig+0x288>)
 800a446:	4313      	orrs	r3, r2
 800a448:	604b      	str	r3, [r1, #4]
 800a44a:	e025      	b.n	800a498 <HAL_RCC_OscConfig+0x2d4>
 800a44c:	58024400 	.word	0x58024400
 800a450:	4b9a      	ldr	r3, [pc, #616]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	061b      	lsls	r3, r3, #24
 800a45e:	4997      	ldr	r1, [pc, #604]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a460:	4313      	orrs	r3, r2
 800a462:	604b      	str	r3, [r1, #4]
 800a464:	e018      	b.n	800a498 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a466:	4b95      	ldr	r3, [pc, #596]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a94      	ldr	r2, [pc, #592]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a46c:	f023 0301 	bic.w	r3, r3, #1
 800a470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a472:	f7f9 fed3 	bl	800421c <HAL_GetTick>
 800a476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a478:	e008      	b.n	800a48c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a47a:	f7f9 fecf 	bl	800421c <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d901      	bls.n	800a48c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e2ed      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a48c:	4b8b      	ldr	r3, [pc, #556]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1f0      	bne.n	800a47a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 80a9 	beq.w	800a5f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4a6:	4b85      	ldr	r3, [pc, #532]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4b0:	4b82      	ldr	r3, [pc, #520]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	2b08      	cmp	r3, #8
 800a4ba:	d007      	beq.n	800a4cc <HAL_RCC_OscConfig+0x308>
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b18      	cmp	r3, #24
 800a4c0:	d13a      	bne.n	800a538 <HAL_RCC_OscConfig+0x374>
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f003 0303 	and.w	r3, r3, #3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d135      	bne.n	800a538 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a4cc:	4b7b      	ldr	r3, [pc, #492]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x320>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	2b80      	cmp	r3, #128	; 0x80
 800a4de:	d001      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e2c1      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4e4:	f7f9 fea6 	bl	8004234 <HAL_GetREVID>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f241 0203 	movw	r2, #4099	; 0x1003
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d817      	bhi.n	800a522 <HAL_RCC_OscConfig+0x35e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d108      	bne.n	800a50c <HAL_RCC_OscConfig+0x348>
 800a4fa:	4b70      	ldr	r3, [pc, #448]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a502:	4a6e      	ldr	r2, [pc, #440]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a508:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a50a:	e075      	b.n	800a5f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a50c:	4b6b      	ldr	r3, [pc, #428]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	069b      	lsls	r3, r3, #26
 800a51a:	4968      	ldr	r1, [pc, #416]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a520:	e06a      	b.n	800a5f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a522:	4b66      	ldr	r3, [pc, #408]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	061b      	lsls	r3, r3, #24
 800a530:	4962      	ldr	r1, [pc, #392]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a532:	4313      	orrs	r3, r2
 800a534:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a536:	e05f      	b.n	800a5f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d042      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a540:	4b5e      	ldr	r3, [pc, #376]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a5d      	ldr	r2, [pc, #372]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a54a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54c:	f7f9 fe66 	bl	800421c <HAL_GetTick>
 800a550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a552:	e008      	b.n	800a566 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a554:	f7f9 fe62 	bl	800421c <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d901      	bls.n	800a566 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e280      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a566:	4b55      	ldr	r3, [pc, #340]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0f0      	beq.n	800a554 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a572:	f7f9 fe5f 	bl	8004234 <HAL_GetREVID>
 800a576:	4603      	mov	r3, r0
 800a578:	f241 0203 	movw	r2, #4099	; 0x1003
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d817      	bhi.n	800a5b0 <HAL_RCC_OscConfig+0x3ec>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	2b20      	cmp	r3, #32
 800a586:	d108      	bne.n	800a59a <HAL_RCC_OscConfig+0x3d6>
 800a588:	4b4c      	ldr	r3, [pc, #304]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a590:	4a4a      	ldr	r2, [pc, #296]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a596:	6053      	str	r3, [r2, #4]
 800a598:	e02e      	b.n	800a5f8 <HAL_RCC_OscConfig+0x434>
 800a59a:	4b48      	ldr	r3, [pc, #288]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	069b      	lsls	r3, r3, #26
 800a5a8:	4944      	ldr	r1, [pc, #272]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	604b      	str	r3, [r1, #4]
 800a5ae:	e023      	b.n	800a5f8 <HAL_RCC_OscConfig+0x434>
 800a5b0:	4b42      	ldr	r3, [pc, #264]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	061b      	lsls	r3, r3, #24
 800a5be:	493f      	ldr	r1, [pc, #252]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	60cb      	str	r3, [r1, #12]
 800a5c4:	e018      	b.n	800a5f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a5c6:	4b3d      	ldr	r3, [pc, #244]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a3c      	ldr	r2, [pc, #240]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a5cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d2:	f7f9 fe23 	bl	800421c <HAL_GetTick>
 800a5d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a5d8:	e008      	b.n	800a5ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a5da:	f7f9 fe1f 	bl	800421c <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d901      	bls.n	800a5ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e23d      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a5ec:	4b33      	ldr	r3, [pc, #204]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1f0      	bne.n	800a5da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0308 	and.w	r3, r3, #8
 800a600:	2b00      	cmp	r3, #0
 800a602:	d036      	beq.n	800a672 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d019      	beq.n	800a640 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a60c:	4b2b      	ldr	r3, [pc, #172]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a60e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a610:	4a2a      	ldr	r2, [pc, #168]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a612:	f043 0301 	orr.w	r3, r3, #1
 800a616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a618:	f7f9 fe00 	bl	800421c <HAL_GetTick>
 800a61c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a61e:	e008      	b.n	800a632 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a620:	f7f9 fdfc 	bl	800421c <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e21a      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a632:	4b22      	ldr	r3, [pc, #136]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0f0      	beq.n	800a620 <HAL_RCC_OscConfig+0x45c>
 800a63e:	e018      	b.n	800a672 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a640:	4b1e      	ldr	r3, [pc, #120]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a644:	4a1d      	ldr	r2, [pc, #116]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a646:	f023 0301 	bic.w	r3, r3, #1
 800a64a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64c:	f7f9 fde6 	bl	800421c <HAL_GetTick>
 800a650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a652:	e008      	b.n	800a666 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a654:	f7f9 fde2 	bl	800421c <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e200      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1f0      	bne.n	800a654 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0320 	and.w	r3, r3, #32
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d039      	beq.n	800a6f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d01c      	beq.n	800a6c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a0c      	ldr	r2, [pc, #48]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a68c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a690:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a692:	f7f9 fdc3 	bl	800421c <HAL_GetTick>
 800a696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a698:	e008      	b.n	800a6ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a69a:	f7f9 fdbf 	bl	800421c <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d901      	bls.n	800a6ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e1dd      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6ac:	4b03      	ldr	r3, [pc, #12]	; (800a6bc <HAL_RCC_OscConfig+0x4f8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0f0      	beq.n	800a69a <HAL_RCC_OscConfig+0x4d6>
 800a6b8:	e01b      	b.n	800a6f2 <HAL_RCC_OscConfig+0x52e>
 800a6ba:	bf00      	nop
 800a6bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a6c0:	4b9b      	ldr	r3, [pc, #620]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a9a      	ldr	r2, [pc, #616]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a6c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6cc:	f7f9 fda6 	bl	800421c <HAL_GetTick>
 800a6d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a6d2:	e008      	b.n	800a6e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6d4:	f7f9 fda2 	bl	800421c <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d901      	bls.n	800a6e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e1c0      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a6e6:	4b92      	ldr	r3, [pc, #584]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1f0      	bne.n	800a6d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8081 	beq.w	800a802 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a700:	4b8c      	ldr	r3, [pc, #560]	; (800a934 <HAL_RCC_OscConfig+0x770>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a8b      	ldr	r2, [pc, #556]	; (800a934 <HAL_RCC_OscConfig+0x770>)
 800a706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a70a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a70c:	f7f9 fd86 	bl	800421c <HAL_GetTick>
 800a710:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a712:	e008      	b.n	800a726 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a714:	f7f9 fd82 	bl	800421c <HAL_GetTick>
 800a718:	4602      	mov	r2, r0
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	2b64      	cmp	r3, #100	; 0x64
 800a720:	d901      	bls.n	800a726 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e1a0      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a726:	4b83      	ldr	r3, [pc, #524]	; (800a934 <HAL_RCC_OscConfig+0x770>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0f0      	beq.n	800a714 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d106      	bne.n	800a748 <HAL_RCC_OscConfig+0x584>
 800a73a:	4b7d      	ldr	r3, [pc, #500]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73e:	4a7c      	ldr	r2, [pc, #496]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a740:	f043 0301 	orr.w	r3, r3, #1
 800a744:	6713      	str	r3, [r2, #112]	; 0x70
 800a746:	e02d      	b.n	800a7a4 <HAL_RCC_OscConfig+0x5e0>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10c      	bne.n	800a76a <HAL_RCC_OscConfig+0x5a6>
 800a750:	4b77      	ldr	r3, [pc, #476]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a754:	4a76      	ldr	r2, [pc, #472]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	6713      	str	r3, [r2, #112]	; 0x70
 800a75c:	4b74      	ldr	r3, [pc, #464]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a760:	4a73      	ldr	r2, [pc, #460]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a762:	f023 0304 	bic.w	r3, r3, #4
 800a766:	6713      	str	r3, [r2, #112]	; 0x70
 800a768:	e01c      	b.n	800a7a4 <HAL_RCC_OscConfig+0x5e0>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d10c      	bne.n	800a78c <HAL_RCC_OscConfig+0x5c8>
 800a772:	4b6f      	ldr	r3, [pc, #444]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a776:	4a6e      	ldr	r2, [pc, #440]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a778:	f043 0304 	orr.w	r3, r3, #4
 800a77c:	6713      	str	r3, [r2, #112]	; 0x70
 800a77e:	4b6c      	ldr	r3, [pc, #432]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	4a6b      	ldr	r2, [pc, #428]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a784:	f043 0301 	orr.w	r3, r3, #1
 800a788:	6713      	str	r3, [r2, #112]	; 0x70
 800a78a:	e00b      	b.n	800a7a4 <HAL_RCC_OscConfig+0x5e0>
 800a78c:	4b68      	ldr	r3, [pc, #416]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a790:	4a67      	ldr	r2, [pc, #412]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a792:	f023 0301 	bic.w	r3, r3, #1
 800a796:	6713      	str	r3, [r2, #112]	; 0x70
 800a798:	4b65      	ldr	r3, [pc, #404]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a79c:	4a64      	ldr	r2, [pc, #400]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a79e:	f023 0304 	bic.w	r3, r3, #4
 800a7a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d015      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ac:	f7f9 fd36 	bl	800421c <HAL_GetTick>
 800a7b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7b2:	e00a      	b.n	800a7ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7b4:	f7f9 fd32 	bl	800421c <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d901      	bls.n	800a7ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e14e      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7ca:	4b59      	ldr	r3, [pc, #356]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0ee      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x5f0>
 800a7d6:	e014      	b.n	800a802 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d8:	f7f9 fd20 	bl	800421c <HAL_GetTick>
 800a7dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7de:	e00a      	b.n	800a7f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7e0:	f7f9 fd1c 	bl	800421c <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d901      	bls.n	800a7f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e138      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7f6:	4b4e      	ldr	r3, [pc, #312]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1ee      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 812d 	beq.w	800aa66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a80c:	4b48      	ldr	r3, [pc, #288]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a814:	2b18      	cmp	r3, #24
 800a816:	f000 80bd 	beq.w	800a994 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b02      	cmp	r3, #2
 800a820:	f040 809e 	bne.w	800a960 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a824:	4b42      	ldr	r3, [pc, #264]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a41      	ldr	r2, [pc, #260]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a82a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a82e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a830:	f7f9 fcf4 	bl	800421c <HAL_GetTick>
 800a834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a836:	e008      	b.n	800a84a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a838:	f7f9 fcf0 	bl	800421c <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d901      	bls.n	800a84a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e10e      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a84a:	4b39      	ldr	r3, [pc, #228]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f0      	bne.n	800a838 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a856:	4b36      	ldr	r3, [pc, #216]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a85a:	4b37      	ldr	r3, [pc, #220]	; (800a938 <HAL_RCC_OscConfig+0x774>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a866:	0112      	lsls	r2, r2, #4
 800a868:	430a      	orrs	r2, r1
 800a86a:	4931      	ldr	r1, [pc, #196]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	628b      	str	r3, [r1, #40]	; 0x28
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a874:	3b01      	subs	r3, #1
 800a876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87e:	3b01      	subs	r3, #1
 800a880:	025b      	lsls	r3, r3, #9
 800a882:	b29b      	uxth	r3, r3
 800a884:	431a      	orrs	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	3b01      	subs	r3, #1
 800a88c:	041b      	lsls	r3, r3, #16
 800a88e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a892:	431a      	orrs	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a898:	3b01      	subs	r3, #1
 800a89a:	061b      	lsls	r3, r3, #24
 800a89c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8a0:	4923      	ldr	r1, [pc, #140]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a8a6:	4b22      	ldr	r3, [pc, #136]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	4a21      	ldr	r2, [pc, #132]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8ac:	f023 0301 	bic.w	r3, r3, #1
 800a8b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8b2:	4b1f      	ldr	r3, [pc, #124]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b6:	4b21      	ldr	r3, [pc, #132]	; (800a93c <HAL_RCC_OscConfig+0x778>)
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8be:	00d2      	lsls	r2, r2, #3
 800a8c0:	491b      	ldr	r1, [pc, #108]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	f023 020c 	bic.w	r2, r3, #12
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	4917      	ldr	r1, [pc, #92]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a8d8:	4b15      	ldr	r3, [pc, #84]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	f023 0202 	bic.w	r2, r3, #2
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e4:	4912      	ldr	r1, [pc, #72]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a8ea:	4b11      	ldr	r3, [pc, #68]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ee:	4a10      	ldr	r2, [pc, #64]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	4a0d      	ldr	r2, [pc, #52]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a8fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a902:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	4a0a      	ldr	r2, [pc, #40]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a90c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a90e:	4b08      	ldr	r3, [pc, #32]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	4a07      	ldr	r2, [pc, #28]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a91a:	4b05      	ldr	r3, [pc, #20]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a04      	ldr	r2, [pc, #16]	; (800a930 <HAL_RCC_OscConfig+0x76c>)
 800a920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a926:	f7f9 fc79 	bl	800421c <HAL_GetTick>
 800a92a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a92c:	e011      	b.n	800a952 <HAL_RCC_OscConfig+0x78e>
 800a92e:	bf00      	nop
 800a930:	58024400 	.word	0x58024400
 800a934:	58024800 	.word	0x58024800
 800a938:	fffffc0c 	.word	0xfffffc0c
 800a93c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a940:	f7f9 fc6c 	bl	800421c <HAL_GetTick>
 800a944:	4602      	mov	r2, r0
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e08a      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a952:	4b47      	ldr	r3, [pc, #284]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0f0      	beq.n	800a940 <HAL_RCC_OscConfig+0x77c>
 800a95e:	e082      	b.n	800aa66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a960:	4b43      	ldr	r3, [pc, #268]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a42      	ldr	r2, [pc, #264]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800a966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a96a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a96c:	f7f9 fc56 	bl	800421c <HAL_GetTick>
 800a970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a972:	e008      	b.n	800a986 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a974:	f7f9 fc52 	bl	800421c <HAL_GetTick>
 800a978:	4602      	mov	r2, r0
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d901      	bls.n	800a986 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e070      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a986:	4b3a      	ldr	r3, [pc, #232]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1f0      	bne.n	800a974 <HAL_RCC_OscConfig+0x7b0>
 800a992:	e068      	b.n	800aa66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a994:	4b36      	ldr	r3, [pc, #216]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800a996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a998:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a99a:	4b35      	ldr	r3, [pc, #212]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800a99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d031      	beq.n	800aa0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f003 0203 	and.w	r2, r3, #3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d12a      	bne.n	800aa0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	091b      	lsrs	r3, r3, #4
 800a9ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d122      	bne.n	800aa0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d11a      	bne.n	800aa0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	0a5b      	lsrs	r3, r3, #9
 800a9da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d111      	bne.n	800aa0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	0c1b      	lsrs	r3, r3, #16
 800a9ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d108      	bne.n	800aa0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	0e1b      	lsrs	r3, r3, #24
 800a9fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d001      	beq.n	800aa10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e02b      	b.n	800aa68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aa10:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	08db      	lsrs	r3, r3, #3
 800aa16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d01f      	beq.n	800aa66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aa26:	4b12      	ldr	r3, [pc, #72]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	4a11      	ldr	r2, [pc, #68]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa2c:	f023 0301 	bic.w	r3, r3, #1
 800aa30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa32:	f7f9 fbf3 	bl	800421c <HAL_GetTick>
 800aa36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aa38:	bf00      	nop
 800aa3a:	f7f9 fbef 	bl	800421c <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d0f9      	beq.n	800aa3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa46:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <HAL_RCC_OscConfig+0x8b0>)
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa52:	00d2      	lsls	r2, r2, #3
 800aa54:	4906      	ldr	r1, [pc, #24]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5e:	4a04      	ldr	r2, [pc, #16]	; (800aa70 <HAL_RCC_OscConfig+0x8ac>)
 800aa60:	f043 0301 	orr.w	r3, r3, #1
 800aa64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3730      	adds	r7, #48	; 0x30
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	58024400 	.word	0x58024400
 800aa74:	ffff0007 	.word	0xffff0007

0800aa78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e19c      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa8c:	4b8a      	ldr	r3, [pc, #552]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d910      	bls.n	800aabc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa9a:	4b87      	ldr	r3, [pc, #540]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f023 020f 	bic.w	r2, r3, #15
 800aaa2:	4985      	ldr	r1, [pc, #532]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaaa:	4b83      	ldr	r3, [pc, #524]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d001      	beq.n	800aabc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e184      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d010      	beq.n	800aaea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	691a      	ldr	r2, [r3, #16]
 800aacc:	4b7b      	ldr	r3, [pc, #492]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d908      	bls.n	800aaea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aad8:	4b78      	ldr	r3, [pc, #480]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	4975      	ldr	r1, [pc, #468]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0308 	and.w	r3, r3, #8
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d010      	beq.n	800ab18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	695a      	ldr	r2, [r3, #20]
 800aafa:	4b70      	ldr	r3, [pc, #448]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d908      	bls.n	800ab18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab06:	4b6d      	ldr	r3, [pc, #436]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	496a      	ldr	r1, [pc, #424]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d010      	beq.n	800ab46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	699a      	ldr	r2, [r3, #24]
 800ab28:	4b64      	ldr	r3, [pc, #400]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d908      	bls.n	800ab46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab34:	4b61      	ldr	r3, [pc, #388]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	495e      	ldr	r1, [pc, #376]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d010      	beq.n	800ab74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	69da      	ldr	r2, [r3, #28]
 800ab56:	4b59      	ldr	r3, [pc, #356]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d908      	bls.n	800ab74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab62:	4b56      	ldr	r3, [pc, #344]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	4953      	ldr	r1, [pc, #332]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d010      	beq.n	800aba2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	4b4d      	ldr	r3, [pc, #308]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d908      	bls.n	800aba2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab90:	4b4a      	ldr	r3, [pc, #296]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	f023 020f 	bic.w	r2, r3, #15
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	4947      	ldr	r1, [pc, #284]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d055      	beq.n	800ac5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800abae:	4b43      	ldr	r3, [pc, #268]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	4940      	ldr	r1, [pc, #256]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d107      	bne.n	800abd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abc8:	4b3c      	ldr	r3, [pc, #240]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d121      	bne.n	800ac18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e0f6      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d107      	bne.n	800abf0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800abe0:	4b36      	ldr	r3, [pc, #216]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d115      	bne.n	800ac18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e0ea      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d107      	bne.n	800ac08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abf8:	4b30      	ldr	r3, [pc, #192]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e0de      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac08:	4b2c      	ldr	r3, [pc, #176]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e0d6      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac18:	4b28      	ldr	r3, [pc, #160]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f023 0207 	bic.w	r2, r3, #7
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4925      	ldr	r1, [pc, #148]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac2a:	f7f9 faf7 	bl	800421c <HAL_GetTick>
 800ac2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac30:	e00a      	b.n	800ac48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac32:	f7f9 faf3 	bl	800421c <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d901      	bls.n	800ac48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e0be      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac48:	4b1c      	ldr	r3, [pc, #112]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d1eb      	bne.n	800ac32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d010      	beq.n	800ac88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	4b14      	ldr	r3, [pc, #80]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f003 030f 	and.w	r3, r3, #15
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d208      	bcs.n	800ac88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac76:	4b11      	ldr	r3, [pc, #68]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	f023 020f 	bic.w	r2, r3, #15
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	490e      	ldr	r1, [pc, #56]	; (800acbc <HAL_RCC_ClockConfig+0x244>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac88:	4b0b      	ldr	r3, [pc, #44]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d214      	bcs.n	800acc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac96:	4b08      	ldr	r3, [pc, #32]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f023 020f 	bic.w	r2, r3, #15
 800ac9e:	4906      	ldr	r1, [pc, #24]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aca6:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <HAL_RCC_ClockConfig+0x240>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d005      	beq.n	800acc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e086      	b.n	800adc6 <HAL_RCC_ClockConfig+0x34e>
 800acb8:	52002000 	.word	0x52002000
 800acbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	691a      	ldr	r2, [r3, #16]
 800acd0:	4b3f      	ldr	r3, [pc, #252]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acd8:	429a      	cmp	r2, r3
 800acda:	d208      	bcs.n	800acee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800acdc:	4b3c      	ldr	r3, [pc, #240]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	4939      	ldr	r1, [pc, #228]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800acea:	4313      	orrs	r3, r2
 800acec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0308 	and.w	r3, r3, #8
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d010      	beq.n	800ad1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	695a      	ldr	r2, [r3, #20]
 800acfe:	4b34      	ldr	r3, [pc, #208]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d208      	bcs.n	800ad1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad0a:	4b31      	ldr	r3, [pc, #196]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	492e      	ldr	r1, [pc, #184]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	4b28      	ldr	r3, [pc, #160]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d208      	bcs.n	800ad4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad38:	4b25      	ldr	r3, [pc, #148]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	4922      	ldr	r1, [pc, #136]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0320 	and.w	r3, r3, #32
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d010      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69da      	ldr	r2, [r3, #28]
 800ad5a:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d208      	bcs.n	800ad78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad66:	4b1a      	ldr	r3, [pc, #104]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	4917      	ldr	r1, [pc, #92]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ad78:	f000 f834 	bl	800ade4 <HAL_RCC_GetSysClockFreq>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	4b14      	ldr	r3, [pc, #80]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	0a1b      	lsrs	r3, r3, #8
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	4912      	ldr	r1, [pc, #72]	; (800add4 <HAL_RCC_ClockConfig+0x35c>)
 800ad8a:	5ccb      	ldrb	r3, [r1, r3]
 800ad8c:	f003 031f 	and.w	r3, r3, #31
 800ad90:	fa22 f303 	lsr.w	r3, r2, r3
 800ad94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad96:	4b0e      	ldr	r3, [pc, #56]	; (800add0 <HAL_RCC_ClockConfig+0x358>)
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	4a0d      	ldr	r2, [pc, #52]	; (800add4 <HAL_RCC_ClockConfig+0x35c>)
 800ada0:	5cd3      	ldrb	r3, [r2, r3]
 800ada2:	f003 031f 	and.w	r3, r3, #31
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	fa22 f303 	lsr.w	r3, r2, r3
 800adac:	4a0a      	ldr	r2, [pc, #40]	; (800add8 <HAL_RCC_ClockConfig+0x360>)
 800adae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800adb0:	4a0a      	ldr	r2, [pc, #40]	; (800addc <HAL_RCC_ClockConfig+0x364>)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800adb6:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <HAL_RCC_ClockConfig+0x368>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7f8 ff52 	bl	8003c64 <HAL_InitTick>
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	58024400 	.word	0x58024400
 800add4:	08017b54 	.word	0x08017b54
 800add8:	24000094 	.word	0x24000094
 800addc:	24000090 	.word	0x24000090
 800ade0:	24000098 	.word	0x24000098

0800ade4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b089      	sub	sp, #36	; 0x24
 800ade8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adea:	4bb3      	ldr	r3, [pc, #716]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adf2:	2b18      	cmp	r3, #24
 800adf4:	f200 8155 	bhi.w	800b0a2 <HAL_RCC_GetSysClockFreq+0x2be>
 800adf8:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <HAL_RCC_GetSysClockFreq+0x1c>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae65 	.word	0x0800ae65
 800ae04:	0800b0a3 	.word	0x0800b0a3
 800ae08:	0800b0a3 	.word	0x0800b0a3
 800ae0c:	0800b0a3 	.word	0x0800b0a3
 800ae10:	0800b0a3 	.word	0x0800b0a3
 800ae14:	0800b0a3 	.word	0x0800b0a3
 800ae18:	0800b0a3 	.word	0x0800b0a3
 800ae1c:	0800b0a3 	.word	0x0800b0a3
 800ae20:	0800ae8b 	.word	0x0800ae8b
 800ae24:	0800b0a3 	.word	0x0800b0a3
 800ae28:	0800b0a3 	.word	0x0800b0a3
 800ae2c:	0800b0a3 	.word	0x0800b0a3
 800ae30:	0800b0a3 	.word	0x0800b0a3
 800ae34:	0800b0a3 	.word	0x0800b0a3
 800ae38:	0800b0a3 	.word	0x0800b0a3
 800ae3c:	0800b0a3 	.word	0x0800b0a3
 800ae40:	0800ae91 	.word	0x0800ae91
 800ae44:	0800b0a3 	.word	0x0800b0a3
 800ae48:	0800b0a3 	.word	0x0800b0a3
 800ae4c:	0800b0a3 	.word	0x0800b0a3
 800ae50:	0800b0a3 	.word	0x0800b0a3
 800ae54:	0800b0a3 	.word	0x0800b0a3
 800ae58:	0800b0a3 	.word	0x0800b0a3
 800ae5c:	0800b0a3 	.word	0x0800b0a3
 800ae60:	0800ae97 	.word	0x0800ae97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae64:	4b94      	ldr	r3, [pc, #592]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0320 	and.w	r3, r3, #32
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae70:	4b91      	ldr	r3, [pc, #580]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	08db      	lsrs	r3, r3, #3
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	4a90      	ldr	r2, [pc, #576]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ae82:	e111      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae84:	4b8d      	ldr	r3, [pc, #564]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae86:	61bb      	str	r3, [r7, #24]
      break;
 800ae88:	e10e      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ae8a:	4b8d      	ldr	r3, [pc, #564]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae8c:	61bb      	str	r3, [r7, #24]
      break;
 800ae8e:	e10b      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ae90:	4b8c      	ldr	r3, [pc, #560]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ae92:	61bb      	str	r3, [r7, #24]
      break;
 800ae94:	e108      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae96:	4b88      	ldr	r3, [pc, #544]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9a:	f003 0303 	and.w	r3, r3, #3
 800ae9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aea0:	4b85      	ldr	r3, [pc, #532]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea4:	091b      	lsrs	r3, r3, #4
 800aea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeaa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aeac:	4b82      	ldr	r3, [pc, #520]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aeb6:	4b80      	ldr	r3, [pc, #512]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	fb02 f303 	mul.w	r3, r2, r3
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 80e1 	beq.w	800b09c <HAL_RCC_GetSysClockFreq+0x2b8>
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	f000 8083 	beq.w	800afe8 <HAL_RCC_GetSysClockFreq+0x204>
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	f200 80a1 	bhi.w	800b02c <HAL_RCC_GetSysClockFreq+0x248>
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_RCC_GetSysClockFreq+0x114>
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d056      	beq.n	800afa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aef6:	e099      	b.n	800b02c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef8:	4b6f      	ldr	r3, [pc, #444]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0320 	and.w	r3, r3, #32
 800af00:	2b00      	cmp	r3, #0
 800af02:	d02d      	beq.n	800af60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af04:	4b6c      	ldr	r3, [pc, #432]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	08db      	lsrs	r3, r3, #3
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	4a6b      	ldr	r2, [pc, #428]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af10:	fa22 f303 	lsr.w	r3, r2, r3
 800af14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2e:	4b62      	ldr	r3, [pc, #392]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af42:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b0c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800af5e:	e087      	b.n	800b070 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b51      	ldr	r3, [pc, #324]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a02 	vldr	s12, [r7, #8]
 800af86:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b0c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afa2:	e065      	b.n	800b070 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b0d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800afb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb6:	4b40      	ldr	r3, [pc, #256]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800afca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b0c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afe6:	e043      	b.n	800b070 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b0d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affa:	4b2f      	ldr	r3, [pc, #188]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b00e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b0c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b02a:	e021      	b.n	800b070 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b0d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03e:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b052:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b0c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b06e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07a:	3301      	adds	r3, #1
 800b07c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b088:	edd7 6a07 	vldr	s13, [r7, #28]
 800b08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b094:	ee17 3a90 	vmov	r3, s15
 800b098:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b09a:	e005      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	61bb      	str	r3, [r7, #24]
      break;
 800b0a0:	e002      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b0a4:	61bb      	str	r3, [r7, #24]
      break;
 800b0a6:	bf00      	nop
  }

  return sysclockfreq;
 800b0a8:	69bb      	ldr	r3, [r7, #24]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3724      	adds	r7, #36	; 0x24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	03d09000 	.word	0x03d09000
 800b0c0:	003d0900 	.word	0x003d0900
 800b0c4:	017d7840 	.word	0x017d7840
 800b0c8:	46000000 	.word	0x46000000
 800b0cc:	4c742400 	.word	0x4c742400
 800b0d0:	4a742400 	.word	0x4a742400
 800b0d4:	4bbebc20 	.word	0x4bbebc20

0800b0d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0de:	f7ff fe81 	bl	800ade4 <HAL_RCC_GetSysClockFreq>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	4b10      	ldr	r3, [pc, #64]	; (800b128 <HAL_RCC_GetHCLKFreq+0x50>)
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	0a1b      	lsrs	r3, r3, #8
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	490f      	ldr	r1, [pc, #60]	; (800b12c <HAL_RCC_GetHCLKFreq+0x54>)
 800b0f0:	5ccb      	ldrb	r3, [r1, r3]
 800b0f2:	f003 031f 	and.w	r3, r3, #31
 800b0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <HAL_RCC_GetHCLKFreq+0x50>)
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	4a09      	ldr	r2, [pc, #36]	; (800b12c <HAL_RCC_GetHCLKFreq+0x54>)
 800b106:	5cd3      	ldrb	r3, [r2, r3]
 800b108:	f003 031f 	and.w	r3, r3, #31
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	fa22 f303 	lsr.w	r3, r2, r3
 800b112:	4a07      	ldr	r2, [pc, #28]	; (800b130 <HAL_RCC_GetHCLKFreq+0x58>)
 800b114:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b116:	4a07      	ldr	r2, [pc, #28]	; (800b134 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b11c:	4b04      	ldr	r3, [pc, #16]	; (800b130 <HAL_RCC_GetHCLKFreq+0x58>)
 800b11e:	681b      	ldr	r3, [r3, #0]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	58024400 	.word	0x58024400
 800b12c:	08017b54 	.word	0x08017b54
 800b130:	24000094 	.word	0x24000094
 800b134:	24000090 	.word	0x24000090

0800b138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b13c:	f7ff ffcc 	bl	800b0d8 <HAL_RCC_GetHCLKFreq>
 800b140:	4602      	mov	r2, r0
 800b142:	4b06      	ldr	r3, [pc, #24]	; (800b15c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	091b      	lsrs	r3, r3, #4
 800b148:	f003 0307 	and.w	r3, r3, #7
 800b14c:	4904      	ldr	r1, [pc, #16]	; (800b160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b14e:	5ccb      	ldrb	r3, [r1, r3]
 800b150:	f003 031f 	and.w	r3, r3, #31
 800b154:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b158:	4618      	mov	r0, r3
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	58024400 	.word	0x58024400
 800b160:	08017b54 	.word	0x08017b54

0800b164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b168:	f7ff ffb6 	bl	800b0d8 <HAL_RCC_GetHCLKFreq>
 800b16c:	4602      	mov	r2, r0
 800b16e:	4b06      	ldr	r3, [pc, #24]	; (800b188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	0a1b      	lsrs	r3, r3, #8
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	4904      	ldr	r1, [pc, #16]	; (800b18c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b17a:	5ccb      	ldrb	r3, [r1, r3]
 800b17c:	f003 031f 	and.w	r3, r3, #31
 800b180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b184:	4618      	mov	r0, r3
 800b186:	bd80      	pop	{r7, pc}
 800b188:	58024400 	.word	0x58024400
 800b18c:	08017b54 	.word	0x08017b54

0800b190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	223f      	movs	r2, #63	; 0x3f
 800b19e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b1a0:	4b1a      	ldr	r3, [pc, #104]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	f003 0207 	and.w	r2, r3, #7
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b1ac:	4b17      	ldr	r3, [pc, #92]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b1b8:	4b14      	ldr	r3, [pc, #80]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	f003 020f 	and.w	r2, r3, #15
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b1c4:	4b11      	ldr	r3, [pc, #68]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b1d0:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b1dc:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b1e8:	4b08      	ldr	r3, [pc, #32]	; (800b20c <HAL_RCC_GetClockConfig+0x7c>)
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <HAL_RCC_GetClockConfig+0x80>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 020f 	and.w	r2, r3, #15
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	601a      	str	r2, [r3, #0]
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	58024400 	.word	0x58024400
 800b210:	52002000 	.word	0x52002000

0800b214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b218:	b0ca      	sub	sp, #296	; 0x128
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b220:	2300      	movs	r3, #0
 800b222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b226:	2300      	movs	r3, #0
 800b228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b238:	2500      	movs	r5, #0
 800b23a:	ea54 0305 	orrs.w	r3, r4, r5
 800b23e:	d049      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b24a:	d02f      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b24c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b250:	d828      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b256:	d01a      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b258:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b25c:	d822      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b266:	d007      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b268:	e01c      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b26a:	4bb8      	ldr	r3, [pc, #736]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	4ab7      	ldr	r2, [pc, #732]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b276:	e01a      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27c:	3308      	adds	r3, #8
 800b27e:	2102      	movs	r1, #2
 800b280:	4618      	mov	r0, r3
 800b282:	f002 fb61 	bl	800d948 <RCCEx_PLL2_Config>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b28c:	e00f      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b292:	3328      	adds	r3, #40	; 0x28
 800b294:	2102      	movs	r1, #2
 800b296:	4618      	mov	r0, r3
 800b298:	f002 fc08 	bl	800daac <RCCEx_PLL3_Config>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b2a2:	e004      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2aa:	e000      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b2ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b2b6:	4ba5      	ldr	r3, [pc, #660]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2c4:	4aa1      	ldr	r2, [pc, #644]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	6513      	str	r3, [r2, #80]	; 0x50
 800b2ca:	e003      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	ea58 0309 	orrs.w	r3, r8, r9
 800b2e8:	d047      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f0:	2b04      	cmp	r3, #4
 800b2f2:	d82a      	bhi.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b2f4:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fa:	bf00      	nop
 800b2fc:	0800b311 	.word	0x0800b311
 800b300:	0800b31f 	.word	0x0800b31f
 800b304:	0800b335 	.word	0x0800b335
 800b308:	0800b353 	.word	0x0800b353
 800b30c:	0800b353 	.word	0x0800b353
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b310:	4b8e      	ldr	r3, [pc, #568]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	4a8d      	ldr	r2, [pc, #564]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b31c:	e01a      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b322:	3308      	adds	r3, #8
 800b324:	2100      	movs	r1, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f002 fb0e 	bl	800d948 <RCCEx_PLL2_Config>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b332:	e00f      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b338:	3328      	adds	r3, #40	; 0x28
 800b33a:	2100      	movs	r1, #0
 800b33c:	4618      	mov	r0, r3
 800b33e:	f002 fbb5 	bl	800daac <RCCEx_PLL3_Config>
 800b342:	4603      	mov	r3, r0
 800b344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b348:	e004      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b350:	e000      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b352:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b35c:	4b7b      	ldr	r3, [pc, #492]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b360:	f023 0107 	bic.w	r1, r3, #7
 800b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36a:	4a78      	ldr	r2, [pc, #480]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6513      	str	r3, [r2, #80]	; 0x50
 800b370:	e003      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b386:	f04f 0b00 	mov.w	fp, #0
 800b38a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b38e:	d04c      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b39a:	d030      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b39c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a0:	d829      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3a2:	2bc0      	cmp	r3, #192	; 0xc0
 800b3a4:	d02d      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b3a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b3a8:	d825      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3aa:	2b80      	cmp	r3, #128	; 0x80
 800b3ac:	d018      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b3ae:	2b80      	cmp	r3, #128	; 0x80
 800b3b0:	d821      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	d007      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b3ba:	e01c      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3bc:	4b63      	ldr	r3, [pc, #396]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	4a62      	ldr	r2, [pc, #392]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3c8:	e01c      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 fab8 	bl	800d948 <RCCEx_PLL2_Config>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3de:	e011      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e4:	3328      	adds	r3, #40	; 0x28
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f002 fb5f 	bl	800daac <RCCEx_PLL3_Config>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3f4:	e006      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3fc:	e002      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b402:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b40c:	4b4f      	ldr	r3, [pc, #316]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b410:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b41a:	4a4c      	ldr	r2, [pc, #304]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b41c:	430b      	orrs	r3, r1
 800b41e:	6513      	str	r3, [r2, #80]	; 0x50
 800b420:	e003      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b43a:	2300      	movs	r3, #0
 800b43c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b440:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b444:	460b      	mov	r3, r1
 800b446:	4313      	orrs	r3, r2
 800b448:	d053      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b456:	d035      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b45c:	d82e      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b45e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b462:	d031      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b464:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b468:	d828      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b46e:	d01a      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b474:	d822      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b47a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b47e:	d007      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b480:	e01c      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b482:	4b32      	ldr	r3, [pc, #200]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	4a31      	ldr	r2, [pc, #196]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b48c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b48e:	e01c      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b494:	3308      	adds	r3, #8
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f002 fa55 	bl	800d948 <RCCEx_PLL2_Config>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b4a4:	e011      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4aa:	3328      	adds	r3, #40	; 0x28
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f002 fafc 	bl	800daac <RCCEx_PLL3_Config>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4ba:	e006      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4c2:	e002      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b4c4:	bf00      	nop
 800b4c6:	e000      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b4c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10b      	bne.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b4d2:	4b1e      	ldr	r3, [pc, #120]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b4e2:	4a1a      	ldr	r2, [pc, #104]	; (800b54c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b4e8:	e003      	b.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b4fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b502:	2300      	movs	r3, #0
 800b504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b508:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b50c:	460b      	mov	r3, r1
 800b50e:	4313      	orrs	r3, r2
 800b510:	d056      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b51a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b51e:	d038      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b524:	d831      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b52a:	d034      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b52c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b530:	d82b      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b536:	d01d      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b53c:	d825      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d006      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b546:	d00a      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b548:	e01f      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b54a:	bf00      	nop
 800b54c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b550:	4ba2      	ldr	r3, [pc, #648]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b554:	4aa1      	ldr	r2, [pc, #644]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b55c:	e01c      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b562:	3308      	adds	r3, #8
 800b564:	2100      	movs	r1, #0
 800b566:	4618      	mov	r0, r3
 800b568:	f002 f9ee 	bl	800d948 <RCCEx_PLL2_Config>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b572:	e011      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b578:	3328      	adds	r3, #40	; 0x28
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fa95 	bl	800daac <RCCEx_PLL3_Config>
 800b582:	4603      	mov	r3, r0
 800b584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b588:	e006      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b590:	e002      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b592:	bf00      	nop
 800b594:	e000      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b596:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10b      	bne.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5a0:	4b8e      	ldr	r3, [pc, #568]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5b0:	4a8a      	ldr	r2, [pc, #552]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b2:	430b      	orrs	r3, r1
 800b5b4:	6593      	str	r3, [r2, #88]	; 0x58
 800b5b6:	e003      	b.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b5cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	d03a      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e6:	2b30      	cmp	r3, #48	; 0x30
 800b5e8:	d01f      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b5ea:	2b30      	cmp	r3, #48	; 0x30
 800b5ec:	d819      	bhi.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b5ee:	2b20      	cmp	r3, #32
 800b5f0:	d00c      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d815      	bhi.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d019      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b5fa:	2b10      	cmp	r3, #16
 800b5fc:	d111      	bne.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5fe:	4b77      	ldr	r3, [pc, #476]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	4a76      	ldr	r2, [pc, #472]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b60a:	e011      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b610:	3308      	adds	r3, #8
 800b612:	2102      	movs	r1, #2
 800b614:	4618      	mov	r0, r3
 800b616:	f002 f997 	bl	800d948 <RCCEx_PLL2_Config>
 800b61a:	4603      	mov	r3, r0
 800b61c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b620:	e006      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b628:	e002      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b62a:	bf00      	nop
 800b62c:	e000      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b62e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b638:	4b68      	ldr	r3, [pc, #416]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b646:	4a65      	ldr	r2, [pc, #404]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b648:	430b      	orrs	r3, r1
 800b64a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b64c:	e003      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b666:	2300      	movs	r3, #0
 800b668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b66c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b670:	460b      	mov	r3, r1
 800b672:	4313      	orrs	r3, r2
 800b674:	d051      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b680:	d035      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b686:	d82e      	bhi.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b688:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b68c:	d031      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b68e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b692:	d828      	bhi.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b698:	d01a      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b69e:	d822      	bhi.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a8:	d007      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b6aa:	e01c      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ac:	4b4b      	ldr	r3, [pc, #300]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	4a4a      	ldr	r2, [pc, #296]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6b8:	e01c      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	3308      	adds	r3, #8
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f002 f940 	bl	800d948 <RCCEx_PLL2_Config>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6ce:	e011      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d4:	3328      	adds	r3, #40	; 0x28
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f002 f9e7 	bl	800daac <RCCEx_PLL3_Config>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6e4:	e006      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ec:	e002      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b6ee:	bf00      	nop
 800b6f0:	e000      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b6f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b6fc:	4b37      	ldr	r3, [pc, #220]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b700:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b70a:	4a34      	ldr	r2, [pc, #208]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6513      	str	r3, [r2, #80]	; 0x50
 800b710:	e003      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b72a:	2300      	movs	r3, #0
 800b72c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b730:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b734:	460b      	mov	r3, r1
 800b736:	4313      	orrs	r3, r2
 800b738:	d056      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b744:	d033      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b74a:	d82c      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b74c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b750:	d02f      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b756:	d826      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b758:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b75c:	d02b      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b75e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b762:	d820      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b768:	d012      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b76a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b76e:	d81a      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b770:	2b00      	cmp	r3, #0
 800b772:	d022      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b778:	d115      	bne.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77e:	3308      	adds	r3, #8
 800b780:	2101      	movs	r1, #1
 800b782:	4618      	mov	r0, r3
 800b784:	f002 f8e0 	bl	800d948 <RCCEx_PLL2_Config>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b78e:	e015      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b794:	3328      	adds	r3, #40	; 0x28
 800b796:	2101      	movs	r1, #1
 800b798:	4618      	mov	r0, r3
 800b79a:	f002 f987 	bl	800daac <RCCEx_PLL3_Config>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7a4:	e00a      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7ac:	e006      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7ae:	bf00      	nop
 800b7b0:	e004      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7b2:	bf00      	nop
 800b7b4:	e002      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7b6:	bf00      	nop
 800b7b8:	e000      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10d      	bne.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7c4:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d2:	4a02      	ldr	r2, [pc, #8]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	6513      	str	r3, [r2, #80]	; 0x50
 800b7d8:	e006      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b7da:	bf00      	nop
 800b7dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b7f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b802:	460b      	mov	r3, r1
 800b804:	4313      	orrs	r3, r2
 800b806:	d055      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b814:	d033      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b81a:	d82c      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b820:	d02f      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b826:	d826      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b82c:	d02b      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b82e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b832:	d820      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b838:	d012      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b83a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83e:	d81a      	bhi.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b840:	2b00      	cmp	r3, #0
 800b842:	d022      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b848:	d115      	bne.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84e:	3308      	adds	r3, #8
 800b850:	2101      	movs	r1, #1
 800b852:	4618      	mov	r0, r3
 800b854:	f002 f878 	bl	800d948 <RCCEx_PLL2_Config>
 800b858:	4603      	mov	r3, r0
 800b85a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b85e:	e015      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b864:	3328      	adds	r3, #40	; 0x28
 800b866:	2101      	movs	r1, #1
 800b868:	4618      	mov	r0, r3
 800b86a:	f002 f91f 	bl	800daac <RCCEx_PLL3_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b874:	e00a      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b87c:	e006      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b87e:	bf00      	nop
 800b880:	e004      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b882:	bf00      	nop
 800b884:	e002      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b886:	bf00      	nop
 800b888:	e000      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b88a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b88c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10b      	bne.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b894:	4ba3      	ldr	r3, [pc, #652]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b898:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8a4:	4a9f      	ldr	r2, [pc, #636]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8a6:	430b      	orrs	r3, r1
 800b8a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b8aa:	e003      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b8c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	d037      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8de:	d00e      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e4:	d816      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d018      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b8ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ee:	d111      	bne.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f0:	4b8c      	ldr	r3, [pc, #560]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	4a8b      	ldr	r2, [pc, #556]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b8fc:	e00f      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b902:	3308      	adds	r3, #8
 800b904:	2101      	movs	r1, #1
 800b906:	4618      	mov	r0, r3
 800b908:	f002 f81e 	bl	800d948 <RCCEx_PLL2_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b912:	e004      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b91a:	e000      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b91c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b926:	4b7f      	ldr	r3, [pc, #508]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b934:	4a7b      	ldr	r2, [pc, #492]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b936:	430b      	orrs	r3, r1
 800b938:	6513      	str	r3, [r2, #80]	; 0x50
 800b93a:	e003      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b95a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b95e:	460b      	mov	r3, r1
 800b960:	4313      	orrs	r3, r2
 800b962:	d039      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d81c      	bhi.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b96e:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b974:	0800b9b1 	.word	0x0800b9b1
 800b978:	0800b985 	.word	0x0800b985
 800b97c:	0800b993 	.word	0x0800b993
 800b980:	0800b9b1 	.word	0x0800b9b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b984:	4b67      	ldr	r3, [pc, #412]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	4a66      	ldr	r2, [pc, #408]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b98a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b98e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b990:	e00f      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b996:	3308      	adds	r3, #8
 800b998:	2102      	movs	r1, #2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f001 ffd4 	bl	800d948 <RCCEx_PLL2_Config>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9a6:	e004      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ae:	e000      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10a      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b9ba:	4b5a      	ldr	r3, [pc, #360]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9be:	f023 0103 	bic.w	r1, r3, #3
 800b9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c8:	4a56      	ldr	r2, [pc, #344]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9ca:	430b      	orrs	r3, r1
 800b9cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9ce:	e003      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b9e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	f000 809f 	beq.w	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9fa:	4b4b      	ldr	r3, [pc, #300]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a4a      	ldr	r2, [pc, #296]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba06:	f7f8 fc09 	bl	800421c <HAL_GetTick>
 800ba0a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba0e:	e00b      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba10:	f7f8 fc04 	bl	800421c <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	2b64      	cmp	r3, #100	; 0x64
 800ba1e:	d903      	bls.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba26:	e005      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba28:	4b3f      	ldr	r3, [pc, #252]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0ed      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ba34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d179      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ba3c:	4b39      	ldr	r3, [pc, #228]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba48:	4053      	eors	r3, r2
 800ba4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d015      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba52:	4b34      	ldr	r3, [pc, #208]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba5e:	4b31      	ldr	r3, [pc, #196]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba62:	4a30      	ldr	r2, [pc, #192]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba6a:	4b2e      	ldr	r3, [pc, #184]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6e:	4a2d      	ldr	r2, [pc, #180]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba76:	4a2b      	ldr	r2, [pc, #172]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba8a:	d118      	bne.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba8c:	f7f8 fbc6 	bl	800421c <HAL_GetTick>
 800ba90:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba94:	e00d      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba96:	f7f8 fbc1 	bl	800421c <HAL_GetTick>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800baa0:	1ad2      	subs	r2, r2, r3
 800baa2:	f241 3388 	movw	r3, #5000	; 0x1388
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d903      	bls.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bab0:	e005      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0eb      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800babe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d129      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bad6:	d10e      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bad8:	4b12      	ldr	r3, [pc, #72]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bae8:	091a      	lsrs	r2, r3, #4
 800baea:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800baec:	4013      	ands	r3, r2
 800baee:	4a0d      	ldr	r2, [pc, #52]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baf0:	430b      	orrs	r3, r1
 800baf2:	6113      	str	r3, [r2, #16]
 800baf4:	e005      	b.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800baf6:	4b0b      	ldr	r3, [pc, #44]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	4a0a      	ldr	r2, [pc, #40]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bafc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb00:	6113      	str	r3, [r2, #16]
 800bb02:	4b08      	ldr	r3, [pc, #32]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb12:	4a04      	ldr	r2, [pc, #16]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb14:	430b      	orrs	r3, r1
 800bb16:	6713      	str	r3, [r2, #112]	; 0x70
 800bb18:	e00e      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bb22:	e009      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bb24:	58024400 	.word	0x58024400
 800bb28:	58024800 	.word	0x58024800
 800bb2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f002 0301 	and.w	r3, r2, #1
 800bb44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	f000 8089 	beq.w	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb60:	2b28      	cmp	r3, #40	; 0x28
 800bb62:	d86b      	bhi.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bb64:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6a:	bf00      	nop
 800bb6c:	0800bc45 	.word	0x0800bc45
 800bb70:	0800bc3d 	.word	0x0800bc3d
 800bb74:	0800bc3d 	.word	0x0800bc3d
 800bb78:	0800bc3d 	.word	0x0800bc3d
 800bb7c:	0800bc3d 	.word	0x0800bc3d
 800bb80:	0800bc3d 	.word	0x0800bc3d
 800bb84:	0800bc3d 	.word	0x0800bc3d
 800bb88:	0800bc3d 	.word	0x0800bc3d
 800bb8c:	0800bc11 	.word	0x0800bc11
 800bb90:	0800bc3d 	.word	0x0800bc3d
 800bb94:	0800bc3d 	.word	0x0800bc3d
 800bb98:	0800bc3d 	.word	0x0800bc3d
 800bb9c:	0800bc3d 	.word	0x0800bc3d
 800bba0:	0800bc3d 	.word	0x0800bc3d
 800bba4:	0800bc3d 	.word	0x0800bc3d
 800bba8:	0800bc3d 	.word	0x0800bc3d
 800bbac:	0800bc27 	.word	0x0800bc27
 800bbb0:	0800bc3d 	.word	0x0800bc3d
 800bbb4:	0800bc3d 	.word	0x0800bc3d
 800bbb8:	0800bc3d 	.word	0x0800bc3d
 800bbbc:	0800bc3d 	.word	0x0800bc3d
 800bbc0:	0800bc3d 	.word	0x0800bc3d
 800bbc4:	0800bc3d 	.word	0x0800bc3d
 800bbc8:	0800bc3d 	.word	0x0800bc3d
 800bbcc:	0800bc45 	.word	0x0800bc45
 800bbd0:	0800bc3d 	.word	0x0800bc3d
 800bbd4:	0800bc3d 	.word	0x0800bc3d
 800bbd8:	0800bc3d 	.word	0x0800bc3d
 800bbdc:	0800bc3d 	.word	0x0800bc3d
 800bbe0:	0800bc3d 	.word	0x0800bc3d
 800bbe4:	0800bc3d 	.word	0x0800bc3d
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bc45 	.word	0x0800bc45
 800bbf0:	0800bc3d 	.word	0x0800bc3d
 800bbf4:	0800bc3d 	.word	0x0800bc3d
 800bbf8:	0800bc3d 	.word	0x0800bc3d
 800bbfc:	0800bc3d 	.word	0x0800bc3d
 800bc00:	0800bc3d 	.word	0x0800bc3d
 800bc04:	0800bc3d 	.word	0x0800bc3d
 800bc08:	0800bc3d 	.word	0x0800bc3d
 800bc0c:	0800bc45 	.word	0x0800bc45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc14:	3308      	adds	r3, #8
 800bc16:	2101      	movs	r1, #1
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f001 fe95 	bl	800d948 <RCCEx_PLL2_Config>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc24:	e00f      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2a:	3328      	adds	r3, #40	; 0x28
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 ff3c 	bl	800daac <RCCEx_PLL3_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc3a:	e004      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc42:	e000      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bc44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc4e:	4bbf      	ldr	r3, [pc, #764]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc5c:	4abb      	ldr	r2, [pc, #748]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc5e:	430b      	orrs	r3, r1
 800bc60:	6553      	str	r3, [r2, #84]	; 0x54
 800bc62:	e003      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	f002 0302 	and.w	r3, r2, #2
 800bc78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bc82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bc86:	460b      	mov	r3, r1
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	d041      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d824      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bc96:	a201      	add	r2, pc, #4	; (adr r2, 800bc9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bcb5 	.word	0x0800bcb5
 800bca4:	0800bccb 	.word	0x0800bccb
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bce9 	.word	0x0800bce9
 800bcb0:	0800bce9 	.word	0x0800bce9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2101      	movs	r1, #1
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fe43 	bl	800d948 <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcc8:	e00f      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	3328      	adds	r3, #40	; 0x28
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 feea 	bl	800daac <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcde:	e004      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bce6:	e000      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bcf2:	4b96      	ldr	r3, [pc, #600]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf6:	f023 0107 	bic.w	r1, r3, #7
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd00:	4a92      	ldr	r2, [pc, #584]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd02:	430b      	orrs	r3, r1
 800bd04:	6553      	str	r3, [r2, #84]	; 0x54
 800bd06:	e003      	b.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f002 0304 	and.w	r3, r2, #4
 800bd1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	d044      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd38:	2b05      	cmp	r3, #5
 800bd3a:	d825      	bhi.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800bd91 	.word	0x0800bd91
 800bd48:	0800bd5d 	.word	0x0800bd5d
 800bd4c:	0800bd73 	.word	0x0800bd73
 800bd50:	0800bd91 	.word	0x0800bd91
 800bd54:	0800bd91 	.word	0x0800bd91
 800bd58:	0800bd91 	.word	0x0800bd91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd60:	3308      	adds	r3, #8
 800bd62:	2101      	movs	r1, #1
 800bd64:	4618      	mov	r0, r3
 800bd66:	f001 fdef 	bl	800d948 <RCCEx_PLL2_Config>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd70:	e00f      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd76:	3328      	adds	r3, #40	; 0x28
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 fe96 	bl	800daac <RCCEx_PLL3_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd86:	e004      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd8e:	e000      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bd90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10b      	bne.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd9a:	4b6c      	ldr	r3, [pc, #432]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9e:	f023 0107 	bic.w	r1, r3, #7
 800bda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdaa:	4a68      	ldr	r2, [pc, #416]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdac:	430b      	orrs	r3, r1
 800bdae:	6593      	str	r3, [r2, #88]	; 0x58
 800bdb0:	e003      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	f002 0320 	and.w	r3, r2, #32
 800bdc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	d055      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bde6:	d033      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bde8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdec:	d82c      	bhi.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf2:	d02f      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bdf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf8:	d826      	bhi.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bdfe:	d02b      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800be00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be04:	d820      	bhi.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0a:	d012      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800be0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be10:	d81a      	bhi.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d022      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800be16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be1a:	d115      	bne.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be20:	3308      	adds	r3, #8
 800be22:	2100      	movs	r1, #0
 800be24:	4618      	mov	r0, r3
 800be26:	f001 fd8f 	bl	800d948 <RCCEx_PLL2_Config>
 800be2a:	4603      	mov	r3, r0
 800be2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be30:	e015      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be36:	3328      	adds	r3, #40	; 0x28
 800be38:	2102      	movs	r1, #2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 fe36 	bl	800daac <RCCEx_PLL3_Config>
 800be40:	4603      	mov	r3, r0
 800be42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be46:	e00a      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be4e:	e006      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be50:	bf00      	nop
 800be52:	e004      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be54:	bf00      	nop
 800be56:	e002      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be58:	bf00      	nop
 800be5a:	e000      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10b      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be66:	4b39      	ldr	r3, [pc, #228]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800be6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be76:	4a35      	ldr	r2, [pc, #212]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be78:	430b      	orrs	r3, r1
 800be7a:	6553      	str	r3, [r2, #84]	; 0x54
 800be7c:	e003      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800be92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be96:	2300      	movs	r3, #0
 800be98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800be9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bea0:	460b      	mov	r3, r1
 800bea2:	4313      	orrs	r3, r2
 800bea4:	d058      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800beb2:	d033      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800beb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800beb8:	d82c      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800beba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bebe:	d02f      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec4:	d826      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beca:	d02b      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800becc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed0:	d820      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bed6:	d012      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bedc:	d81a      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d022      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bee6:	d115      	bne.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beec:	3308      	adds	r3, #8
 800beee:	2100      	movs	r1, #0
 800bef0:	4618      	mov	r0, r3
 800bef2:	f001 fd29 	bl	800d948 <RCCEx_PLL2_Config>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800befc:	e015      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800befe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf02:	3328      	adds	r3, #40	; 0x28
 800bf04:	2102      	movs	r1, #2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 fdd0 	bl	800daac <RCCEx_PLL3_Config>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf12:	e00a      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf1a:	e006      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf1c:	bf00      	nop
 800bf1e:	e004      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf20:	bf00      	nop
 800bf22:	e002      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf24:	bf00      	nop
 800bf26:	e000      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10e      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf32:	4b06      	ldr	r3, [pc, #24]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf36:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf42:	4a02      	ldr	r2, [pc, #8]	; (800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf44:	430b      	orrs	r3, r1
 800bf46:	6593      	str	r3, [r2, #88]	; 0x58
 800bf48:	e006      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bf4a:	bf00      	nop
 800bf4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bf64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bf72:	460b      	mov	r3, r1
 800bf74:	4313      	orrs	r3, r2
 800bf76:	d055      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf84:	d033      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bf86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf8a:	d82c      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf90:	d02f      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bf92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf96:	d826      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bf9c:	d02b      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bf9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfa2:	d820      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfa8:	d012      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bfaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfae:	d81a      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d022      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bfb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfb8:	d115      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f001 fcc0 	bl	800d948 <RCCEx_PLL2_Config>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfce:	e015      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd4:	3328      	adds	r3, #40	; 0x28
 800bfd6:	2102      	movs	r1, #2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f001 fd67 	bl	800daac <RCCEx_PLL3_Config>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfe4:	e00a      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfec:	e006      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bfee:	bf00      	nop
 800bff0:	e004      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bff2:	bf00      	nop
 800bff4:	e002      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bff6:	bf00      	nop
 800bff8:	e000      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10b      	bne.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c004:	4ba1      	ldr	r3, [pc, #644]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c008:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c014:	4a9d      	ldr	r2, [pc, #628]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c016:	430b      	orrs	r3, r1
 800c018:	6593      	str	r3, [r2, #88]	; 0x58
 800c01a:	e003      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c01c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	f002 0308 	and.w	r3, r2, #8
 800c030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c034:	2300      	movs	r3, #0
 800c036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c03a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c03e:	460b      	mov	r3, r1
 800c040:	4313      	orrs	r3, r2
 800c042:	d01e      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c04c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c050:	d10c      	bne.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c056:	3328      	adds	r3, #40	; 0x28
 800c058:	2102      	movs	r1, #2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f001 fd26 	bl	800daac <RCCEx_PLL3_Config>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d002      	beq.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c06c:	4b87      	ldr	r3, [pc, #540]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c070:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c07c:	4a83      	ldr	r2, [pc, #524]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c07e:	430b      	orrs	r3, r1
 800c080:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f002 0310 	and.w	r3, r2, #16
 800c08e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c092:	2300      	movs	r3, #0
 800c094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c098:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c09c:	460b      	mov	r3, r1
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	d01e      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ae:	d10c      	bne.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b4:	3328      	adds	r3, #40	; 0x28
 800c0b6:	2102      	movs	r1, #2
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f001 fcf7 	bl	800daac <RCCEx_PLL3_Config>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0ca:	4b70      	ldr	r3, [pc, #448]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0da:	4a6c      	ldr	r2, [pc, #432]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c0ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	d03e      	beq.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c10c:	d022      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c112:	d81b      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c11c:	d00b      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c11e:	e015      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c124:	3308      	adds	r3, #8
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f001 fc0d 	bl	800d948 <RCCEx_PLL2_Config>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c134:	e00f      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13a:	3328      	adds	r3, #40	; 0x28
 800c13c:	2102      	movs	r1, #2
 800c13e:	4618      	mov	r0, r3
 800c140:	f001 fcb4 	bl	800daac <RCCEx_PLL3_Config>
 800c144:	4603      	mov	r3, r0
 800c146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c14a:	e004      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c152:	e000      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10b      	bne.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c15e:	4b4b      	ldr	r3, [pc, #300]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c162:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c16e:	4a47      	ldr	r2, [pc, #284]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c170:	430b      	orrs	r3, r1
 800c172:	6593      	str	r3, [r2, #88]	; 0x58
 800c174:	e003      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c17a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c18a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c18c:	2300      	movs	r3, #0
 800c18e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c190:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c194:	460b      	mov	r3, r1
 800c196:	4313      	orrs	r3, r2
 800c198:	d03b      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1a6:	d01f      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c1a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1ac:	d818      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1b2:	d003      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c1b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1b8:	d007      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c1ba:	e011      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1bc:	4b33      	ldr	r3, [pc, #204]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c0:	4a32      	ldr	r2, [pc, #200]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1c8:	e00f      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ce:	3328      	adds	r3, #40	; 0x28
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 fc6a 	bl	800daac <RCCEx_PLL3_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1de:	e004      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1e6:	e000      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10b      	bne.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1f2:	4b26      	ldr	r3, [pc, #152]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c202:	4a22      	ldr	r2, [pc, #136]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c204:	430b      	orrs	r3, r1
 800c206:	6553      	str	r3, [r2, #84]	; 0x54
 800c208:	e003      	b.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c20e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c21e:	673b      	str	r3, [r7, #112]	; 0x70
 800c220:	2300      	movs	r3, #0
 800c222:	677b      	str	r3, [r7, #116]	; 0x74
 800c224:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c228:	460b      	mov	r3, r1
 800c22a:	4313      	orrs	r3, r2
 800c22c:	d034      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c23c:	d007      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c23e:	e011      	b.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c240:	4b12      	ldr	r3, [pc, #72]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	4a11      	ldr	r2, [pc, #68]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c24a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c24c:	e00e      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c252:	3308      	adds	r3, #8
 800c254:	2102      	movs	r1, #2
 800c256:	4618      	mov	r0, r3
 800c258:	f001 fb76 	bl	800d948 <RCCEx_PLL2_Config>
 800c25c:	4603      	mov	r3, r0
 800c25e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c262:	e003      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c26a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c26c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10d      	bne.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c282:	4a02      	ldr	r2, [pc, #8]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c284:	430b      	orrs	r3, r1
 800c286:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c288:	e006      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c28a:	bf00      	nop
 800c28c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c2a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	d00c      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b8:	3328      	adds	r3, #40	; 0x28
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 fbf5 	bl	800daac <RCCEx_PLL3_Config>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c2da:	663b      	str	r3, [r7, #96]	; 0x60
 800c2dc:	2300      	movs	r3, #0
 800c2de:	667b      	str	r3, [r7, #100]	; 0x64
 800c2e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	d038      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2f6:	d018      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c2f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2fc:	d811      	bhi.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c302:	d014      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c308:	d80b      	bhi.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d011      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c312:	d106      	bne.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c314:	4bc3      	ldr	r3, [pc, #780]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	4ac2      	ldr	r2, [pc, #776]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c31e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c320:	e008      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c328:	e004      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c32a:	bf00      	nop
 800c32c:	e002      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c32e:	bf00      	nop
 800c330:	e000      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c332:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10b      	bne.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c33c:	4bb9      	ldr	r3, [pc, #740]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c340:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c34c:	4ab5      	ldr	r2, [pc, #724]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c34e:	430b      	orrs	r3, r1
 800c350:	6553      	str	r3, [r2, #84]	; 0x54
 800c352:	e003      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c368:	65bb      	str	r3, [r7, #88]	; 0x58
 800c36a:	2300      	movs	r3, #0
 800c36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c36e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c372:	460b      	mov	r3, r1
 800c374:	4313      	orrs	r3, r2
 800c376:	d009      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c378:	4baa      	ldr	r3, [pc, #680]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c37c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c386:	4aa7      	ldr	r2, [pc, #668]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c388:	430b      	orrs	r3, r1
 800c38a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c398:	653b      	str	r3, [r7, #80]	; 0x50
 800c39a:	2300      	movs	r3, #0
 800c39c:	657b      	str	r3, [r7, #84]	; 0x54
 800c39e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	d00a      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c3a8:	4b9e      	ldr	r3, [pc, #632]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c3b8:	4a9a      	ldr	r2, [pc, #616]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3ba:	430b      	orrs	r3, r1
 800c3bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c3ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	d009      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3da:	4b92      	ldr	r3, [pc, #584]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e8:	4a8e      	ldr	r2, [pc, #568]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c3fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c400:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c404:	460b      	mov	r3, r1
 800c406:	4313      	orrs	r3, r2
 800c408:	d00e      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c40a:	4b86      	ldr	r3, [pc, #536]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	4a85      	ldr	r2, [pc, #532]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c414:	6113      	str	r3, [r2, #16]
 800c416:	4b83      	ldr	r3, [pc, #524]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c418:	6919      	ldr	r1, [r3, #16]
 800c41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c41e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c422:	4a80      	ldr	r2, [pc, #512]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c424:	430b      	orrs	r3, r1
 800c426:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c434:	63bb      	str	r3, [r7, #56]	; 0x38
 800c436:	2300      	movs	r3, #0
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c43e:	460b      	mov	r3, r1
 800c440:	4313      	orrs	r3, r2
 800c442:	d009      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c444:	4b77      	ldr	r3, [pc, #476]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c448:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c452:	4a74      	ldr	r2, [pc, #464]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c454:	430b      	orrs	r3, r1
 800c456:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c464:	633b      	str	r3, [r7, #48]	; 0x30
 800c466:	2300      	movs	r3, #0
 800c468:	637b      	str	r3, [r7, #52]	; 0x34
 800c46a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c46e:	460b      	mov	r3, r1
 800c470:	4313      	orrs	r3, r2
 800c472:	d00a      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c474:	4b6b      	ldr	r3, [pc, #428]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c478:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c484:	4a67      	ldr	r2, [pc, #412]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c486:	430b      	orrs	r3, r1
 800c488:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	2100      	movs	r1, #0
 800c494:	62b9      	str	r1, [r7, #40]	; 0x28
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c49c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	d011      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 fa4a 	bl	800d948 <RCCEx_PLL2_Config>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	6239      	str	r1, [r7, #32]
 800c4d6:	f003 0302 	and.w	r3, r3, #2
 800c4da:	627b      	str	r3, [r7, #36]	; 0x24
 800c4dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	d011      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f001 fa2a 	bl	800d948 <RCCEx_PLL2_Config>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c512:	2100      	movs	r1, #0
 800c514:	61b9      	str	r1, [r7, #24]
 800c516:	f003 0304 	and.w	r3, r3, #4
 800c51a:	61fb      	str	r3, [r7, #28]
 800c51c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c520:	460b      	mov	r3, r1
 800c522:	4313      	orrs	r3, r2
 800c524:	d011      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c52a:	3308      	adds	r3, #8
 800c52c:	2102      	movs	r1, #2
 800c52e:	4618      	mov	r0, r3
 800c530:	f001 fa0a 	bl	800d948 <RCCEx_PLL2_Config>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	2100      	movs	r1, #0
 800c554:	6139      	str	r1, [r7, #16]
 800c556:	f003 0308 	and.w	r3, r3, #8
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c560:	460b      	mov	r3, r1
 800c562:	4313      	orrs	r3, r2
 800c564:	d011      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c56a:	3328      	adds	r3, #40	; 0x28
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 fa9c 	bl	800daac <RCCEx_PLL3_Config>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c57a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	2100      	movs	r1, #0
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	f003 0310 	and.w	r3, r3, #16
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	d011      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5aa:	3328      	adds	r3, #40	; 0x28
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f001 fa7c 	bl	800daac <RCCEx_PLL3_Config>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	6039      	str	r1, [r7, #0]
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	607b      	str	r3, [r7, #4]
 800c5dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	d011      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ea:	3328      	adds	r3, #40	; 0x28
 800c5ec:	2102      	movs	r1, #2
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f001 fa5c 	bl	800daac <RCCEx_PLL3_Config>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d003      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c60a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	e000      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
}
 800c618:	4618      	mov	r0, r3
 800c61a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c61e:	46bd      	mov	sp, r7
 800c620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c624:	58024400 	.word	0x58024400

0800c628 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b090      	sub	sp, #64	; 0x40
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c636:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c63a:	430b      	orrs	r3, r1
 800c63c:	f040 8094 	bne.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c640:	4b9e      	ldr	r3, [pc, #632]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c644:	f003 0307 	and.w	r3, r3, #7
 800c648:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	2b04      	cmp	r3, #4
 800c64e:	f200 8087 	bhi.w	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c652:	a201      	add	r2, pc, #4	; (adr r2, 800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c658:	0800c66d 	.word	0x0800c66d
 800c65c:	0800c695 	.word	0x0800c695
 800c660:	0800c6bd 	.word	0x0800c6bd
 800c664:	0800c759 	.word	0x0800c759
 800c668:	0800c6e5 	.word	0x0800c6e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c66c:	4b93      	ldr	r3, [pc, #588]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c678:	d108      	bne.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c67a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c67e:	4618      	mov	r0, r3
 800c680:	f001 f810 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c688:	f000 bd45 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c690:	f000 bd41 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c694:	4b89      	ldr	r3, [pc, #548]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c69c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6a0:	d108      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a2:	f107 0318 	add.w	r3, r7, #24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fd54 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b0:	f000 bd31 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b8:	f000 bd2d 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6bc:	4b7f      	ldr	r3, [pc, #508]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c8:	d108      	bne.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ca:	f107 030c 	add.w	r3, r7, #12
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fe94 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d8:	f000 bd1d 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e0:	f000 bd19 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6e4:	4b75      	ldr	r3, [pc, #468]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6ee:	4b73      	ldr	r3, [pc, #460]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0304 	and.w	r3, r3, #4
 800c6f6:	2b04      	cmp	r3, #4
 800c6f8:	d10c      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d109      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c700:	4b6e      	ldr	r3, [pc, #440]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	08db      	lsrs	r3, r3, #3
 800c706:	f003 0303 	and.w	r3, r3, #3
 800c70a:	4a6d      	ldr	r2, [pc, #436]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c70c:	fa22 f303 	lsr.w	r3, r2, r3
 800c710:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c712:	e01f      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c714:	4b69      	ldr	r3, [pc, #420]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c720:	d106      	bne.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c728:	d102      	bne.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c72a:	4b66      	ldr	r3, [pc, #408]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72e:	e011      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c730:	4b62      	ldr	r3, [pc, #392]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c73c:	d106      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c744:	d102      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c746:	4b60      	ldr	r3, [pc, #384]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74a:	e003      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c750:	f000 bce1 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c754:	f000 bcdf 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c758:	4b5c      	ldr	r3, [pc, #368]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75c:	f000 bcdb 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c764:	f000 bcd7 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c76c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c770:	430b      	orrs	r3, r1
 800c772:	f040 80ad 	bne.w	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c776:	4b51      	ldr	r3, [pc, #324]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c77e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c786:	d056      	beq.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78e:	f200 8090 	bhi.w	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	2bc0      	cmp	r3, #192	; 0xc0
 800c796:	f000 8088 	beq.w	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	2bc0      	cmp	r3, #192	; 0xc0
 800c79e:	f200 8088 	bhi.w	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	2b80      	cmp	r3, #128	; 0x80
 800c7a6:	d032      	beq.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	2b80      	cmp	r3, #128	; 0x80
 800c7ac:	f200 8081 	bhi.w	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	2b40      	cmp	r3, #64	; 0x40
 800c7ba:	d014      	beq.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c7bc:	e079      	b.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7be:	4b3f      	ldr	r3, [pc, #252]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ca:	d108      	bne.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 ff67 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7da:	f000 bc9c 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e2:	f000 bc98 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7e6:	4b35      	ldr	r3, [pc, #212]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7f2:	d108      	bne.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f4:	f107 0318 	add.w	r3, r7, #24
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 fcab 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c802:	f000 bc88 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80a:	f000 bc84 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c80e:	4b2b      	ldr	r3, [pc, #172]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c81a:	d108      	bne.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c81c:	f107 030c 	add.w	r3, r7, #12
 800c820:	4618      	mov	r0, r3
 800c822:	f000 fdeb 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c82a:	f000 bc74 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c832:	f000 bc70 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c836:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c83e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c840:	4b1e      	ldr	r3, [pc, #120]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d10c      	bne.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d109      	bne.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c852:	4b1a      	ldr	r3, [pc, #104]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	08db      	lsrs	r3, r3, #3
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	4a18      	ldr	r2, [pc, #96]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c85e:	fa22 f303 	lsr.w	r3, r2, r3
 800c862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c864:	e01f      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c866:	4b15      	ldr	r3, [pc, #84]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c872:	d106      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c87a:	d102      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c87c:	4b11      	ldr	r3, [pc, #68]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c880:	e011      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c882:	4b0e      	ldr	r3, [pc, #56]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c88a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c88e:	d106      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c896:	d102      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c898:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c89c:	e003      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8a2:	f000 bc38 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8a6:	f000 bc36 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8aa:	4b08      	ldr	r3, [pc, #32]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ae:	f000 bc32 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b6:	f000 bc2e 	b.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8ba:	bf00      	nop
 800c8bc:	58024400 	.word	0x58024400
 800c8c0:	03d09000 	.word	0x03d09000
 800c8c4:	003d0900 	.word	0x003d0900
 800c8c8:	017d7840 	.word	0x017d7840
 800c8cc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	f040 809c 	bne.w	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c8de:	4b9e      	ldr	r3, [pc, #632]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c8e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8ee:	d054      	beq.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8f6:	f200 808b 	bhi.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c900:	f000 8083 	beq.w	800ca0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c90a:	f200 8081 	bhi.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c914:	d02f      	beq.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c91c:	d878      	bhi.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	2b00      	cmp	r3, #0
 800c922:	d004      	beq.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c92a:	d012      	beq.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c92c:	e070      	b.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c92e:	4b8a      	ldr	r3, [pc, #552]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c93a:	d107      	bne.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c93c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c940:	4618      	mov	r0, r3
 800c942:	f000 feaf 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c94a:	e3e4      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c950:	e3e1      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c952:	4b81      	ldr	r3, [pc, #516]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c95a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c95e:	d107      	bne.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c960:	f107 0318 	add.w	r3, r7, #24
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fbf5 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96e:	e3d2      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c974:	e3cf      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c976:	4b78      	ldr	r3, [pc, #480]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c982:	d107      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c984:	f107 030c 	add.w	r3, r7, #12
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fd37 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c992:	e3c0      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c998:	e3bd      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c99a:	4b6f      	ldr	r3, [pc, #444]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c99e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9a4:	4b6c      	ldr	r3, [pc, #432]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b04      	cmp	r3, #4
 800c9ae:	d10c      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9b6:	4b68      	ldr	r3, [pc, #416]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	08db      	lsrs	r3, r3, #3
 800c9bc:	f003 0303 	and.w	r3, r3, #3
 800c9c0:	4a66      	ldr	r2, [pc, #408]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9c8:	e01e      	b.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9ca:	4b63      	ldr	r3, [pc, #396]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d6:	d106      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9de:	d102      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9e0:	4b5f      	ldr	r3, [pc, #380]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9e4:	e010      	b.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9e6:	4b5c      	ldr	r3, [pc, #368]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f2:	d106      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9fa:	d102      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9fc:	4b59      	ldr	r3, [pc, #356]	; (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca00:	e002      	b.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca06:	e386      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca08:	e385      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca0a:	4b57      	ldr	r3, [pc, #348]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca0e:	e382      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca14:	e37f      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ca16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ca1e:	430b      	orrs	r3, r1
 800ca20:	f040 80a7 	bne.w	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ca24:	4b4c      	ldr	r3, [pc, #304]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca28:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ca2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca34:	d055      	beq.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca3c:	f200 8096 	bhi.w	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca46:	f000 8084 	beq.w	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca50:	f200 808c 	bhi.w	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca5a:	d030      	beq.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca62:	f200 8083 	bhi.w	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca72:	d012      	beq.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ca74:	e07a      	b.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca76:	4b38      	ldr	r3, [pc, #224]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca82:	d107      	bne.n	800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 fe0b 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca92:	e340      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca98:	e33d      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca9a:	4b2f      	ldr	r3, [pc, #188]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caa6:	d107      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa8:	f107 0318 	add.w	r3, r7, #24
 800caac:	4618      	mov	r0, r3
 800caae:	f000 fb51 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab6:	e32e      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cabc:	e32b      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cabe:	4b26      	ldr	r3, [pc, #152]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caca:	d107      	bne.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cacc:	f107 030c 	add.w	r3, r7, #12
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 fc93 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cada:	e31c      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cadc:	2300      	movs	r3, #0
 800cade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cae0:	e319      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cae2:	4b1d      	ldr	r3, [pc, #116]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caec:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0304 	and.w	r3, r3, #4
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d10c      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800caf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d109      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cafe:	4b16      	ldr	r3, [pc, #88]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	08db      	lsrs	r3, r3, #3
 800cb04:	f003 0303 	and.w	r3, r3, #3
 800cb08:	4a14      	ldr	r2, [pc, #80]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cb0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb10:	e01e      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb12:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1e:	d106      	bne.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb26:	d102      	bne.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb28:	4b0d      	ldr	r3, [pc, #52]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb2c:	e010      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb2e:	4b0a      	ldr	r3, [pc, #40]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb3a:	d106      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb42:	d102      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb44:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb48:	e002      	b.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb4e:	e2e2      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb50:	e2e1      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb52:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb56:	e2de      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb58:	58024400 	.word	0x58024400
 800cb5c:	03d09000 	.word	0x03d09000
 800cb60:	003d0900 	.word	0x003d0900
 800cb64:	017d7840 	.word	0x017d7840
 800cb68:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb70:	e2d1      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb76:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cb7a:	430b      	orrs	r3, r1
 800cb7c:	f040 809c 	bne.w	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cb80:	4b93      	ldr	r3, [pc, #588]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cb88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb90:	d054      	beq.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb98:	f200 808b 	bhi.w	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cba2:	f000 8083 	beq.w	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbac:	f200 8081 	bhi.w	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbb6:	d02f      	beq.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbbe:	d878      	bhi.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d004      	beq.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbcc:	d012      	beq.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cbce:	e070      	b.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbd0:	4b7f      	ldr	r3, [pc, #508]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbdc:	d107      	bne.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 fd5e 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbec:	e293      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf2:	e290      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbf4:	4b76      	ldr	r3, [pc, #472]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc00:	d107      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc02:	f107 0318 	add.w	r3, r7, #24
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 faa4 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc10:	e281      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc16:	e27e      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc18:	4b6d      	ldr	r3, [pc, #436]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc24:	d107      	bne.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 fbe6 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc34:	e26f      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3a:	e26c      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc3c:	4b64      	ldr	r3, [pc, #400]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc46:	4b62      	ldr	r3, [pc, #392]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f003 0304 	and.w	r3, r3, #4
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d10c      	bne.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d109      	bne.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc58:	4b5d      	ldr	r3, [pc, #372]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	08db      	lsrs	r3, r3, #3
 800cc5e:	f003 0303 	and.w	r3, r3, #3
 800cc62:	4a5c      	ldr	r2, [pc, #368]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc64:	fa22 f303 	lsr.w	r3, r2, r3
 800cc68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc6a:	e01e      	b.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc6c:	4b58      	ldr	r3, [pc, #352]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc78:	d106      	bne.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc80:	d102      	bne.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc82:	4b55      	ldr	r3, [pc, #340]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc86:	e010      	b.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc88:	4b51      	ldr	r3, [pc, #324]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc94:	d106      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc9c:	d102      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc9e:	4b4f      	ldr	r3, [pc, #316]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca2:	e002      	b.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cca8:	e235      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ccaa:	e234      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccac:	4b4c      	ldr	r3, [pc, #304]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ccae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb0:	e231      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb6:	e22e      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ccb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccbc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ccc0:	430b      	orrs	r3, r1
 800ccc2:	f040 808f 	bne.w	800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ccc6:	4b42      	ldr	r3, [pc, #264]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ccce:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccd6:	d06b      	beq.n	800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccde:	d874      	bhi.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cce6:	d056      	beq.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccee:	d86c      	bhi.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccf6:	d03b      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccfe:	d864      	bhi.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd06:	d021      	beq.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd0e:	d85c      	bhi.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d004      	beq.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd1c:	d004      	beq.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cd1e:	e054      	b.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd20:	f7fe fa0a 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 800cd24:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd26:	e1f6      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd28:	4b29      	ldr	r3, [pc, #164]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd34:	d107      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd36:	f107 0318 	add.w	r3, r7, #24
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 fa0a 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd44:	e1e7      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4a:	e1e4      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd4c:	4b20      	ldr	r3, [pc, #128]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd58:	d107      	bne.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd5a:	f107 030c 	add.w	r3, r7, #12
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 fb4c 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd68:	e1d5      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd6e:	e1d2      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd70:	4b17      	ldr	r3, [pc, #92]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	2b04      	cmp	r3, #4
 800cd7a:	d109      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd7c:	4b14      	ldr	r3, [pc, #80]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	08db      	lsrs	r3, r3, #3
 800cd82:	f003 0303 	and.w	r3, r3, #3
 800cd86:	4a13      	ldr	r2, [pc, #76]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cd88:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8e:	e1c2      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd94:	e1bf      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd96:	4b0e      	ldr	r3, [pc, #56]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda2:	d102      	bne.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cda4:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda8:	e1b5      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdae:	e1b2      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdb0:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdbc:	d102      	bne.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cdbe:	4b07      	ldr	r3, [pc, #28]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc2:	e1a8      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc8:	e1a5      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdce:	e1a2      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdd0:	58024400 	.word	0x58024400
 800cdd4:	03d09000 	.word	0x03d09000
 800cdd8:	003d0900 	.word	0x003d0900
 800cddc:	017d7840 	.word	0x017d7840
 800cde0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cde4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cdec:	430b      	orrs	r3, r1
 800cdee:	d173      	bne.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cdf0:	4b9c      	ldr	r3, [pc, #624]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cdf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce00:	d02f      	beq.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce08:	d863      	bhi.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d004      	beq.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce16:	d012      	beq.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ce18:	e05b      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce1a:	4b92      	ldr	r3, [pc, #584]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce26:	d107      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce28:	f107 0318 	add.w	r3, r7, #24
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 f991 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce36:	e16e      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3c:	e16b      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce3e:	4b89      	ldr	r3, [pc, #548]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce4a:	d107      	bne.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce4c:	f107 030c 	add.w	r3, r7, #12
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 fad3 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce5a:	e15c      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce60:	e159      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce62:	4b80      	ldr	r3, [pc, #512]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce6c:	4b7d      	ldr	r3, [pc, #500]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 0304 	and.w	r3, r3, #4
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	d10c      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ce78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d109      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce7e:	4b79      	ldr	r3, [pc, #484]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	08db      	lsrs	r3, r3, #3
 800ce84:	f003 0303 	and.w	r3, r3, #3
 800ce88:	4a77      	ldr	r2, [pc, #476]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ce8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce90:	e01e      	b.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce92:	4b74      	ldr	r3, [pc, #464]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce9e:	d106      	bne.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cea6:	d102      	bne.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cea8:	4b70      	ldr	r3, [pc, #448]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceac:	e010      	b.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ceae:	4b6d      	ldr	r3, [pc, #436]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceba:	d106      	bne.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cec2:	d102      	bne.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cec4:	4b6a      	ldr	r3, [pc, #424]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cec8:	e002      	b.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cece:	e122      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ced0:	e121      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced6:	e11e      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ced8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cedc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cee0:	430b      	orrs	r3, r1
 800cee2:	d133      	bne.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cee4:	4b5f      	ldr	r3, [pc, #380]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d004      	beq.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cefa:	d012      	beq.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cefc:	e023      	b.n	800cf46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cefe:	4b59      	ldr	r3, [pc, #356]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf0a:	d107      	bne.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fbc7 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf1a:	e0fc      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf20:	e0f9      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf22:	4b50      	ldr	r3, [pc, #320]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf2e:	d107      	bne.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf30:	f107 0318 	add.w	r3, r7, #24
 800cf34:	4618      	mov	r0, r3
 800cf36:	f000 f90d 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf3e:	e0ea      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf44:	e0e7      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4a:	e0e4      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cf4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf50:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cf54:	430b      	orrs	r3, r1
 800cf56:	f040 808d 	bne.w	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf5a:	4b42      	ldr	r3, [pc, #264]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cf62:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf6a:	d06b      	beq.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf72:	d874      	bhi.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7a:	d056      	beq.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf82:	d86c      	bhi.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf8a:	d03b      	beq.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf92:	d864      	bhi.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9a:	d021      	beq.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa2:	d85c      	bhi.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d004      	beq.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfb0:	d004      	beq.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cfb2:	e054      	b.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cfb4:	f000 f8b8 	bl	800d128 <HAL_RCCEx_GetD3PCLK1Freq>
 800cfb8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfba:	e0ac      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfbc:	4b29      	ldr	r3, [pc, #164]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfc8:	d107      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfca:	f107 0318 	add.w	r3, r7, #24
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 f8c0 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfd8:	e09d      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfde:	e09a      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfe0:	4b20      	ldr	r3, [pc, #128]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfec:	d107      	bne.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfee:	f107 030c 	add.w	r3, r7, #12
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 fa02 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cffc:	e08b      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d002:	e088      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d004:	4b17      	ldr	r3, [pc, #92]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0304 	and.w	r3, r3, #4
 800d00c:	2b04      	cmp	r3, #4
 800d00e:	d109      	bne.n	800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d010:	4b14      	ldr	r3, [pc, #80]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	08db      	lsrs	r3, r3, #3
 800d016:	f003 0303 	and.w	r3, r3, #3
 800d01a:	4a13      	ldr	r2, [pc, #76]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d01c:	fa22 f303 	lsr.w	r3, r2, r3
 800d020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d022:	e078      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d024:	2300      	movs	r3, #0
 800d026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d028:	e075      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d02a:	4b0e      	ldr	r3, [pc, #56]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d036:	d102      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d038:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d03c:	e06b      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d042:	e068      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d044:	4b07      	ldr	r3, [pc, #28]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d050:	d102      	bne.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d052:	4b07      	ldr	r3, [pc, #28]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d056:	e05e      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d05c:	e05b      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d062:	e058      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d064:	58024400 	.word	0x58024400
 800d068:	03d09000 	.word	0x03d09000
 800d06c:	003d0900 	.word	0x003d0900
 800d070:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d074:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d078:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d07c:	430b      	orrs	r3, r1
 800d07e:	d148      	bne.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d080:	4b27      	ldr	r3, [pc, #156]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d088:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d090:	d02a      	beq.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d098:	d838      	bhi.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0a6:	d00d      	beq.n	800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d0a8:	e030      	b.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0aa:	4b1d      	ldr	r3, [pc, #116]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0b6:	d102      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d0b8:	4b1a      	ldr	r3, [pc, #104]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0bc:	e02b      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c2:	e028      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0c4:	4b16      	ldr	r3, [pc, #88]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0d0:	d107      	bne.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 fae4 	bl	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0e0:	e019      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e6:	e016      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f4:	d107      	bne.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f6:	f107 0318 	add.w	r3, r7, #24
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 f82a 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d104:	e007      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d106:	2300      	movs	r3, #0
 800d108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d10a:	e004      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d10c:	2300      	movs	r3, #0
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d110:	e001      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3740      	adds	r7, #64	; 0x40
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	58024400 	.word	0x58024400
 800d124:	017d7840 	.word	0x017d7840

0800d128 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d12c:	f7fd ffd4 	bl	800b0d8 <HAL_RCC_GetHCLKFreq>
 800d130:	4602      	mov	r2, r0
 800d132:	4b06      	ldr	r3, [pc, #24]	; (800d14c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	091b      	lsrs	r3, r3, #4
 800d138:	f003 0307 	and.w	r3, r3, #7
 800d13c:	4904      	ldr	r1, [pc, #16]	; (800d150 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d13e:	5ccb      	ldrb	r3, [r1, r3]
 800d140:	f003 031f 	and.w	r3, r3, #31
 800d144:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d148:	4618      	mov	r0, r3
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	58024400 	.word	0x58024400
 800d150:	08017b54 	.word	0x08017b54

0800d154 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d154:	b480      	push	{r7}
 800d156:	b089      	sub	sp, #36	; 0x24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d15c:	4ba1      	ldr	r3, [pc, #644]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d166:	4b9f      	ldr	r3, [pc, #636]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	0b1b      	lsrs	r3, r3, #12
 800d16c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d170:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d172:	4b9c      	ldr	r3, [pc, #624]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d176:	091b      	lsrs	r3, r3, #4
 800d178:	f003 0301 	and.w	r3, r3, #1
 800d17c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d17e:	4b99      	ldr	r3, [pc, #612]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d182:	08db      	lsrs	r3, r3, #3
 800d184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d188:	693a      	ldr	r2, [r7, #16]
 800d18a:	fb02 f303 	mul.w	r3, r2, r3
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d196:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 8111 	beq.w	800d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	f000 8083 	beq.w	800d2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	f200 80a1 	bhi.w	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d056      	beq.n	800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d1be:	e099      	b.n	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1c0:	4b88      	ldr	r3, [pc, #544]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0320 	and.w	r3, r3, #32
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d02d      	beq.n	800d228 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1cc:	4b85      	ldr	r3, [pc, #532]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	08db      	lsrs	r3, r3, #3
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	4a84      	ldr	r2, [pc, #528]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d1dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	ee07 3a90 	vmov	s15, r3
 800d1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	ee07 3a90 	vmov	s15, r3
 800d1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1f6:	4b7b      	ldr	r3, [pc, #492]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d206:	ed97 6a03 	vldr	s12, [r7, #12]
 800d20a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d222:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d226:	e087      	b.n	800d338 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	ee07 3a90 	vmov	s15, r3
 800d22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d232:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d23a:	4b6a      	ldr	r3, [pc, #424]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d24a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d24e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d25a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d26a:	e065      	b.n	800d338 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	ee07 3a90 	vmov	s15, r3
 800d272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d276:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d27e:	4b59      	ldr	r3, [pc, #356]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d286:	ee07 3a90 	vmov	s15, r3
 800d28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d28e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d292:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d29e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ae:	e043      	b.n	800d338 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	ee07 3a90 	vmov	s15, r3
 800d2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2c2:	4b48      	ldr	r3, [pc, #288]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ca:	ee07 3a90 	vmov	s15, r3
 800d2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2f2:	e021      	b.n	800d338 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	ee07 3a90 	vmov	s15, r3
 800d2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d306:	4b37      	ldr	r3, [pc, #220]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d30e:	ee07 3a90 	vmov	s15, r3
 800d312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d316:	ed97 6a03 	vldr	s12, [r7, #12]
 800d31a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d336:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d338:	4b2a      	ldr	r3, [pc, #168]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33c:	0a5b      	lsrs	r3, r3, #9
 800d33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d342:	ee07 3a90 	vmov	s15, r3
 800d346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d34e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d352:	edd7 6a07 	vldr	s13, [r7, #28]
 800d356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d35a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d35e:	ee17 2a90 	vmov	r2, s15
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d366:	4b1f      	ldr	r3, [pc, #124]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36a:	0c1b      	lsrs	r3, r3, #16
 800d36c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d370:	ee07 3a90 	vmov	s15, r3
 800d374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d37c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d380:	edd7 6a07 	vldr	s13, [r7, #28]
 800d384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d38c:	ee17 2a90 	vmov	r2, s15
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d394:	4b13      	ldr	r3, [pc, #76]	; (800d3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d398:	0e1b      	lsrs	r3, r3, #24
 800d39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ba:	ee17 2a90 	vmov	r2, s15
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3c2:	e008      	b.n	800d3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	609a      	str	r2, [r3, #8]
}
 800d3d6:	bf00      	nop
 800d3d8:	3724      	adds	r7, #36	; 0x24
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	58024400 	.word	0x58024400
 800d3e8:	03d09000 	.word	0x03d09000
 800d3ec:	46000000 	.word	0x46000000
 800d3f0:	4c742400 	.word	0x4c742400
 800d3f4:	4a742400 	.word	0x4a742400
 800d3f8:	4bbebc20 	.word	0x4bbebc20

0800d3fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b089      	sub	sp, #36	; 0x24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d404:	4ba1      	ldr	r3, [pc, #644]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d408:	f003 0303 	and.w	r3, r3, #3
 800d40c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d40e:	4b9f      	ldr	r3, [pc, #636]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	0d1b      	lsrs	r3, r3, #20
 800d414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d418:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d41a:	4b9c      	ldr	r3, [pc, #624]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	0a1b      	lsrs	r3, r3, #8
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d426:	4b99      	ldr	r3, [pc, #612]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42a:	08db      	lsrs	r3, r3, #3
 800d42c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	fb02 f303 	mul.w	r3, r2, r3
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 8111 	beq.w	800d66c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	f000 8083 	beq.w	800d558 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	2b02      	cmp	r3, #2
 800d456:	f200 80a1 	bhi.w	800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d003      	beq.n	800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	2b01      	cmp	r3, #1
 800d464:	d056      	beq.n	800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d466:	e099      	b.n	800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d468:	4b88      	ldr	r3, [pc, #544]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0320 	and.w	r3, r3, #32
 800d470:	2b00      	cmp	r3, #0
 800d472:	d02d      	beq.n	800d4d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d474:	4b85      	ldr	r3, [pc, #532]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	08db      	lsrs	r3, r3, #3
 800d47a:	f003 0303 	and.w	r3, r3, #3
 800d47e:	4a84      	ldr	r2, [pc, #528]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d480:	fa22 f303 	lsr.w	r3, r2, r3
 800d484:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	ee07 3a90 	vmov	s15, r3
 800d48c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	ee07 3a90 	vmov	s15, r3
 800d496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d49e:	4b7b      	ldr	r3, [pc, #492]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4ce:	e087      	b.n	800d5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	ee07 3a90 	vmov	s15, r3
 800d4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e2:	4b6a      	ldr	r3, [pc, #424]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d50e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d512:	e065      	b.n	800d5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d526:	4b59      	ldr	r3, [pc, #356]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52e:	ee07 3a90 	vmov	s15, r3
 800d532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d536:	ed97 6a03 	vldr	s12, [r7, #12]
 800d53a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d556:	e043      	b.n	800d5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	ee07 3a90 	vmov	s15, r3
 800d55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d562:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56a:	4b48      	ldr	r3, [pc, #288]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d572:	ee07 3a90 	vmov	s15, r3
 800d576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d57e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d59a:	e021      	b.n	800d5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ae:	4b37      	ldr	r3, [pc, #220]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b6:	ee07 3a90 	vmov	s15, r3
 800d5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d5e0:	4b2a      	ldr	r3, [pc, #168]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e4:	0a5b      	lsrs	r3, r3, #9
 800d5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ea:	ee07 3a90 	vmov	s15, r3
 800d5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d606:	ee17 2a90 	vmov	r2, s15
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d60e:	4b1f      	ldr	r3, [pc, #124]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d612:	0c1b      	lsrs	r3, r3, #16
 800d614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d618:	ee07 3a90 	vmov	s15, r3
 800d61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d624:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d628:	edd7 6a07 	vldr	s13, [r7, #28]
 800d62c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d634:	ee17 2a90 	vmov	r2, s15
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d63c:	4b13      	ldr	r3, [pc, #76]	; (800d68c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d640:	0e1b      	lsrs	r3, r3, #24
 800d642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d652:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d656:	edd7 6a07 	vldr	s13, [r7, #28]
 800d65a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d65e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d662:	ee17 2a90 	vmov	r2, s15
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d66a:	e008      	b.n	800d67e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	609a      	str	r2, [r3, #8]
}
 800d67e:	bf00      	nop
 800d680:	3724      	adds	r7, #36	; 0x24
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	58024400 	.word	0x58024400
 800d690:	03d09000 	.word	0x03d09000
 800d694:	46000000 	.word	0x46000000
 800d698:	4c742400 	.word	0x4c742400
 800d69c:	4a742400 	.word	0x4a742400
 800d6a0:	4bbebc20 	.word	0x4bbebc20

0800d6a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b089      	sub	sp, #36	; 0x24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6ac:	4ba0      	ldr	r3, [pc, #640]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b0:	f003 0303 	and.w	r3, r3, #3
 800d6b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d6b6:	4b9e      	ldr	r3, [pc, #632]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ba:	091b      	lsrs	r3, r3, #4
 800d6bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d6c2:	4b9b      	ldr	r3, [pc, #620]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6cc:	4b98      	ldr	r3, [pc, #608]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d0:	08db      	lsrs	r3, r3, #3
 800d6d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	fb02 f303 	mul.w	r3, r2, r3
 800d6dc:	ee07 3a90 	vmov	s15, r3
 800d6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f000 8111 	beq.w	800d912 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	f000 8083 	beq.w	800d7fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	f200 80a1 	bhi.w	800d842 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d056      	beq.n	800d7ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d70c:	e099      	b.n	800d842 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d70e:	4b88      	ldr	r3, [pc, #544]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 0320 	and.w	r3, r3, #32
 800d716:	2b00      	cmp	r3, #0
 800d718:	d02d      	beq.n	800d776 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d71a:	4b85      	ldr	r3, [pc, #532]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	08db      	lsrs	r3, r3, #3
 800d720:	f003 0303 	and.w	r3, r3, #3
 800d724:	4a83      	ldr	r2, [pc, #524]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d726:	fa22 f303 	lsr.w	r3, r2, r3
 800d72a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	ee07 3a90 	vmov	s15, r3
 800d732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	ee07 3a90 	vmov	s15, r3
 800d73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d744:	4b7a      	ldr	r3, [pc, #488]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74c:	ee07 3a90 	vmov	s15, r3
 800d750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d754:	ed97 6a03 	vldr	s12, [r7, #12]
 800d758:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d75c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d76c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d770:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d774:	e087      	b.n	800d886 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	ee07 3a90 	vmov	s15, r3
 800d77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d780:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d788:	4b69      	ldr	r3, [pc, #420]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d798:	ed97 6a03 	vldr	s12, [r7, #12]
 800d79c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7b8:	e065      	b.n	800d886 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	ee07 3a90 	vmov	s15, r3
 800d7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7cc:	4b58      	ldr	r3, [pc, #352]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d4:	ee07 3a90 	vmov	s15, r3
 800d7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7fc:	e043      	b.n	800d886 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	ee07 3a90 	vmov	s15, r3
 800d804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d808:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d80c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d810:	4b47      	ldr	r3, [pc, #284]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d818:	ee07 3a90 	vmov	s15, r3
 800d81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d820:	ed97 6a03 	vldr	s12, [r7, #12]
 800d824:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d82c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d83c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d840:	e021      	b.n	800d886 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	ee07 3a90 	vmov	s15, r3
 800d848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d84c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d854:	4b36      	ldr	r3, [pc, #216]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85c:	ee07 3a90 	vmov	s15, r3
 800d860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d864:	ed97 6a03 	vldr	s12, [r7, #12]
 800d868:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d86c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d87c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d884:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d886:	4b2a      	ldr	r3, [pc, #168]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88a:	0a5b      	lsrs	r3, r3, #9
 800d88c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d890:	ee07 3a90 	vmov	s15, r3
 800d894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d89c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ac:	ee17 2a90 	vmov	r2, s15
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d8b4:	4b1e      	ldr	r3, [pc, #120]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b8:	0c1b      	lsrs	r3, r3, #16
 800d8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8da:	ee17 2a90 	vmov	r2, s15
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d8e2:	4b13      	ldr	r3, [pc, #76]	; (800d930 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e6:	0e1b      	lsrs	r3, r3, #24
 800d8e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ec:	ee07 3a90 	vmov	s15, r3
 800d8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d908:	ee17 2a90 	vmov	r2, s15
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d910:	e008      	b.n	800d924 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	609a      	str	r2, [r3, #8]
}
 800d924:	bf00      	nop
 800d926:	3724      	adds	r7, #36	; 0x24
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	58024400 	.word	0x58024400
 800d934:	03d09000 	.word	0x03d09000
 800d938:	46000000 	.word	0x46000000
 800d93c:	4c742400 	.word	0x4c742400
 800d940:	4a742400 	.word	0x4a742400
 800d944:	4bbebc20 	.word	0x4bbebc20

0800d948 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d956:	4b53      	ldr	r3, [pc, #332]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d95a:	f003 0303 	and.w	r3, r3, #3
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d101      	bne.n	800d966 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e099      	b.n	800da9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d966:	4b4f      	ldr	r3, [pc, #316]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a4e      	ldr	r2, [pc, #312]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d96c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d972:	f7f6 fc53 	bl	800421c <HAL_GetTick>
 800d976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d978:	e008      	b.n	800d98c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d97a:	f7f6 fc4f 	bl	800421c <HAL_GetTick>
 800d97e:	4602      	mov	r2, r0
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	2b02      	cmp	r3, #2
 800d986:	d901      	bls.n	800d98c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e086      	b.n	800da9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d98c:	4b45      	ldr	r3, [pc, #276]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1f0      	bne.n	800d97a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d998:	4b42      	ldr	r3, [pc, #264]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	031b      	lsls	r3, r3, #12
 800d9a6:	493f      	ldr	r1, [pc, #252]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	628b      	str	r3, [r1, #40]	; 0x28
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	025b      	lsls	r3, r3, #9
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	431a      	orrs	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	041b      	lsls	r3, r3, #16
 800d9ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9ce:	431a      	orrs	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	061b      	lsls	r3, r3, #24
 800d9d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9dc:	4931      	ldr	r1, [pc, #196]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d9e2:	4b30      	ldr	r3, [pc, #192]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	492d      	ldr	r1, [pc, #180]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d9f4:	4b2b      	ldr	r3, [pc, #172]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800d9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f8:	f023 0220 	bic.w	r2, r3, #32
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	4928      	ldr	r1, [pc, #160]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da02:	4313      	orrs	r3, r2
 800da04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da06:	4b27      	ldr	r3, [pc, #156]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0a:	4a26      	ldr	r2, [pc, #152]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da0c:	f023 0310 	bic.w	r3, r3, #16
 800da10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da12:	4b24      	ldr	r3, [pc, #144]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da16:	4b24      	ldr	r3, [pc, #144]	; (800daa8 <RCCEx_PLL2_Config+0x160>)
 800da18:	4013      	ands	r3, r2
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	69d2      	ldr	r2, [r2, #28]
 800da1e:	00d2      	lsls	r2, r2, #3
 800da20:	4920      	ldr	r1, [pc, #128]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da22:	4313      	orrs	r3, r2
 800da24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800da26:	4b1f      	ldr	r3, [pc, #124]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2a:	4a1e      	ldr	r2, [pc, #120]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da2c:	f043 0310 	orr.w	r3, r3, #16
 800da30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d106      	bne.n	800da46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800da38:	4b1a      	ldr	r3, [pc, #104]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3c:	4a19      	ldr	r2, [pc, #100]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da44:	e00f      	b.n	800da66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d106      	bne.n	800da5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da4c:	4b15      	ldr	r3, [pc, #84]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da50:	4a14      	ldr	r2, [pc, #80]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da58:	e005      	b.n	800da66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da5a:	4b12      	ldr	r3, [pc, #72]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5e:	4a11      	ldr	r2, [pc, #68]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da66:	4b0f      	ldr	r3, [pc, #60]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a0e      	ldr	r2, [pc, #56]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da72:	f7f6 fbd3 	bl	800421c <HAL_GetTick>
 800da76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da78:	e008      	b.n	800da8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da7a:	f7f6 fbcf 	bl	800421c <HAL_GetTick>
 800da7e:	4602      	mov	r2, r0
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	2b02      	cmp	r3, #2
 800da86:	d901      	bls.n	800da8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da88:	2303      	movs	r3, #3
 800da8a:	e006      	b.n	800da9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da8c:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <RCCEx_PLL2_Config+0x15c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0f0      	beq.n	800da7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800da98:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	58024400 	.word	0x58024400
 800daa8:	ffff0007 	.word	0xffff0007

0800daac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800daba:	4b53      	ldr	r3, [pc, #332]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dabe:	f003 0303 	and.w	r3, r3, #3
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d101      	bne.n	800daca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e099      	b.n	800dbfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800daca:	4b4f      	ldr	r3, [pc, #316]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a4e      	ldr	r2, [pc, #312]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dad6:	f7f6 fba1 	bl	800421c <HAL_GetTick>
 800dada:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dadc:	e008      	b.n	800daf0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dade:	f7f6 fb9d 	bl	800421c <HAL_GetTick>
 800dae2:	4602      	mov	r2, r0
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d901      	bls.n	800daf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800daec:	2303      	movs	r3, #3
 800daee:	e086      	b.n	800dbfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800daf0:	4b45      	ldr	r3, [pc, #276]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1f0      	bne.n	800dade <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dafc:	4b42      	ldr	r3, [pc, #264]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	051b      	lsls	r3, r3, #20
 800db0a:	493f      	ldr	r1, [pc, #252]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db0c:	4313      	orrs	r3, r2
 800db0e:	628b      	str	r3, [r1, #40]	; 0x28
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	3b01      	subs	r3, #1
 800db16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	3b01      	subs	r3, #1
 800db20:	025b      	lsls	r3, r3, #9
 800db22:	b29b      	uxth	r3, r3
 800db24:	431a      	orrs	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	3b01      	subs	r3, #1
 800db2c:	041b      	lsls	r3, r3, #16
 800db2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db32:	431a      	orrs	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	3b01      	subs	r3, #1
 800db3a:	061b      	lsls	r3, r3, #24
 800db3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db40:	4931      	ldr	r1, [pc, #196]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db42:	4313      	orrs	r3, r2
 800db44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800db46:	4b30      	ldr	r3, [pc, #192]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	695b      	ldr	r3, [r3, #20]
 800db52:	492d      	ldr	r1, [pc, #180]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db54:	4313      	orrs	r3, r2
 800db56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db58:	4b2b      	ldr	r3, [pc, #172]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	4928      	ldr	r1, [pc, #160]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db66:	4313      	orrs	r3, r2
 800db68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800db6a:	4b27      	ldr	r3, [pc, #156]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	4a26      	ldr	r2, [pc, #152]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800db76:	4b24      	ldr	r3, [pc, #144]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db7a:	4b24      	ldr	r3, [pc, #144]	; (800dc0c <RCCEx_PLL3_Config+0x160>)
 800db7c:	4013      	ands	r3, r2
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	69d2      	ldr	r2, [r2, #28]
 800db82:	00d2      	lsls	r2, r2, #3
 800db84:	4920      	ldr	r1, [pc, #128]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db86:	4313      	orrs	r3, r2
 800db88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db8a:	4b1f      	ldr	r3, [pc, #124]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8e:	4a1e      	ldr	r2, [pc, #120]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d106      	bne.n	800dbaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800db9c:	4b1a      	ldr	r3, [pc, #104]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800db9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba0:	4a19      	ldr	r2, [pc, #100]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dba8:	e00f      	b.n	800dbca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d106      	bne.n	800dbbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dbb0:	4b15      	ldr	r3, [pc, #84]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	4a14      	ldr	r2, [pc, #80]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dbba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbbc:	e005      	b.n	800dbca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dbbe:	4b12      	ldr	r3, [pc, #72]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc2:	4a11      	ldr	r2, [pc, #68]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dbc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dbca:	4b0f      	ldr	r3, [pc, #60]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a0e      	ldr	r2, [pc, #56]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbd6:	f7f6 fb21 	bl	800421c <HAL_GetTick>
 800dbda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbdc:	e008      	b.n	800dbf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbde:	f7f6 fb1d 	bl	800421c <HAL_GetTick>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	d901      	bls.n	800dbf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbec:	2303      	movs	r3, #3
 800dbee:	e006      	b.n	800dbfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbf0:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <RCCEx_PLL3_Config+0x15c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d0f0      	beq.n	800dbde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	58024400 	.word	0x58024400
 800dc0c:	ffff0007 	.word	0xffff0007

0800dc10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d071      	beq.n	800dd06 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d106      	bne.n	800dc3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7f5 fd88 	bl	800374c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	f003 0310 	and.w	r3, r3, #16
 800dc4e:	2b10      	cmp	r3, #16
 800dc50:	d050      	beq.n	800dcf4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	22ca      	movs	r2, #202	; 0xca
 800dc58:	625a      	str	r2, [r3, #36]	; 0x24
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2253      	movs	r2, #83	; 0x53
 800dc60:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fa4a 	bl	800e0fc <RTC_EnterInitMode>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d124      	bne.n	800dcbc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6899      	ldr	r1, [r3, #8]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	4b24      	ldr	r3, [pc, #144]	; (800dd10 <HAL_RTC_Init+0x100>)
 800dc7e:	400b      	ands	r3, r1
 800dc80:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6899      	ldr	r1, [r3, #8]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	431a      	orrs	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	431a      	orrs	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	430a      	orrs	r2, r1
 800dc9e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	0419      	lsls	r1, r3, #16
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68da      	ldr	r2, [r3, #12]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fa56 	bl	800e164 <RTC_ExitInitMode>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d113      	bne.n	800dcea <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f022 0203 	bic.w	r2, r2, #3
 800dcd0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	69da      	ldr	r2, [r3, #28]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	695b      	ldr	r3, [r3, #20]
 800dce0:	431a      	orrs	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	430a      	orrs	r2, r1
 800dce8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	22ff      	movs	r2, #255	; 0xff
 800dcf0:	625a      	str	r2, [r3, #36]	; 0x24
 800dcf2:	e001      	b.n	800dcf8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d103      	bne.n	800dd06 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	ff8fffbf 	.word	0xff8fffbf

0800dd14 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dd14:	b590      	push	{r4, r7, lr}
 800dd16:	b087      	sub	sp, #28
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d101      	bne.n	800dd2e <HAL_RTC_SetTime+0x1a>
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	e089      	b.n	800de42 <HAL_RTC_SetTime+0x12e>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2202      	movs	r2, #2
 800dd3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	22ca      	movs	r2, #202	; 0xca
 800dd44:	625a      	str	r2, [r3, #36]	; 0x24
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2253      	movs	r2, #83	; 0x53
 800dd4c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f000 f9d4 	bl	800e0fc <RTC_EnterInitMode>
 800dd54:	4603      	mov	r3, r0
 800dd56:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dd58:	7cfb      	ldrb	r3, [r7, #19]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d161      	bne.n	800de22 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d126      	bne.n	800ddb2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d102      	bne.n	800dd78 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2200      	movs	r2, #0
 800dd76:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fa2f 	bl	800e1e0 <RTC_ByteToBcd2>
 800dd82:	4603      	mov	r3, r0
 800dd84:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	785b      	ldrb	r3, [r3, #1]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fa28 	bl	800e1e0 <RTC_ByteToBcd2>
 800dd90:	4603      	mov	r3, r0
 800dd92:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd94:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	789b      	ldrb	r3, [r3, #2]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fa20 	bl	800e1e0 <RTC_ByteToBcd2>
 800dda0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dda2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	78db      	ldrb	r3, [r3, #3]
 800ddaa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddac:	4313      	orrs	r3, r2
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	e018      	b.n	800dde4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d102      	bne.n	800ddc6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	785b      	ldrb	r3, [r3, #1]
 800ddd0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddd2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ddd8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	78db      	ldrb	r3, [r3, #3]
 800ddde:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dde0:	4313      	orrs	r3, r2
 800dde2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	6979      	ldr	r1, [r7, #20]
 800ddea:	4b18      	ldr	r3, [pc, #96]	; (800de4c <HAL_RTC_SetTime+0x138>)
 800ddec:	400b      	ands	r3, r1
 800ddee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	689a      	ldr	r2, [r3, #8]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ddfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6899      	ldr	r1, [r3, #8]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	68da      	ldr	r2, [r3, #12]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	431a      	orrs	r2, r3
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	430a      	orrs	r2, r1
 800de16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f000 f9a3 	bl	800e164 <RTC_ExitInitMode>
 800de1e:	4603      	mov	r3, r0
 800de20:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	22ff      	movs	r2, #255	; 0xff
 800de28:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de2a:	7cfb      	ldrb	r3, [r7, #19]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d103      	bne.n	800de38 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800de40:	7cfb      	ldrb	r3, [r7, #19]
}
 800de42:	4618      	mov	r0, r3
 800de44:	371c      	adds	r7, #28
 800de46:	46bd      	mov	sp, r7
 800de48:	bd90      	pop	{r4, r7, pc}
 800de4a:	bf00      	nop
 800de4c:	007f7f7f 	.word	0x007f7f7f

0800de50 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b086      	sub	sp, #24
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	4b22      	ldr	r3, [pc, #136]	; (800df04 <HAL_RTC_GetTime+0xb4>)
 800de7c:	4013      	ands	r3, r2
 800de7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	0c1b      	lsrs	r3, r3, #16
 800de84:	b2db      	uxtb	r3, r3
 800de86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	0a1b      	lsrs	r3, r3, #8
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	0d9b      	lsrs	r3, r3, #22
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f003 0301 	and.w	r3, r3, #1
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d11a      	bne.n	800defa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 f9a9 	bl	800e220 <RTC_Bcd2ToByte>
 800dece:	4603      	mov	r3, r0
 800ded0:	461a      	mov	r2, r3
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	785b      	ldrb	r3, [r3, #1]
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 f9a0 	bl	800e220 <RTC_Bcd2ToByte>
 800dee0:	4603      	mov	r3, r0
 800dee2:	461a      	mov	r2, r3
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	789b      	ldrb	r3, [r3, #2]
 800deec:	4618      	mov	r0, r3
 800deee:	f000 f997 	bl	800e220 <RTC_Bcd2ToByte>
 800def2:	4603      	mov	r3, r0
 800def4:	461a      	mov	r2, r3
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	007f7f7f 	.word	0x007f7f7f

0800df08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d101      	bne.n	800df22 <HAL_RTC_SetDate+0x1a>
 800df1e:	2302      	movs	r3, #2
 800df20:	e073      	b.n	800e00a <HAL_RTC_SetDate+0x102>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2201      	movs	r2, #1
 800df26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2202      	movs	r2, #2
 800df2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10e      	bne.n	800df56 <HAL_RTC_SetDate+0x4e>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	785b      	ldrb	r3, [r3, #1]
 800df3c:	f003 0310 	and.w	r3, r3, #16
 800df40:	2b00      	cmp	r3, #0
 800df42:	d008      	beq.n	800df56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	785b      	ldrb	r3, [r3, #1]
 800df48:	f023 0310 	bic.w	r3, r3, #16
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	330a      	adds	r3, #10
 800df50:	b2da      	uxtb	r2, r3
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d11c      	bne.n	800df96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	78db      	ldrb	r3, [r3, #3]
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f93d 	bl	800e1e0 <RTC_ByteToBcd2>
 800df66:	4603      	mov	r3, r0
 800df68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	785b      	ldrb	r3, [r3, #1]
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 f936 	bl	800e1e0 <RTC_ByteToBcd2>
 800df74:	4603      	mov	r3, r0
 800df76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	789b      	ldrb	r3, [r3, #2]
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 f92e 	bl	800e1e0 <RTC_ByteToBcd2>
 800df84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800df86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df90:	4313      	orrs	r3, r2
 800df92:	617b      	str	r3, [r7, #20]
 800df94:	e00e      	b.n	800dfb4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	78db      	ldrb	r3, [r3, #3]
 800df9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	785b      	ldrb	r3, [r3, #1]
 800dfa0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dfa2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dfa8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	22ca      	movs	r2, #202	; 0xca
 800dfba:	625a      	str	r2, [r3, #36]	; 0x24
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2253      	movs	r2, #83	; 0x53
 800dfc2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f899 	bl	800e0fc <RTC_EnterInitMode>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dfce:	7cfb      	ldrb	r3, [r7, #19]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10a      	bne.n	800dfea <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	6979      	ldr	r1, [r7, #20]
 800dfda:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <HAL_RTC_SetDate+0x10c>)
 800dfdc:	400b      	ands	r3, r1
 800dfde:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f000 f8bf 	bl	800e164 <RTC_ExitInitMode>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	22ff      	movs	r2, #255	; 0xff
 800dff0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dff2:	7cfb      	ldrb	r3, [r7, #19]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d103      	bne.n	800e000 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e008:	7cfb      	ldrb	r3, [r7, #19]


}
 800e00a:	4618      	mov	r0, r3
 800e00c:	371c      	adds	r7, #28
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd90      	pop	{r4, r7, pc}
 800e012:	bf00      	nop
 800e014:	00ffff3f 	.word	0x00ffff3f

0800e018 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	4b21      	ldr	r3, [pc, #132]	; (800e0b0 <HAL_RTC_GetDate+0x98>)
 800e02c:	4013      	ands	r3, r2
 800e02e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	0c1b      	lsrs	r3, r3, #16
 800e034:	b2da      	uxtb	r2, r3
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	0a1b      	lsrs	r3, r3, #8
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	f003 031f 	and.w	r3, r3, #31
 800e044:	b2da      	uxtb	r2, r3
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e052:	b2da      	uxtb	r2, r3
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	0b5b      	lsrs	r3, r3, #13
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	f003 0307 	and.w	r3, r3, #7
 800e062:	b2da      	uxtb	r2, r3
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d11a      	bne.n	800e0a4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	78db      	ldrb	r3, [r3, #3]
 800e072:	4618      	mov	r0, r3
 800e074:	f000 f8d4 	bl	800e220 <RTC_Bcd2ToByte>
 800e078:	4603      	mov	r3, r0
 800e07a:	461a      	mov	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	785b      	ldrb	r3, [r3, #1]
 800e084:	4618      	mov	r0, r3
 800e086:	f000 f8cb 	bl	800e220 <RTC_Bcd2ToByte>
 800e08a:	4603      	mov	r3, r0
 800e08c:	461a      	mov	r2, r3
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	789b      	ldrb	r3, [r3, #2]
 800e096:	4618      	mov	r0, r3
 800e098:	f000 f8c2 	bl	800e220 <RTC_Bcd2ToByte>
 800e09c:	4603      	mov	r3, r0
 800e09e:	461a      	mov	r2, r3
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3718      	adds	r7, #24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	00ffff3f 	.word	0x00ffff3f

0800e0b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a0d      	ldr	r2, [pc, #52]	; (800e0f8 <HAL_RTC_WaitForSynchro+0x44>)
 800e0c2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e0c4:	f7f6 f8aa 	bl	800421c <HAL_GetTick>
 800e0c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e0ca:	e009      	b.n	800e0e0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e0cc:	f7f6 f8a6 	bl	800421c <HAL_GetTick>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0da:	d901      	bls.n	800e0e0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e007      	b.n	800e0f0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	f003 0320 	and.w	r3, r3, #32
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d0ee      	beq.n	800e0cc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	0003ff5f 	.word	0x0003ff5f

0800e0fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e104:	2300      	movs	r3, #0
 800e106:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e112:	2b00      	cmp	r3, #0
 800e114:	d120      	bne.n	800e158 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e11e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e120:	f7f6 f87c 	bl	800421c <HAL_GetTick>
 800e124:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e126:	e00d      	b.n	800e144 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e128:	f7f6 f878 	bl	800421c <HAL_GetTick>
 800e12c:	4602      	mov	r2, r0
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e136:	d905      	bls.n	800e144 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2203      	movs	r2, #3
 800e140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d102      	bne.n	800e158 <RTC_EnterInitMode+0x5c>
 800e152:	7bfb      	ldrb	r3, [r7, #15]
 800e154:	2b03      	cmp	r3, #3
 800e156:	d1e7      	bne.n	800e128 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
	...

0800e164 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e170:	4b1a      	ldr	r3, [pc, #104]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	4a19      	ldr	r2, [pc, #100]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e17a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e17c:	4b17      	ldr	r3, [pc, #92]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	f003 0320 	and.w	r3, r3, #32
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10c      	bne.n	800e1a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7ff ff93 	bl	800e0b4 <HAL_RTC_WaitForSynchro>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d01e      	beq.n	800e1d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2203      	movs	r2, #3
 800e198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	73fb      	strb	r3, [r7, #15]
 800e1a0:	e017      	b.n	800e1d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1a2:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	4a0d      	ldr	r2, [pc, #52]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e1a8:	f023 0320 	bic.w	r3, r3, #32
 800e1ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff ff80 	bl	800e0b4 <HAL_RTC_WaitForSynchro>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d005      	beq.n	800e1c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2203      	movs	r2, #3
 800e1be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1c6:	4b05      	ldr	r3, [pc, #20]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	4a04      	ldr	r2, [pc, #16]	; (800e1dc <RTC_ExitInitMode+0x78>)
 800e1cc:	f043 0320 	orr.w	r3, r3, #32
 800e1d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	58004000 	.word	0x58004000

0800e1e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e1ee:	79fb      	ldrb	r3, [r7, #7]
 800e1f0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e1f2:	e005      	b.n	800e200 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e1fa:	7afb      	ldrb	r3, [r7, #11]
 800e1fc:	3b0a      	subs	r3, #10
 800e1fe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e200:	7afb      	ldrb	r3, [r7, #11]
 800e202:	2b09      	cmp	r3, #9
 800e204:	d8f6      	bhi.n	800e1f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	011b      	lsls	r3, r3, #4
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	7afb      	ldrb	r3, [r7, #11]
 800e210:	4313      	orrs	r3, r2
 800e212:	b2db      	uxtb	r3, r3
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	4603      	mov	r3, r0
 800e228:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e22a:	79fb      	ldrb	r3, [r7, #7]
 800e22c:	091b      	lsrs	r3, r3, #4
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	461a      	mov	r2, r3
 800e232:	0092      	lsls	r2, r2, #2
 800e234:	4413      	add	r3, r2
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	f003 030f 	and.w	r3, r3, #15
 800e240:	b2da      	uxtb	r2, r3
 800e242:	7bfb      	ldrb	r3, [r7, #15]
 800e244:	4413      	add	r3, r2
 800e246:	b2db      	uxtb	r3, r3
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	e10f      	b.n	800e486 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a87      	ldr	r2, [pc, #540]	; (800e490 <HAL_SPI_Init+0x23c>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d00f      	beq.n	800e296 <HAL_SPI_Init+0x42>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a86      	ldr	r2, [pc, #536]	; (800e494 <HAL_SPI_Init+0x240>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d00a      	beq.n	800e296 <HAL_SPI_Init+0x42>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a84      	ldr	r2, [pc, #528]	; (800e498 <HAL_SPI_Init+0x244>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d005      	beq.n	800e296 <HAL_SPI_Init+0x42>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	2b0f      	cmp	r3, #15
 800e290:	d901      	bls.n	800e296 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e292:	2301      	movs	r3, #1
 800e294:	e0f7      	b.n	800e486 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fc12 	bl	800eac0 <SPI_GetPacketSize>
 800e29c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a7b      	ldr	r2, [pc, #492]	; (800e490 <HAL_SPI_Init+0x23c>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d00c      	beq.n	800e2c2 <HAL_SPI_Init+0x6e>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a79      	ldr	r2, [pc, #484]	; (800e494 <HAL_SPI_Init+0x240>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d007      	beq.n	800e2c2 <HAL_SPI_Init+0x6e>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a78      	ldr	r2, [pc, #480]	; (800e498 <HAL_SPI_Init+0x244>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d002      	beq.n	800e2c2 <HAL_SPI_Init+0x6e>
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2b08      	cmp	r3, #8
 800e2c0:	d811      	bhi.n	800e2e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e2c6:	4a72      	ldr	r2, [pc, #456]	; (800e490 <HAL_SPI_Init+0x23c>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d009      	beq.n	800e2e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a70      	ldr	r2, [pc, #448]	; (800e494 <HAL_SPI_Init+0x240>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d004      	beq.n	800e2e0 <HAL_SPI_Init+0x8c>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a6f      	ldr	r2, [pc, #444]	; (800e498 <HAL_SPI_Init+0x244>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d104      	bne.n	800e2ea <HAL_SPI_Init+0x96>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b10      	cmp	r3, #16
 800e2e4:	d901      	bls.n	800e2ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e0cd      	b.n	800e486 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d106      	bne.n	800e304 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7f5 fa58 	bl	80037b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2202      	movs	r2, #2
 800e308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f022 0201 	bic.w	r2, r2, #1
 800e31a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e326:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e330:	d119      	bne.n	800e366 <HAL_SPI_Init+0x112>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e33a:	d103      	bne.n	800e344 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e340:	2b00      	cmp	r3, #0
 800e342:	d008      	beq.n	800e356 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10c      	bne.n	800e366 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e354:	d107      	bne.n	800e366 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e364:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00f      	beq.n	800e392 <HAL_SPI_Init+0x13e>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	2b06      	cmp	r3, #6
 800e378:	d90b      	bls.n	800e392 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	430a      	orrs	r2, r1
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	e007      	b.n	800e3a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	69da      	ldr	r2, [r3, #28]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3aa:	431a      	orrs	r2, r3
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	431a      	orrs	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b4:	ea42 0103 	orr.w	r1, r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68da      	ldr	r2, [r3, #12]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	430a      	orrs	r2, r1
 800e3c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3cc:	431a      	orrs	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	431a      	orrs	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	691b      	ldr	r3, [r3, #16]
 800e3de:	431a      	orrs	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	695b      	ldr	r3, [r3, #20]
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a1b      	ldr	r3, [r3, #32]
 800e3ea:	431a      	orrs	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	431a      	orrs	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3f6:	431a      	orrs	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	431a      	orrs	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e402:	ea42 0103 	orr.w	r1, r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	430a      	orrs	r2, r1
 800e410:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d113      	bne.n	800e442 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e42c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e440:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f022 0201 	bic.w	r2, r2, #1
 800e450:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	430a      	orrs	r2, r1
 800e472:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	40013000 	.word	0x40013000
 800e494:	40003800 	.word	0x40003800
 800e498:	40003c00 	.word	0x40003c00

0800e49c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	603b      	str	r3, [r7, #0]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b0:	095b      	lsrs	r3, r3, #5
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3330      	adds	r3, #48	; 0x30
 800e4be:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4c0:	f7f5 feac 	bl	800421c <HAL_GetTick>
 800e4c4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d001      	beq.n	800e4d6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	e250      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d002      	beq.n	800e4e2 <HAL_SPI_Receive+0x46>
 800e4dc:	88fb      	ldrh	r3, [r7, #6]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e248      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <HAL_SPI_Receive+0x58>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e241      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2204      	movs	r2, #4
 800e500:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	88fa      	ldrh	r2, [r7, #6]
 800e516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	88fa      	ldrh	r2, [r7, #6]
 800e51e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e54c:	d108      	bne.n	800e560 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	e009      	b.n	800e574 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e572:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	4b95      	ldr	r3, [pc, #596]	; (800e7d0 <HAL_SPI_Receive+0x334>)
 800e57c:	4013      	ands	r3, r2
 800e57e:	88f9      	ldrh	r1, [r7, #6]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	6812      	ldr	r2, [r2, #0]
 800e584:	430b      	orrs	r3, r1
 800e586:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f042 0201 	orr.w	r2, r2, #1
 800e596:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5a0:	d107      	bne.n	800e5b2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	2b0f      	cmp	r3, #15
 800e5b8:	d96c      	bls.n	800e694 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e5ba:	e064      	b.n	800e686 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	695b      	ldr	r3, [r3, #20]
 800e5c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d114      	bne.n	800e5fc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5dc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e2:	1d1a      	adds	r2, r3, #4
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5fa:	e044      	b.n	800e686 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e602:	b29b      	uxth	r3, r3
 800e604:	8bfa      	ldrh	r2, [r7, #30]
 800e606:	429a      	cmp	r2, r3
 800e608:	d919      	bls.n	800e63e <HAL_SPI_Receive+0x1a2>
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d014      	beq.n	800e63e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e61c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e61e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e624:	1d1a      	adds	r2, r3, #4
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e630:	b29b      	uxth	r3, r3
 800e632:	3b01      	subs	r3, #1
 800e634:	b29a      	uxth	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e63c:	e023      	b.n	800e686 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e63e:	f7f5 fded 	bl	800421c <HAL_GetTick>
 800e642:	4602      	mov	r2, r0
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d803      	bhi.n	800e656 <HAL_SPI_Receive+0x1ba>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e654:	d102      	bne.n	800e65c <HAL_SPI_Receive+0x1c0>
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d114      	bne.n	800e686 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f000 f98f 	bl	800e980 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2201      	movs	r2, #1
 800e676:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e682:	2303      	movs	r3, #3
 800e684:	e178      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d194      	bne.n	800e5bc <HAL_SPI_Receive+0x120>
 800e692:	e15e      	b.n	800e952 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	2b07      	cmp	r3, #7
 800e69a:	f240 8153 	bls.w	800e944 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e69e:	e08f      	b.n	800e7c0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	f003 0301 	and.w	r3, r3, #1
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d114      	bne.n	800e6e0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ba:	69ba      	ldr	r2, [r7, #24]
 800e6bc:	8812      	ldrh	r2, [r2, #0]
 800e6be:	b292      	uxth	r2, r2
 800e6c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6c6:	1c9a      	adds	r2, r3, #2
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6de:	e06f      	b.n	800e7c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	8bfa      	ldrh	r2, [r7, #30]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d924      	bls.n	800e738 <HAL_SPI_Receive+0x29c>
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01f      	beq.n	800e738 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6fc:	69ba      	ldr	r2, [r7, #24]
 800e6fe:	8812      	ldrh	r2, [r2, #0]
 800e700:	b292      	uxth	r2, r2
 800e702:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e708:	1c9a      	adds	r2, r3, #2
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e712:	69ba      	ldr	r2, [r7, #24]
 800e714:	8812      	ldrh	r2, [r2, #0]
 800e716:	b292      	uxth	r2, r2
 800e718:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e71e:	1c9a      	adds	r2, r3, #2
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	3b02      	subs	r3, #2
 800e72e:	b29a      	uxth	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e736:	e043      	b.n	800e7c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e73e:	b29b      	uxth	r3, r3
 800e740:	2b01      	cmp	r3, #1
 800e742:	d119      	bne.n	800e778 <HAL_SPI_Receive+0x2dc>
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d014      	beq.n	800e778 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e752:	69ba      	ldr	r2, [r7, #24]
 800e754:	8812      	ldrh	r2, [r2, #0]
 800e756:	b292      	uxth	r2, r2
 800e758:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75e:	1c9a      	adds	r2, r3, #2
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	3b01      	subs	r3, #1
 800e76e:	b29a      	uxth	r2, r3
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e776:	e023      	b.n	800e7c0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e778:	f7f5 fd50 	bl	800421c <HAL_GetTick>
 800e77c:	4602      	mov	r2, r0
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	429a      	cmp	r2, r3
 800e786:	d803      	bhi.n	800e790 <HAL_SPI_Receive+0x2f4>
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e78e:	d102      	bne.n	800e796 <HAL_SPI_Receive+0x2fa>
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d114      	bne.n	800e7c0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 f8f2 	bl	800e980 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7bc:	2303      	movs	r3, #3
 800e7be:	e0db      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f47f af69 	bne.w	800e6a0 <HAL_SPI_Receive+0x204>
 800e7ce:	e0c0      	b.n	800e952 <HAL_SPI_Receive+0x4b6>
 800e7d0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d117      	bne.n	800e81a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f6:	7812      	ldrb	r2, [r2, #0]
 800e7f8:	b2d2      	uxtb	r2, r2
 800e7fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	3b01      	subs	r3, #1
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e818:	e094      	b.n	800e944 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e820:	b29b      	uxth	r3, r3
 800e822:	8bfa      	ldrh	r2, [r7, #30]
 800e824:	429a      	cmp	r2, r3
 800e826:	d946      	bls.n	800e8b6 <HAL_SPI_Receive+0x41a>
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d041      	beq.n	800e8b6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e83e:	7812      	ldrb	r2, [r2, #0]
 800e840:	b2d2      	uxtb	r2, r2
 800e842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e848:	1c5a      	adds	r2, r3, #1
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e85a:	7812      	ldrb	r2, [r2, #0]
 800e85c:	b2d2      	uxtb	r2, r2
 800e85e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e876:	7812      	ldrb	r2, [r2, #0]
 800e878:	b2d2      	uxtb	r2, r2
 800e87a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e892:	7812      	ldrb	r2, [r2, #0]
 800e894:	b2d2      	uxtb	r2, r2
 800e896:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e89c:	1c5a      	adds	r2, r3, #1
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	3b04      	subs	r3, #4
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8b4:	e046      	b.n	800e944 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	d81c      	bhi.n	800e8fc <HAL_SPI_Receive+0x460>
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d017      	beq.n	800e8fc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8d8:	7812      	ldrb	r2, [r2, #0]
 800e8da:	b2d2      	uxtb	r2, r2
 800e8dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8fa:	e023      	b.n	800e944 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8fc:	f7f5 fc8e 	bl	800421c <HAL_GetTick>
 800e900:	4602      	mov	r2, r0
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d803      	bhi.n	800e914 <HAL_SPI_Receive+0x478>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e912:	d102      	bne.n	800e91a <HAL_SPI_Receive+0x47e>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d114      	bne.n	800e944 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f000 f830 	bl	800e980 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e940:	2303      	movs	r3, #3
 800e942:	e019      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f47f af41 	bne.w	800e7d4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f000 f814 	bl	800e980 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	e000      	b.n	800e978 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e976:	2300      	movs	r3, #0
  }
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3720      	adds	r7, #32
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	695b      	ldr	r3, [r3, #20]
 800e98e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f042 0208 	orr.w	r2, r2, #8
 800e99e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	699a      	ldr	r2, [r3, #24]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f042 0210 	orr.w	r2, r2, #16
 800e9ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f022 0201 	bic.w	r2, r2, #1
 800e9be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	6919      	ldr	r1, [r3, #16]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	4b3c      	ldr	r3, [pc, #240]	; (800eabc <SPI_CloseTransfer+0x13c>)
 800e9cc:	400b      	ands	r3, r1
 800e9ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	689a      	ldr	r2, [r3, #8]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e9de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	2b04      	cmp	r3, #4
 800e9ea:	d014      	beq.n	800ea16 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f003 0320 	and.w	r3, r3, #32
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00f      	beq.n	800ea16 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	699a      	ldr	r2, [r3, #24]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f042 0220 	orr.w	r2, r2, #32
 800ea14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	d014      	beq.n	800ea4c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00f      	beq.n	800ea4c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea32:	f043 0204 	orr.w	r2, r3, #4
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	699a      	ldr	r2, [r3, #24]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea4a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00f      	beq.n	800ea76 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea5c:	f043 0201 	orr.w	r2, r3, #1
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	699a      	ldr	r2, [r3, #24]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea74:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00f      	beq.n	800eaa0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea86:	f043 0208 	orr.w	r2, r3, #8
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	699a      	ldr	r2, [r3, #24]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea9e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eab0:	bf00      	nop
 800eab2:	3714      	adds	r7, #20
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr
 800eabc:	fffffc90 	.word	0xfffffc90

0800eac0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eacc:	095b      	lsrs	r3, r3, #5
 800eace:	3301      	adds	r3, #1
 800ead0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	3301      	adds	r3, #1
 800ead8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	3307      	adds	r3, #7
 800eade:	08db      	lsrs	r3, r3, #3
 800eae0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	68fa      	ldr	r2, [r7, #12]
 800eae6:	fb02 f303 	mul.w	r3, r2, r3
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e049      	b.n	800eb9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d106      	bne.n	800eb22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7f4 feff 	bl	8003920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2202      	movs	r2, #2
 800eb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3304      	adds	r3, #4
 800eb32:	4619      	mov	r1, r3
 800eb34:	4610      	mov	r0, r2
 800eb36:	f000 fe7d 	bl	800f834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2201      	movs	r2, #1
 800eb96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d001      	beq.n	800ebbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e054      	b.n	800ec66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f042 0201 	orr.w	r2, r2, #1
 800ebd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a26      	ldr	r2, [pc, #152]	; (800ec74 <HAL_TIM_Base_Start_IT+0xd0>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d022      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebe6:	d01d      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a22      	ldr	r2, [pc, #136]	; (800ec78 <HAL_TIM_Base_Start_IT+0xd4>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d018      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4a21      	ldr	r2, [pc, #132]	; (800ec7c <HAL_TIM_Base_Start_IT+0xd8>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d013      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a1f      	ldr	r2, [pc, #124]	; (800ec80 <HAL_TIM_Base_Start_IT+0xdc>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d00e      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a1e      	ldr	r2, [pc, #120]	; (800ec84 <HAL_TIM_Base_Start_IT+0xe0>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d009      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a1c      	ldr	r2, [pc, #112]	; (800ec88 <HAL_TIM_Base_Start_IT+0xe4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d004      	beq.n	800ec24 <HAL_TIM_Base_Start_IT+0x80>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a1b      	ldr	r2, [pc, #108]	; (800ec8c <HAL_TIM_Base_Start_IT+0xe8>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d115      	bne.n	800ec50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	689a      	ldr	r2, [r3, #8]
 800ec2a:	4b19      	ldr	r3, [pc, #100]	; (800ec90 <HAL_TIM_Base_Start_IT+0xec>)
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b06      	cmp	r3, #6
 800ec34:	d015      	beq.n	800ec62 <HAL_TIM_Base_Start_IT+0xbe>
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec3c:	d011      	beq.n	800ec62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f042 0201 	orr.w	r2, r2, #1
 800ec4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec4e:	e008      	b.n	800ec62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f042 0201 	orr.w	r2, r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	e000      	b.n	800ec64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	40010000 	.word	0x40010000
 800ec78:	40000400 	.word	0x40000400
 800ec7c:	40000800 	.word	0x40000800
 800ec80:	40000c00 	.word	0x40000c00
 800ec84:	40010400 	.word	0x40010400
 800ec88:	40001800 	.word	0x40001800
 800ec8c:	40014000 	.word	0x40014000
 800ec90:	00010007 	.word	0x00010007

0800ec94 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d109      	bne.n	800ecbc <HAL_TIM_OC_Start_IT+0x28>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	bf14      	ite	ne
 800ecb4:	2301      	movne	r3, #1
 800ecb6:	2300      	moveq	r3, #0
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	e03c      	b.n	800ed36 <HAL_TIM_OC_Start_IT+0xa2>
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2b04      	cmp	r3, #4
 800ecc0:	d109      	bne.n	800ecd6 <HAL_TIM_OC_Start_IT+0x42>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	bf14      	ite	ne
 800ecce:	2301      	movne	r3, #1
 800ecd0:	2300      	moveq	r3, #0
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	e02f      	b.n	800ed36 <HAL_TIM_OC_Start_IT+0xa2>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2b08      	cmp	r3, #8
 800ecda:	d109      	bne.n	800ecf0 <HAL_TIM_OC_Start_IT+0x5c>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	bf14      	ite	ne
 800ece8:	2301      	movne	r3, #1
 800ecea:	2300      	moveq	r3, #0
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	e022      	b.n	800ed36 <HAL_TIM_OC_Start_IT+0xa2>
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	2b0c      	cmp	r3, #12
 800ecf4:	d109      	bne.n	800ed0a <HAL_TIM_OC_Start_IT+0x76>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	bf14      	ite	ne
 800ed02:	2301      	movne	r3, #1
 800ed04:	2300      	moveq	r3, #0
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	e015      	b.n	800ed36 <HAL_TIM_OC_Start_IT+0xa2>
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b10      	cmp	r3, #16
 800ed0e:	d109      	bne.n	800ed24 <HAL_TIM_OC_Start_IT+0x90>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	bf14      	ite	ne
 800ed1c:	2301      	movne	r3, #1
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	e008      	b.n	800ed36 <HAL_TIM_OC_Start_IT+0xa2>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	bf14      	ite	ne
 800ed30:	2301      	movne	r3, #1
 800ed32:	2300      	moveq	r3, #0
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e0ec      	b.n	800ef18 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d104      	bne.n	800ed4e <HAL_TIM_OC_Start_IT+0xba>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2202      	movs	r2, #2
 800ed48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed4c:	e023      	b.n	800ed96 <HAL_TIM_OC_Start_IT+0x102>
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	2b04      	cmp	r3, #4
 800ed52:	d104      	bne.n	800ed5e <HAL_TIM_OC_Start_IT+0xca>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2202      	movs	r2, #2
 800ed58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed5c:	e01b      	b.n	800ed96 <HAL_TIM_OC_Start_IT+0x102>
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b08      	cmp	r3, #8
 800ed62:	d104      	bne.n	800ed6e <HAL_TIM_OC_Start_IT+0xda>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2202      	movs	r2, #2
 800ed68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed6c:	e013      	b.n	800ed96 <HAL_TIM_OC_Start_IT+0x102>
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b0c      	cmp	r3, #12
 800ed72:	d104      	bne.n	800ed7e <HAL_TIM_OC_Start_IT+0xea>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2202      	movs	r2, #2
 800ed78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed7c:	e00b      	b.n	800ed96 <HAL_TIM_OC_Start_IT+0x102>
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b10      	cmp	r3, #16
 800ed82:	d104      	bne.n	800ed8e <HAL_TIM_OC_Start_IT+0xfa>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2202      	movs	r2, #2
 800ed88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed8c:	e003      	b.n	800ed96 <HAL_TIM_OC_Start_IT+0x102>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2202      	movs	r2, #2
 800ed92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b0c      	cmp	r3, #12
 800ed9a:	d841      	bhi.n	800ee20 <HAL_TIM_OC_Start_IT+0x18c>
 800ed9c:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <HAL_TIM_OC_Start_IT+0x110>)
 800ed9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800edd9 	.word	0x0800edd9
 800eda8:	0800ee21 	.word	0x0800ee21
 800edac:	0800ee21 	.word	0x0800ee21
 800edb0:	0800ee21 	.word	0x0800ee21
 800edb4:	0800edeb 	.word	0x0800edeb
 800edb8:	0800ee21 	.word	0x0800ee21
 800edbc:	0800ee21 	.word	0x0800ee21
 800edc0:	0800ee21 	.word	0x0800ee21
 800edc4:	0800edfd 	.word	0x0800edfd
 800edc8:	0800ee21 	.word	0x0800ee21
 800edcc:	0800ee21 	.word	0x0800ee21
 800edd0:	0800ee21 	.word	0x0800ee21
 800edd4:	0800ee0f 	.word	0x0800ee0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68da      	ldr	r2, [r3, #12]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f042 0202 	orr.w	r2, r2, #2
 800ede6:	60da      	str	r2, [r3, #12]
      break;
 800ede8:	e01d      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68da      	ldr	r2, [r3, #12]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f042 0204 	orr.w	r2, r2, #4
 800edf8:	60da      	str	r2, [r3, #12]
      break;
 800edfa:	e014      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68da      	ldr	r2, [r3, #12]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f042 0208 	orr.w	r2, r2, #8
 800ee0a:	60da      	str	r2, [r3, #12]
      break;
 800ee0c:	e00b      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68da      	ldr	r2, [r3, #12]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f042 0210 	orr.w	r2, r2, #16
 800ee1c:	60da      	str	r2, [r3, #12]
      break;
 800ee1e:	e002      	b.n	800ee26 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	73fb      	strb	r3, [r7, #15]
      break;
 800ee24:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee26:	7bfb      	ldrb	r3, [r7, #15]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d174      	bne.n	800ef16 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2201      	movs	r2, #1
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f001 f917 	bl	8010068 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a38      	ldr	r2, [pc, #224]	; (800ef20 <HAL_TIM_OC_Start_IT+0x28c>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d013      	beq.n	800ee6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a36      	ldr	r2, [pc, #216]	; (800ef24 <HAL_TIM_OC_Start_IT+0x290>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d00e      	beq.n	800ee6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4a35      	ldr	r2, [pc, #212]	; (800ef28 <HAL_TIM_OC_Start_IT+0x294>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d009      	beq.n	800ee6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a33      	ldr	r2, [pc, #204]	; (800ef2c <HAL_TIM_OC_Start_IT+0x298>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d004      	beq.n	800ee6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a32      	ldr	r2, [pc, #200]	; (800ef30 <HAL_TIM_OC_Start_IT+0x29c>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d101      	bne.n	800ee70 <HAL_TIM_OC_Start_IT+0x1dc>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e000      	b.n	800ee72 <HAL_TIM_OC_Start_IT+0x1de>
 800ee70:	2300      	movs	r3, #0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d007      	beq.n	800ee86 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a25      	ldr	r2, [pc, #148]	; (800ef20 <HAL_TIM_OC_Start_IT+0x28c>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d022      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee98:	d01d      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a25      	ldr	r2, [pc, #148]	; (800ef34 <HAL_TIM_OC_Start_IT+0x2a0>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d018      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a23      	ldr	r2, [pc, #140]	; (800ef38 <HAL_TIM_OC_Start_IT+0x2a4>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d013      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a22      	ldr	r2, [pc, #136]	; (800ef3c <HAL_TIM_OC_Start_IT+0x2a8>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d00e      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a19      	ldr	r2, [pc, #100]	; (800ef24 <HAL_TIM_OC_Start_IT+0x290>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d009      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a1e      	ldr	r2, [pc, #120]	; (800ef40 <HAL_TIM_OC_Start_IT+0x2ac>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d004      	beq.n	800eed6 <HAL_TIM_OC_Start_IT+0x242>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a15      	ldr	r2, [pc, #84]	; (800ef28 <HAL_TIM_OC_Start_IT+0x294>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d115      	bne.n	800ef02 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	689a      	ldr	r2, [r3, #8]
 800eedc:	4b19      	ldr	r3, [pc, #100]	; (800ef44 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eede:	4013      	ands	r3, r2
 800eee0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b06      	cmp	r3, #6
 800eee6:	d015      	beq.n	800ef14 <HAL_TIM_OC_Start_IT+0x280>
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeee:	d011      	beq.n	800ef14 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f042 0201 	orr.w	r2, r2, #1
 800eefe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef00:	e008      	b.n	800ef14 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f042 0201 	orr.w	r2, r2, #1
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	e000      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ef16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	40010000 	.word	0x40010000
 800ef24:	40010400 	.word	0x40010400
 800ef28:	40014000 	.word	0x40014000
 800ef2c:	40014400 	.word	0x40014400
 800ef30:	40014800 	.word	0x40014800
 800ef34:	40000400 	.word	0x40000400
 800ef38:	40000800 	.word	0x40000800
 800ef3c:	40000c00 	.word	0x40000c00
 800ef40:	40001800 	.word	0x40001800
 800ef44:	00010007 	.word	0x00010007

0800ef48 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef52:	2300      	movs	r3, #0
 800ef54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	2b0c      	cmp	r3, #12
 800ef5a:	d841      	bhi.n	800efe0 <HAL_TIM_OC_Stop_IT+0x98>
 800ef5c:	a201      	add	r2, pc, #4	; (adr r2, 800ef64 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ef5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef62:	bf00      	nop
 800ef64:	0800ef99 	.word	0x0800ef99
 800ef68:	0800efe1 	.word	0x0800efe1
 800ef6c:	0800efe1 	.word	0x0800efe1
 800ef70:	0800efe1 	.word	0x0800efe1
 800ef74:	0800efab 	.word	0x0800efab
 800ef78:	0800efe1 	.word	0x0800efe1
 800ef7c:	0800efe1 	.word	0x0800efe1
 800ef80:	0800efe1 	.word	0x0800efe1
 800ef84:	0800efbd 	.word	0x0800efbd
 800ef88:	0800efe1 	.word	0x0800efe1
 800ef8c:	0800efe1 	.word	0x0800efe1
 800ef90:	0800efe1 	.word	0x0800efe1
 800ef94:	0800efcf 	.word	0x0800efcf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	68da      	ldr	r2, [r3, #12]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f022 0202 	bic.w	r2, r2, #2
 800efa6:	60da      	str	r2, [r3, #12]
      break;
 800efa8:	e01d      	b.n	800efe6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f022 0204 	bic.w	r2, r2, #4
 800efb8:	60da      	str	r2, [r3, #12]
      break;
 800efba:	e014      	b.n	800efe6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68da      	ldr	r2, [r3, #12]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f022 0208 	bic.w	r2, r2, #8
 800efca:	60da      	str	r2, [r3, #12]
      break;
 800efcc:	e00b      	b.n	800efe6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68da      	ldr	r2, [r3, #12]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f022 0210 	bic.w	r2, r2, #16
 800efdc:	60da      	str	r2, [r3, #12]
      break;
 800efde:	e002      	b.n	800efe6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	73fb      	strb	r3, [r7, #15]
      break;
 800efe4:	bf00      	nop
  }

  if (status == HAL_OK)
 800efe6:	7bfb      	ldrb	r3, [r7, #15]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f040 8081 	bne.w	800f0f0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2200      	movs	r2, #0
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f001 f836 	bl	8010068 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a3e      	ldr	r2, [pc, #248]	; (800f0fc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d013      	beq.n	800f02e <HAL_TIM_OC_Stop_IT+0xe6>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a3d      	ldr	r2, [pc, #244]	; (800f100 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d00e      	beq.n	800f02e <HAL_TIM_OC_Stop_IT+0xe6>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a3b      	ldr	r2, [pc, #236]	; (800f104 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d009      	beq.n	800f02e <HAL_TIM_OC_Stop_IT+0xe6>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a3a      	ldr	r2, [pc, #232]	; (800f108 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d004      	beq.n	800f02e <HAL_TIM_OC_Stop_IT+0xe6>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a38      	ldr	r2, [pc, #224]	; (800f10c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d101      	bne.n	800f032 <HAL_TIM_OC_Stop_IT+0xea>
 800f02e:	2301      	movs	r3, #1
 800f030:	e000      	b.n	800f034 <HAL_TIM_OC_Stop_IT+0xec>
 800f032:	2300      	movs	r3, #0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d017      	beq.n	800f068 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	6a1a      	ldr	r2, [r3, #32]
 800f03e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f042:	4013      	ands	r3, r2
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10f      	bne.n	800f068 <HAL_TIM_OC_Stop_IT+0x120>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	6a1a      	ldr	r2, [r3, #32]
 800f04e:	f240 4344 	movw	r3, #1092	; 0x444
 800f052:	4013      	ands	r3, r2
 800f054:	2b00      	cmp	r3, #0
 800f056:	d107      	bne.n	800f068 <HAL_TIM_OC_Stop_IT+0x120>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f066:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6a1a      	ldr	r2, [r3, #32]
 800f06e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f072:	4013      	ands	r3, r2
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10f      	bne.n	800f098 <HAL_TIM_OC_Stop_IT+0x150>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6a1a      	ldr	r2, [r3, #32]
 800f07e:	f240 4344 	movw	r3, #1092	; 0x444
 800f082:	4013      	ands	r3, r2
 800f084:	2b00      	cmp	r3, #0
 800f086:	d107      	bne.n	800f098 <HAL_TIM_OC_Stop_IT+0x150>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 0201 	bic.w	r2, r2, #1
 800f096:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d104      	bne.n	800f0a8 <HAL_TIM_OC_Stop_IT+0x160>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0a6:	e023      	b.n	800f0f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d104      	bne.n	800f0b8 <HAL_TIM_OC_Stop_IT+0x170>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0b6:	e01b      	b.n	800f0f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2b08      	cmp	r3, #8
 800f0bc:	d104      	bne.n	800f0c8 <HAL_TIM_OC_Stop_IT+0x180>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0c6:	e013      	b.n	800f0f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2b0c      	cmp	r3, #12
 800f0cc:	d104      	bne.n	800f0d8 <HAL_TIM_OC_Stop_IT+0x190>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0d6:	e00b      	b.n	800f0f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	2b10      	cmp	r3, #16
 800f0dc:	d104      	bne.n	800f0e8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0e6:	e003      	b.n	800f0f0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	40010000 	.word	0x40010000
 800f100:	40010400 	.word	0x40010400
 800f104:	40014000 	.word	0x40014000
 800f108:	40014400 	.word	0x40014400
 800f10c:	40014800 	.word	0x40014800

0800f110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	e049      	b.n	800f1b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d106      	bne.n	800f13c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f841 	bl	800f1be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2202      	movs	r2, #2
 800f140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3304      	adds	r3, #4
 800f14c:	4619      	mov	r1, r3
 800f14e:	4610      	mov	r0, r2
 800f150:	f000 fb70 	bl	800f834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2201      	movs	r2, #1
 800f158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2201      	movs	r2, #1
 800f160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2201      	movs	r2, #1
 800f168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2201      	movs	r2, #1
 800f170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2201      	movs	r2, #1
 800f188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f1be:	b480      	push	{r7}
 800f1c0:	b083      	sub	sp, #12
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f1c6:	bf00      	nop
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b084      	sub	sp, #16
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	691b      	ldr	r3, [r3, #16]
 800f1e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	f003 0302 	and.w	r3, r3, #2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d020      	beq.n	800f236 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f003 0302 	and.w	r3, r3, #2
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d01b      	beq.n	800f236 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f06f 0202 	mvn.w	r2, #2
 800f206:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	f003 0303 	and.w	r3, r3, #3
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 faeb 	bl	800f7f8 <HAL_TIM_IC_CaptureCallback>
 800f222:	e005      	b.n	800f230 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7f1 f9eb 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 faee 	bl	800f80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	f003 0304 	and.w	r3, r3, #4
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d020      	beq.n	800f282 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f003 0304 	and.w	r3, r3, #4
 800f246:	2b00      	cmp	r3, #0
 800f248:	d01b      	beq.n	800f282 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f06f 0204 	mvn.w	r2, #4
 800f252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2202      	movs	r2, #2
 800f258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	699b      	ldr	r3, [r3, #24]
 800f260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f264:	2b00      	cmp	r3, #0
 800f266:	d003      	beq.n	800f270 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fac5 	bl	800f7f8 <HAL_TIM_IC_CaptureCallback>
 800f26e:	e005      	b.n	800f27c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7f1 f9c5 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fac8 	bl	800f80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f003 0308 	and.w	r3, r3, #8
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d020      	beq.n	800f2ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f003 0308 	and.w	r3, r3, #8
 800f292:	2b00      	cmp	r3, #0
 800f294:	d01b      	beq.n	800f2ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f06f 0208 	mvn.w	r2, #8
 800f29e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2204      	movs	r2, #4
 800f2a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	69db      	ldr	r3, [r3, #28]
 800f2ac:	f003 0303 	and.w	r3, r3, #3
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d003      	beq.n	800f2bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fa9f 	bl	800f7f8 <HAL_TIM_IC_CaptureCallback>
 800f2ba:	e005      	b.n	800f2c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7f1 f99f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 faa2 	bl	800f80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f003 0310 	and.w	r3, r3, #16
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d020      	beq.n	800f31a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f003 0310 	and.w	r3, r3, #16
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01b      	beq.n	800f31a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f06f 0210 	mvn.w	r2, #16
 800f2ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2208      	movs	r2, #8
 800f2f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 fa79 	bl	800f7f8 <HAL_TIM_IC_CaptureCallback>
 800f306:	e005      	b.n	800f314 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7f1 f979 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fa7c 	bl	800f80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f003 0301 	and.w	r3, r3, #1
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00c      	beq.n	800f33e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f003 0301 	and.w	r3, r3, #1
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d007      	beq.n	800f33e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f06f 0201 	mvn.w	r2, #1
 800f336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7f3 ffcb 	bl	80032d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f344:	2b00      	cmp	r3, #0
 800f346:	d104      	bne.n	800f352 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00c      	beq.n	800f36c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 ffba 	bl	80102e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00c      	beq.n	800f390 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d007      	beq.n	800f390 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 ffb2 	bl	80102f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00c      	beq.n	800f3b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d007      	beq.n	800f3b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 fa36 	bl	800f820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	f003 0320 	and.w	r3, r3, #32
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00c      	beq.n	800f3d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f003 0320 	and.w	r3, r3, #32
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d007      	beq.n	800f3d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f06f 0220 	mvn.w	r2, #32
 800f3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 ff7a 	bl	80102cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3d8:	bf00      	nop
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b086      	sub	sp, #24
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d101      	bne.n	800f3fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f3fa:	2302      	movs	r3, #2
 800f3fc:	e0ff      	b.n	800f5fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2201      	movs	r2, #1
 800f402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b14      	cmp	r3, #20
 800f40a:	f200 80f0 	bhi.w	800f5ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f40e:	a201      	add	r2, pc, #4	; (adr r2, 800f414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f414:	0800f469 	.word	0x0800f469
 800f418:	0800f5ef 	.word	0x0800f5ef
 800f41c:	0800f5ef 	.word	0x0800f5ef
 800f420:	0800f5ef 	.word	0x0800f5ef
 800f424:	0800f4a9 	.word	0x0800f4a9
 800f428:	0800f5ef 	.word	0x0800f5ef
 800f42c:	0800f5ef 	.word	0x0800f5ef
 800f430:	0800f5ef 	.word	0x0800f5ef
 800f434:	0800f4eb 	.word	0x0800f4eb
 800f438:	0800f5ef 	.word	0x0800f5ef
 800f43c:	0800f5ef 	.word	0x0800f5ef
 800f440:	0800f5ef 	.word	0x0800f5ef
 800f444:	0800f52b 	.word	0x0800f52b
 800f448:	0800f5ef 	.word	0x0800f5ef
 800f44c:	0800f5ef 	.word	0x0800f5ef
 800f450:	0800f5ef 	.word	0x0800f5ef
 800f454:	0800f56d 	.word	0x0800f56d
 800f458:	0800f5ef 	.word	0x0800f5ef
 800f45c:	0800f5ef 	.word	0x0800f5ef
 800f460:	0800f5ef 	.word	0x0800f5ef
 800f464:	0800f5ad 	.word	0x0800f5ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68b9      	ldr	r1, [r7, #8]
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 fa86 	bl	800f980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	699a      	ldr	r2, [r3, #24]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f042 0208 	orr.w	r2, r2, #8
 800f482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	699a      	ldr	r2, [r3, #24]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f022 0204 	bic.w	r2, r2, #4
 800f492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	6999      	ldr	r1, [r3, #24]
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	691a      	ldr	r2, [r3, #16]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	430a      	orrs	r2, r1
 800f4a4:	619a      	str	r2, [r3, #24]
      break;
 800f4a6:	e0a5      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	68b9      	ldr	r1, [r7, #8]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 faf6 	bl	800faa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	699a      	ldr	r2, [r3, #24]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	699a      	ldr	r2, [r3, #24]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6999      	ldr	r1, [r3, #24]
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	021a      	lsls	r2, r3, #8
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	430a      	orrs	r2, r1
 800f4e6:	619a      	str	r2, [r3, #24]
      break;
 800f4e8:	e084      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	68b9      	ldr	r1, [r7, #8]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 fb5f 	bl	800fbb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	69da      	ldr	r2, [r3, #28]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f042 0208 	orr.w	r2, r2, #8
 800f504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	69da      	ldr	r2, [r3, #28]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f022 0204 	bic.w	r2, r2, #4
 800f514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	69d9      	ldr	r1, [r3, #28]
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	691a      	ldr	r2, [r3, #16]
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	430a      	orrs	r2, r1
 800f526:	61da      	str	r2, [r3, #28]
      break;
 800f528:	e064      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	68b9      	ldr	r1, [r7, #8]
 800f530:	4618      	mov	r0, r3
 800f532:	f000 fbc7 	bl	800fcc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	69da      	ldr	r2, [r3, #28]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	69da      	ldr	r2, [r3, #28]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	69d9      	ldr	r1, [r3, #28]
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	691b      	ldr	r3, [r3, #16]
 800f560:	021a      	lsls	r2, r3, #8
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	430a      	orrs	r2, r1
 800f568:	61da      	str	r2, [r3, #28]
      break;
 800f56a:	e043      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68b9      	ldr	r1, [r7, #8]
 800f572:	4618      	mov	r0, r3
 800f574:	f000 fc10 	bl	800fd98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f042 0208 	orr.w	r2, r2, #8
 800f586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f022 0204 	bic.w	r2, r2, #4
 800f596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	691a      	ldr	r2, [r3, #16]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	430a      	orrs	r2, r1
 800f5a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f5aa:	e023      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f000 fc54 	bl	800fe60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	021a      	lsls	r2, r3, #8
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f5ec:	e002      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	75fb      	strb	r3, [r7, #23]
      break;
 800f5f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop

0800f608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d101      	bne.n	800f624 <HAL_TIM_ConfigClockSource+0x1c>
 800f620:	2302      	movs	r3, #2
 800f622:	e0dc      	b.n	800f7de <HAL_TIM_ConfigClockSource+0x1d6>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2202      	movs	r2, #2
 800f630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	4b6a      	ldr	r3, [pc, #424]	; (800f7e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f640:	4013      	ands	r3, r2
 800f642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f64a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68ba      	ldr	r2, [r7, #8]
 800f652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a64      	ldr	r2, [pc, #400]	; (800f7ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	f000 80a9 	beq.w	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f660:	4a62      	ldr	r2, [pc, #392]	; (800f7ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800f662:	4293      	cmp	r3, r2
 800f664:	f200 80ae 	bhi.w	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f668:	4a61      	ldr	r2, [pc, #388]	; (800f7f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	f000 80a1 	beq.w	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f670:	4a5f      	ldr	r2, [pc, #380]	; (800f7f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f672:	4293      	cmp	r3, r2
 800f674:	f200 80a6 	bhi.w	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f678:	4a5e      	ldr	r2, [pc, #376]	; (800f7f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	f000 8099 	beq.w	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f680:	4a5c      	ldr	r2, [pc, #368]	; (800f7f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f682:	4293      	cmp	r3, r2
 800f684:	f200 809e 	bhi.w	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f688:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f68c:	f000 8091 	beq.w	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f690:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f694:	f200 8096 	bhi.w	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f69c:	f000 8089 	beq.w	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6a4:	f200 808e 	bhi.w	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6ac:	d03e      	beq.n	800f72c <HAL_TIM_ConfigClockSource+0x124>
 800f6ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6b2:	f200 8087 	bhi.w	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6ba:	f000 8086 	beq.w	800f7ca <HAL_TIM_ConfigClockSource+0x1c2>
 800f6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6c2:	d87f      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6c4:	2b70      	cmp	r3, #112	; 0x70
 800f6c6:	d01a      	beq.n	800f6fe <HAL_TIM_ConfigClockSource+0xf6>
 800f6c8:	2b70      	cmp	r3, #112	; 0x70
 800f6ca:	d87b      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6cc:	2b60      	cmp	r3, #96	; 0x60
 800f6ce:	d050      	beq.n	800f772 <HAL_TIM_ConfigClockSource+0x16a>
 800f6d0:	2b60      	cmp	r3, #96	; 0x60
 800f6d2:	d877      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6d4:	2b50      	cmp	r3, #80	; 0x50
 800f6d6:	d03c      	beq.n	800f752 <HAL_TIM_ConfigClockSource+0x14a>
 800f6d8:	2b50      	cmp	r3, #80	; 0x50
 800f6da:	d873      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6dc:	2b40      	cmp	r3, #64	; 0x40
 800f6de:	d058      	beq.n	800f792 <HAL_TIM_ConfigClockSource+0x18a>
 800f6e0:	2b40      	cmp	r3, #64	; 0x40
 800f6e2:	d86f      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6e4:	2b30      	cmp	r3, #48	; 0x30
 800f6e6:	d064      	beq.n	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6e8:	2b30      	cmp	r3, #48	; 0x30
 800f6ea:	d86b      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6ec:	2b20      	cmp	r3, #32
 800f6ee:	d060      	beq.n	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6f0:	2b20      	cmp	r3, #32
 800f6f2:	d867      	bhi.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d05c      	beq.n	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6f8:	2b10      	cmp	r3, #16
 800f6fa:	d05a      	beq.n	800f7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6fc:	e062      	b.n	800f7c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6818      	ldr	r0, [r3, #0]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	6899      	ldr	r1, [r3, #8]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	685a      	ldr	r2, [r3, #4]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	f000 fc8b 	bl	8010028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	609a      	str	r2, [r3, #8]
      break;
 800f72a:	e04f      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6818      	ldr	r0, [r3, #0]
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	6899      	ldr	r1, [r3, #8]
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	f000 fc74 	bl	8010028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689a      	ldr	r2, [r3, #8]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f74e:	609a      	str	r2, [r3, #8]
      break;
 800f750:	e03c      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6818      	ldr	r0, [r3, #0]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	6859      	ldr	r1, [r3, #4]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	461a      	mov	r2, r3
 800f760:	f000 fbe4 	bl	800ff2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2150      	movs	r1, #80	; 0x50
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 fc3e 	bl	800ffec <TIM_ITRx_SetConfig>
      break;
 800f770:	e02c      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	6859      	ldr	r1, [r3, #4]
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	461a      	mov	r2, r3
 800f780:	f000 fc03 	bl	800ff8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2160      	movs	r1, #96	; 0x60
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 fc2e 	bl	800ffec <TIM_ITRx_SetConfig>
      break;
 800f790:	e01c      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6818      	ldr	r0, [r3, #0]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	6859      	ldr	r1, [r3, #4]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	f000 fbc4 	bl	800ff2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2140      	movs	r1, #64	; 0x40
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 fc1e 	bl	800ffec <TIM_ITRx_SetConfig>
      break;
 800f7b0:	e00c      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4610      	mov	r0, r2
 800f7be:	f000 fc15 	bl	800ffec <TIM_ITRx_SetConfig>
      break;
 800f7c2:	e003      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7c8:	e000      	b.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f7ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	ffceff88 	.word	0xffceff88
 800f7ec:	00100040 	.word	0x00100040
 800f7f0:	00100030 	.word	0x00100030
 800f7f4:	00100020 	.word	0x00100020

0800f7f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4a46      	ldr	r2, [pc, #280]	; (800f960 <TIM_Base_SetConfig+0x12c>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d013      	beq.n	800f874 <TIM_Base_SetConfig+0x40>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f852:	d00f      	beq.n	800f874 <TIM_Base_SetConfig+0x40>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4a43      	ldr	r2, [pc, #268]	; (800f964 <TIM_Base_SetConfig+0x130>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d00b      	beq.n	800f874 <TIM_Base_SetConfig+0x40>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a42      	ldr	r2, [pc, #264]	; (800f968 <TIM_Base_SetConfig+0x134>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d007      	beq.n	800f874 <TIM_Base_SetConfig+0x40>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a41      	ldr	r2, [pc, #260]	; (800f96c <TIM_Base_SetConfig+0x138>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d003      	beq.n	800f874 <TIM_Base_SetConfig+0x40>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a40      	ldr	r2, [pc, #256]	; (800f970 <TIM_Base_SetConfig+0x13c>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d108      	bne.n	800f886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f87a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	4313      	orrs	r3, r2
 800f884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a35      	ldr	r2, [pc, #212]	; (800f960 <TIM_Base_SetConfig+0x12c>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d01f      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f894:	d01b      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a32      	ldr	r2, [pc, #200]	; (800f964 <TIM_Base_SetConfig+0x130>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d017      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a31      	ldr	r2, [pc, #196]	; (800f968 <TIM_Base_SetConfig+0x134>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d013      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a30      	ldr	r2, [pc, #192]	; (800f96c <TIM_Base_SetConfig+0x138>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d00f      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a2f      	ldr	r2, [pc, #188]	; (800f970 <TIM_Base_SetConfig+0x13c>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d00b      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a2e      	ldr	r2, [pc, #184]	; (800f974 <TIM_Base_SetConfig+0x140>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d007      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a2d      	ldr	r2, [pc, #180]	; (800f978 <TIM_Base_SetConfig+0x144>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d003      	beq.n	800f8ce <TIM_Base_SetConfig+0x9a>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a2c      	ldr	r2, [pc, #176]	; (800f97c <TIM_Base_SetConfig+0x148>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d108      	bne.n	800f8e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	689a      	ldr	r2, [r3, #8]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a16      	ldr	r2, [pc, #88]	; (800f960 <TIM_Base_SetConfig+0x12c>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d00f      	beq.n	800f92c <TIM_Base_SetConfig+0xf8>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a18      	ldr	r2, [pc, #96]	; (800f970 <TIM_Base_SetConfig+0x13c>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d00b      	beq.n	800f92c <TIM_Base_SetConfig+0xf8>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a17      	ldr	r2, [pc, #92]	; (800f974 <TIM_Base_SetConfig+0x140>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d007      	beq.n	800f92c <TIM_Base_SetConfig+0xf8>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a16      	ldr	r2, [pc, #88]	; (800f978 <TIM_Base_SetConfig+0x144>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d003      	beq.n	800f92c <TIM_Base_SetConfig+0xf8>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a15      	ldr	r2, [pc, #84]	; (800f97c <TIM_Base_SetConfig+0x148>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d103      	bne.n	800f934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	691a      	ldr	r2, [r3, #16]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	2b01      	cmp	r3, #1
 800f944:	d105      	bne.n	800f952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	f023 0201 	bic.w	r2, r3, #1
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	611a      	str	r2, [r3, #16]
  }
}
 800f952:	bf00      	nop
 800f954:	3714      	adds	r7, #20
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	40010000 	.word	0x40010000
 800f964:	40000400 	.word	0x40000400
 800f968:	40000800 	.word	0x40000800
 800f96c:	40000c00 	.word	0x40000c00
 800f970:	40010400 	.word	0x40010400
 800f974:	40014000 	.word	0x40014000
 800f978:	40014400 	.word	0x40014400
 800f97c:	40014800 	.word	0x40014800

0800f980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f980:	b480      	push	{r7}
 800f982:	b087      	sub	sp, #28
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a1b      	ldr	r3, [r3, #32]
 800f994:	f023 0201 	bic.w	r2, r3, #1
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	699b      	ldr	r3, [r3, #24]
 800f9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4b37      	ldr	r3, [pc, #220]	; (800fa88 <TIM_OC1_SetConfig+0x108>)
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f023 0303 	bic.w	r3, r3, #3
 800f9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f023 0302 	bic.w	r3, r3, #2
 800f9c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	697a      	ldr	r2, [r7, #20]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a2d      	ldr	r2, [pc, #180]	; (800fa8c <TIM_OC1_SetConfig+0x10c>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d00f      	beq.n	800f9fc <TIM_OC1_SetConfig+0x7c>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a2c      	ldr	r2, [pc, #176]	; (800fa90 <TIM_OC1_SetConfig+0x110>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d00b      	beq.n	800f9fc <TIM_OC1_SetConfig+0x7c>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a2b      	ldr	r2, [pc, #172]	; (800fa94 <TIM_OC1_SetConfig+0x114>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d007      	beq.n	800f9fc <TIM_OC1_SetConfig+0x7c>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4a2a      	ldr	r2, [pc, #168]	; (800fa98 <TIM_OC1_SetConfig+0x118>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d003      	beq.n	800f9fc <TIM_OC1_SetConfig+0x7c>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4a29      	ldr	r2, [pc, #164]	; (800fa9c <TIM_OC1_SetConfig+0x11c>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d10c      	bne.n	800fa16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f023 0308 	bic.w	r3, r3, #8
 800fa02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	f023 0304 	bic.w	r3, r3, #4
 800fa14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a1c      	ldr	r2, [pc, #112]	; (800fa8c <TIM_OC1_SetConfig+0x10c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d00f      	beq.n	800fa3e <TIM_OC1_SetConfig+0xbe>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a1b      	ldr	r2, [pc, #108]	; (800fa90 <TIM_OC1_SetConfig+0x110>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d00b      	beq.n	800fa3e <TIM_OC1_SetConfig+0xbe>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a1a      	ldr	r2, [pc, #104]	; (800fa94 <TIM_OC1_SetConfig+0x114>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d007      	beq.n	800fa3e <TIM_OC1_SetConfig+0xbe>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a19      	ldr	r2, [pc, #100]	; (800fa98 <TIM_OC1_SetConfig+0x118>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d003      	beq.n	800fa3e <TIM_OC1_SetConfig+0xbe>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a18      	ldr	r2, [pc, #96]	; (800fa9c <TIM_OC1_SetConfig+0x11c>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d111      	bne.n	800fa62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	695b      	ldr	r3, [r3, #20]
 800fa52:	693a      	ldr	r2, [r7, #16]
 800fa54:	4313      	orrs	r3, r2
 800fa56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	699b      	ldr	r3, [r3, #24]
 800fa5c:	693a      	ldr	r2, [r7, #16]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	685a      	ldr	r2, [r3, #4]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	697a      	ldr	r2, [r7, #20]
 800fa7a:	621a      	str	r2, [r3, #32]
}
 800fa7c:	bf00      	nop
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	fffeff8f 	.word	0xfffeff8f
 800fa8c:	40010000 	.word	0x40010000
 800fa90:	40010400 	.word	0x40010400
 800fa94:	40014000 	.word	0x40014000
 800fa98:	40014400 	.word	0x40014400
 800fa9c:	40014800 	.word	0x40014800

0800faa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a1b      	ldr	r3, [r3, #32]
 800faae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a1b      	ldr	r3, [r3, #32]
 800fab4:	f023 0210 	bic.w	r2, r3, #16
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	699b      	ldr	r3, [r3, #24]
 800fac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fac8:	68fa      	ldr	r2, [r7, #12]
 800faca:	4b34      	ldr	r3, [pc, #208]	; (800fb9c <TIM_OC2_SetConfig+0xfc>)
 800facc:	4013      	ands	r3, r2
 800face:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	021b      	lsls	r3, r3, #8
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	f023 0320 	bic.w	r3, r3, #32
 800faea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	689b      	ldr	r3, [r3, #8]
 800faf0:	011b      	lsls	r3, r3, #4
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	4313      	orrs	r3, r2
 800faf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a29      	ldr	r2, [pc, #164]	; (800fba0 <TIM_OC2_SetConfig+0x100>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d003      	beq.n	800fb08 <TIM_OC2_SetConfig+0x68>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a28      	ldr	r2, [pc, #160]	; (800fba4 <TIM_OC2_SetConfig+0x104>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d10d      	bne.n	800fb24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	011b      	lsls	r3, r3, #4
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4a1e      	ldr	r2, [pc, #120]	; (800fba0 <TIM_OC2_SetConfig+0x100>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d00f      	beq.n	800fb4c <TIM_OC2_SetConfig+0xac>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a1d      	ldr	r2, [pc, #116]	; (800fba4 <TIM_OC2_SetConfig+0x104>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d00b      	beq.n	800fb4c <TIM_OC2_SetConfig+0xac>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a1c      	ldr	r2, [pc, #112]	; (800fba8 <TIM_OC2_SetConfig+0x108>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d007      	beq.n	800fb4c <TIM_OC2_SetConfig+0xac>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a1b      	ldr	r2, [pc, #108]	; (800fbac <TIM_OC2_SetConfig+0x10c>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d003      	beq.n	800fb4c <TIM_OC2_SetConfig+0xac>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a1a      	ldr	r2, [pc, #104]	; (800fbb0 <TIM_OC2_SetConfig+0x110>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d113      	bne.n	800fb74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	695b      	ldr	r3, [r3, #20]
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	699b      	ldr	r3, [r3, #24]
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	693a      	ldr	r2, [r7, #16]
 800fb70:	4313      	orrs	r3, r2
 800fb72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	693a      	ldr	r2, [r7, #16]
 800fb78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	685a      	ldr	r2, [r3, #4]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	697a      	ldr	r2, [r7, #20]
 800fb8c:	621a      	str	r2, [r3, #32]
}
 800fb8e:	bf00      	nop
 800fb90:	371c      	adds	r7, #28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	feff8fff 	.word	0xfeff8fff
 800fba0:	40010000 	.word	0x40010000
 800fba4:	40010400 	.word	0x40010400
 800fba8:	40014000 	.word	0x40014000
 800fbac:	40014400 	.word	0x40014400
 800fbb0:	40014800 	.word	0x40014800

0800fbb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b087      	sub	sp, #28
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6a1b      	ldr	r3, [r3, #32]
 800fbc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	69db      	ldr	r3, [r3, #28]
 800fbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	4b33      	ldr	r3, [pc, #204]	; (800fcac <TIM_OC3_SetConfig+0xf8>)
 800fbe0:	4013      	ands	r3, r2
 800fbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f023 0303 	bic.w	r3, r3, #3
 800fbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	021b      	lsls	r3, r3, #8
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a28      	ldr	r2, [pc, #160]	; (800fcb0 <TIM_OC3_SetConfig+0xfc>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d003      	beq.n	800fc1a <TIM_OC3_SetConfig+0x66>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a27      	ldr	r2, [pc, #156]	; (800fcb4 <TIM_OC3_SetConfig+0x100>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d10d      	bne.n	800fc36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	021b      	lsls	r3, r3, #8
 800fc28:	697a      	ldr	r2, [r7, #20]
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4a1d      	ldr	r2, [pc, #116]	; (800fcb0 <TIM_OC3_SetConfig+0xfc>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d00f      	beq.n	800fc5e <TIM_OC3_SetConfig+0xaa>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4a1c      	ldr	r2, [pc, #112]	; (800fcb4 <TIM_OC3_SetConfig+0x100>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d00b      	beq.n	800fc5e <TIM_OC3_SetConfig+0xaa>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4a1b      	ldr	r2, [pc, #108]	; (800fcb8 <TIM_OC3_SetConfig+0x104>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d007      	beq.n	800fc5e <TIM_OC3_SetConfig+0xaa>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4a1a      	ldr	r2, [pc, #104]	; (800fcbc <TIM_OC3_SetConfig+0x108>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d003      	beq.n	800fc5e <TIM_OC3_SetConfig+0xaa>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4a19      	ldr	r2, [pc, #100]	; (800fcc0 <TIM_OC3_SetConfig+0x10c>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d113      	bne.n	800fc86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	695b      	ldr	r3, [r3, #20]
 800fc72:	011b      	lsls	r3, r3, #4
 800fc74:	693a      	ldr	r2, [r7, #16]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	699b      	ldr	r3, [r3, #24]
 800fc7e:	011b      	lsls	r3, r3, #4
 800fc80:	693a      	ldr	r2, [r7, #16]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	685a      	ldr	r2, [r3, #4]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	697a      	ldr	r2, [r7, #20]
 800fc9e:	621a      	str	r2, [r3, #32]
}
 800fca0:	bf00      	nop
 800fca2:	371c      	adds	r7, #28
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	fffeff8f 	.word	0xfffeff8f
 800fcb0:	40010000 	.word	0x40010000
 800fcb4:	40010400 	.word	0x40010400
 800fcb8:	40014000 	.word	0x40014000
 800fcbc:	40014400 	.word	0x40014400
 800fcc0:	40014800 	.word	0x40014800

0800fcc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6a1b      	ldr	r3, [r3, #32]
 800fcd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6a1b      	ldr	r3, [r3, #32]
 800fcd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	69db      	ldr	r3, [r3, #28]
 800fcea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <TIM_OC4_SetConfig+0xbc>)
 800fcf0:	4013      	ands	r3, r2
 800fcf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	021b      	lsls	r3, r3, #8
 800fd02:	68fa      	ldr	r2, [r7, #12]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	031b      	lsls	r3, r3, #12
 800fd16:	693a      	ldr	r2, [r7, #16]
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4a19      	ldr	r2, [pc, #100]	; (800fd84 <TIM_OC4_SetConfig+0xc0>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d00f      	beq.n	800fd44 <TIM_OC4_SetConfig+0x80>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4a18      	ldr	r2, [pc, #96]	; (800fd88 <TIM_OC4_SetConfig+0xc4>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d00b      	beq.n	800fd44 <TIM_OC4_SetConfig+0x80>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	4a17      	ldr	r2, [pc, #92]	; (800fd8c <TIM_OC4_SetConfig+0xc8>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d007      	beq.n	800fd44 <TIM_OC4_SetConfig+0x80>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	4a16      	ldr	r2, [pc, #88]	; (800fd90 <TIM_OC4_SetConfig+0xcc>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d003      	beq.n	800fd44 <TIM_OC4_SetConfig+0x80>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4a15      	ldr	r2, [pc, #84]	; (800fd94 <TIM_OC4_SetConfig+0xd0>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d109      	bne.n	800fd58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	019b      	lsls	r3, r3, #6
 800fd52:	697a      	ldr	r2, [r7, #20]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	685a      	ldr	r2, [r3, #4]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	621a      	str	r2, [r3, #32]
}
 800fd72:	bf00      	nop
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	feff8fff 	.word	0xfeff8fff
 800fd84:	40010000 	.word	0x40010000
 800fd88:	40010400 	.word	0x40010400
 800fd8c:	40014000 	.word	0x40014000
 800fd90:	40014400 	.word	0x40014400
 800fd94:	40014800 	.word	0x40014800

0800fd98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b087      	sub	sp, #28
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6a1b      	ldr	r3, [r3, #32]
 800fdac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fdc0:	68fa      	ldr	r2, [r7, #12]
 800fdc2:	4b21      	ldr	r3, [pc, #132]	; (800fe48 <TIM_OC5_SetConfig+0xb0>)
 800fdc4:	4013      	ands	r3, r2
 800fdc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fdd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	041b      	lsls	r3, r3, #16
 800fde0:	693a      	ldr	r2, [r7, #16]
 800fde2:	4313      	orrs	r3, r2
 800fde4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4a18      	ldr	r2, [pc, #96]	; (800fe4c <TIM_OC5_SetConfig+0xb4>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d00f      	beq.n	800fe0e <TIM_OC5_SetConfig+0x76>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4a17      	ldr	r2, [pc, #92]	; (800fe50 <TIM_OC5_SetConfig+0xb8>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d00b      	beq.n	800fe0e <TIM_OC5_SetConfig+0x76>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4a16      	ldr	r2, [pc, #88]	; (800fe54 <TIM_OC5_SetConfig+0xbc>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d007      	beq.n	800fe0e <TIM_OC5_SetConfig+0x76>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4a15      	ldr	r2, [pc, #84]	; (800fe58 <TIM_OC5_SetConfig+0xc0>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d003      	beq.n	800fe0e <TIM_OC5_SetConfig+0x76>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4a14      	ldr	r2, [pc, #80]	; (800fe5c <TIM_OC5_SetConfig+0xc4>)
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d109      	bne.n	800fe22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	695b      	ldr	r3, [r3, #20]
 800fe1a:	021b      	lsls	r3, r3, #8
 800fe1c:	697a      	ldr	r2, [r7, #20]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	697a      	ldr	r2, [r7, #20]
 800fe26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	621a      	str	r2, [r3, #32]
}
 800fe3c:	bf00      	nop
 800fe3e:	371c      	adds	r7, #28
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr
 800fe48:	fffeff8f 	.word	0xfffeff8f
 800fe4c:	40010000 	.word	0x40010000
 800fe50:	40010400 	.word	0x40010400
 800fe54:	40014000 	.word	0x40014000
 800fe58:	40014400 	.word	0x40014400
 800fe5c:	40014800 	.word	0x40014800

0800fe60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b087      	sub	sp, #28
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a1b      	ldr	r3, [r3, #32]
 800fe74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	4b22      	ldr	r3, [pc, #136]	; (800ff14 <TIM_OC6_SetConfig+0xb4>)
 800fe8c:	4013      	ands	r3, r2
 800fe8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	021b      	lsls	r3, r3, #8
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	051b      	lsls	r3, r3, #20
 800feaa:	693a      	ldr	r2, [r7, #16]
 800feac:	4313      	orrs	r3, r2
 800feae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4a19      	ldr	r2, [pc, #100]	; (800ff18 <TIM_OC6_SetConfig+0xb8>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d00f      	beq.n	800fed8 <TIM_OC6_SetConfig+0x78>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4a18      	ldr	r2, [pc, #96]	; (800ff1c <TIM_OC6_SetConfig+0xbc>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d00b      	beq.n	800fed8 <TIM_OC6_SetConfig+0x78>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	4a17      	ldr	r2, [pc, #92]	; (800ff20 <TIM_OC6_SetConfig+0xc0>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d007      	beq.n	800fed8 <TIM_OC6_SetConfig+0x78>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4a16      	ldr	r2, [pc, #88]	; (800ff24 <TIM_OC6_SetConfig+0xc4>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d003      	beq.n	800fed8 <TIM_OC6_SetConfig+0x78>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	4a15      	ldr	r2, [pc, #84]	; (800ff28 <TIM_OC6_SetConfig+0xc8>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d109      	bne.n	800feec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	029b      	lsls	r3, r3, #10
 800fee6:	697a      	ldr	r2, [r7, #20]
 800fee8:	4313      	orrs	r3, r2
 800feea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	621a      	str	r2, [r3, #32]
}
 800ff06:	bf00      	nop
 800ff08:	371c      	adds	r7, #28
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop
 800ff14:	feff8fff 	.word	0xfeff8fff
 800ff18:	40010000 	.word	0x40010000
 800ff1c:	40010400 	.word	0x40010400
 800ff20:	40014000 	.word	0x40014000
 800ff24:	40014400 	.word	0x40014400
 800ff28:	40014800 	.word	0x40014800

0800ff2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b087      	sub	sp, #28
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	f023 0201 	bic.w	r2, r3, #1
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	699b      	ldr	r3, [r3, #24]
 800ff4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ff56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	011b      	lsls	r3, r3, #4
 800ff5c:	693a      	ldr	r2, [r7, #16]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	f023 030a 	bic.w	r3, r3, #10
 800ff68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ff6a:	697a      	ldr	r2, [r7, #20]
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	693a      	ldr	r2, [r7, #16]
 800ff76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	697a      	ldr	r2, [r7, #20]
 800ff7c:	621a      	str	r2, [r3, #32]
}
 800ff7e:	bf00      	nop
 800ff80:	371c      	adds	r7, #28
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b087      	sub	sp, #28
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	60f8      	str	r0, [r7, #12]
 800ff92:	60b9      	str	r1, [r7, #8]
 800ff94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6a1b      	ldr	r3, [r3, #32]
 800ff9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
 800ffa0:	f023 0210 	bic.w	r2, r3, #16
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	699b      	ldr	r3, [r3, #24]
 800ffac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ffb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	031b      	lsls	r3, r3, #12
 800ffba:	693a      	ldr	r2, [r7, #16]
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ffc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	011b      	lsls	r3, r3, #4
 800ffcc:	697a      	ldr	r2, [r7, #20]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	693a      	ldr	r2, [r7, #16]
 800ffd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	697a      	ldr	r2, [r7, #20]
 800ffdc:	621a      	str	r2, [r3, #32]
}
 800ffde:	bf00      	nop
 800ffe0:	371c      	adds	r7, #28
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr
	...

0800ffec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	4b09      	ldr	r3, [pc, #36]	; (8010024 <TIM_ITRx_SetConfig+0x38>)
 8010000:	4013      	ands	r3, r2
 8010002:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	4313      	orrs	r3, r2
 801000a:	f043 0307 	orr.w	r3, r3, #7
 801000e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	609a      	str	r2, [r3, #8]
}
 8010016:	bf00      	nop
 8010018:	3714      	adds	r7, #20
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	ffcfff8f 	.word	0xffcfff8f

08010028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010028:	b480      	push	{r7}
 801002a:	b087      	sub	sp, #28
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
 8010034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	021a      	lsls	r2, r3, #8
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	431a      	orrs	r2, r3
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	4313      	orrs	r3, r2
 8010050:	697a      	ldr	r2, [r7, #20]
 8010052:	4313      	orrs	r3, r2
 8010054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	697a      	ldr	r2, [r7, #20]
 801005a:	609a      	str	r2, [r3, #8]
}
 801005c:	bf00      	nop
 801005e:	371c      	adds	r7, #28
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010068:	b480      	push	{r7}
 801006a:	b087      	sub	sp, #28
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	f003 031f 	and.w	r3, r3, #31
 801007a:	2201      	movs	r2, #1
 801007c:	fa02 f303 	lsl.w	r3, r2, r3
 8010080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6a1a      	ldr	r2, [r3, #32]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	43db      	mvns	r3, r3
 801008a:	401a      	ands	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6a1a      	ldr	r2, [r3, #32]
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	f003 031f 	and.w	r3, r3, #31
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	fa01 f303 	lsl.w	r3, r1, r3
 80100a0:	431a      	orrs	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	621a      	str	r2, [r3, #32]
}
 80100a6:	bf00      	nop
 80100a8:	371c      	adds	r7, #28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
	...

080100b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d101      	bne.n	80100cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80100c8:	2302      	movs	r3, #2
 80100ca:	e06d      	b.n	80101a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2202      	movs	r2, #2
 80100d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a30      	ldr	r2, [pc, #192]	; (80101b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d004      	beq.n	8010100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a2f      	ldr	r2, [pc, #188]	; (80101b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d108      	bne.n	8010112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	4313      	orrs	r3, r2
 8010110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010118:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	4313      	orrs	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a20      	ldr	r2, [pc, #128]	; (80101b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d022      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801013e:	d01d      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a1d      	ldr	r2, [pc, #116]	; (80101bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d018      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a1c      	ldr	r2, [pc, #112]	; (80101c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d013      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a1a      	ldr	r2, [pc, #104]	; (80101c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d00e      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a15      	ldr	r2, [pc, #84]	; (80101b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d009      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a16      	ldr	r2, [pc, #88]	; (80101c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d004      	beq.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a15      	ldr	r2, [pc, #84]	; (80101cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d10c      	bne.n	8010196 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	689b      	ldr	r3, [r3, #8]
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	4313      	orrs	r3, r2
 801018c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	68ba      	ldr	r2, [r7, #8]
 8010194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2201      	movs	r2, #1
 801019a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	40010000 	.word	0x40010000
 80101b8:	40010400 	.word	0x40010400
 80101bc:	40000400 	.word	0x40000400
 80101c0:	40000800 	.word	0x40000800
 80101c4:	40000c00 	.word	0x40000c00
 80101c8:	40001800 	.word	0x40001800
 80101cc:	40014000 	.word	0x40014000

080101d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80101da:	2300      	movs	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d101      	bne.n	80101ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80101e8:	2302      	movs	r3, #2
 80101ea:	e065      	b.n	80102b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	68db      	ldr	r3, [r3, #12]
 80101fe:	4313      	orrs	r3, r2
 8010200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	4313      	orrs	r3, r2
 801020e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	4313      	orrs	r3, r2
 801021c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4313      	orrs	r3, r2
 801022a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	691b      	ldr	r3, [r3, #16]
 8010236:	4313      	orrs	r3, r2
 8010238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	4313      	orrs	r3, r2
 8010246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010252:	4313      	orrs	r3, r2
 8010254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	041b      	lsls	r3, r3, #16
 8010262:	4313      	orrs	r3, r2
 8010264:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a16      	ldr	r2, [pc, #88]	; (80102c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d004      	beq.n	801027a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4a14      	ldr	r2, [pc, #80]	; (80102c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d115      	bne.n	80102a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010284:	051b      	lsls	r3, r3, #20
 8010286:	4313      	orrs	r3, r2
 8010288:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	69db      	ldr	r3, [r3, #28]
 8010294:	4313      	orrs	r3, r2
 8010296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	6a1b      	ldr	r3, [r3, #32]
 80102a2:	4313      	orrs	r3, r2
 80102a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3714      	adds	r7, #20
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr
 80102c4:	40010000 	.word	0x40010000
 80102c8:	40010400 	.word	0x40010400

080102cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80102d4:	bf00      	nop
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d101      	bne.n	801031a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010316:	2301      	movs	r3, #1
 8010318:	e042      	b.n	80103a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010320:	2b00      	cmp	r3, #0
 8010322:	d106      	bne.n	8010332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7f3 fbf7 	bl	8003b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2224      	movs	r2, #36	; 0x24
 8010336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f022 0201 	bic.w	r2, r2, #1
 8010348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f001 fc42 	bl	8011bdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 fed7 	bl	801110c <UART_SetConfig>
 801035e:	4603      	mov	r3, r0
 8010360:	2b01      	cmp	r3, #1
 8010362:	d101      	bne.n	8010368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010364:	2301      	movs	r3, #1
 8010366:	e01b      	b.n	80103a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	685a      	ldr	r2, [r3, #4]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	689a      	ldr	r2, [r3, #8]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f042 0201 	orr.w	r2, r2, #1
 8010396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f001 fcc1 	bl	8011d20 <UART_CheckIdleState>
 801039e:	4603      	mov	r3, r0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b08a      	sub	sp, #40	; 0x28
 80103ac:	af02      	add	r7, sp, #8
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	4613      	mov	r3, r2
 80103b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103be:	2b20      	cmp	r3, #32
 80103c0:	d17b      	bne.n	80104ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <HAL_UART_Transmit+0x26>
 80103c8:	88fb      	ldrh	r3, [r7, #6]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	e074      	b.n	80104bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2200      	movs	r2, #0
 80103d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2221      	movs	r2, #33	; 0x21
 80103de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103e2:	f7f3 ff1b 	bl	800421c <HAL_GetTick>
 80103e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	88fa      	ldrh	r2, [r7, #6]
 80103ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	88fa      	ldrh	r2, [r7, #6]
 80103f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010400:	d108      	bne.n	8010414 <HAL_UART_Transmit+0x6c>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d104      	bne.n	8010414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	61bb      	str	r3, [r7, #24]
 8010412:	e003      	b.n	801041c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010418:	2300      	movs	r3, #0
 801041a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801041c:	e030      	b.n	8010480 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2200      	movs	r2, #0
 8010426:	2180      	movs	r1, #128	; 0x80
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f001 fd23 	bl	8011e74 <UART_WaitOnFlagUntilTimeout>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d005      	beq.n	8010440 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2220      	movs	r2, #32
 8010438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801043c:	2303      	movs	r3, #3
 801043e:	e03d      	b.n	80104bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d10b      	bne.n	801045e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	3302      	adds	r3, #2
 801045a:	61bb      	str	r3, [r7, #24]
 801045c:	e007      	b.n	801046e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	781a      	ldrb	r2, [r3, #0]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	3301      	adds	r3, #1
 801046c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010474:	b29b      	uxth	r3, r3
 8010476:	3b01      	subs	r3, #1
 8010478:	b29a      	uxth	r2, r3
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010486:	b29b      	uxth	r3, r3
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1c8      	bne.n	801041e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	9300      	str	r3, [sp, #0]
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	2200      	movs	r2, #0
 8010494:	2140      	movs	r1, #64	; 0x40
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f001 fcec 	bl	8011e74 <UART_WaitOnFlagUntilTimeout>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d005      	beq.n	80104ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2220      	movs	r2, #32
 80104a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80104aa:	2303      	movs	r3, #3
 80104ac:	e006      	b.n	80104bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2220      	movs	r2, #32
 80104b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80104b6:	2300      	movs	r3, #0
 80104b8:	e000      	b.n	80104bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80104ba:	2302      	movs	r3, #2
  }
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3720      	adds	r7, #32
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08a      	sub	sp, #40	; 0x28
 80104c8:	af02      	add	r7, sp, #8
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	603b      	str	r3, [r7, #0]
 80104d0:	4613      	mov	r3, r2
 80104d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104da:	2b20      	cmp	r3, #32
 80104dc:	f040 80b5 	bne.w	801064a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <HAL_UART_Receive+0x28>
 80104e6:	88fb      	ldrh	r3, [r7, #6]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d101      	bne.n	80104f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80104ec:	2301      	movs	r3, #1
 80104ee:	e0ad      	b.n	801064c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2222      	movs	r2, #34	; 0x22
 80104fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2200      	movs	r2, #0
 8010504:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010506:	f7f3 fe89 	bl	800421c <HAL_GetTick>
 801050a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	88fa      	ldrh	r2, [r7, #6]
 8010510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	88fa      	ldrh	r2, [r7, #6]
 8010518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010524:	d10e      	bne.n	8010544 <HAL_UART_Receive+0x80>
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	691b      	ldr	r3, [r3, #16]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d105      	bne.n	801053a <HAL_UART_Receive+0x76>
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010538:	e02d      	b.n	8010596 <HAL_UART_Receive+0xd2>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	22ff      	movs	r2, #255	; 0xff
 801053e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010542:	e028      	b.n	8010596 <HAL_UART_Receive+0xd2>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10d      	bne.n	8010568 <HAL_UART_Receive+0xa4>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	691b      	ldr	r3, [r3, #16]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d104      	bne.n	801055e <HAL_UART_Receive+0x9a>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	22ff      	movs	r2, #255	; 0xff
 8010558:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801055c:	e01b      	b.n	8010596 <HAL_UART_Receive+0xd2>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	227f      	movs	r2, #127	; 0x7f
 8010562:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010566:	e016      	b.n	8010596 <HAL_UART_Receive+0xd2>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010570:	d10d      	bne.n	801058e <HAL_UART_Receive+0xca>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d104      	bne.n	8010584 <HAL_UART_Receive+0xc0>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	227f      	movs	r2, #127	; 0x7f
 801057e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010582:	e008      	b.n	8010596 <HAL_UART_Receive+0xd2>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	223f      	movs	r2, #63	; 0x3f
 8010588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801058c:	e003      	b.n	8010596 <HAL_UART_Receive+0xd2>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2200      	movs	r2, #0
 8010592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801059c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	689b      	ldr	r3, [r3, #8]
 80105a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105a6:	d108      	bne.n	80105ba <HAL_UART_Receive+0xf6>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	691b      	ldr	r3, [r3, #16]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d104      	bne.n	80105ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80105b0:	2300      	movs	r3, #0
 80105b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	61bb      	str	r3, [r7, #24]
 80105b8:	e003      	b.n	80105c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80105be:	2300      	movs	r3, #0
 80105c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80105c2:	e036      	b.n	8010632 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	2200      	movs	r2, #0
 80105cc:	2120      	movs	r1, #32
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f001 fc50 	bl	8011e74 <UART_WaitOnFlagUntilTimeout>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d005      	beq.n	80105e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2220      	movs	r2, #32
 80105de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80105e2:	2303      	movs	r3, #3
 80105e4:	e032      	b.n	801064c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10c      	bne.n	8010606 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	8a7b      	ldrh	r3, [r7, #18]
 80105f6:	4013      	ands	r3, r2
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	3302      	adds	r3, #2
 8010602:	61bb      	str	r3, [r7, #24]
 8010604:	e00c      	b.n	8010620 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801060c:	b2da      	uxtb	r2, r3
 801060e:	8a7b      	ldrh	r3, [r7, #18]
 8010610:	b2db      	uxtb	r3, r3
 8010612:	4013      	ands	r3, r2
 8010614:	b2da      	uxtb	r2, r3
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	3301      	adds	r3, #1
 801061e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010626:	b29b      	uxth	r3, r3
 8010628:	3b01      	subs	r3, #1
 801062a:	b29a      	uxth	r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010638:	b29b      	uxth	r3, r3
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1c2      	bne.n	80105c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010646:	2300      	movs	r3, #0
 8010648:	e000      	b.n	801064c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801064a:	2302      	movs	r3, #2
  }
}
 801064c:	4618      	mov	r0, r3
 801064e:	3720      	adds	r7, #32
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b08a      	sub	sp, #40	; 0x28
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	4613      	mov	r3, r2
 8010660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010668:	2b20      	cmp	r3, #32
 801066a:	d137      	bne.n	80106dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d002      	beq.n	8010678 <HAL_UART_Receive_IT+0x24>
 8010672:	88fb      	ldrh	r3, [r7, #6]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d101      	bne.n	801067c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	e030      	b.n	80106de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2200      	movs	r2, #0
 8010680:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4a18      	ldr	r2, [pc, #96]	; (80106e8 <HAL_UART_Receive_IT+0x94>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d01f      	beq.n	80106cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010696:	2b00      	cmp	r3, #0
 8010698:	d018      	beq.n	80106cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	e853 3f00 	ldrex	r3, [r3]
 80106a6:	613b      	str	r3, [r7, #16]
   return(result);
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	461a      	mov	r2, r3
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	623b      	str	r3, [r7, #32]
 80106ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106bc:	69f9      	ldr	r1, [r7, #28]
 80106be:	6a3a      	ldr	r2, [r7, #32]
 80106c0:	e841 2300 	strex	r3, r2, [r1]
 80106c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1e6      	bne.n	801069a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80106cc:	88fb      	ldrh	r3, [r7, #6]
 80106ce:	461a      	mov	r2, r3
 80106d0:	68b9      	ldr	r1, [r7, #8]
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f001 fc3c 	bl	8011f50 <UART_Start_Receive_IT>
 80106d8:	4603      	mov	r3, r0
 80106da:	e000      	b.n	80106de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80106dc:	2302      	movs	r3, #2
  }
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3728      	adds	r7, #40	; 0x28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	58000c00 	.word	0x58000c00

080106ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b08a      	sub	sp, #40	; 0x28
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	4613      	mov	r3, r2
 80106f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010700:	2b20      	cmp	r3, #32
 8010702:	d167      	bne.n	80107d4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d002      	beq.n	8010710 <HAL_UART_Transmit_DMA+0x24>
 801070a:	88fb      	ldrh	r3, [r7, #6]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010710:	2301      	movs	r3, #1
 8010712:	e060      	b.n	80107d6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	88fa      	ldrh	r2, [r7, #6]
 801071e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	88fa      	ldrh	r2, [r7, #6]
 8010726:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2221      	movs	r2, #33	; 0x21
 8010736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801073e:	2b00      	cmp	r3, #0
 8010740:	d028      	beq.n	8010794 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010746:	4a26      	ldr	r2, [pc, #152]	; (80107e0 <HAL_UART_Transmit_DMA+0xf4>)
 8010748:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801074e:	4a25      	ldr	r2, [pc, #148]	; (80107e4 <HAL_UART_Transmit_DMA+0xf8>)
 8010750:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010756:	4a24      	ldr	r2, [pc, #144]	; (80107e8 <HAL_UART_Transmit_DMA+0xfc>)
 8010758:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801075e:	2200      	movs	r2, #0
 8010760:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801076a:	4619      	mov	r1, r3
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	3328      	adds	r3, #40	; 0x28
 8010772:	461a      	mov	r2, r3
 8010774:	88fb      	ldrh	r3, [r7, #6]
 8010776:	f7f6 f9d5 	bl	8006b24 <HAL_DMA_Start_IT>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d009      	beq.n	8010794 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2210      	movs	r2, #16
 8010784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2220      	movs	r2, #32
 801078c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010790:	2301      	movs	r3, #1
 8010792:	e020      	b.n	80107d6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2240      	movs	r2, #64	; 0x40
 801079a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3308      	adds	r3, #8
 80107a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	e853 3f00 	ldrex	r3, [r3]
 80107aa:	613b      	str	r3, [r7, #16]
   return(result);
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107b2:	627b      	str	r3, [r7, #36]	; 0x24
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3308      	adds	r3, #8
 80107ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107bc:	623a      	str	r2, [r7, #32]
 80107be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c0:	69f9      	ldr	r1, [r7, #28]
 80107c2:	6a3a      	ldr	r2, [r7, #32]
 80107c4:	e841 2300 	strex	r3, r2, [r1]
 80107c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1e5      	bne.n	801079c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80107d0:	2300      	movs	r3, #0
 80107d2:	e000      	b.n	80107d6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80107d4:	2302      	movs	r3, #2
  }
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3728      	adds	r7, #40	; 0x28
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	080122e5 	.word	0x080122e5
 80107e4:	0801237b 	.word	0x0801237b
 80107e8:	08012397 	.word	0x08012397

080107ec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b09a      	sub	sp, #104	; 0x68
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107fc:	e853 3f00 	ldrex	r3, [r3]
 8010800:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010808:	667b      	str	r3, [r7, #100]	; 0x64
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	461a      	mov	r2, r3
 8010810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010812:	657b      	str	r3, [r7, #84]	; 0x54
 8010814:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801081a:	e841 2300 	strex	r3, r2, [r1]
 801081e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1e6      	bne.n	80107f4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3308      	adds	r3, #8
 801082c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010830:	e853 3f00 	ldrex	r3, [r3]
 8010834:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010838:	4b46      	ldr	r3, [pc, #280]	; (8010954 <HAL_UART_AbortReceive+0x168>)
 801083a:	4013      	ands	r3, r2
 801083c:	663b      	str	r3, [r7, #96]	; 0x60
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	3308      	adds	r3, #8
 8010844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010846:	643a      	str	r2, [r7, #64]	; 0x40
 8010848:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801084c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801084e:	e841 2300 	strex	r3, r2, [r1]
 8010852:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1e5      	bne.n	8010826 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801085e:	2b01      	cmp	r3, #1
 8010860:	d118      	bne.n	8010894 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010868:	6a3b      	ldr	r3, [r7, #32]
 801086a:	e853 3f00 	ldrex	r3, [r3]
 801086e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	f023 0310 	bic.w	r3, r3, #16
 8010876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	461a      	mov	r2, r3
 801087e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010882:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010888:	e841 2300 	strex	r3, r2, [r1]
 801088c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1e6      	bne.n	8010862 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	689b      	ldr	r3, [r3, #8]
 801089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801089e:	2b40      	cmp	r3, #64	; 0x40
 80108a0:	d13b      	bne.n	801091a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3308      	adds	r3, #8
 80108a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	e853 3f00 	ldrex	r3, [r3]
 80108b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	3308      	adds	r3, #8
 80108c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108c2:	61ba      	str	r2, [r7, #24]
 80108c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c6:	6979      	ldr	r1, [r7, #20]
 80108c8:	69ba      	ldr	r2, [r7, #24]
 80108ca:	e841 2300 	strex	r3, r2, [r1]
 80108ce:	613b      	str	r3, [r7, #16]
   return(result);
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1e5      	bne.n	80108a2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d01c      	beq.n	801091a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e6:	2200      	movs	r2, #0
 80108e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7f6 fb81 	bl	8006ff8 <HAL_DMA_Abort>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00e      	beq.n	801091a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010902:	4618      	mov	r0, r3
 8010904:	f7f8 f806 	bl	8008914 <HAL_DMA_GetError>
 8010908:	4603      	mov	r3, r0
 801090a:	2b20      	cmp	r3, #32
 801090c:	d105      	bne.n	801091a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2210      	movs	r2, #16
 8010912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010916:	2303      	movs	r3, #3
 8010918:	e017      	b.n	801094a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	220f      	movs	r2, #15
 8010928:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	699a      	ldr	r2, [r3, #24]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f042 0208 	orr.w	r2, r2, #8
 8010938:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2220      	movs	r2, #32
 801093e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3768      	adds	r7, #104	; 0x68
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	effffffe 	.word	0xeffffffe

08010958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b0ba      	sub	sp, #232	; 0xe8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	689b      	ldr	r3, [r3, #8]
 801097a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801097e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010982:	f640 030f 	movw	r3, #2063	; 0x80f
 8010986:	4013      	ands	r3, r2
 8010988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801098c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010990:	2b00      	cmp	r3, #0
 8010992:	d11b      	bne.n	80109cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010998:	f003 0320 	and.w	r3, r3, #32
 801099c:	2b00      	cmp	r3, #0
 801099e:	d015      	beq.n	80109cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109a4:	f003 0320 	and.w	r3, r3, #32
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d105      	bne.n	80109b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d009      	beq.n	80109cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f000 8377 	beq.w	80110b0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	4798      	blx	r3
      }
      return;
 80109ca:	e371      	b.n	80110b0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80109cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f000 8123 	beq.w	8010c1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80109d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80109da:	4b8d      	ldr	r3, [pc, #564]	; (8010c10 <HAL_UART_IRQHandler+0x2b8>)
 80109dc:	4013      	ands	r3, r2
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d106      	bne.n	80109f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80109e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80109e6:	4b8b      	ldr	r3, [pc, #556]	; (8010c14 <HAL_UART_IRQHandler+0x2bc>)
 80109e8:	4013      	ands	r3, r2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f000 8116 	beq.w	8010c1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80109f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109f4:	f003 0301 	and.w	r3, r3, #1
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d011      	beq.n	8010a20 <HAL_UART_IRQHandler+0xc8>
 80109fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d00b      	beq.n	8010a20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a16:	f043 0201 	orr.w	r2, r3, #1
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a24:	f003 0302 	and.w	r3, r3, #2
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d011      	beq.n	8010a50 <HAL_UART_IRQHandler+0xf8>
 8010a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a30:	f003 0301 	and.w	r3, r3, #1
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00b      	beq.n	8010a50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2202      	movs	r2, #2
 8010a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a46:	f043 0204 	orr.w	r2, r3, #4
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a54:	f003 0304 	and.w	r3, r3, #4
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d011      	beq.n	8010a80 <HAL_UART_IRQHandler+0x128>
 8010a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a60:	f003 0301 	and.w	r3, r3, #1
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00b      	beq.n	8010a80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	2204      	movs	r2, #4
 8010a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a76:	f043 0202 	orr.w	r2, r3, #2
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a84:	f003 0308 	and.w	r3, r3, #8
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d017      	beq.n	8010abc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a90:	f003 0320 	and.w	r3, r3, #32
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d105      	bne.n	8010aa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010a98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010a9c:	4b5c      	ldr	r3, [pc, #368]	; (8010c10 <HAL_UART_IRQHandler+0x2b8>)
 8010a9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00b      	beq.n	8010abc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2208      	movs	r2, #8
 8010aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ab2:	f043 0208 	orr.w	r2, r3, #8
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d012      	beq.n	8010aee <HAL_UART_IRQHandler+0x196>
 8010ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00c      	beq.n	8010aee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ae4:	f043 0220 	orr.w	r2, r3, #32
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 82dd 	beq.w	80110b4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010afe:	f003 0320 	and.w	r3, r3, #32
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d013      	beq.n	8010b2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b0a:	f003 0320 	and.w	r3, r3, #32
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d105      	bne.n	8010b1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d007      	beq.n	8010b2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d003      	beq.n	8010b2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	689b      	ldr	r3, [r3, #8]
 8010b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b42:	2b40      	cmp	r3, #64	; 0x40
 8010b44:	d005      	beq.n	8010b52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d054      	beq.n	8010bfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f001 fb60 	bl	8012218 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	689b      	ldr	r3, [r3, #8]
 8010b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b62:	2b40      	cmp	r3, #64	; 0x40
 8010b64:	d146      	bne.n	8010bf4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	3308      	adds	r3, #8
 8010b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b74:	e853 3f00 	ldrex	r3, [r3]
 8010b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	3308      	adds	r3, #8
 8010b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010ba2:	e841 2300 	strex	r3, r2, [r1]
 8010ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d1d9      	bne.n	8010b66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d017      	beq.n	8010bec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc2:	4a15      	ldr	r2, [pc, #84]	; (8010c18 <HAL_UART_IRQHandler+0x2c0>)
 8010bc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f6 fd31 	bl	8007634 <HAL_DMA_Abort_IT>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d019      	beq.n	8010c0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010be6:	4610      	mov	r0, r2
 8010be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bea:	e00f      	b.n	8010c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 fa77 	bl	80110e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bf2:	e00b      	b.n	8010c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 fa73 	bl	80110e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bfa:	e007      	b.n	8010c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f000 fa6f 	bl	80110e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010c0a:	e253      	b.n	80110b4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c0c:	bf00      	nop
    return;
 8010c0e:	e251      	b.n	80110b4 <HAL_UART_IRQHandler+0x75c>
 8010c10:	10000001 	.word	0x10000001
 8010c14:	04000120 	.word	0x04000120
 8010c18:	08012417 	.word	0x08012417

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	f040 81e7 	bne.w	8010ff4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c2a:	f003 0310 	and.w	r3, r3, #16
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f000 81e0 	beq.w	8010ff4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c38:	f003 0310 	and.w	r3, r3, #16
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f000 81d9 	beq.w	8010ff4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2210      	movs	r2, #16
 8010c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c54:	2b40      	cmp	r3, #64	; 0x40
 8010c56:	f040 8151 	bne.w	8010efc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4a96      	ldr	r2, [pc, #600]	; (8010ebc <HAL_UART_IRQHandler+0x564>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d068      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a93      	ldr	r2, [pc, #588]	; (8010ec0 <HAL_UART_IRQHandler+0x568>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d061      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4a91      	ldr	r2, [pc, #580]	; (8010ec4 <HAL_UART_IRQHandler+0x56c>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d05a      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a8e      	ldr	r2, [pc, #568]	; (8010ec8 <HAL_UART_IRQHandler+0x570>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d053      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a8c      	ldr	r2, [pc, #560]	; (8010ecc <HAL_UART_IRQHandler+0x574>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d04c      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a89      	ldr	r2, [pc, #548]	; (8010ed0 <HAL_UART_IRQHandler+0x578>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d045      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a87      	ldr	r2, [pc, #540]	; (8010ed4 <HAL_UART_IRQHandler+0x57c>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d03e      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4a84      	ldr	r2, [pc, #528]	; (8010ed8 <HAL_UART_IRQHandler+0x580>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d037      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4a82      	ldr	r2, [pc, #520]	; (8010edc <HAL_UART_IRQHandler+0x584>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d030      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a7f      	ldr	r2, [pc, #508]	; (8010ee0 <HAL_UART_IRQHandler+0x588>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d029      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4a7d      	ldr	r2, [pc, #500]	; (8010ee4 <HAL_UART_IRQHandler+0x58c>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d022      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4a7a      	ldr	r2, [pc, #488]	; (8010ee8 <HAL_UART_IRQHandler+0x590>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d01b      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a78      	ldr	r2, [pc, #480]	; (8010eec <HAL_UART_IRQHandler+0x594>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d014      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4a75      	ldr	r2, [pc, #468]	; (8010ef0 <HAL_UART_IRQHandler+0x598>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d00d      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a73      	ldr	r2, [pc, #460]	; (8010ef4 <HAL_UART_IRQHandler+0x59c>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d006      	beq.n	8010d3a <HAL_UART_IRQHandler+0x3e2>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a70      	ldr	r2, [pc, #448]	; (8010ef8 <HAL_UART_IRQHandler+0x5a0>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d106      	bne.n	8010d48 <HAL_UART_IRQHandler+0x3f0>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	685b      	ldr	r3, [r3, #4]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	e005      	b.n	8010d54 <HAL_UART_IRQHandler+0x3fc>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010d58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 81ab 	beq.w	80110b8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	f080 81a3 	bcs.w	80110b8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010d78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d82:	69db      	ldr	r3, [r3, #28]
 8010d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d88:	f000 8087 	beq.w	8010e9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d98:	e853 3f00 	ldrex	r3, [r3]
 8010d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	461a      	mov	r2, r3
 8010db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010dba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010dc6:	e841 2300 	strex	r3, r2, [r1]
 8010dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1da      	bne.n	8010d8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	3308      	adds	r3, #8
 8010ddc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010de0:	e853 3f00 	ldrex	r3, [r3]
 8010de4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010de8:	f023 0301 	bic.w	r3, r3, #1
 8010dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	3308      	adds	r3, #8
 8010df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010dfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e06:	e841 2300 	strex	r3, r2, [r1]
 8010e0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d1e1      	bne.n	8010dd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3308      	adds	r3, #8
 8010e18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e1c:	e853 3f00 	ldrex	r3, [r3]
 8010e20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	3308      	adds	r3, #8
 8010e32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010e36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010e38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010e3e:	e841 2300 	strex	r3, r2, [r1]
 8010e42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1e3      	bne.n	8010e12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2220      	movs	r2, #32
 8010e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e60:	e853 3f00 	ldrex	r3, [r3]
 8010e64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e68:	f023 0310 	bic.w	r3, r3, #16
 8010e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	461a      	mov	r2, r3
 8010e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e82:	e841 2300 	strex	r3, r2, [r1]
 8010e86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d1e4      	bne.n	8010e58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f6 f8af 	bl	8006ff8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2202      	movs	r2, #2
 8010e9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 f91d 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010eba:	e0fd      	b.n	80110b8 <HAL_UART_IRQHandler+0x760>
 8010ebc:	40020010 	.word	0x40020010
 8010ec0:	40020028 	.word	0x40020028
 8010ec4:	40020040 	.word	0x40020040
 8010ec8:	40020058 	.word	0x40020058
 8010ecc:	40020070 	.word	0x40020070
 8010ed0:	40020088 	.word	0x40020088
 8010ed4:	400200a0 	.word	0x400200a0
 8010ed8:	400200b8 	.word	0x400200b8
 8010edc:	40020410 	.word	0x40020410
 8010ee0:	40020428 	.word	0x40020428
 8010ee4:	40020440 	.word	0x40020440
 8010ee8:	40020458 	.word	0x40020458
 8010eec:	40020470 	.word	0x40020470
 8010ef0:	40020488 	.word	0x40020488
 8010ef4:	400204a0 	.word	0x400204a0
 8010ef8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 80cf 	beq.w	80110bc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 80ca 	beq.w	80110bc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f30:	e853 3f00 	ldrex	r3, [r3]
 8010f34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	461a      	mov	r2, r3
 8010f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8010f4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f52:	e841 2300 	strex	r3, r2, [r1]
 8010f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1e4      	bne.n	8010f28 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	3308      	adds	r3, #8
 8010f64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f68:	e853 3f00 	ldrex	r3, [r3]
 8010f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8010f6e:	6a3a      	ldr	r2, [r7, #32]
 8010f70:	4b55      	ldr	r3, [pc, #340]	; (80110c8 <HAL_UART_IRQHandler+0x770>)
 8010f72:	4013      	ands	r3, r2
 8010f74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	3308      	adds	r3, #8
 8010f7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010f82:	633a      	str	r2, [r7, #48]	; 0x30
 8010f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f8a:	e841 2300 	strex	r3, r2, [r1]
 8010f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d1e3      	bne.n	8010f5e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2220      	movs	r2, #32
 8010f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	e853 3f00 	ldrex	r3, [r3]
 8010fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f023 0310 	bic.w	r3, r3, #16
 8010fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010fcc:	61fb      	str	r3, [r7, #28]
 8010fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd0:	69b9      	ldr	r1, [r7, #24]
 8010fd2:	69fa      	ldr	r2, [r7, #28]
 8010fd4:	e841 2300 	strex	r3, r2, [r1]
 8010fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d1e4      	bne.n	8010faa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 f881 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010ff2:	e063      	b.n	80110bc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00e      	beq.n	801101e <HAL_UART_IRQHandler+0x6c6>
 8011000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011008:	2b00      	cmp	r3, #0
 801100a:	d008      	beq.n	801101e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f001 ff5a 	bl	8012ed0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801101c:	e051      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801101e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011026:	2b00      	cmp	r3, #0
 8011028:	d014      	beq.n	8011054 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801102a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011032:	2b00      	cmp	r3, #0
 8011034:	d105      	bne.n	8011042 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801103a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801103e:	2b00      	cmp	r3, #0
 8011040:	d008      	beq.n	8011054 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011046:	2b00      	cmp	r3, #0
 8011048:	d03a      	beq.n	80110c0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	4798      	blx	r3
    }
    return;
 8011052:	e035      	b.n	80110c0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801105c:	2b00      	cmp	r3, #0
 801105e:	d009      	beq.n	8011074 <HAL_UART_IRQHandler+0x71c>
 8011060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f001 f9e8 	bl	8012442 <UART_EndTransmit_IT>
    return;
 8011072:	e026      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801107c:	2b00      	cmp	r3, #0
 801107e:	d009      	beq.n	8011094 <HAL_UART_IRQHandler+0x73c>
 8011080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011084:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011088:	2b00      	cmp	r3, #0
 801108a:	d003      	beq.n	8011094 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f001 ff33 	bl	8012ef8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011092:	e016      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801109c:	2b00      	cmp	r3, #0
 801109e:	d010      	beq.n	80110c2 <HAL_UART_IRQHandler+0x76a>
 80110a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	da0c      	bge.n	80110c2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f001 ff1b 	bl	8012ee4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80110ae:	e008      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80110b0:	bf00      	nop
 80110b2:	e006      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
    return;
 80110b4:	bf00      	nop
 80110b6:	e004      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80110b8:	bf00      	nop
 80110ba:	e002      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80110bc:	bf00      	nop
 80110be:	e000      	b.n	80110c2 <HAL_UART_IRQHandler+0x76a>
    return;
 80110c0:	bf00      	nop
  }
}
 80110c2:	37e8      	adds	r7, #232	; 0xe8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	effffffe 	.word	0xeffffffe

080110cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80110d4:	bf00      	nop
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80110e8:	bf00      	nop
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr

080110f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011100:	bf00      	nop
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr

0801110c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801110c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011110:	b092      	sub	sp, #72	; 0x48
 8011112:	af00      	add	r7, sp, #0
 8011114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	689a      	ldr	r2, [r3, #8]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	691b      	ldr	r3, [r3, #16]
 8011124:	431a      	orrs	r2, r3
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	695b      	ldr	r3, [r3, #20]
 801112a:	431a      	orrs	r2, r3
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	69db      	ldr	r3, [r3, #28]
 8011130:	4313      	orrs	r3, r2
 8011132:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	4bbe      	ldr	r3, [pc, #760]	; (8011434 <UART_SetConfig+0x328>)
 801113c:	4013      	ands	r3, r2
 801113e:	697a      	ldr	r2, [r7, #20]
 8011140:	6812      	ldr	r2, [r2, #0]
 8011142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011144:	430b      	orrs	r3, r1
 8011146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	68da      	ldr	r2, [r3, #12]
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	430a      	orrs	r2, r1
 801115c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	699b      	ldr	r3, [r3, #24]
 8011162:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4ab3      	ldr	r2, [pc, #716]	; (8011438 <UART_SetConfig+0x32c>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d004      	beq.n	8011178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	6a1b      	ldr	r3, [r3, #32]
 8011172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011174:	4313      	orrs	r3, r2
 8011176:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	689a      	ldr	r2, [r3, #8]
 801117e:	4baf      	ldr	r3, [pc, #700]	; (801143c <UART_SetConfig+0x330>)
 8011180:	4013      	ands	r3, r2
 8011182:	697a      	ldr	r2, [r7, #20]
 8011184:	6812      	ldr	r2, [r2, #0]
 8011186:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011188:	430b      	orrs	r3, r1
 801118a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011192:	f023 010f 	bic.w	r1, r3, #15
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	430a      	orrs	r2, r1
 80111a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4aa6      	ldr	r2, [pc, #664]	; (8011440 <UART_SetConfig+0x334>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d177      	bne.n	801129c <UART_SetConfig+0x190>
 80111ac:	4ba5      	ldr	r3, [pc, #660]	; (8011444 <UART_SetConfig+0x338>)
 80111ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111b4:	2b28      	cmp	r3, #40	; 0x28
 80111b6:	d86d      	bhi.n	8011294 <UART_SetConfig+0x188>
 80111b8:	a201      	add	r2, pc, #4	; (adr r2, 80111c0 <UART_SetConfig+0xb4>)
 80111ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111be:	bf00      	nop
 80111c0:	08011265 	.word	0x08011265
 80111c4:	08011295 	.word	0x08011295
 80111c8:	08011295 	.word	0x08011295
 80111cc:	08011295 	.word	0x08011295
 80111d0:	08011295 	.word	0x08011295
 80111d4:	08011295 	.word	0x08011295
 80111d8:	08011295 	.word	0x08011295
 80111dc:	08011295 	.word	0x08011295
 80111e0:	0801126d 	.word	0x0801126d
 80111e4:	08011295 	.word	0x08011295
 80111e8:	08011295 	.word	0x08011295
 80111ec:	08011295 	.word	0x08011295
 80111f0:	08011295 	.word	0x08011295
 80111f4:	08011295 	.word	0x08011295
 80111f8:	08011295 	.word	0x08011295
 80111fc:	08011295 	.word	0x08011295
 8011200:	08011275 	.word	0x08011275
 8011204:	08011295 	.word	0x08011295
 8011208:	08011295 	.word	0x08011295
 801120c:	08011295 	.word	0x08011295
 8011210:	08011295 	.word	0x08011295
 8011214:	08011295 	.word	0x08011295
 8011218:	08011295 	.word	0x08011295
 801121c:	08011295 	.word	0x08011295
 8011220:	0801127d 	.word	0x0801127d
 8011224:	08011295 	.word	0x08011295
 8011228:	08011295 	.word	0x08011295
 801122c:	08011295 	.word	0x08011295
 8011230:	08011295 	.word	0x08011295
 8011234:	08011295 	.word	0x08011295
 8011238:	08011295 	.word	0x08011295
 801123c:	08011295 	.word	0x08011295
 8011240:	08011285 	.word	0x08011285
 8011244:	08011295 	.word	0x08011295
 8011248:	08011295 	.word	0x08011295
 801124c:	08011295 	.word	0x08011295
 8011250:	08011295 	.word	0x08011295
 8011254:	08011295 	.word	0x08011295
 8011258:	08011295 	.word	0x08011295
 801125c:	08011295 	.word	0x08011295
 8011260:	0801128d 	.word	0x0801128d
 8011264:	2301      	movs	r3, #1
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e222      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801126c:	2304      	movs	r3, #4
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e21e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011274:	2308      	movs	r3, #8
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e21a      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801127c:	2310      	movs	r3, #16
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e216      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011284:	2320      	movs	r3, #32
 8011286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128a:	e212      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801128c:	2340      	movs	r3, #64	; 0x40
 801128e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011292:	e20e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011294:	2380      	movs	r3, #128	; 0x80
 8011296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129a:	e20a      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4a69      	ldr	r2, [pc, #420]	; (8011448 <UART_SetConfig+0x33c>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d130      	bne.n	8011308 <UART_SetConfig+0x1fc>
 80112a6:	4b67      	ldr	r3, [pc, #412]	; (8011444 <UART_SetConfig+0x338>)
 80112a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112aa:	f003 0307 	and.w	r3, r3, #7
 80112ae:	2b05      	cmp	r3, #5
 80112b0:	d826      	bhi.n	8011300 <UART_SetConfig+0x1f4>
 80112b2:	a201      	add	r2, pc, #4	; (adr r2, 80112b8 <UART_SetConfig+0x1ac>)
 80112b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b8:	080112d1 	.word	0x080112d1
 80112bc:	080112d9 	.word	0x080112d9
 80112c0:	080112e1 	.word	0x080112e1
 80112c4:	080112e9 	.word	0x080112e9
 80112c8:	080112f1 	.word	0x080112f1
 80112cc:	080112f9 	.word	0x080112f9
 80112d0:	2300      	movs	r3, #0
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e1ec      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80112d8:	2304      	movs	r3, #4
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e1e8      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80112e0:	2308      	movs	r3, #8
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e1e4      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80112e8:	2310      	movs	r3, #16
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e1e0      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80112f0:	2320      	movs	r3, #32
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e1dc      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80112f8:	2340      	movs	r3, #64	; 0x40
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e1d8      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011300:	2380      	movs	r3, #128	; 0x80
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e1d4      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a4f      	ldr	r2, [pc, #316]	; (801144c <UART_SetConfig+0x340>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d130      	bne.n	8011374 <UART_SetConfig+0x268>
 8011312:	4b4c      	ldr	r3, [pc, #304]	; (8011444 <UART_SetConfig+0x338>)
 8011314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011316:	f003 0307 	and.w	r3, r3, #7
 801131a:	2b05      	cmp	r3, #5
 801131c:	d826      	bhi.n	801136c <UART_SetConfig+0x260>
 801131e:	a201      	add	r2, pc, #4	; (adr r2, 8011324 <UART_SetConfig+0x218>)
 8011320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011324:	0801133d 	.word	0x0801133d
 8011328:	08011345 	.word	0x08011345
 801132c:	0801134d 	.word	0x0801134d
 8011330:	08011355 	.word	0x08011355
 8011334:	0801135d 	.word	0x0801135d
 8011338:	08011365 	.word	0x08011365
 801133c:	2300      	movs	r3, #0
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e1b6      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011344:	2304      	movs	r3, #4
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e1b2      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801134c:	2308      	movs	r3, #8
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e1ae      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011354:	2310      	movs	r3, #16
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e1aa      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801135c:	2320      	movs	r3, #32
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e1a6      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011364:	2340      	movs	r3, #64	; 0x40
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e1a2      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801136c:	2380      	movs	r3, #128	; 0x80
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e19e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4a35      	ldr	r2, [pc, #212]	; (8011450 <UART_SetConfig+0x344>)
 801137a:	4293      	cmp	r3, r2
 801137c:	d130      	bne.n	80113e0 <UART_SetConfig+0x2d4>
 801137e:	4b31      	ldr	r3, [pc, #196]	; (8011444 <UART_SetConfig+0x338>)
 8011380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011382:	f003 0307 	and.w	r3, r3, #7
 8011386:	2b05      	cmp	r3, #5
 8011388:	d826      	bhi.n	80113d8 <UART_SetConfig+0x2cc>
 801138a:	a201      	add	r2, pc, #4	; (adr r2, 8011390 <UART_SetConfig+0x284>)
 801138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011390:	080113a9 	.word	0x080113a9
 8011394:	080113b1 	.word	0x080113b1
 8011398:	080113b9 	.word	0x080113b9
 801139c:	080113c1 	.word	0x080113c1
 80113a0:	080113c9 	.word	0x080113c9
 80113a4:	080113d1 	.word	0x080113d1
 80113a8:	2300      	movs	r3, #0
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e180      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113b0:	2304      	movs	r3, #4
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e17c      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113b8:	2308      	movs	r3, #8
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e178      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113c0:	2310      	movs	r3, #16
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e174      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113c8:	2320      	movs	r3, #32
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e170      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113d0:	2340      	movs	r3, #64	; 0x40
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e16c      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113d8:	2380      	movs	r3, #128	; 0x80
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e168      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a1b      	ldr	r2, [pc, #108]	; (8011454 <UART_SetConfig+0x348>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d142      	bne.n	8011470 <UART_SetConfig+0x364>
 80113ea:	4b16      	ldr	r3, [pc, #88]	; (8011444 <UART_SetConfig+0x338>)
 80113ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113ee:	f003 0307 	and.w	r3, r3, #7
 80113f2:	2b05      	cmp	r3, #5
 80113f4:	d838      	bhi.n	8011468 <UART_SetConfig+0x35c>
 80113f6:	a201      	add	r2, pc, #4	; (adr r2, 80113fc <UART_SetConfig+0x2f0>)
 80113f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113fc:	08011415 	.word	0x08011415
 8011400:	0801141d 	.word	0x0801141d
 8011404:	08011425 	.word	0x08011425
 8011408:	0801142d 	.word	0x0801142d
 801140c:	08011459 	.word	0x08011459
 8011410:	08011461 	.word	0x08011461
 8011414:	2300      	movs	r3, #0
 8011416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141a:	e14a      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801141c:	2304      	movs	r3, #4
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e146      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011424:	2308      	movs	r3, #8
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e142      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801142c:	2310      	movs	r3, #16
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e13e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011434:	cfff69f3 	.word	0xcfff69f3
 8011438:	58000c00 	.word	0x58000c00
 801143c:	11fff4ff 	.word	0x11fff4ff
 8011440:	40011000 	.word	0x40011000
 8011444:	58024400 	.word	0x58024400
 8011448:	40004400 	.word	0x40004400
 801144c:	40004800 	.word	0x40004800
 8011450:	40004c00 	.word	0x40004c00
 8011454:	40005000 	.word	0x40005000
 8011458:	2320      	movs	r3, #32
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145e:	e128      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011460:	2340      	movs	r3, #64	; 0x40
 8011462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011466:	e124      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011468:	2380      	movs	r3, #128	; 0x80
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e120      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4acb      	ldr	r2, [pc, #812]	; (80117a4 <UART_SetConfig+0x698>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d176      	bne.n	8011568 <UART_SetConfig+0x45c>
 801147a:	4bcb      	ldr	r3, [pc, #812]	; (80117a8 <UART_SetConfig+0x69c>)
 801147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801147e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011482:	2b28      	cmp	r3, #40	; 0x28
 8011484:	d86c      	bhi.n	8011560 <UART_SetConfig+0x454>
 8011486:	a201      	add	r2, pc, #4	; (adr r2, 801148c <UART_SetConfig+0x380>)
 8011488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148c:	08011531 	.word	0x08011531
 8011490:	08011561 	.word	0x08011561
 8011494:	08011561 	.word	0x08011561
 8011498:	08011561 	.word	0x08011561
 801149c:	08011561 	.word	0x08011561
 80114a0:	08011561 	.word	0x08011561
 80114a4:	08011561 	.word	0x08011561
 80114a8:	08011561 	.word	0x08011561
 80114ac:	08011539 	.word	0x08011539
 80114b0:	08011561 	.word	0x08011561
 80114b4:	08011561 	.word	0x08011561
 80114b8:	08011561 	.word	0x08011561
 80114bc:	08011561 	.word	0x08011561
 80114c0:	08011561 	.word	0x08011561
 80114c4:	08011561 	.word	0x08011561
 80114c8:	08011561 	.word	0x08011561
 80114cc:	08011541 	.word	0x08011541
 80114d0:	08011561 	.word	0x08011561
 80114d4:	08011561 	.word	0x08011561
 80114d8:	08011561 	.word	0x08011561
 80114dc:	08011561 	.word	0x08011561
 80114e0:	08011561 	.word	0x08011561
 80114e4:	08011561 	.word	0x08011561
 80114e8:	08011561 	.word	0x08011561
 80114ec:	08011549 	.word	0x08011549
 80114f0:	08011561 	.word	0x08011561
 80114f4:	08011561 	.word	0x08011561
 80114f8:	08011561 	.word	0x08011561
 80114fc:	08011561 	.word	0x08011561
 8011500:	08011561 	.word	0x08011561
 8011504:	08011561 	.word	0x08011561
 8011508:	08011561 	.word	0x08011561
 801150c:	08011551 	.word	0x08011551
 8011510:	08011561 	.word	0x08011561
 8011514:	08011561 	.word	0x08011561
 8011518:	08011561 	.word	0x08011561
 801151c:	08011561 	.word	0x08011561
 8011520:	08011561 	.word	0x08011561
 8011524:	08011561 	.word	0x08011561
 8011528:	08011561 	.word	0x08011561
 801152c:	08011559 	.word	0x08011559
 8011530:	2301      	movs	r3, #1
 8011532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011536:	e0bc      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011538:	2304      	movs	r3, #4
 801153a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153e:	e0b8      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011540:	2308      	movs	r3, #8
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e0b4      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011548:	2310      	movs	r3, #16
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e0b0      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011550:	2320      	movs	r3, #32
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e0ac      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011558:	2340      	movs	r3, #64	; 0x40
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e0a8      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011560:	2380      	movs	r3, #128	; 0x80
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e0a4      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a8f      	ldr	r2, [pc, #572]	; (80117ac <UART_SetConfig+0x6a0>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d130      	bne.n	80115d4 <UART_SetConfig+0x4c8>
 8011572:	4b8d      	ldr	r3, [pc, #564]	; (80117a8 <UART_SetConfig+0x69c>)
 8011574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011576:	f003 0307 	and.w	r3, r3, #7
 801157a:	2b05      	cmp	r3, #5
 801157c:	d826      	bhi.n	80115cc <UART_SetConfig+0x4c0>
 801157e:	a201      	add	r2, pc, #4	; (adr r2, 8011584 <UART_SetConfig+0x478>)
 8011580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011584:	0801159d 	.word	0x0801159d
 8011588:	080115a5 	.word	0x080115a5
 801158c:	080115ad 	.word	0x080115ad
 8011590:	080115b5 	.word	0x080115b5
 8011594:	080115bd 	.word	0x080115bd
 8011598:	080115c5 	.word	0x080115c5
 801159c:	2300      	movs	r3, #0
 801159e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a2:	e086      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115a4:	2304      	movs	r3, #4
 80115a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115aa:	e082      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115ac:	2308      	movs	r3, #8
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e07e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115b4:	2310      	movs	r3, #16
 80115b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ba:	e07a      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115bc:	2320      	movs	r3, #32
 80115be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c2:	e076      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115c4:	2340      	movs	r3, #64	; 0x40
 80115c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ca:	e072      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115cc:	2380      	movs	r3, #128	; 0x80
 80115ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115d2:	e06e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4a75      	ldr	r2, [pc, #468]	; (80117b0 <UART_SetConfig+0x6a4>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d130      	bne.n	8011640 <UART_SetConfig+0x534>
 80115de:	4b72      	ldr	r3, [pc, #456]	; (80117a8 <UART_SetConfig+0x69c>)
 80115e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115e2:	f003 0307 	and.w	r3, r3, #7
 80115e6:	2b05      	cmp	r3, #5
 80115e8:	d826      	bhi.n	8011638 <UART_SetConfig+0x52c>
 80115ea:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <UART_SetConfig+0x4e4>)
 80115ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f0:	08011609 	.word	0x08011609
 80115f4:	08011611 	.word	0x08011611
 80115f8:	08011619 	.word	0x08011619
 80115fc:	08011621 	.word	0x08011621
 8011600:	08011629 	.word	0x08011629
 8011604:	08011631 	.word	0x08011631
 8011608:	2300      	movs	r3, #0
 801160a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160e:	e050      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011610:	2304      	movs	r3, #4
 8011612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011616:	e04c      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011618:	2308      	movs	r3, #8
 801161a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161e:	e048      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011620:	2310      	movs	r3, #16
 8011622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011626:	e044      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011628:	2320      	movs	r3, #32
 801162a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162e:	e040      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011630:	2340      	movs	r3, #64	; 0x40
 8011632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011636:	e03c      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011638:	2380      	movs	r3, #128	; 0x80
 801163a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163e:	e038      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	4a5b      	ldr	r2, [pc, #364]	; (80117b4 <UART_SetConfig+0x6a8>)
 8011646:	4293      	cmp	r3, r2
 8011648:	d130      	bne.n	80116ac <UART_SetConfig+0x5a0>
 801164a:	4b57      	ldr	r3, [pc, #348]	; (80117a8 <UART_SetConfig+0x69c>)
 801164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801164e:	f003 0307 	and.w	r3, r3, #7
 8011652:	2b05      	cmp	r3, #5
 8011654:	d826      	bhi.n	80116a4 <UART_SetConfig+0x598>
 8011656:	a201      	add	r2, pc, #4	; (adr r2, 801165c <UART_SetConfig+0x550>)
 8011658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165c:	08011675 	.word	0x08011675
 8011660:	0801167d 	.word	0x0801167d
 8011664:	08011685 	.word	0x08011685
 8011668:	0801168d 	.word	0x0801168d
 801166c:	08011695 	.word	0x08011695
 8011670:	0801169d 	.word	0x0801169d
 8011674:	2302      	movs	r3, #2
 8011676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167a:	e01a      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801167c:	2304      	movs	r3, #4
 801167e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011682:	e016      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011684:	2308      	movs	r3, #8
 8011686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168a:	e012      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801168c:	2310      	movs	r3, #16
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e00e      	b.n	80116b2 <UART_SetConfig+0x5a6>
 8011694:	2320      	movs	r3, #32
 8011696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169a:	e00a      	b.n	80116b2 <UART_SetConfig+0x5a6>
 801169c:	2340      	movs	r3, #64	; 0x40
 801169e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a2:	e006      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80116a4:	2380      	movs	r3, #128	; 0x80
 80116a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116aa:	e002      	b.n	80116b2 <UART_SetConfig+0x5a6>
 80116ac:	2380      	movs	r3, #128	; 0x80
 80116ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4a3f      	ldr	r2, [pc, #252]	; (80117b4 <UART_SetConfig+0x6a8>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	f040 80f8 	bne.w	80118ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80116be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116c2:	2b20      	cmp	r3, #32
 80116c4:	dc46      	bgt.n	8011754 <UART_SetConfig+0x648>
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	f2c0 8082 	blt.w	80117d0 <UART_SetConfig+0x6c4>
 80116cc:	3b02      	subs	r3, #2
 80116ce:	2b1e      	cmp	r3, #30
 80116d0:	d87e      	bhi.n	80117d0 <UART_SetConfig+0x6c4>
 80116d2:	a201      	add	r2, pc, #4	; (adr r2, 80116d8 <UART_SetConfig+0x5cc>)
 80116d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d8:	0801175b 	.word	0x0801175b
 80116dc:	080117d1 	.word	0x080117d1
 80116e0:	08011763 	.word	0x08011763
 80116e4:	080117d1 	.word	0x080117d1
 80116e8:	080117d1 	.word	0x080117d1
 80116ec:	080117d1 	.word	0x080117d1
 80116f0:	08011773 	.word	0x08011773
 80116f4:	080117d1 	.word	0x080117d1
 80116f8:	080117d1 	.word	0x080117d1
 80116fc:	080117d1 	.word	0x080117d1
 8011700:	080117d1 	.word	0x080117d1
 8011704:	080117d1 	.word	0x080117d1
 8011708:	080117d1 	.word	0x080117d1
 801170c:	080117d1 	.word	0x080117d1
 8011710:	08011783 	.word	0x08011783
 8011714:	080117d1 	.word	0x080117d1
 8011718:	080117d1 	.word	0x080117d1
 801171c:	080117d1 	.word	0x080117d1
 8011720:	080117d1 	.word	0x080117d1
 8011724:	080117d1 	.word	0x080117d1
 8011728:	080117d1 	.word	0x080117d1
 801172c:	080117d1 	.word	0x080117d1
 8011730:	080117d1 	.word	0x080117d1
 8011734:	080117d1 	.word	0x080117d1
 8011738:	080117d1 	.word	0x080117d1
 801173c:	080117d1 	.word	0x080117d1
 8011740:	080117d1 	.word	0x080117d1
 8011744:	080117d1 	.word	0x080117d1
 8011748:	080117d1 	.word	0x080117d1
 801174c:	080117d1 	.word	0x080117d1
 8011750:	080117c3 	.word	0x080117c3
 8011754:	2b40      	cmp	r3, #64	; 0x40
 8011756:	d037      	beq.n	80117c8 <UART_SetConfig+0x6bc>
 8011758:	e03a      	b.n	80117d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801175a:	f7fb fce5 	bl	800d128 <HAL_RCCEx_GetD3PCLK1Freq>
 801175e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011760:	e03c      	b.n	80117dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011766:	4618      	mov	r0, r3
 8011768:	f7fb fcf4 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011770:	e034      	b.n	80117dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011772:	f107 0318 	add.w	r3, r7, #24
 8011776:	4618      	mov	r0, r3
 8011778:	f7fb fe40 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011780:	e02c      	b.n	80117dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011782:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <UART_SetConfig+0x69c>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f003 0320 	and.w	r3, r3, #32
 801178a:	2b00      	cmp	r3, #0
 801178c:	d016      	beq.n	80117bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801178e:	4b06      	ldr	r3, [pc, #24]	; (80117a8 <UART_SetConfig+0x69c>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	08db      	lsrs	r3, r3, #3
 8011794:	f003 0303 	and.w	r3, r3, #3
 8011798:	4a07      	ldr	r2, [pc, #28]	; (80117b8 <UART_SetConfig+0x6ac>)
 801179a:	fa22 f303 	lsr.w	r3, r2, r3
 801179e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117a0:	e01c      	b.n	80117dc <UART_SetConfig+0x6d0>
 80117a2:	bf00      	nop
 80117a4:	40011400 	.word	0x40011400
 80117a8:	58024400 	.word	0x58024400
 80117ac:	40007800 	.word	0x40007800
 80117b0:	40007c00 	.word	0x40007c00
 80117b4:	58000c00 	.word	0x58000c00
 80117b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80117bc:	4b9d      	ldr	r3, [pc, #628]	; (8011a34 <UART_SetConfig+0x928>)
 80117be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c0:	e00c      	b.n	80117dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117c2:	4b9d      	ldr	r3, [pc, #628]	; (8011a38 <UART_SetConfig+0x92c>)
 80117c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c6:	e009      	b.n	80117dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117ce:	e005      	b.n	80117dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80117d0:	2300      	movs	r3, #0
 80117d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117d4:	2301      	movs	r3, #1
 80117d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80117dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117de:	2b00      	cmp	r3, #0
 80117e0:	f000 81de 	beq.w	8011ba0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e8:	4a94      	ldr	r2, [pc, #592]	; (8011a3c <UART_SetConfig+0x930>)
 80117ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117ee:	461a      	mov	r2, r3
 80117f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80117f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	4613      	mov	r3, r2
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	4413      	add	r3, r2
 8011802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011804:	429a      	cmp	r2, r3
 8011806:	d305      	bcc.n	8011814 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801180e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011810:	429a      	cmp	r2, r3
 8011812:	d903      	bls.n	801181c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011814:	2301      	movs	r3, #1
 8011816:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801181a:	e1c1      	b.n	8011ba0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801181c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801181e:	2200      	movs	r2, #0
 8011820:	60bb      	str	r3, [r7, #8]
 8011822:	60fa      	str	r2, [r7, #12]
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011828:	4a84      	ldr	r2, [pc, #528]	; (8011a3c <UART_SetConfig+0x930>)
 801182a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801182e:	b29b      	uxth	r3, r3
 8011830:	2200      	movs	r2, #0
 8011832:	603b      	str	r3, [r7, #0]
 8011834:	607a      	str	r2, [r7, #4]
 8011836:	e9d7 2300 	ldrd	r2, r3, [r7]
 801183a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801183e:	f7ee fd4f 	bl	80002e0 <__aeabi_uldivmod>
 8011842:	4602      	mov	r2, r0
 8011844:	460b      	mov	r3, r1
 8011846:	4610      	mov	r0, r2
 8011848:	4619      	mov	r1, r3
 801184a:	f04f 0200 	mov.w	r2, #0
 801184e:	f04f 0300 	mov.w	r3, #0
 8011852:	020b      	lsls	r3, r1, #8
 8011854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011858:	0202      	lsls	r2, r0, #8
 801185a:	6979      	ldr	r1, [r7, #20]
 801185c:	6849      	ldr	r1, [r1, #4]
 801185e:	0849      	lsrs	r1, r1, #1
 8011860:	2000      	movs	r0, #0
 8011862:	460c      	mov	r4, r1
 8011864:	4605      	mov	r5, r0
 8011866:	eb12 0804 	adds.w	r8, r2, r4
 801186a:	eb43 0905 	adc.w	r9, r3, r5
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	469a      	mov	sl, r3
 8011876:	4693      	mov	fp, r2
 8011878:	4652      	mov	r2, sl
 801187a:	465b      	mov	r3, fp
 801187c:	4640      	mov	r0, r8
 801187e:	4649      	mov	r1, r9
 8011880:	f7ee fd2e 	bl	80002e0 <__aeabi_uldivmod>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	4613      	mov	r3, r2
 801188a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011892:	d308      	bcc.n	80118a6 <UART_SetConfig+0x79a>
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801189a:	d204      	bcs.n	80118a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118a2:	60da      	str	r2, [r3, #12]
 80118a4:	e17c      	b.n	8011ba0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80118a6:	2301      	movs	r3, #1
 80118a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80118ac:	e178      	b.n	8011ba0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	69db      	ldr	r3, [r3, #28]
 80118b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118b6:	f040 80c5 	bne.w	8011a44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80118ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118be:	2b20      	cmp	r3, #32
 80118c0:	dc48      	bgt.n	8011954 <UART_SetConfig+0x848>
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	db7b      	blt.n	80119be <UART_SetConfig+0x8b2>
 80118c6:	2b20      	cmp	r3, #32
 80118c8:	d879      	bhi.n	80119be <UART_SetConfig+0x8b2>
 80118ca:	a201      	add	r2, pc, #4	; (adr r2, 80118d0 <UART_SetConfig+0x7c4>)
 80118cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d0:	0801195b 	.word	0x0801195b
 80118d4:	08011963 	.word	0x08011963
 80118d8:	080119bf 	.word	0x080119bf
 80118dc:	080119bf 	.word	0x080119bf
 80118e0:	0801196b 	.word	0x0801196b
 80118e4:	080119bf 	.word	0x080119bf
 80118e8:	080119bf 	.word	0x080119bf
 80118ec:	080119bf 	.word	0x080119bf
 80118f0:	0801197b 	.word	0x0801197b
 80118f4:	080119bf 	.word	0x080119bf
 80118f8:	080119bf 	.word	0x080119bf
 80118fc:	080119bf 	.word	0x080119bf
 8011900:	080119bf 	.word	0x080119bf
 8011904:	080119bf 	.word	0x080119bf
 8011908:	080119bf 	.word	0x080119bf
 801190c:	080119bf 	.word	0x080119bf
 8011910:	0801198b 	.word	0x0801198b
 8011914:	080119bf 	.word	0x080119bf
 8011918:	080119bf 	.word	0x080119bf
 801191c:	080119bf 	.word	0x080119bf
 8011920:	080119bf 	.word	0x080119bf
 8011924:	080119bf 	.word	0x080119bf
 8011928:	080119bf 	.word	0x080119bf
 801192c:	080119bf 	.word	0x080119bf
 8011930:	080119bf 	.word	0x080119bf
 8011934:	080119bf 	.word	0x080119bf
 8011938:	080119bf 	.word	0x080119bf
 801193c:	080119bf 	.word	0x080119bf
 8011940:	080119bf 	.word	0x080119bf
 8011944:	080119bf 	.word	0x080119bf
 8011948:	080119bf 	.word	0x080119bf
 801194c:	080119bf 	.word	0x080119bf
 8011950:	080119b1 	.word	0x080119b1
 8011954:	2b40      	cmp	r3, #64	; 0x40
 8011956:	d02e      	beq.n	80119b6 <UART_SetConfig+0x8aa>
 8011958:	e031      	b.n	80119be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801195a:	f7f9 fbed 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 801195e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011960:	e033      	b.n	80119ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011962:	f7f9 fbff 	bl	800b164 <HAL_RCC_GetPCLK2Freq>
 8011966:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011968:	e02f      	b.n	80119ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801196e:	4618      	mov	r0, r3
 8011970:	f7fb fbf0 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011978:	e027      	b.n	80119ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801197a:	f107 0318 	add.w	r3, r7, #24
 801197e:	4618      	mov	r0, r3
 8011980:	f7fb fd3c 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011988:	e01f      	b.n	80119ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801198a:	4b2d      	ldr	r3, [pc, #180]	; (8011a40 <UART_SetConfig+0x934>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f003 0320 	and.w	r3, r3, #32
 8011992:	2b00      	cmp	r3, #0
 8011994:	d009      	beq.n	80119aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011996:	4b2a      	ldr	r3, [pc, #168]	; (8011a40 <UART_SetConfig+0x934>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	08db      	lsrs	r3, r3, #3
 801199c:	f003 0303 	and.w	r3, r3, #3
 80119a0:	4a24      	ldr	r2, [pc, #144]	; (8011a34 <UART_SetConfig+0x928>)
 80119a2:	fa22 f303 	lsr.w	r3, r2, r3
 80119a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119a8:	e00f      	b.n	80119ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80119aa:	4b22      	ldr	r3, [pc, #136]	; (8011a34 <UART_SetConfig+0x928>)
 80119ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ae:	e00c      	b.n	80119ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119b0:	4b21      	ldr	r3, [pc, #132]	; (8011a38 <UART_SetConfig+0x92c>)
 80119b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119b4:	e009      	b.n	80119ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119bc:	e005      	b.n	80119ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80119be:	2300      	movs	r3, #0
 80119c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119c2:	2301      	movs	r3, #1
 80119c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80119ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 80e7 	beq.w	8011ba0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d6:	4a19      	ldr	r2, [pc, #100]	; (8011a3c <UART_SetConfig+0x930>)
 80119d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119dc:	461a      	mov	r2, r3
 80119de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80119e4:	005a      	lsls	r2, r3, #1
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	085b      	lsrs	r3, r3, #1
 80119ec:	441a      	add	r2, r3
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80119f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fa:	2b0f      	cmp	r3, #15
 80119fc:	d916      	bls.n	8011a2c <UART_SetConfig+0x920>
 80119fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a04:	d212      	bcs.n	8011a2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	f023 030f 	bic.w	r3, r3, #15
 8011a0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a12:	085b      	lsrs	r3, r3, #1
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	f003 0307 	and.w	r3, r3, #7
 8011a1a:	b29a      	uxth	r2, r3
 8011a1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011a28:	60da      	str	r2, [r3, #12]
 8011a2a:	e0b9      	b.n	8011ba0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a32:	e0b5      	b.n	8011ba0 <UART_SetConfig+0xa94>
 8011a34:	03d09000 	.word	0x03d09000
 8011a38:	003d0900 	.word	0x003d0900
 8011a3c:	08017b6c 	.word	0x08017b6c
 8011a40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011a44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a48:	2b20      	cmp	r3, #32
 8011a4a:	dc49      	bgt.n	8011ae0 <UART_SetConfig+0x9d4>
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	db7c      	blt.n	8011b4a <UART_SetConfig+0xa3e>
 8011a50:	2b20      	cmp	r3, #32
 8011a52:	d87a      	bhi.n	8011b4a <UART_SetConfig+0xa3e>
 8011a54:	a201      	add	r2, pc, #4	; (adr r2, 8011a5c <UART_SetConfig+0x950>)
 8011a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a5a:	bf00      	nop
 8011a5c:	08011ae7 	.word	0x08011ae7
 8011a60:	08011aef 	.word	0x08011aef
 8011a64:	08011b4b 	.word	0x08011b4b
 8011a68:	08011b4b 	.word	0x08011b4b
 8011a6c:	08011af7 	.word	0x08011af7
 8011a70:	08011b4b 	.word	0x08011b4b
 8011a74:	08011b4b 	.word	0x08011b4b
 8011a78:	08011b4b 	.word	0x08011b4b
 8011a7c:	08011b07 	.word	0x08011b07
 8011a80:	08011b4b 	.word	0x08011b4b
 8011a84:	08011b4b 	.word	0x08011b4b
 8011a88:	08011b4b 	.word	0x08011b4b
 8011a8c:	08011b4b 	.word	0x08011b4b
 8011a90:	08011b4b 	.word	0x08011b4b
 8011a94:	08011b4b 	.word	0x08011b4b
 8011a98:	08011b4b 	.word	0x08011b4b
 8011a9c:	08011b17 	.word	0x08011b17
 8011aa0:	08011b4b 	.word	0x08011b4b
 8011aa4:	08011b4b 	.word	0x08011b4b
 8011aa8:	08011b4b 	.word	0x08011b4b
 8011aac:	08011b4b 	.word	0x08011b4b
 8011ab0:	08011b4b 	.word	0x08011b4b
 8011ab4:	08011b4b 	.word	0x08011b4b
 8011ab8:	08011b4b 	.word	0x08011b4b
 8011abc:	08011b4b 	.word	0x08011b4b
 8011ac0:	08011b4b 	.word	0x08011b4b
 8011ac4:	08011b4b 	.word	0x08011b4b
 8011ac8:	08011b4b 	.word	0x08011b4b
 8011acc:	08011b4b 	.word	0x08011b4b
 8011ad0:	08011b4b 	.word	0x08011b4b
 8011ad4:	08011b4b 	.word	0x08011b4b
 8011ad8:	08011b4b 	.word	0x08011b4b
 8011adc:	08011b3d 	.word	0x08011b3d
 8011ae0:	2b40      	cmp	r3, #64	; 0x40
 8011ae2:	d02e      	beq.n	8011b42 <UART_SetConfig+0xa36>
 8011ae4:	e031      	b.n	8011b4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ae6:	f7f9 fb27 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 8011aea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011aec:	e033      	b.n	8011b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011aee:	f7f9 fb39 	bl	800b164 <HAL_RCC_GetPCLK2Freq>
 8011af2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011af4:	e02f      	b.n	8011b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fb fb2a 	bl	800d154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b04:	e027      	b.n	8011b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b06:	f107 0318 	add.w	r3, r7, #24
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fb fc76 	bl	800d3fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b14:	e01f      	b.n	8011b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b16:	4b2d      	ldr	r3, [pc, #180]	; (8011bcc <UART_SetConfig+0xac0>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f003 0320 	and.w	r3, r3, #32
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d009      	beq.n	8011b36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b22:	4b2a      	ldr	r3, [pc, #168]	; (8011bcc <UART_SetConfig+0xac0>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	08db      	lsrs	r3, r3, #3
 8011b28:	f003 0303 	and.w	r3, r3, #3
 8011b2c:	4a28      	ldr	r2, [pc, #160]	; (8011bd0 <UART_SetConfig+0xac4>)
 8011b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b34:	e00f      	b.n	8011b56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011b36:	4b26      	ldr	r3, [pc, #152]	; (8011bd0 <UART_SetConfig+0xac4>)
 8011b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b3a:	e00c      	b.n	8011b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b3c:	4b25      	ldr	r3, [pc, #148]	; (8011bd4 <UART_SetConfig+0xac8>)
 8011b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b40:	e009      	b.n	8011b56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b48:	e005      	b.n	8011b56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011b4e:	2301      	movs	r3, #1
 8011b50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b54:	bf00      	nop
    }

    if (pclk != 0U)
 8011b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d021      	beq.n	8011ba0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b60:	4a1d      	ldr	r2, [pc, #116]	; (8011bd8 <UART_SetConfig+0xacc>)
 8011b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b66:	461a      	mov	r2, r3
 8011b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	085b      	lsrs	r3, r3, #1
 8011b74:	441a      	add	r2, r3
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	2b0f      	cmp	r3, #15
 8011b84:	d909      	bls.n	8011b9a <UART_SetConfig+0xa8e>
 8011b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b8c:	d205      	bcs.n	8011b9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	60da      	str	r2, [r3, #12]
 8011b98:	e002      	b.n	8011ba0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	2201      	movs	r2, #1
 8011bac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011bbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3748      	adds	r7, #72	; 0x48
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011bca:	bf00      	nop
 8011bcc:	58024400 	.word	0x58024400
 8011bd0:	03d09000 	.word	0x03d09000
 8011bd4:	003d0900 	.word	0x003d0900
 8011bd8:	08017b6c 	.word	0x08017b6c

08011bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011be8:	f003 0308 	and.w	r3, r3, #8
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00a      	beq.n	8011c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	430a      	orrs	r2, r1
 8011c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c0a:	f003 0301 	and.w	r3, r3, #1
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00a      	beq.n	8011c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	430a      	orrs	r2, r1
 8011c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c2c:	f003 0302 	and.w	r3, r3, #2
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00a      	beq.n	8011c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	430a      	orrs	r2, r1
 8011c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c4e:	f003 0304 	and.w	r3, r3, #4
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00a      	beq.n	8011c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	430a      	orrs	r2, r1
 8011c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c70:	f003 0310 	and.w	r3, r3, #16
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d00a      	beq.n	8011c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	430a      	orrs	r2, r1
 8011c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c92:	f003 0320 	and.w	r3, r3, #32
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d00a      	beq.n	8011cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	430a      	orrs	r2, r1
 8011cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d01a      	beq.n	8011cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	430a      	orrs	r2, r1
 8011cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cda:	d10a      	bne.n	8011cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	430a      	orrs	r2, r1
 8011cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d00a      	beq.n	8011d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	430a      	orrs	r2, r1
 8011d12:	605a      	str	r2, [r3, #4]
  }
}
 8011d14:	bf00      	nop
 8011d16:	370c      	adds	r7, #12
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b098      	sub	sp, #96	; 0x60
 8011d24:	af02      	add	r7, sp, #8
 8011d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d30:	f7f2 fa74 	bl	800421c <HAL_GetTick>
 8011d34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f003 0308 	and.w	r3, r3, #8
 8011d40:	2b08      	cmp	r3, #8
 8011d42:	d12f      	bne.n	8011da4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 f88e 	bl	8011e74 <UART_WaitOnFlagUntilTimeout>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d022      	beq.n	8011da4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d66:	e853 3f00 	ldrex	r3, [r3]
 8011d6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d72:	653b      	str	r3, [r7, #80]	; 0x50
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	461a      	mov	r2, r3
 8011d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8011d7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d84:	e841 2300 	strex	r3, r2, [r1]
 8011d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1e6      	bne.n	8011d5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2220      	movs	r2, #32
 8011d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011da0:	2303      	movs	r3, #3
 8011da2:	e063      	b.n	8011e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f003 0304 	and.w	r3, r3, #4
 8011dae:	2b04      	cmp	r3, #4
 8011db0:	d149      	bne.n	8011e46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011db2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f000 f857 	bl	8011e74 <UART_WaitOnFlagUntilTimeout>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d03c      	beq.n	8011e46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	e853 3f00 	ldrex	r3, [r3]
 8011dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8011dda:	6a3b      	ldr	r3, [r7, #32]
 8011ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	461a      	mov	r2, r3
 8011de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dea:	633b      	str	r3, [r7, #48]	; 0x30
 8011dec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011df2:	e841 2300 	strex	r3, r2, [r1]
 8011df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1e6      	bne.n	8011dcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	3308      	adds	r3, #8
 8011e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	e853 3f00 	ldrex	r3, [r3]
 8011e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f023 0301 	bic.w	r3, r3, #1
 8011e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e1e:	61fa      	str	r2, [r7, #28]
 8011e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e22:	69b9      	ldr	r1, [r7, #24]
 8011e24:	69fa      	ldr	r2, [r7, #28]
 8011e26:	e841 2300 	strex	r3, r2, [r1]
 8011e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1e5      	bne.n	8011dfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2220      	movs	r2, #32
 8011e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e42:	2303      	movs	r3, #3
 8011e44:	e012      	b.n	8011e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2220      	movs	r2, #32
 8011e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2220      	movs	r2, #32
 8011e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3758      	adds	r7, #88	; 0x58
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	603b      	str	r3, [r7, #0]
 8011e80:	4613      	mov	r3, r2
 8011e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e84:	e04f      	b.n	8011f26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e8c:	d04b      	beq.n	8011f26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e8e:	f7f2 f9c5 	bl	800421c <HAL_GetTick>
 8011e92:	4602      	mov	r2, r0
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	1ad3      	subs	r3, r2, r3
 8011e98:	69ba      	ldr	r2, [r7, #24]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d302      	bcc.n	8011ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d101      	bne.n	8011ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ea4:	2303      	movs	r3, #3
 8011ea6:	e04e      	b.n	8011f46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f003 0304 	and.w	r3, r3, #4
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d037      	beq.n	8011f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	2b80      	cmp	r3, #128	; 0x80
 8011eba:	d034      	beq.n	8011f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2b40      	cmp	r3, #64	; 0x40
 8011ec0:	d031      	beq.n	8011f26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	69db      	ldr	r3, [r3, #28]
 8011ec8:	f003 0308 	and.w	r3, r3, #8
 8011ecc:	2b08      	cmp	r3, #8
 8011ece:	d110      	bne.n	8011ef2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2208      	movs	r2, #8
 8011ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f000 f99d 	bl	8012218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2208      	movs	r2, #8
 8011ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e029      	b.n	8011f46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	69db      	ldr	r3, [r3, #28]
 8011ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f00:	d111      	bne.n	8011f26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f000 f983 	bl	8012218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2220      	movs	r2, #32
 8011f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011f22:	2303      	movs	r3, #3
 8011f24:	e00f      	b.n	8011f46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	69da      	ldr	r2, [r3, #28]
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	4013      	ands	r3, r2
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	bf0c      	ite	eq
 8011f36:	2301      	moveq	r3, #1
 8011f38:	2300      	movne	r3, #0
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d0a0      	beq.n	8011e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b0a3      	sub	sp, #140	; 0x8c
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	4613      	mov	r3, r2
 8011f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	88fa      	ldrh	r2, [r7, #6]
 8011f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	88fa      	ldrh	r2, [r7, #6]
 8011f70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2200      	movs	r2, #0
 8011f78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	689b      	ldr	r3, [r3, #8]
 8011f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f82:	d10e      	bne.n	8011fa2 <UART_Start_Receive_IT+0x52>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	691b      	ldr	r3, [r3, #16]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d105      	bne.n	8011f98 <UART_Start_Receive_IT+0x48>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011f92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f96:	e02d      	b.n	8011ff4 <UART_Start_Receive_IT+0xa4>
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	22ff      	movs	r2, #255	; 0xff
 8011f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fa0:	e028      	b.n	8011ff4 <UART_Start_Receive_IT+0xa4>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	689b      	ldr	r3, [r3, #8]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10d      	bne.n	8011fc6 <UART_Start_Receive_IT+0x76>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	691b      	ldr	r3, [r3, #16]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d104      	bne.n	8011fbc <UART_Start_Receive_IT+0x6c>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	22ff      	movs	r2, #255	; 0xff
 8011fb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fba:	e01b      	b.n	8011ff4 <UART_Start_Receive_IT+0xa4>
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	227f      	movs	r2, #127	; 0x7f
 8011fc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fc4:	e016      	b.n	8011ff4 <UART_Start_Receive_IT+0xa4>
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	689b      	ldr	r3, [r3, #8]
 8011fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011fce:	d10d      	bne.n	8011fec <UART_Start_Receive_IT+0x9c>
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	691b      	ldr	r3, [r3, #16]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d104      	bne.n	8011fe2 <UART_Start_Receive_IT+0x92>
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	227f      	movs	r2, #127	; 0x7f
 8011fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fe0:	e008      	b.n	8011ff4 <UART_Start_Receive_IT+0xa4>
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	223f      	movs	r2, #63	; 0x3f
 8011fe6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fea:	e003      	b.n	8011ff4 <UART_Start_Receive_IT+0xa4>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2222      	movs	r2, #34	; 0x22
 8012000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	3308      	adds	r3, #8
 801200a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801200e:	e853 3f00 	ldrex	r3, [r3]
 8012012:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012016:	f043 0301 	orr.w	r3, r3, #1
 801201a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	3308      	adds	r3, #8
 8012024:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012028:	673a      	str	r2, [r7, #112]	; 0x70
 801202a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801202e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8012036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e3      	bne.n	8012004 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012044:	d14f      	bne.n	80120e6 <UART_Start_Receive_IT+0x196>
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801204c:	88fa      	ldrh	r2, [r7, #6]
 801204e:	429a      	cmp	r2, r3
 8012050:	d349      	bcc.n	80120e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	689b      	ldr	r3, [r3, #8]
 8012056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801205a:	d107      	bne.n	801206c <UART_Start_Receive_IT+0x11c>
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	691b      	ldr	r3, [r3, #16]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d103      	bne.n	801206c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	4a47      	ldr	r2, [pc, #284]	; (8012184 <UART_Start_Receive_IT+0x234>)
 8012068:	675a      	str	r2, [r3, #116]	; 0x74
 801206a:	e002      	b.n	8012072 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	4a46      	ldr	r2, [pc, #280]	; (8012188 <UART_Start_Receive_IT+0x238>)
 8012070:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	691b      	ldr	r3, [r3, #16]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d01a      	beq.n	80120b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012082:	e853 3f00 	ldrex	r3, [r3]
 8012086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801208e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801209c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801209e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80120a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80120a4:	e841 2300 	strex	r3, r2, [r1]
 80120a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80120aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e4      	bne.n	801207a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	3308      	adds	r3, #8
 80120b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ba:	e853 3f00 	ldrex	r3, [r3]
 80120be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	3308      	adds	r3, #8
 80120ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80120d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80120d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80120d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120d8:	e841 2300 	strex	r3, r2, [r1]
 80120dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80120de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1e5      	bne.n	80120b0 <UART_Start_Receive_IT+0x160>
 80120e4:	e046      	b.n	8012174 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	689b      	ldr	r3, [r3, #8]
 80120ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120ee:	d107      	bne.n	8012100 <UART_Start_Receive_IT+0x1b0>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	691b      	ldr	r3, [r3, #16]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d103      	bne.n	8012100 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	4a24      	ldr	r2, [pc, #144]	; (801218c <UART_Start_Receive_IT+0x23c>)
 80120fc:	675a      	str	r2, [r3, #116]	; 0x74
 80120fe:	e002      	b.n	8012106 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	4a23      	ldr	r2, [pc, #140]	; (8012190 <UART_Start_Receive_IT+0x240>)
 8012104:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d019      	beq.n	8012142 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012116:	e853 3f00 	ldrex	r3, [r3]
 801211a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012122:	677b      	str	r3, [r7, #116]	; 0x74
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	461a      	mov	r2, r3
 801212a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801212c:	637b      	str	r3, [r7, #52]	; 0x34
 801212e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012130:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012134:	e841 2300 	strex	r3, r2, [r1]
 8012138:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213c:	2b00      	cmp	r3, #0
 801213e:	d1e6      	bne.n	801210e <UART_Start_Receive_IT+0x1be>
 8012140:	e018      	b.n	8012174 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	e853 3f00 	ldrex	r3, [r3]
 801214e:	613b      	str	r3, [r7, #16]
   return(result);
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	f043 0320 	orr.w	r3, r3, #32
 8012156:	67bb      	str	r3, [r7, #120]	; 0x78
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	461a      	mov	r2, r3
 801215e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012160:	623b      	str	r3, [r7, #32]
 8012162:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012164:	69f9      	ldr	r1, [r7, #28]
 8012166:	6a3a      	ldr	r2, [r7, #32]
 8012168:	e841 2300 	strex	r3, r2, [r1]
 801216c:	61bb      	str	r3, [r7, #24]
   return(result);
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d1e6      	bne.n	8012142 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	378c      	adds	r7, #140	; 0x8c
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr
 8012182:	bf00      	nop
 8012184:	08012b69 	.word	0x08012b69
 8012188:	08012809 	.word	0x08012809
 801218c:	08012651 	.word	0x08012651
 8012190:	08012499 	.word	0x08012499

08012194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012194:	b480      	push	{r7}
 8012196:	b08f      	sub	sp, #60	; 0x3c
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a2:	6a3b      	ldr	r3, [r7, #32]
 80121a4:	e853 3f00 	ldrex	r3, [r3]
 80121a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80121b0:	637b      	str	r3, [r7, #52]	; 0x34
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121c2:	e841 2300 	strex	r3, r2, [r1]
 80121c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d1e6      	bne.n	801219c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	3308      	adds	r3, #8
 80121d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	e853 3f00 	ldrex	r3, [r3]
 80121dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80121e4:	633b      	str	r3, [r7, #48]	; 0x30
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	3308      	adds	r3, #8
 80121ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121ee:	61ba      	str	r2, [r7, #24]
 80121f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121f2:	6979      	ldr	r1, [r7, #20]
 80121f4:	69ba      	ldr	r2, [r7, #24]
 80121f6:	e841 2300 	strex	r3, r2, [r1]
 80121fa:	613b      	str	r3, [r7, #16]
   return(result);
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d1e5      	bne.n	80121ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2220      	movs	r2, #32
 8012206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801220a:	bf00      	nop
 801220c:	373c      	adds	r7, #60	; 0x3c
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr
	...

08012218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012218:	b480      	push	{r7}
 801221a:	b095      	sub	sp, #84	; 0x54
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012228:	e853 3f00 	ldrex	r3, [r3]
 801222c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	461a      	mov	r2, r3
 801223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801223e:	643b      	str	r3, [r7, #64]	; 0x40
 8012240:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012246:	e841 2300 	strex	r3, r2, [r1]
 801224a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1e6      	bne.n	8012220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	3308      	adds	r3, #8
 8012258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	e853 3f00 	ldrex	r3, [r3]
 8012260:	61fb      	str	r3, [r7, #28]
   return(result);
 8012262:	69fa      	ldr	r2, [r7, #28]
 8012264:	4b1e      	ldr	r3, [pc, #120]	; (80122e0 <UART_EndRxTransfer+0xc8>)
 8012266:	4013      	ands	r3, r2
 8012268:	64bb      	str	r3, [r7, #72]	; 0x48
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	3308      	adds	r3, #8
 8012270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012274:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801227a:	e841 2300 	strex	r3, r2, [r1]
 801227e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1e5      	bne.n	8012252 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801228a:	2b01      	cmp	r3, #1
 801228c:	d118      	bne.n	80122c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	e853 3f00 	ldrex	r3, [r3]
 801229a:	60bb      	str	r3, [r7, #8]
   return(result);
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	f023 0310 	bic.w	r3, r3, #16
 80122a2:	647b      	str	r3, [r7, #68]	; 0x44
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	461a      	mov	r2, r3
 80122aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ac:	61bb      	str	r3, [r7, #24]
 80122ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b0:	6979      	ldr	r1, [r7, #20]
 80122b2:	69ba      	ldr	r2, [r7, #24]
 80122b4:	e841 2300 	strex	r3, r2, [r1]
 80122b8:	613b      	str	r3, [r7, #16]
   return(result);
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1e6      	bne.n	801228e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2220      	movs	r2, #32
 80122c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2200      	movs	r2, #0
 80122d2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80122d4:	bf00      	nop
 80122d6:	3754      	adds	r7, #84	; 0x54
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr
 80122e0:	effffffe 	.word	0xeffffffe

080122e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b090      	sub	sp, #64	; 0x40
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	69db      	ldr	r3, [r3, #28]
 80122f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122fa:	d037      	beq.n	801236c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80122fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fe:	2200      	movs	r2, #0
 8012300:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	3308      	adds	r3, #8
 801230a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230e:	e853 3f00 	ldrex	r3, [r3]
 8012312:	623b      	str	r3, [r7, #32]
   return(result);
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801231a:	63bb      	str	r3, [r7, #56]	; 0x38
 801231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3308      	adds	r3, #8
 8012322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012324:	633a      	str	r2, [r7, #48]	; 0x30
 8012326:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012328:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801232a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801232c:	e841 2300 	strex	r3, r2, [r1]
 8012330:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012334:	2b00      	cmp	r3, #0
 8012336:	d1e5      	bne.n	8012304 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	e853 3f00 	ldrex	r3, [r3]
 8012344:	60fb      	str	r3, [r7, #12]
   return(result);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801234c:	637b      	str	r3, [r7, #52]	; 0x34
 801234e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012356:	61fb      	str	r3, [r7, #28]
 8012358:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801235a:	69b9      	ldr	r1, [r7, #24]
 801235c:	69fa      	ldr	r2, [r7, #28]
 801235e:	e841 2300 	strex	r3, r2, [r1]
 8012362:	617b      	str	r3, [r7, #20]
   return(result);
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d1e6      	bne.n	8012338 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801236a:	e002      	b.n	8012372 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801236c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801236e:	f7f0 f86d 	bl	800244c <HAL_UART_TxCpltCallback>
}
 8012372:	bf00      	nop
 8012374:	3740      	adds	r7, #64	; 0x40
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b084      	sub	sp, #16
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012386:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f7fe fe9f 	bl	80110cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801238e:	bf00      	nop
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012396:	b580      	push	{r7, lr}
 8012398:	b086      	sub	sp, #24
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123be:	2b80      	cmp	r3, #128	; 0x80
 80123c0:	d109      	bne.n	80123d6 <UART_DMAError+0x40>
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	2b21      	cmp	r3, #33	; 0x21
 80123c6:	d106      	bne.n	80123d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	2200      	movs	r2, #0
 80123cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80123d0:	6978      	ldr	r0, [r7, #20]
 80123d2:	f7ff fedf 	bl	8012194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	689b      	ldr	r3, [r3, #8]
 80123dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123e0:	2b40      	cmp	r3, #64	; 0x40
 80123e2:	d109      	bne.n	80123f8 <UART_DMAError+0x62>
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2b22      	cmp	r3, #34	; 0x22
 80123e8:	d106      	bne.n	80123f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	2200      	movs	r2, #0
 80123ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80123f2:	6978      	ldr	r0, [r7, #20]
 80123f4:	f7ff ff10 	bl	8012218 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123fe:	f043 0210 	orr.w	r2, r3, #16
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012408:	6978      	ldr	r0, [r7, #20]
 801240a:	f7fe fe69 	bl	80110e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801240e:	bf00      	nop
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b084      	sub	sp, #16
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2200      	movs	r2, #0
 8012428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2200      	movs	r2, #0
 8012430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012434:	68f8      	ldr	r0, [r7, #12]
 8012436:	f7fe fe53 	bl	80110e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801243a:	bf00      	nop
 801243c:	3710      	adds	r7, #16
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b088      	sub	sp, #32
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	e853 3f00 	ldrex	r3, [r3]
 8012456:	60bb      	str	r3, [r7, #8]
   return(result);
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801245e:	61fb      	str	r3, [r7, #28]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	461a      	mov	r2, r3
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	61bb      	str	r3, [r7, #24]
 801246a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246c:	6979      	ldr	r1, [r7, #20]
 801246e:	69ba      	ldr	r2, [r7, #24]
 8012470:	e841 2300 	strex	r3, r2, [r1]
 8012474:	613b      	str	r3, [r7, #16]
   return(result);
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1e6      	bne.n	801244a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2220      	movs	r2, #32
 8012480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7ef ffde 	bl	800244c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012490:	bf00      	nop
 8012492:	3720      	adds	r7, #32
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b09c      	sub	sp, #112	; 0x70
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124b0:	2b22      	cmp	r3, #34	; 0x22
 80124b2:	f040 80be 	bne.w	8012632 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80124c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80124c4:	b2d9      	uxtb	r1, r3
 80124c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80124ca:	b2da      	uxtb	r2, r3
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124d0:	400a      	ands	r2, r1
 80124d2:	b2d2      	uxtb	r2, r2
 80124d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124da:	1c5a      	adds	r2, r3, #1
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	3b01      	subs	r3, #1
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f040 80a1 	bne.w	8012642 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012508:	e853 3f00 	ldrex	r3, [r3]
 801250c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801250e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012514:	66bb      	str	r3, [r7, #104]	; 0x68
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801251e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012520:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012522:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012526:	e841 2300 	strex	r3, r2, [r1]
 801252a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801252c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1e6      	bne.n	8012500 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	3308      	adds	r3, #8
 8012538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253c:	e853 3f00 	ldrex	r3, [r3]
 8012540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012544:	f023 0301 	bic.w	r3, r3, #1
 8012548:	667b      	str	r3, [r7, #100]	; 0x64
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	3308      	adds	r3, #8
 8012550:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012552:	647a      	str	r2, [r7, #68]	; 0x44
 8012554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801255a:	e841 2300 	strex	r3, r2, [r1]
 801255e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012562:	2b00      	cmp	r3, #0
 8012564:	d1e5      	bne.n	8012532 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2220      	movs	r2, #32
 801256a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2200      	movs	r2, #0
 8012572:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4a33      	ldr	r2, [pc, #204]	; (801264c <UART_RxISR_8BIT+0x1b4>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d01f      	beq.n	80125c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801258e:	2b00      	cmp	r3, #0
 8012590:	d018      	beq.n	80125c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	e853 3f00 	ldrex	r3, [r3]
 801259e:	623b      	str	r3, [r7, #32]
   return(result);
 80125a0:	6a3b      	ldr	r3, [r7, #32]
 80125a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125a6:	663b      	str	r3, [r7, #96]	; 0x60
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	461a      	mov	r2, r3
 80125ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125b0:	633b      	str	r3, [r7, #48]	; 0x30
 80125b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125b8:	e841 2300 	strex	r3, r2, [r1]
 80125bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80125be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1e6      	bne.n	8012592 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d12e      	bne.n	801262a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2200      	movs	r2, #0
 80125d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	e853 3f00 	ldrex	r3, [r3]
 80125de:	60fb      	str	r3, [r7, #12]
   return(result);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f023 0310 	bic.w	r3, r3, #16
 80125e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	461a      	mov	r2, r3
 80125ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125f0:	61fb      	str	r3, [r7, #28]
 80125f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f4:	69b9      	ldr	r1, [r7, #24]
 80125f6:	69fa      	ldr	r2, [r7, #28]
 80125f8:	e841 2300 	strex	r3, r2, [r1]
 80125fc:	617b      	str	r3, [r7, #20]
   return(result);
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1e6      	bne.n	80125d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	69db      	ldr	r3, [r3, #28]
 801260a:	f003 0310 	and.w	r3, r3, #16
 801260e:	2b10      	cmp	r3, #16
 8012610:	d103      	bne.n	801261a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2210      	movs	r2, #16
 8012618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012620:	4619      	mov	r1, r3
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f7fe fd66 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012628:	e00b      	b.n	8012642 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ee f82c 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012630:	e007      	b.n	8012642 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	699a      	ldr	r2, [r3, #24]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	f042 0208 	orr.w	r2, r2, #8
 8012640:	619a      	str	r2, [r3, #24]
}
 8012642:	bf00      	nop
 8012644:	3770      	adds	r7, #112	; 0x70
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	58000c00 	.word	0x58000c00

08012650 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b09c      	sub	sp, #112	; 0x70
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801265e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012668:	2b22      	cmp	r3, #34	; 0x22
 801266a:	f040 80be 	bne.w	80127ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012674:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801267c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801267e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012682:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012686:	4013      	ands	r3, r2
 8012688:	b29a      	uxth	r2, r3
 801268a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801268c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012692:	1c9a      	adds	r2, r3, #2
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801269e:	b29b      	uxth	r3, r3
 80126a0:	3b01      	subs	r3, #1
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f040 80a1 	bne.w	80127fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126c0:	e853 3f00 	ldrex	r3, [r3]
 80126c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80126c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80126cc:	667b      	str	r3, [r7, #100]	; 0x64
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	461a      	mov	r2, r3
 80126d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126d6:	657b      	str	r3, [r7, #84]	; 0x54
 80126d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80126dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80126de:	e841 2300 	strex	r3, r2, [r1]
 80126e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80126e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d1e6      	bne.n	80126b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	3308      	adds	r3, #8
 80126f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f4:	e853 3f00 	ldrex	r3, [r3]
 80126f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80126fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fc:	f023 0301 	bic.w	r3, r3, #1
 8012700:	663b      	str	r3, [r7, #96]	; 0x60
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	3308      	adds	r3, #8
 8012708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801270a:	643a      	str	r2, [r7, #64]	; 0x40
 801270c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801270e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012712:	e841 2300 	strex	r3, r2, [r1]
 8012716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1e5      	bne.n	80126ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2220      	movs	r2, #32
 8012722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a33      	ldr	r2, [pc, #204]	; (8012804 <UART_RxISR_16BIT+0x1b4>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d01f      	beq.n	801277c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012746:	2b00      	cmp	r3, #0
 8012748:	d018      	beq.n	801277c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012750:	6a3b      	ldr	r3, [r7, #32]
 8012752:	e853 3f00 	ldrex	r3, [r3]
 8012756:	61fb      	str	r3, [r7, #28]
   return(result);
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801275e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	461a      	mov	r2, r3
 8012766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012768:	62fb      	str	r3, [r7, #44]	; 0x2c
 801276a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801276c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801276e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012770:	e841 2300 	strex	r3, r2, [r1]
 8012774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012778:	2b00      	cmp	r3, #0
 801277a:	d1e6      	bne.n	801274a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012780:	2b01      	cmp	r3, #1
 8012782:	d12e      	bne.n	80127e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2200      	movs	r2, #0
 8012788:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	e853 3f00 	ldrex	r3, [r3]
 8012796:	60bb      	str	r3, [r7, #8]
   return(result);
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	f023 0310 	bic.w	r3, r3, #16
 801279e:	65bb      	str	r3, [r7, #88]	; 0x58
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	461a      	mov	r2, r3
 80127a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127a8:	61bb      	str	r3, [r7, #24]
 80127aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ac:	6979      	ldr	r1, [r7, #20]
 80127ae:	69ba      	ldr	r2, [r7, #24]
 80127b0:	e841 2300 	strex	r3, r2, [r1]
 80127b4:	613b      	str	r3, [r7, #16]
   return(result);
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d1e6      	bne.n	801278a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	69db      	ldr	r3, [r3, #28]
 80127c2:	f003 0310 	and.w	r3, r3, #16
 80127c6:	2b10      	cmp	r3, #16
 80127c8:	d103      	bne.n	80127d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2210      	movs	r2, #16
 80127d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127d8:	4619      	mov	r1, r3
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7fe fc8a 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80127e0:	e00b      	b.n	80127fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ed ff50 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80127e8:	e007      	b.n	80127fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	699a      	ldr	r2, [r3, #24]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f042 0208 	orr.w	r2, r2, #8
 80127f8:	619a      	str	r2, [r3, #24]
}
 80127fa:	bf00      	nop
 80127fc:	3770      	adds	r7, #112	; 0x70
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	58000c00 	.word	0x58000c00

08012808 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b0ac      	sub	sp, #176	; 0xb0
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012816:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	69db      	ldr	r3, [r3, #28]
 8012820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	689b      	ldr	r3, [r3, #8]
 8012834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801283e:	2b22      	cmp	r3, #34	; 0x22
 8012840:	f040 8180 	bne.w	8012b44 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801284a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801284e:	e123      	b.n	8012a98 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012856:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801285a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801285e:	b2d9      	uxtb	r1, r3
 8012860:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012864:	b2da      	uxtb	r2, r3
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801286a:	400a      	ands	r2, r1
 801286c:	b2d2      	uxtb	r2, r2
 801286e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012874:	1c5a      	adds	r2, r3, #1
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012880:	b29b      	uxth	r3, r3
 8012882:	3b01      	subs	r3, #1
 8012884:	b29a      	uxth	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	69db      	ldr	r3, [r3, #28]
 8012892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801289a:	f003 0307 	and.w	r3, r3, #7
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d053      	beq.n	801294a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80128a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d011      	beq.n	80128d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80128ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80128b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00b      	beq.n	80128d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	2201      	movs	r2, #1
 80128c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128c8:	f043 0201 	orr.w	r2, r3, #1
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80128d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128d6:	f003 0302 	and.w	r3, r3, #2
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d011      	beq.n	8012902 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80128de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128e2:	f003 0301 	and.w	r3, r3, #1
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d00b      	beq.n	8012902 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2202      	movs	r2, #2
 80128f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128f8:	f043 0204 	orr.w	r2, r3, #4
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012906:	f003 0304 	and.w	r3, r3, #4
 801290a:	2b00      	cmp	r3, #0
 801290c:	d011      	beq.n	8012932 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801290e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012912:	f003 0301 	and.w	r3, r3, #1
 8012916:	2b00      	cmp	r3, #0
 8012918:	d00b      	beq.n	8012932 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2204      	movs	r2, #4
 8012920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012928:	f043 0202 	orr.w	r2, r3, #2
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012938:	2b00      	cmp	r3, #0
 801293a:	d006      	beq.n	801294a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f7fe fbcf 	bl	80110e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012950:	b29b      	uxth	r3, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	f040 80a0 	bne.w	8012a98 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801295e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012960:	e853 3f00 	ldrex	r3, [r3]
 8012964:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801296c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	461a      	mov	r2, r3
 8012976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801297a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801297c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801297e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012980:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012982:	e841 2300 	strex	r3, r2, [r1]
 8012986:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801298a:	2b00      	cmp	r3, #0
 801298c:	d1e4      	bne.n	8012958 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	3308      	adds	r3, #8
 8012994:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012998:	e853 3f00 	ldrex	r3, [r3]
 801299c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801299e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129a0:	4b6e      	ldr	r3, [pc, #440]	; (8012b5c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80129a2:	4013      	ands	r3, r2
 80129a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	3308      	adds	r3, #8
 80129ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80129b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80129b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80129b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80129ba:	e841 2300 	strex	r3, r2, [r1]
 80129be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80129c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d1e3      	bne.n	801298e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2220      	movs	r2, #32
 80129ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2200      	movs	r2, #0
 80129d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	4a60      	ldr	r2, [pc, #384]	; (8012b60 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80129e0:	4293      	cmp	r3, r2
 80129e2:	d021      	beq.n	8012a28 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d01a      	beq.n	8012a28 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129fa:	e853 3f00 	ldrex	r3, [r3]
 80129fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	461a      	mov	r2, r3
 8012a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a14:	657b      	str	r3, [r7, #84]	; 0x54
 8012a16:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a1c:	e841 2300 	strex	r3, r2, [r1]
 8012a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d1e4      	bne.n	80129f2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d130      	bne.n	8012a92 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2200      	movs	r2, #0
 8012a34:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a3e:	e853 3f00 	ldrex	r3, [r3]
 8012a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a46:	f023 0310 	bic.w	r3, r3, #16
 8012a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	461a      	mov	r2, r3
 8012a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a58:	643b      	str	r3, [r7, #64]	; 0x40
 8012a5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a60:	e841 2300 	strex	r3, r2, [r1]
 8012a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d1e4      	bne.n	8012a36 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	69db      	ldr	r3, [r3, #28]
 8012a72:	f003 0310 	and.w	r3, r3, #16
 8012a76:	2b10      	cmp	r3, #16
 8012a78:	d103      	bne.n	8012a82 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2210      	movs	r2, #16
 8012a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a88:	4619      	mov	r1, r3
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f7fe fb32 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
 8012a90:	e002      	b.n	8012a98 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7ed fdf8 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a98:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d006      	beq.n	8012aae <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012aa4:	f003 0320 	and.w	r3, r3, #32
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f47f aed1 	bne.w	8012850 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ab4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012ab8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d049      	beq.n	8012b54 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012ac6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d242      	bcs.n	8012b54 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad6:	6a3b      	ldr	r3, [r7, #32]
 8012ad8:	e853 3f00 	ldrex	r3, [r3]
 8012adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	3308      	adds	r3, #8
 8012aee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012afa:	e841 2300 	strex	r3, r2, [r1]
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1e3      	bne.n	8012ace <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4a16      	ldr	r2, [pc, #88]	; (8012b64 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012b0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	e853 3f00 	ldrex	r3, [r3]
 8012b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	f043 0320 	orr.w	r3, r3, #32
 8012b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	461a      	mov	r2, r3
 8012b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b2e:	61bb      	str	r3, [r7, #24]
 8012b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b32:	6979      	ldr	r1, [r7, #20]
 8012b34:	69ba      	ldr	r2, [r7, #24]
 8012b36:	e841 2300 	strex	r3, r2, [r1]
 8012b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e4      	bne.n	8012b0c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012b42:	e007      	b.n	8012b54 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	699a      	ldr	r2, [r3, #24]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f042 0208 	orr.w	r2, r2, #8
 8012b52:	619a      	str	r2, [r3, #24]
}
 8012b54:	bf00      	nop
 8012b56:	37b0      	adds	r7, #176	; 0xb0
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	effffffe 	.word	0xeffffffe
 8012b60:	58000c00 	.word	0x58000c00
 8012b64:	08012499 	.word	0x08012499

08012b68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b0ae      	sub	sp, #184	; 0xb8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b76:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	689b      	ldr	r3, [r3, #8]
 8012b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b9e:	2b22      	cmp	r3, #34	; 0x22
 8012ba0:	f040 8184 	bne.w	8012eac <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012baa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012bae:	e127      	b.n	8012e00 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012bc2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012bc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012bca:	4013      	ands	r3, r2
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012bd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bd8:	1c9a      	adds	r2, r3, #2
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	3b01      	subs	r3, #1
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	69db      	ldr	r3, [r3, #28]
 8012bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012bfe:	f003 0307 	and.w	r3, r3, #7
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d053      	beq.n	8012cae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d011      	beq.n	8012c36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00b      	beq.n	8012c36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2201      	movs	r2, #1
 8012c24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c2c:	f043 0201 	orr.w	r2, r3, #1
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012c36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c3a:	f003 0302 	and.w	r3, r3, #2
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d011      	beq.n	8012c66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012c46:	f003 0301 	and.w	r3, r3, #1
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00b      	beq.n	8012c66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2202      	movs	r2, #2
 8012c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c5c:	f043 0204 	orr.w	r2, r3, #4
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c6a:	f003 0304 	and.w	r3, r3, #4
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d011      	beq.n	8012c96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012c76:	f003 0301 	and.w	r3, r3, #1
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d00b      	beq.n	8012c96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2204      	movs	r2, #4
 8012c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c8c:	f043 0202 	orr.w	r2, r3, #2
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d006      	beq.n	8012cae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7fe fa1d 	bl	80110e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f040 80a2 	bne.w	8012e00 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012cc4:	e853 3f00 	ldrex	r3, [r3]
 8012cc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	461a      	mov	r2, r3
 8012cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012cea:	e841 2300 	strex	r3, r2, [r1]
 8012cee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d1e2      	bne.n	8012cbc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	3308      	adds	r3, #8
 8012cfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d00:	e853 3f00 	ldrex	r3, [r3]
 8012d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012d06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012d08:	4b6e      	ldr	r3, [pc, #440]	; (8012ec4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012d0a:	4013      	ands	r3, r2
 8012d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	3308      	adds	r3, #8
 8012d16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012d22:	e841 2300 	strex	r3, r2, [r1]
 8012d26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d1e3      	bne.n	8012cf6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2220      	movs	r2, #32
 8012d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4a60      	ldr	r2, [pc, #384]	; (8012ec8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d021      	beq.n	8012d90 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d01a      	beq.n	8012d90 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d62:	e853 3f00 	ldrex	r3, [r3]
 8012d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	461a      	mov	r2, r3
 8012d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8012d7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d84:	e841 2300 	strex	r3, r2, [r1]
 8012d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d1e4      	bne.n	8012d5a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d130      	bne.n	8012dfa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da6:	e853 3f00 	ldrex	r3, [r3]
 8012daa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dae:	f023 0310 	bic.w	r3, r3, #16
 8012db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8012dc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dc8:	e841 2300 	strex	r3, r2, [r1]
 8012dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d1e4      	bne.n	8012d9e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	69db      	ldr	r3, [r3, #28]
 8012dda:	f003 0310 	and.w	r3, r3, #16
 8012dde:	2b10      	cmp	r3, #16
 8012de0:	d103      	bne.n	8012dea <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2210      	movs	r2, #16
 8012de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012df0:	4619      	mov	r1, r3
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f7fe f97e 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
 8012df8:	e002      	b.n	8012e00 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7ed fc44 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012e00:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d006      	beq.n	8012e16 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012e08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e0c:	f003 0320 	and.w	r3, r3, #32
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f47f aecd 	bne.w	8012bb0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e1c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012e20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d049      	beq.n	8012ebc <UART_RxISR_16BIT_FIFOEN+0x354>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012e2e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d242      	bcs.n	8012ebc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3308      	adds	r3, #8
 8012e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e40:	e853 3f00 	ldrex	r3, [r3]
 8012e44:	623b      	str	r3, [r7, #32]
   return(result);
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	3308      	adds	r3, #8
 8012e56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8012e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e62:	e841 2300 	strex	r3, r2, [r1]
 8012e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d1e3      	bne.n	8012e36 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4a16      	ldr	r2, [pc, #88]	; (8012ecc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012e72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	e853 3f00 	ldrex	r3, [r3]
 8012e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f043 0320 	orr.w	r3, r3, #32
 8012e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	461a      	mov	r2, r3
 8012e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e96:	61fb      	str	r3, [r7, #28]
 8012e98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e9a:	69b9      	ldr	r1, [r7, #24]
 8012e9c:	69fa      	ldr	r2, [r7, #28]
 8012e9e:	e841 2300 	strex	r3, r2, [r1]
 8012ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1e4      	bne.n	8012e74 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012eaa:	e007      	b.n	8012ebc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	699a      	ldr	r2, [r3, #24]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f042 0208 	orr.w	r2, r2, #8
 8012eba:	619a      	str	r2, [r3, #24]
}
 8012ebc:	bf00      	nop
 8012ebe:	37b8      	adds	r7, #184	; 0xb8
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	effffffe 	.word	0xeffffffe
 8012ec8:	58000c00 	.word	0x58000c00
 8012ecc:	08012651 	.word	0x08012651

08012ed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012ed8:	bf00      	nop
 8012eda:	370c      	adds	r7, #12
 8012edc:	46bd      	mov	sp, r7
 8012ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee2:	4770      	bx	lr

08012ee4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012eec:	bf00      	nop
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr

08012ef8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012f00:	bf00      	nop
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b089      	sub	sp, #36	; 0x24
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d101      	bne.n	8012f22 <HAL_UARTEx_EnableStopMode+0x16>
 8012f1e:	2302      	movs	r3, #2
 8012f20:	e021      	b.n	8012f66 <HAL_UARTEx_EnableStopMode+0x5a>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2201      	movs	r2, #1
 8012f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	e853 3f00 	ldrex	r3, [r3]
 8012f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	f043 0302 	orr.w	r3, r3, #2
 8012f3e:	61fb      	str	r3, [r7, #28]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	461a      	mov	r2, r3
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	61bb      	str	r3, [r7, #24]
 8012f4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f4c:	6979      	ldr	r1, [r7, #20]
 8012f4e:	69ba      	ldr	r2, [r7, #24]
 8012f50:	e841 2300 	strex	r3, r2, [r1]
 8012f54:	613b      	str	r3, [r7, #16]
   return(result);
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d1e6      	bne.n	8012f2a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3724      	adds	r7, #36	; 0x24
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b084      	sub	sp, #16
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d101      	bne.n	8012f88 <HAL_UARTEx_EnableFifoMode+0x16>
 8012f84:	2302      	movs	r3, #2
 8012f86:	e02b      	b.n	8012fe0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2224      	movs	r2, #36	; 0x24
 8012f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f022 0201 	bic.w	r2, r2, #1
 8012fae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012fb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012fbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f000 f8c3 	bl	8013154 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2220      	movs	r2, #32
 8012fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012fde:	2300      	movs	r3, #0
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d101      	bne.n	8012ffe <HAL_UARTEx_DisableFifoMode+0x16>
 8012ffa:	2302      	movs	r3, #2
 8012ffc:	e027      	b.n	801304e <HAL_UARTEx_DisableFifoMode+0x66>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2201      	movs	r2, #1
 8013002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2224      	movs	r2, #36	; 0x24
 801300a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f022 0201 	bic.w	r2, r2, #1
 8013024:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801302c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2220      	movs	r2, #32
 8013040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2200      	movs	r2, #0
 8013048:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801305a:	b580      	push	{r7, lr}
 801305c:	b084      	sub	sp, #16
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
 8013062:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801306a:	2b01      	cmp	r3, #1
 801306c:	d101      	bne.n	8013072 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801306e:	2302      	movs	r3, #2
 8013070:	e02d      	b.n	80130ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2201      	movs	r2, #1
 8013076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2224      	movs	r2, #36	; 0x24
 801307e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	f022 0201 	bic.w	r2, r2, #1
 8013098:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	683a      	ldr	r2, [r7, #0]
 80130aa:	430a      	orrs	r2, r1
 80130ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 f850 	bl	8013154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2220      	movs	r2, #32
 80130c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2200      	movs	r2, #0
 80130c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b084      	sub	sp, #16
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d101      	bne.n	80130ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80130ea:	2302      	movs	r3, #2
 80130ec:	e02d      	b.n	801314a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2201      	movs	r2, #1
 80130f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2224      	movs	r2, #36	; 0x24
 80130fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	f022 0201 	bic.w	r2, r2, #1
 8013114:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	683a      	ldr	r2, [r7, #0]
 8013126:	430a      	orrs	r2, r1
 8013128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 f812 	bl	8013154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2220      	movs	r2, #32
 801313c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3710      	adds	r7, #16
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
	...

08013154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013154:	b480      	push	{r7}
 8013156:	b085      	sub	sp, #20
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013160:	2b00      	cmp	r3, #0
 8013162:	d108      	bne.n	8013176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2201      	movs	r2, #1
 8013168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2201      	movs	r2, #1
 8013170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013174:	e031      	b.n	80131da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013176:	2310      	movs	r3, #16
 8013178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801317a:	2310      	movs	r3, #16
 801317c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	0e5b      	lsrs	r3, r3, #25
 8013186:	b2db      	uxtb	r3, r3
 8013188:	f003 0307 	and.w	r3, r3, #7
 801318c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	0f5b      	lsrs	r3, r3, #29
 8013196:	b2db      	uxtb	r3, r3
 8013198:	f003 0307 	and.w	r3, r3, #7
 801319c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801319e:	7bbb      	ldrb	r3, [r7, #14]
 80131a0:	7b3a      	ldrb	r2, [r7, #12]
 80131a2:	4911      	ldr	r1, [pc, #68]	; (80131e8 <UARTEx_SetNbDataToProcess+0x94>)
 80131a4:	5c8a      	ldrb	r2, [r1, r2]
 80131a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80131aa:	7b3a      	ldrb	r2, [r7, #12]
 80131ac:	490f      	ldr	r1, [pc, #60]	; (80131ec <UARTEx_SetNbDataToProcess+0x98>)
 80131ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80131b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80131bc:	7bfb      	ldrb	r3, [r7, #15]
 80131be:	7b7a      	ldrb	r2, [r7, #13]
 80131c0:	4909      	ldr	r1, [pc, #36]	; (80131e8 <UARTEx_SetNbDataToProcess+0x94>)
 80131c2:	5c8a      	ldrb	r2, [r1, r2]
 80131c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80131c8:	7b7a      	ldrb	r2, [r7, #13]
 80131ca:	4908      	ldr	r1, [pc, #32]	; (80131ec <UARTEx_SetNbDataToProcess+0x98>)
 80131cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80131ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80131da:	bf00      	nop
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	08017b84 	.word	0x08017b84
 80131ec:	08017b8c 	.word	0x08017b8c

080131f0 <__NVIC_SetPriority>:
{
 80131f0:	b480      	push	{r7}
 80131f2:	b083      	sub	sp, #12
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	4603      	mov	r3, r0
 80131f8:	6039      	str	r1, [r7, #0]
 80131fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80131fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013200:	2b00      	cmp	r3, #0
 8013202:	db0a      	blt.n	801321a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	b2da      	uxtb	r2, r3
 8013208:	490c      	ldr	r1, [pc, #48]	; (801323c <__NVIC_SetPriority+0x4c>)
 801320a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801320e:	0112      	lsls	r2, r2, #4
 8013210:	b2d2      	uxtb	r2, r2
 8013212:	440b      	add	r3, r1
 8013214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013218:	e00a      	b.n	8013230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	b2da      	uxtb	r2, r3
 801321e:	4908      	ldr	r1, [pc, #32]	; (8013240 <__NVIC_SetPriority+0x50>)
 8013220:	88fb      	ldrh	r3, [r7, #6]
 8013222:	f003 030f 	and.w	r3, r3, #15
 8013226:	3b04      	subs	r3, #4
 8013228:	0112      	lsls	r2, r2, #4
 801322a:	b2d2      	uxtb	r2, r2
 801322c:	440b      	add	r3, r1
 801322e:	761a      	strb	r2, [r3, #24]
}
 8013230:	bf00      	nop
 8013232:	370c      	adds	r7, #12
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr
 801323c:	e000e100 	.word	0xe000e100
 8013240:	e000ed00 	.word	0xe000ed00

08013244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013244:	b580      	push	{r7, lr}
 8013246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013248:	4b05      	ldr	r3, [pc, #20]	; (8013260 <SysTick_Handler+0x1c>)
 801324a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801324c:	f002 fc92 	bl	8015b74 <xTaskGetSchedulerState>
 8013250:	4603      	mov	r3, r0
 8013252:	2b01      	cmp	r3, #1
 8013254:	d001      	beq.n	801325a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013256:	f003 faaf 	bl	80167b8 <xPortSysTickHandler>
  }
}
 801325a:	bf00      	nop
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	e000e010 	.word	0xe000e010

08013264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013264:	b580      	push	{r7, lr}
 8013266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013268:	2100      	movs	r1, #0
 801326a:	f06f 0004 	mvn.w	r0, #4
 801326e:	f7ff ffbf 	bl	80131f0 <__NVIC_SetPriority>
#endif
}
 8013272:	bf00      	nop
 8013274:	bd80      	pop	{r7, pc}
	...

08013278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013278:	b480      	push	{r7}
 801327a:	b083      	sub	sp, #12
 801327c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801327e:	f3ef 8305 	mrs	r3, IPSR
 8013282:	603b      	str	r3, [r7, #0]
  return(result);
 8013284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013286:	2b00      	cmp	r3, #0
 8013288:	d003      	beq.n	8013292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801328a:	f06f 0305 	mvn.w	r3, #5
 801328e:	607b      	str	r3, [r7, #4]
 8013290:	e00c      	b.n	80132ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013292:	4b0a      	ldr	r3, [pc, #40]	; (80132bc <osKernelInitialize+0x44>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d105      	bne.n	80132a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801329a:	4b08      	ldr	r3, [pc, #32]	; (80132bc <osKernelInitialize+0x44>)
 801329c:	2201      	movs	r2, #1
 801329e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	607b      	str	r3, [r7, #4]
 80132a4:	e002      	b.n	80132ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80132a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80132ac:	687b      	ldr	r3, [r7, #4]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	370c      	adds	r7, #12
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop
 80132bc:	24001130 	.word	0x24001130

080132c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132c6:	f3ef 8305 	mrs	r3, IPSR
 80132ca:	603b      	str	r3, [r7, #0]
  return(result);
 80132cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <osKernelStart+0x1a>
    stat = osErrorISR;
 80132d2:	f06f 0305 	mvn.w	r3, #5
 80132d6:	607b      	str	r3, [r7, #4]
 80132d8:	e010      	b.n	80132fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80132da:	4b0b      	ldr	r3, [pc, #44]	; (8013308 <osKernelStart+0x48>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b01      	cmp	r3, #1
 80132e0:	d109      	bne.n	80132f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80132e2:	f7ff ffbf 	bl	8013264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80132e6:	4b08      	ldr	r3, [pc, #32]	; (8013308 <osKernelStart+0x48>)
 80132e8:	2202      	movs	r2, #2
 80132ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80132ec:	f001 ff54 	bl	8015198 <vTaskStartScheduler>
      stat = osOK;
 80132f0:	2300      	movs	r3, #0
 80132f2:	607b      	str	r3, [r7, #4]
 80132f4:	e002      	b.n	80132fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80132f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80132fc:	687b      	ldr	r3, [r7, #4]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	24001130 	.word	0x24001130

0801330c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801330c:	b580      	push	{r7, lr}
 801330e:	b08e      	sub	sp, #56	; 0x38
 8013310:	af04      	add	r7, sp, #16
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013318:	2300      	movs	r3, #0
 801331a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801331c:	f3ef 8305 	mrs	r3, IPSR
 8013320:	617b      	str	r3, [r7, #20]
  return(result);
 8013322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013324:	2b00      	cmp	r3, #0
 8013326:	d17e      	bne.n	8013426 <osThreadNew+0x11a>
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d07b      	beq.n	8013426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801332e:	2380      	movs	r3, #128	; 0x80
 8013330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013332:	2318      	movs	r3, #24
 8013334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013336:	2300      	movs	r3, #0
 8013338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801333a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801333e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d045      	beq.n	80133d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d002      	beq.n	8013354 <osThreadNew+0x48>
        name = attr->name;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	699b      	ldr	r3, [r3, #24]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d002      	beq.n	8013362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	699b      	ldr	r3, [r3, #24]
 8013360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d008      	beq.n	801337a <osThreadNew+0x6e>
 8013368:	69fb      	ldr	r3, [r7, #28]
 801336a:	2b38      	cmp	r3, #56	; 0x38
 801336c:	d805      	bhi.n	801337a <osThreadNew+0x6e>
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	f003 0301 	and.w	r3, r3, #1
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <osThreadNew+0x72>
        return (NULL);
 801337a:	2300      	movs	r3, #0
 801337c:	e054      	b.n	8013428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	695b      	ldr	r3, [r3, #20]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d003      	beq.n	801338e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	695b      	ldr	r3, [r3, #20]
 801338a:	089b      	lsrs	r3, r3, #2
 801338c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00e      	beq.n	80133b4 <osThreadNew+0xa8>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	2b5b      	cmp	r3, #91	; 0x5b
 801339c:	d90a      	bls.n	80133b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d006      	beq.n	80133b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	695b      	ldr	r3, [r3, #20]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d002      	beq.n	80133b4 <osThreadNew+0xa8>
        mem = 1;
 80133ae:	2301      	movs	r3, #1
 80133b0:	61bb      	str	r3, [r7, #24]
 80133b2:	e010      	b.n	80133d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	689b      	ldr	r3, [r3, #8]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10c      	bne.n	80133d6 <osThreadNew+0xca>
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d108      	bne.n	80133d6 <osThreadNew+0xca>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	691b      	ldr	r3, [r3, #16]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d104      	bne.n	80133d6 <osThreadNew+0xca>
          mem = 0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	61bb      	str	r3, [r7, #24]
 80133d0:	e001      	b.n	80133d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80133d2:	2300      	movs	r3, #0
 80133d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d110      	bne.n	80133fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80133e4:	9202      	str	r2, [sp, #8]
 80133e6:	9301      	str	r3, [sp, #4]
 80133e8:	69fb      	ldr	r3, [r7, #28]
 80133ea:	9300      	str	r3, [sp, #0]
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	6a3a      	ldr	r2, [r7, #32]
 80133f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	f001 fbe0 	bl	8014bb8 <xTaskCreateStatic>
 80133f8:	4603      	mov	r3, r0
 80133fa:	613b      	str	r3, [r7, #16]
 80133fc:	e013      	b.n	8013426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d110      	bne.n	8013426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013404:	6a3b      	ldr	r3, [r7, #32]
 8013406:	b29a      	uxth	r2, r3
 8013408:	f107 0310 	add.w	r3, r7, #16
 801340c:	9301      	str	r3, [sp, #4]
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	9300      	str	r3, [sp, #0]
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013416:	68f8      	ldr	r0, [r7, #12]
 8013418:	f001 fc2b 	bl	8014c72 <xTaskCreate>
 801341c:	4603      	mov	r3, r0
 801341e:	2b01      	cmp	r3, #1
 8013420:	d001      	beq.n	8013426 <osThreadNew+0x11a>
            hTask = NULL;
 8013422:	2300      	movs	r3, #0
 8013424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013426:	693b      	ldr	r3, [r7, #16]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3728      	adds	r7, #40	; 0x28
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013436:	f3ef 8305 	mrs	r3, IPSR
 801343a:	603b      	str	r3, [r7, #0]
  return(result);
 801343c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801343e:	2b00      	cmp	r3, #0
 8013440:	d003      	beq.n	801344a <osThreadYield+0x1a>
    stat = osErrorISR;
 8013442:	f06f 0305 	mvn.w	r3, #5
 8013446:	607b      	str	r3, [r7, #4]
 8013448:	e009      	b.n	801345e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801344a:	2300      	movs	r3, #0
 801344c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801344e:	4b07      	ldr	r3, [pc, #28]	; (801346c <osThreadYield+0x3c>)
 8013450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013454:	601a      	str	r2, [r3, #0]
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801345e:	687b      	ldr	r3, [r7, #4]
}
 8013460:	4618      	mov	r0, r3
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr
 801346c:	e000ed04 	.word	0xe000ed04

08013470 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801347c:	f3ef 8305 	mrs	r3, IPSR
 8013480:	60fb      	str	r3, [r7, #12]
  return(result);
 8013482:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013484:	2b00      	cmp	r3, #0
 8013486:	d003      	beq.n	8013490 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8013488:	f06f 0305 	mvn.w	r3, #5
 801348c:	617b      	str	r3, [r7, #20]
 801348e:	e00b      	b.n	80134a8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d103      	bne.n	801349e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8013496:	f06f 0303 	mvn.w	r3, #3
 801349a:	617b      	str	r3, [r7, #20]
 801349c:	e004      	b.n	80134a8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801349e:	2300      	movs	r3, #0
 80134a0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80134a2:	6938      	ldr	r0, [r7, #16]
 80134a4:	f001 fd5e 	bl	8014f64 <vTaskSuspend>
  }

  return (stat);
 80134a8:	697b      	ldr	r3, [r7, #20]
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3718      	adds	r7, #24
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}

080134b2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b084      	sub	sp, #16
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134ba:	f3ef 8305 	mrs	r3, IPSR
 80134be:	60bb      	str	r3, [r7, #8]
  return(result);
 80134c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d003      	beq.n	80134ce <osDelay+0x1c>
    stat = osErrorISR;
 80134c6:	f06f 0305 	mvn.w	r3, #5
 80134ca:	60fb      	str	r3, [r7, #12]
 80134cc:	e007      	b.n	80134de <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80134ce:	2300      	movs	r3, #0
 80134d0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <osDelay+0x2c>
      vTaskDelay(ticks);
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f001 fd0f 	bl	8014efc <vTaskDelay>
    }
  }

  return (stat);
 80134de:	68fb      	ldr	r3, [r7, #12]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3710      	adds	r7, #16
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80134f0:	2300      	movs	r3, #0
 80134f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134f4:	f3ef 8305 	mrs	r3, IPSR
 80134f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80134fa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d12d      	bne.n	801355c <osEventFlagsNew+0x74>
    mem = -1;
 8013500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013504:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d015      	beq.n	8013538 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	689b      	ldr	r3, [r3, #8]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d006      	beq.n	8013522 <osEventFlagsNew+0x3a>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	2b1f      	cmp	r3, #31
 801351a:	d902      	bls.n	8013522 <osEventFlagsNew+0x3a>
        mem = 1;
 801351c:	2301      	movs	r3, #1
 801351e:	613b      	str	r3, [r7, #16]
 8013520:	e00c      	b.n	801353c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	689b      	ldr	r3, [r3, #8]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d108      	bne.n	801353c <osEventFlagsNew+0x54>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	68db      	ldr	r3, [r3, #12]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d104      	bne.n	801353c <osEventFlagsNew+0x54>
          mem = 0;
 8013532:	2300      	movs	r3, #0
 8013534:	613b      	str	r3, [r7, #16]
 8013536:	e001      	b.n	801353c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013538:	2300      	movs	r3, #0
 801353a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d106      	bne.n	8013550 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	4618      	mov	r0, r3
 8013548:	f000 fa70 	bl	8013a2c <xEventGroupCreateStatic>
 801354c:	6178      	str	r0, [r7, #20]
 801354e:	e005      	b.n	801355c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d102      	bne.n	801355c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013556:	f000 faa0 	bl	8013a9a <xEventGroupCreate>
 801355a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801355c:	697b      	ldr	r3, [r7, #20]
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
	...

08013568 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d004      	beq.n	8013586 <osEventFlagsSet+0x1e>
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013582:	2b00      	cmp	r3, #0
 8013584:	d003      	beq.n	801358e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013586:	f06f 0303 	mvn.w	r3, #3
 801358a:	617b      	str	r3, [r7, #20]
 801358c:	e028      	b.n	80135e0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801358e:	f3ef 8305 	mrs	r3, IPSR
 8013592:	60fb      	str	r3, [r7, #12]
  return(result);
 8013594:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013596:	2b00      	cmp	r3, #0
 8013598:	d01d      	beq.n	80135d6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801359a:	2300      	movs	r3, #0
 801359c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801359e:	f107 0308 	add.w	r3, r7, #8
 80135a2:	461a      	mov	r2, r3
 80135a4:	6839      	ldr	r1, [r7, #0]
 80135a6:	6938      	ldr	r0, [r7, #16]
 80135a8:	f000 fc98 	bl	8013edc <xEventGroupSetBitsFromISR>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d103      	bne.n	80135ba <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80135b2:	f06f 0302 	mvn.w	r3, #2
 80135b6:	617b      	str	r3, [r7, #20]
 80135b8:	e012      	b.n	80135e0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00d      	beq.n	80135e0 <osEventFlagsSet+0x78>
 80135c4:	4b09      	ldr	r3, [pc, #36]	; (80135ec <osEventFlagsSet+0x84>)
 80135c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ca:	601a      	str	r2, [r3, #0]
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	e004      	b.n	80135e0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80135d6:	6839      	ldr	r1, [r7, #0]
 80135d8:	6938      	ldr	r0, [r7, #16]
 80135da:	f000 fbb7 	bl	8013d4c <xEventGroupSetBits>
 80135de:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80135e0:	697b      	ldr	r3, [r7, #20]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3718      	adds	r7, #24
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	e000ed04 	.word	0xe000ed04

080135f0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b086      	sub	sp, #24
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d004      	beq.n	801360e <osEventFlagsClear+0x1e>
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801360a:	2b00      	cmp	r3, #0
 801360c:	d003      	beq.n	8013616 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 801360e:	f06f 0303 	mvn.w	r3, #3
 8013612:	617b      	str	r3, [r7, #20]
 8013614:	e019      	b.n	801364a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013616:	f3ef 8305 	mrs	r3, IPSR
 801361a:	60fb      	str	r3, [r7, #12]
  return(result);
 801361c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801361e:	2b00      	cmp	r3, #0
 8013620:	d00e      	beq.n	8013640 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013622:	6938      	ldr	r0, [r7, #16]
 8013624:	f000 fb6e 	bl	8013d04 <xEventGroupGetBitsFromISR>
 8013628:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801362a:	6839      	ldr	r1, [r7, #0]
 801362c:	6938      	ldr	r0, [r7, #16]
 801362e:	f000 fb55 	bl	8013cdc <xEventGroupClearBitsFromISR>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d108      	bne.n	801364a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8013638:	f06f 0302 	mvn.w	r3, #2
 801363c:	617b      	str	r3, [r7, #20]
 801363e:	e004      	b.n	801364a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013640:	6839      	ldr	r1, [r7, #0]
 8013642:	6938      	ldr	r0, [r7, #16]
 8013644:	f000 fb12 	bl	8013c6c <xEventGroupClearBits>
 8013648:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801364a:	697b      	ldr	r3, [r7, #20]
}
 801364c:	4618      	mov	r0, r3
 801364e:	3718      	adds	r7, #24
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013654:	b580      	push	{r7, lr}
 8013656:	b086      	sub	sp, #24
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d102      	bne.n	801366c <osEventFlagsGet+0x18>
    rflags = 0U;
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]
 801366a:	e00f      	b.n	801368c <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801366c:	f3ef 8305 	mrs	r3, IPSR
 8013670:	60fb      	str	r3, [r7, #12]
  return(result);
 8013672:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013674:	2b00      	cmp	r3, #0
 8013676:	d004      	beq.n	8013682 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013678:	6938      	ldr	r0, [r7, #16]
 801367a:	f000 fb43 	bl	8013d04 <xEventGroupGetBitsFromISR>
 801367e:	6178      	str	r0, [r7, #20]
 8013680:	e004      	b.n	801368c <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8013682:	2100      	movs	r1, #0
 8013684:	6938      	ldr	r0, [r7, #16]
 8013686:	f000 faf1 	bl	8013c6c <xEventGroupClearBits>
 801368a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801368c:	697b      	ldr	r3, [r7, #20]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3718      	adds	r7, #24
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013696:	b580      	push	{r7, lr}
 8013698:	b08c      	sub	sp, #48	; 0x30
 801369a:	af02      	add	r7, sp, #8
 801369c:	60f8      	str	r0, [r7, #12]
 801369e:	60b9      	str	r1, [r7, #8]
 80136a0:	607a      	str	r2, [r7, #4]
 80136a2:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d004      	beq.n	80136b8 <osEventFlagsWait+0x22>
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d003      	beq.n	80136c0 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80136b8:	f06f 0303 	mvn.w	r3, #3
 80136bc:	61fb      	str	r3, [r7, #28]
 80136be:	e04b      	b.n	8013758 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136c0:	f3ef 8305 	mrs	r3, IPSR
 80136c4:	617b      	str	r3, [r7, #20]
  return(result);
 80136c6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d003      	beq.n	80136d4 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80136cc:	f06f 0305 	mvn.w	r3, #5
 80136d0:	61fb      	str	r3, [r7, #28]
 80136d2:	e041      	b.n	8013758 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f003 0301 	and.w	r3, r3, #1
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d002      	beq.n	80136e4 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80136de:	2301      	movs	r3, #1
 80136e0:	627b      	str	r3, [r7, #36]	; 0x24
 80136e2:	e001      	b.n	80136e8 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80136e4:	2300      	movs	r3, #0
 80136e6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f003 0302 	and.w	r3, r3, #2
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d002      	beq.n	80136f8 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80136f2:	2300      	movs	r3, #0
 80136f4:	623b      	str	r3, [r7, #32]
 80136f6:	e001      	b.n	80136fc <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80136f8:	2301      	movs	r3, #1
 80136fa:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013702:	6a3a      	ldr	r2, [r7, #32]
 8013704:	68b9      	ldr	r1, [r7, #8]
 8013706:	69b8      	ldr	r0, [r7, #24]
 8013708:	f000 f9e2 	bl	8013ad0 <xEventGroupWaitBits>
 801370c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f003 0301 	and.w	r3, r3, #1
 8013714:	2b00      	cmp	r3, #0
 8013716:	d010      	beq.n	801373a <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013718:	68ba      	ldr	r2, [r7, #8]
 801371a:	69fb      	ldr	r3, [r7, #28]
 801371c:	4013      	ands	r3, r2
 801371e:	68ba      	ldr	r2, [r7, #8]
 8013720:	429a      	cmp	r2, r3
 8013722:	d019      	beq.n	8013758 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801372a:	f06f 0301 	mvn.w	r3, #1
 801372e:	61fb      	str	r3, [r7, #28]
 8013730:	e012      	b.n	8013758 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013732:	f06f 0302 	mvn.w	r3, #2
 8013736:	61fb      	str	r3, [r7, #28]
 8013738:	e00e      	b.n	8013758 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	4013      	ands	r3, r2
 8013740:	2b00      	cmp	r3, #0
 8013742:	d109      	bne.n	8013758 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d003      	beq.n	8013752 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801374a:	f06f 0301 	mvn.w	r3, #1
 801374e:	61fb      	str	r3, [r7, #28]
 8013750:	e002      	b.n	8013758 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013752:	f06f 0302 	mvn.w	r3, #2
 8013756:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013758:	69fb      	ldr	r3, [r7, #28]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3728      	adds	r7, #40	; 0x28
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013762:	b580      	push	{r7, lr}
 8013764:	b08a      	sub	sp, #40	; 0x28
 8013766:	af02      	add	r7, sp, #8
 8013768:	60f8      	str	r0, [r7, #12]
 801376a:	60b9      	str	r1, [r7, #8]
 801376c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801376e:	2300      	movs	r3, #0
 8013770:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013772:	f3ef 8305 	mrs	r3, IPSR
 8013776:	613b      	str	r3, [r7, #16]
  return(result);
 8013778:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801377a:	2b00      	cmp	r3, #0
 801377c:	d15f      	bne.n	801383e <osMessageQueueNew+0xdc>
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d05c      	beq.n	801383e <osMessageQueueNew+0xdc>
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d059      	beq.n	801383e <osMessageQueueNew+0xdc>
    mem = -1;
 801378a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801378e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d029      	beq.n	80137ea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	689b      	ldr	r3, [r3, #8]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d012      	beq.n	80137c4 <osMessageQueueNew+0x62>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	2b4f      	cmp	r3, #79	; 0x4f
 80137a4:	d90e      	bls.n	80137c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00a      	beq.n	80137c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	695a      	ldr	r2, [r3, #20]
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	68b9      	ldr	r1, [r7, #8]
 80137b6:	fb01 f303 	mul.w	r3, r1, r3
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d302      	bcc.n	80137c4 <osMessageQueueNew+0x62>
        mem = 1;
 80137be:	2301      	movs	r3, #1
 80137c0:	61bb      	str	r3, [r7, #24]
 80137c2:	e014      	b.n	80137ee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	689b      	ldr	r3, [r3, #8]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d110      	bne.n	80137ee <osMessageQueueNew+0x8c>
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d10c      	bne.n	80137ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d108      	bne.n	80137ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	695b      	ldr	r3, [r3, #20]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d104      	bne.n	80137ee <osMessageQueueNew+0x8c>
          mem = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	61bb      	str	r3, [r7, #24]
 80137e8:	e001      	b.n	80137ee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80137ea:	2300      	movs	r3, #0
 80137ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d10b      	bne.n	801380c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	691a      	ldr	r2, [r3, #16]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	689b      	ldr	r3, [r3, #8]
 80137fc:	2100      	movs	r1, #0
 80137fe:	9100      	str	r1, [sp, #0]
 8013800:	68b9      	ldr	r1, [r7, #8]
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f000 fc9a 	bl	801413c <xQueueGenericCreateStatic>
 8013808:	61f8      	str	r0, [r7, #28]
 801380a:	e008      	b.n	801381e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d105      	bne.n	801381e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013812:	2200      	movs	r2, #0
 8013814:	68b9      	ldr	r1, [r7, #8]
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f000 fd08 	bl	801422c <xQueueGenericCreate>
 801381c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d00c      	beq.n	801383e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d003      	beq.n	8013832 <osMessageQueueNew+0xd0>
        name = attr->name;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	617b      	str	r3, [r7, #20]
 8013830:	e001      	b.n	8013836 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013832:	2300      	movs	r3, #0
 8013834:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013836:	6979      	ldr	r1, [r7, #20]
 8013838:	69f8      	ldr	r0, [r7, #28]
 801383a:	f001 f95f 	bl	8014afc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801383e:	69fb      	ldr	r3, [r7, #28]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3720      	adds	r7, #32
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013848:	b580      	push	{r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af00      	add	r7, sp, #0
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	603b      	str	r3, [r7, #0]
 8013854:	4613      	mov	r3, r2
 8013856:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801385c:	2300      	movs	r3, #0
 801385e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013860:	f3ef 8305 	mrs	r3, IPSR
 8013864:	617b      	str	r3, [r7, #20]
  return(result);
 8013866:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013868:	2b00      	cmp	r3, #0
 801386a:	d028      	beq.n	80138be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d005      	beq.n	801387e <osMessageQueuePut+0x36>
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d002      	beq.n	801387e <osMessageQueuePut+0x36>
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801387e:	f06f 0303 	mvn.w	r3, #3
 8013882:	61fb      	str	r3, [r7, #28]
 8013884:	e038      	b.n	80138f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013886:	2300      	movs	r3, #0
 8013888:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801388a:	f107 0210 	add.w	r2, r7, #16
 801388e:	2300      	movs	r3, #0
 8013890:	68b9      	ldr	r1, [r7, #8]
 8013892:	69b8      	ldr	r0, [r7, #24]
 8013894:	f000 fe26 	bl	80144e4 <xQueueGenericSendFromISR>
 8013898:	4603      	mov	r3, r0
 801389a:	2b01      	cmp	r3, #1
 801389c:	d003      	beq.n	80138a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801389e:	f06f 0302 	mvn.w	r3, #2
 80138a2:	61fb      	str	r3, [r7, #28]
 80138a4:	e028      	b.n	80138f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d025      	beq.n	80138f8 <osMessageQueuePut+0xb0>
 80138ac:	4b15      	ldr	r3, [pc, #84]	; (8013904 <osMessageQueuePut+0xbc>)
 80138ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b2:	601a      	str	r2, [r3, #0]
 80138b4:	f3bf 8f4f 	dsb	sy
 80138b8:	f3bf 8f6f 	isb	sy
 80138bc:	e01c      	b.n	80138f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d002      	beq.n	80138ca <osMessageQueuePut+0x82>
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d103      	bne.n	80138d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80138ca:	f06f 0303 	mvn.w	r3, #3
 80138ce:	61fb      	str	r3, [r7, #28]
 80138d0:	e012      	b.n	80138f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80138d2:	2300      	movs	r3, #0
 80138d4:	683a      	ldr	r2, [r7, #0]
 80138d6:	68b9      	ldr	r1, [r7, #8]
 80138d8:	69b8      	ldr	r0, [r7, #24]
 80138da:	f000 fd05 	bl	80142e8 <xQueueGenericSend>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b01      	cmp	r3, #1
 80138e2:	d009      	beq.n	80138f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d003      	beq.n	80138f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80138ea:	f06f 0301 	mvn.w	r3, #1
 80138ee:	61fb      	str	r3, [r7, #28]
 80138f0:	e002      	b.n	80138f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80138f2:	f06f 0302 	mvn.w	r3, #2
 80138f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80138f8:	69fb      	ldr	r3, [r7, #28]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3720      	adds	r7, #32
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	e000ed04 	.word	0xe000ed04

08013908 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013908:	b580      	push	{r7, lr}
 801390a:	b088      	sub	sp, #32
 801390c:	af00      	add	r7, sp, #0
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
 8013914:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801391a:	2300      	movs	r3, #0
 801391c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801391e:	f3ef 8305 	mrs	r3, IPSR
 8013922:	617b      	str	r3, [r7, #20]
  return(result);
 8013924:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013926:	2b00      	cmp	r3, #0
 8013928:	d028      	beq.n	801397c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d005      	beq.n	801393c <osMessageQueueGet+0x34>
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d002      	beq.n	801393c <osMessageQueueGet+0x34>
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d003      	beq.n	8013944 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801393c:	f06f 0303 	mvn.w	r3, #3
 8013940:	61fb      	str	r3, [r7, #28]
 8013942:	e037      	b.n	80139b4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013944:	2300      	movs	r3, #0
 8013946:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013948:	f107 0310 	add.w	r3, r7, #16
 801394c:	461a      	mov	r2, r3
 801394e:	68b9      	ldr	r1, [r7, #8]
 8013950:	69b8      	ldr	r0, [r7, #24]
 8013952:	f000 ff43 	bl	80147dc <xQueueReceiveFromISR>
 8013956:	4603      	mov	r3, r0
 8013958:	2b01      	cmp	r3, #1
 801395a:	d003      	beq.n	8013964 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801395c:	f06f 0302 	mvn.w	r3, #2
 8013960:	61fb      	str	r3, [r7, #28]
 8013962:	e027      	b.n	80139b4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d024      	beq.n	80139b4 <osMessageQueueGet+0xac>
 801396a:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <osMessageQueueGet+0xb8>)
 801396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013970:	601a      	str	r2, [r3, #0]
 8013972:	f3bf 8f4f 	dsb	sy
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	e01b      	b.n	80139b4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d002      	beq.n	8013988 <osMessageQueueGet+0x80>
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d103      	bne.n	8013990 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013988:	f06f 0303 	mvn.w	r3, #3
 801398c:	61fb      	str	r3, [r7, #28]
 801398e:	e011      	b.n	80139b4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013990:	683a      	ldr	r2, [r7, #0]
 8013992:	68b9      	ldr	r1, [r7, #8]
 8013994:	69b8      	ldr	r0, [r7, #24]
 8013996:	f000 fe41 	bl	801461c <xQueueReceive>
 801399a:	4603      	mov	r3, r0
 801399c:	2b01      	cmp	r3, #1
 801399e:	d009      	beq.n	80139b4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d003      	beq.n	80139ae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80139a6:	f06f 0301 	mvn.w	r3, #1
 80139aa:	61fb      	str	r3, [r7, #28]
 80139ac:	e002      	b.n	80139b4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80139ae:	f06f 0302 	mvn.w	r3, #2
 80139b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80139b4:	69fb      	ldr	r3, [r7, #28]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3720      	adds	r7, #32
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	e000ed04 	.word	0xe000ed04

080139c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80139c4:	b480      	push	{r7}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	4a07      	ldr	r2, [pc, #28]	; (80139f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80139d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	4a06      	ldr	r2, [pc, #24]	; (80139f4 <vApplicationGetIdleTaskMemory+0x30>)
 80139da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2280      	movs	r2, #128	; 0x80
 80139e0:	601a      	str	r2, [r3, #0]
}
 80139e2:	bf00      	nop
 80139e4:	3714      	adds	r7, #20
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	24001134 	.word	0x24001134
 80139f4:	24001190 	.word	0x24001190

080139f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80139f8:	b480      	push	{r7}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	4a07      	ldr	r2, [pc, #28]	; (8013a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8013a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	4a06      	ldr	r2, [pc, #24]	; (8013a28 <vApplicationGetTimerTaskMemory+0x30>)
 8013a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013a16:	601a      	str	r2, [r3, #0]
}
 8013a18:	bf00      	nop
 8013a1a:	3714      	adds	r7, #20
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr
 8013a24:	24001390 	.word	0x24001390
 8013a28:	240013ec 	.word	0x240013ec

08013a2c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d10a      	bne.n	8013a50 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a3e:	f383 8811 	msr	BASEPRI, r3
 8013a42:	f3bf 8f6f 	isb	sy
 8013a46:	f3bf 8f4f 	dsb	sy
 8013a4a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013a4c:	bf00      	nop
 8013a4e:	e7fe      	b.n	8013a4e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013a50:	2320      	movs	r3, #32
 8013a52:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	2b20      	cmp	r3, #32
 8013a58:	d00a      	beq.n	8013a70 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a5e:	f383 8811 	msr	BASEPRI, r3
 8013a62:	f3bf 8f6f 	isb	sy
 8013a66:	f3bf 8f4f 	dsb	sy
 8013a6a:	60fb      	str	r3, [r7, #12]
}
 8013a6c:	bf00      	nop
 8013a6e:	e7fe      	b.n	8013a6e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00a      	beq.n	8013a90 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	3304      	adds	r3, #4
 8013a84:	4618      	mov	r0, r3
 8013a86:	f000 fa3d 	bl	8013f04 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	2201      	movs	r2, #1
 8013a8e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013a90:	697b      	ldr	r3, [r7, #20]
	}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3718      	adds	r7, #24
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013a9a:	b580      	push	{r7, lr}
 8013a9c:	b082      	sub	sp, #8
 8013a9e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013aa0:	2020      	movs	r0, #32
 8013aa2:	f002 ff19 	bl	80168d8 <pvPortMalloc>
 8013aa6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d00a      	beq.n	8013ac4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	3304      	adds	r3, #4
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f000 fa23 	bl	8013f04 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013ac4:	687b      	ldr	r3, [r7, #4]
	}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
	...

08013ad0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b090      	sub	sp, #64	; 0x40
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
 8013adc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d10a      	bne.n	8013b06 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	623b      	str	r3, [r7, #32]
}
 8013b02:	bf00      	nop
 8013b04:	e7fe      	b.n	8013b04 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00a      	beq.n	8013b26 <xEventGroupWaitBits+0x56>
	__asm volatile
 8013b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	61fb      	str	r3, [r7, #28]
}
 8013b22:	bf00      	nop
 8013b24:	e7fe      	b.n	8013b24 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d10a      	bne.n	8013b42 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b30:	f383 8811 	msr	BASEPRI, r3
 8013b34:	f3bf 8f6f 	isb	sy
 8013b38:	f3bf 8f4f 	dsb	sy
 8013b3c:	61bb      	str	r3, [r7, #24]
}
 8013b3e:	bf00      	nop
 8013b40:	e7fe      	b.n	8013b40 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b42:	f002 f817 	bl	8015b74 <xTaskGetSchedulerState>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d102      	bne.n	8013b52 <xEventGroupWaitBits+0x82>
 8013b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <xEventGroupWaitBits+0x86>
 8013b52:	2301      	movs	r3, #1
 8013b54:	e000      	b.n	8013b58 <xEventGroupWaitBits+0x88>
 8013b56:	2300      	movs	r3, #0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d10a      	bne.n	8013b72 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b60:	f383 8811 	msr	BASEPRI, r3
 8013b64:	f3bf 8f6f 	isb	sy
 8013b68:	f3bf 8f4f 	dsb	sy
 8013b6c:	617b      	str	r3, [r7, #20]
}
 8013b6e:	bf00      	nop
 8013b70:	e7fe      	b.n	8013b70 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013b72:	f001 fb77 	bl	8015264 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013b7c:	683a      	ldr	r2, [r7, #0]
 8013b7e:	68b9      	ldr	r1, [r7, #8]
 8013b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013b82:	f000 f988 	bl	8013e96 <prvTestWaitCondition>
 8013b86:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00e      	beq.n	8013bac <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b90:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013b92:	2300      	movs	r3, #0
 8013b94:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d028      	beq.n	8013bee <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	43db      	mvns	r3, r3
 8013ba4:	401a      	ands	r2, r3
 8013ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	e020      	b.n	8013bee <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d104      	bne.n	8013bbc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8013bba:	e018      	b.n	8013bee <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d003      	beq.n	8013bca <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013bc8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d003      	beq.n	8013bd8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013bd6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bda:	1d18      	adds	r0, r3, #4
 8013bdc:	68ba      	ldr	r2, [r7, #8]
 8013bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be0:	4313      	orrs	r3, r2
 8013be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013be4:	4619      	mov	r1, r3
 8013be6:	f001 fd3d 	bl	8015664 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013bee:	f001 fb47 	bl	8015280 <xTaskResumeAll>
 8013bf2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d031      	beq.n	8013c5e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d107      	bne.n	8013c10 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013c00:	4b19      	ldr	r3, [pc, #100]	; (8013c68 <xEventGroupWaitBits+0x198>)
 8013c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c06:	601a      	str	r2, [r3, #0]
 8013c08:	f3bf 8f4f 	dsb	sy
 8013c0c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013c10:	f002 f83c 	bl	8015c8c <uxTaskResetEventItemValue>
 8013c14:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d11a      	bne.n	8013c56 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013c20:	f002 fd38 	bl	8016694 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013c2a:	683a      	ldr	r2, [r7, #0]
 8013c2c:	68b9      	ldr	r1, [r7, #8]
 8013c2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c30:	f000 f931 	bl	8013e96 <prvTestWaitCondition>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d009      	beq.n	8013c4e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d006      	beq.n	8013c4e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	43db      	mvns	r3, r3
 8013c48:	401a      	ands	r2, r3
 8013c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c4c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013c52:	f002 fd4f 	bl	80166f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3740      	adds	r7, #64	; 0x40
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	e000ed04 	.word	0xe000ed04

08013c6c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b086      	sub	sp, #24
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d10a      	bne.n	8013c96 <xEventGroupClearBits+0x2a>
	__asm volatile
 8013c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c84:	f383 8811 	msr	BASEPRI, r3
 8013c88:	f3bf 8f6f 	isb	sy
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	60fb      	str	r3, [r7, #12]
}
 8013c92:	bf00      	nop
 8013c94:	e7fe      	b.n	8013c94 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d00a      	beq.n	8013cb6 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca4:	f383 8811 	msr	BASEPRI, r3
 8013ca8:	f3bf 8f6f 	isb	sy
 8013cac:	f3bf 8f4f 	dsb	sy
 8013cb0:	60bb      	str	r3, [r7, #8]
}
 8013cb2:	bf00      	nop
 8013cb4:	e7fe      	b.n	8013cb4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013cb6:	f002 fced 	bl	8016694 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	43db      	mvns	r3, r3
 8013cc8:	401a      	ands	r2, r3
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013cce:	f002 fd11 	bl	80166f4 <vPortExitCritical>

	return uxReturn;
 8013cd2:	693b      	ldr	r3, [r7, #16]
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3718      	adds	r7, #24
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	6879      	ldr	r1, [r7, #4]
 8013cec:	4804      	ldr	r0, [pc, #16]	; (8013d00 <xEventGroupClearBitsFromISR+0x24>)
 8013cee:	f002 fb87 	bl	8016400 <xTimerPendFunctionCallFromISR>
 8013cf2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3710      	adds	r7, #16
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	08013e7d 	.word	0x08013e7d

08013d04 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013d04:	b480      	push	{r7}
 8013d06:	b089      	sub	sp, #36	; 0x24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013d10:	f3ef 8211 	mrs	r2, BASEPRI
 8013d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d18:	f383 8811 	msr	BASEPRI, r3
 8013d1c:	f3bf 8f6f 	isb	sy
 8013d20:	f3bf 8f4f 	dsb	sy
 8013d24:	60fa      	str	r2, [r7, #12]
 8013d26:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013d28:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d2a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	617b      	str	r3, [r7, #20]
 8013d32:	69bb      	ldr	r3, [r7, #24]
 8013d34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013d3c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013d3e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013d40:	4618      	mov	r0, r3
 8013d42:	3724      	adds	r7, #36	; 0x24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr

08013d4c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b08e      	sub	sp, #56	; 0x38
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013d56:	2300      	movs	r3, #0
 8013d58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d10a      	bne.n	8013d7e <xEventGroupSetBits+0x32>
	__asm volatile
 8013d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d6c:	f383 8811 	msr	BASEPRI, r3
 8013d70:	f3bf 8f6f 	isb	sy
 8013d74:	f3bf 8f4f 	dsb	sy
 8013d78:	613b      	str	r3, [r7, #16]
}
 8013d7a:	bf00      	nop
 8013d7c:	e7fe      	b.n	8013d7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00a      	beq.n	8013d9e <xEventGroupSetBits+0x52>
	__asm volatile
 8013d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d8c:	f383 8811 	msr	BASEPRI, r3
 8013d90:	f3bf 8f6f 	isb	sy
 8013d94:	f3bf 8f4f 	dsb	sy
 8013d98:	60fb      	str	r3, [r7, #12]
}
 8013d9a:	bf00      	nop
 8013d9c:	e7fe      	b.n	8013d9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da0:	3304      	adds	r3, #4
 8013da2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da6:	3308      	adds	r3, #8
 8013da8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013daa:	f001 fa5b 	bl	8015264 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	431a      	orrs	r2, r3
 8013dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013dc0:	e03c      	b.n	8013e3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013dd2:	69bb      	ldr	r3, [r7, #24]
 8013dd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013dd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013de0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d108      	bne.n	8013dfe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	69bb      	ldr	r3, [r7, #24]
 8013df2:	4013      	ands	r3, r2
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d00b      	beq.n	8013e10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013dfc:	e008      	b.n	8013e10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e00:	681a      	ldr	r2, [r3, #0]
 8013e02:	69bb      	ldr	r3, [r7, #24]
 8013e04:	4013      	ands	r3, r2
 8013e06:	69ba      	ldr	r2, [r7, #24]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d101      	bne.n	8013e10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d010      	beq.n	8013e38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d003      	beq.n	8013e28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	4313      	orrs	r3, r2
 8013e26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013e30:	4619      	mov	r1, r3
 8013e32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013e34:	f001 fce2 	bl	80157fc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e3e:	6a3b      	ldr	r3, [r7, #32]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d1be      	bne.n	8013dc2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4a:	43db      	mvns	r3, r3
 8013e4c:	401a      	ands	r2, r3
 8013e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013e52:	f001 fa15 	bl	8015280 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e58:	681b      	ldr	r3, [r3, #0]
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3738      	adds	r7, #56	; 0x38
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}

08013e62 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013e62:	b580      	push	{r7, lr}
 8013e64:	b082      	sub	sp, #8
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
 8013e6a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013e6c:	6839      	ldr	r1, [r7, #0]
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f7ff ff6c 	bl	8013d4c <xEventGroupSetBits>
}
 8013e74:	bf00      	nop
 8013e76:	3708      	adds	r7, #8
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013e86:	6839      	ldr	r1, [r7, #0]
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f7ff feef 	bl	8013c6c <xEventGroupClearBits>
}
 8013e8e:	bf00      	nop
 8013e90:	3708      	adds	r7, #8
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013e96:	b480      	push	{r7}
 8013e98:	b087      	sub	sp, #28
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	60f8      	str	r0, [r7, #12]
 8013e9e:	60b9      	str	r1, [r7, #8]
 8013ea0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d107      	bne.n	8013ebc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013eac:	68fa      	ldr	r2, [r7, #12]
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	4013      	ands	r3, r2
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d00a      	beq.n	8013ecc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	617b      	str	r3, [r7, #20]
 8013eba:	e007      	b.n	8013ecc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013ebc:	68fa      	ldr	r2, [r7, #12]
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	4013      	ands	r3, r2
 8013ec2:	68ba      	ldr	r2, [r7, #8]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d101      	bne.n	8013ecc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013ecc:	697b      	ldr	r3, [r7, #20]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	371c      	adds	r7, #28
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr
	...

08013edc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b086      	sub	sp, #24
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	68ba      	ldr	r2, [r7, #8]
 8013eec:	68f9      	ldr	r1, [r7, #12]
 8013eee:	4804      	ldr	r0, [pc, #16]	; (8013f00 <xEventGroupSetBitsFromISR+0x24>)
 8013ef0:	f002 fa86 	bl	8016400 <xTimerPendFunctionCallFromISR>
 8013ef4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013ef6:	697b      	ldr	r3, [r7, #20]
	}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3718      	adds	r7, #24
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	08013e63 	.word	0x08013e63

08013f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f103 0208 	add.w	r2, r3, #8
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f103 0208 	add.w	r2, r3, #8
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f103 0208 	add.w	r2, r3, #8
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2200      	movs	r2, #0
 8013f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013f52:	bf00      	nop
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f5e:	b480      	push	{r7}
 8013f60:	b085      	sub	sp, #20
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
 8013f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	689a      	ldr	r2, [r3, #8]
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	683a      	ldr	r2, [r7, #0]
 8013f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	1c5a      	adds	r2, r3, #1
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	601a      	str	r2, [r3, #0]
}
 8013f9a:	bf00      	nop
 8013f9c:	3714      	adds	r7, #20
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013fa6:	b480      	push	{r7}
 8013fa8:	b085      	sub	sp, #20
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
 8013fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fbc:	d103      	bne.n	8013fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	691b      	ldr	r3, [r3, #16]
 8013fc2:	60fb      	str	r3, [r7, #12]
 8013fc4:	e00c      	b.n	8013fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	3308      	adds	r3, #8
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	e002      	b.n	8013fd4 <vListInsert+0x2e>
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	60fb      	str	r3, [r7, #12]
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	68ba      	ldr	r2, [r7, #8]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d2f6      	bcs.n	8013fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	685a      	ldr	r2, [r3, #4]
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	68fa      	ldr	r2, [r7, #12]
 8013ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	683a      	ldr	r2, [r7, #0]
 8013ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	1c5a      	adds	r2, r3, #1
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	601a      	str	r2, [r3, #0]
}
 801400c:	bf00      	nop
 801400e:	3714      	adds	r7, #20
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	691b      	ldr	r3, [r3, #16]
 8014024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	6892      	ldr	r2, [r2, #8]
 801402e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	6852      	ldr	r2, [r2, #4]
 8014038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	429a      	cmp	r2, r3
 8014042:	d103      	bne.n	801404c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	689a      	ldr	r2, [r3, #8]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2200      	movs	r2, #0
 8014050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	1e5a      	subs	r2, r3, #1
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681b      	ldr	r3, [r3, #0]
}
 8014060:	4618      	mov	r0, r3
 8014062:	3714      	adds	r7, #20
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d10a      	bne.n	8014096 <xQueueGenericReset+0x2a>
	__asm volatile
 8014080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014084:	f383 8811 	msr	BASEPRI, r3
 8014088:	f3bf 8f6f 	isb	sy
 801408c:	f3bf 8f4f 	dsb	sy
 8014090:	60bb      	str	r3, [r7, #8]
}
 8014092:	bf00      	nop
 8014094:	e7fe      	b.n	8014094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014096:	f002 fafd 	bl	8016694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140a2:	68f9      	ldr	r1, [r7, #12]
 80140a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140a6:	fb01 f303 	mul.w	r3, r1, r3
 80140aa:	441a      	add	r2, r3
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2200      	movs	r2, #0
 80140b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140c6:	3b01      	subs	r3, #1
 80140c8:	68f9      	ldr	r1, [r7, #12]
 80140ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140cc:	fb01 f303 	mul.w	r3, r1, r3
 80140d0:	441a      	add	r2, r3
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	22ff      	movs	r2, #255	; 0xff
 80140da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	22ff      	movs	r2, #255	; 0xff
 80140e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d114      	bne.n	8014116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	691b      	ldr	r3, [r3, #16]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d01a      	beq.n	801412a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	3310      	adds	r3, #16
 80140f8:	4618      	mov	r0, r3
 80140fa:	f001 fb1b 	bl	8015734 <xTaskRemoveFromEventList>
 80140fe:	4603      	mov	r3, r0
 8014100:	2b00      	cmp	r3, #0
 8014102:	d012      	beq.n	801412a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014104:	4b0c      	ldr	r3, [pc, #48]	; (8014138 <xQueueGenericReset+0xcc>)
 8014106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801410a:	601a      	str	r2, [r3, #0]
 801410c:	f3bf 8f4f 	dsb	sy
 8014110:	f3bf 8f6f 	isb	sy
 8014114:	e009      	b.n	801412a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	3310      	adds	r3, #16
 801411a:	4618      	mov	r0, r3
 801411c:	f7ff fef2 	bl	8013f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	3324      	adds	r3, #36	; 0x24
 8014124:	4618      	mov	r0, r3
 8014126:	f7ff feed 	bl	8013f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801412a:	f002 fae3 	bl	80166f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801412e:	2301      	movs	r3, #1
}
 8014130:	4618      	mov	r0, r3
 8014132:	3710      	adds	r7, #16
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}
 8014138:	e000ed04 	.word	0xe000ed04

0801413c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801413c:	b580      	push	{r7, lr}
 801413e:	b08e      	sub	sp, #56	; 0x38
 8014140:	af02      	add	r7, sp, #8
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	607a      	str	r2, [r7, #4]
 8014148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d10a      	bne.n	8014166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014154:	f383 8811 	msr	BASEPRI, r3
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	f3bf 8f4f 	dsb	sy
 8014160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014162:	bf00      	nop
 8014164:	e7fe      	b.n	8014164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d10a      	bne.n	8014182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014170:	f383 8811 	msr	BASEPRI, r3
 8014174:	f3bf 8f6f 	isb	sy
 8014178:	f3bf 8f4f 	dsb	sy
 801417c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801417e:	bf00      	nop
 8014180:	e7fe      	b.n	8014180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d002      	beq.n	801418e <xQueueGenericCreateStatic+0x52>
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d001      	beq.n	8014192 <xQueueGenericCreateStatic+0x56>
 801418e:	2301      	movs	r3, #1
 8014190:	e000      	b.n	8014194 <xQueueGenericCreateStatic+0x58>
 8014192:	2300      	movs	r3, #0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10a      	bne.n	80141ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801419c:	f383 8811 	msr	BASEPRI, r3
 80141a0:	f3bf 8f6f 	isb	sy
 80141a4:	f3bf 8f4f 	dsb	sy
 80141a8:	623b      	str	r3, [r7, #32]
}
 80141aa:	bf00      	nop
 80141ac:	e7fe      	b.n	80141ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d102      	bne.n	80141ba <xQueueGenericCreateStatic+0x7e>
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d101      	bne.n	80141be <xQueueGenericCreateStatic+0x82>
 80141ba:	2301      	movs	r3, #1
 80141bc:	e000      	b.n	80141c0 <xQueueGenericCreateStatic+0x84>
 80141be:	2300      	movs	r3, #0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10a      	bne.n	80141da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80141c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	61fb      	str	r3, [r7, #28]
}
 80141d6:	bf00      	nop
 80141d8:	e7fe      	b.n	80141d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80141da:	2350      	movs	r3, #80	; 0x50
 80141dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80141de:	697b      	ldr	r3, [r7, #20]
 80141e0:	2b50      	cmp	r3, #80	; 0x50
 80141e2:	d00a      	beq.n	80141fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80141e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e8:	f383 8811 	msr	BASEPRI, r3
 80141ec:	f3bf 8f6f 	isb	sy
 80141f0:	f3bf 8f4f 	dsb	sy
 80141f4:	61bb      	str	r3, [r7, #24]
}
 80141f6:	bf00      	nop
 80141f8:	e7fe      	b.n	80141f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80141fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014202:	2b00      	cmp	r3, #0
 8014204:	d00d      	beq.n	8014222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014208:	2201      	movs	r2, #1
 801420a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801420e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014214:	9300      	str	r3, [sp, #0]
 8014216:	4613      	mov	r3, r2
 8014218:	687a      	ldr	r2, [r7, #4]
 801421a:	68b9      	ldr	r1, [r7, #8]
 801421c:	68f8      	ldr	r0, [r7, #12]
 801421e:	f000 f83f 	bl	80142a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014224:	4618      	mov	r0, r3
 8014226:	3730      	adds	r7, #48	; 0x30
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801422c:	b580      	push	{r7, lr}
 801422e:	b08a      	sub	sp, #40	; 0x28
 8014230:	af02      	add	r7, sp, #8
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	4613      	mov	r3, r2
 8014238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10a      	bne.n	8014256 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014244:	f383 8811 	msr	BASEPRI, r3
 8014248:	f3bf 8f6f 	isb	sy
 801424c:	f3bf 8f4f 	dsb	sy
 8014250:	613b      	str	r3, [r7, #16]
}
 8014252:	bf00      	nop
 8014254:	e7fe      	b.n	8014254 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	68ba      	ldr	r2, [r7, #8]
 801425a:	fb02 f303 	mul.w	r3, r2, r3
 801425e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	3350      	adds	r3, #80	; 0x50
 8014264:	4618      	mov	r0, r3
 8014266:	f002 fb37 	bl	80168d8 <pvPortMalloc>
 801426a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801426c:	69bb      	ldr	r3, [r7, #24]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d011      	beq.n	8014296 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	3350      	adds	r3, #80	; 0x50
 801427a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	2200      	movs	r2, #0
 8014280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014284:	79fa      	ldrb	r2, [r7, #7]
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	4613      	mov	r3, r2
 801428c:	697a      	ldr	r2, [r7, #20]
 801428e:	68b9      	ldr	r1, [r7, #8]
 8014290:	68f8      	ldr	r0, [r7, #12]
 8014292:	f000 f805 	bl	80142a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014296:	69bb      	ldr	r3, [r7, #24]
	}
 8014298:	4618      	mov	r0, r3
 801429a:	3720      	adds	r7, #32
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	607a      	str	r2, [r7, #4]
 80142ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d103      	bne.n	80142bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	69ba      	ldr	r2, [r7, #24]
 80142b8:	601a      	str	r2, [r3, #0]
 80142ba:	e002      	b.n	80142c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80142c2:	69bb      	ldr	r3, [r7, #24]
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80142c8:	69bb      	ldr	r3, [r7, #24]
 80142ca:	68ba      	ldr	r2, [r7, #8]
 80142cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80142ce:	2101      	movs	r1, #1
 80142d0:	69b8      	ldr	r0, [r7, #24]
 80142d2:	f7ff fecb 	bl	801406c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80142d6:	69bb      	ldr	r3, [r7, #24]
 80142d8:	78fa      	ldrb	r2, [r7, #3]
 80142da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80142de:	bf00      	nop
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
	...

080142e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b08e      	sub	sp, #56	; 0x38
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
 80142f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80142f6:	2300      	movs	r3, #0
 80142f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80142fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10a      	bne.n	801431a <xQueueGenericSend+0x32>
	__asm volatile
 8014304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014308:	f383 8811 	msr	BASEPRI, r3
 801430c:	f3bf 8f6f 	isb	sy
 8014310:	f3bf 8f4f 	dsb	sy
 8014314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014316:	bf00      	nop
 8014318:	e7fe      	b.n	8014318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d103      	bne.n	8014328 <xQueueGenericSend+0x40>
 8014320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <xQueueGenericSend+0x44>
 8014328:	2301      	movs	r3, #1
 801432a:	e000      	b.n	801432e <xQueueGenericSend+0x46>
 801432c:	2300      	movs	r3, #0
 801432e:	2b00      	cmp	r3, #0
 8014330:	d10a      	bne.n	8014348 <xQueueGenericSend+0x60>
	__asm volatile
 8014332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014336:	f383 8811 	msr	BASEPRI, r3
 801433a:	f3bf 8f6f 	isb	sy
 801433e:	f3bf 8f4f 	dsb	sy
 8014342:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014344:	bf00      	nop
 8014346:	e7fe      	b.n	8014346 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	2b02      	cmp	r3, #2
 801434c:	d103      	bne.n	8014356 <xQueueGenericSend+0x6e>
 801434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014352:	2b01      	cmp	r3, #1
 8014354:	d101      	bne.n	801435a <xQueueGenericSend+0x72>
 8014356:	2301      	movs	r3, #1
 8014358:	e000      	b.n	801435c <xQueueGenericSend+0x74>
 801435a:	2300      	movs	r3, #0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d10a      	bne.n	8014376 <xQueueGenericSend+0x8e>
	__asm volatile
 8014360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014364:	f383 8811 	msr	BASEPRI, r3
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	623b      	str	r3, [r7, #32]
}
 8014372:	bf00      	nop
 8014374:	e7fe      	b.n	8014374 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014376:	f001 fbfd 	bl	8015b74 <xTaskGetSchedulerState>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d102      	bne.n	8014386 <xQueueGenericSend+0x9e>
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <xQueueGenericSend+0xa2>
 8014386:	2301      	movs	r3, #1
 8014388:	e000      	b.n	801438c <xQueueGenericSend+0xa4>
 801438a:	2300      	movs	r3, #0
 801438c:	2b00      	cmp	r3, #0
 801438e:	d10a      	bne.n	80143a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8014390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014394:	f383 8811 	msr	BASEPRI, r3
 8014398:	f3bf 8f6f 	isb	sy
 801439c:	f3bf 8f4f 	dsb	sy
 80143a0:	61fb      	str	r3, [r7, #28]
}
 80143a2:	bf00      	nop
 80143a4:	e7fe      	b.n	80143a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80143a6:	f002 f975 	bl	8016694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d302      	bcc.n	80143bc <xQueueGenericSend+0xd4>
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	2b02      	cmp	r3, #2
 80143ba:	d129      	bne.n	8014410 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80143bc:	683a      	ldr	r2, [r7, #0]
 80143be:	68b9      	ldr	r1, [r7, #8]
 80143c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143c2:	f000 fa8b 	bl	80148dc <prvCopyDataToQueue>
 80143c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d010      	beq.n	80143f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d2:	3324      	adds	r3, #36	; 0x24
 80143d4:	4618      	mov	r0, r3
 80143d6:	f001 f9ad 	bl	8015734 <xTaskRemoveFromEventList>
 80143da:	4603      	mov	r3, r0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d013      	beq.n	8014408 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80143e0:	4b3f      	ldr	r3, [pc, #252]	; (80144e0 <xQueueGenericSend+0x1f8>)
 80143e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143e6:	601a      	str	r2, [r3, #0]
 80143e8:	f3bf 8f4f 	dsb	sy
 80143ec:	f3bf 8f6f 	isb	sy
 80143f0:	e00a      	b.n	8014408 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80143f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d007      	beq.n	8014408 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80143f8:	4b39      	ldr	r3, [pc, #228]	; (80144e0 <xQueueGenericSend+0x1f8>)
 80143fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143fe:	601a      	str	r2, [r3, #0]
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014408:	f002 f974 	bl	80166f4 <vPortExitCritical>
				return pdPASS;
 801440c:	2301      	movs	r3, #1
 801440e:	e063      	b.n	80144d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d103      	bne.n	801441e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014416:	f002 f96d 	bl	80166f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801441a:	2300      	movs	r3, #0
 801441c:	e05c      	b.n	80144d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014420:	2b00      	cmp	r3, #0
 8014422:	d106      	bne.n	8014432 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014424:	f107 0314 	add.w	r3, r7, #20
 8014428:	4618      	mov	r0, r3
 801442a:	f001 fa49 	bl	80158c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801442e:	2301      	movs	r3, #1
 8014430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014432:	f002 f95f 	bl	80166f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014436:	f000 ff15 	bl	8015264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801443a:	f002 f92b 	bl	8016694 <vPortEnterCritical>
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014444:	b25b      	sxtb	r3, r3
 8014446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801444a:	d103      	bne.n	8014454 <xQueueGenericSend+0x16c>
 801444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444e:	2200      	movs	r2, #0
 8014450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801445a:	b25b      	sxtb	r3, r3
 801445c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014460:	d103      	bne.n	801446a <xQueueGenericSend+0x182>
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	2200      	movs	r2, #0
 8014466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801446a:	f002 f943 	bl	80166f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801446e:	1d3a      	adds	r2, r7, #4
 8014470:	f107 0314 	add.w	r3, r7, #20
 8014474:	4611      	mov	r1, r2
 8014476:	4618      	mov	r0, r3
 8014478:	f001 fa38 	bl	80158ec <xTaskCheckForTimeOut>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d124      	bne.n	80144cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014484:	f000 fb22 	bl	8014acc <prvIsQueueFull>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d018      	beq.n	80144c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014490:	3310      	adds	r3, #16
 8014492:	687a      	ldr	r2, [r7, #4]
 8014494:	4611      	mov	r1, r2
 8014496:	4618      	mov	r0, r3
 8014498:	f001 f8c0 	bl	801561c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801449c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801449e:	f000 faad 	bl	80149fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80144a2:	f000 feed 	bl	8015280 <xTaskResumeAll>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f47f af7c 	bne.w	80143a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80144ae:	4b0c      	ldr	r3, [pc, #48]	; (80144e0 <xQueueGenericSend+0x1f8>)
 80144b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b4:	601a      	str	r2, [r3, #0]
 80144b6:	f3bf 8f4f 	dsb	sy
 80144ba:	f3bf 8f6f 	isb	sy
 80144be:	e772      	b.n	80143a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80144c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144c2:	f000 fa9b 	bl	80149fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80144c6:	f000 fedb 	bl	8015280 <xTaskResumeAll>
 80144ca:	e76c      	b.n	80143a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80144cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144ce:	f000 fa95 	bl	80149fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80144d2:	f000 fed5 	bl	8015280 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80144d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3738      	adds	r7, #56	; 0x38
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	e000ed04 	.word	0xe000ed04

080144e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b090      	sub	sp, #64	; 0x40
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	60f8      	str	r0, [r7, #12]
 80144ec:	60b9      	str	r1, [r7, #8]
 80144ee:	607a      	str	r2, [r7, #4]
 80144f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80144f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d10a      	bne.n	8014512 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801450e:	bf00      	nop
 8014510:	e7fe      	b.n	8014510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d103      	bne.n	8014520 <xQueueGenericSendFromISR+0x3c>
 8014518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801451c:	2b00      	cmp	r3, #0
 801451e:	d101      	bne.n	8014524 <xQueueGenericSendFromISR+0x40>
 8014520:	2301      	movs	r3, #1
 8014522:	e000      	b.n	8014526 <xQueueGenericSendFromISR+0x42>
 8014524:	2300      	movs	r3, #0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d10a      	bne.n	8014540 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801452e:	f383 8811 	msr	BASEPRI, r3
 8014532:	f3bf 8f6f 	isb	sy
 8014536:	f3bf 8f4f 	dsb	sy
 801453a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801453c:	bf00      	nop
 801453e:	e7fe      	b.n	801453e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	2b02      	cmp	r3, #2
 8014544:	d103      	bne.n	801454e <xQueueGenericSendFromISR+0x6a>
 8014546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801454a:	2b01      	cmp	r3, #1
 801454c:	d101      	bne.n	8014552 <xQueueGenericSendFromISR+0x6e>
 801454e:	2301      	movs	r3, #1
 8014550:	e000      	b.n	8014554 <xQueueGenericSendFromISR+0x70>
 8014552:	2300      	movs	r3, #0
 8014554:	2b00      	cmp	r3, #0
 8014556:	d10a      	bne.n	801456e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455c:	f383 8811 	msr	BASEPRI, r3
 8014560:	f3bf 8f6f 	isb	sy
 8014564:	f3bf 8f4f 	dsb	sy
 8014568:	623b      	str	r3, [r7, #32]
}
 801456a:	bf00      	nop
 801456c:	e7fe      	b.n	801456c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801456e:	f002 f973 	bl	8016858 <vPortValidateInterruptPriority>
	__asm volatile
 8014572:	f3ef 8211 	mrs	r2, BASEPRI
 8014576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457a:	f383 8811 	msr	BASEPRI, r3
 801457e:	f3bf 8f6f 	isb	sy
 8014582:	f3bf 8f4f 	dsb	sy
 8014586:	61fa      	str	r2, [r7, #28]
 8014588:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801458a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801458c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014596:	429a      	cmp	r2, r3
 8014598:	d302      	bcc.n	80145a0 <xQueueGenericSendFromISR+0xbc>
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	2b02      	cmp	r3, #2
 801459e:	d12f      	bne.n	8014600 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80145a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80145aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145b0:	683a      	ldr	r2, [r7, #0]
 80145b2:	68b9      	ldr	r1, [r7, #8]
 80145b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145b6:	f000 f991 	bl	80148dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80145ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80145be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145c2:	d112      	bne.n	80145ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d016      	beq.n	80145fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ce:	3324      	adds	r3, #36	; 0x24
 80145d0:	4618      	mov	r0, r3
 80145d2:	f001 f8af 	bl	8015734 <xTaskRemoveFromEventList>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d00e      	beq.n	80145fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00b      	beq.n	80145fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2201      	movs	r2, #1
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	e007      	b.n	80145fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80145ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80145ee:	3301      	adds	r3, #1
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	b25a      	sxtb	r2, r3
 80145f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80145fa:	2301      	movs	r3, #1
 80145fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80145fe:	e001      	b.n	8014604 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014600:	2300      	movs	r3, #0
 8014602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014606:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	f383 8811 	msr	BASEPRI, r3
}
 801460e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014612:	4618      	mov	r0, r3
 8014614:	3740      	adds	r7, #64	; 0x40
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
	...

0801461c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b08c      	sub	sp, #48	; 0x30
 8014620:	af00      	add	r7, sp, #0
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014628:	2300      	movs	r3, #0
 801462a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10a      	bne.n	801464c <xQueueReceive+0x30>
	__asm volatile
 8014636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801463a:	f383 8811 	msr	BASEPRI, r3
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	623b      	str	r3, [r7, #32]
}
 8014648:	bf00      	nop
 801464a:	e7fe      	b.n	801464a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d103      	bne.n	801465a <xQueueReceive+0x3e>
 8014652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014656:	2b00      	cmp	r3, #0
 8014658:	d101      	bne.n	801465e <xQueueReceive+0x42>
 801465a:	2301      	movs	r3, #1
 801465c:	e000      	b.n	8014660 <xQueueReceive+0x44>
 801465e:	2300      	movs	r3, #0
 8014660:	2b00      	cmp	r3, #0
 8014662:	d10a      	bne.n	801467a <xQueueReceive+0x5e>
	__asm volatile
 8014664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014668:	f383 8811 	msr	BASEPRI, r3
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f3bf 8f4f 	dsb	sy
 8014674:	61fb      	str	r3, [r7, #28]
}
 8014676:	bf00      	nop
 8014678:	e7fe      	b.n	8014678 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801467a:	f001 fa7b 	bl	8015b74 <xTaskGetSchedulerState>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d102      	bne.n	801468a <xQueueReceive+0x6e>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d101      	bne.n	801468e <xQueueReceive+0x72>
 801468a:	2301      	movs	r3, #1
 801468c:	e000      	b.n	8014690 <xQueueReceive+0x74>
 801468e:	2300      	movs	r3, #0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d10a      	bne.n	80146aa <xQueueReceive+0x8e>
	__asm volatile
 8014694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014698:	f383 8811 	msr	BASEPRI, r3
 801469c:	f3bf 8f6f 	isb	sy
 80146a0:	f3bf 8f4f 	dsb	sy
 80146a4:	61bb      	str	r3, [r7, #24]
}
 80146a6:	bf00      	nop
 80146a8:	e7fe      	b.n	80146a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80146aa:	f001 fff3 	bl	8016694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d01f      	beq.n	80146fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80146ba:	68b9      	ldr	r1, [r7, #8]
 80146bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146be:	f000 f977 	bl	80149b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	1e5a      	subs	r2, r3, #1
 80146c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146cc:	691b      	ldr	r3, [r3, #16]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d00f      	beq.n	80146f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d4:	3310      	adds	r3, #16
 80146d6:	4618      	mov	r0, r3
 80146d8:	f001 f82c 	bl	8015734 <xTaskRemoveFromEventList>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d007      	beq.n	80146f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80146e2:	4b3d      	ldr	r3, [pc, #244]	; (80147d8 <xQueueReceive+0x1bc>)
 80146e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146e8:	601a      	str	r2, [r3, #0]
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80146f2:	f001 ffff 	bl	80166f4 <vPortExitCritical>
				return pdPASS;
 80146f6:	2301      	movs	r3, #1
 80146f8:	e069      	b.n	80147ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d103      	bne.n	8014708 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014700:	f001 fff8 	bl	80166f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014704:	2300      	movs	r3, #0
 8014706:	e062      	b.n	80147ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470a:	2b00      	cmp	r3, #0
 801470c:	d106      	bne.n	801471c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801470e:	f107 0310 	add.w	r3, r7, #16
 8014712:	4618      	mov	r0, r3
 8014714:	f001 f8d4 	bl	80158c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014718:	2301      	movs	r3, #1
 801471a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801471c:	f001 ffea 	bl	80166f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014720:	f000 fda0 	bl	8015264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014724:	f001 ffb6 	bl	8016694 <vPortEnterCritical>
 8014728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801472a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801472e:	b25b      	sxtb	r3, r3
 8014730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014734:	d103      	bne.n	801473e <xQueueReceive+0x122>
 8014736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014738:	2200      	movs	r2, #0
 801473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014744:	b25b      	sxtb	r3, r3
 8014746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474a:	d103      	bne.n	8014754 <xQueueReceive+0x138>
 801474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801474e:	2200      	movs	r2, #0
 8014750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014754:	f001 ffce 	bl	80166f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014758:	1d3a      	adds	r2, r7, #4
 801475a:	f107 0310 	add.w	r3, r7, #16
 801475e:	4611      	mov	r1, r2
 8014760:	4618      	mov	r0, r3
 8014762:	f001 f8c3 	bl	80158ec <xTaskCheckForTimeOut>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d123      	bne.n	80147b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801476c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801476e:	f000 f997 	bl	8014aa0 <prvIsQueueEmpty>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d017      	beq.n	80147a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477a:	3324      	adds	r3, #36	; 0x24
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	4611      	mov	r1, r2
 8014780:	4618      	mov	r0, r3
 8014782:	f000 ff4b 	bl	801561c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014788:	f000 f938 	bl	80149fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801478c:	f000 fd78 	bl	8015280 <xTaskResumeAll>
 8014790:	4603      	mov	r3, r0
 8014792:	2b00      	cmp	r3, #0
 8014794:	d189      	bne.n	80146aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014796:	4b10      	ldr	r3, [pc, #64]	; (80147d8 <xQueueReceive+0x1bc>)
 8014798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801479c:	601a      	str	r2, [r3, #0]
 801479e:	f3bf 8f4f 	dsb	sy
 80147a2:	f3bf 8f6f 	isb	sy
 80147a6:	e780      	b.n	80146aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80147a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147aa:	f000 f927 	bl	80149fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80147ae:	f000 fd67 	bl	8015280 <xTaskResumeAll>
 80147b2:	e77a      	b.n	80146aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80147b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147b6:	f000 f921 	bl	80149fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80147ba:	f000 fd61 	bl	8015280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80147be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147c0:	f000 f96e 	bl	8014aa0 <prvIsQueueEmpty>
 80147c4:	4603      	mov	r3, r0
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	f43f af6f 	beq.w	80146aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80147cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3730      	adds	r7, #48	; 0x30
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	e000ed04 	.word	0xe000ed04

080147dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08e      	sub	sp, #56	; 0x38
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80147ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d10a      	bne.n	8014808 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80147f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f6:	f383 8811 	msr	BASEPRI, r3
 80147fa:	f3bf 8f6f 	isb	sy
 80147fe:	f3bf 8f4f 	dsb	sy
 8014802:	623b      	str	r3, [r7, #32]
}
 8014804:	bf00      	nop
 8014806:	e7fe      	b.n	8014806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d103      	bne.n	8014816 <xQueueReceiveFromISR+0x3a>
 801480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014812:	2b00      	cmp	r3, #0
 8014814:	d101      	bne.n	801481a <xQueueReceiveFromISR+0x3e>
 8014816:	2301      	movs	r3, #1
 8014818:	e000      	b.n	801481c <xQueueReceiveFromISR+0x40>
 801481a:	2300      	movs	r3, #0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d10a      	bne.n	8014836 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014824:	f383 8811 	msr	BASEPRI, r3
 8014828:	f3bf 8f6f 	isb	sy
 801482c:	f3bf 8f4f 	dsb	sy
 8014830:	61fb      	str	r3, [r7, #28]
}
 8014832:	bf00      	nop
 8014834:	e7fe      	b.n	8014834 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014836:	f002 f80f 	bl	8016858 <vPortValidateInterruptPriority>
	__asm volatile
 801483a:	f3ef 8211 	mrs	r2, BASEPRI
 801483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014842:	f383 8811 	msr	BASEPRI, r3
 8014846:	f3bf 8f6f 	isb	sy
 801484a:	f3bf 8f4f 	dsb	sy
 801484e:	61ba      	str	r2, [r7, #24]
 8014850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014854:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801485a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485e:	2b00      	cmp	r3, #0
 8014860:	d02f      	beq.n	80148c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801486c:	68b9      	ldr	r1, [r7, #8]
 801486e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014870:	f000 f89e 	bl	80149b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014876:	1e5a      	subs	r2, r3, #1
 8014878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801487c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014884:	d112      	bne.n	80148ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014888:	691b      	ldr	r3, [r3, #16]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d016      	beq.n	80148bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014890:	3310      	adds	r3, #16
 8014892:	4618      	mov	r0, r3
 8014894:	f000 ff4e 	bl	8015734 <xTaskRemoveFromEventList>
 8014898:	4603      	mov	r3, r0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00e      	beq.n	80148bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d00b      	beq.n	80148bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2201      	movs	r2, #1
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	e007      	b.n	80148bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80148ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148b0:	3301      	adds	r3, #1
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	b25a      	sxtb	r2, r3
 80148b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80148bc:	2301      	movs	r3, #1
 80148be:	637b      	str	r3, [r7, #52]	; 0x34
 80148c0:	e001      	b.n	80148c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80148c2:	2300      	movs	r3, #0
 80148c4:	637b      	str	r3, [r7, #52]	; 0x34
 80148c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	f383 8811 	msr	BASEPRI, r3
}
 80148d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80148d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3738      	adds	r7, #56	; 0x38
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b086      	sub	sp, #24
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80148e8:	2300      	movs	r3, #0
 80148ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10d      	bne.n	8014916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d14d      	bne.n	801499e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	4618      	mov	r0, r3
 8014908:	f001 f952 	bl	8015bb0 <xTaskPriorityDisinherit>
 801490c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	2200      	movs	r2, #0
 8014912:	609a      	str	r2, [r3, #8]
 8014914:	e043      	b.n	801499e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d119      	bne.n	8014950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6858      	ldr	r0, [r3, #4]
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014924:	461a      	mov	r2, r3
 8014926:	68b9      	ldr	r1, [r7, #8]
 8014928:	f002 f9fa 	bl	8016d20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	685a      	ldr	r2, [r3, #4]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014934:	441a      	add	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	685a      	ldr	r2, [r3, #4]
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	429a      	cmp	r2, r3
 8014944:	d32b      	bcc.n	801499e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	605a      	str	r2, [r3, #4]
 801494e:	e026      	b.n	801499e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	68d8      	ldr	r0, [r3, #12]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014958:	461a      	mov	r2, r3
 801495a:	68b9      	ldr	r1, [r7, #8]
 801495c:	f002 f9e0 	bl	8016d20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	68da      	ldr	r2, [r3, #12]
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014968:	425b      	negs	r3, r3
 801496a:	441a      	add	r2, r3
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	68da      	ldr	r2, [r3, #12]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	429a      	cmp	r2, r3
 801497a:	d207      	bcs.n	801498c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	689a      	ldr	r2, [r3, #8]
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014984:	425b      	negs	r3, r3
 8014986:	441a      	add	r2, r3
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b02      	cmp	r3, #2
 8014990:	d105      	bne.n	801499e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d002      	beq.n	801499e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	3b01      	subs	r3, #1
 801499c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	1c5a      	adds	r2, r3, #1
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80149a6:	697b      	ldr	r3, [r7, #20]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3718      	adds	r7, #24
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d018      	beq.n	80149f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	68da      	ldr	r2, [r3, #12]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ca:	441a      	add	r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	68da      	ldr	r2, [r3, #12]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	689b      	ldr	r3, [r3, #8]
 80149d8:	429a      	cmp	r2, r3
 80149da:	d303      	bcc.n	80149e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	68d9      	ldr	r1, [r3, #12]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ec:	461a      	mov	r2, r3
 80149ee:	6838      	ldr	r0, [r7, #0]
 80149f0:	f002 f996 	bl	8016d20 <memcpy>
	}
}
 80149f4:	bf00      	nop
 80149f6:	3708      	adds	r7, #8
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b084      	sub	sp, #16
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014a04:	f001 fe46 	bl	8016694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a10:	e011      	b.n	8014a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d012      	beq.n	8014a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	3324      	adds	r3, #36	; 0x24
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f000 fe88 	bl	8015734 <xTaskRemoveFromEventList>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d001      	beq.n	8014a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014a2a:	f000 ffc1 	bl	80159b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014a2e:	7bfb      	ldrb	r3, [r7, #15]
 8014a30:	3b01      	subs	r3, #1
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	dce9      	bgt.n	8014a12 <prvUnlockQueue+0x16>
 8014a3e:	e000      	b.n	8014a42 <prvUnlockQueue+0x46>
					break;
 8014a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	22ff      	movs	r2, #255	; 0xff
 8014a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014a4a:	f001 fe53 	bl	80166f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014a4e:	f001 fe21 	bl	8016694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a5a:	e011      	b.n	8014a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	691b      	ldr	r3, [r3, #16]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d012      	beq.n	8014a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	3310      	adds	r3, #16
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f000 fe63 	bl	8015734 <xTaskRemoveFromEventList>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d001      	beq.n	8014a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014a74:	f000 ff9c 	bl	80159b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014a78:	7bbb      	ldrb	r3, [r7, #14]
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	dce9      	bgt.n	8014a5c <prvUnlockQueue+0x60>
 8014a88:	e000      	b.n	8014a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	22ff      	movs	r2, #255	; 0xff
 8014a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014a94:	f001 fe2e 	bl	80166f4 <vPortExitCritical>
}
 8014a98:	bf00      	nop
 8014a9a:	3710      	adds	r7, #16
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}

08014aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014aa8:	f001 fdf4 	bl	8016694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d102      	bne.n	8014aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	60fb      	str	r3, [r7, #12]
 8014ab8:	e001      	b.n	8014abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014aba:	2300      	movs	r3, #0
 8014abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014abe:	f001 fe19 	bl	80166f4 <vPortExitCritical>

	return xReturn;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3710      	adds	r7, #16
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014ad4:	f001 fdde 	bl	8016694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d102      	bne.n	8014aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	60fb      	str	r3, [r7, #12]
 8014ae8:	e001      	b.n	8014aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014aea:	2300      	movs	r3, #0
 8014aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014aee:	f001 fe01 	bl	80166f4 <vPortExitCritical>

	return xReturn;
 8014af2:	68fb      	ldr	r3, [r7, #12]
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	3710      	adds	r7, #16
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}

08014afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014afc:	b480      	push	{r7}
 8014afe:	b085      	sub	sp, #20
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b06:	2300      	movs	r3, #0
 8014b08:	60fb      	str	r3, [r7, #12]
 8014b0a:	e014      	b.n	8014b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014b0c:	4a0f      	ldr	r2, [pc, #60]	; (8014b4c <vQueueAddToRegistry+0x50>)
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d10b      	bne.n	8014b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014b18:	490c      	ldr	r1, [pc, #48]	; (8014b4c <vQueueAddToRegistry+0x50>)
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	683a      	ldr	r2, [r7, #0]
 8014b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014b22:	4a0a      	ldr	r2, [pc, #40]	; (8014b4c <vQueueAddToRegistry+0x50>)
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	00db      	lsls	r3, r3, #3
 8014b28:	4413      	add	r3, r2
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014b2e:	e006      	b.n	8014b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	3301      	adds	r3, #1
 8014b34:	60fb      	str	r3, [r7, #12]
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2b07      	cmp	r3, #7
 8014b3a:	d9e7      	bls.n	8014b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014b3c:	bf00      	nop
 8014b3e:	bf00      	nop
 8014b40:	3714      	adds	r7, #20
 8014b42:	46bd      	mov	sp, r7
 8014b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b48:	4770      	bx	lr
 8014b4a:	bf00      	nop
 8014b4c:	240017ec 	.word	0x240017ec

08014b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014b60:	f001 fd98 	bl	8016694 <vPortEnterCritical>
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014b6a:	b25b      	sxtb	r3, r3
 8014b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b70:	d103      	bne.n	8014b7a <vQueueWaitForMessageRestricted+0x2a>
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	2200      	movs	r2, #0
 8014b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014b80:	b25b      	sxtb	r3, r3
 8014b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b86:	d103      	bne.n	8014b90 <vQueueWaitForMessageRestricted+0x40>
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014b90:	f001 fdb0 	bl	80166f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d106      	bne.n	8014baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	3324      	adds	r3, #36	; 0x24
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	68b9      	ldr	r1, [r7, #8]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f000 fd99 	bl	80156dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014baa:	6978      	ldr	r0, [r7, #20]
 8014bac:	f7ff ff26 	bl	80149fc <prvUnlockQueue>
	}
 8014bb0:	bf00      	nop
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b08e      	sub	sp, #56	; 0x38
 8014bbc:	af04      	add	r7, sp, #16
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
 8014bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10a      	bne.n	8014be2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd0:	f383 8811 	msr	BASEPRI, r3
 8014bd4:	f3bf 8f6f 	isb	sy
 8014bd8:	f3bf 8f4f 	dsb	sy
 8014bdc:	623b      	str	r3, [r7, #32]
}
 8014bde:	bf00      	nop
 8014be0:	e7fe      	b.n	8014be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d10a      	bne.n	8014bfe <xTaskCreateStatic+0x46>
	__asm volatile
 8014be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bec:	f383 8811 	msr	BASEPRI, r3
 8014bf0:	f3bf 8f6f 	isb	sy
 8014bf4:	f3bf 8f4f 	dsb	sy
 8014bf8:	61fb      	str	r3, [r7, #28]
}
 8014bfa:	bf00      	nop
 8014bfc:	e7fe      	b.n	8014bfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014bfe:	235c      	movs	r3, #92	; 0x5c
 8014c00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014c02:	693b      	ldr	r3, [r7, #16]
 8014c04:	2b5c      	cmp	r3, #92	; 0x5c
 8014c06:	d00a      	beq.n	8014c1e <xTaskCreateStatic+0x66>
	__asm volatile
 8014c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c0c:	f383 8811 	msr	BASEPRI, r3
 8014c10:	f3bf 8f6f 	isb	sy
 8014c14:	f3bf 8f4f 	dsb	sy
 8014c18:	61bb      	str	r3, [r7, #24]
}
 8014c1a:	bf00      	nop
 8014c1c:	e7fe      	b.n	8014c1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014c1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d01e      	beq.n	8014c64 <xTaskCreateStatic+0xac>
 8014c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d01b      	beq.n	8014c64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	2202      	movs	r2, #2
 8014c3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014c3e:	2300      	movs	r3, #0
 8014c40:	9303      	str	r3, [sp, #12]
 8014c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c44:	9302      	str	r3, [sp, #8]
 8014c46:	f107 0314 	add.w	r3, r7, #20
 8014c4a:	9301      	str	r3, [sp, #4]
 8014c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	68b9      	ldr	r1, [r7, #8]
 8014c56:	68f8      	ldr	r0, [r7, #12]
 8014c58:	f000 f850 	bl	8014cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c5e:	f000 f8dd 	bl	8014e1c <prvAddNewTaskToReadyList>
 8014c62:	e001      	b.n	8014c68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014c64:	2300      	movs	r3, #0
 8014c66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014c68:	697b      	ldr	r3, [r7, #20]
	}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3728      	adds	r7, #40	; 0x28
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b08c      	sub	sp, #48	; 0x30
 8014c76:	af04      	add	r7, sp, #16
 8014c78:	60f8      	str	r0, [r7, #12]
 8014c7a:	60b9      	str	r1, [r7, #8]
 8014c7c:	603b      	str	r3, [r7, #0]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c82:	88fb      	ldrh	r3, [r7, #6]
 8014c84:	009b      	lsls	r3, r3, #2
 8014c86:	4618      	mov	r0, r3
 8014c88:	f001 fe26 	bl	80168d8 <pvPortMalloc>
 8014c8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d00e      	beq.n	8014cb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014c94:	205c      	movs	r0, #92	; 0x5c
 8014c96:	f001 fe1f 	bl	80168d8 <pvPortMalloc>
 8014c9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d003      	beq.n	8014caa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	697a      	ldr	r2, [r7, #20]
 8014ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8014ca8:	e005      	b.n	8014cb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014caa:	6978      	ldr	r0, [r7, #20]
 8014cac:	f001 fee0 	bl	8016a70 <vPortFree>
 8014cb0:	e001      	b.n	8014cb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d017      	beq.n	8014cec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014cc4:	88fa      	ldrh	r2, [r7, #6]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	9303      	str	r3, [sp, #12]
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	9302      	str	r3, [sp, #8]
 8014cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd0:	9301      	str	r3, [sp, #4]
 8014cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd4:	9300      	str	r3, [sp, #0]
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	68b9      	ldr	r1, [r7, #8]
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f000 f80e 	bl	8014cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ce0:	69f8      	ldr	r0, [r7, #28]
 8014ce2:	f000 f89b 	bl	8014e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	61bb      	str	r3, [r7, #24]
 8014cea:	e002      	b.n	8014cf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3720      	adds	r7, #32
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b088      	sub	sp, #32
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	60f8      	str	r0, [r7, #12]
 8014d04:	60b9      	str	r1, [r7, #8]
 8014d06:	607a      	str	r2, [r7, #4]
 8014d08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	461a      	mov	r2, r3
 8014d14:	21a5      	movs	r1, #165	; 0xa5
 8014d16:	f002 f811 	bl	8016d3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014d24:	440b      	add	r3, r1
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4413      	add	r3, r2
 8014d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014d2c:	69bb      	ldr	r3, [r7, #24]
 8014d2e:	f023 0307 	bic.w	r3, r3, #7
 8014d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	f003 0307 	and.w	r3, r3, #7
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d00a      	beq.n	8014d54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d42:	f383 8811 	msr	BASEPRI, r3
 8014d46:	f3bf 8f6f 	isb	sy
 8014d4a:	f3bf 8f4f 	dsb	sy
 8014d4e:	617b      	str	r3, [r7, #20]
}
 8014d50:	bf00      	nop
 8014d52:	e7fe      	b.n	8014d52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d01f      	beq.n	8014d9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	61fb      	str	r3, [r7, #28]
 8014d5e:	e012      	b.n	8014d86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014d60:	68ba      	ldr	r2, [r7, #8]
 8014d62:	69fb      	ldr	r3, [r7, #28]
 8014d64:	4413      	add	r3, r2
 8014d66:	7819      	ldrb	r1, [r3, #0]
 8014d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	3334      	adds	r3, #52	; 0x34
 8014d70:	460a      	mov	r2, r1
 8014d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014d74:	68ba      	ldr	r2, [r7, #8]
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	4413      	add	r3, r2
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d006      	beq.n	8014d8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	3301      	adds	r3, #1
 8014d84:	61fb      	str	r3, [r7, #28]
 8014d86:	69fb      	ldr	r3, [r7, #28]
 8014d88:	2b0f      	cmp	r3, #15
 8014d8a:	d9e9      	bls.n	8014d60 <prvInitialiseNewTask+0x64>
 8014d8c:	e000      	b.n	8014d90 <prvInitialiseNewTask+0x94>
			{
				break;
 8014d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d92:	2200      	movs	r2, #0
 8014d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014d98:	e003      	b.n	8014da2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da4:	2b37      	cmp	r3, #55	; 0x37
 8014da6:	d901      	bls.n	8014dac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014da8:	2337      	movs	r3, #55	; 0x37
 8014daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014db6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dba:	2200      	movs	r2, #0
 8014dbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc0:	3304      	adds	r3, #4
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7ff f8be 	bl	8013f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dca:	3318      	adds	r3, #24
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7ff f8b9 	bl	8013f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dea:	2200      	movs	r2, #0
 8014dec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df0:	2200      	movs	r2, #0
 8014df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014df6:	683a      	ldr	r2, [r7, #0]
 8014df8:	68f9      	ldr	r1, [r7, #12]
 8014dfa:	69b8      	ldr	r0, [r7, #24]
 8014dfc:	f001 fb20 	bl	8016440 <pxPortInitialiseStack>
 8014e00:	4602      	mov	r2, r0
 8014e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d002      	beq.n	8014e12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e12:	bf00      	nop
 8014e14:	3720      	adds	r7, #32
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
	...

08014e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014e24:	f001 fc36 	bl	8016694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014e28:	4b2d      	ldr	r3, [pc, #180]	; (8014ee0 <prvAddNewTaskToReadyList+0xc4>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	4a2c      	ldr	r2, [pc, #176]	; (8014ee0 <prvAddNewTaskToReadyList+0xc4>)
 8014e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014e32:	4b2c      	ldr	r3, [pc, #176]	; (8014ee4 <prvAddNewTaskToReadyList+0xc8>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d109      	bne.n	8014e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014e3a:	4a2a      	ldr	r2, [pc, #168]	; (8014ee4 <prvAddNewTaskToReadyList+0xc8>)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014e40:	4b27      	ldr	r3, [pc, #156]	; (8014ee0 <prvAddNewTaskToReadyList+0xc4>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d110      	bne.n	8014e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014e48:	f000 fdd6 	bl	80159f8 <prvInitialiseTaskLists>
 8014e4c:	e00d      	b.n	8014e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e4e:	4b26      	ldr	r3, [pc, #152]	; (8014ee8 <prvAddNewTaskToReadyList+0xcc>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d109      	bne.n	8014e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014e56:	4b23      	ldr	r3, [pc, #140]	; (8014ee4 <prvAddNewTaskToReadyList+0xc8>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d802      	bhi.n	8014e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e64:	4a1f      	ldr	r2, [pc, #124]	; (8014ee4 <prvAddNewTaskToReadyList+0xc8>)
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e6a:	4b20      	ldr	r3, [pc, #128]	; (8014eec <prvAddNewTaskToReadyList+0xd0>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	4a1e      	ldr	r2, [pc, #120]	; (8014eec <prvAddNewTaskToReadyList+0xd0>)
 8014e72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014e74:	4b1d      	ldr	r3, [pc, #116]	; (8014eec <prvAddNewTaskToReadyList+0xd0>)
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e80:	4b1b      	ldr	r3, [pc, #108]	; (8014ef0 <prvAddNewTaskToReadyList+0xd4>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	429a      	cmp	r2, r3
 8014e86:	d903      	bls.n	8014e90 <prvAddNewTaskToReadyList+0x74>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e8c:	4a18      	ldr	r2, [pc, #96]	; (8014ef0 <prvAddNewTaskToReadyList+0xd4>)
 8014e8e:	6013      	str	r3, [r2, #0]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e94:	4613      	mov	r3, r2
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	4413      	add	r3, r2
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	4a15      	ldr	r2, [pc, #84]	; (8014ef4 <prvAddNewTaskToReadyList+0xd8>)
 8014e9e:	441a      	add	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3304      	adds	r3, #4
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	4610      	mov	r0, r2
 8014ea8:	f7ff f859 	bl	8013f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014eac:	f001 fc22 	bl	80166f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014eb0:	4b0d      	ldr	r3, [pc, #52]	; (8014ee8 <prvAddNewTaskToReadyList+0xcc>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00e      	beq.n	8014ed6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014eb8:	4b0a      	ldr	r3, [pc, #40]	; (8014ee4 <prvAddNewTaskToReadyList+0xc8>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d207      	bcs.n	8014ed6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014ec6:	4b0c      	ldr	r3, [pc, #48]	; (8014ef8 <prvAddNewTaskToReadyList+0xdc>)
 8014ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ecc:	601a      	str	r2, [r3, #0]
 8014ece:	f3bf 8f4f 	dsb	sy
 8014ed2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ed6:	bf00      	nop
 8014ed8:	3708      	adds	r7, #8
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	24001d00 	.word	0x24001d00
 8014ee4:	2400182c 	.word	0x2400182c
 8014ee8:	24001d0c 	.word	0x24001d0c
 8014eec:	24001d1c 	.word	0x24001d1c
 8014ef0:	24001d08 	.word	0x24001d08
 8014ef4:	24001830 	.word	0x24001830
 8014ef8:	e000ed04 	.word	0xe000ed04

08014efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014f04:	2300      	movs	r3, #0
 8014f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d017      	beq.n	8014f3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014f0e:	4b13      	ldr	r3, [pc, #76]	; (8014f5c <vTaskDelay+0x60>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d00a      	beq.n	8014f2c <vTaskDelay+0x30>
	__asm volatile
 8014f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f1a:	f383 8811 	msr	BASEPRI, r3
 8014f1e:	f3bf 8f6f 	isb	sy
 8014f22:	f3bf 8f4f 	dsb	sy
 8014f26:	60bb      	str	r3, [r7, #8]
}
 8014f28:	bf00      	nop
 8014f2a:	e7fe      	b.n	8014f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014f2c:	f000 f99a 	bl	8015264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014f30:	2100      	movs	r1, #0
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 fec2 	bl	8015cbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014f38:	f000 f9a2 	bl	8015280 <xTaskResumeAll>
 8014f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d107      	bne.n	8014f54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014f44:	4b06      	ldr	r3, [pc, #24]	; (8014f60 <vTaskDelay+0x64>)
 8014f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f4a:	601a      	str	r2, [r3, #0]
 8014f4c:	f3bf 8f4f 	dsb	sy
 8014f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f54:	bf00      	nop
 8014f56:	3710      	adds	r7, #16
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}
 8014f5c:	24001d28 	.word	0x24001d28
 8014f60:	e000ed04 	.word	0xe000ed04

08014f64 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014f6c:	f001 fb92 	bl	8016694 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d102      	bne.n	8014f7c <vTaskSuspend+0x18>
 8014f76:	4b30      	ldr	r3, [pc, #192]	; (8015038 <vTaskSuspend+0xd4>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	e000      	b.n	8014f7e <vTaskSuspend+0x1a>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	3304      	adds	r3, #4
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7ff f847 	bl	8014018 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d004      	beq.n	8014f9c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	3318      	adds	r3, #24
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ff f83e 	bl	8014018 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	3304      	adds	r3, #4
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	4826      	ldr	r0, [pc, #152]	; (801503c <vTaskSuspend+0xd8>)
 8014fa4:	f7fe ffdb 	bl	8013f5e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d103      	bne.n	8014fbc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014fbc:	f001 fb9a 	bl	80166f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014fc0:	4b1f      	ldr	r3, [pc, #124]	; (8015040 <vTaskSuspend+0xdc>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d005      	beq.n	8014fd4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014fc8:	f001 fb64 	bl	8016694 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014fcc:	f000 fdb2 	bl	8015b34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014fd0:	f001 fb90 	bl	80166f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014fd4:	4b18      	ldr	r3, [pc, #96]	; (8015038 <vTaskSuspend+0xd4>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	68fa      	ldr	r2, [r7, #12]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d127      	bne.n	801502e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014fde:	4b18      	ldr	r3, [pc, #96]	; (8015040 <vTaskSuspend+0xdc>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d017      	beq.n	8015016 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014fe6:	4b17      	ldr	r3, [pc, #92]	; (8015044 <vTaskSuspend+0xe0>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00a      	beq.n	8015004 <vTaskSuspend+0xa0>
	__asm volatile
 8014fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff2:	f383 8811 	msr	BASEPRI, r3
 8014ff6:	f3bf 8f6f 	isb	sy
 8014ffa:	f3bf 8f4f 	dsb	sy
 8014ffe:	60bb      	str	r3, [r7, #8]
}
 8015000:	bf00      	nop
 8015002:	e7fe      	b.n	8015002 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8015004:	4b10      	ldr	r3, [pc, #64]	; (8015048 <vTaskSuspend+0xe4>)
 8015006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801500a:	601a      	str	r2, [r3, #0]
 801500c:	f3bf 8f4f 	dsb	sy
 8015010:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015014:	e00b      	b.n	801502e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015016:	4b09      	ldr	r3, [pc, #36]	; (801503c <vTaskSuspend+0xd8>)
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	4b0c      	ldr	r3, [pc, #48]	; (801504c <vTaskSuspend+0xe8>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	429a      	cmp	r2, r3
 8015020:	d103      	bne.n	801502a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8015022:	4b05      	ldr	r3, [pc, #20]	; (8015038 <vTaskSuspend+0xd4>)
 8015024:	2200      	movs	r2, #0
 8015026:	601a      	str	r2, [r3, #0]
	}
 8015028:	e001      	b.n	801502e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801502a:	f000 fa99 	bl	8015560 <vTaskSwitchContext>
	}
 801502e:	bf00      	nop
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	2400182c 	.word	0x2400182c
 801503c:	24001cec 	.word	0x24001cec
 8015040:	24001d0c 	.word	0x24001d0c
 8015044:	24001d28 	.word	0x24001d28
 8015048:	e000ed04 	.word	0xe000ed04
 801504c:	24001d00 	.word	0x24001d00

08015050 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015050:	b480      	push	{r7}
 8015052:	b087      	sub	sp, #28
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015058:	2300      	movs	r3, #0
 801505a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d10a      	bne.n	801507c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8015066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801506a:	f383 8811 	msr	BASEPRI, r3
 801506e:	f3bf 8f6f 	isb	sy
 8015072:	f3bf 8f4f 	dsb	sy
 8015076:	60fb      	str	r3, [r7, #12]
}
 8015078:	bf00      	nop
 801507a:	e7fe      	b.n	801507a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	695b      	ldr	r3, [r3, #20]
 8015080:	4a0a      	ldr	r2, [pc, #40]	; (80150ac <prvTaskIsTaskSuspended+0x5c>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d10a      	bne.n	801509c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801508a:	4a09      	ldr	r2, [pc, #36]	; (80150b0 <prvTaskIsTaskSuspended+0x60>)
 801508c:	4293      	cmp	r3, r2
 801508e:	d005      	beq.n	801509c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015094:	2b00      	cmp	r3, #0
 8015096:	d101      	bne.n	801509c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8015098:	2301      	movs	r3, #1
 801509a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801509c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801509e:	4618      	mov	r0, r3
 80150a0:	371c      	adds	r7, #28
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	24001cec 	.word	0x24001cec
 80150b0:	24001cc0 	.word	0x24001cc0

080150b4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b08a      	sub	sp, #40	; 0x28
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80150bc:	2300      	movs	r3, #0
 80150be:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d10a      	bne.n	80150e0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80150ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ce:	f383 8811 	msr	BASEPRI, r3
 80150d2:	f3bf 8f6f 	isb	sy
 80150d6:	f3bf 8f4f 	dsb	sy
 80150da:	61bb      	str	r3, [r7, #24]
}
 80150dc:	bf00      	nop
 80150de:	e7fe      	b.n	80150de <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80150e0:	f001 fbba 	bl	8016858 <vPortValidateInterruptPriority>
	__asm volatile
 80150e4:	f3ef 8211 	mrs	r2, BASEPRI
 80150e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ec:	f383 8811 	msr	BASEPRI, r3
 80150f0:	f3bf 8f6f 	isb	sy
 80150f4:	f3bf 8f4f 	dsb	sy
 80150f8:	617a      	str	r2, [r7, #20]
 80150fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80150fc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80150fe:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8015100:	6a38      	ldr	r0, [r7, #32]
 8015102:	f7ff ffa5 	bl	8015050 <prvTaskIsTaskSuspended>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d030      	beq.n	801516e <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801510c:	4b1d      	ldr	r3, [pc, #116]	; (8015184 <xTaskResumeFromISR+0xd0>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d126      	bne.n	8015162 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015114:	6a3b      	ldr	r3, [r7, #32]
 8015116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015118:	4b1b      	ldr	r3, [pc, #108]	; (8015188 <xTaskResumeFromISR+0xd4>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801511e:	429a      	cmp	r2, r3
 8015120:	d301      	bcc.n	8015126 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8015122:	2301      	movs	r3, #1
 8015124:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015126:	6a3b      	ldr	r3, [r7, #32]
 8015128:	3304      	adds	r3, #4
 801512a:	4618      	mov	r0, r3
 801512c:	f7fe ff74 	bl	8014018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015130:	6a3b      	ldr	r3, [r7, #32]
 8015132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015134:	4b15      	ldr	r3, [pc, #84]	; (801518c <xTaskResumeFromISR+0xd8>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	429a      	cmp	r2, r3
 801513a:	d903      	bls.n	8015144 <xTaskResumeFromISR+0x90>
 801513c:	6a3b      	ldr	r3, [r7, #32]
 801513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015140:	4a12      	ldr	r2, [pc, #72]	; (801518c <xTaskResumeFromISR+0xd8>)
 8015142:	6013      	str	r3, [r2, #0]
 8015144:	6a3b      	ldr	r3, [r7, #32]
 8015146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015148:	4613      	mov	r3, r2
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	4413      	add	r3, r2
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	4a0f      	ldr	r2, [pc, #60]	; (8015190 <xTaskResumeFromISR+0xdc>)
 8015152:	441a      	add	r2, r3
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	3304      	adds	r3, #4
 8015158:	4619      	mov	r1, r3
 801515a:	4610      	mov	r0, r2
 801515c:	f7fe feff 	bl	8013f5e <vListInsertEnd>
 8015160:	e005      	b.n	801516e <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015162:	6a3b      	ldr	r3, [r7, #32]
 8015164:	3318      	adds	r3, #24
 8015166:	4619      	mov	r1, r3
 8015168:	480a      	ldr	r0, [pc, #40]	; (8015194 <xTaskResumeFromISR+0xe0>)
 801516a:	f7fe fef8 	bl	8013f5e <vListInsertEnd>
 801516e:	69fb      	ldr	r3, [r7, #28]
 8015170:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	f383 8811 	msr	BASEPRI, r3
}
 8015178:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801517c:	4618      	mov	r0, r3
 801517e:	3728      	adds	r7, #40	; 0x28
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	24001d28 	.word	0x24001d28
 8015188:	2400182c 	.word	0x2400182c
 801518c:	24001d08 	.word	0x24001d08
 8015190:	24001830 	.word	0x24001830
 8015194:	24001cc0 	.word	0x24001cc0

08015198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b08a      	sub	sp, #40	; 0x28
 801519c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801519e:	2300      	movs	r3, #0
 80151a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80151a6:	463a      	mov	r2, r7
 80151a8:	1d39      	adds	r1, r7, #4
 80151aa:	f107 0308 	add.w	r3, r7, #8
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7fe fc08 	bl	80139c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80151b4:	6839      	ldr	r1, [r7, #0]
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	68ba      	ldr	r2, [r7, #8]
 80151ba:	9202      	str	r2, [sp, #8]
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	2300      	movs	r3, #0
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	2300      	movs	r3, #0
 80151c4:	460a      	mov	r2, r1
 80151c6:	4921      	ldr	r1, [pc, #132]	; (801524c <vTaskStartScheduler+0xb4>)
 80151c8:	4821      	ldr	r0, [pc, #132]	; (8015250 <vTaskStartScheduler+0xb8>)
 80151ca:	f7ff fcf5 	bl	8014bb8 <xTaskCreateStatic>
 80151ce:	4603      	mov	r3, r0
 80151d0:	4a20      	ldr	r2, [pc, #128]	; (8015254 <vTaskStartScheduler+0xbc>)
 80151d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151d4:	4b1f      	ldr	r3, [pc, #124]	; (8015254 <vTaskStartScheduler+0xbc>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d002      	beq.n	80151e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80151dc:	2301      	movs	r3, #1
 80151de:	617b      	str	r3, [r7, #20]
 80151e0:	e001      	b.n	80151e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80151e2:	2300      	movs	r3, #0
 80151e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d102      	bne.n	80151f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80151ec:	f000 fdba 	bl	8015d64 <xTimerCreateTimerTask>
 80151f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d116      	bne.n	8015226 <vTaskStartScheduler+0x8e>
	__asm volatile
 80151f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fc:	f383 8811 	msr	BASEPRI, r3
 8015200:	f3bf 8f6f 	isb	sy
 8015204:	f3bf 8f4f 	dsb	sy
 8015208:	613b      	str	r3, [r7, #16]
}
 801520a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801520c:	4b12      	ldr	r3, [pc, #72]	; (8015258 <vTaskStartScheduler+0xc0>)
 801520e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015212:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015214:	4b11      	ldr	r3, [pc, #68]	; (801525c <vTaskStartScheduler+0xc4>)
 8015216:	2201      	movs	r2, #1
 8015218:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801521a:	4b11      	ldr	r3, [pc, #68]	; (8015260 <vTaskStartScheduler+0xc8>)
 801521c:	2200      	movs	r2, #0
 801521e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015220:	f001 f996 	bl	8016550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015224:	e00e      	b.n	8015244 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801522c:	d10a      	bne.n	8015244 <vTaskStartScheduler+0xac>
	__asm volatile
 801522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015232:	f383 8811 	msr	BASEPRI, r3
 8015236:	f3bf 8f6f 	isb	sy
 801523a:	f3bf 8f4f 	dsb	sy
 801523e:	60fb      	str	r3, [r7, #12]
}
 8015240:	bf00      	nop
 8015242:	e7fe      	b.n	8015242 <vTaskStartScheduler+0xaa>
}
 8015244:	bf00      	nop
 8015246:	3718      	adds	r7, #24
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	080179d4 	.word	0x080179d4
 8015250:	080159c9 	.word	0x080159c9
 8015254:	24001d24 	.word	0x24001d24
 8015258:	24001d20 	.word	0x24001d20
 801525c:	24001d0c 	.word	0x24001d0c
 8015260:	24001d04 	.word	0x24001d04

08015264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015264:	b480      	push	{r7}
 8015266:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015268:	4b04      	ldr	r3, [pc, #16]	; (801527c <vTaskSuspendAll+0x18>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	3301      	adds	r3, #1
 801526e:	4a03      	ldr	r2, [pc, #12]	; (801527c <vTaskSuspendAll+0x18>)
 8015270:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015272:	bf00      	nop
 8015274:	46bd      	mov	sp, r7
 8015276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527a:	4770      	bx	lr
 801527c:	24001d28 	.word	0x24001d28

08015280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015286:	2300      	movs	r3, #0
 8015288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801528a:	2300      	movs	r3, #0
 801528c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801528e:	4b42      	ldr	r3, [pc, #264]	; (8015398 <xTaskResumeAll+0x118>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d10a      	bne.n	80152ac <xTaskResumeAll+0x2c>
	__asm volatile
 8015296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801529a:	f383 8811 	msr	BASEPRI, r3
 801529e:	f3bf 8f6f 	isb	sy
 80152a2:	f3bf 8f4f 	dsb	sy
 80152a6:	603b      	str	r3, [r7, #0]
}
 80152a8:	bf00      	nop
 80152aa:	e7fe      	b.n	80152aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80152ac:	f001 f9f2 	bl	8016694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80152b0:	4b39      	ldr	r3, [pc, #228]	; (8015398 <xTaskResumeAll+0x118>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	3b01      	subs	r3, #1
 80152b6:	4a38      	ldr	r2, [pc, #224]	; (8015398 <xTaskResumeAll+0x118>)
 80152b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152ba:	4b37      	ldr	r3, [pc, #220]	; (8015398 <xTaskResumeAll+0x118>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d162      	bne.n	8015388 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80152c2:	4b36      	ldr	r3, [pc, #216]	; (801539c <xTaskResumeAll+0x11c>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d05e      	beq.n	8015388 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152ca:	e02f      	b.n	801532c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152cc:	4b34      	ldr	r3, [pc, #208]	; (80153a0 <xTaskResumeAll+0x120>)
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	68db      	ldr	r3, [r3, #12]
 80152d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	3318      	adds	r3, #24
 80152d8:	4618      	mov	r0, r3
 80152da:	f7fe fe9d 	bl	8014018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	3304      	adds	r3, #4
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fe fe98 	bl	8014018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ec:	4b2d      	ldr	r3, [pc, #180]	; (80153a4 <xTaskResumeAll+0x124>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d903      	bls.n	80152fc <xTaskResumeAll+0x7c>
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f8:	4a2a      	ldr	r2, [pc, #168]	; (80153a4 <xTaskResumeAll+0x124>)
 80152fa:	6013      	str	r3, [r2, #0]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015300:	4613      	mov	r3, r2
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	4413      	add	r3, r2
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4a27      	ldr	r2, [pc, #156]	; (80153a8 <xTaskResumeAll+0x128>)
 801530a:	441a      	add	r2, r3
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	3304      	adds	r3, #4
 8015310:	4619      	mov	r1, r3
 8015312:	4610      	mov	r0, r2
 8015314:	f7fe fe23 	bl	8013f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801531c:	4b23      	ldr	r3, [pc, #140]	; (80153ac <xTaskResumeAll+0x12c>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015322:	429a      	cmp	r2, r3
 8015324:	d302      	bcc.n	801532c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015326:	4b22      	ldr	r3, [pc, #136]	; (80153b0 <xTaskResumeAll+0x130>)
 8015328:	2201      	movs	r2, #1
 801532a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801532c:	4b1c      	ldr	r3, [pc, #112]	; (80153a0 <xTaskResumeAll+0x120>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d1cb      	bne.n	80152cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d001      	beq.n	801533e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801533a:	f000 fbfb 	bl	8015b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801533e:	4b1d      	ldr	r3, [pc, #116]	; (80153b4 <xTaskResumeAll+0x134>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d010      	beq.n	801536c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801534a:	f000 f847 	bl	80153dc <xTaskIncrementTick>
 801534e:	4603      	mov	r3, r0
 8015350:	2b00      	cmp	r3, #0
 8015352:	d002      	beq.n	801535a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015354:	4b16      	ldr	r3, [pc, #88]	; (80153b0 <xTaskResumeAll+0x130>)
 8015356:	2201      	movs	r2, #1
 8015358:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	3b01      	subs	r3, #1
 801535e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d1f1      	bne.n	801534a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015366:	4b13      	ldr	r3, [pc, #76]	; (80153b4 <xTaskResumeAll+0x134>)
 8015368:	2200      	movs	r2, #0
 801536a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801536c:	4b10      	ldr	r3, [pc, #64]	; (80153b0 <xTaskResumeAll+0x130>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d009      	beq.n	8015388 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015374:	2301      	movs	r3, #1
 8015376:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015378:	4b0f      	ldr	r3, [pc, #60]	; (80153b8 <xTaskResumeAll+0x138>)
 801537a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801537e:	601a      	str	r2, [r3, #0]
 8015380:	f3bf 8f4f 	dsb	sy
 8015384:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015388:	f001 f9b4 	bl	80166f4 <vPortExitCritical>

	return xAlreadyYielded;
 801538c:	68bb      	ldr	r3, [r7, #8]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3710      	adds	r7, #16
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	24001d28 	.word	0x24001d28
 801539c:	24001d00 	.word	0x24001d00
 80153a0:	24001cc0 	.word	0x24001cc0
 80153a4:	24001d08 	.word	0x24001d08
 80153a8:	24001830 	.word	0x24001830
 80153ac:	2400182c 	.word	0x2400182c
 80153b0:	24001d14 	.word	0x24001d14
 80153b4:	24001d10 	.word	0x24001d10
 80153b8:	e000ed04 	.word	0xe000ed04

080153bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80153bc:	b480      	push	{r7}
 80153be:	b083      	sub	sp, #12
 80153c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80153c2:	4b05      	ldr	r3, [pc, #20]	; (80153d8 <xTaskGetTickCount+0x1c>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80153c8:	687b      	ldr	r3, [r7, #4]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	370c      	adds	r7, #12
 80153ce:	46bd      	mov	sp, r7
 80153d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d4:	4770      	bx	lr
 80153d6:	bf00      	nop
 80153d8:	24001d04 	.word	0x24001d04

080153dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b086      	sub	sp, #24
 80153e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80153e2:	2300      	movs	r3, #0
 80153e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153e6:	4b53      	ldr	r3, [pc, #332]	; (8015534 <xTaskIncrementTick+0x158>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	f040 8095 	bne.w	801551a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80153f0:	4b51      	ldr	r3, [pc, #324]	; (8015538 <xTaskIncrementTick+0x15c>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	3301      	adds	r3, #1
 80153f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80153f8:	4a4f      	ldr	r2, [pc, #316]	; (8015538 <xTaskIncrementTick+0x15c>)
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d120      	bne.n	8015446 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015404:	4b4d      	ldr	r3, [pc, #308]	; (801553c <xTaskIncrementTick+0x160>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00a      	beq.n	8015424 <xTaskIncrementTick+0x48>
	__asm volatile
 801540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015412:	f383 8811 	msr	BASEPRI, r3
 8015416:	f3bf 8f6f 	isb	sy
 801541a:	f3bf 8f4f 	dsb	sy
 801541e:	603b      	str	r3, [r7, #0]
}
 8015420:	bf00      	nop
 8015422:	e7fe      	b.n	8015422 <xTaskIncrementTick+0x46>
 8015424:	4b45      	ldr	r3, [pc, #276]	; (801553c <xTaskIncrementTick+0x160>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	60fb      	str	r3, [r7, #12]
 801542a:	4b45      	ldr	r3, [pc, #276]	; (8015540 <xTaskIncrementTick+0x164>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	4a43      	ldr	r2, [pc, #268]	; (801553c <xTaskIncrementTick+0x160>)
 8015430:	6013      	str	r3, [r2, #0]
 8015432:	4a43      	ldr	r2, [pc, #268]	; (8015540 <xTaskIncrementTick+0x164>)
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6013      	str	r3, [r2, #0]
 8015438:	4b42      	ldr	r3, [pc, #264]	; (8015544 <xTaskIncrementTick+0x168>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	3301      	adds	r3, #1
 801543e:	4a41      	ldr	r2, [pc, #260]	; (8015544 <xTaskIncrementTick+0x168>)
 8015440:	6013      	str	r3, [r2, #0]
 8015442:	f000 fb77 	bl	8015b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015446:	4b40      	ldr	r3, [pc, #256]	; (8015548 <xTaskIncrementTick+0x16c>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	693a      	ldr	r2, [r7, #16]
 801544c:	429a      	cmp	r2, r3
 801544e:	d349      	bcc.n	80154e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015450:	4b3a      	ldr	r3, [pc, #232]	; (801553c <xTaskIncrementTick+0x160>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d104      	bne.n	8015464 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801545a:	4b3b      	ldr	r3, [pc, #236]	; (8015548 <xTaskIncrementTick+0x16c>)
 801545c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015460:	601a      	str	r2, [r3, #0]
					break;
 8015462:	e03f      	b.n	80154e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015464:	4b35      	ldr	r3, [pc, #212]	; (801553c <xTaskIncrementTick+0x160>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	68db      	ldr	r3, [r3, #12]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015474:	693a      	ldr	r2, [r7, #16]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	429a      	cmp	r2, r3
 801547a:	d203      	bcs.n	8015484 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801547c:	4a32      	ldr	r2, [pc, #200]	; (8015548 <xTaskIncrementTick+0x16c>)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015482:	e02f      	b.n	80154e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	3304      	adds	r3, #4
 8015488:	4618      	mov	r0, r3
 801548a:	f7fe fdc5 	bl	8014018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015492:	2b00      	cmp	r3, #0
 8015494:	d004      	beq.n	80154a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	3318      	adds	r3, #24
 801549a:	4618      	mov	r0, r3
 801549c:	f7fe fdbc 	bl	8014018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a4:	4b29      	ldr	r3, [pc, #164]	; (801554c <xTaskIncrementTick+0x170>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d903      	bls.n	80154b4 <xTaskIncrementTick+0xd8>
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b0:	4a26      	ldr	r2, [pc, #152]	; (801554c <xTaskIncrementTick+0x170>)
 80154b2:	6013      	str	r3, [r2, #0]
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154b8:	4613      	mov	r3, r2
 80154ba:	009b      	lsls	r3, r3, #2
 80154bc:	4413      	add	r3, r2
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	4a23      	ldr	r2, [pc, #140]	; (8015550 <xTaskIncrementTick+0x174>)
 80154c2:	441a      	add	r2, r3
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	3304      	adds	r3, #4
 80154c8:	4619      	mov	r1, r3
 80154ca:	4610      	mov	r0, r2
 80154cc:	f7fe fd47 	bl	8013f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154d4:	4b1f      	ldr	r3, [pc, #124]	; (8015554 <xTaskIncrementTick+0x178>)
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154da:	429a      	cmp	r2, r3
 80154dc:	d3b8      	bcc.n	8015450 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80154de:	2301      	movs	r3, #1
 80154e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154e2:	e7b5      	b.n	8015450 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80154e4:	4b1b      	ldr	r3, [pc, #108]	; (8015554 <xTaskIncrementTick+0x178>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ea:	4919      	ldr	r1, [pc, #100]	; (8015550 <xTaskIncrementTick+0x174>)
 80154ec:	4613      	mov	r3, r2
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	4413      	add	r3, r2
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	440b      	add	r3, r1
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	2b01      	cmp	r3, #1
 80154fa:	d901      	bls.n	8015500 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80154fc:	2301      	movs	r3, #1
 80154fe:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015500:	4b15      	ldr	r3, [pc, #84]	; (8015558 <xTaskIncrementTick+0x17c>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d101      	bne.n	801550c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8015508:	f7eb f86c 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801550c:	4b13      	ldr	r3, [pc, #76]	; (801555c <xTaskIncrementTick+0x180>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d009      	beq.n	8015528 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015514:	2301      	movs	r3, #1
 8015516:	617b      	str	r3, [r7, #20]
 8015518:	e006      	b.n	8015528 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801551a:	4b0f      	ldr	r3, [pc, #60]	; (8015558 <xTaskIncrementTick+0x17c>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	3301      	adds	r3, #1
 8015520:	4a0d      	ldr	r2, [pc, #52]	; (8015558 <xTaskIncrementTick+0x17c>)
 8015522:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015524:	f7eb f85e 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015528:	697b      	ldr	r3, [r7, #20]
}
 801552a:	4618      	mov	r0, r3
 801552c:	3718      	adds	r7, #24
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
 8015532:	bf00      	nop
 8015534:	24001d28 	.word	0x24001d28
 8015538:	24001d04 	.word	0x24001d04
 801553c:	24001cb8 	.word	0x24001cb8
 8015540:	24001cbc 	.word	0x24001cbc
 8015544:	24001d18 	.word	0x24001d18
 8015548:	24001d20 	.word	0x24001d20
 801554c:	24001d08 	.word	0x24001d08
 8015550:	24001830 	.word	0x24001830
 8015554:	2400182c 	.word	0x2400182c
 8015558:	24001d10 	.word	0x24001d10
 801555c:	24001d14 	.word	0x24001d14

08015560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015560:	b480      	push	{r7}
 8015562:	b085      	sub	sp, #20
 8015564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015566:	4b28      	ldr	r3, [pc, #160]	; (8015608 <vTaskSwitchContext+0xa8>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d003      	beq.n	8015576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801556e:	4b27      	ldr	r3, [pc, #156]	; (801560c <vTaskSwitchContext+0xac>)
 8015570:	2201      	movs	r2, #1
 8015572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015574:	e041      	b.n	80155fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015576:	4b25      	ldr	r3, [pc, #148]	; (801560c <vTaskSwitchContext+0xac>)
 8015578:	2200      	movs	r2, #0
 801557a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801557c:	4b24      	ldr	r3, [pc, #144]	; (8015610 <vTaskSwitchContext+0xb0>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	60fb      	str	r3, [r7, #12]
 8015582:	e010      	b.n	80155a6 <vTaskSwitchContext+0x46>
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d10a      	bne.n	80155a0 <vTaskSwitchContext+0x40>
	__asm volatile
 801558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801558e:	f383 8811 	msr	BASEPRI, r3
 8015592:	f3bf 8f6f 	isb	sy
 8015596:	f3bf 8f4f 	dsb	sy
 801559a:	607b      	str	r3, [r7, #4]
}
 801559c:	bf00      	nop
 801559e:	e7fe      	b.n	801559e <vTaskSwitchContext+0x3e>
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	3b01      	subs	r3, #1
 80155a4:	60fb      	str	r3, [r7, #12]
 80155a6:	491b      	ldr	r1, [pc, #108]	; (8015614 <vTaskSwitchContext+0xb4>)
 80155a8:	68fa      	ldr	r2, [r7, #12]
 80155aa:	4613      	mov	r3, r2
 80155ac:	009b      	lsls	r3, r3, #2
 80155ae:	4413      	add	r3, r2
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	440b      	add	r3, r1
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d0e4      	beq.n	8015584 <vTaskSwitchContext+0x24>
 80155ba:	68fa      	ldr	r2, [r7, #12]
 80155bc:	4613      	mov	r3, r2
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4413      	add	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	4a13      	ldr	r2, [pc, #76]	; (8015614 <vTaskSwitchContext+0xb4>)
 80155c6:	4413      	add	r3, r2
 80155c8:	60bb      	str	r3, [r7, #8]
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	605a      	str	r2, [r3, #4]
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	685a      	ldr	r2, [r3, #4]
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	3308      	adds	r3, #8
 80155dc:	429a      	cmp	r2, r3
 80155de:	d104      	bne.n	80155ea <vTaskSwitchContext+0x8a>
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	685b      	ldr	r3, [r3, #4]
 80155e4:	685a      	ldr	r2, [r3, #4]
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	605a      	str	r2, [r3, #4]
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	4a09      	ldr	r2, [pc, #36]	; (8015618 <vTaskSwitchContext+0xb8>)
 80155f2:	6013      	str	r3, [r2, #0]
 80155f4:	4a06      	ldr	r2, [pc, #24]	; (8015610 <vTaskSwitchContext+0xb0>)
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	6013      	str	r3, [r2, #0]
}
 80155fa:	bf00      	nop
 80155fc:	3714      	adds	r7, #20
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr
 8015606:	bf00      	nop
 8015608:	24001d28 	.word	0x24001d28
 801560c:	24001d14 	.word	0x24001d14
 8015610:	24001d08 	.word	0x24001d08
 8015614:	24001830 	.word	0x24001830
 8015618:	2400182c 	.word	0x2400182c

0801561c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d10a      	bne.n	8015642 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015630:	f383 8811 	msr	BASEPRI, r3
 8015634:	f3bf 8f6f 	isb	sy
 8015638:	f3bf 8f4f 	dsb	sy
 801563c:	60fb      	str	r3, [r7, #12]
}
 801563e:	bf00      	nop
 8015640:	e7fe      	b.n	8015640 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015642:	4b07      	ldr	r3, [pc, #28]	; (8015660 <vTaskPlaceOnEventList+0x44>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	3318      	adds	r3, #24
 8015648:	4619      	mov	r1, r3
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f7fe fcab 	bl	8013fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015650:	2101      	movs	r1, #1
 8015652:	6838      	ldr	r0, [r7, #0]
 8015654:	f000 fb32 	bl	8015cbc <prvAddCurrentTaskToDelayedList>
}
 8015658:	bf00      	nop
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}
 8015660:	2400182c 	.word	0x2400182c

08015664 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b086      	sub	sp, #24
 8015668:	af00      	add	r7, sp, #0
 801566a:	60f8      	str	r0, [r7, #12]
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d10a      	bne.n	801568c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801567a:	f383 8811 	msr	BASEPRI, r3
 801567e:	f3bf 8f6f 	isb	sy
 8015682:	f3bf 8f4f 	dsb	sy
 8015686:	617b      	str	r3, [r7, #20]
}
 8015688:	bf00      	nop
 801568a:	e7fe      	b.n	801568a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801568c:	4b11      	ldr	r3, [pc, #68]	; (80156d4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d10a      	bne.n	80156aa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015698:	f383 8811 	msr	BASEPRI, r3
 801569c:	f3bf 8f6f 	isb	sy
 80156a0:	f3bf 8f4f 	dsb	sy
 80156a4:	613b      	str	r3, [r7, #16]
}
 80156a6:	bf00      	nop
 80156a8:	e7fe      	b.n	80156a8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80156aa:	4b0b      	ldr	r3, [pc, #44]	; (80156d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	68ba      	ldr	r2, [r7, #8]
 80156b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80156b4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156b6:	4b08      	ldr	r3, [pc, #32]	; (80156d8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	3318      	adds	r3, #24
 80156bc:	4619      	mov	r1, r3
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f7fe fc4d 	bl	8013f5e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80156c4:	2101      	movs	r1, #1
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 faf8 	bl	8015cbc <prvAddCurrentTaskToDelayedList>
}
 80156cc:	bf00      	nop
 80156ce:	3718      	adds	r7, #24
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	24001d28 	.word	0x24001d28
 80156d8:	2400182c 	.word	0x2400182c

080156dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b086      	sub	sp, #24
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	60f8      	str	r0, [r7, #12]
 80156e4:	60b9      	str	r1, [r7, #8]
 80156e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d10a      	bne.n	8015704 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80156ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f2:	f383 8811 	msr	BASEPRI, r3
 80156f6:	f3bf 8f6f 	isb	sy
 80156fa:	f3bf 8f4f 	dsb	sy
 80156fe:	617b      	str	r3, [r7, #20]
}
 8015700:	bf00      	nop
 8015702:	e7fe      	b.n	8015702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015704:	4b0a      	ldr	r3, [pc, #40]	; (8015730 <vTaskPlaceOnEventListRestricted+0x54>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	3318      	adds	r3, #24
 801570a:	4619      	mov	r1, r3
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f7fe fc26 	bl	8013f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d002      	beq.n	801571e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801571c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	68b8      	ldr	r0, [r7, #8]
 8015722:	f000 facb 	bl	8015cbc <prvAddCurrentTaskToDelayedList>
	}
 8015726:	bf00      	nop
 8015728:	3718      	adds	r7, #24
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	2400182c 	.word	0x2400182c

08015734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b086      	sub	sp, #24
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	68db      	ldr	r3, [r3, #12]
 8015740:	68db      	ldr	r3, [r3, #12]
 8015742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d10a      	bne.n	8015760 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801574e:	f383 8811 	msr	BASEPRI, r3
 8015752:	f3bf 8f6f 	isb	sy
 8015756:	f3bf 8f4f 	dsb	sy
 801575a:	60fb      	str	r3, [r7, #12]
}
 801575c:	bf00      	nop
 801575e:	e7fe      	b.n	801575e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	3318      	adds	r3, #24
 8015764:	4618      	mov	r0, r3
 8015766:	f7fe fc57 	bl	8014018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801576a:	4b1e      	ldr	r3, [pc, #120]	; (80157e4 <xTaskRemoveFromEventList+0xb0>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d11d      	bne.n	80157ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	3304      	adds	r3, #4
 8015776:	4618      	mov	r0, r3
 8015778:	f7fe fc4e 	bl	8014018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015780:	4b19      	ldr	r3, [pc, #100]	; (80157e8 <xTaskRemoveFromEventList+0xb4>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	429a      	cmp	r2, r3
 8015786:	d903      	bls.n	8015790 <xTaskRemoveFromEventList+0x5c>
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801578c:	4a16      	ldr	r2, [pc, #88]	; (80157e8 <xTaskRemoveFromEventList+0xb4>)
 801578e:	6013      	str	r3, [r2, #0]
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015794:	4613      	mov	r3, r2
 8015796:	009b      	lsls	r3, r3, #2
 8015798:	4413      	add	r3, r2
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	4a13      	ldr	r2, [pc, #76]	; (80157ec <xTaskRemoveFromEventList+0xb8>)
 801579e:	441a      	add	r2, r3
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	3304      	adds	r3, #4
 80157a4:	4619      	mov	r1, r3
 80157a6:	4610      	mov	r0, r2
 80157a8:	f7fe fbd9 	bl	8013f5e <vListInsertEnd>
 80157ac:	e005      	b.n	80157ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	3318      	adds	r3, #24
 80157b2:	4619      	mov	r1, r3
 80157b4:	480e      	ldr	r0, [pc, #56]	; (80157f0 <xTaskRemoveFromEventList+0xbc>)
 80157b6:	f7fe fbd2 	bl	8013f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157be:	4b0d      	ldr	r3, [pc, #52]	; (80157f4 <xTaskRemoveFromEventList+0xc0>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d905      	bls.n	80157d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80157c8:	2301      	movs	r3, #1
 80157ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80157cc:	4b0a      	ldr	r3, [pc, #40]	; (80157f8 <xTaskRemoveFromEventList+0xc4>)
 80157ce:	2201      	movs	r2, #1
 80157d0:	601a      	str	r2, [r3, #0]
 80157d2:	e001      	b.n	80157d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80157d4:	2300      	movs	r3, #0
 80157d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80157d8:	697b      	ldr	r3, [r7, #20]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3718      	adds	r7, #24
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	24001d28 	.word	0x24001d28
 80157e8:	24001d08 	.word	0x24001d08
 80157ec:	24001830 	.word	0x24001830
 80157f0:	24001cc0 	.word	0x24001cc0
 80157f4:	2400182c 	.word	0x2400182c
 80157f8:	24001d14 	.word	0x24001d14

080157fc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b086      	sub	sp, #24
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015806:	4b29      	ldr	r3, [pc, #164]	; (80158ac <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d10a      	bne.n	8015824 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015812:	f383 8811 	msr	BASEPRI, r3
 8015816:	f3bf 8f6f 	isb	sy
 801581a:	f3bf 8f4f 	dsb	sy
 801581e:	613b      	str	r3, [r7, #16]
}
 8015820:	bf00      	nop
 8015822:	e7fe      	b.n	8015822 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d10a      	bne.n	8015850 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801583e:	f383 8811 	msr	BASEPRI, r3
 8015842:	f3bf 8f6f 	isb	sy
 8015846:	f3bf 8f4f 	dsb	sy
 801584a:	60fb      	str	r3, [r7, #12]
}
 801584c:	bf00      	nop
 801584e:	e7fe      	b.n	801584e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7fe fbe1 	bl	8014018 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	3304      	adds	r3, #4
 801585a:	4618      	mov	r0, r3
 801585c:	f7fe fbdc 	bl	8014018 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015864:	4b12      	ldr	r3, [pc, #72]	; (80158b0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	429a      	cmp	r2, r3
 801586a:	d903      	bls.n	8015874 <vTaskRemoveFromUnorderedEventList+0x78>
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015870:	4a0f      	ldr	r2, [pc, #60]	; (80158b0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015872:	6013      	str	r3, [r2, #0]
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015878:	4613      	mov	r3, r2
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	4413      	add	r3, r2
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	4a0c      	ldr	r2, [pc, #48]	; (80158b4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015882:	441a      	add	r2, r3
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	3304      	adds	r3, #4
 8015888:	4619      	mov	r1, r3
 801588a:	4610      	mov	r0, r2
 801588c:	f7fe fb67 	bl	8013f5e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015894:	4b08      	ldr	r3, [pc, #32]	; (80158b8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801589a:	429a      	cmp	r2, r3
 801589c:	d902      	bls.n	80158a4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801589e:	4b07      	ldr	r3, [pc, #28]	; (80158bc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80158a0:	2201      	movs	r2, #1
 80158a2:	601a      	str	r2, [r3, #0]
	}
}
 80158a4:	bf00      	nop
 80158a6:	3718      	adds	r7, #24
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	24001d28 	.word	0x24001d28
 80158b0:	24001d08 	.word	0x24001d08
 80158b4:	24001830 	.word	0x24001830
 80158b8:	2400182c 	.word	0x2400182c
 80158bc:	24001d14 	.word	0x24001d14

080158c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80158c8:	4b06      	ldr	r3, [pc, #24]	; (80158e4 <vTaskInternalSetTimeOutState+0x24>)
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80158d0:	4b05      	ldr	r3, [pc, #20]	; (80158e8 <vTaskInternalSetTimeOutState+0x28>)
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	605a      	str	r2, [r3, #4]
}
 80158d8:	bf00      	nop
 80158da:	370c      	adds	r7, #12
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr
 80158e4:	24001d18 	.word	0x24001d18
 80158e8:	24001d04 	.word	0x24001d04

080158ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b088      	sub	sp, #32
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d10a      	bne.n	8015912 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80158fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015900:	f383 8811 	msr	BASEPRI, r3
 8015904:	f3bf 8f6f 	isb	sy
 8015908:	f3bf 8f4f 	dsb	sy
 801590c:	613b      	str	r3, [r7, #16]
}
 801590e:	bf00      	nop
 8015910:	e7fe      	b.n	8015910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d10a      	bne.n	801592e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591c:	f383 8811 	msr	BASEPRI, r3
 8015920:	f3bf 8f6f 	isb	sy
 8015924:	f3bf 8f4f 	dsb	sy
 8015928:	60fb      	str	r3, [r7, #12]
}
 801592a:	bf00      	nop
 801592c:	e7fe      	b.n	801592c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801592e:	f000 feb1 	bl	8016694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015932:	4b1d      	ldr	r3, [pc, #116]	; (80159a8 <xTaskCheckForTimeOut+0xbc>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	685b      	ldr	r3, [r3, #4]
 801593c:	69ba      	ldr	r2, [r7, #24]
 801593e:	1ad3      	subs	r3, r2, r3
 8015940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801594a:	d102      	bne.n	8015952 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801594c:	2300      	movs	r3, #0
 801594e:	61fb      	str	r3, [r7, #28]
 8015950:	e023      	b.n	801599a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	4b15      	ldr	r3, [pc, #84]	; (80159ac <xTaskCheckForTimeOut+0xc0>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	429a      	cmp	r2, r3
 801595c:	d007      	beq.n	801596e <xTaskCheckForTimeOut+0x82>
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	69ba      	ldr	r2, [r7, #24]
 8015964:	429a      	cmp	r2, r3
 8015966:	d302      	bcc.n	801596e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015968:	2301      	movs	r3, #1
 801596a:	61fb      	str	r3, [r7, #28]
 801596c:	e015      	b.n	801599a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	697a      	ldr	r2, [r7, #20]
 8015974:	429a      	cmp	r2, r3
 8015976:	d20b      	bcs.n	8015990 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	1ad2      	subs	r2, r2, r3
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f7ff ff9b 	bl	80158c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801598a:	2300      	movs	r3, #0
 801598c:	61fb      	str	r3, [r7, #28]
 801598e:	e004      	b.n	801599a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	2200      	movs	r2, #0
 8015994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015996:	2301      	movs	r3, #1
 8015998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801599a:	f000 feab 	bl	80166f4 <vPortExitCritical>

	return xReturn;
 801599e:	69fb      	ldr	r3, [r7, #28]
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	3720      	adds	r7, #32
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}
 80159a8:	24001d04 	.word	0x24001d04
 80159ac:	24001d18 	.word	0x24001d18

080159b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80159b0:	b480      	push	{r7}
 80159b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80159b4:	4b03      	ldr	r3, [pc, #12]	; (80159c4 <vTaskMissedYield+0x14>)
 80159b6:	2201      	movs	r2, #1
 80159b8:	601a      	str	r2, [r3, #0]
}
 80159ba:	bf00      	nop
 80159bc:	46bd      	mov	sp, r7
 80159be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c2:	4770      	bx	lr
 80159c4:	24001d14 	.word	0x24001d14

080159c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80159d0:	f000 f852 	bl	8015a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80159d4:	4b06      	ldr	r3, [pc, #24]	; (80159f0 <prvIdleTask+0x28>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	2b01      	cmp	r3, #1
 80159da:	d9f9      	bls.n	80159d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80159dc:	4b05      	ldr	r3, [pc, #20]	; (80159f4 <prvIdleTask+0x2c>)
 80159de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159e2:	601a      	str	r2, [r3, #0]
 80159e4:	f3bf 8f4f 	dsb	sy
 80159e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80159ec:	e7f0      	b.n	80159d0 <prvIdleTask+0x8>
 80159ee:	bf00      	nop
 80159f0:	24001830 	.word	0x24001830
 80159f4:	e000ed04 	.word	0xe000ed04

080159f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80159fe:	2300      	movs	r3, #0
 8015a00:	607b      	str	r3, [r7, #4]
 8015a02:	e00c      	b.n	8015a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	4613      	mov	r3, r2
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	4413      	add	r3, r2
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	4a12      	ldr	r2, [pc, #72]	; (8015a58 <prvInitialiseTaskLists+0x60>)
 8015a10:	4413      	add	r3, r2
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7fe fa76 	bl	8013f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	607b      	str	r3, [r7, #4]
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2b37      	cmp	r3, #55	; 0x37
 8015a22:	d9ef      	bls.n	8015a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015a24:	480d      	ldr	r0, [pc, #52]	; (8015a5c <prvInitialiseTaskLists+0x64>)
 8015a26:	f7fe fa6d 	bl	8013f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015a2a:	480d      	ldr	r0, [pc, #52]	; (8015a60 <prvInitialiseTaskLists+0x68>)
 8015a2c:	f7fe fa6a 	bl	8013f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015a30:	480c      	ldr	r0, [pc, #48]	; (8015a64 <prvInitialiseTaskLists+0x6c>)
 8015a32:	f7fe fa67 	bl	8013f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015a36:	480c      	ldr	r0, [pc, #48]	; (8015a68 <prvInitialiseTaskLists+0x70>)
 8015a38:	f7fe fa64 	bl	8013f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015a3c:	480b      	ldr	r0, [pc, #44]	; (8015a6c <prvInitialiseTaskLists+0x74>)
 8015a3e:	f7fe fa61 	bl	8013f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015a42:	4b0b      	ldr	r3, [pc, #44]	; (8015a70 <prvInitialiseTaskLists+0x78>)
 8015a44:	4a05      	ldr	r2, [pc, #20]	; (8015a5c <prvInitialiseTaskLists+0x64>)
 8015a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015a48:	4b0a      	ldr	r3, [pc, #40]	; (8015a74 <prvInitialiseTaskLists+0x7c>)
 8015a4a:	4a05      	ldr	r2, [pc, #20]	; (8015a60 <prvInitialiseTaskLists+0x68>)
 8015a4c:	601a      	str	r2, [r3, #0]
}
 8015a4e:	bf00      	nop
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	24001830 	.word	0x24001830
 8015a5c:	24001c90 	.word	0x24001c90
 8015a60:	24001ca4 	.word	0x24001ca4
 8015a64:	24001cc0 	.word	0x24001cc0
 8015a68:	24001cd4 	.word	0x24001cd4
 8015a6c:	24001cec 	.word	0x24001cec
 8015a70:	24001cb8 	.word	0x24001cb8
 8015a74:	24001cbc 	.word	0x24001cbc

08015a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015a7e:	e019      	b.n	8015ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015a80:	f000 fe08 	bl	8016694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a84:	4b10      	ldr	r3, [pc, #64]	; (8015ac8 <prvCheckTasksWaitingTermination+0x50>)
 8015a86:	68db      	ldr	r3, [r3, #12]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	3304      	adds	r3, #4
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7fe fac1 	bl	8014018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015a96:	4b0d      	ldr	r3, [pc, #52]	; (8015acc <prvCheckTasksWaitingTermination+0x54>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	4a0b      	ldr	r2, [pc, #44]	; (8015acc <prvCheckTasksWaitingTermination+0x54>)
 8015a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015aa0:	4b0b      	ldr	r3, [pc, #44]	; (8015ad0 <prvCheckTasksWaitingTermination+0x58>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	3b01      	subs	r3, #1
 8015aa6:	4a0a      	ldr	r2, [pc, #40]	; (8015ad0 <prvCheckTasksWaitingTermination+0x58>)
 8015aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015aaa:	f000 fe23 	bl	80166f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f000 f810 	bl	8015ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ab4:	4b06      	ldr	r3, [pc, #24]	; (8015ad0 <prvCheckTasksWaitingTermination+0x58>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1e1      	bne.n	8015a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015abc:	bf00      	nop
 8015abe:	bf00      	nop
 8015ac0:	3708      	adds	r7, #8
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	24001cd4 	.word	0x24001cd4
 8015acc:	24001d00 	.word	0x24001d00
 8015ad0:	24001ce8 	.word	0x24001ce8

08015ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d108      	bne.n	8015af8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aea:	4618      	mov	r0, r3
 8015aec:	f000 ffc0 	bl	8016a70 <vPortFree>
				vPortFree( pxTCB );
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f000 ffbd 	bl	8016a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015af6:	e018      	b.n	8015b2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015afe:	2b01      	cmp	r3, #1
 8015b00:	d103      	bne.n	8015b0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 ffb4 	bl	8016a70 <vPortFree>
	}
 8015b08:	e00f      	b.n	8015b2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d00a      	beq.n	8015b2a <prvDeleteTCB+0x56>
	__asm volatile
 8015b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b18:	f383 8811 	msr	BASEPRI, r3
 8015b1c:	f3bf 8f6f 	isb	sy
 8015b20:	f3bf 8f4f 	dsb	sy
 8015b24:	60fb      	str	r3, [r7, #12]
}
 8015b26:	bf00      	nop
 8015b28:	e7fe      	b.n	8015b28 <prvDeleteTCB+0x54>
	}
 8015b2a:	bf00      	nop
 8015b2c:	3710      	adds	r7, #16
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
	...

08015b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015b34:	b480      	push	{r7}
 8015b36:	b083      	sub	sp, #12
 8015b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b3a:	4b0c      	ldr	r3, [pc, #48]	; (8015b6c <prvResetNextTaskUnblockTime+0x38>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d104      	bne.n	8015b4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015b44:	4b0a      	ldr	r3, [pc, #40]	; (8015b70 <prvResetNextTaskUnblockTime+0x3c>)
 8015b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015b4c:	e008      	b.n	8015b60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b4e:	4b07      	ldr	r3, [pc, #28]	; (8015b6c <prvResetNextTaskUnblockTime+0x38>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	68db      	ldr	r3, [r3, #12]
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	4a04      	ldr	r2, [pc, #16]	; (8015b70 <prvResetNextTaskUnblockTime+0x3c>)
 8015b5e:	6013      	str	r3, [r2, #0]
}
 8015b60:	bf00      	nop
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr
 8015b6c:	24001cb8 	.word	0x24001cb8
 8015b70:	24001d20 	.word	0x24001d20

08015b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015b74:	b480      	push	{r7}
 8015b76:	b083      	sub	sp, #12
 8015b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015b7a:	4b0b      	ldr	r3, [pc, #44]	; (8015ba8 <xTaskGetSchedulerState+0x34>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d102      	bne.n	8015b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015b82:	2301      	movs	r3, #1
 8015b84:	607b      	str	r3, [r7, #4]
 8015b86:	e008      	b.n	8015b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b88:	4b08      	ldr	r3, [pc, #32]	; (8015bac <xTaskGetSchedulerState+0x38>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d102      	bne.n	8015b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015b90:	2302      	movs	r3, #2
 8015b92:	607b      	str	r3, [r7, #4]
 8015b94:	e001      	b.n	8015b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015b96:	2300      	movs	r3, #0
 8015b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015b9a:	687b      	ldr	r3, [r7, #4]
	}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	370c      	adds	r7, #12
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr
 8015ba8:	24001d0c 	.word	0x24001d0c
 8015bac:	24001d28 	.word	0x24001d28

08015bb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b086      	sub	sp, #24
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d056      	beq.n	8015c74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015bc6:	4b2e      	ldr	r3, [pc, #184]	; (8015c80 <xTaskPriorityDisinherit+0xd0>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	693a      	ldr	r2, [r7, #16]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d00a      	beq.n	8015be6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd4:	f383 8811 	msr	BASEPRI, r3
 8015bd8:	f3bf 8f6f 	isb	sy
 8015bdc:	f3bf 8f4f 	dsb	sy
 8015be0:	60fb      	str	r3, [r7, #12]
}
 8015be2:	bf00      	nop
 8015be4:	e7fe      	b.n	8015be4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d10a      	bne.n	8015c04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	60bb      	str	r3, [r7, #8]
}
 8015c00:	bf00      	nop
 8015c02:	e7fe      	b.n	8015c02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c08:	1e5a      	subs	r2, r3, #1
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d02c      	beq.n	8015c74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d128      	bne.n	8015c74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	3304      	adds	r3, #4
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7fe f9f6 	bl	8014018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c44:	4b0f      	ldr	r3, [pc, #60]	; (8015c84 <xTaskPriorityDisinherit+0xd4>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d903      	bls.n	8015c54 <xTaskPriorityDisinherit+0xa4>
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c50:	4a0c      	ldr	r2, [pc, #48]	; (8015c84 <xTaskPriorityDisinherit+0xd4>)
 8015c52:	6013      	str	r3, [r2, #0]
 8015c54:	693b      	ldr	r3, [r7, #16]
 8015c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c58:	4613      	mov	r3, r2
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	4413      	add	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4a09      	ldr	r2, [pc, #36]	; (8015c88 <xTaskPriorityDisinherit+0xd8>)
 8015c62:	441a      	add	r2, r3
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	3304      	adds	r3, #4
 8015c68:	4619      	mov	r1, r3
 8015c6a:	4610      	mov	r0, r2
 8015c6c:	f7fe f977 	bl	8013f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015c70:	2301      	movs	r3, #1
 8015c72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015c74:	697b      	ldr	r3, [r7, #20]
	}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3718      	adds	r7, #24
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	2400182c 	.word	0x2400182c
 8015c84:	24001d08 	.word	0x24001d08
 8015c88:	24001830 	.word	0x24001830

08015c8c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015c92:	4b09      	ldr	r3, [pc, #36]	; (8015cb8 <uxTaskResetEventItemValue+0x2c>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	699b      	ldr	r3, [r3, #24]
 8015c98:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c9a:	4b07      	ldr	r3, [pc, #28]	; (8015cb8 <uxTaskResetEventItemValue+0x2c>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca0:	4b05      	ldr	r3, [pc, #20]	; (8015cb8 <uxTaskResetEventItemValue+0x2c>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015ca8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015caa:	687b      	ldr	r3, [r7, #4]
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	370c      	adds	r7, #12
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr
 8015cb8:	2400182c 	.word	0x2400182c

08015cbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b084      	sub	sp, #16
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015cc6:	4b21      	ldr	r3, [pc, #132]	; (8015d4c <prvAddCurrentTaskToDelayedList+0x90>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ccc:	4b20      	ldr	r3, [pc, #128]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	3304      	adds	r3, #4
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7fe f9a0 	bl	8014018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cde:	d10a      	bne.n	8015cf6 <prvAddCurrentTaskToDelayedList+0x3a>
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d007      	beq.n	8015cf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015ce6:	4b1a      	ldr	r3, [pc, #104]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	3304      	adds	r3, #4
 8015cec:	4619      	mov	r1, r3
 8015cee:	4819      	ldr	r0, [pc, #100]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x98>)
 8015cf0:	f7fe f935 	bl	8013f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015cf4:	e026      	b.n	8015d44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	4413      	add	r3, r2
 8015cfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015cfe:	4b14      	ldr	r3, [pc, #80]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	68ba      	ldr	r2, [r7, #8]
 8015d04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015d06:	68ba      	ldr	r2, [r7, #8]
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d209      	bcs.n	8015d22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d0e:	4b12      	ldr	r3, [pc, #72]	; (8015d58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	4b0f      	ldr	r3, [pc, #60]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	3304      	adds	r3, #4
 8015d18:	4619      	mov	r1, r3
 8015d1a:	4610      	mov	r0, r2
 8015d1c:	f7fe f943 	bl	8013fa6 <vListInsert>
}
 8015d20:	e010      	b.n	8015d44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d22:	4b0e      	ldr	r3, [pc, #56]	; (8015d5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d24:	681a      	ldr	r2, [r3, #0]
 8015d26:	4b0a      	ldr	r3, [pc, #40]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	3304      	adds	r3, #4
 8015d2c:	4619      	mov	r1, r3
 8015d2e:	4610      	mov	r0, r2
 8015d30:	f7fe f939 	bl	8013fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d34:	4b0a      	ldr	r3, [pc, #40]	; (8015d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d202      	bcs.n	8015d44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d3e:	4a08      	ldr	r2, [pc, #32]	; (8015d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	6013      	str	r3, [r2, #0]
}
 8015d44:	bf00      	nop
 8015d46:	3710      	adds	r7, #16
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	bd80      	pop	{r7, pc}
 8015d4c:	24001d04 	.word	0x24001d04
 8015d50:	2400182c 	.word	0x2400182c
 8015d54:	24001cec 	.word	0x24001cec
 8015d58:	24001cbc 	.word	0x24001cbc
 8015d5c:	24001cb8 	.word	0x24001cb8
 8015d60:	24001d20 	.word	0x24001d20

08015d64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b08a      	sub	sp, #40	; 0x28
 8015d68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015d6e:	f000 fb07 	bl	8016380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015d72:	4b1c      	ldr	r3, [pc, #112]	; (8015de4 <xTimerCreateTimerTask+0x80>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d021      	beq.n	8015dbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015d82:	1d3a      	adds	r2, r7, #4
 8015d84:	f107 0108 	add.w	r1, r7, #8
 8015d88:	f107 030c 	add.w	r3, r7, #12
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7fd fe33 	bl	80139f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015d92:	6879      	ldr	r1, [r7, #4]
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	9202      	str	r2, [sp, #8]
 8015d9a:	9301      	str	r3, [sp, #4]
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	9300      	str	r3, [sp, #0]
 8015da0:	2300      	movs	r3, #0
 8015da2:	460a      	mov	r2, r1
 8015da4:	4910      	ldr	r1, [pc, #64]	; (8015de8 <xTimerCreateTimerTask+0x84>)
 8015da6:	4811      	ldr	r0, [pc, #68]	; (8015dec <xTimerCreateTimerTask+0x88>)
 8015da8:	f7fe ff06 	bl	8014bb8 <xTaskCreateStatic>
 8015dac:	4603      	mov	r3, r0
 8015dae:	4a10      	ldr	r2, [pc, #64]	; (8015df0 <xTimerCreateTimerTask+0x8c>)
 8015db0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015db2:	4b0f      	ldr	r3, [pc, #60]	; (8015df0 <xTimerCreateTimerTask+0x8c>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d001      	beq.n	8015dbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015dba:	2301      	movs	r3, #1
 8015dbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d10a      	bne.n	8015dda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc8:	f383 8811 	msr	BASEPRI, r3
 8015dcc:	f3bf 8f6f 	isb	sy
 8015dd0:	f3bf 8f4f 	dsb	sy
 8015dd4:	613b      	str	r3, [r7, #16]
}
 8015dd6:	bf00      	nop
 8015dd8:	e7fe      	b.n	8015dd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015dda:	697b      	ldr	r3, [r7, #20]
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3718      	adds	r7, #24
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}
 8015de4:	24001d5c 	.word	0x24001d5c
 8015de8:	080179dc 	.word	0x080179dc
 8015dec:	08015f29 	.word	0x08015f29
 8015df0:	24001d60 	.word	0x24001d60

08015df4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b08a      	sub	sp, #40	; 0x28
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	60f8      	str	r0, [r7, #12]
 8015dfc:	60b9      	str	r1, [r7, #8]
 8015dfe:	607a      	str	r2, [r7, #4]
 8015e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015e02:	2300      	movs	r3, #0
 8015e04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d10a      	bne.n	8015e22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e10:	f383 8811 	msr	BASEPRI, r3
 8015e14:	f3bf 8f6f 	isb	sy
 8015e18:	f3bf 8f4f 	dsb	sy
 8015e1c:	623b      	str	r3, [r7, #32]
}
 8015e1e:	bf00      	nop
 8015e20:	e7fe      	b.n	8015e20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015e22:	4b1a      	ldr	r3, [pc, #104]	; (8015e8c <xTimerGenericCommand+0x98>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d02a      	beq.n	8015e80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	2b05      	cmp	r3, #5
 8015e3a:	dc18      	bgt.n	8015e6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015e3c:	f7ff fe9a 	bl	8015b74 <xTaskGetSchedulerState>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b02      	cmp	r3, #2
 8015e44:	d109      	bne.n	8015e5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015e46:	4b11      	ldr	r3, [pc, #68]	; (8015e8c <xTimerGenericCommand+0x98>)
 8015e48:	6818      	ldr	r0, [r3, #0]
 8015e4a:	f107 0110 	add.w	r1, r7, #16
 8015e4e:	2300      	movs	r3, #0
 8015e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e52:	f7fe fa49 	bl	80142e8 <xQueueGenericSend>
 8015e56:	6278      	str	r0, [r7, #36]	; 0x24
 8015e58:	e012      	b.n	8015e80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015e5a:	4b0c      	ldr	r3, [pc, #48]	; (8015e8c <xTimerGenericCommand+0x98>)
 8015e5c:	6818      	ldr	r0, [r3, #0]
 8015e5e:	f107 0110 	add.w	r1, r7, #16
 8015e62:	2300      	movs	r3, #0
 8015e64:	2200      	movs	r2, #0
 8015e66:	f7fe fa3f 	bl	80142e8 <xQueueGenericSend>
 8015e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e6c:	e008      	b.n	8015e80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015e6e:	4b07      	ldr	r3, [pc, #28]	; (8015e8c <xTimerGenericCommand+0x98>)
 8015e70:	6818      	ldr	r0, [r3, #0]
 8015e72:	f107 0110 	add.w	r1, r7, #16
 8015e76:	2300      	movs	r3, #0
 8015e78:	683a      	ldr	r2, [r7, #0]
 8015e7a:	f7fe fb33 	bl	80144e4 <xQueueGenericSendFromISR>
 8015e7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3728      	adds	r7, #40	; 0x28
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
 8015e8a:	bf00      	nop
 8015e8c:	24001d5c 	.word	0x24001d5c

08015e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b088      	sub	sp, #32
 8015e94:	af02      	add	r7, sp, #8
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e9a:	4b22      	ldr	r3, [pc, #136]	; (8015f24 <prvProcessExpiredTimer+0x94>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	68db      	ldr	r3, [r3, #12]
 8015ea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	3304      	adds	r3, #4
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7fe f8b5 	bl	8014018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eb4:	f003 0304 	and.w	r3, r3, #4
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d022      	beq.n	8015f02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	699a      	ldr	r2, [r3, #24]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	18d1      	adds	r1, r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	683a      	ldr	r2, [r7, #0]
 8015ec8:	6978      	ldr	r0, [r7, #20]
 8015eca:	f000 f8d1 	bl	8016070 <prvInsertTimerInActiveList>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d01f      	beq.n	8015f14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	9300      	str	r3, [sp, #0]
 8015ed8:	2300      	movs	r3, #0
 8015eda:	687a      	ldr	r2, [r7, #4]
 8015edc:	2100      	movs	r1, #0
 8015ede:	6978      	ldr	r0, [r7, #20]
 8015ee0:	f7ff ff88 	bl	8015df4 <xTimerGenericCommand>
 8015ee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d113      	bne.n	8015f14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef0:	f383 8811 	msr	BASEPRI, r3
 8015ef4:	f3bf 8f6f 	isb	sy
 8015ef8:	f3bf 8f4f 	dsb	sy
 8015efc:	60fb      	str	r3, [r7, #12]
}
 8015efe:	bf00      	nop
 8015f00:	e7fe      	b.n	8015f00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f02:	697b      	ldr	r3, [r7, #20]
 8015f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f08:	f023 0301 	bic.w	r3, r3, #1
 8015f0c:	b2da      	uxtb	r2, r3
 8015f0e:	697b      	ldr	r3, [r7, #20]
 8015f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	6a1b      	ldr	r3, [r3, #32]
 8015f18:	6978      	ldr	r0, [r7, #20]
 8015f1a:	4798      	blx	r3
}
 8015f1c:	bf00      	nop
 8015f1e:	3718      	adds	r7, #24
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	24001d54 	.word	0x24001d54

08015f28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f30:	f107 0308 	add.w	r3, r7, #8
 8015f34:	4618      	mov	r0, r3
 8015f36:	f000 f857 	bl	8015fe8 <prvGetNextExpireTime>
 8015f3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	68f8      	ldr	r0, [r7, #12]
 8015f42:	f000 f803 	bl	8015f4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015f46:	f000 f8d5 	bl	80160f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f4a:	e7f1      	b.n	8015f30 <prvTimerTask+0x8>

08015f4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b084      	sub	sp, #16
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
 8015f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015f56:	f7ff f985 	bl	8015264 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f5a:	f107 0308 	add.w	r3, r7, #8
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f000 f866 	bl	8016030 <prvSampleTimeNow>
 8015f64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d130      	bne.n	8015fce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d10a      	bne.n	8015f88 <prvProcessTimerOrBlockTask+0x3c>
 8015f72:	687a      	ldr	r2, [r7, #4]
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d806      	bhi.n	8015f88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015f7a:	f7ff f981 	bl	8015280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015f7e:	68f9      	ldr	r1, [r7, #12]
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f7ff ff85 	bl	8015e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015f86:	e024      	b.n	8015fd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d008      	beq.n	8015fa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015f8e:	4b13      	ldr	r3, [pc, #76]	; (8015fdc <prvProcessTimerOrBlockTask+0x90>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d101      	bne.n	8015f9c <prvProcessTimerOrBlockTask+0x50>
 8015f98:	2301      	movs	r3, #1
 8015f9a:	e000      	b.n	8015f9e <prvProcessTimerOrBlockTask+0x52>
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015fa0:	4b0f      	ldr	r3, [pc, #60]	; (8015fe0 <prvProcessTimerOrBlockTask+0x94>)
 8015fa2:	6818      	ldr	r0, [r3, #0]
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	1ad3      	subs	r3, r2, r3
 8015faa:	683a      	ldr	r2, [r7, #0]
 8015fac:	4619      	mov	r1, r3
 8015fae:	f7fe fdcf 	bl	8014b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015fb2:	f7ff f965 	bl	8015280 <xTaskResumeAll>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10a      	bne.n	8015fd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015fbc:	4b09      	ldr	r3, [pc, #36]	; (8015fe4 <prvProcessTimerOrBlockTask+0x98>)
 8015fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fc2:	601a      	str	r2, [r3, #0]
 8015fc4:	f3bf 8f4f 	dsb	sy
 8015fc8:	f3bf 8f6f 	isb	sy
}
 8015fcc:	e001      	b.n	8015fd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015fce:	f7ff f957 	bl	8015280 <xTaskResumeAll>
}
 8015fd2:	bf00      	nop
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	24001d58 	.word	0x24001d58
 8015fe0:	24001d5c 	.word	0x24001d5c
 8015fe4:	e000ed04 	.word	0xe000ed04

08015fe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015ff0:	4b0e      	ldr	r3, [pc, #56]	; (801602c <prvGetNextExpireTime+0x44>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d101      	bne.n	8015ffe <prvGetNextExpireTime+0x16>
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	e000      	b.n	8016000 <prvGetNextExpireTime+0x18>
 8015ffe:	2200      	movs	r2, #0
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d105      	bne.n	8016018 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801600c:	4b07      	ldr	r3, [pc, #28]	; (801602c <prvGetNextExpireTime+0x44>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	68db      	ldr	r3, [r3, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	60fb      	str	r3, [r7, #12]
 8016016:	e001      	b.n	801601c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016018:	2300      	movs	r3, #0
 801601a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801601c:	68fb      	ldr	r3, [r7, #12]
}
 801601e:	4618      	mov	r0, r3
 8016020:	3714      	adds	r7, #20
 8016022:	46bd      	mov	sp, r7
 8016024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016028:	4770      	bx	lr
 801602a:	bf00      	nop
 801602c:	24001d54 	.word	0x24001d54

08016030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016038:	f7ff f9c0 	bl	80153bc <xTaskGetTickCount>
 801603c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801603e:	4b0b      	ldr	r3, [pc, #44]	; (801606c <prvSampleTimeNow+0x3c>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	68fa      	ldr	r2, [r7, #12]
 8016044:	429a      	cmp	r2, r3
 8016046:	d205      	bcs.n	8016054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016048:	f000 f936 	bl	80162b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2201      	movs	r2, #1
 8016050:	601a      	str	r2, [r3, #0]
 8016052:	e002      	b.n	801605a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2200      	movs	r2, #0
 8016058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801605a:	4a04      	ldr	r2, [pc, #16]	; (801606c <prvSampleTimeNow+0x3c>)
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016060:	68fb      	ldr	r3, [r7, #12]
}
 8016062:	4618      	mov	r0, r3
 8016064:	3710      	adds	r7, #16
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}
 801606a:	bf00      	nop
 801606c:	24001d64 	.word	0x24001d64

08016070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b086      	sub	sp, #24
 8016074:	af00      	add	r7, sp, #0
 8016076:	60f8      	str	r0, [r7, #12]
 8016078:	60b9      	str	r1, [r7, #8]
 801607a:	607a      	str	r2, [r7, #4]
 801607c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801607e:	2300      	movs	r3, #0
 8016080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	68ba      	ldr	r2, [r7, #8]
 8016086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	68fa      	ldr	r2, [r7, #12]
 801608c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801608e:	68ba      	ldr	r2, [r7, #8]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	429a      	cmp	r2, r3
 8016094:	d812      	bhi.n	80160bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016096:	687a      	ldr	r2, [r7, #4]
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	1ad2      	subs	r2, r2, r3
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	699b      	ldr	r3, [r3, #24]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d302      	bcc.n	80160aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80160a4:	2301      	movs	r3, #1
 80160a6:	617b      	str	r3, [r7, #20]
 80160a8:	e01b      	b.n	80160e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80160aa:	4b10      	ldr	r3, [pc, #64]	; (80160ec <prvInsertTimerInActiveList+0x7c>)
 80160ac:	681a      	ldr	r2, [r3, #0]
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	3304      	adds	r3, #4
 80160b2:	4619      	mov	r1, r3
 80160b4:	4610      	mov	r0, r2
 80160b6:	f7fd ff76 	bl	8013fa6 <vListInsert>
 80160ba:	e012      	b.n	80160e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80160bc:	687a      	ldr	r2, [r7, #4]
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d206      	bcs.n	80160d2 <prvInsertTimerInActiveList+0x62>
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d302      	bcc.n	80160d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80160cc:	2301      	movs	r3, #1
 80160ce:	617b      	str	r3, [r7, #20]
 80160d0:	e007      	b.n	80160e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80160d2:	4b07      	ldr	r3, [pc, #28]	; (80160f0 <prvInsertTimerInActiveList+0x80>)
 80160d4:	681a      	ldr	r2, [r3, #0]
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	3304      	adds	r3, #4
 80160da:	4619      	mov	r1, r3
 80160dc:	4610      	mov	r0, r2
 80160de:	f7fd ff62 	bl	8013fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80160e2:	697b      	ldr	r3, [r7, #20]
}
 80160e4:	4618      	mov	r0, r3
 80160e6:	3718      	adds	r7, #24
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	24001d58 	.word	0x24001d58
 80160f0:	24001d54 	.word	0x24001d54

080160f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b08e      	sub	sp, #56	; 0x38
 80160f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160fa:	e0ca      	b.n	8016292 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	da18      	bge.n	8016134 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016102:	1d3b      	adds	r3, r7, #4
 8016104:	3304      	adds	r3, #4
 8016106:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610a:	2b00      	cmp	r3, #0
 801610c:	d10a      	bne.n	8016124 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016112:	f383 8811 	msr	BASEPRI, r3
 8016116:	f3bf 8f6f 	isb	sy
 801611a:	f3bf 8f4f 	dsb	sy
 801611e:	61fb      	str	r3, [r7, #28]
}
 8016120:	bf00      	nop
 8016122:	e7fe      	b.n	8016122 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801612a:	6850      	ldr	r0, [r2, #4]
 801612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801612e:	6892      	ldr	r2, [r2, #8]
 8016130:	4611      	mov	r1, r2
 8016132:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2b00      	cmp	r3, #0
 8016138:	f2c0 80aa 	blt.w	8016290 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016142:	695b      	ldr	r3, [r3, #20]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d004      	beq.n	8016152 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801614a:	3304      	adds	r3, #4
 801614c:	4618      	mov	r0, r3
 801614e:	f7fd ff63 	bl	8014018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016152:	463b      	mov	r3, r7
 8016154:	4618      	mov	r0, r3
 8016156:	f7ff ff6b 	bl	8016030 <prvSampleTimeNow>
 801615a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2b09      	cmp	r3, #9
 8016160:	f200 8097 	bhi.w	8016292 <prvProcessReceivedCommands+0x19e>
 8016164:	a201      	add	r2, pc, #4	; (adr r2, 801616c <prvProcessReceivedCommands+0x78>)
 8016166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801616a:	bf00      	nop
 801616c:	08016195 	.word	0x08016195
 8016170:	08016195 	.word	0x08016195
 8016174:	08016195 	.word	0x08016195
 8016178:	08016209 	.word	0x08016209
 801617c:	0801621d 	.word	0x0801621d
 8016180:	08016267 	.word	0x08016267
 8016184:	08016195 	.word	0x08016195
 8016188:	08016195 	.word	0x08016195
 801618c:	08016209 	.word	0x08016209
 8016190:	0801621d 	.word	0x0801621d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801619a:	f043 0301 	orr.w	r3, r3, #1
 801619e:	b2da      	uxtb	r2, r3
 80161a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161a6:	68ba      	ldr	r2, [r7, #8]
 80161a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161aa:	699b      	ldr	r3, [r3, #24]
 80161ac:	18d1      	adds	r1, r2, r3
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161b4:	f7ff ff5c 	bl	8016070 <prvInsertTimerInActiveList>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d069      	beq.n	8016292 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80161be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c0:	6a1b      	ldr	r3, [r3, #32]
 80161c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161cc:	f003 0304 	and.w	r3, r3, #4
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d05e      	beq.n	8016292 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80161d4:	68ba      	ldr	r2, [r7, #8]
 80161d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161d8:	699b      	ldr	r3, [r3, #24]
 80161da:	441a      	add	r2, r3
 80161dc:	2300      	movs	r3, #0
 80161de:	9300      	str	r3, [sp, #0]
 80161e0:	2300      	movs	r3, #0
 80161e2:	2100      	movs	r1, #0
 80161e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161e6:	f7ff fe05 	bl	8015df4 <xTimerGenericCommand>
 80161ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80161ec:	6a3b      	ldr	r3, [r7, #32]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d14f      	bne.n	8016292 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80161f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161f6:	f383 8811 	msr	BASEPRI, r3
 80161fa:	f3bf 8f6f 	isb	sy
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	61bb      	str	r3, [r7, #24]
}
 8016204:	bf00      	nop
 8016206:	e7fe      	b.n	8016206 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801620e:	f023 0301 	bic.w	r3, r3, #1
 8016212:	b2da      	uxtb	r2, r3
 8016214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801621a:	e03a      	b.n	8016292 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016222:	f043 0301 	orr.w	r3, r3, #1
 8016226:	b2da      	uxtb	r2, r3
 8016228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801622e:	68ba      	ldr	r2, [r7, #8]
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016236:	699b      	ldr	r3, [r3, #24]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d10a      	bne.n	8016252 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016240:	f383 8811 	msr	BASEPRI, r3
 8016244:	f3bf 8f6f 	isb	sy
 8016248:	f3bf 8f4f 	dsb	sy
 801624c:	617b      	str	r3, [r7, #20]
}
 801624e:	bf00      	nop
 8016250:	e7fe      	b.n	8016250 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016254:	699a      	ldr	r2, [r3, #24]
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	18d1      	adds	r1, r2, r3
 801625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801625e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016260:	f7ff ff06 	bl	8016070 <prvInsertTimerInActiveList>
					break;
 8016264:	e015      	b.n	8016292 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801626c:	f003 0302 	and.w	r3, r3, #2
 8016270:	2b00      	cmp	r3, #0
 8016272:	d103      	bne.n	801627c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016276:	f000 fbfb 	bl	8016a70 <vPortFree>
 801627a:	e00a      	b.n	8016292 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801627e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016282:	f023 0301 	bic.w	r3, r3, #1
 8016286:	b2da      	uxtb	r2, r3
 8016288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801628e:	e000      	b.n	8016292 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016290:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016292:	4b08      	ldr	r3, [pc, #32]	; (80162b4 <prvProcessReceivedCommands+0x1c0>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	1d39      	adds	r1, r7, #4
 8016298:	2200      	movs	r2, #0
 801629a:	4618      	mov	r0, r3
 801629c:	f7fe f9be 	bl	801461c <xQueueReceive>
 80162a0:	4603      	mov	r3, r0
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	f47f af2a 	bne.w	80160fc <prvProcessReceivedCommands+0x8>
	}
}
 80162a8:	bf00      	nop
 80162aa:	bf00      	nop
 80162ac:	3730      	adds	r7, #48	; 0x30
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
 80162b2:	bf00      	nop
 80162b4:	24001d5c 	.word	0x24001d5c

080162b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b088      	sub	sp, #32
 80162bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80162be:	e048      	b.n	8016352 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162c0:	4b2d      	ldr	r3, [pc, #180]	; (8016378 <prvSwitchTimerLists+0xc0>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ca:	4b2b      	ldr	r3, [pc, #172]	; (8016378 <prvSwitchTimerLists+0xc0>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	3304      	adds	r3, #4
 80162d8:	4618      	mov	r0, r3
 80162da:	f7fd fe9d 	bl	8014018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	6a1b      	ldr	r3, [r3, #32]
 80162e2:	68f8      	ldr	r0, [r7, #12]
 80162e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162ec:	f003 0304 	and.w	r3, r3, #4
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d02e      	beq.n	8016352 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	699b      	ldr	r3, [r3, #24]
 80162f8:	693a      	ldr	r2, [r7, #16]
 80162fa:	4413      	add	r3, r2
 80162fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80162fe:	68ba      	ldr	r2, [r7, #8]
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	429a      	cmp	r2, r3
 8016304:	d90e      	bls.n	8016324 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	68ba      	ldr	r2, [r7, #8]
 801630a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	68fa      	ldr	r2, [r7, #12]
 8016310:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016312:	4b19      	ldr	r3, [pc, #100]	; (8016378 <prvSwitchTimerLists+0xc0>)
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	3304      	adds	r3, #4
 801631a:	4619      	mov	r1, r3
 801631c:	4610      	mov	r0, r2
 801631e:	f7fd fe42 	bl	8013fa6 <vListInsert>
 8016322:	e016      	b.n	8016352 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016324:	2300      	movs	r3, #0
 8016326:	9300      	str	r3, [sp, #0]
 8016328:	2300      	movs	r3, #0
 801632a:	693a      	ldr	r2, [r7, #16]
 801632c:	2100      	movs	r1, #0
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	f7ff fd60 	bl	8015df4 <xTimerGenericCommand>
 8016334:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d10a      	bne.n	8016352 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016340:	f383 8811 	msr	BASEPRI, r3
 8016344:	f3bf 8f6f 	isb	sy
 8016348:	f3bf 8f4f 	dsb	sy
 801634c:	603b      	str	r3, [r7, #0]
}
 801634e:	bf00      	nop
 8016350:	e7fe      	b.n	8016350 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016352:	4b09      	ldr	r3, [pc, #36]	; (8016378 <prvSwitchTimerLists+0xc0>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d1b1      	bne.n	80162c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801635c:	4b06      	ldr	r3, [pc, #24]	; (8016378 <prvSwitchTimerLists+0xc0>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016362:	4b06      	ldr	r3, [pc, #24]	; (801637c <prvSwitchTimerLists+0xc4>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a04      	ldr	r2, [pc, #16]	; (8016378 <prvSwitchTimerLists+0xc0>)
 8016368:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801636a:	4a04      	ldr	r2, [pc, #16]	; (801637c <prvSwitchTimerLists+0xc4>)
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	6013      	str	r3, [r2, #0]
}
 8016370:	bf00      	nop
 8016372:	3718      	adds	r7, #24
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	24001d54 	.word	0x24001d54
 801637c:	24001d58 	.word	0x24001d58

08016380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016386:	f000 f985 	bl	8016694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801638a:	4b15      	ldr	r3, [pc, #84]	; (80163e0 <prvCheckForValidListAndQueue+0x60>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d120      	bne.n	80163d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016392:	4814      	ldr	r0, [pc, #80]	; (80163e4 <prvCheckForValidListAndQueue+0x64>)
 8016394:	f7fd fdb6 	bl	8013f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016398:	4813      	ldr	r0, [pc, #76]	; (80163e8 <prvCheckForValidListAndQueue+0x68>)
 801639a:	f7fd fdb3 	bl	8013f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801639e:	4b13      	ldr	r3, [pc, #76]	; (80163ec <prvCheckForValidListAndQueue+0x6c>)
 80163a0:	4a10      	ldr	r2, [pc, #64]	; (80163e4 <prvCheckForValidListAndQueue+0x64>)
 80163a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80163a4:	4b12      	ldr	r3, [pc, #72]	; (80163f0 <prvCheckForValidListAndQueue+0x70>)
 80163a6:	4a10      	ldr	r2, [pc, #64]	; (80163e8 <prvCheckForValidListAndQueue+0x68>)
 80163a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80163aa:	2300      	movs	r3, #0
 80163ac:	9300      	str	r3, [sp, #0]
 80163ae:	4b11      	ldr	r3, [pc, #68]	; (80163f4 <prvCheckForValidListAndQueue+0x74>)
 80163b0:	4a11      	ldr	r2, [pc, #68]	; (80163f8 <prvCheckForValidListAndQueue+0x78>)
 80163b2:	2110      	movs	r1, #16
 80163b4:	200a      	movs	r0, #10
 80163b6:	f7fd fec1 	bl	801413c <xQueueGenericCreateStatic>
 80163ba:	4603      	mov	r3, r0
 80163bc:	4a08      	ldr	r2, [pc, #32]	; (80163e0 <prvCheckForValidListAndQueue+0x60>)
 80163be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80163c0:	4b07      	ldr	r3, [pc, #28]	; (80163e0 <prvCheckForValidListAndQueue+0x60>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d005      	beq.n	80163d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80163c8:	4b05      	ldr	r3, [pc, #20]	; (80163e0 <prvCheckForValidListAndQueue+0x60>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	490b      	ldr	r1, [pc, #44]	; (80163fc <prvCheckForValidListAndQueue+0x7c>)
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7fe fb94 	bl	8014afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163d4:	f000 f98e 	bl	80166f4 <vPortExitCritical>
}
 80163d8:	bf00      	nop
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	24001d5c 	.word	0x24001d5c
 80163e4:	24001d2c 	.word	0x24001d2c
 80163e8:	24001d40 	.word	0x24001d40
 80163ec:	24001d54 	.word	0x24001d54
 80163f0:	24001d58 	.word	0x24001d58
 80163f4:	24001e08 	.word	0x24001e08
 80163f8:	24001d68 	.word	0x24001d68
 80163fc:	080179e4 	.word	0x080179e4

08016400 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016400:	b580      	push	{r7, lr}
 8016402:	b08a      	sub	sp, #40	; 0x28
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	607a      	str	r2, [r7, #4]
 801640c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801640e:	f06f 0301 	mvn.w	r3, #1
 8016412:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016420:	4b06      	ldr	r3, [pc, #24]	; (801643c <xTimerPendFunctionCallFromISR+0x3c>)
 8016422:	6818      	ldr	r0, [r3, #0]
 8016424:	f107 0114 	add.w	r1, r7, #20
 8016428:	2300      	movs	r3, #0
 801642a:	683a      	ldr	r2, [r7, #0]
 801642c:	f7fe f85a 	bl	80144e4 <xQueueGenericSendFromISR>
 8016430:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016434:	4618      	mov	r0, r3
 8016436:	3728      	adds	r7, #40	; 0x28
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}
 801643c:	24001d5c 	.word	0x24001d5c

08016440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016440:	b480      	push	{r7}
 8016442:	b085      	sub	sp, #20
 8016444:	af00      	add	r7, sp, #0
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	3b04      	subs	r3, #4
 8016450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	3b04      	subs	r3, #4
 801645e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	f023 0201 	bic.w	r2, r3, #1
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	3b04      	subs	r3, #4
 801646e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016470:	4a0c      	ldr	r2, [pc, #48]	; (80164a4 <pxPortInitialiseStack+0x64>)
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	3b14      	subs	r3, #20
 801647a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	3b04      	subs	r3, #4
 8016486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f06f 0202 	mvn.w	r2, #2
 801648e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	3b20      	subs	r3, #32
 8016494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016496:	68fb      	ldr	r3, [r7, #12]
}
 8016498:	4618      	mov	r0, r3
 801649a:	3714      	adds	r7, #20
 801649c:	46bd      	mov	sp, r7
 801649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a2:	4770      	bx	lr
 80164a4:	080164a9 	.word	0x080164a9

080164a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80164a8:	b480      	push	{r7}
 80164aa:	b085      	sub	sp, #20
 80164ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80164ae:	2300      	movs	r3, #0
 80164b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80164b2:	4b12      	ldr	r3, [pc, #72]	; (80164fc <prvTaskExitError+0x54>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164ba:	d00a      	beq.n	80164d2 <prvTaskExitError+0x2a>
	__asm volatile
 80164bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c0:	f383 8811 	msr	BASEPRI, r3
 80164c4:	f3bf 8f6f 	isb	sy
 80164c8:	f3bf 8f4f 	dsb	sy
 80164cc:	60fb      	str	r3, [r7, #12]
}
 80164ce:	bf00      	nop
 80164d0:	e7fe      	b.n	80164d0 <prvTaskExitError+0x28>
	__asm volatile
 80164d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d6:	f383 8811 	msr	BASEPRI, r3
 80164da:	f3bf 8f6f 	isb	sy
 80164de:	f3bf 8f4f 	dsb	sy
 80164e2:	60bb      	str	r3, [r7, #8]
}
 80164e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80164e6:	bf00      	nop
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d0fc      	beq.n	80164e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80164ee:	bf00      	nop
 80164f0:	bf00      	nop
 80164f2:	3714      	adds	r7, #20
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr
 80164fc:	240000a0 	.word	0x240000a0

08016500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016500:	4b07      	ldr	r3, [pc, #28]	; (8016520 <pxCurrentTCBConst2>)
 8016502:	6819      	ldr	r1, [r3, #0]
 8016504:	6808      	ldr	r0, [r1, #0]
 8016506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801650a:	f380 8809 	msr	PSP, r0
 801650e:	f3bf 8f6f 	isb	sy
 8016512:	f04f 0000 	mov.w	r0, #0
 8016516:	f380 8811 	msr	BASEPRI, r0
 801651a:	4770      	bx	lr
 801651c:	f3af 8000 	nop.w

08016520 <pxCurrentTCBConst2>:
 8016520:	2400182c 	.word	0x2400182c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016524:	bf00      	nop
 8016526:	bf00      	nop

08016528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016528:	4808      	ldr	r0, [pc, #32]	; (801654c <prvPortStartFirstTask+0x24>)
 801652a:	6800      	ldr	r0, [r0, #0]
 801652c:	6800      	ldr	r0, [r0, #0]
 801652e:	f380 8808 	msr	MSP, r0
 8016532:	f04f 0000 	mov.w	r0, #0
 8016536:	f380 8814 	msr	CONTROL, r0
 801653a:	b662      	cpsie	i
 801653c:	b661      	cpsie	f
 801653e:	f3bf 8f4f 	dsb	sy
 8016542:	f3bf 8f6f 	isb	sy
 8016546:	df00      	svc	0
 8016548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801654a:	bf00      	nop
 801654c:	e000ed08 	.word	0xe000ed08

08016550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b086      	sub	sp, #24
 8016554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016556:	4b46      	ldr	r3, [pc, #280]	; (8016670 <xPortStartScheduler+0x120>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4a46      	ldr	r2, [pc, #280]	; (8016674 <xPortStartScheduler+0x124>)
 801655c:	4293      	cmp	r3, r2
 801655e:	d10a      	bne.n	8016576 <xPortStartScheduler+0x26>
	__asm volatile
 8016560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016564:	f383 8811 	msr	BASEPRI, r3
 8016568:	f3bf 8f6f 	isb	sy
 801656c:	f3bf 8f4f 	dsb	sy
 8016570:	613b      	str	r3, [r7, #16]
}
 8016572:	bf00      	nop
 8016574:	e7fe      	b.n	8016574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016576:	4b3e      	ldr	r3, [pc, #248]	; (8016670 <xPortStartScheduler+0x120>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	4a3f      	ldr	r2, [pc, #252]	; (8016678 <xPortStartScheduler+0x128>)
 801657c:	4293      	cmp	r3, r2
 801657e:	d10a      	bne.n	8016596 <xPortStartScheduler+0x46>
	__asm volatile
 8016580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016584:	f383 8811 	msr	BASEPRI, r3
 8016588:	f3bf 8f6f 	isb	sy
 801658c:	f3bf 8f4f 	dsb	sy
 8016590:	60fb      	str	r3, [r7, #12]
}
 8016592:	bf00      	nop
 8016594:	e7fe      	b.n	8016594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016596:	4b39      	ldr	r3, [pc, #228]	; (801667c <xPortStartScheduler+0x12c>)
 8016598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	b2db      	uxtb	r3, r3
 80165a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	22ff      	movs	r2, #255	; 0xff
 80165a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	b2db      	uxtb	r3, r3
 80165ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165b0:	78fb      	ldrb	r3, [r7, #3]
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80165b8:	b2da      	uxtb	r2, r3
 80165ba:	4b31      	ldr	r3, [pc, #196]	; (8016680 <xPortStartScheduler+0x130>)
 80165bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165be:	4b31      	ldr	r3, [pc, #196]	; (8016684 <xPortStartScheduler+0x134>)
 80165c0:	2207      	movs	r2, #7
 80165c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165c4:	e009      	b.n	80165da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80165c6:	4b2f      	ldr	r3, [pc, #188]	; (8016684 <xPortStartScheduler+0x134>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	3b01      	subs	r3, #1
 80165cc:	4a2d      	ldr	r2, [pc, #180]	; (8016684 <xPortStartScheduler+0x134>)
 80165ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80165d0:	78fb      	ldrb	r3, [r7, #3]
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	005b      	lsls	r3, r3, #1
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165da:	78fb      	ldrb	r3, [r7, #3]
 80165dc:	b2db      	uxtb	r3, r3
 80165de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165e2:	2b80      	cmp	r3, #128	; 0x80
 80165e4:	d0ef      	beq.n	80165c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80165e6:	4b27      	ldr	r3, [pc, #156]	; (8016684 <xPortStartScheduler+0x134>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	f1c3 0307 	rsb	r3, r3, #7
 80165ee:	2b04      	cmp	r3, #4
 80165f0:	d00a      	beq.n	8016608 <xPortStartScheduler+0xb8>
	__asm volatile
 80165f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f6:	f383 8811 	msr	BASEPRI, r3
 80165fa:	f3bf 8f6f 	isb	sy
 80165fe:	f3bf 8f4f 	dsb	sy
 8016602:	60bb      	str	r3, [r7, #8]
}
 8016604:	bf00      	nop
 8016606:	e7fe      	b.n	8016606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016608:	4b1e      	ldr	r3, [pc, #120]	; (8016684 <xPortStartScheduler+0x134>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	021b      	lsls	r3, r3, #8
 801660e:	4a1d      	ldr	r2, [pc, #116]	; (8016684 <xPortStartScheduler+0x134>)
 8016610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016612:	4b1c      	ldr	r3, [pc, #112]	; (8016684 <xPortStartScheduler+0x134>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801661a:	4a1a      	ldr	r2, [pc, #104]	; (8016684 <xPortStartScheduler+0x134>)
 801661c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	b2da      	uxtb	r2, r3
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016626:	4b18      	ldr	r3, [pc, #96]	; (8016688 <xPortStartScheduler+0x138>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	4a17      	ldr	r2, [pc, #92]	; (8016688 <xPortStartScheduler+0x138>)
 801662c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016632:	4b15      	ldr	r3, [pc, #84]	; (8016688 <xPortStartScheduler+0x138>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	4a14      	ldr	r2, [pc, #80]	; (8016688 <xPortStartScheduler+0x138>)
 8016638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801663c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801663e:	f000 f8dd 	bl	80167fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016642:	4b12      	ldr	r3, [pc, #72]	; (801668c <xPortStartScheduler+0x13c>)
 8016644:	2200      	movs	r2, #0
 8016646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016648:	f000 f8fc 	bl	8016844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801664c:	4b10      	ldr	r3, [pc, #64]	; (8016690 <xPortStartScheduler+0x140>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	4a0f      	ldr	r2, [pc, #60]	; (8016690 <xPortStartScheduler+0x140>)
 8016652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016658:	f7ff ff66 	bl	8016528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801665c:	f7fe ff80 	bl	8015560 <vTaskSwitchContext>
	prvTaskExitError();
 8016660:	f7ff ff22 	bl	80164a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016664:	2300      	movs	r3, #0
}
 8016666:	4618      	mov	r0, r3
 8016668:	3718      	adds	r7, #24
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
 801666e:	bf00      	nop
 8016670:	e000ed00 	.word	0xe000ed00
 8016674:	410fc271 	.word	0x410fc271
 8016678:	410fc270 	.word	0x410fc270
 801667c:	e000e400 	.word	0xe000e400
 8016680:	24001e58 	.word	0x24001e58
 8016684:	24001e5c 	.word	0x24001e5c
 8016688:	e000ed20 	.word	0xe000ed20
 801668c:	240000a0 	.word	0x240000a0
 8016690:	e000ef34 	.word	0xe000ef34

08016694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016694:	b480      	push	{r7}
 8016696:	b083      	sub	sp, #12
 8016698:	af00      	add	r7, sp, #0
	__asm volatile
 801669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801669e:	f383 8811 	msr	BASEPRI, r3
 80166a2:	f3bf 8f6f 	isb	sy
 80166a6:	f3bf 8f4f 	dsb	sy
 80166aa:	607b      	str	r3, [r7, #4]
}
 80166ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80166ae:	4b0f      	ldr	r3, [pc, #60]	; (80166ec <vPortEnterCritical+0x58>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	3301      	adds	r3, #1
 80166b4:	4a0d      	ldr	r2, [pc, #52]	; (80166ec <vPortEnterCritical+0x58>)
 80166b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80166b8:	4b0c      	ldr	r3, [pc, #48]	; (80166ec <vPortEnterCritical+0x58>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2b01      	cmp	r3, #1
 80166be:	d10f      	bne.n	80166e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166c0:	4b0b      	ldr	r3, [pc, #44]	; (80166f0 <vPortEnterCritical+0x5c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d00a      	beq.n	80166e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80166ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ce:	f383 8811 	msr	BASEPRI, r3
 80166d2:	f3bf 8f6f 	isb	sy
 80166d6:	f3bf 8f4f 	dsb	sy
 80166da:	603b      	str	r3, [r7, #0]
}
 80166dc:	bf00      	nop
 80166de:	e7fe      	b.n	80166de <vPortEnterCritical+0x4a>
	}
}
 80166e0:	bf00      	nop
 80166e2:	370c      	adds	r7, #12
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr
 80166ec:	240000a0 	.word	0x240000a0
 80166f0:	e000ed04 	.word	0xe000ed04

080166f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80166f4:	b480      	push	{r7}
 80166f6:	b083      	sub	sp, #12
 80166f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80166fa:	4b12      	ldr	r3, [pc, #72]	; (8016744 <vPortExitCritical+0x50>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10a      	bne.n	8016718 <vPortExitCritical+0x24>
	__asm volatile
 8016702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016706:	f383 8811 	msr	BASEPRI, r3
 801670a:	f3bf 8f6f 	isb	sy
 801670e:	f3bf 8f4f 	dsb	sy
 8016712:	607b      	str	r3, [r7, #4]
}
 8016714:	bf00      	nop
 8016716:	e7fe      	b.n	8016716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016718:	4b0a      	ldr	r3, [pc, #40]	; (8016744 <vPortExitCritical+0x50>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	3b01      	subs	r3, #1
 801671e:	4a09      	ldr	r2, [pc, #36]	; (8016744 <vPortExitCritical+0x50>)
 8016720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016722:	4b08      	ldr	r3, [pc, #32]	; (8016744 <vPortExitCritical+0x50>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d105      	bne.n	8016736 <vPortExitCritical+0x42>
 801672a:	2300      	movs	r3, #0
 801672c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	f383 8811 	msr	BASEPRI, r3
}
 8016734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016736:	bf00      	nop
 8016738:	370c      	adds	r7, #12
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr
 8016742:	bf00      	nop
 8016744:	240000a0 	.word	0x240000a0
	...

08016750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016750:	f3ef 8009 	mrs	r0, PSP
 8016754:	f3bf 8f6f 	isb	sy
 8016758:	4b15      	ldr	r3, [pc, #84]	; (80167b0 <pxCurrentTCBConst>)
 801675a:	681a      	ldr	r2, [r3, #0]
 801675c:	f01e 0f10 	tst.w	lr, #16
 8016760:	bf08      	it	eq
 8016762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801676a:	6010      	str	r0, [r2, #0]
 801676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016774:	f380 8811 	msr	BASEPRI, r0
 8016778:	f3bf 8f4f 	dsb	sy
 801677c:	f3bf 8f6f 	isb	sy
 8016780:	f7fe feee 	bl	8015560 <vTaskSwitchContext>
 8016784:	f04f 0000 	mov.w	r0, #0
 8016788:	f380 8811 	msr	BASEPRI, r0
 801678c:	bc09      	pop	{r0, r3}
 801678e:	6819      	ldr	r1, [r3, #0]
 8016790:	6808      	ldr	r0, [r1, #0]
 8016792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016796:	f01e 0f10 	tst.w	lr, #16
 801679a:	bf08      	it	eq
 801679c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80167a0:	f380 8809 	msr	PSP, r0
 80167a4:	f3bf 8f6f 	isb	sy
 80167a8:	4770      	bx	lr
 80167aa:	bf00      	nop
 80167ac:	f3af 8000 	nop.w

080167b0 <pxCurrentTCBConst>:
 80167b0:	2400182c 	.word	0x2400182c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80167b4:	bf00      	nop
 80167b6:	bf00      	nop

080167b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	af00      	add	r7, sp, #0
	__asm volatile
 80167be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c2:	f383 8811 	msr	BASEPRI, r3
 80167c6:	f3bf 8f6f 	isb	sy
 80167ca:	f3bf 8f4f 	dsb	sy
 80167ce:	607b      	str	r3, [r7, #4]
}
 80167d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80167d2:	f7fe fe03 	bl	80153dc <xTaskIncrementTick>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d003      	beq.n	80167e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80167dc:	4b06      	ldr	r3, [pc, #24]	; (80167f8 <xPortSysTickHandler+0x40>)
 80167de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167e2:	601a      	str	r2, [r3, #0]
 80167e4:	2300      	movs	r3, #0
 80167e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	f383 8811 	msr	BASEPRI, r3
}
 80167ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80167f0:	bf00      	nop
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	e000ed04 	.word	0xe000ed04

080167fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80167fc:	b480      	push	{r7}
 80167fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016800:	4b0b      	ldr	r3, [pc, #44]	; (8016830 <vPortSetupTimerInterrupt+0x34>)
 8016802:	2200      	movs	r2, #0
 8016804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016806:	4b0b      	ldr	r3, [pc, #44]	; (8016834 <vPortSetupTimerInterrupt+0x38>)
 8016808:	2200      	movs	r2, #0
 801680a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801680c:	4b0a      	ldr	r3, [pc, #40]	; (8016838 <vPortSetupTimerInterrupt+0x3c>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4a0a      	ldr	r2, [pc, #40]	; (801683c <vPortSetupTimerInterrupt+0x40>)
 8016812:	fba2 2303 	umull	r2, r3, r2, r3
 8016816:	099b      	lsrs	r3, r3, #6
 8016818:	4a09      	ldr	r2, [pc, #36]	; (8016840 <vPortSetupTimerInterrupt+0x44>)
 801681a:	3b01      	subs	r3, #1
 801681c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801681e:	4b04      	ldr	r3, [pc, #16]	; (8016830 <vPortSetupTimerInterrupt+0x34>)
 8016820:	2207      	movs	r2, #7
 8016822:	601a      	str	r2, [r3, #0]
}
 8016824:	bf00      	nop
 8016826:	46bd      	mov	sp, r7
 8016828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	e000e010 	.word	0xe000e010
 8016834:	e000e018 	.word	0xe000e018
 8016838:	24000090 	.word	0x24000090
 801683c:	10624dd3 	.word	0x10624dd3
 8016840:	e000e014 	.word	0xe000e014

08016844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016854 <vPortEnableVFP+0x10>
 8016848:	6801      	ldr	r1, [r0, #0]
 801684a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801684e:	6001      	str	r1, [r0, #0]
 8016850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016852:	bf00      	nop
 8016854:	e000ed88 	.word	0xe000ed88

08016858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016858:	b480      	push	{r7}
 801685a:	b085      	sub	sp, #20
 801685c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801685e:	f3ef 8305 	mrs	r3, IPSR
 8016862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	2b0f      	cmp	r3, #15
 8016868:	d914      	bls.n	8016894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801686a:	4a17      	ldr	r2, [pc, #92]	; (80168c8 <vPortValidateInterruptPriority+0x70>)
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	4413      	add	r3, r2
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016874:	4b15      	ldr	r3, [pc, #84]	; (80168cc <vPortValidateInterruptPriority+0x74>)
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	7afa      	ldrb	r2, [r7, #11]
 801687a:	429a      	cmp	r2, r3
 801687c:	d20a      	bcs.n	8016894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016882:	f383 8811 	msr	BASEPRI, r3
 8016886:	f3bf 8f6f 	isb	sy
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	607b      	str	r3, [r7, #4]
}
 8016890:	bf00      	nop
 8016892:	e7fe      	b.n	8016892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016894:	4b0e      	ldr	r3, [pc, #56]	; (80168d0 <vPortValidateInterruptPriority+0x78>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801689c:	4b0d      	ldr	r3, [pc, #52]	; (80168d4 <vPortValidateInterruptPriority+0x7c>)
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d90a      	bls.n	80168ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80168a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168a8:	f383 8811 	msr	BASEPRI, r3
 80168ac:	f3bf 8f6f 	isb	sy
 80168b0:	f3bf 8f4f 	dsb	sy
 80168b4:	603b      	str	r3, [r7, #0]
}
 80168b6:	bf00      	nop
 80168b8:	e7fe      	b.n	80168b8 <vPortValidateInterruptPriority+0x60>
	}
 80168ba:	bf00      	nop
 80168bc:	3714      	adds	r7, #20
 80168be:	46bd      	mov	sp, r7
 80168c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c4:	4770      	bx	lr
 80168c6:	bf00      	nop
 80168c8:	e000e3f0 	.word	0xe000e3f0
 80168cc:	24001e58 	.word	0x24001e58
 80168d0:	e000ed0c 	.word	0xe000ed0c
 80168d4:	24001e5c 	.word	0x24001e5c

080168d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b08a      	sub	sp, #40	; 0x28
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80168e0:	2300      	movs	r3, #0
 80168e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80168e4:	f7fe fcbe 	bl	8015264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80168e8:	4b5b      	ldr	r3, [pc, #364]	; (8016a58 <pvPortMalloc+0x180>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d101      	bne.n	80168f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80168f0:	f000 f920 	bl	8016b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80168f4:	4b59      	ldr	r3, [pc, #356]	; (8016a5c <pvPortMalloc+0x184>)
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	4013      	ands	r3, r2
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	f040 8093 	bne.w	8016a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d01d      	beq.n	8016944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016908:	2208      	movs	r2, #8
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	4413      	add	r3, r2
 801690e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f003 0307 	and.w	r3, r3, #7
 8016916:	2b00      	cmp	r3, #0
 8016918:	d014      	beq.n	8016944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f023 0307 	bic.w	r3, r3, #7
 8016920:	3308      	adds	r3, #8
 8016922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f003 0307 	and.w	r3, r3, #7
 801692a:	2b00      	cmp	r3, #0
 801692c:	d00a      	beq.n	8016944 <pvPortMalloc+0x6c>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016932:	f383 8811 	msr	BASEPRI, r3
 8016936:	f3bf 8f6f 	isb	sy
 801693a:	f3bf 8f4f 	dsb	sy
 801693e:	617b      	str	r3, [r7, #20]
}
 8016940:	bf00      	nop
 8016942:	e7fe      	b.n	8016942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d06e      	beq.n	8016a28 <pvPortMalloc+0x150>
 801694a:	4b45      	ldr	r3, [pc, #276]	; (8016a60 <pvPortMalloc+0x188>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	687a      	ldr	r2, [r7, #4]
 8016950:	429a      	cmp	r2, r3
 8016952:	d869      	bhi.n	8016a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016954:	4b43      	ldr	r3, [pc, #268]	; (8016a64 <pvPortMalloc+0x18c>)
 8016956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016958:	4b42      	ldr	r3, [pc, #264]	; (8016a64 <pvPortMalloc+0x18c>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801695e:	e004      	b.n	801696a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	687a      	ldr	r2, [r7, #4]
 8016970:	429a      	cmp	r2, r3
 8016972:	d903      	bls.n	801697c <pvPortMalloc+0xa4>
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d1f1      	bne.n	8016960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801697c:	4b36      	ldr	r3, [pc, #216]	; (8016a58 <pvPortMalloc+0x180>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016982:	429a      	cmp	r2, r3
 8016984:	d050      	beq.n	8016a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016986:	6a3b      	ldr	r3, [r7, #32]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	2208      	movs	r2, #8
 801698c:	4413      	add	r3, r2
 801698e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	6a3b      	ldr	r3, [r7, #32]
 8016996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	1ad2      	subs	r2, r2, r3
 80169a0:	2308      	movs	r3, #8
 80169a2:	005b      	lsls	r3, r3, #1
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d91f      	bls.n	80169e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	4413      	add	r3, r2
 80169ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169b0:	69bb      	ldr	r3, [r7, #24]
 80169b2:	f003 0307 	and.w	r3, r3, #7
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d00a      	beq.n	80169d0 <pvPortMalloc+0xf8>
	__asm volatile
 80169ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169be:	f383 8811 	msr	BASEPRI, r3
 80169c2:	f3bf 8f6f 	isb	sy
 80169c6:	f3bf 8f4f 	dsb	sy
 80169ca:	613b      	str	r3, [r7, #16]
}
 80169cc:	bf00      	nop
 80169ce:	e7fe      	b.n	80169ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80169d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d2:	685a      	ldr	r2, [r3, #4]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	1ad2      	subs	r2, r2, r3
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80169dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80169e2:	69b8      	ldr	r0, [r7, #24]
 80169e4:	f000 f908 	bl	8016bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80169e8:	4b1d      	ldr	r3, [pc, #116]	; (8016a60 <pvPortMalloc+0x188>)
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	685b      	ldr	r3, [r3, #4]
 80169f0:	1ad3      	subs	r3, r2, r3
 80169f2:	4a1b      	ldr	r2, [pc, #108]	; (8016a60 <pvPortMalloc+0x188>)
 80169f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80169f6:	4b1a      	ldr	r3, [pc, #104]	; (8016a60 <pvPortMalloc+0x188>)
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	4b1b      	ldr	r3, [pc, #108]	; (8016a68 <pvPortMalloc+0x190>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d203      	bcs.n	8016a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a02:	4b17      	ldr	r3, [pc, #92]	; (8016a60 <pvPortMalloc+0x188>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	4a18      	ldr	r2, [pc, #96]	; (8016a68 <pvPortMalloc+0x190>)
 8016a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0c:	685a      	ldr	r2, [r3, #4]
 8016a0e:	4b13      	ldr	r3, [pc, #76]	; (8016a5c <pvPortMalloc+0x184>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	431a      	orrs	r2, r3
 8016a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016a1e:	4b13      	ldr	r3, [pc, #76]	; (8016a6c <pvPortMalloc+0x194>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	3301      	adds	r3, #1
 8016a24:	4a11      	ldr	r2, [pc, #68]	; (8016a6c <pvPortMalloc+0x194>)
 8016a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a28:	f7fe fc2a 	bl	8015280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a2c:	69fb      	ldr	r3, [r7, #28]
 8016a2e:	f003 0307 	and.w	r3, r3, #7
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d00a      	beq.n	8016a4c <pvPortMalloc+0x174>
	__asm volatile
 8016a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3a:	f383 8811 	msr	BASEPRI, r3
 8016a3e:	f3bf 8f6f 	isb	sy
 8016a42:	f3bf 8f4f 	dsb	sy
 8016a46:	60fb      	str	r3, [r7, #12]
}
 8016a48:	bf00      	nop
 8016a4a:	e7fe      	b.n	8016a4a <pvPortMalloc+0x172>
	return pvReturn;
 8016a4c:	69fb      	ldr	r3, [r7, #28]
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	3728      	adds	r7, #40	; 0x28
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}
 8016a56:	bf00      	nop
 8016a58:	24005a68 	.word	0x24005a68
 8016a5c:	24005a7c 	.word	0x24005a7c
 8016a60:	24005a6c 	.word	0x24005a6c
 8016a64:	24005a60 	.word	0x24005a60
 8016a68:	24005a70 	.word	0x24005a70
 8016a6c:	24005a74 	.word	0x24005a74

08016a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b086      	sub	sp, #24
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d04d      	beq.n	8016b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a82:	2308      	movs	r3, #8
 8016a84:	425b      	negs	r3, r3
 8016a86:	697a      	ldr	r2, [r7, #20]
 8016a88:	4413      	add	r3, r2
 8016a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	685a      	ldr	r2, [r3, #4]
 8016a94:	4b24      	ldr	r3, [pc, #144]	; (8016b28 <vPortFree+0xb8>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	4013      	ands	r3, r2
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d10a      	bne.n	8016ab4 <vPortFree+0x44>
	__asm volatile
 8016a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa2:	f383 8811 	msr	BASEPRI, r3
 8016aa6:	f3bf 8f6f 	isb	sy
 8016aaa:	f3bf 8f4f 	dsb	sy
 8016aae:	60fb      	str	r3, [r7, #12]
}
 8016ab0:	bf00      	nop
 8016ab2:	e7fe      	b.n	8016ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d00a      	beq.n	8016ad2 <vPortFree+0x62>
	__asm volatile
 8016abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac0:	f383 8811 	msr	BASEPRI, r3
 8016ac4:	f3bf 8f6f 	isb	sy
 8016ac8:	f3bf 8f4f 	dsb	sy
 8016acc:	60bb      	str	r3, [r7, #8]
}
 8016ace:	bf00      	nop
 8016ad0:	e7fe      	b.n	8016ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	685a      	ldr	r2, [r3, #4]
 8016ad6:	4b14      	ldr	r3, [pc, #80]	; (8016b28 <vPortFree+0xb8>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	4013      	ands	r3, r2
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d01e      	beq.n	8016b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d11a      	bne.n	8016b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ae8:	693b      	ldr	r3, [r7, #16]
 8016aea:	685a      	ldr	r2, [r3, #4]
 8016aec:	4b0e      	ldr	r3, [pc, #56]	; (8016b28 <vPortFree+0xb8>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	43db      	mvns	r3, r3
 8016af2:	401a      	ands	r2, r3
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016af8:	f7fe fbb4 	bl	8015264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	685a      	ldr	r2, [r3, #4]
 8016b00:	4b0a      	ldr	r3, [pc, #40]	; (8016b2c <vPortFree+0xbc>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	4413      	add	r3, r2
 8016b06:	4a09      	ldr	r2, [pc, #36]	; (8016b2c <vPortFree+0xbc>)
 8016b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b0a:	6938      	ldr	r0, [r7, #16]
 8016b0c:	f000 f874 	bl	8016bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016b10:	4b07      	ldr	r3, [pc, #28]	; (8016b30 <vPortFree+0xc0>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	3301      	adds	r3, #1
 8016b16:	4a06      	ldr	r2, [pc, #24]	; (8016b30 <vPortFree+0xc0>)
 8016b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016b1a:	f7fe fbb1 	bl	8015280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016b1e:	bf00      	nop
 8016b20:	3718      	adds	r7, #24
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}
 8016b26:	bf00      	nop
 8016b28:	24005a7c 	.word	0x24005a7c
 8016b2c:	24005a6c 	.word	0x24005a6c
 8016b30:	24005a78 	.word	0x24005a78

08016b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b34:	b480      	push	{r7}
 8016b36:	b085      	sub	sp, #20
 8016b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b40:	4b27      	ldr	r3, [pc, #156]	; (8016be0 <prvHeapInit+0xac>)
 8016b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f003 0307 	and.w	r3, r3, #7
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d00c      	beq.n	8016b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	3307      	adds	r3, #7
 8016b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	f023 0307 	bic.w	r3, r3, #7
 8016b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b5c:	68ba      	ldr	r2, [r7, #8]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	1ad3      	subs	r3, r2, r3
 8016b62:	4a1f      	ldr	r2, [pc, #124]	; (8016be0 <prvHeapInit+0xac>)
 8016b64:	4413      	add	r3, r2
 8016b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b6c:	4a1d      	ldr	r2, [pc, #116]	; (8016be4 <prvHeapInit+0xb0>)
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b72:	4b1c      	ldr	r3, [pc, #112]	; (8016be4 <prvHeapInit+0xb0>)
 8016b74:	2200      	movs	r2, #0
 8016b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	68ba      	ldr	r2, [r7, #8]
 8016b7c:	4413      	add	r3, r2
 8016b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b80:	2208      	movs	r2, #8
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	1a9b      	subs	r3, r3, r2
 8016b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	f023 0307 	bic.w	r3, r3, #7
 8016b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	4a15      	ldr	r2, [pc, #84]	; (8016be8 <prvHeapInit+0xb4>)
 8016b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016b96:	4b14      	ldr	r3, [pc, #80]	; (8016be8 <prvHeapInit+0xb4>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016b9e:	4b12      	ldr	r3, [pc, #72]	; (8016be8 <prvHeapInit+0xb4>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	68fa      	ldr	r2, [r7, #12]
 8016bae:	1ad2      	subs	r2, r2, r3
 8016bb0:	683b      	ldr	r3, [r7, #0]
 8016bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016bb4:	4b0c      	ldr	r3, [pc, #48]	; (8016be8 <prvHeapInit+0xb4>)
 8016bb6:	681a      	ldr	r2, [r3, #0]
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	4a0a      	ldr	r2, [pc, #40]	; (8016bec <prvHeapInit+0xb8>)
 8016bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	4a09      	ldr	r2, [pc, #36]	; (8016bf0 <prvHeapInit+0xbc>)
 8016bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016bcc:	4b09      	ldr	r3, [pc, #36]	; (8016bf4 <prvHeapInit+0xc0>)
 8016bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016bd2:	601a      	str	r2, [r3, #0]
}
 8016bd4:	bf00      	nop
 8016bd6:	3714      	adds	r7, #20
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bde:	4770      	bx	lr
 8016be0:	24001e60 	.word	0x24001e60
 8016be4:	24005a60 	.word	0x24005a60
 8016be8:	24005a68 	.word	0x24005a68
 8016bec:	24005a70 	.word	0x24005a70
 8016bf0:	24005a6c 	.word	0x24005a6c
 8016bf4:	24005a7c 	.word	0x24005a7c

08016bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b085      	sub	sp, #20
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016c00:	4b28      	ldr	r3, [pc, #160]	; (8016ca4 <prvInsertBlockIntoFreeList+0xac>)
 8016c02:	60fb      	str	r3, [r7, #12]
 8016c04:	e002      	b.n	8016c0c <prvInsertBlockIntoFreeList+0x14>
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	60fb      	str	r3, [r7, #12]
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	687a      	ldr	r2, [r7, #4]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d8f7      	bhi.n	8016c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	685b      	ldr	r3, [r3, #4]
 8016c1e:	68ba      	ldr	r2, [r7, #8]
 8016c20:	4413      	add	r3, r2
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d108      	bne.n	8016c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	685a      	ldr	r2, [r3, #4]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	441a      	add	r2, r3
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	68ba      	ldr	r2, [r7, #8]
 8016c44:	441a      	add	r2, r3
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d118      	bne.n	8016c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	4b15      	ldr	r3, [pc, #84]	; (8016ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	429a      	cmp	r2, r3
 8016c58:	d00d      	beq.n	8016c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	685a      	ldr	r2, [r3, #4]
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	685b      	ldr	r3, [r3, #4]
 8016c64:	441a      	add	r2, r3
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	681a      	ldr	r2, [r3, #0]
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	601a      	str	r2, [r3, #0]
 8016c74:	e008      	b.n	8016c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c76:	4b0c      	ldr	r3, [pc, #48]	; (8016ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8016c78:	681a      	ldr	r2, [r3, #0]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	601a      	str	r2, [r3, #0]
 8016c7e:	e003      	b.n	8016c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d002      	beq.n	8016c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c96:	bf00      	nop
 8016c98:	3714      	adds	r7, #20
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca0:	4770      	bx	lr
 8016ca2:	bf00      	nop
 8016ca4:	24005a60 	.word	0x24005a60
 8016ca8:	24005a68 	.word	0x24005a68

08016cac <__errno>:
 8016cac:	4b01      	ldr	r3, [pc, #4]	; (8016cb4 <__errno+0x8>)
 8016cae:	6818      	ldr	r0, [r3, #0]
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	240000a4 	.word	0x240000a4

08016cb8 <__libc_init_array>:
 8016cb8:	b570      	push	{r4, r5, r6, lr}
 8016cba:	4d0d      	ldr	r5, [pc, #52]	; (8016cf0 <__libc_init_array+0x38>)
 8016cbc:	4c0d      	ldr	r4, [pc, #52]	; (8016cf4 <__libc_init_array+0x3c>)
 8016cbe:	1b64      	subs	r4, r4, r5
 8016cc0:	10a4      	asrs	r4, r4, #2
 8016cc2:	2600      	movs	r6, #0
 8016cc4:	42a6      	cmp	r6, r4
 8016cc6:	d109      	bne.n	8016cdc <__libc_init_array+0x24>
 8016cc8:	4d0b      	ldr	r5, [pc, #44]	; (8016cf8 <__libc_init_array+0x40>)
 8016cca:	4c0c      	ldr	r4, [pc, #48]	; (8016cfc <__libc_init_array+0x44>)
 8016ccc:	f000 fd3c 	bl	8017748 <_init>
 8016cd0:	1b64      	subs	r4, r4, r5
 8016cd2:	10a4      	asrs	r4, r4, #2
 8016cd4:	2600      	movs	r6, #0
 8016cd6:	42a6      	cmp	r6, r4
 8016cd8:	d105      	bne.n	8016ce6 <__libc_init_array+0x2e>
 8016cda:	bd70      	pop	{r4, r5, r6, pc}
 8016cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ce0:	4798      	blx	r3
 8016ce2:	3601      	adds	r6, #1
 8016ce4:	e7ee      	b.n	8016cc4 <__libc_init_array+0xc>
 8016ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cea:	4798      	blx	r3
 8016cec:	3601      	adds	r6, #1
 8016cee:	e7f2      	b.n	8016cd6 <__libc_init_array+0x1e>
 8016cf0:	08017c00 	.word	0x08017c00
 8016cf4:	08017c00 	.word	0x08017c00
 8016cf8:	08017c00 	.word	0x08017c00
 8016cfc:	08017c04 	.word	0x08017c04

08016d00 <malloc>:
 8016d00:	4b02      	ldr	r3, [pc, #8]	; (8016d0c <malloc+0xc>)
 8016d02:	4601      	mov	r1, r0
 8016d04:	6818      	ldr	r0, [r3, #0]
 8016d06:	f000 b88d 	b.w	8016e24 <_malloc_r>
 8016d0a:	bf00      	nop
 8016d0c:	240000a4 	.word	0x240000a4

08016d10 <free>:
 8016d10:	4b02      	ldr	r3, [pc, #8]	; (8016d1c <free+0xc>)
 8016d12:	4601      	mov	r1, r0
 8016d14:	6818      	ldr	r0, [r3, #0]
 8016d16:	f000 b819 	b.w	8016d4c <_free_r>
 8016d1a:	bf00      	nop
 8016d1c:	240000a4 	.word	0x240000a4

08016d20 <memcpy>:
 8016d20:	440a      	add	r2, r1
 8016d22:	4291      	cmp	r1, r2
 8016d24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d28:	d100      	bne.n	8016d2c <memcpy+0xc>
 8016d2a:	4770      	bx	lr
 8016d2c:	b510      	push	{r4, lr}
 8016d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d36:	4291      	cmp	r1, r2
 8016d38:	d1f9      	bne.n	8016d2e <memcpy+0xe>
 8016d3a:	bd10      	pop	{r4, pc}

08016d3c <memset>:
 8016d3c:	4402      	add	r2, r0
 8016d3e:	4603      	mov	r3, r0
 8016d40:	4293      	cmp	r3, r2
 8016d42:	d100      	bne.n	8016d46 <memset+0xa>
 8016d44:	4770      	bx	lr
 8016d46:	f803 1b01 	strb.w	r1, [r3], #1
 8016d4a:	e7f9      	b.n	8016d40 <memset+0x4>

08016d4c <_free_r>:
 8016d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d4e:	2900      	cmp	r1, #0
 8016d50:	d044      	beq.n	8016ddc <_free_r+0x90>
 8016d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d56:	9001      	str	r0, [sp, #4]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8016d5e:	bfb8      	it	lt
 8016d60:	18e4      	addlt	r4, r4, r3
 8016d62:	f000 fc39 	bl	80175d8 <__malloc_lock>
 8016d66:	4a1e      	ldr	r2, [pc, #120]	; (8016de0 <_free_r+0x94>)
 8016d68:	9801      	ldr	r0, [sp, #4]
 8016d6a:	6813      	ldr	r3, [r2, #0]
 8016d6c:	b933      	cbnz	r3, 8016d7c <_free_r+0x30>
 8016d6e:	6063      	str	r3, [r4, #4]
 8016d70:	6014      	str	r4, [r2, #0]
 8016d72:	b003      	add	sp, #12
 8016d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d78:	f000 bc34 	b.w	80175e4 <__malloc_unlock>
 8016d7c:	42a3      	cmp	r3, r4
 8016d7e:	d908      	bls.n	8016d92 <_free_r+0x46>
 8016d80:	6825      	ldr	r5, [r4, #0]
 8016d82:	1961      	adds	r1, r4, r5
 8016d84:	428b      	cmp	r3, r1
 8016d86:	bf01      	itttt	eq
 8016d88:	6819      	ldreq	r1, [r3, #0]
 8016d8a:	685b      	ldreq	r3, [r3, #4]
 8016d8c:	1949      	addeq	r1, r1, r5
 8016d8e:	6021      	streq	r1, [r4, #0]
 8016d90:	e7ed      	b.n	8016d6e <_free_r+0x22>
 8016d92:	461a      	mov	r2, r3
 8016d94:	685b      	ldr	r3, [r3, #4]
 8016d96:	b10b      	cbz	r3, 8016d9c <_free_r+0x50>
 8016d98:	42a3      	cmp	r3, r4
 8016d9a:	d9fa      	bls.n	8016d92 <_free_r+0x46>
 8016d9c:	6811      	ldr	r1, [r2, #0]
 8016d9e:	1855      	adds	r5, r2, r1
 8016da0:	42a5      	cmp	r5, r4
 8016da2:	d10b      	bne.n	8016dbc <_free_r+0x70>
 8016da4:	6824      	ldr	r4, [r4, #0]
 8016da6:	4421      	add	r1, r4
 8016da8:	1854      	adds	r4, r2, r1
 8016daa:	42a3      	cmp	r3, r4
 8016dac:	6011      	str	r1, [r2, #0]
 8016dae:	d1e0      	bne.n	8016d72 <_free_r+0x26>
 8016db0:	681c      	ldr	r4, [r3, #0]
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	6053      	str	r3, [r2, #4]
 8016db6:	4421      	add	r1, r4
 8016db8:	6011      	str	r1, [r2, #0]
 8016dba:	e7da      	b.n	8016d72 <_free_r+0x26>
 8016dbc:	d902      	bls.n	8016dc4 <_free_r+0x78>
 8016dbe:	230c      	movs	r3, #12
 8016dc0:	6003      	str	r3, [r0, #0]
 8016dc2:	e7d6      	b.n	8016d72 <_free_r+0x26>
 8016dc4:	6825      	ldr	r5, [r4, #0]
 8016dc6:	1961      	adds	r1, r4, r5
 8016dc8:	428b      	cmp	r3, r1
 8016dca:	bf04      	itt	eq
 8016dcc:	6819      	ldreq	r1, [r3, #0]
 8016dce:	685b      	ldreq	r3, [r3, #4]
 8016dd0:	6063      	str	r3, [r4, #4]
 8016dd2:	bf04      	itt	eq
 8016dd4:	1949      	addeq	r1, r1, r5
 8016dd6:	6021      	streq	r1, [r4, #0]
 8016dd8:	6054      	str	r4, [r2, #4]
 8016dda:	e7ca      	b.n	8016d72 <_free_r+0x26>
 8016ddc:	b003      	add	sp, #12
 8016dde:	bd30      	pop	{r4, r5, pc}
 8016de0:	24005a80 	.word	0x24005a80

08016de4 <sbrk_aligned>:
 8016de4:	b570      	push	{r4, r5, r6, lr}
 8016de6:	4e0e      	ldr	r6, [pc, #56]	; (8016e20 <sbrk_aligned+0x3c>)
 8016de8:	460c      	mov	r4, r1
 8016dea:	6831      	ldr	r1, [r6, #0]
 8016dec:	4605      	mov	r5, r0
 8016dee:	b911      	cbnz	r1, 8016df6 <sbrk_aligned+0x12>
 8016df0:	f000 f902 	bl	8016ff8 <_sbrk_r>
 8016df4:	6030      	str	r0, [r6, #0]
 8016df6:	4621      	mov	r1, r4
 8016df8:	4628      	mov	r0, r5
 8016dfa:	f000 f8fd 	bl	8016ff8 <_sbrk_r>
 8016dfe:	1c43      	adds	r3, r0, #1
 8016e00:	d00a      	beq.n	8016e18 <sbrk_aligned+0x34>
 8016e02:	1cc4      	adds	r4, r0, #3
 8016e04:	f024 0403 	bic.w	r4, r4, #3
 8016e08:	42a0      	cmp	r0, r4
 8016e0a:	d007      	beq.n	8016e1c <sbrk_aligned+0x38>
 8016e0c:	1a21      	subs	r1, r4, r0
 8016e0e:	4628      	mov	r0, r5
 8016e10:	f000 f8f2 	bl	8016ff8 <_sbrk_r>
 8016e14:	3001      	adds	r0, #1
 8016e16:	d101      	bne.n	8016e1c <sbrk_aligned+0x38>
 8016e18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	bd70      	pop	{r4, r5, r6, pc}
 8016e20:	24005a84 	.word	0x24005a84

08016e24 <_malloc_r>:
 8016e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e28:	1ccd      	adds	r5, r1, #3
 8016e2a:	f025 0503 	bic.w	r5, r5, #3
 8016e2e:	3508      	adds	r5, #8
 8016e30:	2d0c      	cmp	r5, #12
 8016e32:	bf38      	it	cc
 8016e34:	250c      	movcc	r5, #12
 8016e36:	2d00      	cmp	r5, #0
 8016e38:	4607      	mov	r7, r0
 8016e3a:	db01      	blt.n	8016e40 <_malloc_r+0x1c>
 8016e3c:	42a9      	cmp	r1, r5
 8016e3e:	d905      	bls.n	8016e4c <_malloc_r+0x28>
 8016e40:	230c      	movs	r3, #12
 8016e42:	603b      	str	r3, [r7, #0]
 8016e44:	2600      	movs	r6, #0
 8016e46:	4630      	mov	r0, r6
 8016e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e4c:	4e2e      	ldr	r6, [pc, #184]	; (8016f08 <_malloc_r+0xe4>)
 8016e4e:	f000 fbc3 	bl	80175d8 <__malloc_lock>
 8016e52:	6833      	ldr	r3, [r6, #0]
 8016e54:	461c      	mov	r4, r3
 8016e56:	bb34      	cbnz	r4, 8016ea6 <_malloc_r+0x82>
 8016e58:	4629      	mov	r1, r5
 8016e5a:	4638      	mov	r0, r7
 8016e5c:	f7ff ffc2 	bl	8016de4 <sbrk_aligned>
 8016e60:	1c43      	adds	r3, r0, #1
 8016e62:	4604      	mov	r4, r0
 8016e64:	d14d      	bne.n	8016f02 <_malloc_r+0xde>
 8016e66:	6834      	ldr	r4, [r6, #0]
 8016e68:	4626      	mov	r6, r4
 8016e6a:	2e00      	cmp	r6, #0
 8016e6c:	d140      	bne.n	8016ef0 <_malloc_r+0xcc>
 8016e6e:	6823      	ldr	r3, [r4, #0]
 8016e70:	4631      	mov	r1, r6
 8016e72:	4638      	mov	r0, r7
 8016e74:	eb04 0803 	add.w	r8, r4, r3
 8016e78:	f000 f8be 	bl	8016ff8 <_sbrk_r>
 8016e7c:	4580      	cmp	r8, r0
 8016e7e:	d13a      	bne.n	8016ef6 <_malloc_r+0xd2>
 8016e80:	6821      	ldr	r1, [r4, #0]
 8016e82:	3503      	adds	r5, #3
 8016e84:	1a6d      	subs	r5, r5, r1
 8016e86:	f025 0503 	bic.w	r5, r5, #3
 8016e8a:	3508      	adds	r5, #8
 8016e8c:	2d0c      	cmp	r5, #12
 8016e8e:	bf38      	it	cc
 8016e90:	250c      	movcc	r5, #12
 8016e92:	4629      	mov	r1, r5
 8016e94:	4638      	mov	r0, r7
 8016e96:	f7ff ffa5 	bl	8016de4 <sbrk_aligned>
 8016e9a:	3001      	adds	r0, #1
 8016e9c:	d02b      	beq.n	8016ef6 <_malloc_r+0xd2>
 8016e9e:	6823      	ldr	r3, [r4, #0]
 8016ea0:	442b      	add	r3, r5
 8016ea2:	6023      	str	r3, [r4, #0]
 8016ea4:	e00e      	b.n	8016ec4 <_malloc_r+0xa0>
 8016ea6:	6822      	ldr	r2, [r4, #0]
 8016ea8:	1b52      	subs	r2, r2, r5
 8016eaa:	d41e      	bmi.n	8016eea <_malloc_r+0xc6>
 8016eac:	2a0b      	cmp	r2, #11
 8016eae:	d916      	bls.n	8016ede <_malloc_r+0xba>
 8016eb0:	1961      	adds	r1, r4, r5
 8016eb2:	42a3      	cmp	r3, r4
 8016eb4:	6025      	str	r5, [r4, #0]
 8016eb6:	bf18      	it	ne
 8016eb8:	6059      	strne	r1, [r3, #4]
 8016eba:	6863      	ldr	r3, [r4, #4]
 8016ebc:	bf08      	it	eq
 8016ebe:	6031      	streq	r1, [r6, #0]
 8016ec0:	5162      	str	r2, [r4, r5]
 8016ec2:	604b      	str	r3, [r1, #4]
 8016ec4:	4638      	mov	r0, r7
 8016ec6:	f104 060b 	add.w	r6, r4, #11
 8016eca:	f000 fb8b 	bl	80175e4 <__malloc_unlock>
 8016ece:	f026 0607 	bic.w	r6, r6, #7
 8016ed2:	1d23      	adds	r3, r4, #4
 8016ed4:	1af2      	subs	r2, r6, r3
 8016ed6:	d0b6      	beq.n	8016e46 <_malloc_r+0x22>
 8016ed8:	1b9b      	subs	r3, r3, r6
 8016eda:	50a3      	str	r3, [r4, r2]
 8016edc:	e7b3      	b.n	8016e46 <_malloc_r+0x22>
 8016ede:	6862      	ldr	r2, [r4, #4]
 8016ee0:	42a3      	cmp	r3, r4
 8016ee2:	bf0c      	ite	eq
 8016ee4:	6032      	streq	r2, [r6, #0]
 8016ee6:	605a      	strne	r2, [r3, #4]
 8016ee8:	e7ec      	b.n	8016ec4 <_malloc_r+0xa0>
 8016eea:	4623      	mov	r3, r4
 8016eec:	6864      	ldr	r4, [r4, #4]
 8016eee:	e7b2      	b.n	8016e56 <_malloc_r+0x32>
 8016ef0:	4634      	mov	r4, r6
 8016ef2:	6876      	ldr	r6, [r6, #4]
 8016ef4:	e7b9      	b.n	8016e6a <_malloc_r+0x46>
 8016ef6:	230c      	movs	r3, #12
 8016ef8:	603b      	str	r3, [r7, #0]
 8016efa:	4638      	mov	r0, r7
 8016efc:	f000 fb72 	bl	80175e4 <__malloc_unlock>
 8016f00:	e7a1      	b.n	8016e46 <_malloc_r+0x22>
 8016f02:	6025      	str	r5, [r4, #0]
 8016f04:	e7de      	b.n	8016ec4 <_malloc_r+0xa0>
 8016f06:	bf00      	nop
 8016f08:	24005a80 	.word	0x24005a80

08016f0c <_puts_r>:
 8016f0c:	b570      	push	{r4, r5, r6, lr}
 8016f0e:	460e      	mov	r6, r1
 8016f10:	4605      	mov	r5, r0
 8016f12:	b118      	cbz	r0, 8016f1c <_puts_r+0x10>
 8016f14:	6983      	ldr	r3, [r0, #24]
 8016f16:	b90b      	cbnz	r3, 8016f1c <_puts_r+0x10>
 8016f18:	f000 fa58 	bl	80173cc <__sinit>
 8016f1c:	69ab      	ldr	r3, [r5, #24]
 8016f1e:	68ac      	ldr	r4, [r5, #8]
 8016f20:	b913      	cbnz	r3, 8016f28 <_puts_r+0x1c>
 8016f22:	4628      	mov	r0, r5
 8016f24:	f000 fa52 	bl	80173cc <__sinit>
 8016f28:	4b2c      	ldr	r3, [pc, #176]	; (8016fdc <_puts_r+0xd0>)
 8016f2a:	429c      	cmp	r4, r3
 8016f2c:	d120      	bne.n	8016f70 <_puts_r+0x64>
 8016f2e:	686c      	ldr	r4, [r5, #4]
 8016f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f32:	07db      	lsls	r3, r3, #31
 8016f34:	d405      	bmi.n	8016f42 <_puts_r+0x36>
 8016f36:	89a3      	ldrh	r3, [r4, #12]
 8016f38:	0598      	lsls	r0, r3, #22
 8016f3a:	d402      	bmi.n	8016f42 <_puts_r+0x36>
 8016f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f3e:	f000 fae3 	bl	8017508 <__retarget_lock_acquire_recursive>
 8016f42:	89a3      	ldrh	r3, [r4, #12]
 8016f44:	0719      	lsls	r1, r3, #28
 8016f46:	d51d      	bpl.n	8016f84 <_puts_r+0x78>
 8016f48:	6923      	ldr	r3, [r4, #16]
 8016f4a:	b1db      	cbz	r3, 8016f84 <_puts_r+0x78>
 8016f4c:	3e01      	subs	r6, #1
 8016f4e:	68a3      	ldr	r3, [r4, #8]
 8016f50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f54:	3b01      	subs	r3, #1
 8016f56:	60a3      	str	r3, [r4, #8]
 8016f58:	bb39      	cbnz	r1, 8016faa <_puts_r+0x9e>
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	da38      	bge.n	8016fd0 <_puts_r+0xc4>
 8016f5e:	4622      	mov	r2, r4
 8016f60:	210a      	movs	r1, #10
 8016f62:	4628      	mov	r0, r5
 8016f64:	f000 f858 	bl	8017018 <__swbuf_r>
 8016f68:	3001      	adds	r0, #1
 8016f6a:	d011      	beq.n	8016f90 <_puts_r+0x84>
 8016f6c:	250a      	movs	r5, #10
 8016f6e:	e011      	b.n	8016f94 <_puts_r+0x88>
 8016f70:	4b1b      	ldr	r3, [pc, #108]	; (8016fe0 <_puts_r+0xd4>)
 8016f72:	429c      	cmp	r4, r3
 8016f74:	d101      	bne.n	8016f7a <_puts_r+0x6e>
 8016f76:	68ac      	ldr	r4, [r5, #8]
 8016f78:	e7da      	b.n	8016f30 <_puts_r+0x24>
 8016f7a:	4b1a      	ldr	r3, [pc, #104]	; (8016fe4 <_puts_r+0xd8>)
 8016f7c:	429c      	cmp	r4, r3
 8016f7e:	bf08      	it	eq
 8016f80:	68ec      	ldreq	r4, [r5, #12]
 8016f82:	e7d5      	b.n	8016f30 <_puts_r+0x24>
 8016f84:	4621      	mov	r1, r4
 8016f86:	4628      	mov	r0, r5
 8016f88:	f000 f898 	bl	80170bc <__swsetup_r>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d0dd      	beq.n	8016f4c <_puts_r+0x40>
 8016f90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f96:	07da      	lsls	r2, r3, #31
 8016f98:	d405      	bmi.n	8016fa6 <_puts_r+0x9a>
 8016f9a:	89a3      	ldrh	r3, [r4, #12]
 8016f9c:	059b      	lsls	r3, r3, #22
 8016f9e:	d402      	bmi.n	8016fa6 <_puts_r+0x9a>
 8016fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fa2:	f000 fab2 	bl	801750a <__retarget_lock_release_recursive>
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	bd70      	pop	{r4, r5, r6, pc}
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	da04      	bge.n	8016fb8 <_puts_r+0xac>
 8016fae:	69a2      	ldr	r2, [r4, #24]
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	dc06      	bgt.n	8016fc2 <_puts_r+0xb6>
 8016fb4:	290a      	cmp	r1, #10
 8016fb6:	d004      	beq.n	8016fc2 <_puts_r+0xb6>
 8016fb8:	6823      	ldr	r3, [r4, #0]
 8016fba:	1c5a      	adds	r2, r3, #1
 8016fbc:	6022      	str	r2, [r4, #0]
 8016fbe:	7019      	strb	r1, [r3, #0]
 8016fc0:	e7c5      	b.n	8016f4e <_puts_r+0x42>
 8016fc2:	4622      	mov	r2, r4
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	f000 f827 	bl	8017018 <__swbuf_r>
 8016fca:	3001      	adds	r0, #1
 8016fcc:	d1bf      	bne.n	8016f4e <_puts_r+0x42>
 8016fce:	e7df      	b.n	8016f90 <_puts_r+0x84>
 8016fd0:	6823      	ldr	r3, [r4, #0]
 8016fd2:	250a      	movs	r5, #10
 8016fd4:	1c5a      	adds	r2, r3, #1
 8016fd6:	6022      	str	r2, [r4, #0]
 8016fd8:	701d      	strb	r5, [r3, #0]
 8016fda:	e7db      	b.n	8016f94 <_puts_r+0x88>
 8016fdc:	08017bb8 	.word	0x08017bb8
 8016fe0:	08017bd8 	.word	0x08017bd8
 8016fe4:	08017b98 	.word	0x08017b98

08016fe8 <puts>:
 8016fe8:	4b02      	ldr	r3, [pc, #8]	; (8016ff4 <puts+0xc>)
 8016fea:	4601      	mov	r1, r0
 8016fec:	6818      	ldr	r0, [r3, #0]
 8016fee:	f7ff bf8d 	b.w	8016f0c <_puts_r>
 8016ff2:	bf00      	nop
 8016ff4:	240000a4 	.word	0x240000a4

08016ff8 <_sbrk_r>:
 8016ff8:	b538      	push	{r3, r4, r5, lr}
 8016ffa:	4d06      	ldr	r5, [pc, #24]	; (8017014 <_sbrk_r+0x1c>)
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	4604      	mov	r4, r0
 8017000:	4608      	mov	r0, r1
 8017002:	602b      	str	r3, [r5, #0]
 8017004:	f7ec ffd2 	bl	8003fac <_sbrk>
 8017008:	1c43      	adds	r3, r0, #1
 801700a:	d102      	bne.n	8017012 <_sbrk_r+0x1a>
 801700c:	682b      	ldr	r3, [r5, #0]
 801700e:	b103      	cbz	r3, 8017012 <_sbrk_r+0x1a>
 8017010:	6023      	str	r3, [r4, #0]
 8017012:	bd38      	pop	{r3, r4, r5, pc}
 8017014:	24005a8c 	.word	0x24005a8c

08017018 <__swbuf_r>:
 8017018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701a:	460e      	mov	r6, r1
 801701c:	4614      	mov	r4, r2
 801701e:	4605      	mov	r5, r0
 8017020:	b118      	cbz	r0, 801702a <__swbuf_r+0x12>
 8017022:	6983      	ldr	r3, [r0, #24]
 8017024:	b90b      	cbnz	r3, 801702a <__swbuf_r+0x12>
 8017026:	f000 f9d1 	bl	80173cc <__sinit>
 801702a:	4b21      	ldr	r3, [pc, #132]	; (80170b0 <__swbuf_r+0x98>)
 801702c:	429c      	cmp	r4, r3
 801702e:	d12b      	bne.n	8017088 <__swbuf_r+0x70>
 8017030:	686c      	ldr	r4, [r5, #4]
 8017032:	69a3      	ldr	r3, [r4, #24]
 8017034:	60a3      	str	r3, [r4, #8]
 8017036:	89a3      	ldrh	r3, [r4, #12]
 8017038:	071a      	lsls	r2, r3, #28
 801703a:	d52f      	bpl.n	801709c <__swbuf_r+0x84>
 801703c:	6923      	ldr	r3, [r4, #16]
 801703e:	b36b      	cbz	r3, 801709c <__swbuf_r+0x84>
 8017040:	6923      	ldr	r3, [r4, #16]
 8017042:	6820      	ldr	r0, [r4, #0]
 8017044:	1ac0      	subs	r0, r0, r3
 8017046:	6963      	ldr	r3, [r4, #20]
 8017048:	b2f6      	uxtb	r6, r6
 801704a:	4283      	cmp	r3, r0
 801704c:	4637      	mov	r7, r6
 801704e:	dc04      	bgt.n	801705a <__swbuf_r+0x42>
 8017050:	4621      	mov	r1, r4
 8017052:	4628      	mov	r0, r5
 8017054:	f000 f926 	bl	80172a4 <_fflush_r>
 8017058:	bb30      	cbnz	r0, 80170a8 <__swbuf_r+0x90>
 801705a:	68a3      	ldr	r3, [r4, #8]
 801705c:	3b01      	subs	r3, #1
 801705e:	60a3      	str	r3, [r4, #8]
 8017060:	6823      	ldr	r3, [r4, #0]
 8017062:	1c5a      	adds	r2, r3, #1
 8017064:	6022      	str	r2, [r4, #0]
 8017066:	701e      	strb	r6, [r3, #0]
 8017068:	6963      	ldr	r3, [r4, #20]
 801706a:	3001      	adds	r0, #1
 801706c:	4283      	cmp	r3, r0
 801706e:	d004      	beq.n	801707a <__swbuf_r+0x62>
 8017070:	89a3      	ldrh	r3, [r4, #12]
 8017072:	07db      	lsls	r3, r3, #31
 8017074:	d506      	bpl.n	8017084 <__swbuf_r+0x6c>
 8017076:	2e0a      	cmp	r6, #10
 8017078:	d104      	bne.n	8017084 <__swbuf_r+0x6c>
 801707a:	4621      	mov	r1, r4
 801707c:	4628      	mov	r0, r5
 801707e:	f000 f911 	bl	80172a4 <_fflush_r>
 8017082:	b988      	cbnz	r0, 80170a8 <__swbuf_r+0x90>
 8017084:	4638      	mov	r0, r7
 8017086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017088:	4b0a      	ldr	r3, [pc, #40]	; (80170b4 <__swbuf_r+0x9c>)
 801708a:	429c      	cmp	r4, r3
 801708c:	d101      	bne.n	8017092 <__swbuf_r+0x7a>
 801708e:	68ac      	ldr	r4, [r5, #8]
 8017090:	e7cf      	b.n	8017032 <__swbuf_r+0x1a>
 8017092:	4b09      	ldr	r3, [pc, #36]	; (80170b8 <__swbuf_r+0xa0>)
 8017094:	429c      	cmp	r4, r3
 8017096:	bf08      	it	eq
 8017098:	68ec      	ldreq	r4, [r5, #12]
 801709a:	e7ca      	b.n	8017032 <__swbuf_r+0x1a>
 801709c:	4621      	mov	r1, r4
 801709e:	4628      	mov	r0, r5
 80170a0:	f000 f80c 	bl	80170bc <__swsetup_r>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	d0cb      	beq.n	8017040 <__swbuf_r+0x28>
 80170a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170ac:	e7ea      	b.n	8017084 <__swbuf_r+0x6c>
 80170ae:	bf00      	nop
 80170b0:	08017bb8 	.word	0x08017bb8
 80170b4:	08017bd8 	.word	0x08017bd8
 80170b8:	08017b98 	.word	0x08017b98

080170bc <__swsetup_r>:
 80170bc:	4b32      	ldr	r3, [pc, #200]	; (8017188 <__swsetup_r+0xcc>)
 80170be:	b570      	push	{r4, r5, r6, lr}
 80170c0:	681d      	ldr	r5, [r3, #0]
 80170c2:	4606      	mov	r6, r0
 80170c4:	460c      	mov	r4, r1
 80170c6:	b125      	cbz	r5, 80170d2 <__swsetup_r+0x16>
 80170c8:	69ab      	ldr	r3, [r5, #24]
 80170ca:	b913      	cbnz	r3, 80170d2 <__swsetup_r+0x16>
 80170cc:	4628      	mov	r0, r5
 80170ce:	f000 f97d 	bl	80173cc <__sinit>
 80170d2:	4b2e      	ldr	r3, [pc, #184]	; (801718c <__swsetup_r+0xd0>)
 80170d4:	429c      	cmp	r4, r3
 80170d6:	d10f      	bne.n	80170f8 <__swsetup_r+0x3c>
 80170d8:	686c      	ldr	r4, [r5, #4]
 80170da:	89a3      	ldrh	r3, [r4, #12]
 80170dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170e0:	0719      	lsls	r1, r3, #28
 80170e2:	d42c      	bmi.n	801713e <__swsetup_r+0x82>
 80170e4:	06dd      	lsls	r5, r3, #27
 80170e6:	d411      	bmi.n	801710c <__swsetup_r+0x50>
 80170e8:	2309      	movs	r3, #9
 80170ea:	6033      	str	r3, [r6, #0]
 80170ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80170f0:	81a3      	strh	r3, [r4, #12]
 80170f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170f6:	e03e      	b.n	8017176 <__swsetup_r+0xba>
 80170f8:	4b25      	ldr	r3, [pc, #148]	; (8017190 <__swsetup_r+0xd4>)
 80170fa:	429c      	cmp	r4, r3
 80170fc:	d101      	bne.n	8017102 <__swsetup_r+0x46>
 80170fe:	68ac      	ldr	r4, [r5, #8]
 8017100:	e7eb      	b.n	80170da <__swsetup_r+0x1e>
 8017102:	4b24      	ldr	r3, [pc, #144]	; (8017194 <__swsetup_r+0xd8>)
 8017104:	429c      	cmp	r4, r3
 8017106:	bf08      	it	eq
 8017108:	68ec      	ldreq	r4, [r5, #12]
 801710a:	e7e6      	b.n	80170da <__swsetup_r+0x1e>
 801710c:	0758      	lsls	r0, r3, #29
 801710e:	d512      	bpl.n	8017136 <__swsetup_r+0x7a>
 8017110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017112:	b141      	cbz	r1, 8017126 <__swsetup_r+0x6a>
 8017114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017118:	4299      	cmp	r1, r3
 801711a:	d002      	beq.n	8017122 <__swsetup_r+0x66>
 801711c:	4630      	mov	r0, r6
 801711e:	f7ff fe15 	bl	8016d4c <_free_r>
 8017122:	2300      	movs	r3, #0
 8017124:	6363      	str	r3, [r4, #52]	; 0x34
 8017126:	89a3      	ldrh	r3, [r4, #12]
 8017128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801712c:	81a3      	strh	r3, [r4, #12]
 801712e:	2300      	movs	r3, #0
 8017130:	6063      	str	r3, [r4, #4]
 8017132:	6923      	ldr	r3, [r4, #16]
 8017134:	6023      	str	r3, [r4, #0]
 8017136:	89a3      	ldrh	r3, [r4, #12]
 8017138:	f043 0308 	orr.w	r3, r3, #8
 801713c:	81a3      	strh	r3, [r4, #12]
 801713e:	6923      	ldr	r3, [r4, #16]
 8017140:	b94b      	cbnz	r3, 8017156 <__swsetup_r+0x9a>
 8017142:	89a3      	ldrh	r3, [r4, #12]
 8017144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801714c:	d003      	beq.n	8017156 <__swsetup_r+0x9a>
 801714e:	4621      	mov	r1, r4
 8017150:	4630      	mov	r0, r6
 8017152:	f000 fa01 	bl	8017558 <__smakebuf_r>
 8017156:	89a0      	ldrh	r0, [r4, #12]
 8017158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801715c:	f010 0301 	ands.w	r3, r0, #1
 8017160:	d00a      	beq.n	8017178 <__swsetup_r+0xbc>
 8017162:	2300      	movs	r3, #0
 8017164:	60a3      	str	r3, [r4, #8]
 8017166:	6963      	ldr	r3, [r4, #20]
 8017168:	425b      	negs	r3, r3
 801716a:	61a3      	str	r3, [r4, #24]
 801716c:	6923      	ldr	r3, [r4, #16]
 801716e:	b943      	cbnz	r3, 8017182 <__swsetup_r+0xc6>
 8017170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017174:	d1ba      	bne.n	80170ec <__swsetup_r+0x30>
 8017176:	bd70      	pop	{r4, r5, r6, pc}
 8017178:	0781      	lsls	r1, r0, #30
 801717a:	bf58      	it	pl
 801717c:	6963      	ldrpl	r3, [r4, #20]
 801717e:	60a3      	str	r3, [r4, #8]
 8017180:	e7f4      	b.n	801716c <__swsetup_r+0xb0>
 8017182:	2000      	movs	r0, #0
 8017184:	e7f7      	b.n	8017176 <__swsetup_r+0xba>
 8017186:	bf00      	nop
 8017188:	240000a4 	.word	0x240000a4
 801718c:	08017bb8 	.word	0x08017bb8
 8017190:	08017bd8 	.word	0x08017bd8
 8017194:	08017b98 	.word	0x08017b98

08017198 <__sflush_r>:
 8017198:	898a      	ldrh	r2, [r1, #12]
 801719a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801719e:	4605      	mov	r5, r0
 80171a0:	0710      	lsls	r0, r2, #28
 80171a2:	460c      	mov	r4, r1
 80171a4:	d458      	bmi.n	8017258 <__sflush_r+0xc0>
 80171a6:	684b      	ldr	r3, [r1, #4]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	dc05      	bgt.n	80171b8 <__sflush_r+0x20>
 80171ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	dc02      	bgt.n	80171b8 <__sflush_r+0x20>
 80171b2:	2000      	movs	r0, #0
 80171b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171ba:	2e00      	cmp	r6, #0
 80171bc:	d0f9      	beq.n	80171b2 <__sflush_r+0x1a>
 80171be:	2300      	movs	r3, #0
 80171c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80171c4:	682f      	ldr	r7, [r5, #0]
 80171c6:	602b      	str	r3, [r5, #0]
 80171c8:	d032      	beq.n	8017230 <__sflush_r+0x98>
 80171ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80171cc:	89a3      	ldrh	r3, [r4, #12]
 80171ce:	075a      	lsls	r2, r3, #29
 80171d0:	d505      	bpl.n	80171de <__sflush_r+0x46>
 80171d2:	6863      	ldr	r3, [r4, #4]
 80171d4:	1ac0      	subs	r0, r0, r3
 80171d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171d8:	b10b      	cbz	r3, 80171de <__sflush_r+0x46>
 80171da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80171dc:	1ac0      	subs	r0, r0, r3
 80171de:	2300      	movs	r3, #0
 80171e0:	4602      	mov	r2, r0
 80171e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171e4:	6a21      	ldr	r1, [r4, #32]
 80171e6:	4628      	mov	r0, r5
 80171e8:	47b0      	blx	r6
 80171ea:	1c43      	adds	r3, r0, #1
 80171ec:	89a3      	ldrh	r3, [r4, #12]
 80171ee:	d106      	bne.n	80171fe <__sflush_r+0x66>
 80171f0:	6829      	ldr	r1, [r5, #0]
 80171f2:	291d      	cmp	r1, #29
 80171f4:	d82c      	bhi.n	8017250 <__sflush_r+0xb8>
 80171f6:	4a2a      	ldr	r2, [pc, #168]	; (80172a0 <__sflush_r+0x108>)
 80171f8:	40ca      	lsrs	r2, r1
 80171fa:	07d6      	lsls	r6, r2, #31
 80171fc:	d528      	bpl.n	8017250 <__sflush_r+0xb8>
 80171fe:	2200      	movs	r2, #0
 8017200:	6062      	str	r2, [r4, #4]
 8017202:	04d9      	lsls	r1, r3, #19
 8017204:	6922      	ldr	r2, [r4, #16]
 8017206:	6022      	str	r2, [r4, #0]
 8017208:	d504      	bpl.n	8017214 <__sflush_r+0x7c>
 801720a:	1c42      	adds	r2, r0, #1
 801720c:	d101      	bne.n	8017212 <__sflush_r+0x7a>
 801720e:	682b      	ldr	r3, [r5, #0]
 8017210:	b903      	cbnz	r3, 8017214 <__sflush_r+0x7c>
 8017212:	6560      	str	r0, [r4, #84]	; 0x54
 8017214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017216:	602f      	str	r7, [r5, #0]
 8017218:	2900      	cmp	r1, #0
 801721a:	d0ca      	beq.n	80171b2 <__sflush_r+0x1a>
 801721c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017220:	4299      	cmp	r1, r3
 8017222:	d002      	beq.n	801722a <__sflush_r+0x92>
 8017224:	4628      	mov	r0, r5
 8017226:	f7ff fd91 	bl	8016d4c <_free_r>
 801722a:	2000      	movs	r0, #0
 801722c:	6360      	str	r0, [r4, #52]	; 0x34
 801722e:	e7c1      	b.n	80171b4 <__sflush_r+0x1c>
 8017230:	6a21      	ldr	r1, [r4, #32]
 8017232:	2301      	movs	r3, #1
 8017234:	4628      	mov	r0, r5
 8017236:	47b0      	blx	r6
 8017238:	1c41      	adds	r1, r0, #1
 801723a:	d1c7      	bne.n	80171cc <__sflush_r+0x34>
 801723c:	682b      	ldr	r3, [r5, #0]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d0c4      	beq.n	80171cc <__sflush_r+0x34>
 8017242:	2b1d      	cmp	r3, #29
 8017244:	d001      	beq.n	801724a <__sflush_r+0xb2>
 8017246:	2b16      	cmp	r3, #22
 8017248:	d101      	bne.n	801724e <__sflush_r+0xb6>
 801724a:	602f      	str	r7, [r5, #0]
 801724c:	e7b1      	b.n	80171b2 <__sflush_r+0x1a>
 801724e:	89a3      	ldrh	r3, [r4, #12]
 8017250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017254:	81a3      	strh	r3, [r4, #12]
 8017256:	e7ad      	b.n	80171b4 <__sflush_r+0x1c>
 8017258:	690f      	ldr	r7, [r1, #16]
 801725a:	2f00      	cmp	r7, #0
 801725c:	d0a9      	beq.n	80171b2 <__sflush_r+0x1a>
 801725e:	0793      	lsls	r3, r2, #30
 8017260:	680e      	ldr	r6, [r1, #0]
 8017262:	bf08      	it	eq
 8017264:	694b      	ldreq	r3, [r1, #20]
 8017266:	600f      	str	r7, [r1, #0]
 8017268:	bf18      	it	ne
 801726a:	2300      	movne	r3, #0
 801726c:	eba6 0807 	sub.w	r8, r6, r7
 8017270:	608b      	str	r3, [r1, #8]
 8017272:	f1b8 0f00 	cmp.w	r8, #0
 8017276:	dd9c      	ble.n	80171b2 <__sflush_r+0x1a>
 8017278:	6a21      	ldr	r1, [r4, #32]
 801727a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801727c:	4643      	mov	r3, r8
 801727e:	463a      	mov	r2, r7
 8017280:	4628      	mov	r0, r5
 8017282:	47b0      	blx	r6
 8017284:	2800      	cmp	r0, #0
 8017286:	dc06      	bgt.n	8017296 <__sflush_r+0xfe>
 8017288:	89a3      	ldrh	r3, [r4, #12]
 801728a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801728e:	81a3      	strh	r3, [r4, #12]
 8017290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017294:	e78e      	b.n	80171b4 <__sflush_r+0x1c>
 8017296:	4407      	add	r7, r0
 8017298:	eba8 0800 	sub.w	r8, r8, r0
 801729c:	e7e9      	b.n	8017272 <__sflush_r+0xda>
 801729e:	bf00      	nop
 80172a0:	20400001 	.word	0x20400001

080172a4 <_fflush_r>:
 80172a4:	b538      	push	{r3, r4, r5, lr}
 80172a6:	690b      	ldr	r3, [r1, #16]
 80172a8:	4605      	mov	r5, r0
 80172aa:	460c      	mov	r4, r1
 80172ac:	b913      	cbnz	r3, 80172b4 <_fflush_r+0x10>
 80172ae:	2500      	movs	r5, #0
 80172b0:	4628      	mov	r0, r5
 80172b2:	bd38      	pop	{r3, r4, r5, pc}
 80172b4:	b118      	cbz	r0, 80172be <_fflush_r+0x1a>
 80172b6:	6983      	ldr	r3, [r0, #24]
 80172b8:	b90b      	cbnz	r3, 80172be <_fflush_r+0x1a>
 80172ba:	f000 f887 	bl	80173cc <__sinit>
 80172be:	4b14      	ldr	r3, [pc, #80]	; (8017310 <_fflush_r+0x6c>)
 80172c0:	429c      	cmp	r4, r3
 80172c2:	d11b      	bne.n	80172fc <_fflush_r+0x58>
 80172c4:	686c      	ldr	r4, [r5, #4]
 80172c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d0ef      	beq.n	80172ae <_fflush_r+0xa>
 80172ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80172d0:	07d0      	lsls	r0, r2, #31
 80172d2:	d404      	bmi.n	80172de <_fflush_r+0x3a>
 80172d4:	0599      	lsls	r1, r3, #22
 80172d6:	d402      	bmi.n	80172de <_fflush_r+0x3a>
 80172d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172da:	f000 f915 	bl	8017508 <__retarget_lock_acquire_recursive>
 80172de:	4628      	mov	r0, r5
 80172e0:	4621      	mov	r1, r4
 80172e2:	f7ff ff59 	bl	8017198 <__sflush_r>
 80172e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172e8:	07da      	lsls	r2, r3, #31
 80172ea:	4605      	mov	r5, r0
 80172ec:	d4e0      	bmi.n	80172b0 <_fflush_r+0xc>
 80172ee:	89a3      	ldrh	r3, [r4, #12]
 80172f0:	059b      	lsls	r3, r3, #22
 80172f2:	d4dd      	bmi.n	80172b0 <_fflush_r+0xc>
 80172f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172f6:	f000 f908 	bl	801750a <__retarget_lock_release_recursive>
 80172fa:	e7d9      	b.n	80172b0 <_fflush_r+0xc>
 80172fc:	4b05      	ldr	r3, [pc, #20]	; (8017314 <_fflush_r+0x70>)
 80172fe:	429c      	cmp	r4, r3
 8017300:	d101      	bne.n	8017306 <_fflush_r+0x62>
 8017302:	68ac      	ldr	r4, [r5, #8]
 8017304:	e7df      	b.n	80172c6 <_fflush_r+0x22>
 8017306:	4b04      	ldr	r3, [pc, #16]	; (8017318 <_fflush_r+0x74>)
 8017308:	429c      	cmp	r4, r3
 801730a:	bf08      	it	eq
 801730c:	68ec      	ldreq	r4, [r5, #12]
 801730e:	e7da      	b.n	80172c6 <_fflush_r+0x22>
 8017310:	08017bb8 	.word	0x08017bb8
 8017314:	08017bd8 	.word	0x08017bd8
 8017318:	08017b98 	.word	0x08017b98

0801731c <std>:
 801731c:	2300      	movs	r3, #0
 801731e:	b510      	push	{r4, lr}
 8017320:	4604      	mov	r4, r0
 8017322:	e9c0 3300 	strd	r3, r3, [r0]
 8017326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801732a:	6083      	str	r3, [r0, #8]
 801732c:	8181      	strh	r1, [r0, #12]
 801732e:	6643      	str	r3, [r0, #100]	; 0x64
 8017330:	81c2      	strh	r2, [r0, #14]
 8017332:	6183      	str	r3, [r0, #24]
 8017334:	4619      	mov	r1, r3
 8017336:	2208      	movs	r2, #8
 8017338:	305c      	adds	r0, #92	; 0x5c
 801733a:	f7ff fcff 	bl	8016d3c <memset>
 801733e:	4b05      	ldr	r3, [pc, #20]	; (8017354 <std+0x38>)
 8017340:	6263      	str	r3, [r4, #36]	; 0x24
 8017342:	4b05      	ldr	r3, [pc, #20]	; (8017358 <std+0x3c>)
 8017344:	62a3      	str	r3, [r4, #40]	; 0x28
 8017346:	4b05      	ldr	r3, [pc, #20]	; (801735c <std+0x40>)
 8017348:	62e3      	str	r3, [r4, #44]	; 0x2c
 801734a:	4b05      	ldr	r3, [pc, #20]	; (8017360 <std+0x44>)
 801734c:	6224      	str	r4, [r4, #32]
 801734e:	6323      	str	r3, [r4, #48]	; 0x30
 8017350:	bd10      	pop	{r4, pc}
 8017352:	bf00      	nop
 8017354:	080175f1 	.word	0x080175f1
 8017358:	08017613 	.word	0x08017613
 801735c:	0801764b 	.word	0x0801764b
 8017360:	0801766f 	.word	0x0801766f

08017364 <_cleanup_r>:
 8017364:	4901      	ldr	r1, [pc, #4]	; (801736c <_cleanup_r+0x8>)
 8017366:	f000 b8af 	b.w	80174c8 <_fwalk_reent>
 801736a:	bf00      	nop
 801736c:	080172a5 	.word	0x080172a5

08017370 <__sfmoreglue>:
 8017370:	b570      	push	{r4, r5, r6, lr}
 8017372:	2268      	movs	r2, #104	; 0x68
 8017374:	1e4d      	subs	r5, r1, #1
 8017376:	4355      	muls	r5, r2
 8017378:	460e      	mov	r6, r1
 801737a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801737e:	f7ff fd51 	bl	8016e24 <_malloc_r>
 8017382:	4604      	mov	r4, r0
 8017384:	b140      	cbz	r0, 8017398 <__sfmoreglue+0x28>
 8017386:	2100      	movs	r1, #0
 8017388:	e9c0 1600 	strd	r1, r6, [r0]
 801738c:	300c      	adds	r0, #12
 801738e:	60a0      	str	r0, [r4, #8]
 8017390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017394:	f7ff fcd2 	bl	8016d3c <memset>
 8017398:	4620      	mov	r0, r4
 801739a:	bd70      	pop	{r4, r5, r6, pc}

0801739c <__sfp_lock_acquire>:
 801739c:	4801      	ldr	r0, [pc, #4]	; (80173a4 <__sfp_lock_acquire+0x8>)
 801739e:	f000 b8b3 	b.w	8017508 <__retarget_lock_acquire_recursive>
 80173a2:	bf00      	nop
 80173a4:	24005a89 	.word	0x24005a89

080173a8 <__sfp_lock_release>:
 80173a8:	4801      	ldr	r0, [pc, #4]	; (80173b0 <__sfp_lock_release+0x8>)
 80173aa:	f000 b8ae 	b.w	801750a <__retarget_lock_release_recursive>
 80173ae:	bf00      	nop
 80173b0:	24005a89 	.word	0x24005a89

080173b4 <__sinit_lock_acquire>:
 80173b4:	4801      	ldr	r0, [pc, #4]	; (80173bc <__sinit_lock_acquire+0x8>)
 80173b6:	f000 b8a7 	b.w	8017508 <__retarget_lock_acquire_recursive>
 80173ba:	bf00      	nop
 80173bc:	24005a8a 	.word	0x24005a8a

080173c0 <__sinit_lock_release>:
 80173c0:	4801      	ldr	r0, [pc, #4]	; (80173c8 <__sinit_lock_release+0x8>)
 80173c2:	f000 b8a2 	b.w	801750a <__retarget_lock_release_recursive>
 80173c6:	bf00      	nop
 80173c8:	24005a8a 	.word	0x24005a8a

080173cc <__sinit>:
 80173cc:	b510      	push	{r4, lr}
 80173ce:	4604      	mov	r4, r0
 80173d0:	f7ff fff0 	bl	80173b4 <__sinit_lock_acquire>
 80173d4:	69a3      	ldr	r3, [r4, #24]
 80173d6:	b11b      	cbz	r3, 80173e0 <__sinit+0x14>
 80173d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173dc:	f7ff bff0 	b.w	80173c0 <__sinit_lock_release>
 80173e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80173e4:	6523      	str	r3, [r4, #80]	; 0x50
 80173e6:	4b13      	ldr	r3, [pc, #76]	; (8017434 <__sinit+0x68>)
 80173e8:	4a13      	ldr	r2, [pc, #76]	; (8017438 <__sinit+0x6c>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80173ee:	42a3      	cmp	r3, r4
 80173f0:	bf04      	itt	eq
 80173f2:	2301      	moveq	r3, #1
 80173f4:	61a3      	streq	r3, [r4, #24]
 80173f6:	4620      	mov	r0, r4
 80173f8:	f000 f820 	bl	801743c <__sfp>
 80173fc:	6060      	str	r0, [r4, #4]
 80173fe:	4620      	mov	r0, r4
 8017400:	f000 f81c 	bl	801743c <__sfp>
 8017404:	60a0      	str	r0, [r4, #8]
 8017406:	4620      	mov	r0, r4
 8017408:	f000 f818 	bl	801743c <__sfp>
 801740c:	2200      	movs	r2, #0
 801740e:	60e0      	str	r0, [r4, #12]
 8017410:	2104      	movs	r1, #4
 8017412:	6860      	ldr	r0, [r4, #4]
 8017414:	f7ff ff82 	bl	801731c <std>
 8017418:	68a0      	ldr	r0, [r4, #8]
 801741a:	2201      	movs	r2, #1
 801741c:	2109      	movs	r1, #9
 801741e:	f7ff ff7d 	bl	801731c <std>
 8017422:	68e0      	ldr	r0, [r4, #12]
 8017424:	2202      	movs	r2, #2
 8017426:	2112      	movs	r1, #18
 8017428:	f7ff ff78 	bl	801731c <std>
 801742c:	2301      	movs	r3, #1
 801742e:	61a3      	str	r3, [r4, #24]
 8017430:	e7d2      	b.n	80173d8 <__sinit+0xc>
 8017432:	bf00      	nop
 8017434:	08017b94 	.word	0x08017b94
 8017438:	08017365 	.word	0x08017365

0801743c <__sfp>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	4607      	mov	r7, r0
 8017440:	f7ff ffac 	bl	801739c <__sfp_lock_acquire>
 8017444:	4b1e      	ldr	r3, [pc, #120]	; (80174c0 <__sfp+0x84>)
 8017446:	681e      	ldr	r6, [r3, #0]
 8017448:	69b3      	ldr	r3, [r6, #24]
 801744a:	b913      	cbnz	r3, 8017452 <__sfp+0x16>
 801744c:	4630      	mov	r0, r6
 801744e:	f7ff ffbd 	bl	80173cc <__sinit>
 8017452:	3648      	adds	r6, #72	; 0x48
 8017454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017458:	3b01      	subs	r3, #1
 801745a:	d503      	bpl.n	8017464 <__sfp+0x28>
 801745c:	6833      	ldr	r3, [r6, #0]
 801745e:	b30b      	cbz	r3, 80174a4 <__sfp+0x68>
 8017460:	6836      	ldr	r6, [r6, #0]
 8017462:	e7f7      	b.n	8017454 <__sfp+0x18>
 8017464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017468:	b9d5      	cbnz	r5, 80174a0 <__sfp+0x64>
 801746a:	4b16      	ldr	r3, [pc, #88]	; (80174c4 <__sfp+0x88>)
 801746c:	60e3      	str	r3, [r4, #12]
 801746e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017472:	6665      	str	r5, [r4, #100]	; 0x64
 8017474:	f000 f847 	bl	8017506 <__retarget_lock_init_recursive>
 8017478:	f7ff ff96 	bl	80173a8 <__sfp_lock_release>
 801747c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017484:	6025      	str	r5, [r4, #0]
 8017486:	61a5      	str	r5, [r4, #24]
 8017488:	2208      	movs	r2, #8
 801748a:	4629      	mov	r1, r5
 801748c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017490:	f7ff fc54 	bl	8016d3c <memset>
 8017494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801749c:	4620      	mov	r0, r4
 801749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a0:	3468      	adds	r4, #104	; 0x68
 80174a2:	e7d9      	b.n	8017458 <__sfp+0x1c>
 80174a4:	2104      	movs	r1, #4
 80174a6:	4638      	mov	r0, r7
 80174a8:	f7ff ff62 	bl	8017370 <__sfmoreglue>
 80174ac:	4604      	mov	r4, r0
 80174ae:	6030      	str	r0, [r6, #0]
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d1d5      	bne.n	8017460 <__sfp+0x24>
 80174b4:	f7ff ff78 	bl	80173a8 <__sfp_lock_release>
 80174b8:	230c      	movs	r3, #12
 80174ba:	603b      	str	r3, [r7, #0]
 80174bc:	e7ee      	b.n	801749c <__sfp+0x60>
 80174be:	bf00      	nop
 80174c0:	08017b94 	.word	0x08017b94
 80174c4:	ffff0001 	.word	0xffff0001

080174c8 <_fwalk_reent>:
 80174c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174cc:	4606      	mov	r6, r0
 80174ce:	4688      	mov	r8, r1
 80174d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80174d4:	2700      	movs	r7, #0
 80174d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174da:	f1b9 0901 	subs.w	r9, r9, #1
 80174de:	d505      	bpl.n	80174ec <_fwalk_reent+0x24>
 80174e0:	6824      	ldr	r4, [r4, #0]
 80174e2:	2c00      	cmp	r4, #0
 80174e4:	d1f7      	bne.n	80174d6 <_fwalk_reent+0xe>
 80174e6:	4638      	mov	r0, r7
 80174e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ec:	89ab      	ldrh	r3, [r5, #12]
 80174ee:	2b01      	cmp	r3, #1
 80174f0:	d907      	bls.n	8017502 <_fwalk_reent+0x3a>
 80174f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174f6:	3301      	adds	r3, #1
 80174f8:	d003      	beq.n	8017502 <_fwalk_reent+0x3a>
 80174fa:	4629      	mov	r1, r5
 80174fc:	4630      	mov	r0, r6
 80174fe:	47c0      	blx	r8
 8017500:	4307      	orrs	r7, r0
 8017502:	3568      	adds	r5, #104	; 0x68
 8017504:	e7e9      	b.n	80174da <_fwalk_reent+0x12>

08017506 <__retarget_lock_init_recursive>:
 8017506:	4770      	bx	lr

08017508 <__retarget_lock_acquire_recursive>:
 8017508:	4770      	bx	lr

0801750a <__retarget_lock_release_recursive>:
 801750a:	4770      	bx	lr

0801750c <__swhatbuf_r>:
 801750c:	b570      	push	{r4, r5, r6, lr}
 801750e:	460e      	mov	r6, r1
 8017510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017514:	2900      	cmp	r1, #0
 8017516:	b096      	sub	sp, #88	; 0x58
 8017518:	4614      	mov	r4, r2
 801751a:	461d      	mov	r5, r3
 801751c:	da08      	bge.n	8017530 <__swhatbuf_r+0x24>
 801751e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017522:	2200      	movs	r2, #0
 8017524:	602a      	str	r2, [r5, #0]
 8017526:	061a      	lsls	r2, r3, #24
 8017528:	d410      	bmi.n	801754c <__swhatbuf_r+0x40>
 801752a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801752e:	e00e      	b.n	801754e <__swhatbuf_r+0x42>
 8017530:	466a      	mov	r2, sp
 8017532:	f000 f8c3 	bl	80176bc <_fstat_r>
 8017536:	2800      	cmp	r0, #0
 8017538:	dbf1      	blt.n	801751e <__swhatbuf_r+0x12>
 801753a:	9a01      	ldr	r2, [sp, #4]
 801753c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017540:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017544:	425a      	negs	r2, r3
 8017546:	415a      	adcs	r2, r3
 8017548:	602a      	str	r2, [r5, #0]
 801754a:	e7ee      	b.n	801752a <__swhatbuf_r+0x1e>
 801754c:	2340      	movs	r3, #64	; 0x40
 801754e:	2000      	movs	r0, #0
 8017550:	6023      	str	r3, [r4, #0]
 8017552:	b016      	add	sp, #88	; 0x58
 8017554:	bd70      	pop	{r4, r5, r6, pc}
	...

08017558 <__smakebuf_r>:
 8017558:	898b      	ldrh	r3, [r1, #12]
 801755a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801755c:	079d      	lsls	r5, r3, #30
 801755e:	4606      	mov	r6, r0
 8017560:	460c      	mov	r4, r1
 8017562:	d507      	bpl.n	8017574 <__smakebuf_r+0x1c>
 8017564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017568:	6023      	str	r3, [r4, #0]
 801756a:	6123      	str	r3, [r4, #16]
 801756c:	2301      	movs	r3, #1
 801756e:	6163      	str	r3, [r4, #20]
 8017570:	b002      	add	sp, #8
 8017572:	bd70      	pop	{r4, r5, r6, pc}
 8017574:	ab01      	add	r3, sp, #4
 8017576:	466a      	mov	r2, sp
 8017578:	f7ff ffc8 	bl	801750c <__swhatbuf_r>
 801757c:	9900      	ldr	r1, [sp, #0]
 801757e:	4605      	mov	r5, r0
 8017580:	4630      	mov	r0, r6
 8017582:	f7ff fc4f 	bl	8016e24 <_malloc_r>
 8017586:	b948      	cbnz	r0, 801759c <__smakebuf_r+0x44>
 8017588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801758c:	059a      	lsls	r2, r3, #22
 801758e:	d4ef      	bmi.n	8017570 <__smakebuf_r+0x18>
 8017590:	f023 0303 	bic.w	r3, r3, #3
 8017594:	f043 0302 	orr.w	r3, r3, #2
 8017598:	81a3      	strh	r3, [r4, #12]
 801759a:	e7e3      	b.n	8017564 <__smakebuf_r+0xc>
 801759c:	4b0d      	ldr	r3, [pc, #52]	; (80175d4 <__smakebuf_r+0x7c>)
 801759e:	62b3      	str	r3, [r6, #40]	; 0x28
 80175a0:	89a3      	ldrh	r3, [r4, #12]
 80175a2:	6020      	str	r0, [r4, #0]
 80175a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175a8:	81a3      	strh	r3, [r4, #12]
 80175aa:	9b00      	ldr	r3, [sp, #0]
 80175ac:	6163      	str	r3, [r4, #20]
 80175ae:	9b01      	ldr	r3, [sp, #4]
 80175b0:	6120      	str	r0, [r4, #16]
 80175b2:	b15b      	cbz	r3, 80175cc <__smakebuf_r+0x74>
 80175b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175b8:	4630      	mov	r0, r6
 80175ba:	f000 f891 	bl	80176e0 <_isatty_r>
 80175be:	b128      	cbz	r0, 80175cc <__smakebuf_r+0x74>
 80175c0:	89a3      	ldrh	r3, [r4, #12]
 80175c2:	f023 0303 	bic.w	r3, r3, #3
 80175c6:	f043 0301 	orr.w	r3, r3, #1
 80175ca:	81a3      	strh	r3, [r4, #12]
 80175cc:	89a0      	ldrh	r0, [r4, #12]
 80175ce:	4305      	orrs	r5, r0
 80175d0:	81a5      	strh	r5, [r4, #12]
 80175d2:	e7cd      	b.n	8017570 <__smakebuf_r+0x18>
 80175d4:	08017365 	.word	0x08017365

080175d8 <__malloc_lock>:
 80175d8:	4801      	ldr	r0, [pc, #4]	; (80175e0 <__malloc_lock+0x8>)
 80175da:	f7ff bf95 	b.w	8017508 <__retarget_lock_acquire_recursive>
 80175de:	bf00      	nop
 80175e0:	24005a88 	.word	0x24005a88

080175e4 <__malloc_unlock>:
 80175e4:	4801      	ldr	r0, [pc, #4]	; (80175ec <__malloc_unlock+0x8>)
 80175e6:	f7ff bf90 	b.w	801750a <__retarget_lock_release_recursive>
 80175ea:	bf00      	nop
 80175ec:	24005a88 	.word	0x24005a88

080175f0 <__sread>:
 80175f0:	b510      	push	{r4, lr}
 80175f2:	460c      	mov	r4, r1
 80175f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f8:	f000 f894 	bl	8017724 <_read_r>
 80175fc:	2800      	cmp	r0, #0
 80175fe:	bfab      	itete	ge
 8017600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017602:	89a3      	ldrhlt	r3, [r4, #12]
 8017604:	181b      	addge	r3, r3, r0
 8017606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801760a:	bfac      	ite	ge
 801760c:	6563      	strge	r3, [r4, #84]	; 0x54
 801760e:	81a3      	strhlt	r3, [r4, #12]
 8017610:	bd10      	pop	{r4, pc}

08017612 <__swrite>:
 8017612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017616:	461f      	mov	r7, r3
 8017618:	898b      	ldrh	r3, [r1, #12]
 801761a:	05db      	lsls	r3, r3, #23
 801761c:	4605      	mov	r5, r0
 801761e:	460c      	mov	r4, r1
 8017620:	4616      	mov	r6, r2
 8017622:	d505      	bpl.n	8017630 <__swrite+0x1e>
 8017624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017628:	2302      	movs	r3, #2
 801762a:	2200      	movs	r2, #0
 801762c:	f000 f868 	bl	8017700 <_lseek_r>
 8017630:	89a3      	ldrh	r3, [r4, #12]
 8017632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801763a:	81a3      	strh	r3, [r4, #12]
 801763c:	4632      	mov	r2, r6
 801763e:	463b      	mov	r3, r7
 8017640:	4628      	mov	r0, r5
 8017642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017646:	f000 b817 	b.w	8017678 <_write_r>

0801764a <__sseek>:
 801764a:	b510      	push	{r4, lr}
 801764c:	460c      	mov	r4, r1
 801764e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017652:	f000 f855 	bl	8017700 <_lseek_r>
 8017656:	1c43      	adds	r3, r0, #1
 8017658:	89a3      	ldrh	r3, [r4, #12]
 801765a:	bf15      	itete	ne
 801765c:	6560      	strne	r0, [r4, #84]	; 0x54
 801765e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017666:	81a3      	strheq	r3, [r4, #12]
 8017668:	bf18      	it	ne
 801766a:	81a3      	strhne	r3, [r4, #12]
 801766c:	bd10      	pop	{r4, pc}

0801766e <__sclose>:
 801766e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017672:	f000 b813 	b.w	801769c <_close_r>
	...

08017678 <_write_r>:
 8017678:	b538      	push	{r3, r4, r5, lr}
 801767a:	4d07      	ldr	r5, [pc, #28]	; (8017698 <_write_r+0x20>)
 801767c:	4604      	mov	r4, r0
 801767e:	4608      	mov	r0, r1
 8017680:	4611      	mov	r1, r2
 8017682:	2200      	movs	r2, #0
 8017684:	602a      	str	r2, [r5, #0]
 8017686:	461a      	mov	r2, r3
 8017688:	f7ec fc3f 	bl	8003f0a <_write>
 801768c:	1c43      	adds	r3, r0, #1
 801768e:	d102      	bne.n	8017696 <_write_r+0x1e>
 8017690:	682b      	ldr	r3, [r5, #0]
 8017692:	b103      	cbz	r3, 8017696 <_write_r+0x1e>
 8017694:	6023      	str	r3, [r4, #0]
 8017696:	bd38      	pop	{r3, r4, r5, pc}
 8017698:	24005a8c 	.word	0x24005a8c

0801769c <_close_r>:
 801769c:	b538      	push	{r3, r4, r5, lr}
 801769e:	4d06      	ldr	r5, [pc, #24]	; (80176b8 <_close_r+0x1c>)
 80176a0:	2300      	movs	r3, #0
 80176a2:	4604      	mov	r4, r0
 80176a4:	4608      	mov	r0, r1
 80176a6:	602b      	str	r3, [r5, #0]
 80176a8:	f7ec fc4b 	bl	8003f42 <_close>
 80176ac:	1c43      	adds	r3, r0, #1
 80176ae:	d102      	bne.n	80176b6 <_close_r+0x1a>
 80176b0:	682b      	ldr	r3, [r5, #0]
 80176b2:	b103      	cbz	r3, 80176b6 <_close_r+0x1a>
 80176b4:	6023      	str	r3, [r4, #0]
 80176b6:	bd38      	pop	{r3, r4, r5, pc}
 80176b8:	24005a8c 	.word	0x24005a8c

080176bc <_fstat_r>:
 80176bc:	b538      	push	{r3, r4, r5, lr}
 80176be:	4d07      	ldr	r5, [pc, #28]	; (80176dc <_fstat_r+0x20>)
 80176c0:	2300      	movs	r3, #0
 80176c2:	4604      	mov	r4, r0
 80176c4:	4608      	mov	r0, r1
 80176c6:	4611      	mov	r1, r2
 80176c8:	602b      	str	r3, [r5, #0]
 80176ca:	f7ec fc46 	bl	8003f5a <_fstat>
 80176ce:	1c43      	adds	r3, r0, #1
 80176d0:	d102      	bne.n	80176d8 <_fstat_r+0x1c>
 80176d2:	682b      	ldr	r3, [r5, #0]
 80176d4:	b103      	cbz	r3, 80176d8 <_fstat_r+0x1c>
 80176d6:	6023      	str	r3, [r4, #0]
 80176d8:	bd38      	pop	{r3, r4, r5, pc}
 80176da:	bf00      	nop
 80176dc:	24005a8c 	.word	0x24005a8c

080176e0 <_isatty_r>:
 80176e0:	b538      	push	{r3, r4, r5, lr}
 80176e2:	4d06      	ldr	r5, [pc, #24]	; (80176fc <_isatty_r+0x1c>)
 80176e4:	2300      	movs	r3, #0
 80176e6:	4604      	mov	r4, r0
 80176e8:	4608      	mov	r0, r1
 80176ea:	602b      	str	r3, [r5, #0]
 80176ec:	f7ec fc45 	bl	8003f7a <_isatty>
 80176f0:	1c43      	adds	r3, r0, #1
 80176f2:	d102      	bne.n	80176fa <_isatty_r+0x1a>
 80176f4:	682b      	ldr	r3, [r5, #0]
 80176f6:	b103      	cbz	r3, 80176fa <_isatty_r+0x1a>
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	bd38      	pop	{r3, r4, r5, pc}
 80176fc:	24005a8c 	.word	0x24005a8c

08017700 <_lseek_r>:
 8017700:	b538      	push	{r3, r4, r5, lr}
 8017702:	4d07      	ldr	r5, [pc, #28]	; (8017720 <_lseek_r+0x20>)
 8017704:	4604      	mov	r4, r0
 8017706:	4608      	mov	r0, r1
 8017708:	4611      	mov	r1, r2
 801770a:	2200      	movs	r2, #0
 801770c:	602a      	str	r2, [r5, #0]
 801770e:	461a      	mov	r2, r3
 8017710:	f7ec fc3e 	bl	8003f90 <_lseek>
 8017714:	1c43      	adds	r3, r0, #1
 8017716:	d102      	bne.n	801771e <_lseek_r+0x1e>
 8017718:	682b      	ldr	r3, [r5, #0]
 801771a:	b103      	cbz	r3, 801771e <_lseek_r+0x1e>
 801771c:	6023      	str	r3, [r4, #0]
 801771e:	bd38      	pop	{r3, r4, r5, pc}
 8017720:	24005a8c 	.word	0x24005a8c

08017724 <_read_r>:
 8017724:	b538      	push	{r3, r4, r5, lr}
 8017726:	4d07      	ldr	r5, [pc, #28]	; (8017744 <_read_r+0x20>)
 8017728:	4604      	mov	r4, r0
 801772a:	4608      	mov	r0, r1
 801772c:	4611      	mov	r1, r2
 801772e:	2200      	movs	r2, #0
 8017730:	602a      	str	r2, [r5, #0]
 8017732:	461a      	mov	r2, r3
 8017734:	f7ec fbcc 	bl	8003ed0 <_read>
 8017738:	1c43      	adds	r3, r0, #1
 801773a:	d102      	bne.n	8017742 <_read_r+0x1e>
 801773c:	682b      	ldr	r3, [r5, #0]
 801773e:	b103      	cbz	r3, 8017742 <_read_r+0x1e>
 8017740:	6023      	str	r3, [r4, #0]
 8017742:	bd38      	pop	{r3, r4, r5, pc}
 8017744:	24005a8c 	.word	0x24005a8c

08017748 <_init>:
 8017748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801774a:	bf00      	nop
 801774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801774e:	bc08      	pop	{r3}
 8017750:	469e      	mov	lr, r3
 8017752:	4770      	bx	lr

08017754 <_fini>:
 8017754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017756:	bf00      	nop
 8017758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801775a:	bc08      	pop	{r3}
 801775c:	469e      	mov	lr, r3
 801775e:	4770      	bx	lr
