
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08015d2c  08015d2c  00025d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801618c  0801618c  0002618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016194  08016194  00026194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016198  08016198  00026198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  0801619c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  0801629c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  0801629c  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032a10  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005498  00000000  00000000  00062b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002638  00000000  00000000  00067fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002440  00000000  00000000  0006a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030a07  00000000  00000000  000744ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001945d7  00000000  00000000  000a4ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002394ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ada4  00000000  00000000  0023951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015d14 	.word	0x08015d14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015d14 	.word	0x08015d14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 ffbe 	bl	801161c <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 ffb3 	bl	801161c <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 ffa8 	bl	801161c <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f014 fc82 	bl	8014fd8 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000b44 	.word	0x24000b44
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	08015d8c 	.word	0x08015d8c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49f2      	ldr	r1, [pc, #968]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 80006fc:	48f2      	ldr	r0, [pc, #968]	; (8000ac8 <HAL_UART_RxCpltCallback+0x3d8>)
 80006fe:	f00e fa81 	bl	800ec04 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bf0      	ldr	r3, [pc, #960]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2be0      	cmp	r3, #224	; 0xe0
 800070c:	f200 83c6 	bhi.w	8000e9c <HAL_UART_RxCpltCallback+0x7ac>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000ab1 	.word	0x08000ab1
 800071c:	08000aed 	.word	0x08000aed
 8000720:	08000b73 	.word	0x08000b73
 8000724:	08000b9d 	.word	0x08000b9d
 8000728:	08000bc5 	.word	0x08000bc5
 800072c:	08000bef 	.word	0x08000bef
 8000730:	08000c1b 	.word	0x08000c1b
 8000734:	08000c47 	.word	0x08000c47
 8000738:	08000c71 	.word	0x08000c71
 800073c:	08000ca3 	.word	0x08000ca3
 8000740:	08000cc5 	.word	0x08000cc5
 8000744:	08000ce1 	.word	0x08000ce1
 8000748:	08000cfd 	.word	0x08000cfd
 800074c:	08000d47 	.word	0x08000d47
 8000750:	08000e41 	.word	0x08000e41
 8000754:	08000e71 	.word	0x08000e71
 8000758:	08000a9d 	.word	0x08000a9d
 800075c:	08000ad9 	.word	0x08000ad9
 8000760:	08000b5d 	.word	0x08000b5d
 8000764:	08000b89 	.word	0x08000b89
 8000768:	08000bb1 	.word	0x08000bb1
 800076c:	08000bd9 	.word	0x08000bd9
 8000770:	08000c05 	.word	0x08000c05
 8000774:	08000c31 	.word	0x08000c31
 8000778:	08000c5d 	.word	0x08000c5d
 800077c:	08000c85 	.word	0x08000c85
 8000780:	08000cb7 	.word	0x08000cb7
 8000784:	08000cd3 	.word	0x08000cd3
 8000788:	08000cef 	.word	0x08000cef
 800078c:	08000d0b 	.word	0x08000d0b
 8000790:	08000d83 	.word	0x08000d83
 8000794:	08000e69 	.word	0x08000e69
 8000798:	08000e9d 	.word	0x08000e9d
 800079c:	08000e9d 	.word	0x08000e9d
 80007a0:	08000e9d 	.word	0x08000e9d
 80007a4:	08000e9d 	.word	0x08000e9d
 80007a8:	08000e9d 	.word	0x08000e9d
 80007ac:	08000e9d 	.word	0x08000e9d
 80007b0:	08000e9d 	.word	0x08000e9d
 80007b4:	08000e9d 	.word	0x08000e9d
 80007b8:	08000e9d 	.word	0x08000e9d
 80007bc:	08000e9d 	.word	0x08000e9d
 80007c0:	08000e9d 	.word	0x08000e9d
 80007c4:	08000e9d 	.word	0x08000e9d
 80007c8:	08000e9d 	.word	0x08000e9d
 80007cc:	08000e9d 	.word	0x08000e9d
 80007d0:	08000e9d 	.word	0x08000e9d
 80007d4:	08000e9d 	.word	0x08000e9d
 80007d8:	08000e9d 	.word	0x08000e9d
 80007dc:	08000e9d 	.word	0x08000e9d
 80007e0:	08000e9d 	.word	0x08000e9d
 80007e4:	08000e9d 	.word	0x08000e9d
 80007e8:	08000e9d 	.word	0x08000e9d
 80007ec:	08000e9d 	.word	0x08000e9d
 80007f0:	08000e9d 	.word	0x08000e9d
 80007f4:	08000e9d 	.word	0x08000e9d
 80007f8:	08000e9d 	.word	0x08000e9d
 80007fc:	08000e9d 	.word	0x08000e9d
 8000800:	08000e9d 	.word	0x08000e9d
 8000804:	08000e9d 	.word	0x08000e9d
 8000808:	08000e9d 	.word	0x08000e9d
 800080c:	08000e9d 	.word	0x08000e9d
 8000810:	08000e9d 	.word	0x08000e9d
 8000814:	08000e9d 	.word	0x08000e9d
 8000818:	08000e9d 	.word	0x08000e9d
 800081c:	08000e9d 	.word	0x08000e9d
 8000820:	08000e9d 	.word	0x08000e9d
 8000824:	08000e9d 	.word	0x08000e9d
 8000828:	08000e9d 	.word	0x08000e9d
 800082c:	08000e9d 	.word	0x08000e9d
 8000830:	08000e9d 	.word	0x08000e9d
 8000834:	08000e9d 	.word	0x08000e9d
 8000838:	08000e9d 	.word	0x08000e9d
 800083c:	08000e9d 	.word	0x08000e9d
 8000840:	08000e9d 	.word	0x08000e9d
 8000844:	08000e9d 	.word	0x08000e9d
 8000848:	08000e9d 	.word	0x08000e9d
 800084c:	08000e9d 	.word	0x08000e9d
 8000850:	08000e9d 	.word	0x08000e9d
 8000854:	08000e9d 	.word	0x08000e9d
 8000858:	08000e9d 	.word	0x08000e9d
 800085c:	08000e9d 	.word	0x08000e9d
 8000860:	08000e9d 	.word	0x08000e9d
 8000864:	08000e9d 	.word	0x08000e9d
 8000868:	08000e9d 	.word	0x08000e9d
 800086c:	08000e9d 	.word	0x08000e9d
 8000870:	08000e9d 	.word	0x08000e9d
 8000874:	08000e9d 	.word	0x08000e9d
 8000878:	08000e9d 	.word	0x08000e9d
 800087c:	08000e9d 	.word	0x08000e9d
 8000880:	08000e9d 	.word	0x08000e9d
 8000884:	08000e9d 	.word	0x08000e9d
 8000888:	08000e9d 	.word	0x08000e9d
 800088c:	08000e9d 	.word	0x08000e9d
 8000890:	08000e9d 	.word	0x08000e9d
 8000894:	08000e9d 	.word	0x08000e9d
 8000898:	08000e9d 	.word	0x08000e9d
 800089c:	08000e9d 	.word	0x08000e9d
 80008a0:	08000e9d 	.word	0x08000e9d
 80008a4:	08000e9d 	.word	0x08000e9d
 80008a8:	08000e9d 	.word	0x08000e9d
 80008ac:	08000e9d 	.word	0x08000e9d
 80008b0:	08000e9d 	.word	0x08000e9d
 80008b4:	08000e9d 	.word	0x08000e9d
 80008b8:	08000e9d 	.word	0x08000e9d
 80008bc:	08000e9d 	.word	0x08000e9d
 80008c0:	08000e9d 	.word	0x08000e9d
 80008c4:	08000e9d 	.word	0x08000e9d
 80008c8:	08000e9d 	.word	0x08000e9d
 80008cc:	08000e9d 	.word	0x08000e9d
 80008d0:	08000e9d 	.word	0x08000e9d
 80008d4:	08000e9d 	.word	0x08000e9d
 80008d8:	08000e9d 	.word	0x08000e9d
 80008dc:	08000e9d 	.word	0x08000e9d
 80008e0:	08000e9d 	.word	0x08000e9d
 80008e4:	08000e9d 	.word	0x08000e9d
 80008e8:	08000e9d 	.word	0x08000e9d
 80008ec:	08000e9d 	.word	0x08000e9d
 80008f0:	08000e9d 	.word	0x08000e9d
 80008f4:	08000e9d 	.word	0x08000e9d
 80008f8:	08000e9d 	.word	0x08000e9d
 80008fc:	08000e9d 	.word	0x08000e9d
 8000900:	08000e9d 	.word	0x08000e9d
 8000904:	08000e9d 	.word	0x08000e9d
 8000908:	08000e9d 	.word	0x08000e9d
 800090c:	08000e9d 	.word	0x08000e9d
 8000910:	08000e9d 	.word	0x08000e9d
 8000914:	08000e9d 	.word	0x08000e9d
 8000918:	08000e9d 	.word	0x08000e9d
 800091c:	08000e9d 	.word	0x08000e9d
 8000920:	08000e9d 	.word	0x08000e9d
 8000924:	08000e9d 	.word	0x08000e9d
 8000928:	08000e9d 	.word	0x08000e9d
 800092c:	08000e9d 	.word	0x08000e9d
 8000930:	08000e9d 	.word	0x08000e9d
 8000934:	08000e9d 	.word	0x08000e9d
 8000938:	08000e9d 	.word	0x08000e9d
 800093c:	08000e9d 	.word	0x08000e9d
 8000940:	08000e9d 	.word	0x08000e9d
 8000944:	08000e9d 	.word	0x08000e9d
 8000948:	08000e9d 	.word	0x08000e9d
 800094c:	08000e9d 	.word	0x08000e9d
 8000950:	08000e9d 	.word	0x08000e9d
 8000954:	08000e9d 	.word	0x08000e9d
 8000958:	08000e9d 	.word	0x08000e9d
 800095c:	08000e9d 	.word	0x08000e9d
 8000960:	08000e9d 	.word	0x08000e9d
 8000964:	08000e9d 	.word	0x08000e9d
 8000968:	08000e9d 	.word	0x08000e9d
 800096c:	08000e9d 	.word	0x08000e9d
 8000970:	08000e9d 	.word	0x08000e9d
 8000974:	08000e9d 	.word	0x08000e9d
 8000978:	08000e9d 	.word	0x08000e9d
 800097c:	08000e9d 	.word	0x08000e9d
 8000980:	08000e9d 	.word	0x08000e9d
 8000984:	08000e9d 	.word	0x08000e9d
 8000988:	08000e9d 	.word	0x08000e9d
 800098c:	08000e9d 	.word	0x08000e9d
 8000990:	08000e9d 	.word	0x08000e9d
 8000994:	08000e9d 	.word	0x08000e9d
 8000998:	08000e9d 	.word	0x08000e9d
 800099c:	08000e9d 	.word	0x08000e9d
 80009a0:	08000e9d 	.word	0x08000e9d
 80009a4:	08000e9d 	.word	0x08000e9d
 80009a8:	08000e9d 	.word	0x08000e9d
 80009ac:	08000e9d 	.word	0x08000e9d
 80009b0:	08000e9d 	.word	0x08000e9d
 80009b4:	08000e9d 	.word	0x08000e9d
 80009b8:	08000e9d 	.word	0x08000e9d
 80009bc:	08000e9d 	.word	0x08000e9d
 80009c0:	08000e9d 	.word	0x08000e9d
 80009c4:	08000e9d 	.word	0x08000e9d
 80009c8:	08000e9d 	.word	0x08000e9d
 80009cc:	08000e9d 	.word	0x08000e9d
 80009d0:	08000e9d 	.word	0x08000e9d
 80009d4:	08000e9d 	.word	0x08000e9d
 80009d8:	08000e9d 	.word	0x08000e9d
 80009dc:	08000e9d 	.word	0x08000e9d
 80009e0:	08000e9d 	.word	0x08000e9d
 80009e4:	08000e9d 	.word	0x08000e9d
 80009e8:	08000e9d 	.word	0x08000e9d
 80009ec:	08000e9d 	.word	0x08000e9d
 80009f0:	08000e9d 	.word	0x08000e9d
 80009f4:	08000e9d 	.word	0x08000e9d
 80009f8:	08000e9d 	.word	0x08000e9d
 80009fc:	08000e9d 	.word	0x08000e9d
 8000a00:	08000e9d 	.word	0x08000e9d
 8000a04:	08000e9d 	.word	0x08000e9d
 8000a08:	08000e9d 	.word	0x08000e9d
 8000a0c:	08000e9d 	.word	0x08000e9d
 8000a10:	08000e9d 	.word	0x08000e9d
 8000a14:	08000e9d 	.word	0x08000e9d
 8000a18:	08000e9d 	.word	0x08000e9d
 8000a1c:	08000e9d 	.word	0x08000e9d
 8000a20:	08000e9d 	.word	0x08000e9d
 8000a24:	08000e9d 	.word	0x08000e9d
 8000a28:	08000e9d 	.word	0x08000e9d
 8000a2c:	08000e9d 	.word	0x08000e9d
 8000a30:	08000e9d 	.word	0x08000e9d
 8000a34:	08000e9d 	.word	0x08000e9d
 8000a38:	08000e9d 	.word	0x08000e9d
 8000a3c:	08000e9d 	.word	0x08000e9d
 8000a40:	08000e9d 	.word	0x08000e9d
 8000a44:	08000e9d 	.word	0x08000e9d
 8000a48:	08000e9d 	.word	0x08000e9d
 8000a4c:	08000e9d 	.word	0x08000e9d
 8000a50:	08000e9d 	.word	0x08000e9d
 8000a54:	08000e9d 	.word	0x08000e9d
 8000a58:	08000e8b 	.word	0x08000e8b
 8000a5c:	08000e9d 	.word	0x08000e9d
 8000a60:	08000e9d 	.word	0x08000e9d
 8000a64:	08000e9d 	.word	0x08000e9d
 8000a68:	08000e9d 	.word	0x08000e9d
 8000a6c:	08000e9d 	.word	0x08000e9d
 8000a70:	08000e9d 	.word	0x08000e9d
 8000a74:	08000e9d 	.word	0x08000e9d
 8000a78:	08000e9d 	.word	0x08000e9d
 8000a7c:	08000e9d 	.word	0x08000e9d
 8000a80:	08000e9d 	.word	0x08000e9d
 8000a84:	08000e9d 	.word	0x08000e9d
 8000a88:	08000e9d 	.word	0x08000e9d
 8000a8c:	08000e9d 	.word	0x08000e9d
 8000a90:	08000e9d 	.word	0x08000e9d
 8000a94:	08000e9d 	.word	0x08000e9d
 8000a98:	08000e79 	.word	0x08000e79
	case 0x10: {
		printf("SDN1 ON\n");
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_UART_RxCpltCallback+0x3dc>)
 8000a9e:	f014 fa9b 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 ff29 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000aae:	e200      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_UART_RxCpltCallback+0x3e4>)
 8000ab2:	f014 fa91 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 ff1f 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000ac2:	e1f6      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
 8000ac4:	24000b48 	.word	0x24000b48
 8000ac8:	240005cc 	.word	0x240005cc
 8000acc:	08015da4 	.word	0x08015da4
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	08015dac 	.word	0x08015dac
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000ad8:	48b4      	ldr	r0, [pc, #720]	; (8000dac <HAL_UART_RxCpltCallback+0x6bc>)
 8000ada:	f014 fa7d 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ade:	4bb4      	ldr	r3, [pc, #720]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 ff0b 	bl	8008900 <HAL_GPIO_WritePin>

		break;
 8000aea:	e1e2      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000aec:	48b1      	ldr	r0, [pc, #708]	; (8000db4 <HAL_UART_RxCpltCallback+0x6c4>)
 8000aee:	f014 fa73 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000af2:	4baf      	ldr	r3, [pc, #700]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000af4:	2120      	movs	r1, #32
 8000af6:	2200      	movs	r2, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 ff01 	bl	8008900 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000afe:	4bac      	ldr	r3, [pc, #688]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	2200      	movs	r2, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fefb 	bl	8008900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b0a:	4bab      	ldr	r3, [pc, #684]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	2200      	movs	r2, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fef4 	bl	8008900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b18:	4ba7      	ldr	r3, [pc, #668]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 feed 	bl	8008900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b26:	4ba4      	ldr	r3, [pc, #656]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fee6 	bl	8008900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b34:	4ba0      	ldr	r3, [pc, #640]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fee0 	bl	8008900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b40:	4b9d      	ldr	r3, [pc, #628]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	2200      	movs	r2, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 feda 	bl	8008900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	2200      	movs	r2, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fed3 	bl	8008900 <HAL_GPIO_WritePin>

		break;
 8000b5a:	e1aa      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b5c:	4897      	ldr	r0, [pc, #604]	; (8000dbc <HAL_UART_RxCpltCallback+0x6cc>)
 8000b5e:	f014 fa3b 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b62:	4b95      	ldr	r3, [pc, #596]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fec8 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000b70:	e19f      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b72:	4893      	ldr	r0, [pc, #588]	; (8000dc0 <HAL_UART_RxCpltCallback+0x6d0>)
 8000b74:	f014 fa30 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b78:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 febd 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000b86:	e194      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b88:	488e      	ldr	r0, [pc, #568]	; (8000dc4 <HAL_UART_RxCpltCallback+0x6d4>)
 8000b8a:	f014 fa25 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b8e:	4b8a      	ldr	r3, [pc, #552]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	2201      	movs	r2, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 feb3 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e18a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b9c:	488a      	ldr	r0, [pc, #552]	; (8000dc8 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f014 fa1b 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ba2:	4b85      	ldr	r3, [pc, #532]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 fea9 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000bae:	e180      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000bb0:	4886      	ldr	r0, [pc, #536]	; (8000dcc <HAL_UART_RxCpltCallback+0x6dc>)
 8000bb2:	f014 fa11 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bb6:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 fe9f 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000bc2:	e176      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bc4:	4882      	ldr	r0, [pc, #520]	; (8000dd0 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bc6:	f014 fa07 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bca:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 fe95 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000bd6:	e16c      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd8:	487e      	ldr	r0, [pc, #504]	; (8000dd4 <HAL_UART_RxCpltCallback+0x6e4>)
 8000bda:	f014 f9fd 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bde:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fe8a 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000bec:	e161      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bee:	487a      	ldr	r0, [pc, #488]	; (8000dd8 <HAL_UART_RxCpltCallback+0x6e8>)
 8000bf0:	f014 f9f2 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 fe7f 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c02:	e156      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c04:	4875      	ldr	r0, [pc, #468]	; (8000ddc <HAL_UART_RxCpltCallback+0x6ec>)
 8000c06:	f014 f9e7 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0a:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	2201      	movs	r2, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 fe74 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c18:	e14b      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c1a:	4871      	ldr	r0, [pc, #452]	; (8000de0 <HAL_UART_RxCpltCallback+0x6f0>)
 8000c1c:	f014 f9dc 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c20:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c26:	2200      	movs	r2, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 fe69 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c2e:	e140      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c30:	486c      	ldr	r0, [pc, #432]	; (8000de4 <HAL_UART_RxCpltCallback+0x6f4>)
 8000c32:	f014 f9d1 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 fe5e 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c44:	e135      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c46:	4868      	ldr	r0, [pc, #416]	; (8000de8 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c48:	f014 f9c6 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	2200      	movs	r2, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 fe53 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c5a:	e12a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c5c:	4863      	ldr	r0, [pc, #396]	; (8000dec <HAL_UART_RxCpltCallback+0x6fc>)
 8000c5e:	f014 f9bb 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	2201      	movs	r2, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f007 fe49 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e120      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c70:	485f      	ldr	r0, [pc, #380]	; (8000df0 <HAL_UART_RxCpltCallback+0x700>)
 8000c72:	f014 f9b1 	bl	8014fd8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c76:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fe3f 	bl	8008900 <HAL_GPIO_WritePin>
		break;
 8000c82:	e116      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c84:	485b      	ldr	r0, [pc, #364]	; (8000df4 <HAL_UART_RxCpltCallback+0x704>)
 8000c86:	f014 f9a7 	bl	8014fd8 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000c8a:	485b      	ldr	r0, [pc, #364]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000c8c:	f00c f99e 	bl	800cfcc <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c90:	2300      	movs	r3, #0
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2320      	movs	r3, #32
 8000c96:	4a59      	ldr	r2, [pc, #356]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4859      	ldr	r0, [pc, #356]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000c9c:	f004 faa0 	bl	80051e0 <HAL_DAC_Start_DMA>
		break;
 8000ca0:	e107      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000ca2:	4858      	ldr	r0, [pc, #352]	; (8000e04 <HAL_UART_RxCpltCallback+0x714>)
 8000ca4:	f014 f998 	bl	8014fd8 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000ca8:	4853      	ldr	r0, [pc, #332]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000caa:	f00c f9ff 	bl	800d0ac <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4853      	ldr	r0, [pc, #332]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000cb2:	f004 fb55 	bl	8005360 <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <HAL_UART_RxCpltCallback+0x718>)
 8000cb8:	f014 f98e 	bl	8014fd8 <puts>
		ERPA_ON = 1;
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e0f6      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cc4:	4852      	ldr	r0, [pc, #328]	; (8000e10 <HAL_UART_RxCpltCallback+0x720>)
 8000cc6:	f014 f987 	bl	8014fd8 <puts>
		ERPA_ON = 0;
 8000cca:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		break;
 8000cd0:	e0ef      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cd2:	4850      	ldr	r0, [pc, #320]	; (8000e14 <HAL_UART_RxCpltCallback+0x724>)
 8000cd4:	f014 f980 	bl	8014fd8 <puts>
		PMT_ON = 1;
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
		break;
 8000cde:	e0e8      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000ce0:	484e      	ldr	r0, [pc, #312]	; (8000e1c <HAL_UART_RxCpltCallback+0x72c>)
 8000ce2:	f014 f979 	bl	8014fd8 <puts>
		PMT_ON = 0;
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		break;
 8000cec:	e0e1      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <HAL_UART_RxCpltCallback+0x730>)
 8000cf0:	f014 f972 	bl	8014fd8 <puts>
		HK_ON = 1;
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e0da      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cfc:	484a      	ldr	r0, [pc, #296]	; (8000e28 <HAL_UART_RxCpltCallback+0x738>)
 8000cfe:	f014 f96b 	bl	8014fd8 <puts>
		HK_ON = 0;
 8000d02:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
		break;
 8000d08:	e0d3      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <HAL_UART_RxCpltCallback+0x73c>)
 8000d0c:	f014 f964 	bl	8014fd8 <puts>
		if (step < 17) {
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	f200 80c5 	bhi.w	8000ea4 <HAL_UART_RxCpltCallback+0x7b4>
			step+=2;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d24:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	4832      	ldr	r0, [pc, #200]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d38:	f004 fbb5 	bl	80054a6 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4830      	ldr	r0, [pc, #192]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d40:	f004 f9f6 	bl	8005130 <HAL_DAC_Start>
		}
		break;
 8000d44:	e0ae      	b.n	8000ea4 <HAL_UART_RxCpltCallback+0x7b4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d46:	483b      	ldr	r0, [pc, #236]	; (8000e34 <HAL_UART_RxCpltCallback+0x744>)
 8000d48:	f014 f946 	bl	8014fd8 <puts>
		if (step > 3) {
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	f240 80a9 	bls.w	8000ea8 <HAL_UART_RxCpltCallback+0x7b8>
			step-=2;
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d74:	f004 fb97 	bl	80054a6 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d7c:	f004 f9d8 	bl	8005130 <HAL_DAC_Start>
		}
		break;
 8000d80:	e092      	b.n	8000ea8 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <HAL_UART_RxCpltCallback+0x748>)
 8000d84:	f014 f928 	bl	8014fd8 <puts>
		if (cadence <= 50000){
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f200 808b 	bhi.w	8000eac <HAL_UART_RxCpltCallback+0x7bc>
			cadence *= 2;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d9e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000daa:	e07f      	b.n	8000eac <HAL_UART_RxCpltCallback+0x7bc>
 8000dac:	08015db8 	.word	0x08015db8
 8000db0:	58020400 	.word	0x58020400
 8000db4:	08015dc4 	.word	0x08015dc4
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	08015dd0 	.word	0x08015dd0
 8000dc0:	08015ddc 	.word	0x08015ddc
 8000dc4:	08015dec 	.word	0x08015dec
 8000dc8:	08015df8 	.word	0x08015df8
 8000dcc:	08015e04 	.word	0x08015e04
 8000dd0:	08015e10 	.word	0x08015e10
 8000dd4:	08015e20 	.word	0x08015e20
 8000dd8:	08015e2c 	.word	0x08015e2c
 8000ddc:	08015e38 	.word	0x08015e38
 8000de0:	08015e44 	.word	0x08015e44
 8000de4:	08015e50 	.word	0x08015e50
 8000de8:	08015e60 	.word	0x08015e60
 8000dec:	08015e70 	.word	0x08015e70
 8000df0:	08015e7c 	.word	0x08015e7c
 8000df4:	08015e8c 	.word	0x08015e8c
 8000df8:	24000534 	.word	0x24000534
 8000dfc:	24000008 	.word	0x24000008
 8000e00:	240002d4 	.word	0x240002d4
 8000e04:	08015e9c 	.word	0x08015e9c
 8000e08:	08015eac 	.word	0x08015eac
 8000e0c:	24000b3f 	.word	0x24000b3f
 8000e10:	08015eb4 	.word	0x08015eb4
 8000e14:	08015ec0 	.word	0x08015ec0
 8000e18:	24000b3e 	.word	0x24000b3e
 8000e1c:	08015ec8 	.word	0x08015ec8
 8000e20:	08015ed0 	.word	0x08015ed0
 8000e24:	24000b40 	.word	0x24000b40
 8000e28:	08015ed8 	.word	0x08015ed8
 8000e2c:	08015ee0 	.word	0x08015ee0
 8000e30:	24000004 	.word	0x24000004
 8000e34:	08015ee8 	.word	0x08015ee8
 8000e38:	08015ef4 	.word	0x08015ef4
 8000e3c:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_UART_RxCpltCallback+0x7cc>)
 8000e42:	f014 f8c9 	bl	8014fd8 <puts>
		if (cadence >= 6250){
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d92e      	bls.n	8000eb0 <HAL_UART_RxCpltCallback+0x7c0>
			cadence /= 2;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e5a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e66:	e023      	b.n	8000eb0 <HAL_UART_RxCpltCallback+0x7c0>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <HAL_UART_RxCpltCallback+0x7d4>)
 8000e6a:	f014 f8b5 	bl	8014fd8 <puts>
		// TODO: Exit stop mode
		break;
 8000e6e:	e020      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e70:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <HAL_UART_RxCpltCallback+0x7d8>)
 8000e72:	f014 f8b1 	bl	8014fd8 <puts>
		// TODO: Enter stop mode
		break;
 8000e76:	e01c      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <HAL_UART_RxCpltCallback+0x7dc>)
 8000e7a:	f014 f8ad 	bl	8014fd8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_RxCpltCallback+0x7e0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f012 f8fc 	bl	8013080 <xTaskResumeFromISR>
		break;
 8000e88:	e013      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <HAL_UART_RxCpltCallback+0x7e4>)
 8000e8c:	f014 f8a4 	bl	8014fd8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_RxCpltCallback+0x7e8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 f8f3 	bl	8013080 <xTaskResumeFromISR>
		break;
 8000e9a:	e00a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	default:{
		printf("Unknown Command\n");
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <HAL_UART_RxCpltCallback+0x7ec>)
 8000e9e:	f014 f89b 	bl	8014fd8 <puts>
		break;
 8000ea2:	e006      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000ea4:	bf00      	nop
 8000ea6:	e004      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000ea8:	bf00      	nop
 8000eaa:	e002      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000eb0:	bf00      	nop
	}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08015f00 	.word	0x08015f00
 8000ec0:	24000000 	.word	0x24000000
 8000ec4:	08015f0c 	.word	0x08015f0c
 8000ec8:	08015f1c 	.word	0x08015f1c
 8000ecc:	08015f2c 	.word	0x08015f2c
 8000ed0:	24000674 	.word	0x24000674
 8000ed4:	08015f38 	.word	0x08015f38
 8000ed8:	240008d4 	.word	0x240008d4
 8000edc:	08015f44 	.word	0x08015f44

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f002 fb90 	bl	8003608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f8b6 	bl	8001058 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eec:	f000 f934 	bl	8001158 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fe84 	bl	8001bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef4:	f000 fe52 	bl	8001b9c <MX_DMA_Init>
  MX_TIM3_Init();
 8000ef8:	f000 fdb6 	bl	8001a68 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000efc:	f000 fe02 	bl	8001b04 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f00:	f000 fb40 	bl	8001584 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f04:	f000 fc34 	bl	8001770 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f08:	f000 fd38 	bl	800197c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f0c:	f000 fc88 	bl	8001820 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f10:	f000 fa74 	bl	80013fc <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f14:	f000 f950 	bl	80011b8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f18:	f000 fb02 	bl	8001520 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f1c:	f000 fbd0 	bl	80016c0 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f20:	f000 fb70 	bl	8001604 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000f24:	f000 fee4 	bl	8001cf0 <handshake>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <main+0x52>
	{
		Error_Handler();
 8000f2e:	f001 fc8f 	bl	8002850 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	482d      	ldr	r0, [pc, #180]	; (8000fec <main+0x10c>)
 8000f36:	f00c f959 	bl	800d1ec <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	482c      	ldr	r0, [pc, #176]	; (8000ff0 <main+0x110>)
 8000f3e:	f00c f955 	bl	800d1ec <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <main+0x114>)
 8000f46:	f00c f951 	bl	800d1ec <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4a:	f010 f9ef 	bl	801132c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2108      	movs	r1, #8
 8000f52:	2010      	movs	r0, #16
 8000f54:	f010 fc0c 	bl	8011770 <osMessageQueueNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <main+0x118>)
 8000f5c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <main+0x11c>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4827      	ldr	r0, [pc, #156]	; (8001000 <main+0x120>)
 8000f64:	f010 fa2c 	bl	80113c0 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <main+0x124>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f6e:	4a26      	ldr	r2, [pc, #152]	; (8001008 <main+0x128>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <main+0x12c>)
 8000f74:	f010 fa24 	bl	80113c0 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <main+0x130>)
 8000f7c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f7e:	4a25      	ldr	r2, [pc, #148]	; (8001014 <main+0x134>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4825      	ldr	r0, [pc, #148]	; (8001018 <main+0x138>)
 8000f84:	f010 fa1c 	bl	80113c0 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a24      	ldr	r2, [pc, #144]	; (800101c <main+0x13c>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <main+0x140>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <main+0x144>)
 8000f94:	f010 fa14 	bl	80113c0 <osThreadNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <main+0x148>)
 8000f9c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <main+0x14c>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <main+0x150>)
 8000fa4:	f010 fa0c 	bl	80113c0 <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <main+0x154>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000fae:	4a22      	ldr	r2, [pc, #136]	; (8001038 <main+0x158>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <main+0x15c>)
 8000fb4:	f010 fa04 	bl	80113c0 <osThreadNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <main+0x160>)
 8000fbc:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <main+0x164>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <main+0x168>)
 8000fc4:	f010 f9fc 	bl	80113c0 <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a20      	ldr	r2, [pc, #128]	; (800104c <main+0x16c>)
 8000fcc:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f010 fae4 	bl	801159c <osEventFlagsNew>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <main+0x170>)
 8000fd8:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fda:	f000 ff17 	bl	8001e0c <system_setup>
	printf("Starting kernal...\n");
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <main+0x174>)
 8000fe0:	f013 fffa 	bl	8014fd8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fe4:	f010 f9c6 	bl	8011374 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x108>
 8000fea:	bf00      	nop
 8000fec:	240004e8 	.word	0x240004e8
 8000ff0:	24000534 	.word	0x24000534
 8000ff4:	24000580 	.word	0x24000580
 8000ff8:	24000b34 	.word	0x24000b34
 8000ffc:	08015fb8 	.word	0x08015fb8
 8001000:	08002591 	.word	0x08002591
 8001004:	24000660 	.word	0x24000660
 8001008:	08015fdc 	.word	0x08015fdc
 800100c:	080025d5 	.word	0x080025d5
 8001010:	24000664 	.word	0x24000664
 8001014:	08016000 	.word	0x08016000
 8001018:	08002619 	.word	0x08002619
 800101c:	24000668 	.word	0x24000668
 8001020:	08016024 	.word	0x08016024
 8001024:	0800265d 	.word	0x0800265d
 8001028:	2400066c 	.word	0x2400066c
 800102c:	08016048 	.word	0x08016048
 8001030:	08002681 	.word	0x08002681
 8001034:	24000670 	.word	0x24000670
 8001038:	0801606c 	.word	0x0801606c
 800103c:	080026dd 	.word	0x080026dd
 8001040:	24000674 	.word	0x24000674
 8001044:	08016090 	.word	0x08016090
 8001048:	08002785 	.word	0x08002785
 800104c:	240008d4 	.word	0x240008d4
 8001050:	24000b44 	.word	0x24000b44
 8001054:	08015f54 	.word	0x08015f54

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	; 0x70
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	224c      	movs	r2, #76	; 0x4c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f013 fe48 	bl	8014cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f013 fe42 	bl	8014cfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001078:	2002      	movs	r0, #2
 800107a:	f007 fd8f 	bl	8008b9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <SystemClock_Config+0xf8>)
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <SystemClock_Config+0xf8>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <SystemClock_Config+0xf8>)
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <SystemClock_Config+0xfc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <SystemClock_Config+0xfc>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <SystemClock_Config+0xfc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b4:	bf00      	nop
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <SystemClock_Config+0xfc>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c2:	d1f8      	bne.n	80010b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010c4:	230a      	movs	r3, #10
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d8:	2300      	movs	r3, #0
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010e0:	230c      	movs	r3, #12
 80010e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010f0:	230c      	movs	r3, #12
 80010f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4618      	mov	r0, r3
 8001102:	f007 fd85 	bl	8008c10 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800110c:	f001 fba0 	bl	8002850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	233f      	movs	r3, #63	; 0x3f
 8001112:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2303      	movs	r3, #3
 8001116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f008 f9c4 	bl	80094c4 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001142:	f001 fb85 	bl	8002850 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3770      	adds	r7, #112	; 0x70
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	58000400 	.word	0x58000400
 8001154:	58024800 	.word	0x58024800

08001158 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0b0      	sub	sp, #192	; 0xc0
 800115c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	22c0      	movs	r2, #192	; 0xc0
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f013 fdc9 	bl	8014cfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800116a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800117a:	2309      	movs	r3, #9
 800117c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800118a:	23c0      	movs	r3, #192	; 0xc0
 800118c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800118e:	2320      	movs	r3, #32
 8001190:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 fd5d 	bl	8009c60 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80011ac:	f001 fb50 	bl	8002850 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	37c0      	adds	r7, #192	; 0xc0
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011dc:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011de:	4a7b      	ldr	r2, [pc, #492]	; (80013cc <MX_ADC1_Init+0x214>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011e2:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011ec:	2208      	movs	r2, #8
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011fe:	2200      	movs	r2, #0
 8001200:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001202:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001204:	2201      	movs	r2, #1
 8001206:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <MX_ADC1_Init+0x210>)
 800120a:	220b      	movs	r2, #11
 800120c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001210:	2200      	movs	r2, #0
 8001212:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <MX_ADC1_Init+0x210>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001220:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001222:	2203      	movs	r2, #3
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800122e:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123c:	4862      	ldr	r0, [pc, #392]	; (80013c8 <MX_ADC1_Init+0x210>)
 800123e:	f002 fc6f 	bl	8003b20 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001248:	f001 fb02 	bl	8002850 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	485c      	ldr	r0, [pc, #368]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001258:	f003 fd8a 	bl	8004d70 <HAL_ADCEx_MultiModeConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001262:	f001 faf5 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001266:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <MX_ADC1_Init+0x218>)
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126a:	2306      	movs	r3, #6
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800126e:	2307      	movs	r3, #7
 8001270:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001272:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001278:	2304      	movs	r3, #4
 800127a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <MX_ADC1_Init+0x210>)
 800128a:	f002 fecd 	bl	8004028 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001294:	f001 fadc 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <MX_ADC1_Init+0x21c>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800129c:	230c      	movs	r3, #12
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4848      	ldr	r0, [pc, #288]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012a6:	f002 febf 	bl	8004028 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80012b0:	f001 face 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <MX_ADC1_Init+0x220>)
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012b8:	2312      	movs	r3, #18
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4841      	ldr	r0, [pc, #260]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012c2:	f002 feb1 	bl	8004028 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012cc:	f001 fac0 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012d0:	4b42      	ldr	r3, [pc, #264]	; (80013dc <MX_ADC1_Init+0x224>)
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012d4:	2318      	movs	r3, #24
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	483a      	ldr	r0, [pc, #232]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012de:	f002 fea3 	bl	8004028 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012e8:	f001 fab2 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <MX_ADC1_Init+0x228>)
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4833      	ldr	r0, [pc, #204]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012fc:	f002 fe94 	bl	8004028 <HAL_ADC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001306:	f001 faa3 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <MX_ADC1_Init+0x22c>)
 800130c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800130e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	482b      	ldr	r0, [pc, #172]	; (80013c8 <MX_ADC1_Init+0x210>)
 800131a:	f002 fe85 	bl	8004028 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001324:	f001 fa94 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <MX_ADC1_Init+0x230>)
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800132c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001330:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001338:	f002 fe76 	bl	8004028 <HAL_ADC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001342:	f001 fa85 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_ADC1_Init+0x234>)
 8001348:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800134a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001356:	f002 fe67 	bl	8004028 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001360:	f001 fa76 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_ADC1_Init+0x238>)
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001368:	f44f 738c 	mov.w	r3, #280	; 0x118
 800136c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	4815      	ldr	r0, [pc, #84]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001374:	f002 fe58 	bl	8004028 <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800137e:	f001 fa67 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_ADC1_Init+0x23c>)
 8001384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001392:	f002 fe49 	bl	8004028 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800139c:	f001 fa58 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_ADC1_Init+0x240>)
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80013a4:	f240 2306 	movw	r3, #518	; 0x206
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_ADC1_Init+0x210>)
 80013b0:	f002 fe3a 	bl	8004028 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80013ba:	f001 fa49 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2400011c 	.word	0x2400011c
 80013cc:	40022000 	.word	0x40022000
 80013d0:	0c900008 	.word	0x0c900008
 80013d4:	10c00010 	.word	0x10c00010
 80013d8:	14f00020 	.word	0x14f00020
 80013dc:	1d500080 	.word	0x1d500080
 80013e0:	21800100 	.word	0x21800100
 80013e4:	25b00200 	.word	0x25b00200
 80013e8:	2a000400 	.word	0x2a000400
 80013ec:	2e300800 	.word	0x2e300800
 80013f0:	3ac04000 	.word	0x3ac04000
 80013f4:	3ef08000 	.word	0x3ef08000
 80013f8:	47520000 	.word	0x47520000

080013fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_ADC3_Init+0x110>)
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <MX_ADC3_Init+0x114>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_ADC3_Init+0x110>)
 800141c:	2208      	movs	r2, #8
 800141e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_ADC3_Init+0x110>)
 8001422:	2201      	movs	r2, #1
 8001424:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <MX_ADC3_Init+0x110>)
 8001428:	2204      	movs	r2, #4
 800142a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_ADC3_Init+0x110>)
 800142e:	2200      	movs	r2, #0
 8001430:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <MX_ADC3_Init+0x110>)
 8001434:	2201      	movs	r2, #1
 8001436:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <MX_ADC3_Init+0x110>)
 800143a:	2204      	movs	r2, #4
 800143c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <MX_ADC3_Init+0x110>)
 8001440:	2200      	movs	r2, #0
 8001442:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <MX_ADC3_Init+0x110>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <MX_ADC3_Init+0x110>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_ADC3_Init+0x110>)
 8001452:	2203      	movs	r2, #3
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_ADC3_Init+0x110>)
 8001458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_ADC3_Init+0x110>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_ADC3_Init+0x110>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800146c:	4827      	ldr	r0, [pc, #156]	; (800150c <MX_ADC3_Init+0x110>)
 800146e:	f002 fb57 	bl	8003b20 <HAL_ADC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001478:	f001 f9ea 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <MX_ADC3_Init+0x118>)
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	2306      	movs	r3, #6
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001484:	2307      	movs	r3, #7
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001488:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800148c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148e:	2304      	movs	r3, #4
 8001490:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	481b      	ldr	r0, [pc, #108]	; (800150c <MX_ADC3_Init+0x110>)
 80014a0:	f002 fdc2 	bl	8004028 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80014aa:	f001 f9d1 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_ADC3_Init+0x11c>)
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014b2:	230c      	movs	r3, #12
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_ADC3_Init+0x110>)
 80014bc:	f002 fdb4 	bl	8004028 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80014c6:	f001 f9c3 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ca:	2301      	movs	r3, #1
 80014cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014ce:	2312      	movs	r3, #18
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_ADC3_Init+0x110>)
 80014d8:	f002 fda6 	bl	8004028 <HAL_ADC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014e2:	f001 f9b5 	bl	8002850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_ADC3_Init+0x120>)
 80014e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014ea:	2318      	movs	r3, #24
 80014ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_ADC3_Init+0x110>)
 80014f4:	f002 fd98 	bl	8004028 <HAL_ADC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014fe:	f001 f9a7 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000180 	.word	0x24000180
 8001510:	58026000 	.word	0x58026000
 8001514:	cb840000 	.word	0xcb840000
 8001518:	cfb80000 	.word	0xcfb80000
 800151c:	04300002 	.word	0x04300002

08001520 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2224      	movs	r2, #36	; 0x24
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f013 fbe5 	bl	8014cfc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_DAC1_Init+0x5c>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_DAC1_Init+0x60>)
 8001536:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_DAC1_Init+0x5c>)
 800153a:	f003 fdd7 	bl	80050ec <HAL_DAC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001544:	f001 f984 	bl	8002850 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800154c:	230a      	movs	r3, #10
 800154e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_DAC1_Init+0x5c>)
 8001564:	f003 fff2 	bl	800554c <HAL_DAC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800156e:	f001 f96f 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240002d4 	.word	0x240002d4
 8001580:	40007400 	.word	0x40007400

08001584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_I2C1_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <MX_I2C1_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_I2C1_Init+0x74>)
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <MX_I2C1_Init+0x7c>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_I2C1_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015c0:	f007 f9b8 	bl	8008934 <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ca:	f001 f941 	bl	8002850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015d2:	f007 fa4b 	bl	8008a6c <HAL_I2CEx_ConfigAnalogFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f001 f938 	bl	8002850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015e4:	f007 fa8d 	bl	8008b02 <HAL_I2CEx_ConfigDigitalFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f001 f92f 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000360 	.word	0x24000360
 80015fc:	40005400 	.word	0x40005400
 8001600:	00506682 	.word	0x00506682

08001604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_RTC_Init+0xb4>)
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <MX_RTC_Init+0xb8>)
 8001620:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <MX_RTC_Init+0xb4>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <MX_RTC_Init+0xb4>)
 800162a:	2220      	movs	r2, #32
 800162c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_RTC_Init+0xb4>)
 8001630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001634:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <MX_RTC_Init+0xb4>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_RTC_Init+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_RTC_Init+0xb4>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_RTC_Init+0xb4>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800164e:	481a      	ldr	r0, [pc, #104]	; (80016b8 <MX_RTC_Init+0xb4>)
 8001650:	f00b f804 	bl	800c65c <HAL_RTC_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800165a:	f001 f8f9 	bl	8002850 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800165e:	2300      	movs	r3, #0
 8001660:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001662:	2300      	movs	r3, #0
 8001664:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2201      	movs	r2, #1
 8001676:	4619      	mov	r1, r3
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <MX_RTC_Init+0xb4>)
 800167a:	f00b f871 	bl	800c760 <HAL_RTC_SetTime>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001684:	f001 f8e4 	bl	8002850 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001688:	2305      	movs	r3, #5
 800168a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800168c:	2305      	movs	r3, #5
 800168e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001690:	2331      	movs	r3, #49	; 0x31
 8001692:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001694:	2324      	movs	r3, #36	; 0x24
 8001696:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <MX_RTC_Init+0xb4>)
 80016a0:	f00b f958 	bl	800c954 <HAL_RTC_SetDate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80016aa:	f001 f8d1 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240003b4 	.word	0x240003b4
 80016bc:	58004000 	.word	0x58004000

080016c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016c6:	4a29      	ldr	r2, [pc, #164]	; (800176c <MX_SPI1_Init+0xac>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016dc:	220f      	movs	r2, #15
 80016de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016f6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_SPI1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_SPI1_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_SPI1_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001754:	f00b faa4 	bl	800cca0 <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800175e:	f001 f877 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	240003d8 	.word	0x240003d8
 800176c:	40013000 	.word	0x40013000

08001770 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <MX_SPI2_Init+0xac>)
 8001778:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <MX_SPI2_Init+0xa8>)
 800177c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001780:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001784:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001788:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_SPI2_Init+0xa8>)
 800178c:	220f      	movs	r2, #15
 800178e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_SPI2_Init+0xa8>)
 800179e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017a6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001804:	f00b fa4c 	bl	800cca0 <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800180e:	f001 f81f 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000460 	.word	0x24000460
 800181c:	40003800 	.word	0x40003800

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b09a      	sub	sp, #104	; 0x68
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	222c      	movs	r2, #44	; 0x2c
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f013 fa4e 	bl	8014cfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <MX_TIM1_Init+0x154>)
 8001862:	4a45      	ldr	r2, [pc, #276]	; (8001978 <MX_TIM1_Init+0x158>)
 8001864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <MX_TIM1_Init+0x154>)
 8001868:	225f      	movs	r2, #95	; 0x5f
 800186a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b41      	ldr	r3, [pc, #260]	; (8001974 <MX_TIM1_Init+0x154>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001872:	4b40      	ldr	r3, [pc, #256]	; (8001974 <MX_TIM1_Init+0x154>)
 8001874:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <MX_TIM1_Init+0x154>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <MX_TIM1_Init+0x154>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <MX_TIM1_Init+0x154>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800188c:	4839      	ldr	r0, [pc, #228]	; (8001974 <MX_TIM1_Init+0x154>)
 800188e:	f00b fb46 	bl	800cf1e <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001898:	f000 ffda 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a6:	4619      	mov	r1, r3
 80018a8:	4832      	ldr	r0, [pc, #200]	; (8001974 <MX_TIM1_Init+0x154>)
 80018aa:	f00c f985 	bl	800dbb8 <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018b4:	f000 ffcc 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018b8:	482e      	ldr	r0, [pc, #184]	; (8001974 <MX_TIM1_Init+0x154>)
 80018ba:	f00b fdf1 	bl	800d4a0 <HAL_TIM_PWM_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018c4:	f000 ffc4 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	4619      	mov	r1, r3
 80018da:	4826      	ldr	r0, [pc, #152]	; (8001974 <MX_TIM1_Init+0x154>)
 80018dc:	f00c fec2 	bl	800e664 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018e6:	f000 ffb3 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ea:	2360      	movs	r3, #96	; 0x60
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018ee:	f240 13df 	movw	r3, #479	; 0x1df
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	4818      	ldr	r0, [pc, #96]	; (8001974 <MX_TIM1_Init+0x154>)
 8001912:	f00c f83d 	bl	800d990 <HAL_TIM_PWM_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800191c:	f000 ff98 	bl	8002850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001938:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM1_Init+0x154>)
 8001956:	f00c ff13 	bl	800e780 <HAL_TIMEx_ConfigBreakDeadTime>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001960:	f000 ff76 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM1_Init+0x154>)
 8001966:	f001 fb01 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 800196a:	bf00      	nop
 800196c:	3768      	adds	r7, #104	; 0x68
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	240004e8 	.word	0x240004e8
 8001978:	40010000 	.word	0x40010000

0800197c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019b8:	222f      	movs	r2, #47	; 0x2f
 80019ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019c4:	f640 4234 	movw	r2, #3124	; 0xc34
 80019c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d6:	4823      	ldr	r0, [pc, #140]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019d8:	f00b faa1 	bl	800cf1e <HAL_TIM_Base_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019e2:	f000 ff35 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f0:	4619      	mov	r1, r3
 80019f2:	481c      	ldr	r0, [pc, #112]	; (8001a64 <MX_TIM2_Init+0xe8>)
 80019f4:	f00c f8e0 	bl	800dbb8 <HAL_TIM_ConfigClockSource>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019fe:	f000 ff27 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a02:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_TIM2_Init+0xe8>)
 8001a04:	f00b fd4c 	bl	800d4a0 <HAL_TIM_PWM_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a0e:	f000 ff1f 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a12:	2320      	movs	r3, #32
 8001a14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <MX_TIM2_Init+0xe8>)
 8001a22:	f00c fe1f 	bl	800e664 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a2c:	f000 ff10 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a30:	2360      	movs	r3, #96	; 0x60
 8001a32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	220c      	movs	r2, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM2_Init+0xe8>)
 8001a48:	f00b ffa2 	bl	800d990 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a52:	f000 fefd 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM2_Init+0xe8>)
 8001a58:	f001 fa88 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 8001a5c:	bf00      	nop
 8001a5e:	3738      	adds	r7, #56	; 0x38
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000534 	.word	0x24000534

08001a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <MX_TIM3_Init+0x98>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a8e:	222f      	movs	r2, #47	; 0x2f
 8001a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aae:	f00b fa36 	bl	800cf1e <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ab8:	f000 feca 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aca:	f00c f875 	bl	800dbb8 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f000 febc 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_TIM3_Init+0x94>)
 8001ae6:	f00c fdbd 	bl	800e664 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f000 feae 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	24000580 	.word	0x24000580
 8001b00:	40000400 	.word	0x40000400

08001b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b0a:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <MX_USART1_UART_Init+0x94>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b10:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b4c:	4811      	ldr	r0, [pc, #68]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b4e:	f00c feb3 	bl	800e8b8 <HAL_UART_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b58:	f000 fe7a 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b60:	f00f fad5 	bl	801110e <HAL_UARTEx_SetTxFifoThreshold>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b6a:	f000 fe71 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b72:	f00f fb0a 	bl	801118a <HAL_UARTEx_SetRxFifoThreshold>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b7c:	f000 fe68 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <MX_USART1_UART_Init+0x90>)
 8001b82:	f00f fa8b 	bl	801109c <HAL_UARTEx_DisableFifoMode>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b8c:	f000 fe60 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	240005cc 	.word	0x240005cc
 8001b98:	40011000 	.word	0x40011000

08001b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_DMA_Init+0x5c>)
 8001ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <MX_DMA_Init+0x5c>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_DMA_Init+0x5c>)
 8001bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	200b      	movs	r0, #11
 8001bc6:	f003 fa69 	bl	800509c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bca:	200b      	movs	r0, #11
 8001bcc:	f003 fa80 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	200c      	movs	r0, #12
 8001bd6:	f003 fa61 	bl	800509c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bda:	200c      	movs	r0, #12
 8001bdc:	f003 fa78 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2105      	movs	r1, #5
 8001be4:	2010      	movs	r0, #16
 8001be6:	f003 fa59 	bl	800509c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bea:	2010      	movs	r0, #16
 8001bec:	f003 fa70 	bl	80050d0 <HAL_NVIC_EnableIRQ>

}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	58024400 	.word	0x58024400

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	4a32      	ldr	r2, [pc, #200]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	4a2b      	ldr	r2, [pc, #172]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	4a23      	ldr	r2, [pc, #140]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_GPIO_Init+0xe8>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c92:	f006 fe35 	bl	8008900 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2164      	movs	r1, #100	; 0x64
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <MX_GPIO_Init+0xf0>)
 8001c9c:	f006 fe30 	bl	8008900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ca0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001ca4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001cba:	f006 fc59 	bl	8008570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cbe:	2364      	movs	r3, #100	; 0x64
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_GPIO_Init+0xf0>)
 8001cd6:	f006 fc4b 	bl	8008570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58020400 	.word	0x58020400

08001cf0 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b090      	sub	sp, #64	; 0x40
 8001cf4:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001cfa:	f107 011c 	add.w	r1, r7, #28
 8001cfe:	2364      	movs	r3, #100	; 0x64
 8001d00:	2209      	movs	r2, #9
 8001d02:	4840      	ldr	r0, [pc, #256]	; (8001e04 <handshake+0x114>)
 8001d04:	f00c feb6 	bl	800ea74 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001d08:	7f3b      	ldrb	r3, [r7, #28]
 8001d0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d1f1      	bne.n	8001cfa <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001d16:	7f7b      	ldrb	r3, [r7, #29]
 8001d18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001d1c:	7fbb      	ldrb	r3, [r7, #30]
 8001d1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
 8001d24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001d28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001d30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d3c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001d54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d58:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001d5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d5e:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001d60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d64:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001d66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d6a:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001d6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d70:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001d72:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d76:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d7a:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	2200      	movs	r2, #0
 8001d82:	4619      	mov	r1, r3
 8001d84:	4820      	ldr	r0, [pc, #128]	; (8001e08 <handshake+0x118>)
 8001d86:	f00a fde5 	bl	800c954 <HAL_RTC_SetDate>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <handshake+0xac>
	{
		Error_Handler();
 8001d98:	f000 fd5a 	bl	8002850 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4819      	ldr	r0, [pc, #100]	; (8001e08 <handshake+0x118>)
 8001da4:	f00a fcdc 	bl	800c760 <HAL_RTC_SetTime>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001dae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <handshake+0xca>
	{
		Error_Handler();
 8001db6:	f000 fd4b 	bl	8002850 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001dba:	23fa      	movs	r3, #250	; 0xfa
 8001dbc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ddc:	e009      	b.n	8001df2 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001dde:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001de2:	2364      	movs	r3, #100	; 0x64
 8001de4:	2205      	movs	r2, #5
 8001de6:	4807      	ldr	r0, [pc, #28]	; (8001e04 <handshake+0x114>)
 8001de8:	f00c fdb6 	bl	800e958 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dee:	3301      	adds	r3, #1
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf1      	blt.n	8001dde <handshake+0xee>
	}

	return 1;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3740      	adds	r7, #64	; 0x40
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	240005cc 	.word	0x240005cc
 8001e08:	240003b4 	.word	0x240003b4

08001e0c <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8001e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e14:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e1a:	210c      	movs	r1, #12
 8001e1c:	4818      	ldr	r0, [pc, #96]	; (8001e80 <system_setup+0x74>)
 8001e1e:	f00b fba1 	bl	800d564 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001e22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <system_setup+0x78>)
 8001e2c:	f002 ff3c 	bl	8004ca8 <HAL_ADCEx_Calibration_Start>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001e36:	f000 fd0b 	bl	8002850 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001e3a:	220b      	movs	r2, #11
 8001e3c:	4912      	ldr	r1, [pc, #72]	; (8001e88 <system_setup+0x7c>)
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <system_setup+0x78>)
 8001e40:	f002 f810 	bl	8003e64 <HAL_ADC_Start_DMA>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e4a:	f000 fd01 	bl	8002850 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001e4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e56:	480d      	ldr	r0, [pc, #52]	; (8001e8c <system_setup+0x80>)
 8001e58:	f002 ff26 	bl	8004ca8 <HAL_ADCEx_Calibration_Start>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001e62:	f000 fcf5 	bl	8002850 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001e66:	2204      	movs	r2, #4
 8001e68:	4909      	ldr	r1, [pc, #36]	; (8001e90 <system_setup+0x84>)
 8001e6a:	4808      	ldr	r0, [pc, #32]	; (8001e8c <system_setup+0x80>)
 8001e6c:	f001 fffa 	bl	8003e64 <HAL_ADC_Start_DMA>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e76:	f000 fceb 	bl	8002850 <Error_Handler>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	24000534 	.word	0x24000534
 8001e84:	2400011c 	.word	0x2400011c
 8001e88:	24000bc0 	.word	0x24000bc0
 8001e8c:	24000180 	.word	0x24000180
 8001e90:	24000be0 	.word	0x24000be0

08001e94 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	481d      	ldr	r0, [pc, #116]	; (8001f1c <getTimestamp+0x88>)
 8001ea6:	f00a fcf9 	bl	800c89c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2200      	movs	r2, #0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	481a      	ldr	r0, [pc, #104]	; (8001f1c <getTimestamp+0x88>)
 8001eb4:	f00a fdd6 	bl	800ca64 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <getTimestamp+0x88>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	7b7a      	ldrb	r2, [r7, #13]
 8001edc:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	7bba      	ldrb	r2, [r7, #14]
 8001ee4:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	7c3a      	ldrb	r2, [r7, #16]
 8001eec:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	7c7a      	ldrb	r2, [r7, #17]
 8001ef4:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3305      	adds	r3, #5
 8001efa:	7cba      	ldrb	r2, [r7, #18]
 8001efc:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	0a1a      	lsrs	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3306      	adds	r3, #6
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3307      	adds	r3, #7
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	240003b4 	.word	0x240003b4

08001f20 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f012 fec5 	bl	8014cc0 <malloc>
 8001f36:	4603      	mov	r3, r0
 8001f38:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Memory allocation failed
		// Handle the error accordingly (e.g., return an error code or terminate the program)
	}
	memcpy(packet.array, data, size); // Copy the data into the packet array
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f012 fecd 	bl	8014ce0 <memcpy>
	packet.size = size;
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001f6a:	bf00      	nop
 8001f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f70:	483f      	ldr	r0, [pc, #252]	; (8002070 <sample_pmt+0x10c>)
 8001f72:	f006 fcad 	bl	80088d0 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f7      	bne.n	8001f6c <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001f7c:	200e      	movs	r0, #14
 8001f7e:	f012 fe9f 	bl	8014cc0 <malloc>
 8001f82:	4603      	mov	r3, r0
 8001f84:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001f86:	2002      	movs	r0, #2
 8001f88:	f012 fe9a 	bl	8014cc0 <malloc>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001f90:	2008      	movs	r0, #8
 8001f92:	f012 fe95 	bl	8014cc0 <malloc>
 8001f96:	4603      	mov	r3, r0
 8001f98:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff ff7a 	bl	8001e94 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	220e      	movs	r2, #14
 8001fa4:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	220d      	movs	r2, #13
 8001fac:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	22bb      	movs	r2, #187	; 0xbb
 8001fb2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	22bb      	movs	r2, #187	; 0xbb
 8001fba:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <sample_pmt+0x110>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <sample_pmt+0x110>)
 8001fce:	881a      	ldrh	r2, [r3, #0]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	7852      	ldrb	r2, [r2, #1]
 8001fea:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3306      	adds	r3, #6
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3307      	adds	r3, #7
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	7852      	ldrb	r2, [r2, #1]
 8001ffe:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3308      	adds	r3, #8
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	7892      	ldrb	r2, [r2, #2]
 8002008:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3309      	adds	r3, #9
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	78d2      	ldrb	r2, [r2, #3]
 8002012:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	330a      	adds	r3, #10
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	7912      	ldrb	r2, [r2, #4]
 800201c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	330b      	adds	r3, #11
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	7952      	ldrb	r2, [r2, #5]
 8002026:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	330c      	adds	r3, #12
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	7992      	ldrb	r2, [r2, #6]
 8002030:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	330d      	adds	r3, #13
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	79d2      	ldrb	r2, [r2, #7]
 800203a:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	220e      	movs	r2, #14
 8002040:	6979      	ldr	r1, [r7, #20]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff6c 	bl	8001f20 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <sample_pmt+0x114>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	1d39      	adds	r1, r7, #4
 800204e:	2300      	movs	r3, #0
 8002050:	2200      	movs	r2, #0
 8002052:	f00f fc01 	bl	8011858 <osMessageQueuePut>
	free(buffer);
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f012 fe3a 	bl	8014cd0 <free>
	free(pmt_spi);
 800205c:	6938      	ldr	r0, [r7, #16]
 800205e:	f012 fe37 	bl	8014cd0 <free>
	free(timestamp);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f012 fe34 	bl	8014cd0 <free>
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	58020000 	.word	0x58020000
 8002074:	24000b38 	.word	0x24000b38
 8002078:	24000b34 	.word	0x24000b34

0800207c <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002082:	bf00      	nop
 8002084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002088:	4856      	ldr	r0, [pc, #344]	; (80021e4 <sample_erpa+0x168>)
 800208a:	f006 fc21 	bl	80088d0 <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f7      	bne.n	8002084 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002094:	2012      	movs	r0, #18
 8002096:	f012 fe13 	bl	8014cc0 <malloc>
 800209a:	4603      	mov	r3, r0
 800209c:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800209e:	2002      	movs	r0, #2
 80020a0:	f012 fe0e 	bl	8014cc0 <malloc>
 80020a4:	4603      	mov	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80020a8:	2004      	movs	r0, #4
 80020aa:	f012 fe09 	bl	8014cc0 <malloc>
 80020ae:	4603      	mov	r3, r0
 80020b0:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80020b2:	2008      	movs	r0, #8
 80020b4:	f012 fe04 	bl	8014cc0 <malloc>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7ff fee9 	bl	8001e94 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	220e      	movs	r2, #14
 80020c6:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3301      	adds	r3, #1
 80020cc:	220d      	movs	r2, #13
 80020ce:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	22ee      	movs	r2, #238	; 0xee
 80020d4:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3302      	adds	r3, #2
 80020da:	22dd      	movs	r2, #221	; 0xdd
 80020dc:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	22aa      	movs	r2, #170	; 0xaa
 80020e2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	22aa      	movs	r2, #170	; 0xaa
 80020ea:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <sample_erpa+0x16c>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3302      	adds	r3, #2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <sample_erpa+0x16c>)
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3303      	adds	r3, #3
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	b29a      	uxth	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3304      	adds	r3, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3305      	adds	r3, #5
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3302      	adds	r3, #2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	b29a      	uxth	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3306      	adds	r3, #6
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3302      	adds	r3, #2
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3307      	adds	r3, #7
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3308      	adds	r3, #8
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3309      	adds	r3, #9
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	7852      	ldrb	r2, [r2, #1]
 8002156:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	330a      	adds	r3, #10
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	330b      	adds	r3, #11
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	7852      	ldrb	r2, [r2, #1]
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	330c      	adds	r3, #12
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	7892      	ldrb	r2, [r2, #2]
 8002174:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	330d      	adds	r3, #13
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	78d2      	ldrb	r2, [r2, #3]
 800217e:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	330e      	adds	r3, #14
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	7912      	ldrb	r2, [r2, #4]
 8002188:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	330f      	adds	r3, #15
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	7952      	ldrb	r2, [r2, #5]
 8002192:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3310      	adds	r3, #16
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	7992      	ldrb	r2, [r2, #6]
 800219c:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3311      	adds	r3, #17
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	79d2      	ldrb	r2, [r2, #7]
 80021a6:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80021a8:	463b      	mov	r3, r7
 80021aa:	2212      	movs	r2, #18
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff feb6 	bl	8001f20 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <sample_erpa+0x170>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	4639      	mov	r1, r7
 80021ba:	2300      	movs	r3, #0
 80021bc:	2200      	movs	r2, #0
 80021be:	f00f fb4b 	bl	8011858 <osMessageQueuePut>
	free(buffer);
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f012 fd84 	bl	8014cd0 <free>
	free(erpa_spi);
 80021c8:	6938      	ldr	r0, [r7, #16]
 80021ca:	f012 fd81 	bl	8014cd0 <free>
	free(erpa_adc);
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f012 fd7e 	bl	8014cd0 <free>
	free(timestamp);
 80021d4:	68b8      	ldr	r0, [r7, #8]
 80021d6:	f012 fd7b 	bl	8014cd0 <free>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	58020400 	.word	0x58020400
 80021e8:	24000b3a 	.word	0x24000b3a
 80021ec:	24000b34 	.word	0x24000b34

080021f0 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80021f6:	202e      	movs	r0, #46	; 0x2e
 80021f8:	f012 fd62 	bl	8014cc0 <malloc>
 80021fc:	4603      	mov	r3, r0
 80021fe:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002200:	2008      	movs	r0, #8
 8002202:	f012 fd5d 	bl	8014cc0 <malloc>
 8002206:	4603      	mov	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800220a:	2012      	movs	r0, #18
 800220c:	f012 fd58 	bl	8014cc0 <malloc>
 8002210:	4603      	mov	r3, r0
 8002212:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002214:	2008      	movs	r0, #8
 8002216:	f012 fd53 	bl	8014cc0 <malloc>
 800221a:	4603      	mov	r3, r0
 800221c:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800221e:	2008      	movs	r0, #8
 8002220:	f012 fd4e 	bl	8014cc0 <malloc>
 8002224:	4603      	mov	r3, r0
 8002226:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff fe33 	bl	8001e94 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2211      	movs	r2, #17
 8002232:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	3302      	adds	r3, #2
 8002238:	2212      	movs	r2, #18
 800223a:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	3304      	adds	r3, #4
 8002240:	2213      	movs	r2, #19
 8002242:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	3306      	adds	r3, #6
 8002248:	2214      	movs	r2, #20
 800224a:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	22a0      	movs	r2, #160	; 0xa0
 8002250:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3302      	adds	r3, #2
 8002256:	22a1      	movs	r2, #161	; 0xa1
 8002258:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3304      	adds	r3, #4
 800225e:	22a2      	movs	r2, #162	; 0xa2
 8002260:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3306      	adds	r3, #6
 8002266:	22a3      	movs	r2, #163	; 0xa3
 8002268:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3308      	adds	r3, #8
 800226e:	22a4      	movs	r2, #164	; 0xa4
 8002270:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	330a      	adds	r3, #10
 8002276:	22a5      	movs	r2, #165	; 0xa5
 8002278:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	330c      	adds	r3, #12
 800227e:	22a6      	movs	r2, #166	; 0xa6
 8002280:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	330e      	adds	r3, #14
 8002286:	22a7      	movs	r2, #167	; 0xa7
 8002288:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3310      	adds	r3, #16
 800228e:	22a8      	movs	r2, #168	; 0xa8
 8002290:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	22b0      	movs	r2, #176	; 0xb0
 8002296:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	3302      	adds	r3, #2
 800229c:	22b1      	movs	r2, #177	; 0xb1
 800229e:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	3304      	adds	r3, #4
 80022a4:	22b2      	movs	r2, #178	; 0xb2
 80022a6:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3306      	adds	r3, #6
 80022ac:	22b3      	movs	r2, #179	; 0xb3
 80022ae:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	22cc      	movs	r2, #204	; 0xcc
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	22cc      	movs	r2, #204	; 0xcc
 80022bc:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80022be:	4ba5      	ldr	r3, [pc, #660]	; (8002554 <sample_hk+0x364>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3302      	adds	r3, #2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80022ce:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <sample_hk+0x364>)
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3303      	adds	r3, #3
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3302      	adds	r3, #2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3304      	adds	r3, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	3302      	adds	r3, #2
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3305      	adds	r3, #5
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b29a      	uxth	r2, r3
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3306      	adds	r3, #6
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3307      	adds	r3, #7
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231c:	121a      	asrs	r2, r3, #8
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3308      	adds	r3, #8
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f9b3 2000 	ldrsh.w	r2, [r3]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	3309      	adds	r3, #9
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	3302      	adds	r3, #2
 8002338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233c:	121a      	asrs	r2, r3, #8
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	330a      	adds	r3, #10
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3302      	adds	r3, #2
 800234a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	330b      	adds	r3, #11
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	3304      	adds	r3, #4
 800235a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235e:	121a      	asrs	r2, r3, #8
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	330c      	adds	r3, #12
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	3304      	adds	r3, #4
 800236c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	330d      	adds	r3, #13
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	3306      	adds	r3, #6
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	121a      	asrs	r2, r3, #8
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	330e      	adds	r3, #14
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	3306      	adds	r3, #6
 800238e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	330f      	adds	r3, #15
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3310      	adds	r3, #16
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3311      	adds	r3, #17
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3302      	adds	r3, #2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	b29a      	uxth	r2, r3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3312      	adds	r3, #18
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3302      	adds	r3, #2
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3313      	adds	r3, #19
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3304      	adds	r3, #4
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	b29a      	uxth	r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3314      	adds	r3, #20
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3304      	adds	r3, #4
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3315      	adds	r3, #21
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3306      	adds	r3, #6
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b29a      	uxth	r2, r3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3316      	adds	r3, #22
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	3306      	adds	r3, #6
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3317      	adds	r3, #23
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	330c      	adds	r3, #12
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	b29a      	uxth	r2, r3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3318      	adds	r3, #24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	330c      	adds	r3, #12
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3319      	adds	r3, #25
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3306      	adds	r3, #6
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29a      	uxth	r2, r3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	331a      	adds	r3, #26
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3306      	adds	r3, #6
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	331b      	adds	r3, #27
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3304      	adds	r3, #4
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	b29a      	uxth	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	331c      	adds	r3, #28
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3304      	adds	r3, #4
 800246c:	881a      	ldrh	r2, [r3, #0]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	331d      	adds	r3, #29
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	330e      	adds	r3, #14
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b29a      	uxth	r2, r3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	331e      	adds	r3, #30
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	330e      	adds	r3, #14
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	331f      	adds	r3, #31
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3310      	adds	r3, #16
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29a      	uxth	r2, r3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3320      	adds	r3, #32
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3310      	adds	r3, #16
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3321      	adds	r3, #33	; 0x21
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3308      	adds	r3, #8
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	b29a      	uxth	r2, r3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3322      	adds	r3, #34	; 0x22
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3308      	adds	r3, #8
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3323      	adds	r3, #35	; 0x23
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	330a      	adds	r3, #10
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29a      	uxth	r2, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3324      	adds	r3, #36	; 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	330a      	adds	r3, #10
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3325      	adds	r3, #37	; 0x25
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3326      	adds	r3, #38	; 0x26
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	3327      	adds	r3, #39	; 0x27
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	7852      	ldrb	r2, [r2, #1]
 8002508:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3328      	adds	r3, #40	; 0x28
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	7892      	ldrb	r2, [r2, #2]
 8002512:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3329      	adds	r3, #41	; 0x29
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	78d2      	ldrb	r2, [r2, #3]
 800251c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	332a      	adds	r3, #42	; 0x2a
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	7912      	ldrb	r2, [r2, #4]
 8002526:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	332b      	adds	r3, #43	; 0x2b
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	7952      	ldrb	r2, [r2, #5]
 8002530:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	332c      	adds	r3, #44	; 0x2c
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	7992      	ldrb	r2, [r2, #6]
 800253a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	332d      	adds	r3, #45	; 0x2d
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	79d2      	ldrb	r2, [r2, #7]
 8002544:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	222e      	movs	r2, #46	; 0x2e
 800254a:	69f9      	ldr	r1, [r7, #28]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fce7 	bl	8001f20 <create_packet>
 8002552:	e001      	b.n	8002558 <sample_hk+0x368>
 8002554:	24000b3c 	.word	0x24000b3c
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <sample_hk+0x39c>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	1d39      	adds	r1, r7, #4
 800255e:	2300      	movs	r3, #0
 8002560:	2200      	movs	r2, #0
 8002562:	f00f f979 	bl	8011858 <osMessageQueuePut>
	free(buffer);
 8002566:	69f8      	ldr	r0, [r7, #28]
 8002568:	f012 fbb2 	bl	8014cd0 <free>
	free(hk_i2c);
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	f012 fbaf 	bl	8014cd0 <free>
	free(hk_adc1);
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f012 fbac 	bl	8014cd0 <free>
	free(hk_adc3);
 8002578:	6938      	ldr	r0, [r7, #16]
 800257a:	f012 fba9 	bl	8014cd0 <free>
	free(timestamp);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f012 fba6 	bl	8014cd0 <free>
}
 8002584:	bf00      	nop
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24000b34 	.word	0x24000b34

08002590 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <PMT_init+0x38>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a0:	2200      	movs	r2, #0
 80025a2:	2101      	movs	r1, #1
 80025a4:	f00f f87e 	bl	80116a4 <osEventFlagsWait>
		if(PMT_ON){
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <PMT_init+0x3c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <PMT_init+0x30>
			sample_pmt();
 80025b0:	f7ff fcd8 	bl	8001f64 <sample_pmt>
			pmt_seq++;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <PMT_init+0x40>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <PMT_init+0x40>)
 80025be:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80025c0:	f00e ff90 	bl	80114e4 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025c4:	e7e8      	b.n	8002598 <PMT_init+0x8>
 80025c6:	bf00      	nop
 80025c8:	24000b44 	.word	0x24000b44
 80025cc:	24000b3e 	.word	0x24000b3e
 80025d0:	24000b38 	.word	0x24000b38

080025d4 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <ERPA_init+0x38>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e4:	2200      	movs	r2, #0
 80025e6:	2102      	movs	r1, #2
 80025e8:	f00f f85c 	bl	80116a4 <osEventFlagsWait>
		if (ERPA_ON)
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <ERPA_init+0x3c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <ERPA_init+0x30>
		{
			sample_erpa();
 80025f4:	f7ff fd42 	bl	800207c <sample_erpa>
			erpa_seq++;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <ERPA_init+0x40>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <ERPA_init+0x40>)
 8002602:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002604:	f00e ff6e 	bl	80114e4 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002608:	e7e8      	b.n	80025dc <ERPA_init+0x8>
 800260a:	bf00      	nop
 800260c:	24000b44 	.word	0x24000b44
 8002610:	24000b3f 	.word	0x24000b3f
 8002614:	24000b3a 	.word	0x24000b3a

08002618 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HK_init+0x38>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002628:	2200      	movs	r2, #0
 800262a:	2104      	movs	r1, #4
 800262c:	f00f f83a 	bl	80116a4 <osEventFlagsWait>
		if(HK_ON)
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HK_init+0x3c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HK_init+0x30>
		{
			sample_hk();
 8002638:	f7ff fdda 	bl	80021f0 <sample_hk>
			hk_seq++;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HK_init+0x40>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HK_init+0x40>)
 8002646:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002648:	f00e ff4c 	bl	80114e4 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800264c:	e7e8      	b.n	8002620 <HK_init+0x8>
 800264e:	bf00      	nop
 8002650:	24000b44 	.word	0x24000b44
 8002654:	24000b40 	.word	0x24000b40
 8002658:	24000b3c 	.word	0x24000b3c

0800265c <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002664:	2201      	movs	r2, #1
 8002666:	4904      	ldr	r1, [pc, #16]	; (8002678 <UART_RX_init+0x1c>)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <UART_RX_init+0x20>)
 800266a:	f00c facb 	bl	800ec04 <HAL_UART_Receive_IT>
		osDelay(5);
 800266e:	2005      	movs	r0, #5
 8002670:	f00e ff79 	bl	8011566 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002674:	e7f6      	b.n	8002664 <UART_RX_init+0x8>
 8002676:	bf00      	nop
 8002678:	24000b48 	.word	0x24000b48
 800267c:	240005cc 	.word	0x240005cc

08002680 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
		; // Insert thread code here...

		status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <UART_TX_init+0x50>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	f107 010c 	add.w	r1, r7, #12
 8002690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002694:	2200      	movs	r2, #0
 8002696:	f00f f93f 	bl	8011918 <osMessageQueueGet>
 800269a:	6178      	str	r0, [r7, #20]

		if (status == osOK) {
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d113      	bne.n	80026ca <UART_TX_init+0x4a>
			printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <UART_TX_init+0x50>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00f f994 	bl	80119d4 <osMessageQueueGetCount>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4619      	mov	r1, r3
 80026b0:	4808      	ldr	r0, [pc, #32]	; (80026d4 <UART_TX_init+0x54>)
 80026b2:	f012 fc0b 	bl	8014ecc <iprintf>
			HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 80026b6:	68f9      	ldr	r1, [r7, #12]
 80026b8:	8a3a      	ldrh	r2, [r7, #16]
 80026ba:	2364      	movs	r3, #100	; 0x64
 80026bc:	4806      	ldr	r0, [pc, #24]	; (80026d8 <UART_TX_init+0x58>)
 80026be:	f00c f94b 	bl	800e958 <HAL_UART_Transmit>
			free(msg.array);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f012 fb03 	bl	8014cd0 <free>
		}
		osThreadYield();
 80026ca:	f00e ff0b 	bl	80114e4 <osThreadYield>
		status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80026ce:	e7db      	b.n	8002688 <UART_TX_init+0x8>
 80026d0:	24000b34 	.word	0x24000b34
 80026d4:	08015f88 	.word	0x08015f88
 80026d8:	240005cc 	.word	0x240005cc

080026dc <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <GPIO_on_init+0x9c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f00e ff1b 	bl	8011524 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <GPIO_on_init+0xa0>)
 80026f0:	2104      	movs	r1, #4
 80026f2:	2201      	movs	r2, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f006 f903 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 80026fa:	2064      	movs	r0, #100	; 0x64
 80026fc:	f00e ff33 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <GPIO_on_init+0xa0>)
 8002702:	2120      	movs	r1, #32
 8002704:	2201      	movs	r2, #1
 8002706:	4618      	mov	r0, r3
 8002708:	f006 f8fa 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 800270c:	2064      	movs	r0, #100	; 0x64
 800270e:	f00e ff2a 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <GPIO_on_init+0xa4>)
 8002714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002718:	2201      	movs	r2, #1
 800271a:	4618      	mov	r0, r3
 800271c:	f006 f8f0 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 8002720:	2064      	movs	r0, #100	; 0x64
 8002722:	f00e ff20 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <GPIO_on_init+0xa4>)
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	2201      	movs	r2, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f006 f8e7 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 8002732:	2064      	movs	r0, #100	; 0x64
 8002734:	f00e ff17 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <GPIO_on_init+0xa4>)
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	2201      	movs	r2, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f006 f8de 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f00e ff0e 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <GPIO_on_init+0xa4>)
 800274c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002750:	2201      	movs	r2, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f006 f8d4 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f00e ff04 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <GPIO_on_init+0xa4>)
 8002760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002764:	2201      	movs	r2, #1
 8002766:	4618      	mov	r0, r3
 8002768:	f006 f8ca 	bl	8008900 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 800276c:	4b02      	ldr	r3, [pc, #8]	; (8002778 <GPIO_on_init+0x9c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f00e fed7 	bl	8011524 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002776:	e7ba      	b.n	80026ee <GPIO_on_init+0x12>
 8002778:	24000674 	.word	0x24000674
 800277c:	58020400 	.word	0x58020400
 8002780:	58020800 	.word	0x58020800

08002784 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <GPIO_off_init+0x9c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f00e fec7 	bl	8011524 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002796:	4b23      	ldr	r3, [pc, #140]	; (8002824 <GPIO_off_init+0xa0>)
 8002798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800279c:	2200      	movs	r2, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 f8ae 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 80027a4:	2064      	movs	r0, #100	; 0x64
 80027a6:	f00e fede 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <GPIO_off_init+0xa0>)
 80027ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b0:	2200      	movs	r2, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f006 f8a4 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	f00e fed4 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <GPIO_off_init+0xa0>)
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	2200      	movs	r2, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f006 f89b 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 80027ca:	2064      	movs	r0, #100	; 0x64
 80027cc:	f00e fecb 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <GPIO_off_init+0xa0>)
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	2200      	movs	r2, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f006 f892 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 80027dc:	2064      	movs	r0, #100	; 0x64
 80027de:	f00e fec2 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <GPIO_off_init+0xa0>)
 80027e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027e8:	2200      	movs	r2, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f006 f888 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 80027f0:	2064      	movs	r0, #100	; 0x64
 80027f2:	f00e feb8 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80027f6:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <GPIO_off_init+0xa4>)
 80027f8:	2120      	movs	r1, #32
 80027fa:	2200      	movs	r2, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f006 f87f 	bl	8008900 <HAL_GPIO_WritePin>
		osDelay(100);
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f00e feaf 	bl	8011566 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <GPIO_off_init+0xa4>)
 800280a:	2104      	movs	r1, #4
 800280c:	2200      	movs	r2, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f006 f876 	bl	8008900 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <GPIO_off_init+0x9c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f00e fe83 	bl	8011524 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 800281e:	e7ba      	b.n	8002796 <GPIO_off_init+0x12>
 8002820:	240008d4 	.word	0x240008d4
 8002824:	58020800 	.word	0x58020800
 8002828:	58020400 	.word	0x58020400

0800282c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800283e:	f000 ff1f 	bl	8003680 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40001000 	.word	0x40001000

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002858:	e7fe      	b.n	8002858 <Error_Handler+0x8>
	...

0800285c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_MspInit+0x38>)
 8002864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_MspInit+0x38>)
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_MspInit+0x38>)
 8002874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	210f      	movs	r1, #15
 8002884:	f06f 0001 	mvn.w	r0, #1
 8002888:	f002 fc08 	bl	800509c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	58024400 	.word	0x58024400

08002898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08e      	sub	sp, #56	; 0x38
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7b      	ldr	r2, [pc, #492]	; (8002aa4 <HAL_ADC_MspInit+0x20c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f040 8091 	bne.w	80029de <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80028bc:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028c2:	4a79      	ldr	r2, [pc, #484]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028c4:	f043 0320 	orr.w	r3, r3, #32
 80028c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e0:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ea:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fe:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002908:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	4b64      	ldr	r3, [pc, #400]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 8002918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291c:	4a62      	ldr	r2, [pc, #392]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002926:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 8002928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002934:	2333      	movs	r3, #51	; 0x33
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002938:	2303      	movs	r3, #3
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4859      	ldr	r0, [pc, #356]	; (8002aac <HAL_ADC_MspInit+0x214>)
 8002948:	f005 fe12 	bl	8008570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800294c:	23ce      	movs	r3, #206	; 0xce
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002950:	2303      	movs	r3, #3
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	4854      	ldr	r0, [pc, #336]	; (8002ab0 <HAL_ADC_MspInit+0x218>)
 8002960:	f005 fe06 	bl	8008570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002964:	2303      	movs	r3, #3
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002968:	2303      	movs	r3, #3
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	484f      	ldr	r0, [pc, #316]	; (8002ab4 <HAL_ADC_MspInit+0x21c>)
 8002978:	f005 fdfa 	bl	8008570 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 800297e:	4a4f      	ldr	r2, [pc, #316]	; (8002abc <HAL_ADC_MspInit+0x224>)
 8002980:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002982:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 8002984:	2209      	movs	r2, #9
 8002986:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 8002996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800299a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 800299e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029a4:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029ac:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029bc:	2200      	movs	r2, #0
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029c0:	483d      	ldr	r0, [pc, #244]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029c2:	f002 ff99 	bl	80058f8 <HAL_DMA_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80029cc:	f7ff ff40 	bl	8002850 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a39      	ldr	r2, [pc, #228]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80029d6:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <HAL_ADC_MspInit+0x220>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029dc:	e05e      	b.n	8002a9c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a37      	ldr	r2, [pc, #220]	; (8002ac0 <HAL_ADC_MspInit+0x228>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d159      	bne.n	8002a9c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80029f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_ADC_MspInit+0x210>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002a24:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002a28:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a2c:	f000 fe54 	bl	80036d8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a38:	f000 fe4e 	bl	80036d8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_ADC_MspInit+0x230>)
 8002a40:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a44:	2273      	movs	r2, #115	; 0x73
 8002a46:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a5a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a62:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a72:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a80:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a82:	f002 ff39 	bl	80058f8 <HAL_DMA_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002a8c:	f7ff fee0 	bl	8002850 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a94:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_ADC_MspInit+0x22c>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a9c:	bf00      	nop
 8002a9e:	3738      	adds	r7, #56	; 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58020800 	.word	0x58020800
 8002ab0:	58020000 	.word	0x58020000
 8002ab4:	58020400 	.word	0x58020400
 8002ab8:	240001e4 	.word	0x240001e4
 8002abc:	40020010 	.word	0x40020010
 8002ac0:	58026000 	.word	0x58026000
 8002ac4:	2400025c 	.word	0x2400025c
 8002ac8:	40020028 	.word	0x40020028

08002acc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_DAC_MspInit+0xf0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d161      	bne.n	8002bb2 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_DAC_MspInit+0xf4>)
 8002af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af4:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_DAC_MspInit+0xf4>)
 8002af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_DAC_MspInit+0xf4>)
 8002b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_DAC_MspInit+0xf4>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_DAC_MspInit+0xf4>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_DAC_MspInit+0xf4>)
 8002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4821      	ldr	r0, [pc, #132]	; (8002bc4 <HAL_DAC_MspInit+0xf8>)
 8002b3e:	f005 fd17 	bl	8008570 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_DAC_MspInit+0x100>)
 8002b46:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b4a:	2243      	movs	r2, #67	; 0x43
 8002b4c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b50:	2240      	movs	r2, #64	; 0x40
 8002b52:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b60:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b68:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b70:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b78:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002b86:	4810      	ldr	r0, [pc, #64]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b88:	f002 feb6 	bl	80058f8 <HAL_DMA_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002b92:	f7ff fe5d 	bl	8002850 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_DAC_MspInit+0xfc>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	2036      	movs	r0, #54	; 0x36
 8002ba8:	f002 fa78 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bac:	2036      	movs	r0, #54	; 0x36
 8002bae:	f002 fa8f 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	; 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40007400 	.word	0x40007400
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	58020000 	.word	0x58020000
 8002bc8:	240002e8 	.word	0x240002e8
 8002bcc:	40020088 	.word	0x40020088

08002bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0ba      	sub	sp, #232	; 0xe8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	22c0      	movs	r2, #192	; 0xc0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f012 f883 	bl	8014cfc <memset>
  if(hi2c->Instance==I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_I2C_MspInit+0xc8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d146      	bne.n	8002c8e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c00:	f04f 0208 	mov.w	r2, #8
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f007 f822 	bl	8009c60 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c22:	f7ff fe15 	bl	8002850 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_I2C_MspInit+0xcc>)
 8002c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_I2C_MspInit+0xcc>)
 8002c2e:	f043 0302 	orr.w	r3, r3, #2
 8002c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_I2C_MspInit+0xcc>)
 8002c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4c:	2312      	movs	r3, #18
 8002c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <HAL_I2C_MspInit+0xd0>)
 8002c6c:	f005 fc80 	bl	8008570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_I2C_MspInit+0xcc>)
 8002c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_I2C_MspInit+0xcc>)
 8002c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_I2C_MspInit+0xcc>)
 8002c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	37e8      	adds	r7, #232	; 0xe8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	58020400 	.word	0x58020400

08002ca4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0b2      	sub	sp, #200	; 0xc8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	22c0      	movs	r2, #192	; 0xc0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f012 f821 	bl	8014cfc <memset>
  if(hrtc->Instance==RTC)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_RTC_MspInit+0x5c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d119      	bne.n	8002cf8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f006 ffbf 	bl	8009c60 <HAL_RCCEx_PeriphCLKConfig>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002ce8:	f7ff fdb2 	bl	8002850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RTC_MspInit+0x60>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_RTC_MspInit+0x60>)
 8002cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cf8:	bf00      	nop
 8002cfa:	37c8      	adds	r7, #200	; 0xc8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	58004000 	.word	0x58004000
 8002d04:	58024400 	.word	0x58024400

08002d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b0bc      	sub	sp, #240	; 0xf0
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	22c0      	movs	r2, #192	; 0xc0
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f011 ffe7 	bl	8014cfc <memset>
  if(hspi->Instance==SPI1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a4c      	ldr	r2, [pc, #304]	; (8002e64 <HAL_SPI_MspInit+0x15c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d145      	bne.n	8002dc4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d48:	f107 0318 	add.w	r3, r7, #24
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f006 ff87 	bl	8009c60 <HAL_RCCEx_PeriphCLKConfig>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002d58:	f7ff fd7a 	bl	8002850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d62:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d80:	4a39      	ldr	r2, [pc, #228]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002d98:	2318      	movs	r3, #24
 8002d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002db0:	2305      	movs	r3, #5
 8002db2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dba:	4619      	mov	r1, r3
 8002dbc:	482b      	ldr	r0, [pc, #172]	; (8002e6c <HAL_SPI_MspInit+0x164>)
 8002dbe:	f005 fbd7 	bl	8008570 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dc2:	e04a      	b.n	8002e5a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_SPI_MspInit+0x168>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d145      	bne.n	8002e5a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dde:	f107 0318 	add.w	r3, r7, #24
 8002de2:	4618      	mov	r0, r3
 8002de4:	f006 ff3c 	bl	8009c60 <HAL_RCCEx_PeriphCLKConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002dee:	f7ff fd2f 	bl	8002850 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_SPI_MspInit+0x160>)
 8002e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002e2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e48:	2305      	movs	r3, #5
 8002e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <HAL_SPI_MspInit+0x164>)
 8002e56:	f005 fb8b 	bl	8008570 <HAL_GPIO_Init>
}
 8002e5a:	bf00      	nop
 8002e5c:	37f0      	adds	r7, #240	; 0xf0
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40013000 	.word	0x40013000
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	58020400 	.word	0x58020400
 8002e70:	40003800 	.word	0x40003800

08002e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <HAL_TIM_Base_MspInit+0xec>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d12f      	bne.n	8002ee6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e8c:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	2018      	movs	r0, #24
 8002eaa:	f002 f8f7 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002eae:	2018      	movs	r0, #24
 8002eb0:	f002 f90e 	bl	80050d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2105      	movs	r1, #5
 8002eb8:	2019      	movs	r0, #25
 8002eba:	f002 f8ef 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ebe:	2019      	movs	r0, #25
 8002ec0:	f002 f906 	bl	80050d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	201a      	movs	r0, #26
 8002eca:	f002 f8e7 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002ece:	201a      	movs	r0, #26
 8002ed0:	f002 f8fe 	bl	80050d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2105      	movs	r1, #5
 8002ed8:	201b      	movs	r0, #27
 8002eda:	f002 f8df 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ede:	201b      	movs	r0, #27
 8002ee0:	f002 f8f6 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ee4:	e038      	b.n	8002f58 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d117      	bne.n	8002f20 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2105      	movs	r1, #5
 8002f12:	201c      	movs	r0, #28
 8002f14:	f002 f8c2 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f18:	201c      	movs	r0, #28
 8002f1a:	f002 f8d9 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 8002f1e:	e01b      	b.n	8002f58 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_TIM_Base_MspInit+0xf4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d116      	bne.n	8002f58 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_TIM_Base_MspInit+0xf0>)
 8002f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	201d      	movs	r0, #29
 8002f4e:	f002 f8a5 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f52:	201d      	movs	r0, #29
 8002f54:	f002 f8bc 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40010000 	.word	0x40010000
 8002f64:	58024400 	.word	0x58024400
 8002f68:	40000400 	.word	0x40000400

08002f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <HAL_TIM_MspPostInit+0xb8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d120      	bne.n	8002fd0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_TIM_MspPostInit+0xbc>)
 8002f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_TIM_MspPostInit+0xbc>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f9e:	4b22      	ldr	r3, [pc, #136]	; (8003028 <HAL_TIM_MspPostInit+0xbc>)
 8002fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4818      	ldr	r0, [pc, #96]	; (800302c <HAL_TIM_MspPostInit+0xc0>)
 8002fca:	f005 fad1 	bl	8008570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fce:	e024      	b.n	800301a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d11f      	bne.n	800301a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_TIM_MspPostInit+0xbc>)
 8002fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_TIM_MspPostInit+0xbc>)
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
 8002fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_TIM_MspPostInit+0xbc>)
 8002fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800300a:	2301      	movs	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	4806      	ldr	r0, [pc, #24]	; (8003030 <HAL_TIM_MspPostInit+0xc4>)
 8003016:	f005 faab 	bl	8008570 <HAL_GPIO_Init>
}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	58024400 	.word	0x58024400
 800302c:	58020000 	.word	0x58020000
 8003030:	58020400 	.word	0x58020400

08003034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0ba      	sub	sp, #232	; 0xe8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304c:	f107 0310 	add.w	r3, r7, #16
 8003050:	22c0      	movs	r2, #192	; 0xc0
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f011 fe51 	bl	8014cfc <memset>
  if(huart->Instance==USART1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2b      	ldr	r2, [pc, #172]	; (800310c <HAL_UART_MspInit+0xd8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d14e      	bne.n	8003102 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003064:	f04f 0201 	mov.w	r2, #1
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	4618      	mov	r0, r3
 800307c:	f006 fdf0 	bl	8009c60 <HAL_RCCEx_PeriphCLKConfig>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003086:	f7ff fbe3 	bl	8002850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800308a:	4b21      	ldr	r3, [pc, #132]	; (8003110 <HAL_UART_MspInit+0xdc>)
 800308c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_UART_MspInit+0xdc>)
 8003092:	f043 0310 	orr.w	r3, r3, #16
 8003096:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <HAL_UART_MspInit+0xdc>)
 800309c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_UART_MspInit+0xdc>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_UART_MspInit+0xdc>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_UART_MspInit+0xdc>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e0:	2307      	movs	r3, #7
 80030e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030ea:	4619      	mov	r1, r3
 80030ec:	4809      	ldr	r0, [pc, #36]	; (8003114 <HAL_UART_MspInit+0xe0>)
 80030ee:	f005 fa3f 	bl	8008570 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2105      	movs	r1, #5
 80030f6:	2025      	movs	r0, #37	; 0x25
 80030f8:	f001 ffd0 	bl	800509c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030fc:	2025      	movs	r0, #37	; 0x25
 80030fe:	f001 ffe7 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	37e8      	adds	r7, #232	; 0xe8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40011000 	.word	0x40011000
 8003110:	58024400 	.word	0x58024400
 8003114:	58020000 	.word	0x58020000

08003118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b090      	sub	sp, #64	; 0x40
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d827      	bhi.n	8003176 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003126:	2200      	movs	r2, #0
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	2036      	movs	r0, #54	; 0x36
 800312c:	f001 ffb6 	bl	800509c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003130:	2036      	movs	r0, #54	; 0x36
 8003132:	f001 ffcd 	bl	80050d0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003136:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_InitTick+0xc4>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_InitTick+0xc8>)
 800313e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <HAL_InitTick+0xc8>)
 8003144:	f043 0310 	orr.w	r3, r3, #16
 8003148:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_InitTick+0xc8>)
 800314e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800315a:	f107 0210 	add.w	r2, r7, #16
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f006 fd39 	bl	8009bdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_InitTick+0x6a>
 8003174:	e001      	b.n	800317a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e02b      	b.n	80031d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800317a:	f006 fd03 	bl	8009b84 <HAL_RCC_GetPCLK1Freq>
 800317e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003180:	e004      	b.n	800318c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003182:	f006 fcff 	bl	8009b84 <HAL_RCC_GetPCLK1Freq>
 8003186:	4603      	mov	r3, r0
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_InitTick+0xcc>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	0c9b      	lsrs	r3, r3, #18
 8003196:	3b01      	subs	r3, #1
 8003198:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_InitTick+0xd0>)
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_InitTick+0xd4>)
 800319e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_InitTick+0xd0>)
 80031a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <HAL_InitTick+0xd0>)
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_InitTick+0xd0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_InitTick+0xd0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80031ba:	480b      	ldr	r0, [pc, #44]	; (80031e8 <HAL_InitTick+0xd0>)
 80031bc:	f009 feaf 	bl	800cf1e <HAL_TIM_Base_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80031c6:	4808      	ldr	r0, [pc, #32]	; (80031e8 <HAL_InitTick+0xd0>)
 80031c8:	f009 ff98 	bl	800d0fc <HAL_TIM_Base_Start_IT>
 80031cc:	4603      	mov	r3, r0
 80031ce:	e000      	b.n	80031d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3740      	adds	r7, #64	; 0x40
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	24000090 	.word	0x24000090
 80031e0:	58024400 	.word	0x58024400
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	24000be8 	.word	0x24000be8
 80031ec:	40001000 	.word	0x40001000

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80031f4:	e7fe      	b.n	80031f4 <NMI_Handler+0x4>

080031f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <MemManage_Handler+0x4>

08003202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <UsageFault_Handler+0x4>

0800320e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <DMA1_Stream0_IRQHandler+0x10>)
 8003222:	f003 fe93 	bl	8006f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	240001e4 	.word	0x240001e4

08003230 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <DMA1_Stream1_IRQHandler+0x10>)
 8003236:	f003 fe89 	bl	8006f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2400025c 	.word	0x2400025c

08003244 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <DMA1_Stream5_IRQHandler+0x10>)
 800324a:	f003 fe7f 	bl	8006f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	240002e8 	.word	0x240002e8

08003258 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <TIM1_BRK_IRQHandler+0x10>)
 800325e:	f00a fa8f 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	240004e8 	.word	0x240004e8

0800326c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <TIM1_UP_IRQHandler+0x10>)
 8003272:	f00a fa85 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	240004e8 	.word	0x240004e8

08003280 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003286:	f00a fa7b 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	240004e8 	.word	0x240004e8

08003294 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <TIM1_CC_IRQHandler+0x10>)
 800329a:	f00a fa71 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	240004e8 	.word	0x240004e8

080032a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <TIM2_IRQHandler+0x10>)
 80032ae:	f00a fa67 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	24000534 	.word	0x24000534

080032bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <TIM3_IRQHandler+0x10>)
 80032c2:	f00a fa5d 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	24000580 	.word	0x24000580

080032d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <USART1_IRQHandler+0x10>)
 80032d6:	f00b fce1 	bl	800ec9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	240005cc 	.word	0x240005cc

080032e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <TIM6_DAC_IRQHandler+0x20>)
 80032ea:	791b      	ldrb	r3, [r3, #4]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80032f2:	4804      	ldr	r0, [pc, #16]	; (8003304 <TIM6_DAC_IRQHandler+0x20>)
 80032f4:	f002 f881 	bl	80053fa <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <TIM6_DAC_IRQHandler+0x24>)
 80032fa:	f00a fa41 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	240002d4 	.word	0x240002d4
 8003308:	24000be8 	.word	0x24000be8

0800330c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <ITM_SendChar+0x48>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <ITM_SendChar+0x48>)
 800331c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003320:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <ITM_SendChar+0x4c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <ITM_SendChar+0x4c>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800332e:	bf00      	nop
 8003330:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f8      	beq.n	8003330 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800333e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	6013      	str	r3, [r2, #0]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000edfc 	.word	0xe000edfc
 8003358:	e0000e00 	.word	0xe0000e00

0800335c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e00a      	b.n	8003384 <_read+0x28>
		*ptr++ = __io_getchar();
 800336e:	f3af 8000 	nop.w
 8003372:	4601      	mov	r1, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	60ba      	str	r2, [r7, #8]
 800337a:	b2ca      	uxtb	r2, r1
 800337c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3301      	adds	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	dbf0      	blt.n	800336e <_read+0x12>
	}

	return len;
 800338c:	687b      	ldr	r3, [r7, #4]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e009      	b.n	80033bc <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	60ba      	str	r2, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ffab 	bl	800330c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf1      	blt.n	80033a8 <_write+0x12>
	}
	return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_close>:

int _close(int file) {
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033f6:	605a      	str	r2, [r3, #4]
	return 0;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_isatty>:

int _isatty(int file) {
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800340e:	2301      	movs	r3, #1
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <_sbrk+0x64>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <_sbrk+0x64>)
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <_sbrk+0x68>)
 8003458:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d207      	bcs.n	8003478 <_sbrk+0x40>
		errno = ENOMEM;
 8003468:	f011 fc00 	bl	8014c6c <__errno>
 800346c:	4603      	mov	r3, r0
 800346e:	220c      	movs	r2, #12
 8003470:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003476:	e009      	b.n	800348c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <_sbrk+0x64>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <_sbrk+0x64>)
 8003488:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800348a:	68fb      	ldr	r3, [r7, #12]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	24080000 	.word	0x24080000
 8003498:	00000400 	.word	0x00000400
 800349c:	24000c34 	.word	0x24000c34
 80034a0:	240055a0 	.word	0x240055a0

080034a4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80034a8:	4b37      	ldr	r3, [pc, #220]	; (8003588 <SystemInit+0xe4>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	4a36      	ldr	r2, [pc, #216]	; (8003588 <SystemInit+0xe4>)
 80034b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80034b8:	4b34      	ldr	r3, [pc, #208]	; (800358c <SystemInit+0xe8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d807      	bhi.n	80034d4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80034c4:	4b31      	ldr	r3, [pc, #196]	; (800358c <SystemInit+0xe8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	4a2f      	ldr	r2, [pc, #188]	; (800358c <SystemInit+0xe8>)
 80034ce:	f043 0307 	orr.w	r3, r3, #7
 80034d2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80034d4:	4b2e      	ldr	r3, [pc, #184]	; (8003590 <SystemInit+0xec>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <SystemInit+0xec>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <SystemInit+0xec>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <SystemInit+0xec>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4929      	ldr	r1, [pc, #164]	; (8003590 <SystemInit+0xec>)
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <SystemInit+0xf0>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <SystemInit+0xe8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <SystemInit+0xe8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 030f 	bic.w	r3, r3, #15
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <SystemInit+0xe8>)
 8003508:	f043 0307 	orr.w	r3, r3, #7
 800350c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <SystemInit+0xec>)
 8003510:	2200      	movs	r2, #0
 8003512:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003514:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <SystemInit+0xec>)
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <SystemInit+0xec>)
 800351c:	2200      	movs	r2, #0
 800351e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <SystemInit+0xec>)
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <SystemInit+0xf4>)
 8003524:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <SystemInit+0xec>)
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <SystemInit+0xf8>)
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <SystemInit+0xec>)
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <SystemInit+0xfc>)
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <SystemInit+0xec>)
 8003534:	2200      	movs	r2, #0
 8003536:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <SystemInit+0xec>)
 800353a:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <SystemInit+0xfc>)
 800353c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <SystemInit+0xec>)
 8003540:	2200      	movs	r2, #0
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <SystemInit+0xec>)
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <SystemInit+0xfc>)
 8003548:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <SystemInit+0xec>)
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <SystemInit+0xec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <SystemInit+0xec>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <SystemInit+0xec>)
 800355e:	2200      	movs	r2, #0
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <SystemInit+0x100>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <SystemInit+0x104>)
 8003568:	4013      	ands	r3, r2
 800356a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800356e:	d202      	bcs.n	8003576 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <SystemInit+0x108>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <SystemInit+0x10c>)
 8003578:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800357c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00
 800358c:	52002000 	.word	0x52002000
 8003590:	58024400 	.word	0x58024400
 8003594:	eaf6ed7f 	.word	0xeaf6ed7f
 8003598:	02020200 	.word	0x02020200
 800359c:	01ff0000 	.word	0x01ff0000
 80035a0:	01010280 	.word	0x01010280
 80035a4:	5c001000 	.word	0x5c001000
 80035a8:	ffff0000 	.word	0xffff0000
 80035ac:	51008108 	.word	0x51008108
 80035b0:	52004000 	.word	0x52004000

080035b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80035b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035b8:	f7ff ff74 	bl	80034a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035be:	490d      	ldr	r1, [pc, #52]	; (80035f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c4:	e002      	b.n	80035cc <LoopCopyDataInit>

080035c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ca:	3304      	adds	r3, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d0:	d3f9      	bcc.n	80035c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035d4:	4c0a      	ldr	r4, [pc, #40]	; (8003600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d8:	e001      	b.n	80035de <LoopFillZerobss>

080035da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035dc:	3204      	adds	r2, #4

080035de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e0:	d3fb      	bcc.n	80035da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e2:	f011 fb49 	bl	8014c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035e6:	f7fd fc7b 	bl	8000ee0 <main>
  bx  lr
 80035ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80035f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80035f4:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80035f8:	0801619c 	.word	0x0801619c
  ldr r2, =_sbss
 80035fc:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003600:	2400559c 	.word	0x2400559c

08003604 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003604:	e7fe      	b.n	8003604 <ADC3_IRQHandler>
	...

08003608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360e:	2003      	movs	r0, #3
 8003610:	f001 fd39 	bl	8005086 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003614:	f006 f90c 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_Init+0x68>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	4913      	ldr	r1, [pc, #76]	; (8003674 <HAL_Init+0x6c>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
 8003630:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <HAL_Init+0x68>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_Init+0x6c>)
 800363c:	5cd3      	ldrb	r3, [r2, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <HAL_Init+0x70>)
 800364a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_Init+0x74>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003652:	2005      	movs	r0, #5
 8003654:	f7ff fd60 	bl	8003118 <HAL_InitTick>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e002      	b.n	8003668 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003662:	f7ff f8fb 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	58024400 	.word	0x58024400
 8003674:	080160b4 	.word	0x080160b4
 8003678:	2400008c 	.word	0x2400008c
 800367c:	24000088 	.word	0x24000088

08003680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_IncTick+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_IncTick+0x24>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_IncTick+0x24>)
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	24000094 	.word	0x24000094
 80036a4:	24000c38 	.word	0x24000c38

080036a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_GetTick+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	24000c38 	.word	0x24000c38

080036c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_GetREVID+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0c1b      	lsrs	r3, r3, #16
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	5c001000 	.word	0x5c001000

080036d8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	58000400 	.word	0x58000400

08003704 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3360      	adds	r3, #96	; 0x60
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	430b      	orrs	r3, r1
 800379a:	431a      	orrs	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	611a      	str	r2, [r3, #16]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80037de:	b480      	push	{r7}
 80037e0:	b087      	sub	sp, #28
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3360      	adds	r3, #96	; 0x60
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	431a      	orrs	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	601a      	str	r2, [r3, #0]
  }
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800383a:	b480      	push	{r7}
 800383c:	b087      	sub	sp, #28
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3330      	adds	r3, #48	; 0x30
 800384a:	461a      	mov	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	4413      	add	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	211f      	movs	r1, #31
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	401a      	ands	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	f003 011f 	and.w	r1, r3, #31
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	431a      	orrs	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3314      	adds	r3, #20
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	0e5b      	lsrs	r3, r3, #25
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	0d1b      	lsrs	r3, r3, #20
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2107      	movs	r1, #7
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	0d1b      	lsrs	r3, r3, #20
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	431a      	orrs	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003928:	43db      	mvns	r3, r3
 800392a:	401a      	ands	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0318 	and.w	r3, r3, #24
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003934:	40d9      	lsrs	r1, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	400b      	ands	r3, r1
 800393a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800393e:	431a      	orrs	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	000fffff 	.word	0x000fffff

08003958 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 031f 	and.w	r3, r3, #31
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6093      	str	r3, [r2, #8]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	5fffffc0 	.word	0x5fffffc0

08003998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ac:	d101      	bne.n	80039b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	6fffffc0 	.word	0x6fffffc0

080039e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fc:	d101      	bne.n	8003a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <LL_ADC_Enable+0x24>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	7fffffc0 	.word	0x7fffffc0

08003a38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <LL_ADC_Disable+0x24>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	f043 0202 	orr.w	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	7fffffc0 	.word	0x7fffffc0

08003a60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <LL_ADC_IsEnabled+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <LL_ADC_IsEnabled+0x1a>
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d101      	bne.n	8003a9e <LL_ADC_IsDisableOngoing+0x18>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <LL_ADC_IsDisableOngoing+0x1a>
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <LL_ADC_REG_StartConversion+0x24>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	f043 0204 	orr.w	r2, r3, #4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	7fffffc0 	.word	0x7fffffc0

08003ad4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d101      	bne.n	8003aec <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e18f      	b.n	8003e5a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe fea5 	bl	8002898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff19 	bl	8003998 <LL_ADC_IsDeepPowerDownEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff feff 	bl	8003974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff34 	bl	80039e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d114      	bne.n	8003bb0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff18 	bl	80039c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b90:	4b87      	ldr	r3, [pc, #540]	; (8003db0 <HAL_ADC_Init+0x290>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	4a87      	ldr	r2, [pc, #540]	; (8003db4 <HAL_ADC_Init+0x294>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ba2:	e002      	b.n	8003baa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f9      	bne.n	8003ba4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff17 	bl	80039e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10d      	bne.n	8003bdc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff77 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003be6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8129 	bne.w	8003e48 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 8125 	bne.w	8003e48 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff ff24 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d136      	bne.n	8003c8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a65      	ldr	r2, [pc, #404]	; (8003db8 <HAL_ADC_Init+0x298>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_ADC_Init+0x112>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a63      	ldr	r2, [pc, #396]	; (8003dbc <HAL_ADC_Init+0x29c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10e      	bne.n	8003c50 <HAL_ADC_Init+0x130>
 8003c32:	4861      	ldr	r0, [pc, #388]	; (8003db8 <HAL_ADC_Init+0x298>)
 8003c34:	f7ff ff14 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	4860      	ldr	r0, [pc, #384]	; (8003dbc <HAL_ADC_Init+0x29c>)
 8003c3c:	f7ff ff10 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4323      	orrs	r3, r4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e008      	b.n	8003c62 <HAL_ADC_Init+0x142>
 8003c50:	485b      	ldr	r0, [pc, #364]	; (8003dc0 <HAL_ADC_Init+0x2a0>)
 8003c52:	f7ff ff05 	bl	8003a60 <LL_ADC_IsEnabled>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d012      	beq.n	8003c8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a53      	ldr	r2, [pc, #332]	; (8003db8 <HAL_ADC_Init+0x298>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_ADC_Init+0x15a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a51      	ldr	r2, [pc, #324]	; (8003dbc <HAL_ADC_Init+0x29c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_Init+0x15e>
 8003c7a:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <HAL_ADC_Init+0x2a4>)
 8003c7c:	e000      	b.n	8003c80 <HAL_ADC_Init+0x160>
 8003c7e:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_ADC_Init+0x2a8>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7ff fd3c 	bl	8003704 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003c8c:	f7ff fd18 	bl	80036c0 <HAL_GetREVID>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d914      	bls.n	8003cc4 <HAL_ADC_Init+0x1a4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d110      	bne.n	8003cc4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7d5b      	ldrb	r3, [r3, #21]
 8003ca6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003cb2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7f1b      	ldrb	r3, [r3, #28]
 8003cb8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003cba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cbc:	f043 030c 	orr.w	r3, r3, #12
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e00d      	b.n	8003ce0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7d5b      	ldrb	r3, [r3, #21]
 8003cc8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003cd4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7f1b      	ldrb	r3, [r3, #28]
 8003cda:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7f1b      	ldrb	r3, [r3, #28]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	045b      	lsls	r3, r3, #17
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <HAL_ADC_Init+0x2ac>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	430b      	orrs	r3, r1
 8003d24:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fed2 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003d30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fedf 	bl	8003afa <LL_ADC_INJ_IsConversionOngoing>
 8003d3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d15f      	bne.n	8003e04 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d15c      	bne.n	8003e04 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7d1b      	ldrb	r3, [r3, #20]
 8003d4e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_ADC_Init+0x2b0>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d130      	bne.n	8003dd8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_ADC_Init+0x2b4>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d8a:	3a01      	subs	r2, #1
 8003d8c:	0411      	lsls	r1, r2, #16
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d92:	4311      	orrs	r1, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d98:	4311      	orrs	r1, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	611a      	str	r2, [r3, #16]
 8003dac:	e01c      	b.n	8003de8 <HAL_ADC_Init+0x2c8>
 8003dae:	bf00      	nop
 8003db0:	24000088 	.word	0x24000088
 8003db4:	053e2d63 	.word	0x053e2d63
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40022100 	.word	0x40022100
 8003dc0:	58026000 	.word	0x58026000
 8003dc4:	40022300 	.word	0x40022300
 8003dc8:	58026300 	.word	0x58026300
 8003dcc:	fff0c003 	.word	0xfff0c003
 8003dd0:	ffffbffc 	.word	0xffffbffc
 8003dd4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fdec 	bl	80049dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d10c      	bne.n	8003e26 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f023 010f 	bic.w	r1, r3, #15
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	1e5a      	subs	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
 8003e24:	e007      	b.n	8003e36 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 020f 	bic.w	r2, r2, #15
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
 8003e46:	e007      	b.n	8003e58 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0210 	orr.w	r2, r3, #16
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	bf00      	nop

08003e64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a55      	ldr	r2, [pc, #340]	; (8003fcc <HAL_ADC_Start_DMA+0x168>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_ADC_Start_DMA+0x20>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <HAL_ADC_Start_DMA+0x16c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x24>
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_ADC_Start_DMA+0x170>)
 8003e86:	e000      	b.n	8003e8a <HAL_ADC_Start_DMA+0x26>
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_ADC_Start_DMA+0x174>)
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fd64 	bl	8003958 <LL_ADC_GetMultimode>
 8003e90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fe1c 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 808c 	bne.w	8003fbc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_Start_DMA+0x4e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e087      	b.n	8003fc2 <HAL_ADC_Start_DMA+0x15e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d002      	beq.n	8003ecc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d170      	bne.n	8003fae <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fc07 	bl	80046e0 <ADC_Enable>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d163      	bne.n	8003fa4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee0:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_ADC_Start_DMA+0x178>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a37      	ldr	r2, [pc, #220]	; (8003fd0 <HAL_ADC_Start_DMA+0x16c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d002      	beq.n	8003efc <HAL_ADC_Start_DMA+0x98>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e000      	b.n	8003efe <HAL_ADC_Start_DMA+0x9a>
 8003efc:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_ADC_Start_DMA+0x168>)
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d002      	beq.n	8003f0c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f023 0206 	bic.w	r2, r3, #6
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f30:	e002      	b.n	8003f38 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	4a28      	ldr	r2, [pc, #160]	; (8003fe0 <HAL_ADC_Start_DMA+0x17c>)
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <HAL_ADC_Start_DMA+0x180>)
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4c:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <HAL_ADC_Start_DMA+0x184>)
 8003f4e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	221c      	movs	r2, #28
 8003f56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0210 	orr.w	r2, r2, #16
 8003f6e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7ff fc89 	bl	8003892 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3340      	adds	r3, #64	; 0x40
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f002 f80e 	bl	8005fb0 <HAL_DMA_Start_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fd85 	bl	8003aac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fa2:	e00d      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003fac:	e008      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003fba:	e001      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	40022100 	.word	0x40022100
 8003fd4:	40022300 	.word	0x40022300
 8003fd8:	58026300 	.word	0x58026300
 8003fdc:	fffff0fe 	.word	0xfffff0fe
 8003fe0:	080048b3 	.word	0x080048b3
 8003fe4:	0800498b 	.word	0x0800498b
 8003fe8:	080049a7 	.word	0x080049a7

08003fec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b0a1      	sub	sp, #132	; 0x84
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a65      	ldr	r2, [pc, #404]	; (80041d8 <HAL_ADC_ConfigChannel+0x1b0>)
 8004042:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x2a>
 800404e:	2302      	movs	r3, #2
 8004050:	e32e      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x688>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fd38 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 8313 	bne.w	8004692 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db2c      	blt.n	80040ce <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407c:	2b00      	cmp	r3, #0
 800407e:	d108      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x6a>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	e016      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x98>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80040aa:	2320      	movs	r3, #32
 80040ac:	e003      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80040ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	69d1      	ldr	r1, [r2, #28]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	430b      	orrs	r3, r1
 80040cc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	f7ff fbad 	bl	800383a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fcf5 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 80040ea:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fd02 	bl	8003afa <LL_ADC_INJ_IsConversionOngoing>
 80040f6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 80b8 	bne.w	8004270 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 80b4 	bne.w	8004270 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	461a      	mov	r2, r3
 8004116:	f7ff fbcf 	bl	80038b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800411a:	4b30      	ldr	r3, [pc, #192]	; (80041dc <HAL_ADC_ConfigChannel+0x1b4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d10b      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x118>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	e01d      	b.n	800417c <HAL_ADC_ConfigChannel+0x154>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x13e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	e00a      	b.n	800417c <HAL_ADC_ConfigChannel+0x154>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d02c      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6919      	ldr	r1, [r3, #16]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004194:	f7ff faea 	bl	800376c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6919      	ldr	r1, [r3, #16]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	7e5b      	ldrb	r3, [r3, #25]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x186>
 80041a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041ac:	e000      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x188>
 80041ae:	2300      	movs	r3, #0
 80041b0:	461a      	mov	r2, r3
 80041b2:	f7ff fb14 	bl	80037de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6919      	ldr	r1, [r3, #16]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	7e1b      	ldrb	r3, [r3, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x1a4>
 80041c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041ca:	e000      	b.n	80041ce <HAL_ADC_ConfigChannel+0x1a6>
 80041cc:	2300      	movs	r3, #0
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7ff faec 	bl	80037ac <LL_ADC_SetDataRightShift>
 80041d4:	e04c      	b.n	8004270 <HAL_ADC_ConfigChannel+0x248>
 80041d6:	bf00      	nop
 80041d8:	47ff0000 	.word	0x47ff0000
 80041dc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004202:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	069b      	lsls	r3, r3, #26
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004226:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	069b      	lsls	r3, r3, #26
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800424a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fbf3 	bl	8003a60 <LL_ADC_IsEnabled>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 8211 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	461a      	mov	r2, r3
 8004290:	f7ff fb3e 	bl	8003910 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4aa1      	ldr	r2, [pc, #644]	; (8004520 <HAL_ADC_ConfigChannel+0x4f8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f040 812e 	bne.w	80044fc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x2a0>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2b09      	cmp	r3, #9
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e019      	b.n	80042fc <HAL_ADC_ConfigChannel+0x2d4>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80042da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e003      	b.n	80042ec <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80042e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	bf94      	ite	ls
 80042f6:	2301      	movls	r3, #1
 80042f8:	2300      	movhi	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d079      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_ADC_ConfigChannel+0x2f4>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	3301      	adds	r3, #1
 8004314:	069b      	lsls	r3, r3, #26
 8004316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800431a:	e015      	b.n	8004348 <HAL_ADC_ConfigChannel+0x320>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800432a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e003      	b.n	8004340 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	3301      	adds	r3, #1
 8004342:	069b      	lsls	r3, r3, #26
 8004344:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x340>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0e9b      	lsrs	r3, r3, #26
 800435a:	3301      	adds	r3, #1
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	e017      	b.n	8004398 <HAL_ADC_ConfigChannel+0x370>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e003      	b.n	800438c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <HAL_ADC_ConfigChannel+0x396>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	051b      	lsls	r3, r3, #20
 80043bc:	e018      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x3c8>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80043d6:	2320      	movs	r3, #32
 80043d8:	e003      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	fab3 f383 	clz	r3, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043f0:	430b      	orrs	r3, r1
 80043f2:	e07e      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d107      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x3e8>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0e9b      	lsrs	r3, r3, #26
 8004406:	3301      	adds	r3, #1
 8004408:	069b      	lsls	r3, r3, #26
 800440a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800440e:	e015      	b.n	800443c <HAL_ADC_ConfigChannel+0x414>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	069b      	lsls	r3, r3, #26
 8004438:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_ADC_ConfigChannel+0x434>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0e9b      	lsrs	r3, r3, #26
 800444e:	3301      	adds	r3, #1
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f303 	lsl.w	r3, r1, r3
 800445a:	e017      	b.n	800448c <HAL_ADC_ConfigChannel+0x464>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	61bb      	str	r3, [r7, #24]
  return result;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004474:	2320      	movs	r3, #32
 8004476:	e003      	b.n	8004480 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x490>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	3301      	adds	r3, #1
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	3b1e      	subs	r3, #30
 80044b0:	051b      	lsls	r3, r3, #20
 80044b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b6:	e01b      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4c8>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	60fb      	str	r3, [r7, #12]
  return result;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80044d0:	2320      	movs	r3, #32
 80044d2:	e003      	b.n	80044dc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	f003 021f 	and.w	r2, r3, #31
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	3b1e      	subs	r3, #30
 80044ea:	051b      	lsls	r3, r3, #20
 80044ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f0:	430b      	orrs	r3, r1
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6892      	ldr	r2, [r2, #8]
 80044f6:	4619      	mov	r1, r3
 80044f8:	f7ff f9de 	bl	80038b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f280 80cf 	bge.w	80046a4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a06      	ldr	r2, [pc, #24]	; (8004524 <HAL_ADC_ConfigChannel+0x4fc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_ADC_ConfigChannel+0x4f2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_ADC_ConfigChannel+0x500>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10a      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x508>
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <HAL_ADC_ConfigChannel+0x504>)
 800451c:	e009      	b.n	8004532 <HAL_ADC_ConfigChannel+0x50a>
 800451e:	bf00      	nop
 8004520:	47ff0000 	.word	0x47ff0000
 8004524:	40022000 	.word	0x40022000
 8004528:	40022100 	.word	0x40022100
 800452c:	40022300 	.word	0x40022300
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <HAL_ADC_ConfigChannel+0x690>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f90c 	bl	8003750 <LL_ADC_GetCommonPathInternalCh>
 8004538:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5f      	ldr	r2, [pc, #380]	; (80046bc <HAL_ADC_ConfigChannel+0x694>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_ADC_ConfigChannel+0x526>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5d      	ldr	r2, [pc, #372]	; (80046c0 <HAL_ADC_ConfigChannel+0x698>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10e      	bne.n	800456c <HAL_ADC_ConfigChannel+0x544>
 800454e:	485b      	ldr	r0, [pc, #364]	; (80046bc <HAL_ADC_ConfigChannel+0x694>)
 8004550:	f7ff fa86 	bl	8003a60 <LL_ADC_IsEnabled>
 8004554:	4604      	mov	r4, r0
 8004556:	485a      	ldr	r0, [pc, #360]	; (80046c0 <HAL_ADC_ConfigChannel+0x698>)
 8004558:	f7ff fa82 	bl	8003a60 <LL_ADC_IsEnabled>
 800455c:	4603      	mov	r3, r0
 800455e:	4323      	orrs	r3, r4
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e008      	b.n	800457e <HAL_ADC_ConfigChannel+0x556>
 800456c:	4855      	ldr	r0, [pc, #340]	; (80046c4 <HAL_ADC_ConfigChannel+0x69c>)
 800456e:	f7ff fa77 	bl	8003a60 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d07d      	beq.n	800467e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a50      	ldr	r2, [pc, #320]	; (80046c8 <HAL_ADC_ConfigChannel+0x6a0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d130      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x5c6>
 800458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d12b      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4a      	ldr	r2, [pc, #296]	; (80046c4 <HAL_ADC_ConfigChannel+0x69c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	f040 8081 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a45      	ldr	r2, [pc, #276]	; (80046bc <HAL_ADC_ConfigChannel+0x694>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x58e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a43      	ldr	r2, [pc, #268]	; (80046c0 <HAL_ADC_ConfigChannel+0x698>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x592>
 80045b6:	4a45      	ldr	r2, [pc, #276]	; (80046cc <HAL_ADC_ConfigChannel+0x6a4>)
 80045b8:	e000      	b.n	80045bc <HAL_ADC_ConfigChannel+0x594>
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_ADC_ConfigChannel+0x690>)
 80045bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7ff f8b0 	bl	800372a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ca:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <HAL_ADC_ConfigChannel+0x6a8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	4a40      	ldr	r2, [pc, #256]	; (80046d4 <HAL_ADC_ConfigChannel+0x6ac>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	3301      	adds	r3, #1
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045de:	e002      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045ec:	e05a      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a39      	ldr	r2, [pc, #228]	; (80046d8 <HAL_ADC_ConfigChannel+0x6b0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d11e      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x60e>
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <HAL_ADC_ConfigChannel+0x69c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d14b      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2a      	ldr	r2, [pc, #168]	; (80046bc <HAL_ADC_ConfigChannel+0x694>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x5f8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a29      	ldr	r2, [pc, #164]	; (80046c0 <HAL_ADC_ConfigChannel+0x698>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x5fc>
 8004620:	4a2a      	ldr	r2, [pc, #168]	; (80046cc <HAL_ADC_ConfigChannel+0x6a4>)
 8004622:	e000      	b.n	8004626 <HAL_ADC_ConfigChannel+0x5fe>
 8004624:	4a24      	ldr	r2, [pc, #144]	; (80046b8 <HAL_ADC_ConfigChannel+0x690>)
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f7ff f87b 	bl	800372a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004634:	e036      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_ADC_ConfigChannel+0x6b4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d131      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d12c      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_ADC_ConfigChannel+0x69c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d127      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_ADC_ConfigChannel+0x694>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_ADC_ConfigChannel+0x640>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_ADC_ConfigChannel+0x698>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_ADC_ConfigChannel+0x644>
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_ADC_ConfigChannel+0x6a4>)
 800466a:	e000      	b.n	800466e <HAL_ADC_ConfigChannel+0x646>
 800466c:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <HAL_ADC_ConfigChannel+0x690>)
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7ff f857 	bl	800372a <LL_ADC_SetCommonPathInternalCh>
 800467c:	e012      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004690:	e008      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3784      	adds	r7, #132	; 0x84
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd90      	pop	{r4, r7, pc}
 80046b8:	58026300 	.word	0x58026300
 80046bc:	40022000 	.word	0x40022000
 80046c0:	40022100 	.word	0x40022100
 80046c4:	58026000 	.word	0x58026000
 80046c8:	cb840000 	.word	0xcb840000
 80046cc:	40022300 	.word	0x40022300
 80046d0:	24000088 	.word	0x24000088
 80046d4:	053e2d63 	.word	0x053e2d63
 80046d8:	c7520000 	.word	0xc7520000
 80046dc:	cfb80000 	.word	0xcfb80000

080046e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff f9b7 	bl	8003a60 <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d16e      	bne.n	80047d6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	4b38      	ldr	r3, [pc, #224]	; (80047e0 <ADC_Enable+0x100>)
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f043 0210 	orr.w	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e05a      	b.n	80047d8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f972 	bl	8003a10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800472c:	f7fe ffbc 	bl	80036a8 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <ADC_Enable+0x104>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <ADC_Enable+0x66>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <ADC_Enable+0x108>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <ADC_Enable+0x6a>
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <ADC_Enable+0x10c>)
 8004748:	e000      	b.n	800474c <ADC_Enable+0x6c>
 800474a:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <ADC_Enable+0x110>)
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff f903 	bl	8003958 <LL_ADC_GetMultimode>
 8004752:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <ADC_Enable+0x108>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d002      	beq.n	8004764 <ADC_Enable+0x84>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	e000      	b.n	8004766 <ADC_Enable+0x86>
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <ADC_Enable+0x104>)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	4293      	cmp	r3, r2
 800476c:	d02c      	beq.n	80047c8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d130      	bne.n	80047d6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004774:	e028      	b.n	80047c8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f970 	bl	8003a60 <LL_ADC_IsEnabled>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff f940 	bl	8003a10 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004790:	f7fe ff8a 	bl	80036a8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d914      	bls.n	80047c8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d00d      	beq.n	80047c8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f043 0210 	orr.w	r2, r3, #16
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	f043 0201 	orr.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e007      	b.n	80047d8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d1cf      	bne.n	8004776 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	8000003f 	.word	0x8000003f
 80047e4:	40022000 	.word	0x40022000
 80047e8:	40022100 	.word	0x40022100
 80047ec:	40022300 	.word	0x40022300
 80047f0:	58026300 	.word	0x58026300

080047f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff f940 	bl	8003a86 <LL_ADC_IsDisableOngoing>
 8004806:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f927 	bl	8003a60 <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d047      	beq.n	80048a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d144      	bne.n	80048a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 030d 	and.w	r3, r3, #13
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff f901 	bl	8003a38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2203      	movs	r2, #3
 800483c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800483e:	f7fe ff33 	bl	80036a8 <HAL_GetTick>
 8004842:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004844:	e029      	b.n	800489a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f043 0210 	orr.w	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e023      	b.n	80048aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004862:	f7fe ff21 	bl	80036a8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d914      	bls.n	800489a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f043 0210 	orr.w	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e007      	b.n	80048aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1dc      	bne.n	8004862 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d14b      	bne.n	8004964 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d021      	beq.n	800492a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe ff92 	bl	8003814 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d032      	beq.n	800495c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d12b      	bne.n	800495c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11f      	bne.n	800495c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
 8004928:	e018      	b.n	800495c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0201 	orr.w	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff fb45 	bl	8003fec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004962:	e00e      	b.n	8004982 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fb4f 	bl	8004014 <HAL_ADC_ErrorCallback>
}
 8004976:	e004      	b.n	8004982 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fb31 	bl	8004000 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fb21 	bl	8004014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7a      	ldr	r2, [pc, #488]	; (8004bd4 <ADC_ConfigureBoostMode+0x1f8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <ADC_ConfigureBoostMode+0x1c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a79      	ldr	r2, [pc, #484]	; (8004bd8 <ADC_ConfigureBoostMode+0x1fc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d109      	bne.n	8004a0c <ADC_ConfigureBoostMode+0x30>
 80049f8:	4b78      	ldr	r3, [pc, #480]	; (8004bdc <ADC_ConfigureBoostMode+0x200>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e008      	b.n	8004a1e <ADC_ConfigureBoostMode+0x42>
 8004a0c:	4b74      	ldr	r3, [pc, #464]	; (8004be0 <ADC_ConfigureBoostMode+0x204>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01c      	beq.n	8004a5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a22:	f005 f87f 	bl	8009b24 <HAL_RCC_GetHCLKFreq>
 8004a26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a30:	d010      	beq.n	8004a54 <ADC_ConfigureBoostMode+0x78>
 8004a32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a36:	d873      	bhi.n	8004b20 <ADC_ConfigureBoostMode+0x144>
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d002      	beq.n	8004a44 <ADC_ConfigureBoostMode+0x68>
 8004a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a42:	d16d      	bne.n	8004b20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	60fb      	str	r3, [r7, #12]
        break;
 8004a52:	e068      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	60fb      	str	r3, [r7, #12]
        break;
 8004a5a:	e064      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	f006 fb06 	bl	800b074 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a72:	d051      	beq.n	8004b18 <ADC_ConfigureBoostMode+0x13c>
 8004a74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a78:	d854      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a7a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a7e:	d047      	beq.n	8004b10 <ADC_ConfigureBoostMode+0x134>
 8004a80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a84:	d84e      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a8a:	d03d      	beq.n	8004b08 <ADC_ConfigureBoostMode+0x12c>
 8004a8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a90:	d848      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a96:	d033      	beq.n	8004b00 <ADC_ConfigureBoostMode+0x124>
 8004a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a9c:	d842      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004a9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aa2:	d029      	beq.n	8004af8 <ADC_ConfigureBoostMode+0x11c>
 8004aa4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aa8:	d83c      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004aaa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004aae:	d01a      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ab0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ab4:	d836      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ab6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004aba:	d014      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004abc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ac0:	d830      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d00e      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004acc:	d82a      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ace:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad2:	d008      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ad4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad8:	d824      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x148>
 8004ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ade:	d002      	beq.n	8004ae6 <ADC_ConfigureBoostMode+0x10a>
 8004ae0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae4:	d11e      	bne.n	8004b24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	0c9b      	lsrs	r3, r3, #18
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	60fb      	str	r3, [r7, #12]
        break;
 8004af6:	e016      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	60fb      	str	r3, [r7, #12]
        break;
 8004afe:	e012      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	60fb      	str	r3, [r7, #12]
        break;
 8004b06:	e00e      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	60fb      	str	r3, [r7, #12]
        break;
 8004b0e:	e00a      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
        break;
 8004b16:	e006      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	60fb      	str	r3, [r7, #12]
        break;
 8004b1e:	e002      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b26:	f7fe fdcb 	bl	80036c0 <HAL_GetREVID>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d815      	bhi.n	8004b60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <ADC_ConfigureBoostMode+0x208>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d908      	bls.n	8004b4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b4c:	e03e      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5c:	609a      	str	r2, [r3, #8]
}
 8004b5e:	e035      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <ADC_ConfigureBoostMode+0x20c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d808      	bhi.n	8004b80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	e025      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <ADC_ConfigureBoostMode+0x210>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d80a      	bhi.n	8004b9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	e016      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <ADC_ConfigureBoostMode+0x214>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d80a      	bhi.n	8004bbc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	e007      	b.n	8004bcc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40022100 	.word	0x40022100
 8004bdc:	40022300 	.word	0x40022300
 8004be0:	58026300 	.word	0x58026300
 8004be4:	01312d00 	.word	0x01312d00
 8004be8:	005f5e10 	.word	0x005f5e10
 8004bec:	00bebc20 	.word	0x00bebc20
 8004bf0:	017d7840 	.word	0x017d7840

08004bf4 <LL_ADC_IsEnabled>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <LL_ADC_IsEnabled+0x18>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <LL_ADC_IsEnabled+0x1a>
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <LL_ADC_StartCalibration>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <LL_ADC_StartCalibration+0x38>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	3ffeffc0 	.word	0x3ffeffc0

08004c58 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c6c:	d101      	bne.n	8004c72 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d101      	bne.n	8004c98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADCEx_Calibration_Start+0x1e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e04c      	b.n	8004d60 <HAL_ADCEx_Calibration_Start+0xb8>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff fd90 	bl	80047f4 <ADC_Disable>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d135      	bne.n	8004d4a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	f043 0202 	orr.w	r2, r3, #2
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ff90 	bl	8004c1c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cfc:	e014      	b.n	8004d28 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3301      	adds	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_ADCEx_Calibration_Start+0xc4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d30d      	bcc.n	8004d28 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	f023 0312 	bic.w	r3, r3, #18
 8004d14:	f043 0210 	orr.w	r2, r3, #16
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e01b      	b.n	8004d60 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff93 	bl	8004c58 <LL_ADC_IsCalibrationOnGoing>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e2      	bne.n	8004cfe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f023 0303 	bic.w	r3, r3, #3
 8004d40:	f043 0201 	orr.w	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
 8004d48:	e005      	b.n	8004d56 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f043 0210 	orr.w	r2, r3, #16
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	ffffeefd 	.word	0xffffeefd
 8004d6c:	25c3f800 	.word	0x25c3f800

08004d70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b09f      	sub	sp, #124	; 0x7c
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0be      	b.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5c      	ldr	r2, [pc, #368]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d102      	bne.n	8004dae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004da8:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	e001      	b.n	8004db2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e09d      	b.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff54 	bl	8004c80 <LL_ADC_REG_IsConversionOngoing>
 8004dd8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff ff4e 	bl	8004c80 <LL_ADC_REG_IsConversionOngoing>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d17f      	bne.n	8004eea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d17c      	bne.n	8004eea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a46      	ldr	r2, [pc, #280]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004e04:	4b45      	ldr	r3, [pc, #276]	; (8004f1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e06:	e000      	b.n	8004e0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e08:	4b45      	ldr	r3, [pc, #276]	; (8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d039      	beq.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10e      	bne.n	8004e58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e3a:	4836      	ldr	r0, [pc, #216]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e3c:	f7ff feda 	bl	8004bf4 <LL_ADC_IsEnabled>
 8004e40:	4604      	mov	r4, r0
 8004e42:	4835      	ldr	r0, [pc, #212]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e44:	f7ff fed6 	bl	8004bf4 <LL_ADC_IsEnabled>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4323      	orrs	r3, r4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e008      	b.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004e58:	4832      	ldr	r0, [pc, #200]	; (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e5a:	f7ff fecb 	bl	8004bf4 <LL_ADC_IsEnabled>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d047      	beq.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	6811      	ldr	r1, [r2, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	6892      	ldr	r2, [r2, #8]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	431a      	orrs	r2, r3
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e86:	e03a      	b.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1e      	ldr	r2, [pc, #120]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10e      	bne.n	8004ec6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004ea8:	481a      	ldr	r0, [pc, #104]	; (8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004eaa:	f7ff fea3 	bl	8004bf4 <LL_ADC_IsEnabled>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	4819      	ldr	r0, [pc, #100]	; (8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004eb2:	f7ff fe9f 	bl	8004bf4 <LL_ADC_IsEnabled>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4323      	orrs	r3, r4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	e008      	b.n	8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ec6:	4817      	ldr	r0, [pc, #92]	; (8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ec8:	f7ff fe94 	bl	8004bf4 <LL_ADC_IsEnabled>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ee6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee8:	e009      	b.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004efc:	e000      	b.n	8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004efe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	377c      	adds	r7, #124	; 0x7c
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}
 8004f14:	40022000 	.word	0x40022000
 8004f18:	40022100 	.word	0x40022100
 8004f1c:	40022300 	.word	0x40022300
 8004f20:	58026300 	.word	0x58026300
 8004f24:	58026000 	.word	0x58026000
 8004f28:	fffff0e0 	.word	0xfffff0e0

08004f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <__NVIC_SetPriorityGrouping+0x40>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <__NVIC_SetPriorityGrouping+0x44>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5a:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <__NVIC_SetPriorityGrouping+0x40>)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	60d3      	str	r3, [r2, #12]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00
 8004f70:	05fa0000 	.word	0x05fa0000

08004f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <__NVIC_GetPriorityGrouping+0x18>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	0a1b      	lsrs	r3, r3, #8
 8004f7e:	f003 0307 	and.w	r3, r3, #7
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db0b      	blt.n	8004fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	f003 021f 	and.w	r2, r3, #31
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <__NVIC_EnableIRQ+0x38>)
 8004faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000e100 	.word	0xe000e100

08004fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	db0a      	blt.n	8004ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	490c      	ldr	r1, [pc, #48]	; (8005018 <__NVIC_SetPriority+0x4c>)
 8004fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	440b      	add	r3, r1
 8004ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff4:	e00a      	b.n	800500c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4908      	ldr	r1, [pc, #32]	; (800501c <__NVIC_SetPriority+0x50>)
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	3b04      	subs	r3, #4
 8005004:	0112      	lsls	r2, r2, #4
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	440b      	add	r3, r1
 800500a:	761a      	strb	r2, [r3, #24]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000e100 	.word	0xe000e100
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f1c3 0307 	rsb	r3, r3, #7
 800503a:	2b04      	cmp	r3, #4
 800503c:	bf28      	it	cs
 800503e:	2304      	movcs	r3, #4
 8005040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3304      	adds	r3, #4
 8005046:	2b06      	cmp	r3, #6
 8005048:	d902      	bls.n	8005050 <NVIC_EncodePriority+0x30>
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3b03      	subs	r3, #3
 800504e:	e000      	b.n	8005052 <NVIC_EncodePriority+0x32>
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43da      	mvns	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	401a      	ands	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa01 f303 	lsl.w	r3, r1, r3
 8005072:	43d9      	mvns	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	4313      	orrs	r3, r2
         );
}
 800507a:	4618      	mov	r0, r3
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ff4c 	bl	8004f2c <__NVIC_SetPriorityGrouping>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050aa:	f7ff ff63 	bl	8004f74 <__NVIC_GetPriorityGrouping>
 80050ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	6978      	ldr	r0, [r7, #20]
 80050b6:	f7ff ffb3 	bl	8005020 <NVIC_EncodePriority>
 80050ba:	4602      	mov	r2, r0
 80050bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff ff82 	bl	8004fcc <__NVIC_SetPriority>
}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ff56 	bl	8004f90 <__NVIC_EnableIRQ>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e014      	b.n	8005128 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd fcdc 	bl	8002acc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e046      	b.n	80051d2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	795b      	ldrb	r3, [r3, #5]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_DAC_Start+0x20>
 800514c:	2302      	movs	r3, #2
 800514e:	e040      	b.n	80051d2 <HAL_DAC_Start+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005184:	2b02      	cmp	r3, #2
 8005186:	d11d      	bne.n	80051c4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	605a      	str	r2, [r3, #4]
 8005198:	e014      	b.n	80051c4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2102      	movs	r1, #2
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d107      	bne.n	80051c4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0202 	orr.w	r2, r2, #2
 80051c2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0a2      	b.n	800533e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	795b      	ldrb	r3, [r3, #5]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_DAC_Start_DMA+0x24>
 8005200:	2302      	movs	r3, #2
 8005202:	e09c      	b.n	800533e <HAL_DAC_Start_DMA+0x15e>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2202      	movs	r2, #2
 800520e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d129      	bne.n	800526a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4a4b      	ldr	r2, [pc, #300]	; (8005348 <HAL_DAC_Start_DMA+0x168>)
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4a4a      	ldr	r2, [pc, #296]	; (800534c <HAL_DAC_Start_DMA+0x16c>)
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4a49      	ldr	r2, [pc, #292]	; (8005350 <HAL_DAC_Start_DMA+0x170>)
 800522c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800523c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_DAC_Start_DMA+0x6c>
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d005      	beq.n	8005256 <HAL_DAC_Start_DMA+0x76>
 800524a:	e009      	b.n	8005260 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	613b      	str	r3, [r7, #16]
        break;
 8005254:	e033      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	613b      	str	r3, [r7, #16]
        break;
 800525e:	e02e      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3310      	adds	r3, #16
 8005266:	613b      	str	r3, [r7, #16]
        break;
 8005268:	e029      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a39      	ldr	r2, [pc, #228]	; (8005354 <HAL_DAC_Start_DMA+0x174>)
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4a38      	ldr	r2, [pc, #224]	; (8005358 <HAL_DAC_Start_DMA+0x178>)
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a37      	ldr	r2, [pc, #220]	; (800535c <HAL_DAC_Start_DMA+0x17c>)
 8005280:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005290:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_DAC_Start_DMA+0xc0>
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d005      	beq.n	80052aa <HAL_DAC_Start_DMA+0xca>
 800529e:	e009      	b.n	80052b4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3314      	adds	r3, #20
 80052a6:	613b      	str	r3, [r7, #16]
        break;
 80052a8:	e009      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3318      	adds	r3, #24
 80052b0:	613b      	str	r3, [r7, #16]
        break;
 80052b2:	e004      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	331c      	adds	r3, #28
 80052ba:	613b      	str	r3, [r7, #16]
        break;
 80052bc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6898      	ldr	r0, [r3, #8]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	f000 fe67 	bl	8005fb0 <HAL_DMA_Start_IT>
 80052e2:	4603      	mov	r3, r0
 80052e4:	75fb      	strb	r3, [r7, #23]
 80052e6:	e010      	b.n	800530a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80052f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68d8      	ldr	r0, [r3, #12]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	f000 fe55 	bl	8005fb0 <HAL_DMA_Start_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2201      	movs	r2, #1
 8005324:	409a      	lsls	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e005      	b.n	800533c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f043 0204 	orr.w	r2, r3, #4
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	080057d1 	.word	0x080057d1
 800534c:	080057f3 	.word	0x080057f3
 8005350:	0800580f 	.word	0x0800580f
 8005354:	0800588d 	.word	0x0800588d
 8005358:	080058af 	.word	0x080058af
 800535c:	080058cb 	.word	0x080058cb

08005360 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e03e      	b.n	80053f2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6819      	ldr	r1, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43da      	mvns	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	400a      	ands	r2, r1
 8005390:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6819      	ldr	r1, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2201      	movs	r2, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43da      	mvns	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	400a      	ands	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 f863 	bl	8006484 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e00c      	b.n	80053ea <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 f855 	bl	8006484 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80053e8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01d      	beq.n	8005458 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d018      	beq.n	8005458 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005440:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005450:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f86f 	bl	8005536 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01d      	beq.n	800549e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d018      	beq.n	800549e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2204      	movs	r2, #4
 8005470:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f043 0202 	orr.w	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f9ed 	bl	8005878 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e015      	b.n	80054ee <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	3308      	adds	r3, #8
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e004      	b.n	80054e4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4413      	add	r3, r2
 80054e0:	3314      	adds	r3, #20
 80054e2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	461a      	mov	r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_DAC_ConfigChannel+0x1e>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e12a      	b.n	80057c4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	795b      	ldrb	r3, [r3, #5]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_DAC_ConfigChannel+0x2e>
 8005576:	2302      	movs	r3, #2
 8005578:	e124      	b.n	80057c4 <HAL_DAC_ConfigChannel+0x278>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d17a      	bne.n	8005684 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800558e:	f7fe f88b 	bl	80036a8 <HAL_GetTick>
 8005592:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d13d      	bne.n	8005616 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800559a:	e018      	b.n	80055ce <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800559c:	f7fe f884 	bl	80036a8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d911      	bls.n	80055ce <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b0:	4b86      	ldr	r3, [pc, #536]	; (80057cc <HAL_DAC_ConfigChannel+0x280>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f043 0208 	orr.w	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2203      	movs	r2, #3
 80055c8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0fa      	b.n	80057c4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d4:	4b7d      	ldr	r3, [pc, #500]	; (80057cc <HAL_DAC_ConfigChannel+0x280>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1df      	bne.n	800559c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	6992      	ldr	r2, [r2, #24]
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40
 80055e6:	e020      	b.n	800562a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055e8:	f7fe f85e 	bl	80036a8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d90f      	bls.n	8005616 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da0a      	bge.n	8005616 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f043 0208 	orr.w	r2, r3, #8
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2203      	movs	r2, #3
 8005610:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0d6      	b.n	80057c4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	2b00      	cmp	r3, #0
 800561e:	dbe3      	blt.n	80055e8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	6992      	ldr	r2, [r2, #24]
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	43db      	mvns	r3, r3
 8005640:	ea02 0103 	and.w	r1, r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	21ff      	movs	r1, #255	; 0xff
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	ea02 0103 	and.w	r1, r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	409a      	lsls	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d11d      	bne.n	80056c8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	221f      	movs	r2, #31
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2207      	movs	r2, #7
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d102      	bne.n	80056f2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
 80056f0:	e00f      	b.n	8005712 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d102      	bne.n	8005700 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80056fa:	2301      	movs	r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	e008      	b.n	8005712 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005708:	2301      	movs	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	e001      	b.n	8005712 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43da      	mvns	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	400a      	ands	r2, r1
 8005758:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	f640 72fe 	movw	r2, #4094	; 0xffe
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	22c0      	movs	r2, #192	; 0xc0
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43da      	mvns	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	400a      	ands	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80057c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3728      	adds	r7, #40	; 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20008000 	.word	0x20008000

080057d0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fe8b 	bl	80054fa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	711a      	strb	r2, [r3, #4]
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fe84 	bl	800550e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fe7a 	bl	8005522 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	711a      	strb	r2, [r3, #4]
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff ffce 	bl	800583c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	711a      	strb	r2, [r3, #4]
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ffc7 	bl	8005850 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f043 0204 	orr.w	r2, r3, #4
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff ffbd 	bl	8005864 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	711a      	strb	r2, [r3, #4]
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005900:	f7fd fed2 	bl	80036a8 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e316      	b.n	8005f3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a66      	ldr	r2, [pc, #408]	; (8005ab0 <HAL_DMA_Init+0x1b8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a65      	ldr	r2, [pc, #404]	; (8005ab4 <HAL_DMA_Init+0x1bc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a63      	ldr	r2, [pc, #396]	; (8005ab8 <HAL_DMA_Init+0x1c0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a62      	ldr	r2, [pc, #392]	; (8005abc <HAL_DMA_Init+0x1c4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a60      	ldr	r2, [pc, #384]	; (8005ac0 <HAL_DMA_Init+0x1c8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a5f      	ldr	r2, [pc, #380]	; (8005ac4 <HAL_DMA_Init+0x1cc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a5d      	ldr	r2, [pc, #372]	; (8005ac8 <HAL_DMA_Init+0x1d0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5c      	ldr	r2, [pc, #368]	; (8005acc <HAL_DMA_Init+0x1d4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5a      	ldr	r2, [pc, #360]	; (8005ad0 <HAL_DMA_Init+0x1d8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a59      	ldr	r2, [pc, #356]	; (8005ad4 <HAL_DMA_Init+0x1dc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a57      	ldr	r2, [pc, #348]	; (8005ad8 <HAL_DMA_Init+0x1e0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a56      	ldr	r2, [pc, #344]	; (8005adc <HAL_DMA_Init+0x1e4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a54      	ldr	r2, [pc, #336]	; (8005ae0 <HAL_DMA_Init+0x1e8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a53      	ldr	r2, [pc, #332]	; (8005ae4 <HAL_DMA_Init+0x1ec>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a51      	ldr	r2, [pc, #324]	; (8005ae8 <HAL_DMA_Init+0x1f0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_Init+0xb8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a50      	ldr	r2, [pc, #320]	; (8005aec <HAL_DMA_Init+0x1f4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <HAL_DMA_Init+0xbc>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_DMA_Init+0xbe>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 813b 	beq.w	8005c32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a37      	ldr	r2, [pc, #220]	; (8005ab0 <HAL_DMA_Init+0x1b8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04a      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a36      	ldr	r2, [pc, #216]	; (8005ab4 <HAL_DMA_Init+0x1bc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d045      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <HAL_DMA_Init+0x1c0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d040      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a33      	ldr	r2, [pc, #204]	; (8005abc <HAL_DMA_Init+0x1c4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03b      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a31      	ldr	r2, [pc, #196]	; (8005ac0 <HAL_DMA_Init+0x1c8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a30      	ldr	r2, [pc, #192]	; (8005ac4 <HAL_DMA_Init+0x1cc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d031      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2e      	ldr	r2, [pc, #184]	; (8005ac8 <HAL_DMA_Init+0x1d0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <HAL_DMA_Init+0x1d4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d027      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <HAL_DMA_Init+0x1d8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <HAL_DMA_Init+0x1dc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a28      	ldr	r2, [pc, #160]	; (8005ad8 <HAL_DMA_Init+0x1e0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a27      	ldr	r2, [pc, #156]	; (8005adc <HAL_DMA_Init+0x1e4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <HAL_DMA_Init+0x1e8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <HAL_DMA_Init+0x1ec>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <HAL_DMA_Init+0x1f0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_Init+0x174>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a21      	ldr	r2, [pc, #132]	; (8005aec <HAL_DMA_Init+0x1f4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <HAL_DMA_Init+0x186>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e007      	b.n	8005a8e <HAL_DMA_Init+0x196>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a8e:	e02f      	b.n	8005af0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a90:	f7fd fe0a 	bl	80036a8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d928      	bls.n	8005af0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e246      	b.n	8005f3e <HAL_DMA_Init+0x646>
 8005ab0:	40020010 	.word	0x40020010
 8005ab4:	40020028 	.word	0x40020028
 8005ab8:	40020040 	.word	0x40020040
 8005abc:	40020058 	.word	0x40020058
 8005ac0:	40020070 	.word	0x40020070
 8005ac4:	40020088 	.word	0x40020088
 8005ac8:	400200a0 	.word	0x400200a0
 8005acc:	400200b8 	.word	0x400200b8
 8005ad0:	40020410 	.word	0x40020410
 8005ad4:	40020428 	.word	0x40020428
 8005ad8:	40020440 	.word	0x40020440
 8005adc:	40020458 	.word	0x40020458
 8005ae0:	40020470 	.word	0x40020470
 8005ae4:	40020488 	.word	0x40020488
 8005ae8:	400204a0 	.word	0x400204a0
 8005aec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1c8      	bne.n	8005a90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4b83      	ldr	r3, [pc, #524]	; (8005d18 <HAL_DMA_Init+0x420>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005b16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d107      	bne.n	8005b54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005b54:	4b71      	ldr	r3, [pc, #452]	; (8005d1c <HAL_DMA_Init+0x424>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b71      	ldr	r3, [pc, #452]	; (8005d20 <HAL_DMA_Init+0x428>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b60:	d328      	bcc.n	8005bb4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b28      	cmp	r3, #40	; 0x28
 8005b68:	d903      	bls.n	8005b72 <HAL_DMA_Init+0x27a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b70:	d917      	bls.n	8005ba2 <HAL_DMA_Init+0x2aa>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b3e      	cmp	r3, #62	; 0x3e
 8005b78:	d903      	bls.n	8005b82 <HAL_DMA_Init+0x28a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b42      	cmp	r3, #66	; 0x42
 8005b80:	d90f      	bls.n	8005ba2 <HAL_DMA_Init+0x2aa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b46      	cmp	r3, #70	; 0x46
 8005b88:	d903      	bls.n	8005b92 <HAL_DMA_Init+0x29a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b48      	cmp	r3, #72	; 0x48
 8005b90:	d907      	bls.n	8005ba2 <HAL_DMA_Init+0x2aa>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b4e      	cmp	r3, #78	; 0x4e
 8005b98:	d905      	bls.n	8005ba6 <HAL_DMA_Init+0x2ae>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b52      	cmp	r3, #82	; 0x52
 8005ba0:	d801      	bhi.n	8005ba6 <HAL_DMA_Init+0x2ae>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_DMA_Init+0x2b0>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0307 	bic.w	r3, r3, #7
 8005bca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d117      	bne.n	8005c0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f002 fb33 	bl	800825c <DMA_CheckFifoParam>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e197      	b.n	8005f3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f002 fa6e 	bl	80080f8 <DMA_CalcBaseAndBitshift>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	223f      	movs	r2, #63	; 0x3f
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	609a      	str	r2, [r3, #8]
 8005c30:	e0cd      	b.n	8005dce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3b      	ldr	r2, [pc, #236]	; (8005d24 <HAL_DMA_Init+0x42c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d022      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a39      	ldr	r2, [pc, #228]	; (8005d28 <HAL_DMA_Init+0x430>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01d      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <HAL_DMA_Init+0x434>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d018      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a36      	ldr	r2, [pc, #216]	; (8005d30 <HAL_DMA_Init+0x438>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <HAL_DMA_Init+0x43c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00e      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a33      	ldr	r2, [pc, #204]	; (8005d38 <HAL_DMA_Init+0x440>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <HAL_DMA_Init+0x444>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_DMA_Init+0x38a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a30      	ldr	r2, [pc, #192]	; (8005d40 <HAL_DMA_Init+0x448>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_DMA_Init+0x38e>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_DMA_Init+0x390>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8097 	beq.w	8005dbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <HAL_DMA_Init+0x42c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d021      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <HAL_DMA_Init+0x430>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01c      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <HAL_DMA_Init+0x434>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d017      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <HAL_DMA_Init+0x438>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d012      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <HAL_DMA_Init+0x43c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00d      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	; (8005d38 <HAL_DMA_Init+0x440>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d008      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_DMA_Init+0x444>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <HAL_DMA_Init+0x3e4>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <HAL_DMA_Init+0x448>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <HAL_DMA_Init+0x44c>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d020      	beq.n	8005d48 <HAL_DMA_Init+0x450>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d102      	bne.n	8005d14 <HAL_DMA_Init+0x41c>
 8005d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d12:	e01a      	b.n	8005d4a <HAL_DMA_Init+0x452>
 8005d14:	2300      	movs	r3, #0
 8005d16:	e018      	b.n	8005d4a <HAL_DMA_Init+0x452>
 8005d18:	fe10803f 	.word	0xfe10803f
 8005d1c:	5c001000 	.word	0x5c001000
 8005d20:	ffff0000 	.word	0xffff0000
 8005d24:	58025408 	.word	0x58025408
 8005d28:	5802541c 	.word	0x5802541c
 8005d2c:	58025430 	.word	0x58025430
 8005d30:	58025444 	.word	0x58025444
 8005d34:	58025458 	.word	0x58025458
 8005d38:	5802546c 	.word	0x5802546c
 8005d3c:	58025480 	.word	0x58025480
 8005d40:	58025494 	.word	0x58025494
 8005d44:	fffe000f 	.word	0xfffe000f
 8005d48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68d2      	ldr	r2, [r2, #12]
 8005d4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4b6e      	ldr	r3, [pc, #440]	; (8005f48 <HAL_DMA_Init+0x650>)
 8005d90:	4413      	add	r3, r2
 8005d92:	4a6e      	ldr	r2, [pc, #440]	; (8005f4c <HAL_DMA_Init+0x654>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	009a      	lsls	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f002 f9a9 	bl	80080f8 <DMA_CalcBaseAndBitshift>
 8005da6:	4603      	mov	r3, r0
 8005da8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2201      	movs	r2, #1
 8005db4:	409a      	lsls	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e008      	b.n	8005dce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2240      	movs	r2, #64	; 0x40
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0b7      	b.n	8005f3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5f      	ldr	r2, [pc, #380]	; (8005f50 <HAL_DMA_Init+0x658>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d072      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5d      	ldr	r2, [pc, #372]	; (8005f54 <HAL_DMA_Init+0x65c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d06d      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a5c      	ldr	r2, [pc, #368]	; (8005f58 <HAL_DMA_Init+0x660>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d068      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5a      	ldr	r2, [pc, #360]	; (8005f5c <HAL_DMA_Init+0x664>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d063      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a59      	ldr	r2, [pc, #356]	; (8005f60 <HAL_DMA_Init+0x668>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d05e      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a57      	ldr	r2, [pc, #348]	; (8005f64 <HAL_DMA_Init+0x66c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d059      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a56      	ldr	r2, [pc, #344]	; (8005f68 <HAL_DMA_Init+0x670>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d054      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a54      	ldr	r2, [pc, #336]	; (8005f6c <HAL_DMA_Init+0x674>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d04f      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a53      	ldr	r2, [pc, #332]	; (8005f70 <HAL_DMA_Init+0x678>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d04a      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a51      	ldr	r2, [pc, #324]	; (8005f74 <HAL_DMA_Init+0x67c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d045      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a50      	ldr	r2, [pc, #320]	; (8005f78 <HAL_DMA_Init+0x680>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d040      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a4e      	ldr	r2, [pc, #312]	; (8005f7c <HAL_DMA_Init+0x684>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d03b      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a4d      	ldr	r2, [pc, #308]	; (8005f80 <HAL_DMA_Init+0x688>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d036      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a4b      	ldr	r2, [pc, #300]	; (8005f84 <HAL_DMA_Init+0x68c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d031      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <HAL_DMA_Init+0x690>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d02c      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a48      	ldr	r2, [pc, #288]	; (8005f8c <HAL_DMA_Init+0x694>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d027      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a47      	ldr	r2, [pc, #284]	; (8005f90 <HAL_DMA_Init+0x698>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d022      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a45      	ldr	r2, [pc, #276]	; (8005f94 <HAL_DMA_Init+0x69c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01d      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a44      	ldr	r2, [pc, #272]	; (8005f98 <HAL_DMA_Init+0x6a0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d018      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a42      	ldr	r2, [pc, #264]	; (8005f9c <HAL_DMA_Init+0x6a4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a41      	ldr	r2, [pc, #260]	; (8005fa0 <HAL_DMA_Init+0x6a8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00e      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3f      	ldr	r2, [pc, #252]	; (8005fa4 <HAL_DMA_Init+0x6ac>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d009      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3e      	ldr	r2, [pc, #248]	; (8005fa8 <HAL_DMA_Init+0x6b0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d004      	beq.n	8005ebe <HAL_DMA_Init+0x5c6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <HAL_DMA_Init+0x6b4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DMA_Init+0x5ca>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_DMA_Init+0x5cc>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d032      	beq.n	8005f2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f002 fa43 	bl	8008354 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b80      	cmp	r3, #128	; 0x80
 8005ed4:	d102      	bne.n	8005edc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ef0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d010      	beq.n	8005f1c <HAL_DMA_Init+0x624>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d80c      	bhi.n	8005f1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 fac0 	bl	8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	e008      	b.n	8005f2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	a7fdabf8 	.word	0xa7fdabf8
 8005f4c:	cccccccd 	.word	0xcccccccd
 8005f50:	40020010 	.word	0x40020010
 8005f54:	40020028 	.word	0x40020028
 8005f58:	40020040 	.word	0x40020040
 8005f5c:	40020058 	.word	0x40020058
 8005f60:	40020070 	.word	0x40020070
 8005f64:	40020088 	.word	0x40020088
 8005f68:	400200a0 	.word	0x400200a0
 8005f6c:	400200b8 	.word	0x400200b8
 8005f70:	40020410 	.word	0x40020410
 8005f74:	40020428 	.word	0x40020428
 8005f78:	40020440 	.word	0x40020440
 8005f7c:	40020458 	.word	0x40020458
 8005f80:	40020470 	.word	0x40020470
 8005f84:	40020488 	.word	0x40020488
 8005f88:	400204a0 	.word	0x400204a0
 8005f8c:	400204b8 	.word	0x400204b8
 8005f90:	58025408 	.word	0x58025408
 8005f94:	5802541c 	.word	0x5802541c
 8005f98:	58025430 	.word	0x58025430
 8005f9c:	58025444 	.word	0x58025444
 8005fa0:	58025458 	.word	0x58025458
 8005fa4:	5802546c 	.word	0x5802546c
 8005fa8:	58025480 	.word	0x58025480
 8005fac:	58025494 	.word	0x58025494

08005fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e226      	b.n	800641a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_DMA_Start_IT+0x2a>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e21f      	b.n	800641a <HAL_DMA_Start_IT+0x46a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	f040 820a 	bne.w	8006404 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a68      	ldr	r2, [pc, #416]	; (80061a4 <HAL_DMA_Start_IT+0x1f4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d04a      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a66      	ldr	r2, [pc, #408]	; (80061a8 <HAL_DMA_Start_IT+0x1f8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d045      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a65      	ldr	r2, [pc, #404]	; (80061ac <HAL_DMA_Start_IT+0x1fc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d040      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a63      	ldr	r2, [pc, #396]	; (80061b0 <HAL_DMA_Start_IT+0x200>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d03b      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a62      	ldr	r2, [pc, #392]	; (80061b4 <HAL_DMA_Start_IT+0x204>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d036      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a60      	ldr	r2, [pc, #384]	; (80061b8 <HAL_DMA_Start_IT+0x208>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d031      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a5f      	ldr	r2, [pc, #380]	; (80061bc <HAL_DMA_Start_IT+0x20c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d02c      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5d      	ldr	r2, [pc, #372]	; (80061c0 <HAL_DMA_Start_IT+0x210>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d027      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5c      	ldr	r2, [pc, #368]	; (80061c4 <HAL_DMA_Start_IT+0x214>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5a      	ldr	r2, [pc, #360]	; (80061c8 <HAL_DMA_Start_IT+0x218>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01d      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a59      	ldr	r2, [pc, #356]	; (80061cc <HAL_DMA_Start_IT+0x21c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <HAL_DMA_Start_IT+0x220>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a56      	ldr	r2, [pc, #344]	; (80061d4 <HAL_DMA_Start_IT+0x224>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a54      	ldr	r2, [pc, #336]	; (80061d8 <HAL_DMA_Start_IT+0x228>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a53      	ldr	r2, [pc, #332]	; (80061dc <HAL_DMA_Start_IT+0x22c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_DMA_Start_IT+0xee>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a51      	ldr	r2, [pc, #324]	; (80061e0 <HAL_DMA_Start_IT+0x230>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d108      	bne.n	80060b0 <HAL_DMA_Start_IT+0x100>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e007      	b.n	80060c0 <HAL_DMA_Start_IT+0x110>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f001 fe6a 	bl	8007da0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a34      	ldr	r2, [pc, #208]	; (80061a4 <HAL_DMA_Start_IT+0x1f4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a33      	ldr	r2, [pc, #204]	; (80061a8 <HAL_DMA_Start_IT+0x1f8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a31      	ldr	r2, [pc, #196]	; (80061ac <HAL_DMA_Start_IT+0x1fc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a30      	ldr	r2, [pc, #192]	; (80061b0 <HAL_DMA_Start_IT+0x200>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <HAL_DMA_Start_IT+0x204>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2d      	ldr	r2, [pc, #180]	; (80061b8 <HAL_DMA_Start_IT+0x208>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2b      	ldr	r2, [pc, #172]	; (80061bc <HAL_DMA_Start_IT+0x20c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <HAL_DMA_Start_IT+0x210>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <HAL_DMA_Start_IT+0x214>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <HAL_DMA_Start_IT+0x218>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a25      	ldr	r2, [pc, #148]	; (80061cc <HAL_DMA_Start_IT+0x21c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a24      	ldr	r2, [pc, #144]	; (80061d0 <HAL_DMA_Start_IT+0x220>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <HAL_DMA_Start_IT+0x224>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <HAL_DMA_Start_IT+0x228>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_DMA_Start_IT+0x22c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_DMA_Start_IT+0x1bc>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_DMA_Start_IT+0x230>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d101      	bne.n	8006170 <HAL_DMA_Start_IT+0x1c0>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_DMA_Start_IT+0x1c2>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d036      	beq.n	80061e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f023 021e 	bic.w	r2, r3, #30
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0216 	orr.w	r2, r2, #22
 8006188:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d03e      	beq.n	8006210 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0208 	orr.w	r2, r2, #8
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e035      	b.n	8006210 <HAL_DMA_Start_IT+0x260>
 80061a4:	40020010 	.word	0x40020010
 80061a8:	40020028 	.word	0x40020028
 80061ac:	40020040 	.word	0x40020040
 80061b0:	40020058 	.word	0x40020058
 80061b4:	40020070 	.word	0x40020070
 80061b8:	40020088 	.word	0x40020088
 80061bc:	400200a0 	.word	0x400200a0
 80061c0:	400200b8 	.word	0x400200b8
 80061c4:	40020410 	.word	0x40020410
 80061c8:	40020428 	.word	0x40020428
 80061cc:	40020440 	.word	0x40020440
 80061d0:	40020458 	.word	0x40020458
 80061d4:	40020470 	.word	0x40020470
 80061d8:	40020488 	.word	0x40020488
 80061dc:	400204a0 	.word	0x400204a0
 80061e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f023 020e 	bic.w	r2, r3, #14
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 020a 	orr.w	r2, r2, #10
 80061f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0204 	orr.w	r2, r2, #4
 800620e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a83      	ldr	r2, [pc, #524]	; (8006424 <HAL_DMA_Start_IT+0x474>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d072      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a82      	ldr	r2, [pc, #520]	; (8006428 <HAL_DMA_Start_IT+0x478>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d06d      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a80      	ldr	r2, [pc, #512]	; (800642c <HAL_DMA_Start_IT+0x47c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d068      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a7f      	ldr	r2, [pc, #508]	; (8006430 <HAL_DMA_Start_IT+0x480>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d063      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a7d      	ldr	r2, [pc, #500]	; (8006434 <HAL_DMA_Start_IT+0x484>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d05e      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a7c      	ldr	r2, [pc, #496]	; (8006438 <HAL_DMA_Start_IT+0x488>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d059      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7a      	ldr	r2, [pc, #488]	; (800643c <HAL_DMA_Start_IT+0x48c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d054      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a79      	ldr	r2, [pc, #484]	; (8006440 <HAL_DMA_Start_IT+0x490>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d04f      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a77      	ldr	r2, [pc, #476]	; (8006444 <HAL_DMA_Start_IT+0x494>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d04a      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a76      	ldr	r2, [pc, #472]	; (8006448 <HAL_DMA_Start_IT+0x498>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d045      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a74      	ldr	r2, [pc, #464]	; (800644c <HAL_DMA_Start_IT+0x49c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d040      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a73      	ldr	r2, [pc, #460]	; (8006450 <HAL_DMA_Start_IT+0x4a0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d03b      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a71      	ldr	r2, [pc, #452]	; (8006454 <HAL_DMA_Start_IT+0x4a4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d036      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a70      	ldr	r2, [pc, #448]	; (8006458 <HAL_DMA_Start_IT+0x4a8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d031      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6e      	ldr	r2, [pc, #440]	; (800645c <HAL_DMA_Start_IT+0x4ac>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d02c      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6d      	ldr	r2, [pc, #436]	; (8006460 <HAL_DMA_Start_IT+0x4b0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d027      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a6b      	ldr	r2, [pc, #428]	; (8006464 <HAL_DMA_Start_IT+0x4b4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d022      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6a      	ldr	r2, [pc, #424]	; (8006468 <HAL_DMA_Start_IT+0x4b8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d01d      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a68      	ldr	r2, [pc, #416]	; (800646c <HAL_DMA_Start_IT+0x4bc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d018      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a67      	ldr	r2, [pc, #412]	; (8006470 <HAL_DMA_Start_IT+0x4c0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d013      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a65      	ldr	r2, [pc, #404]	; (8006474 <HAL_DMA_Start_IT+0x4c4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00e      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a64      	ldr	r2, [pc, #400]	; (8006478 <HAL_DMA_Start_IT+0x4c8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a62      	ldr	r2, [pc, #392]	; (800647c <HAL_DMA_Start_IT+0x4cc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <HAL_DMA_Start_IT+0x350>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a61      	ldr	r2, [pc, #388]	; (8006480 <HAL_DMA_Start_IT+0x4d0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d101      	bne.n	8006304 <HAL_DMA_Start_IT+0x354>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_DMA_Start_IT+0x356>
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01a      	beq.n	8006340 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006326:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800633e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a37      	ldr	r2, [pc, #220]	; (8006424 <HAL_DMA_Start_IT+0x474>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d04a      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a36      	ldr	r2, [pc, #216]	; (8006428 <HAL_DMA_Start_IT+0x478>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d045      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a34      	ldr	r2, [pc, #208]	; (800642c <HAL_DMA_Start_IT+0x47c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d040      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a33      	ldr	r2, [pc, #204]	; (8006430 <HAL_DMA_Start_IT+0x480>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d03b      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a31      	ldr	r2, [pc, #196]	; (8006434 <HAL_DMA_Start_IT+0x484>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d036      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a30      	ldr	r2, [pc, #192]	; (8006438 <HAL_DMA_Start_IT+0x488>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d031      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2e      	ldr	r2, [pc, #184]	; (800643c <HAL_DMA_Start_IT+0x48c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d02c      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a2d      	ldr	r2, [pc, #180]	; (8006440 <HAL_DMA_Start_IT+0x490>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d027      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <HAL_DMA_Start_IT+0x494>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d022      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <HAL_DMA_Start_IT+0x498>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d01d      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_DMA_Start_IT+0x49c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d018      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a27      	ldr	r2, [pc, #156]	; (8006450 <HAL_DMA_Start_IT+0x4a0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <HAL_DMA_Start_IT+0x4a4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00e      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_DMA_Start_IT+0x4a8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_DMA_Start_IT+0x4ac>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_DMA_Start_IT+0x430>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	; (8006460 <HAL_DMA_Start_IT+0x4b0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <HAL_DMA_Start_IT+0x442>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e012      	b.n	8006418 <HAL_DMA_Start_IT+0x468>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e009      	b.n	8006418 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800640a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40020010 	.word	0x40020010
 8006428:	40020028 	.word	0x40020028
 800642c:	40020040 	.word	0x40020040
 8006430:	40020058 	.word	0x40020058
 8006434:	40020070 	.word	0x40020070
 8006438:	40020088 	.word	0x40020088
 800643c:	400200a0 	.word	0x400200a0
 8006440:	400200b8 	.word	0x400200b8
 8006444:	40020410 	.word	0x40020410
 8006448:	40020428 	.word	0x40020428
 800644c:	40020440 	.word	0x40020440
 8006450:	40020458 	.word	0x40020458
 8006454:	40020470 	.word	0x40020470
 8006458:	40020488 	.word	0x40020488
 800645c:	400204a0 	.word	0x400204a0
 8006460:	400204b8 	.word	0x400204b8
 8006464:	58025408 	.word	0x58025408
 8006468:	5802541c 	.word	0x5802541c
 800646c:	58025430 	.word	0x58025430
 8006470:	58025444 	.word	0x58025444
 8006474:	58025458 	.word	0x58025458
 8006478:	5802546c 	.word	0x5802546c
 800647c:	58025480 	.word	0x58025480
 8006480:	58025494 	.word	0x58025494

08006484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800648c:	f7fd f90c 	bl	80036a8 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e2dc      	b.n	8006a56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d008      	beq.n	80064ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e2cd      	b.n	8006a56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a76      	ldr	r2, [pc, #472]	; (8006698 <HAL_DMA_Abort+0x214>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d04a      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a74      	ldr	r2, [pc, #464]	; (800669c <HAL_DMA_Abort+0x218>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d045      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a73      	ldr	r2, [pc, #460]	; (80066a0 <HAL_DMA_Abort+0x21c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d040      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a71      	ldr	r2, [pc, #452]	; (80066a4 <HAL_DMA_Abort+0x220>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d03b      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a70      	ldr	r2, [pc, #448]	; (80066a8 <HAL_DMA_Abort+0x224>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d036      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a6e      	ldr	r2, [pc, #440]	; (80066ac <HAL_DMA_Abort+0x228>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d031      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a6d      	ldr	r2, [pc, #436]	; (80066b0 <HAL_DMA_Abort+0x22c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d02c      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a6b      	ldr	r2, [pc, #428]	; (80066b4 <HAL_DMA_Abort+0x230>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d027      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a6a      	ldr	r2, [pc, #424]	; (80066b8 <HAL_DMA_Abort+0x234>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a68      	ldr	r2, [pc, #416]	; (80066bc <HAL_DMA_Abort+0x238>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01d      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a67      	ldr	r2, [pc, #412]	; (80066c0 <HAL_DMA_Abort+0x23c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a65      	ldr	r2, [pc, #404]	; (80066c4 <HAL_DMA_Abort+0x240>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a64      	ldr	r2, [pc, #400]	; (80066c8 <HAL_DMA_Abort+0x244>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a62      	ldr	r2, [pc, #392]	; (80066cc <HAL_DMA_Abort+0x248>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a61      	ldr	r2, [pc, #388]	; (80066d0 <HAL_DMA_Abort+0x24c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_DMA_Abort+0xd6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a5f      	ldr	r2, [pc, #380]	; (80066d4 <HAL_DMA_Abort+0x250>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <HAL_DMA_Abort+0xda>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_DMA_Abort+0xdc>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d013      	beq.n	800658c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 021e 	bic.w	r2, r2, #30
 8006572:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006582:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e00a      	b.n	80065a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 020e 	bic.w	r2, r2, #14
 800659a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a3c      	ldr	r2, [pc, #240]	; (8006698 <HAL_DMA_Abort+0x214>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d072      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3a      	ldr	r2, [pc, #232]	; (800669c <HAL_DMA_Abort+0x218>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d06d      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a39      	ldr	r2, [pc, #228]	; (80066a0 <HAL_DMA_Abort+0x21c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d068      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a37      	ldr	r2, [pc, #220]	; (80066a4 <HAL_DMA_Abort+0x220>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d063      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a36      	ldr	r2, [pc, #216]	; (80066a8 <HAL_DMA_Abort+0x224>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d05e      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a34      	ldr	r2, [pc, #208]	; (80066ac <HAL_DMA_Abort+0x228>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d059      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a33      	ldr	r2, [pc, #204]	; (80066b0 <HAL_DMA_Abort+0x22c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d054      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a31      	ldr	r2, [pc, #196]	; (80066b4 <HAL_DMA_Abort+0x230>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d04f      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a30      	ldr	r2, [pc, #192]	; (80066b8 <HAL_DMA_Abort+0x234>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d04a      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2e      	ldr	r2, [pc, #184]	; (80066bc <HAL_DMA_Abort+0x238>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d045      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a2d      	ldr	r2, [pc, #180]	; (80066c0 <HAL_DMA_Abort+0x23c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d040      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2b      	ldr	r2, [pc, #172]	; (80066c4 <HAL_DMA_Abort+0x240>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d03b      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <HAL_DMA_Abort+0x244>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d036      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a28      	ldr	r2, [pc, #160]	; (80066cc <HAL_DMA_Abort+0x248>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d031      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a27      	ldr	r2, [pc, #156]	; (80066d0 <HAL_DMA_Abort+0x24c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d02c      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a25      	ldr	r2, [pc, #148]	; (80066d4 <HAL_DMA_Abort+0x250>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d027      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a24      	ldr	r2, [pc, #144]	; (80066d8 <HAL_DMA_Abort+0x254>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a22      	ldr	r2, [pc, #136]	; (80066dc <HAL_DMA_Abort+0x258>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01d      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <HAL_DMA_Abort+0x25c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1f      	ldr	r2, [pc, #124]	; (80066e4 <HAL_DMA_Abort+0x260>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_DMA_Abort+0x264>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <HAL_DMA_Abort+0x268>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <HAL_DMA_Abort+0x26c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_DMA_Abort+0x20e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_DMA_Abort+0x270>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d132      	bne.n	80066f8 <HAL_DMA_Abort+0x274>
 8006692:	2301      	movs	r3, #1
 8006694:	e031      	b.n	80066fa <HAL_DMA_Abort+0x276>
 8006696:	bf00      	nop
 8006698:	40020010 	.word	0x40020010
 800669c:	40020028 	.word	0x40020028
 80066a0:	40020040 	.word	0x40020040
 80066a4:	40020058 	.word	0x40020058
 80066a8:	40020070 	.word	0x40020070
 80066ac:	40020088 	.word	0x40020088
 80066b0:	400200a0 	.word	0x400200a0
 80066b4:	400200b8 	.word	0x400200b8
 80066b8:	40020410 	.word	0x40020410
 80066bc:	40020428 	.word	0x40020428
 80066c0:	40020440 	.word	0x40020440
 80066c4:	40020458 	.word	0x40020458
 80066c8:	40020470 	.word	0x40020470
 80066cc:	40020488 	.word	0x40020488
 80066d0:	400204a0 	.word	0x400204a0
 80066d4:	400204b8 	.word	0x400204b8
 80066d8:	58025408 	.word	0x58025408
 80066dc:	5802541c 	.word	0x5802541c
 80066e0:	58025430 	.word	0x58025430
 80066e4:	58025444 	.word	0x58025444
 80066e8:	58025458 	.word	0x58025458
 80066ec:	5802546c 	.word	0x5802546c
 80066f0:	58025480 	.word	0x58025480
 80066f4:	58025494 	.word	0x58025494
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800670c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a6d      	ldr	r2, [pc, #436]	; (80068c8 <HAL_DMA_Abort+0x444>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d04a      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a6b      	ldr	r2, [pc, #428]	; (80068cc <HAL_DMA_Abort+0x448>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d045      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6a      	ldr	r2, [pc, #424]	; (80068d0 <HAL_DMA_Abort+0x44c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d040      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a68      	ldr	r2, [pc, #416]	; (80068d4 <HAL_DMA_Abort+0x450>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d03b      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a67      	ldr	r2, [pc, #412]	; (80068d8 <HAL_DMA_Abort+0x454>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d036      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a65      	ldr	r2, [pc, #404]	; (80068dc <HAL_DMA_Abort+0x458>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d031      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a64      	ldr	r2, [pc, #400]	; (80068e0 <HAL_DMA_Abort+0x45c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d02c      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a62      	ldr	r2, [pc, #392]	; (80068e4 <HAL_DMA_Abort+0x460>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d027      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a61      	ldr	r2, [pc, #388]	; (80068e8 <HAL_DMA_Abort+0x464>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d022      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5f      	ldr	r2, [pc, #380]	; (80068ec <HAL_DMA_Abort+0x468>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01d      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a5e      	ldr	r2, [pc, #376]	; (80068f0 <HAL_DMA_Abort+0x46c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d018      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5c      	ldr	r2, [pc, #368]	; (80068f4 <HAL_DMA_Abort+0x470>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a5b      	ldr	r2, [pc, #364]	; (80068f8 <HAL_DMA_Abort+0x474>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00e      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a59      	ldr	r2, [pc, #356]	; (80068fc <HAL_DMA_Abort+0x478>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a58      	ldr	r2, [pc, #352]	; (8006900 <HAL_DMA_Abort+0x47c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_DMA_Abort+0x32a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a56      	ldr	r2, [pc, #344]	; (8006904 <HAL_DMA_Abort+0x480>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d108      	bne.n	80067c0 <HAL_DMA_Abort+0x33c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0201 	bic.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e007      	b.n	80067d0 <HAL_DMA_Abort+0x34c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067d0:	e013      	b.n	80067fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067d2:	f7fc ff69 	bl	80036a8 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b05      	cmp	r3, #5
 80067de:	d90c      	bls.n	80067fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2203      	movs	r2, #3
 80067ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e12d      	b.n	8006a56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <HAL_DMA_Abort+0x444>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d04a      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2d      	ldr	r2, [pc, #180]	; (80068cc <HAL_DMA_Abort+0x448>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d045      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <HAL_DMA_Abort+0x44c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d040      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <HAL_DMA_Abort+0x450>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d03b      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a29      	ldr	r2, [pc, #164]	; (80068d8 <HAL_DMA_Abort+0x454>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d036      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a27      	ldr	r2, [pc, #156]	; (80068dc <HAL_DMA_Abort+0x458>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d031      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a26      	ldr	r2, [pc, #152]	; (80068e0 <HAL_DMA_Abort+0x45c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d02c      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <HAL_DMA_Abort+0x460>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d027      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <HAL_DMA_Abort+0x464>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a21      	ldr	r2, [pc, #132]	; (80068ec <HAL_DMA_Abort+0x468>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01d      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <HAL_DMA_Abort+0x46c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <HAL_DMA_Abort+0x470>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1d      	ldr	r2, [pc, #116]	; (80068f8 <HAL_DMA_Abort+0x474>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <HAL_DMA_Abort+0x478>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <HAL_DMA_Abort+0x47c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_DMA_Abort+0x422>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a18      	ldr	r2, [pc, #96]	; (8006904 <HAL_DMA_Abort+0x480>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <HAL_DMA_Abort+0x426>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <HAL_DMA_Abort+0x428>
 80068aa:	2300      	movs	r3, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d02b      	beq.n	8006908 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	223f      	movs	r2, #63	; 0x3f
 80068c0:	409a      	lsls	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
 80068c6:	e02a      	b.n	800691e <HAL_DMA_Abort+0x49a>
 80068c8:	40020010 	.word	0x40020010
 80068cc:	40020028 	.word	0x40020028
 80068d0:	40020040 	.word	0x40020040
 80068d4:	40020058 	.word	0x40020058
 80068d8:	40020070 	.word	0x40020070
 80068dc:	40020088 	.word	0x40020088
 80068e0:	400200a0 	.word	0x400200a0
 80068e4:	400200b8 	.word	0x400200b8
 80068e8:	40020410 	.word	0x40020410
 80068ec:	40020428 	.word	0x40020428
 80068f0:	40020440 	.word	0x40020440
 80068f4:	40020458 	.word	0x40020458
 80068f8:	40020470 	.word	0x40020470
 80068fc:	40020488 	.word	0x40020488
 8006900:	400204a0 	.word	0x400204a0
 8006904:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	2201      	movs	r2, #1
 8006918:	409a      	lsls	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a4f      	ldr	r2, [pc, #316]	; (8006a60 <HAL_DMA_Abort+0x5dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d072      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a4d      	ldr	r2, [pc, #308]	; (8006a64 <HAL_DMA_Abort+0x5e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d06d      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4c      	ldr	r2, [pc, #304]	; (8006a68 <HAL_DMA_Abort+0x5e4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d068      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a4a      	ldr	r2, [pc, #296]	; (8006a6c <HAL_DMA_Abort+0x5e8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d063      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a49      	ldr	r2, [pc, #292]	; (8006a70 <HAL_DMA_Abort+0x5ec>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d05e      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a47      	ldr	r2, [pc, #284]	; (8006a74 <HAL_DMA_Abort+0x5f0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d059      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a46      	ldr	r2, [pc, #280]	; (8006a78 <HAL_DMA_Abort+0x5f4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d054      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a44      	ldr	r2, [pc, #272]	; (8006a7c <HAL_DMA_Abort+0x5f8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d04f      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a43      	ldr	r2, [pc, #268]	; (8006a80 <HAL_DMA_Abort+0x5fc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d04a      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a41      	ldr	r2, [pc, #260]	; (8006a84 <HAL_DMA_Abort+0x600>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d045      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a40      	ldr	r2, [pc, #256]	; (8006a88 <HAL_DMA_Abort+0x604>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d040      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a3e      	ldr	r2, [pc, #248]	; (8006a8c <HAL_DMA_Abort+0x608>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d03b      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3d      	ldr	r2, [pc, #244]	; (8006a90 <HAL_DMA_Abort+0x60c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d036      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a3b      	ldr	r2, [pc, #236]	; (8006a94 <HAL_DMA_Abort+0x610>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d031      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a3a      	ldr	r2, [pc, #232]	; (8006a98 <HAL_DMA_Abort+0x614>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d02c      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a38      	ldr	r2, [pc, #224]	; (8006a9c <HAL_DMA_Abort+0x618>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d027      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a37      	ldr	r2, [pc, #220]	; (8006aa0 <HAL_DMA_Abort+0x61c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d022      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a35      	ldr	r2, [pc, #212]	; (8006aa4 <HAL_DMA_Abort+0x620>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01d      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a34      	ldr	r2, [pc, #208]	; (8006aa8 <HAL_DMA_Abort+0x624>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d018      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a32      	ldr	r2, [pc, #200]	; (8006aac <HAL_DMA_Abort+0x628>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a31      	ldr	r2, [pc, #196]	; (8006ab0 <HAL_DMA_Abort+0x62c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <HAL_DMA_Abort+0x630>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2e      	ldr	r2, [pc, #184]	; (8006ab8 <HAL_DMA_Abort+0x634>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_DMA_Abort+0x58a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <HAL_DMA_Abort+0x638>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d101      	bne.n	8006a12 <HAL_DMA_Abort+0x58e>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <HAL_DMA_Abort+0x590>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00c      	beq.n	8006a44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40020010 	.word	0x40020010
 8006a64:	40020028 	.word	0x40020028
 8006a68:	40020040 	.word	0x40020040
 8006a6c:	40020058 	.word	0x40020058
 8006a70:	40020070 	.word	0x40020070
 8006a74:	40020088 	.word	0x40020088
 8006a78:	400200a0 	.word	0x400200a0
 8006a7c:	400200b8 	.word	0x400200b8
 8006a80:	40020410 	.word	0x40020410
 8006a84:	40020428 	.word	0x40020428
 8006a88:	40020440 	.word	0x40020440
 8006a8c:	40020458 	.word	0x40020458
 8006a90:	40020470 	.word	0x40020470
 8006a94:	40020488 	.word	0x40020488
 8006a98:	400204a0 	.word	0x400204a0
 8006a9c:	400204b8 	.word	0x400204b8
 8006aa0:	58025408 	.word	0x58025408
 8006aa4:	5802541c 	.word	0x5802541c
 8006aa8:	58025430 	.word	0x58025430
 8006aac:	58025444 	.word	0x58025444
 8006ab0:	58025458 	.word	0x58025458
 8006ab4:	5802546c 	.word	0x5802546c
 8006ab8:	58025480 	.word	0x58025480
 8006abc:	58025494 	.word	0x58025494

08006ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e237      	b.n	8006f42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d004      	beq.n	8006ae8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e22c      	b.n	8006f42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a5c      	ldr	r2, [pc, #368]	; (8006c60 <HAL_DMA_Abort_IT+0x1a0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d04a      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a5b      	ldr	r2, [pc, #364]	; (8006c64 <HAL_DMA_Abort_IT+0x1a4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d045      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a59      	ldr	r2, [pc, #356]	; (8006c68 <HAL_DMA_Abort_IT+0x1a8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d040      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a58      	ldr	r2, [pc, #352]	; (8006c6c <HAL_DMA_Abort_IT+0x1ac>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d03b      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a56      	ldr	r2, [pc, #344]	; (8006c70 <HAL_DMA_Abort_IT+0x1b0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d036      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a55      	ldr	r2, [pc, #340]	; (8006c74 <HAL_DMA_Abort_IT+0x1b4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d031      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a53      	ldr	r2, [pc, #332]	; (8006c78 <HAL_DMA_Abort_IT+0x1b8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d02c      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a52      	ldr	r2, [pc, #328]	; (8006c7c <HAL_DMA_Abort_IT+0x1bc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d027      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a50      	ldr	r2, [pc, #320]	; (8006c80 <HAL_DMA_Abort_IT+0x1c0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d022      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a4f      	ldr	r2, [pc, #316]	; (8006c84 <HAL_DMA_Abort_IT+0x1c4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d01d      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a4d      	ldr	r2, [pc, #308]	; (8006c88 <HAL_DMA_Abort_IT+0x1c8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a4c      	ldr	r2, [pc, #304]	; (8006c8c <HAL_DMA_Abort_IT+0x1cc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a4a      	ldr	r2, [pc, #296]	; (8006c90 <HAL_DMA_Abort_IT+0x1d0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a49      	ldr	r2, [pc, #292]	; (8006c94 <HAL_DMA_Abort_IT+0x1d4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a47      	ldr	r2, [pc, #284]	; (8006c98 <HAL_DMA_Abort_IT+0x1d8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_DMA_Abort_IT+0xc8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a46      	ldr	r2, [pc, #280]	; (8006c9c <HAL_DMA_Abort_IT+0x1dc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d101      	bne.n	8006b8c <HAL_DMA_Abort_IT+0xcc>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <HAL_DMA_Abort_IT+0xce>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8086 	beq.w	8006ca0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2204      	movs	r2, #4
 8006b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a2f      	ldr	r2, [pc, #188]	; (8006c60 <HAL_DMA_Abort_IT+0x1a0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d04a      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2e      	ldr	r2, [pc, #184]	; (8006c64 <HAL_DMA_Abort_IT+0x1a4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d045      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <HAL_DMA_Abort_IT+0x1a8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d040      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <HAL_DMA_Abort_IT+0x1ac>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d03b      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a29      	ldr	r2, [pc, #164]	; (8006c70 <HAL_DMA_Abort_IT+0x1b0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d036      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <HAL_DMA_Abort_IT+0x1b4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d031      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <HAL_DMA_Abort_IT+0x1b8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02c      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a25      	ldr	r2, [pc, #148]	; (8006c7c <HAL_DMA_Abort_IT+0x1bc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d027      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a23      	ldr	r2, [pc, #140]	; (8006c80 <HAL_DMA_Abort_IT+0x1c0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d022      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <HAL_DMA_Abort_IT+0x1c4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <HAL_DMA_Abort_IT+0x1c8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_DMA_Abort_IT+0x1cc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1d      	ldr	r2, [pc, #116]	; (8006c90 <HAL_DMA_Abort_IT+0x1d0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_DMA_Abort_IT+0x1d4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	; (8006c98 <HAL_DMA_Abort_IT+0x1d8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x17c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_DMA_Abort_IT+0x1dc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <HAL_DMA_Abort_IT+0x18e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0201 	bic.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e178      	b.n	8006f40 <HAL_DMA_Abort_IT+0x480>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e16f      	b.n	8006f40 <HAL_DMA_Abort_IT+0x480>
 8006c60:	40020010 	.word	0x40020010
 8006c64:	40020028 	.word	0x40020028
 8006c68:	40020040 	.word	0x40020040
 8006c6c:	40020058 	.word	0x40020058
 8006c70:	40020070 	.word	0x40020070
 8006c74:	40020088 	.word	0x40020088
 8006c78:	400200a0 	.word	0x400200a0
 8006c7c:	400200b8 	.word	0x400200b8
 8006c80:	40020410 	.word	0x40020410
 8006c84:	40020428 	.word	0x40020428
 8006c88:	40020440 	.word	0x40020440
 8006c8c:	40020458 	.word	0x40020458
 8006c90:	40020470 	.word	0x40020470
 8006c94:	40020488 	.word	0x40020488
 8006c98:	400204a0 	.word	0x400204a0
 8006c9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 020e 	bic.w	r2, r2, #14
 8006cae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a6c      	ldr	r2, [pc, #432]	; (8006e68 <HAL_DMA_Abort_IT+0x3a8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04a      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a6b      	ldr	r2, [pc, #428]	; (8006e6c <HAL_DMA_Abort_IT+0x3ac>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d045      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a69      	ldr	r2, [pc, #420]	; (8006e70 <HAL_DMA_Abort_IT+0x3b0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d040      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <HAL_DMA_Abort_IT+0x3b4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d03b      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a66      	ldr	r2, [pc, #408]	; (8006e78 <HAL_DMA_Abort_IT+0x3b8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d036      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a65      	ldr	r2, [pc, #404]	; (8006e7c <HAL_DMA_Abort_IT+0x3bc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d031      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a63      	ldr	r2, [pc, #396]	; (8006e80 <HAL_DMA_Abort_IT+0x3c0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d02c      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a62      	ldr	r2, [pc, #392]	; (8006e84 <HAL_DMA_Abort_IT+0x3c4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d027      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a60      	ldr	r2, [pc, #384]	; (8006e88 <HAL_DMA_Abort_IT+0x3c8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d022      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a5f      	ldr	r2, [pc, #380]	; (8006e8c <HAL_DMA_Abort_IT+0x3cc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d01d      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a5d      	ldr	r2, [pc, #372]	; (8006e90 <HAL_DMA_Abort_IT+0x3d0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a5c      	ldr	r2, [pc, #368]	; (8006e94 <HAL_DMA_Abort_IT+0x3d4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5a      	ldr	r2, [pc, #360]	; (8006e98 <HAL_DMA_Abort_IT+0x3d8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a59      	ldr	r2, [pc, #356]	; (8006e9c <HAL_DMA_Abort_IT+0x3dc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a57      	ldr	r2, [pc, #348]	; (8006ea0 <HAL_DMA_Abort_IT+0x3e0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x290>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a56      	ldr	r2, [pc, #344]	; (8006ea4 <HAL_DMA_Abort_IT+0x3e4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d108      	bne.n	8006d62 <HAL_DMA_Abort_IT+0x2a2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e007      	b.n	8006d72 <HAL_DMA_Abort_IT+0x2b2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <HAL_DMA_Abort_IT+0x3a8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d072      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3a      	ldr	r2, [pc, #232]	; (8006e6c <HAL_DMA_Abort_IT+0x3ac>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d06d      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a39      	ldr	r2, [pc, #228]	; (8006e70 <HAL_DMA_Abort_IT+0x3b0>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d068      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a37      	ldr	r2, [pc, #220]	; (8006e74 <HAL_DMA_Abort_IT+0x3b4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d063      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a36      	ldr	r2, [pc, #216]	; (8006e78 <HAL_DMA_Abort_IT+0x3b8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d05e      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a34      	ldr	r2, [pc, #208]	; (8006e7c <HAL_DMA_Abort_IT+0x3bc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d059      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a33      	ldr	r2, [pc, #204]	; (8006e80 <HAL_DMA_Abort_IT+0x3c0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d054      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a31      	ldr	r2, [pc, #196]	; (8006e84 <HAL_DMA_Abort_IT+0x3c4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d04f      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a30      	ldr	r2, [pc, #192]	; (8006e88 <HAL_DMA_Abort_IT+0x3c8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d04a      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2e      	ldr	r2, [pc, #184]	; (8006e8c <HAL_DMA_Abort_IT+0x3cc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d045      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a2d      	ldr	r2, [pc, #180]	; (8006e90 <HAL_DMA_Abort_IT+0x3d0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d040      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <HAL_DMA_Abort_IT+0x3d4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d03b      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <HAL_DMA_Abort_IT+0x3d8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d036      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <HAL_DMA_Abort_IT+0x3dc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d031      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <HAL_DMA_Abort_IT+0x3e0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d02c      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <HAL_DMA_Abort_IT+0x3e4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d027      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a24      	ldr	r2, [pc, #144]	; (8006ea8 <HAL_DMA_Abort_IT+0x3e8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d022      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a22      	ldr	r2, [pc, #136]	; (8006eac <HAL_DMA_Abort_IT+0x3ec>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01d      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_DMA_Abort_IT+0x3f0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d018      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <HAL_DMA_Abort_IT+0x3f4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <HAL_DMA_Abort_IT+0x3f8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <HAL_DMA_Abort_IT+0x3fc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <HAL_DMA_Abort_IT+0x400>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_DMA_Abort_IT+0x3a2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <HAL_DMA_Abort_IT+0x404>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d132      	bne.n	8006ec8 <HAL_DMA_Abort_IT+0x408>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e031      	b.n	8006eca <HAL_DMA_Abort_IT+0x40a>
 8006e66:	bf00      	nop
 8006e68:	40020010 	.word	0x40020010
 8006e6c:	40020028 	.word	0x40020028
 8006e70:	40020040 	.word	0x40020040
 8006e74:	40020058 	.word	0x40020058
 8006e78:	40020070 	.word	0x40020070
 8006e7c:	40020088 	.word	0x40020088
 8006e80:	400200a0 	.word	0x400200a0
 8006e84:	400200b8 	.word	0x400200b8
 8006e88:	40020410 	.word	0x40020410
 8006e8c:	40020428 	.word	0x40020428
 8006e90:	40020440 	.word	0x40020440
 8006e94:	40020458 	.word	0x40020458
 8006e98:	40020470 	.word	0x40020470
 8006e9c:	40020488 	.word	0x40020488
 8006ea0:	400204a0 	.word	0x400204a0
 8006ea4:	400204b8 	.word	0x400204b8
 8006ea8:	58025408 	.word	0x58025408
 8006eac:	5802541c 	.word	0x5802541c
 8006eb0:	58025430 	.word	0x58025430
 8006eb4:	58025444 	.word	0x58025444
 8006eb8:	58025458 	.word	0x58025458
 8006ebc:	5802546c 	.word	0x5802546c
 8006ec0:	58025480 	.word	0x58025480
 8006ec4:	58025494 	.word	0x58025494
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d028      	beq.n	8006f20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006edc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2201      	movs	r2, #1
 8006eee:	409a      	lsls	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006efc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop

08006f4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f58:	4b67      	ldr	r3, [pc, #412]	; (80070f8 <HAL_DMA_IRQHandler+0x1ac>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a67      	ldr	r2, [pc, #412]	; (80070fc <HAL_DMA_IRQHandler+0x1b0>)
 8006f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f62:	0a9b      	lsrs	r3, r3, #10
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a5f      	ldr	r2, [pc, #380]	; (8007100 <HAL_DMA_IRQHandler+0x1b4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a5d      	ldr	r2, [pc, #372]	; (8007104 <HAL_DMA_IRQHandler+0x1b8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a5c      	ldr	r2, [pc, #368]	; (8007108 <HAL_DMA_IRQHandler+0x1bc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5a      	ldr	r2, [pc, #360]	; (800710c <HAL_DMA_IRQHandler+0x1c0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a59      	ldr	r2, [pc, #356]	; (8007110 <HAL_DMA_IRQHandler+0x1c4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a57      	ldr	r2, [pc, #348]	; (8007114 <HAL_DMA_IRQHandler+0x1c8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a56      	ldr	r2, [pc, #344]	; (8007118 <HAL_DMA_IRQHandler+0x1cc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a54      	ldr	r2, [pc, #336]	; (800711c <HAL_DMA_IRQHandler+0x1d0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a53      	ldr	r2, [pc, #332]	; (8007120 <HAL_DMA_IRQHandler+0x1d4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a51      	ldr	r2, [pc, #324]	; (8007124 <HAL_DMA_IRQHandler+0x1d8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a50      	ldr	r2, [pc, #320]	; (8007128 <HAL_DMA_IRQHandler+0x1dc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a4e      	ldr	r2, [pc, #312]	; (800712c <HAL_DMA_IRQHandler+0x1e0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4d      	ldr	r2, [pc, #308]	; (8007130 <HAL_DMA_IRQHandler+0x1e4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a4b      	ldr	r2, [pc, #300]	; (8007134 <HAL_DMA_IRQHandler+0x1e8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a4a      	ldr	r2, [pc, #296]	; (8007138 <HAL_DMA_IRQHandler+0x1ec>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMA_IRQHandler+0xd2>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a48      	ldr	r2, [pc, #288]	; (800713c <HAL_DMA_IRQHandler+0x1f0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d101      	bne.n	8007022 <HAL_DMA_IRQHandler+0xd6>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <HAL_DMA_IRQHandler+0xd8>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 842b 	beq.w	8007880 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	2208      	movs	r2, #8
 8007034:	409a      	lsls	r2, r3
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	4013      	ands	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80a2 	beq.w	8007184 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2e      	ldr	r2, [pc, #184]	; (8007100 <HAL_DMA_IRQHandler+0x1b4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d04a      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <HAL_DMA_IRQHandler+0x1b8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d045      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2b      	ldr	r2, [pc, #172]	; (8007108 <HAL_DMA_IRQHandler+0x1bc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d040      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2a      	ldr	r2, [pc, #168]	; (800710c <HAL_DMA_IRQHandler+0x1c0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d03b      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a28      	ldr	r2, [pc, #160]	; (8007110 <HAL_DMA_IRQHandler+0x1c4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d036      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a27      	ldr	r2, [pc, #156]	; (8007114 <HAL_DMA_IRQHandler+0x1c8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d031      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a25      	ldr	r2, [pc, #148]	; (8007118 <HAL_DMA_IRQHandler+0x1cc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d02c      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a24      	ldr	r2, [pc, #144]	; (800711c <HAL_DMA_IRQHandler+0x1d0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d027      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a22      	ldr	r2, [pc, #136]	; (8007120 <HAL_DMA_IRQHandler+0x1d4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a21      	ldr	r2, [pc, #132]	; (8007124 <HAL_DMA_IRQHandler+0x1d8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d01d      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <HAL_DMA_IRQHandler+0x1dc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d018      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1e      	ldr	r2, [pc, #120]	; (800712c <HAL_DMA_IRQHandler+0x1e0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_DMA_IRQHandler+0x1e4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1b      	ldr	r2, [pc, #108]	; (8007134 <HAL_DMA_IRQHandler+0x1e8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a19      	ldr	r2, [pc, #100]	; (8007138 <HAL_DMA_IRQHandler+0x1ec>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x194>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a18      	ldr	r2, [pc, #96]	; (800713c <HAL_DMA_IRQHandler+0x1f0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d12f      	bne.n	8007140 <HAL_DMA_IRQHandler+0x1f4>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bf14      	ite	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	2300      	moveq	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	e02e      	b.n	8007154 <HAL_DMA_IRQHandler+0x208>
 80070f6:	bf00      	nop
 80070f8:	24000088 	.word	0x24000088
 80070fc:	1b4e81b5 	.word	0x1b4e81b5
 8007100:	40020010 	.word	0x40020010
 8007104:	40020028 	.word	0x40020028
 8007108:	40020040 	.word	0x40020040
 800710c:	40020058 	.word	0x40020058
 8007110:	40020070 	.word	0x40020070
 8007114:	40020088 	.word	0x40020088
 8007118:	400200a0 	.word	0x400200a0
 800711c:	400200b8 	.word	0x400200b8
 8007120:	40020410 	.word	0x40020410
 8007124:	40020428 	.word	0x40020428
 8007128:	40020440 	.word	0x40020440
 800712c:	40020458 	.word	0x40020458
 8007130:	40020470 	.word	0x40020470
 8007134:	40020488 	.word	0x40020488
 8007138:	400204a0 	.word	0x400204a0
 800713c:	400204b8 	.word	0x400204b8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	bf14      	ite	ne
 800714e:	2301      	movne	r3, #1
 8007150:	2300      	moveq	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2208      	movs	r2, #8
 8007172:	409a      	lsls	r2, r3
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717c:	f043 0201 	orr.w	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d06e      	beq.n	8007278 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a69      	ldr	r2, [pc, #420]	; (8007344 <HAL_DMA_IRQHandler+0x3f8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d04a      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a67      	ldr	r2, [pc, #412]	; (8007348 <HAL_DMA_IRQHandler+0x3fc>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d045      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a66      	ldr	r2, [pc, #408]	; (800734c <HAL_DMA_IRQHandler+0x400>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d040      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a64      	ldr	r2, [pc, #400]	; (8007350 <HAL_DMA_IRQHandler+0x404>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d03b      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a63      	ldr	r2, [pc, #396]	; (8007354 <HAL_DMA_IRQHandler+0x408>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d036      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a61      	ldr	r2, [pc, #388]	; (8007358 <HAL_DMA_IRQHandler+0x40c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d031      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a60      	ldr	r2, [pc, #384]	; (800735c <HAL_DMA_IRQHandler+0x410>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d02c      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a5e      	ldr	r2, [pc, #376]	; (8007360 <HAL_DMA_IRQHandler+0x414>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d027      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a5d      	ldr	r2, [pc, #372]	; (8007364 <HAL_DMA_IRQHandler+0x418>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a5b      	ldr	r2, [pc, #364]	; (8007368 <HAL_DMA_IRQHandler+0x41c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d01d      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a5a      	ldr	r2, [pc, #360]	; (800736c <HAL_DMA_IRQHandler+0x420>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a58      	ldr	r2, [pc, #352]	; (8007370 <HAL_DMA_IRQHandler+0x424>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a57      	ldr	r2, [pc, #348]	; (8007374 <HAL_DMA_IRQHandler+0x428>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a55      	ldr	r2, [pc, #340]	; (8007378 <HAL_DMA_IRQHandler+0x42c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a54      	ldr	r2, [pc, #336]	; (800737c <HAL_DMA_IRQHandler+0x430>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_DMA_IRQHandler+0x2ee>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a52      	ldr	r2, [pc, #328]	; (8007380 <HAL_DMA_IRQHandler+0x434>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10a      	bne.n	8007250 <HAL_DMA_IRQHandler+0x304>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf14      	ite	ne
 8007248:	2301      	movne	r3, #1
 800724a:	2300      	moveq	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	e003      	b.n	8007258 <HAL_DMA_IRQHandler+0x30c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2300      	movs	r3, #0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00d      	beq.n	8007278 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	2201      	movs	r2, #1
 8007266:	409a      	lsls	r2, r3
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007270:	f043 0202 	orr.w	r2, r3, #2
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2204      	movs	r2, #4
 8007282:	409a      	lsls	r2, r3
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 808f 	beq.w	80073ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2c      	ldr	r2, [pc, #176]	; (8007344 <HAL_DMA_IRQHandler+0x3f8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d04a      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2a      	ldr	r2, [pc, #168]	; (8007348 <HAL_DMA_IRQHandler+0x3fc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d045      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a29      	ldr	r2, [pc, #164]	; (800734c <HAL_DMA_IRQHandler+0x400>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d040      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a27      	ldr	r2, [pc, #156]	; (8007350 <HAL_DMA_IRQHandler+0x404>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d03b      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a26      	ldr	r2, [pc, #152]	; (8007354 <HAL_DMA_IRQHandler+0x408>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d036      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a24      	ldr	r2, [pc, #144]	; (8007358 <HAL_DMA_IRQHandler+0x40c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d031      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a23      	ldr	r2, [pc, #140]	; (800735c <HAL_DMA_IRQHandler+0x410>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d02c      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a21      	ldr	r2, [pc, #132]	; (8007360 <HAL_DMA_IRQHandler+0x414>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d027      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a20      	ldr	r2, [pc, #128]	; (8007364 <HAL_DMA_IRQHandler+0x418>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d022      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <HAL_DMA_IRQHandler+0x41c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01d      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <HAL_DMA_IRQHandler+0x420>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d018      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <HAL_DMA_IRQHandler+0x424>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <HAL_DMA_IRQHandler+0x428>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00e      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a18      	ldr	r2, [pc, #96]	; (8007378 <HAL_DMA_IRQHandler+0x42c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a17      	ldr	r2, [pc, #92]	; (800737c <HAL_DMA_IRQHandler+0x430>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_DMA_IRQHandler+0x3e2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <HAL_DMA_IRQHandler+0x434>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d12a      	bne.n	8007384 <HAL_DMA_IRQHandler+0x438>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	e023      	b.n	800738c <HAL_DMA_IRQHandler+0x440>
 8007344:	40020010 	.word	0x40020010
 8007348:	40020028 	.word	0x40020028
 800734c:	40020040 	.word	0x40020040
 8007350:	40020058 	.word	0x40020058
 8007354:	40020070 	.word	0x40020070
 8007358:	40020088 	.word	0x40020088
 800735c:	400200a0 	.word	0x400200a0
 8007360:	400200b8 	.word	0x400200b8
 8007364:	40020410 	.word	0x40020410
 8007368:	40020428 	.word	0x40020428
 800736c:	40020440 	.word	0x40020440
 8007370:	40020458 	.word	0x40020458
 8007374:	40020470 	.word	0x40020470
 8007378:	40020488 	.word	0x40020488
 800737c:	400204a0 	.word	0x400204a0
 8007380:	400204b8 	.word	0x400204b8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2300      	movs	r3, #0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2204      	movs	r2, #4
 800739a:	409a      	lsls	r2, r3
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	f043 0204 	orr.w	r2, r3, #4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2210      	movs	r2, #16
 80073b6:	409a      	lsls	r2, r3
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80a6 	beq.w	800750e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a85      	ldr	r2, [pc, #532]	; (80075dc <HAL_DMA_IRQHandler+0x690>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d04a      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a83      	ldr	r2, [pc, #524]	; (80075e0 <HAL_DMA_IRQHandler+0x694>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d045      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a82      	ldr	r2, [pc, #520]	; (80075e4 <HAL_DMA_IRQHandler+0x698>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d040      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a80      	ldr	r2, [pc, #512]	; (80075e8 <HAL_DMA_IRQHandler+0x69c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d03b      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a7f      	ldr	r2, [pc, #508]	; (80075ec <HAL_DMA_IRQHandler+0x6a0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d036      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a7d      	ldr	r2, [pc, #500]	; (80075f0 <HAL_DMA_IRQHandler+0x6a4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d031      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a7c      	ldr	r2, [pc, #496]	; (80075f4 <HAL_DMA_IRQHandler+0x6a8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d02c      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a7a      	ldr	r2, [pc, #488]	; (80075f8 <HAL_DMA_IRQHandler+0x6ac>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d027      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a79      	ldr	r2, [pc, #484]	; (80075fc <HAL_DMA_IRQHandler+0x6b0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a77      	ldr	r2, [pc, #476]	; (8007600 <HAL_DMA_IRQHandler+0x6b4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01d      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a76      	ldr	r2, [pc, #472]	; (8007604 <HAL_DMA_IRQHandler+0x6b8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d018      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a74      	ldr	r2, [pc, #464]	; (8007608 <HAL_DMA_IRQHandler+0x6bc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a73      	ldr	r2, [pc, #460]	; (800760c <HAL_DMA_IRQHandler+0x6c0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a71      	ldr	r2, [pc, #452]	; (8007610 <HAL_DMA_IRQHandler+0x6c4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a70      	ldr	r2, [pc, #448]	; (8007614 <HAL_DMA_IRQHandler+0x6c8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <HAL_DMA_IRQHandler+0x516>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a6e      	ldr	r2, [pc, #440]	; (8007618 <HAL_DMA_IRQHandler+0x6cc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d10a      	bne.n	8007478 <HAL_DMA_IRQHandler+0x52c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	bf14      	ite	ne
 8007470:	2301      	movne	r3, #1
 8007472:	2300      	moveq	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	e009      	b.n	800748c <HAL_DMA_IRQHandler+0x540>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d03e      	beq.n	800750e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2210      	movs	r2, #16
 800749a:	409a      	lsls	r2, r3
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d018      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d108      	bne.n	80074ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d024      	beq.n	800750e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
 80074cc:	e01f      	b.n	800750e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01b      	beq.n	800750e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	e016      	b.n	800750e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d107      	bne.n	80074fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0208 	bic.w	r2, r2, #8
 80074fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	2220      	movs	r2, #32
 8007518:	409a      	lsls	r2, r3
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	4013      	ands	r3, r2
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8110 	beq.w	8007744 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <HAL_DMA_IRQHandler+0x690>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d04a      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2b      	ldr	r2, [pc, #172]	; (80075e0 <HAL_DMA_IRQHandler+0x694>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d045      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a29      	ldr	r2, [pc, #164]	; (80075e4 <HAL_DMA_IRQHandler+0x698>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d040      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a28      	ldr	r2, [pc, #160]	; (80075e8 <HAL_DMA_IRQHandler+0x69c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d03b      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a26      	ldr	r2, [pc, #152]	; (80075ec <HAL_DMA_IRQHandler+0x6a0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d036      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a25      	ldr	r2, [pc, #148]	; (80075f0 <HAL_DMA_IRQHandler+0x6a4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d031      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a23      	ldr	r2, [pc, #140]	; (80075f4 <HAL_DMA_IRQHandler+0x6a8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d02c      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a22      	ldr	r2, [pc, #136]	; (80075f8 <HAL_DMA_IRQHandler+0x6ac>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d027      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a20      	ldr	r2, [pc, #128]	; (80075fc <HAL_DMA_IRQHandler+0x6b0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d022      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <HAL_DMA_IRQHandler+0x6b4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d01d      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <HAL_DMA_IRQHandler+0x6b8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d018      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <HAL_DMA_IRQHandler+0x6bc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d013      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1a      	ldr	r2, [pc, #104]	; (800760c <HAL_DMA_IRQHandler+0x6c0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00e      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a19      	ldr	r2, [pc, #100]	; (8007610 <HAL_DMA_IRQHandler+0x6c4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d009      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a17      	ldr	r2, [pc, #92]	; (8007614 <HAL_DMA_IRQHandler+0x6c8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d004      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x678>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a16      	ldr	r2, [pc, #88]	; (8007618 <HAL_DMA_IRQHandler+0x6cc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d12b      	bne.n	800761c <HAL_DMA_IRQHandler+0x6d0>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	e02a      	b.n	8007630 <HAL_DMA_IRQHandler+0x6e4>
 80075da:	bf00      	nop
 80075dc:	40020010 	.word	0x40020010
 80075e0:	40020028 	.word	0x40020028
 80075e4:	40020040 	.word	0x40020040
 80075e8:	40020058 	.word	0x40020058
 80075ec:	40020070 	.word	0x40020070
 80075f0:	40020088 	.word	0x40020088
 80075f4:	400200a0 	.word	0x400200a0
 80075f8:	400200b8 	.word	0x400200b8
 80075fc:	40020410 	.word	0x40020410
 8007600:	40020428 	.word	0x40020428
 8007604:	40020440 	.word	0x40020440
 8007608:	40020458 	.word	0x40020458
 800760c:	40020470 	.word	0x40020470
 8007610:	40020488 	.word	0x40020488
 8007614:	400204a0 	.word	0x400204a0
 8007618:	400204b8 	.word	0x400204b8
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf14      	ite	ne
 800762a:	2301      	movne	r3, #1
 800762c:	2300      	moveq	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8087 	beq.w	8007744 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763a:	f003 031f 	and.w	r3, r3, #31
 800763e:	2220      	movs	r2, #32
 8007640:	409a      	lsls	r2, r3
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b04      	cmp	r3, #4
 8007650:	d139      	bne.n	80076c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0216 	bic.w	r2, r2, #22
 8007660:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007670:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <HAL_DMA_IRQHandler+0x736>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0208 	bic.w	r2, r2, #8
 8007690:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	223f      	movs	r2, #63	; 0x3f
 800769c:	409a      	lsls	r2, r3
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 834a 	beq.w	8007d50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
          }
          return;
 80076c4:	e344      	b.n	8007d50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d018      	beq.n	8007706 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d108      	bne.n	80076f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d02c      	beq.n	8007744 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	e027      	b.n	8007744 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d023      	beq.n	8007744 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
 8007704:	e01e      	b.n	8007744 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0210 	bic.w	r2, r2, #16
 8007722:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8306 	beq.w	8007d5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 8088 	beq.w	800786c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2204      	movs	r2, #4
 8007760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a7a      	ldr	r2, [pc, #488]	; (8007954 <HAL_DMA_IRQHandler+0xa08>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d04a      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a79      	ldr	r2, [pc, #484]	; (8007958 <HAL_DMA_IRQHandler+0xa0c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d045      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a77      	ldr	r2, [pc, #476]	; (800795c <HAL_DMA_IRQHandler+0xa10>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d040      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a76      	ldr	r2, [pc, #472]	; (8007960 <HAL_DMA_IRQHandler+0xa14>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d03b      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a74      	ldr	r2, [pc, #464]	; (8007964 <HAL_DMA_IRQHandler+0xa18>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d036      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a73      	ldr	r2, [pc, #460]	; (8007968 <HAL_DMA_IRQHandler+0xa1c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d031      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a71      	ldr	r2, [pc, #452]	; (800796c <HAL_DMA_IRQHandler+0xa20>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d02c      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a70      	ldr	r2, [pc, #448]	; (8007970 <HAL_DMA_IRQHandler+0xa24>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d027      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a6e      	ldr	r2, [pc, #440]	; (8007974 <HAL_DMA_IRQHandler+0xa28>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d022      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a6d      	ldr	r2, [pc, #436]	; (8007978 <HAL_DMA_IRQHandler+0xa2c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d01d      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a6b      	ldr	r2, [pc, #428]	; (800797c <HAL_DMA_IRQHandler+0xa30>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d018      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6a      	ldr	r2, [pc, #424]	; (8007980 <HAL_DMA_IRQHandler+0xa34>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a68      	ldr	r2, [pc, #416]	; (8007984 <HAL_DMA_IRQHandler+0xa38>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00e      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a67      	ldr	r2, [pc, #412]	; (8007988 <HAL_DMA_IRQHandler+0xa3c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d009      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a65      	ldr	r2, [pc, #404]	; (800798c <HAL_DMA_IRQHandler+0xa40>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_DMA_IRQHandler+0x8b8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a64      	ldr	r2, [pc, #400]	; (8007990 <HAL_DMA_IRQHandler+0xa44>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d108      	bne.n	8007816 <HAL_DMA_IRQHandler+0x8ca>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0201 	bic.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e007      	b.n	8007826 <HAL_DMA_IRQHandler+0x8da>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782e:	429a      	cmp	r2, r3
 8007830:	d307      	bcc.n	8007842 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f2      	bne.n	8007826 <HAL_DMA_IRQHandler+0x8da>
 8007840:	e000      	b.n	8007844 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007842:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2203      	movs	r2, #3
 8007856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800785a:	e003      	b.n	8007864 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8272 	beq.w	8007d5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
 800787e:	e26c      	b.n	8007d5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a43      	ldr	r2, [pc, #268]	; (8007994 <HAL_DMA_IRQHandler+0xa48>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d022      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a42      	ldr	r2, [pc, #264]	; (8007998 <HAL_DMA_IRQHandler+0xa4c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d01d      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a40      	ldr	r2, [pc, #256]	; (800799c <HAL_DMA_IRQHandler+0xa50>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d018      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a3f      	ldr	r2, [pc, #252]	; (80079a0 <HAL_DMA_IRQHandler+0xa54>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a3d      	ldr	r2, [pc, #244]	; (80079a4 <HAL_DMA_IRQHandler+0xa58>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00e      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a3c      	ldr	r2, [pc, #240]	; (80079a8 <HAL_DMA_IRQHandler+0xa5c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a3a      	ldr	r2, [pc, #232]	; (80079ac <HAL_DMA_IRQHandler+0xa60>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <HAL_DMA_IRQHandler+0x984>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a39      	ldr	r2, [pc, #228]	; (80079b0 <HAL_DMA_IRQHandler+0xa64>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d101      	bne.n	80078d4 <HAL_DMA_IRQHandler+0x988>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <HAL_DMA_IRQHandler+0x98a>
 80078d4:	2300      	movs	r3, #0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 823f 	beq.w	8007d5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	2204      	movs	r2, #4
 80078ee:	409a      	lsls	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 80cd 	beq.w	8007a94 <HAL_DMA_IRQHandler+0xb48>
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80c7 	beq.w	8007a94 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	2204      	movs	r2, #4
 8007910:	409a      	lsls	r2, r3
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d049      	beq.n	80079b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8210 	beq.w	8007d54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800793c:	e20a      	b.n	8007d54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8206 	beq.w	8007d54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007950:	e200      	b.n	8007d54 <HAL_DMA_IRQHandler+0xe08>
 8007952:	bf00      	nop
 8007954:	40020010 	.word	0x40020010
 8007958:	40020028 	.word	0x40020028
 800795c:	40020040 	.word	0x40020040
 8007960:	40020058 	.word	0x40020058
 8007964:	40020070 	.word	0x40020070
 8007968:	40020088 	.word	0x40020088
 800796c:	400200a0 	.word	0x400200a0
 8007970:	400200b8 	.word	0x400200b8
 8007974:	40020410 	.word	0x40020410
 8007978:	40020428 	.word	0x40020428
 800797c:	40020440 	.word	0x40020440
 8007980:	40020458 	.word	0x40020458
 8007984:	40020470 	.word	0x40020470
 8007988:	40020488 	.word	0x40020488
 800798c:	400204a0 	.word	0x400204a0
 8007990:	400204b8 	.word	0x400204b8
 8007994:	58025408 	.word	0x58025408
 8007998:	5802541c 	.word	0x5802541c
 800799c:	58025430 	.word	0x58025430
 80079a0:	58025444 	.word	0x58025444
 80079a4:	58025458 	.word	0x58025458
 80079a8:	5802546c 	.word	0x5802546c
 80079ac:	58025480 	.word	0x58025480
 80079b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d160      	bne.n	8007a80 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a7f      	ldr	r2, [pc, #508]	; (8007bc0 <HAL_DMA_IRQHandler+0xc74>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d04a      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a7d      	ldr	r2, [pc, #500]	; (8007bc4 <HAL_DMA_IRQHandler+0xc78>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d045      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a7c      	ldr	r2, [pc, #496]	; (8007bc8 <HAL_DMA_IRQHandler+0xc7c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d040      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a7a      	ldr	r2, [pc, #488]	; (8007bcc <HAL_DMA_IRQHandler+0xc80>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d03b      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a79      	ldr	r2, [pc, #484]	; (8007bd0 <HAL_DMA_IRQHandler+0xc84>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d036      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a77      	ldr	r2, [pc, #476]	; (8007bd4 <HAL_DMA_IRQHandler+0xc88>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d031      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a76      	ldr	r2, [pc, #472]	; (8007bd8 <HAL_DMA_IRQHandler+0xc8c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d02c      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a74      	ldr	r2, [pc, #464]	; (8007bdc <HAL_DMA_IRQHandler+0xc90>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d027      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a73      	ldr	r2, [pc, #460]	; (8007be0 <HAL_DMA_IRQHandler+0xc94>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d022      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a71      	ldr	r2, [pc, #452]	; (8007be4 <HAL_DMA_IRQHandler+0xc98>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d01d      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a70      	ldr	r2, [pc, #448]	; (8007be8 <HAL_DMA_IRQHandler+0xc9c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d018      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a6e      	ldr	r2, [pc, #440]	; (8007bec <HAL_DMA_IRQHandler+0xca0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d013      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a6d      	ldr	r2, [pc, #436]	; (8007bf0 <HAL_DMA_IRQHandler+0xca4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00e      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a6b      	ldr	r2, [pc, #428]	; (8007bf4 <HAL_DMA_IRQHandler+0xca8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d009      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a6a      	ldr	r2, [pc, #424]	; (8007bf8 <HAL_DMA_IRQHandler+0xcac>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d004      	beq.n	8007a5e <HAL_DMA_IRQHandler+0xb12>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a68      	ldr	r2, [pc, #416]	; (8007bfc <HAL_DMA_IRQHandler+0xcb0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d108      	bne.n	8007a70 <HAL_DMA_IRQHandler+0xb24>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0208 	bic.w	r2, r2, #8
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e007      	b.n	8007a80 <HAL_DMA_IRQHandler+0xb34>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0204 	bic.w	r2, r2, #4
 8007a7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8165 	beq.w	8007d54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a92:	e15f      	b.n	8007d54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 80c5 	beq.w	8007c34 <HAL_DMA_IRQHandler+0xce8>
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80bf 	beq.w	8007c34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2202      	movs	r2, #2
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d018      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 813a 	beq.w	8007d58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aec:	e134      	b.n	8007d58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8130 	beq.w	8007d58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b00:	e12a      	b.n	8007d58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f040 8089 	bne.w	8007c20 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2b      	ldr	r2, [pc, #172]	; (8007bc0 <HAL_DMA_IRQHandler+0xc74>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d04a      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a29      	ldr	r2, [pc, #164]	; (8007bc4 <HAL_DMA_IRQHandler+0xc78>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d045      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a28      	ldr	r2, [pc, #160]	; (8007bc8 <HAL_DMA_IRQHandler+0xc7c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d040      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <HAL_DMA_IRQHandler+0xc80>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d03b      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a25      	ldr	r2, [pc, #148]	; (8007bd0 <HAL_DMA_IRQHandler+0xc84>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d036      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <HAL_DMA_IRQHandler+0xc88>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d031      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a22      	ldr	r2, [pc, #136]	; (8007bd8 <HAL_DMA_IRQHandler+0xc8c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d02c      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <HAL_DMA_IRQHandler+0xc90>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d027      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <HAL_DMA_IRQHandler+0xc94>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d022      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <HAL_DMA_IRQHandler+0xc98>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d01d      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <HAL_DMA_IRQHandler+0xc9c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d018      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <HAL_DMA_IRQHandler+0xca0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <HAL_DMA_IRQHandler+0xca4>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <HAL_DMA_IRQHandler+0xca8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <HAL_DMA_IRQHandler+0xcac>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_DMA_IRQHandler+0xc62>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <HAL_DMA_IRQHandler+0xcb0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d128      	bne.n	8007c00 <HAL_DMA_IRQHandler+0xcb4>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0214 	bic.w	r2, r2, #20
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e027      	b.n	8007c10 <HAL_DMA_IRQHandler+0xcc4>
 8007bc0:	40020010 	.word	0x40020010
 8007bc4:	40020028 	.word	0x40020028
 8007bc8:	40020040 	.word	0x40020040
 8007bcc:	40020058 	.word	0x40020058
 8007bd0:	40020070 	.word	0x40020070
 8007bd4:	40020088 	.word	0x40020088
 8007bd8:	400200a0 	.word	0x400200a0
 8007bdc:	400200b8 	.word	0x400200b8
 8007be0:	40020410 	.word	0x40020410
 8007be4:	40020428 	.word	0x40020428
 8007be8:	40020440 	.word	0x40020440
 8007bec:	40020458 	.word	0x40020458
 8007bf0:	40020470 	.word	0x40020470
 8007bf4:	40020488 	.word	0x40020488
 8007bf8:	400204a0 	.word	0x400204a0
 8007bfc:	400204b8 	.word	0x400204b8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 020a 	bic.w	r2, r2, #10
 8007c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8097 	beq.w	8007d58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c32:	e091      	b.n	8007d58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	409a      	lsls	r2, r3
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8088 	beq.w	8007d5a <HAL_DMA_IRQHandler+0xe0e>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8082 	beq.w	8007d5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a41      	ldr	r2, [pc, #260]	; (8007d60 <HAL_DMA_IRQHandler+0xe14>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d04a      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a3f      	ldr	r2, [pc, #252]	; (8007d64 <HAL_DMA_IRQHandler+0xe18>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d045      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a3e      	ldr	r2, [pc, #248]	; (8007d68 <HAL_DMA_IRQHandler+0xe1c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d040      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3c      	ldr	r2, [pc, #240]	; (8007d6c <HAL_DMA_IRQHandler+0xe20>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d03b      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a3b      	ldr	r2, [pc, #236]	; (8007d70 <HAL_DMA_IRQHandler+0xe24>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d036      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a39      	ldr	r2, [pc, #228]	; (8007d74 <HAL_DMA_IRQHandler+0xe28>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d031      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a38      	ldr	r2, [pc, #224]	; (8007d78 <HAL_DMA_IRQHandler+0xe2c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d02c      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a36      	ldr	r2, [pc, #216]	; (8007d7c <HAL_DMA_IRQHandler+0xe30>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d027      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a35      	ldr	r2, [pc, #212]	; (8007d80 <HAL_DMA_IRQHandler+0xe34>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a33      	ldr	r2, [pc, #204]	; (8007d84 <HAL_DMA_IRQHandler+0xe38>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d01d      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a32      	ldr	r2, [pc, #200]	; (8007d88 <HAL_DMA_IRQHandler+0xe3c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d018      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a30      	ldr	r2, [pc, #192]	; (8007d8c <HAL_DMA_IRQHandler+0xe40>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a2f      	ldr	r2, [pc, #188]	; (8007d90 <HAL_DMA_IRQHandler+0xe44>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <HAL_DMA_IRQHandler+0xe48>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d009      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2c      	ldr	r2, [pc, #176]	; (8007d98 <HAL_DMA_IRQHandler+0xe4c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d004      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0xdaa>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a2a      	ldr	r2, [pc, #168]	; (8007d9c <HAL_DMA_IRQHandler+0xe50>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d108      	bne.n	8007d08 <HAL_DMA_IRQHandler+0xdbc>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 021c 	bic.w	r2, r2, #28
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e007      	b.n	8007d18 <HAL_DMA_IRQHandler+0xdcc>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 020e 	bic.w	r2, r2, #14
 8007d16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2201      	movs	r2, #1
 8007d22:	409a      	lsls	r2, r3
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
 8007d4e:	e004      	b.n	8007d5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d50:	bf00      	nop
 8007d52:	e002      	b.n	8007d5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d54:	bf00      	nop
 8007d56:	e000      	b.n	8007d5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d5a:	3728      	adds	r7, #40	; 0x28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40020010 	.word	0x40020010
 8007d64:	40020028 	.word	0x40020028
 8007d68:	40020040 	.word	0x40020040
 8007d6c:	40020058 	.word	0x40020058
 8007d70:	40020070 	.word	0x40020070
 8007d74:	40020088 	.word	0x40020088
 8007d78:	400200a0 	.word	0x400200a0
 8007d7c:	400200b8 	.word	0x400200b8
 8007d80:	40020410 	.word	0x40020410
 8007d84:	40020428 	.word	0x40020428
 8007d88:	40020440 	.word	0x40020440
 8007d8c:	40020458 	.word	0x40020458
 8007d90:	40020470 	.word	0x40020470
 8007d94:	40020488 	.word	0x40020488
 8007d98:	400204a0 	.word	0x400204a0
 8007d9c:	400204b8 	.word	0x400204b8

08007da0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a7f      	ldr	r2, [pc, #508]	; (8007fbc <DMA_SetConfig+0x21c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d072      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a7d      	ldr	r2, [pc, #500]	; (8007fc0 <DMA_SetConfig+0x220>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d06d      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a7c      	ldr	r2, [pc, #496]	; (8007fc4 <DMA_SetConfig+0x224>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d068      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a7a      	ldr	r2, [pc, #488]	; (8007fc8 <DMA_SetConfig+0x228>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d063      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a79      	ldr	r2, [pc, #484]	; (8007fcc <DMA_SetConfig+0x22c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d05e      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a77      	ldr	r2, [pc, #476]	; (8007fd0 <DMA_SetConfig+0x230>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d059      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a76      	ldr	r2, [pc, #472]	; (8007fd4 <DMA_SetConfig+0x234>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d054      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a74      	ldr	r2, [pc, #464]	; (8007fd8 <DMA_SetConfig+0x238>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d04f      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a73      	ldr	r2, [pc, #460]	; (8007fdc <DMA_SetConfig+0x23c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d04a      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a71      	ldr	r2, [pc, #452]	; (8007fe0 <DMA_SetConfig+0x240>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d045      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a70      	ldr	r2, [pc, #448]	; (8007fe4 <DMA_SetConfig+0x244>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d040      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a6e      	ldr	r2, [pc, #440]	; (8007fe8 <DMA_SetConfig+0x248>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d03b      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a6d      	ldr	r2, [pc, #436]	; (8007fec <DMA_SetConfig+0x24c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d036      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a6b      	ldr	r2, [pc, #428]	; (8007ff0 <DMA_SetConfig+0x250>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d031      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a6a      	ldr	r2, [pc, #424]	; (8007ff4 <DMA_SetConfig+0x254>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d02c      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a68      	ldr	r2, [pc, #416]	; (8007ff8 <DMA_SetConfig+0x258>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d027      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a67      	ldr	r2, [pc, #412]	; (8007ffc <DMA_SetConfig+0x25c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a65      	ldr	r2, [pc, #404]	; (8008000 <DMA_SetConfig+0x260>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01d      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a64      	ldr	r2, [pc, #400]	; (8008004 <DMA_SetConfig+0x264>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a62      	ldr	r2, [pc, #392]	; (8008008 <DMA_SetConfig+0x268>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a61      	ldr	r2, [pc, #388]	; (800800c <DMA_SetConfig+0x26c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a5f      	ldr	r2, [pc, #380]	; (8008010 <DMA_SetConfig+0x270>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a5e      	ldr	r2, [pc, #376]	; (8008014 <DMA_SetConfig+0x274>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <DMA_SetConfig+0x10a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a5c      	ldr	r2, [pc, #368]	; (8008018 <DMA_SetConfig+0x278>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d101      	bne.n	8007eae <DMA_SetConfig+0x10e>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <DMA_SetConfig+0x110>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00d      	beq.n	8007ed0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ebc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ece:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a39      	ldr	r2, [pc, #228]	; (8007fbc <DMA_SetConfig+0x21c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d04a      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a38      	ldr	r2, [pc, #224]	; (8007fc0 <DMA_SetConfig+0x220>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d045      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a36      	ldr	r2, [pc, #216]	; (8007fc4 <DMA_SetConfig+0x224>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d040      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a35      	ldr	r2, [pc, #212]	; (8007fc8 <DMA_SetConfig+0x228>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d03b      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a33      	ldr	r2, [pc, #204]	; (8007fcc <DMA_SetConfig+0x22c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d036      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a32      	ldr	r2, [pc, #200]	; (8007fd0 <DMA_SetConfig+0x230>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d031      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a30      	ldr	r2, [pc, #192]	; (8007fd4 <DMA_SetConfig+0x234>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d02c      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <DMA_SetConfig+0x238>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d027      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2d      	ldr	r2, [pc, #180]	; (8007fdc <DMA_SetConfig+0x23c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d022      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <DMA_SetConfig+0x240>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d01d      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2a      	ldr	r2, [pc, #168]	; (8007fe4 <DMA_SetConfig+0x244>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d018      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <DMA_SetConfig+0x248>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d013      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a27      	ldr	r2, [pc, #156]	; (8007fec <DMA_SetConfig+0x24c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00e      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <DMA_SetConfig+0x250>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d009      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <DMA_SetConfig+0x254>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d004      	beq.n	8007f70 <DMA_SetConfig+0x1d0>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <DMA_SetConfig+0x258>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d101      	bne.n	8007f74 <DMA_SetConfig+0x1d4>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <DMA_SetConfig+0x1d6>
 8007f74:	2300      	movs	r3, #0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d059      	beq.n	800802e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	223f      	movs	r2, #63	; 0x3f
 8007f84:	409a      	lsls	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d138      	bne.n	800801c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007fba:	e086      	b.n	80080ca <DMA_SetConfig+0x32a>
 8007fbc:	40020010 	.word	0x40020010
 8007fc0:	40020028 	.word	0x40020028
 8007fc4:	40020040 	.word	0x40020040
 8007fc8:	40020058 	.word	0x40020058
 8007fcc:	40020070 	.word	0x40020070
 8007fd0:	40020088 	.word	0x40020088
 8007fd4:	400200a0 	.word	0x400200a0
 8007fd8:	400200b8 	.word	0x400200b8
 8007fdc:	40020410 	.word	0x40020410
 8007fe0:	40020428 	.word	0x40020428
 8007fe4:	40020440 	.word	0x40020440
 8007fe8:	40020458 	.word	0x40020458
 8007fec:	40020470 	.word	0x40020470
 8007ff0:	40020488 	.word	0x40020488
 8007ff4:	400204a0 	.word	0x400204a0
 8007ff8:	400204b8 	.word	0x400204b8
 8007ffc:	58025408 	.word	0x58025408
 8008000:	5802541c 	.word	0x5802541c
 8008004:	58025430 	.word	0x58025430
 8008008:	58025444 	.word	0x58025444
 800800c:	58025458 	.word	0x58025458
 8008010:	5802546c 	.word	0x5802546c
 8008014:	58025480 	.word	0x58025480
 8008018:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]
}
 800802c:	e04d      	b.n	80080ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a29      	ldr	r2, [pc, #164]	; (80080d8 <DMA_SetConfig+0x338>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d022      	beq.n	800807e <DMA_SetConfig+0x2de>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a27      	ldr	r2, [pc, #156]	; (80080dc <DMA_SetConfig+0x33c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01d      	beq.n	800807e <DMA_SetConfig+0x2de>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <DMA_SetConfig+0x340>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d018      	beq.n	800807e <DMA_SetConfig+0x2de>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a24      	ldr	r2, [pc, #144]	; (80080e4 <DMA_SetConfig+0x344>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <DMA_SetConfig+0x2de>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a23      	ldr	r2, [pc, #140]	; (80080e8 <DMA_SetConfig+0x348>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00e      	beq.n	800807e <DMA_SetConfig+0x2de>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a21      	ldr	r2, [pc, #132]	; (80080ec <DMA_SetConfig+0x34c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d009      	beq.n	800807e <DMA_SetConfig+0x2de>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a20      	ldr	r2, [pc, #128]	; (80080f0 <DMA_SetConfig+0x350>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <DMA_SetConfig+0x2de>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <DMA_SetConfig+0x354>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d101      	bne.n	8008082 <DMA_SetConfig+0x2e2>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <DMA_SetConfig+0x2e4>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d020      	beq.n	80080ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	2201      	movs	r2, #1
 8008092:	409a      	lsls	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d108      	bne.n	80080ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	60da      	str	r2, [r3, #12]
}
 80080b8:	e007      	b.n	80080ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	60da      	str	r2, [r3, #12]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	58025408 	.word	0x58025408
 80080dc:	5802541c 	.word	0x5802541c
 80080e0:	58025430 	.word	0x58025430
 80080e4:	58025444 	.word	0x58025444
 80080e8:	58025458 	.word	0x58025458
 80080ec:	5802546c 	.word	0x5802546c
 80080f0:	58025480 	.word	0x58025480
 80080f4:	58025494 	.word	0x58025494

080080f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a42      	ldr	r2, [pc, #264]	; (8008210 <DMA_CalcBaseAndBitshift+0x118>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d04a      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a41      	ldr	r2, [pc, #260]	; (8008214 <DMA_CalcBaseAndBitshift+0x11c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d045      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a3f      	ldr	r2, [pc, #252]	; (8008218 <DMA_CalcBaseAndBitshift+0x120>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d040      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a3e      	ldr	r2, [pc, #248]	; (800821c <DMA_CalcBaseAndBitshift+0x124>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d03b      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3c      	ldr	r2, [pc, #240]	; (8008220 <DMA_CalcBaseAndBitshift+0x128>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d036      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a3b      	ldr	r2, [pc, #236]	; (8008224 <DMA_CalcBaseAndBitshift+0x12c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d031      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a39      	ldr	r2, [pc, #228]	; (8008228 <DMA_CalcBaseAndBitshift+0x130>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d02c      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a38      	ldr	r2, [pc, #224]	; (800822c <DMA_CalcBaseAndBitshift+0x134>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d027      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a36      	ldr	r2, [pc, #216]	; (8008230 <DMA_CalcBaseAndBitshift+0x138>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d022      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a35      	ldr	r2, [pc, #212]	; (8008234 <DMA_CalcBaseAndBitshift+0x13c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d01d      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a33      	ldr	r2, [pc, #204]	; (8008238 <DMA_CalcBaseAndBitshift+0x140>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a32      	ldr	r2, [pc, #200]	; (800823c <DMA_CalcBaseAndBitshift+0x144>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a30      	ldr	r2, [pc, #192]	; (8008240 <DMA_CalcBaseAndBitshift+0x148>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <DMA_CalcBaseAndBitshift+0x14c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a2d      	ldr	r2, [pc, #180]	; (8008248 <DMA_CalcBaseAndBitshift+0x150>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <DMA_CalcBaseAndBitshift+0xa8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2c      	ldr	r2, [pc, #176]	; (800824c <DMA_CalcBaseAndBitshift+0x154>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d101      	bne.n	80081a4 <DMA_CalcBaseAndBitshift+0xac>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <DMA_CalcBaseAndBitshift+0xae>
 80081a4:	2300      	movs	r3, #0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d024      	beq.n	80081f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	3b10      	subs	r3, #16
 80081b2:	4a27      	ldr	r2, [pc, #156]	; (8008250 <DMA_CalcBaseAndBitshift+0x158>)
 80081b4:	fba2 2303 	umull	r2, r3, r2, r3
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	4a24      	ldr	r2, [pc, #144]	; (8008254 <DMA_CalcBaseAndBitshift+0x15c>)
 80081c4:	5cd3      	ldrb	r3, [r2, r3]
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d908      	bls.n	80081e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <DMA_CalcBaseAndBitshift+0x160>)
 80081da:	4013      	ands	r3, r2
 80081dc:	1d1a      	adds	r2, r3, #4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	659a      	str	r2, [r3, #88]	; 0x58
 80081e2:	e00d      	b.n	8008200 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <DMA_CalcBaseAndBitshift+0x160>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6593      	str	r3, [r2, #88]	; 0x58
 80081f2:	e005      	b.n	8008200 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	40020010 	.word	0x40020010
 8008214:	40020028 	.word	0x40020028
 8008218:	40020040 	.word	0x40020040
 800821c:	40020058 	.word	0x40020058
 8008220:	40020070 	.word	0x40020070
 8008224:	40020088 	.word	0x40020088
 8008228:	400200a0 	.word	0x400200a0
 800822c:	400200b8 	.word	0x400200b8
 8008230:	40020410 	.word	0x40020410
 8008234:	40020428 	.word	0x40020428
 8008238:	40020440 	.word	0x40020440
 800823c:	40020458 	.word	0x40020458
 8008240:	40020470 	.word	0x40020470
 8008244:	40020488 	.word	0x40020488
 8008248:	400204a0 	.word	0x400204a0
 800824c:	400204b8 	.word	0x400204b8
 8008250:	aaaaaaab 	.word	0xaaaaaaab
 8008254:	080160c4 	.word	0x080160c4
 8008258:	fffffc00 	.word	0xfffffc00

0800825c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d120      	bne.n	80082b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	2b03      	cmp	r3, #3
 8008276:	d858      	bhi.n	800832a <DMA_CheckFifoParam+0xce>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <DMA_CheckFifoParam+0x24>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008291 	.word	0x08008291
 8008284:	080082a3 	.word	0x080082a3
 8008288:	08008291 	.word	0x08008291
 800828c:	0800832b 	.word	0x0800832b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d048      	beq.n	800832e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082a0:	e045      	b.n	800832e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082aa:	d142      	bne.n	8008332 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082b0:	e03f      	b.n	8008332 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ba:	d123      	bne.n	8008304 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d838      	bhi.n	8008336 <DMA_CheckFifoParam+0xda>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <DMA_CheckFifoParam+0x70>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082e3 	.word	0x080082e3
 80082d4:	080082dd 	.word	0x080082dd
 80082d8:	080082f5 	.word	0x080082f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
        break;
 80082e0:	e030      	b.n	8008344 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d025      	beq.n	800833a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082f2:	e022      	b.n	800833a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082fc:	d11f      	bne.n	800833e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008302:	e01c      	b.n	800833e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	2b02      	cmp	r3, #2
 800830a:	d902      	bls.n	8008312 <DMA_CheckFifoParam+0xb6>
 800830c:	2b03      	cmp	r3, #3
 800830e:	d003      	beq.n	8008318 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008310:	e018      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
        break;
 8008316:	e015      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00e      	beq.n	8008342 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
    break;
 8008328:	e00b      	b.n	8008342 <DMA_CheckFifoParam+0xe6>
        break;
 800832a:	bf00      	nop
 800832c:	e00a      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        break;
 800832e:	bf00      	nop
 8008330:	e008      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        break;
 8008332:	bf00      	nop
 8008334:	e006      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        break;
 8008336:	bf00      	nop
 8008338:	e004      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        break;
 800833a:	bf00      	nop
 800833c:	e002      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
        break;
 800833e:	bf00      	nop
 8008340:	e000      	b.n	8008344 <DMA_CheckFifoParam+0xe8>
    break;
 8008342:	bf00      	nop
    }
  }

  return status;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop

08008354 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a38      	ldr	r2, [pc, #224]	; (8008448 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d022      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a36      	ldr	r2, [pc, #216]	; (800844c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01d      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a35      	ldr	r2, [pc, #212]	; (8008450 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d018      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a33      	ldr	r2, [pc, #204]	; (8008454 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a32      	ldr	r2, [pc, #200]	; (8008458 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00e      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a30      	ldr	r2, [pc, #192]	; (800845c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d009      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a2f      	ldr	r2, [pc, #188]	; (8008460 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a2d      	ldr	r2, [pc, #180]	; (8008464 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d101      	bne.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01a      	beq.n	80083f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	3b08      	subs	r3, #8
 80083c4:	4a28      	ldr	r2, [pc, #160]	; (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083c6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ca:	091b      	lsrs	r3, r3, #4
 80083cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4b26      	ldr	r3, [pc, #152]	; (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a24      	ldr	r2, [pc, #144]	; (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 031f 	and.w	r3, r3, #31
 80083e8:	2201      	movs	r2, #1
 80083ea:	409a      	lsls	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80083f0:	e024      	b.n	800843c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	3b10      	subs	r3, #16
 80083fa:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80083fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4a1c      	ldr	r2, [pc, #112]	; (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d806      	bhi.n	800841a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4a1b      	ldr	r2, [pc, #108]	; (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d902      	bls.n	800841a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3308      	adds	r3, #8
 8008418:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4b18      	ldr	r3, [pc, #96]	; (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a16      	ldr	r2, [pc, #88]	; (8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800842c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 031f 	and.w	r3, r3, #31
 8008434:	2201      	movs	r2, #1
 8008436:	409a      	lsls	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800843c:	bf00      	nop
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	58025408 	.word	0x58025408
 800844c:	5802541c 	.word	0x5802541c
 8008450:	58025430 	.word	0x58025430
 8008454:	58025444 	.word	0x58025444
 8008458:	58025458 	.word	0x58025458
 800845c:	5802546c 	.word	0x5802546c
 8008460:	58025480 	.word	0x58025480
 8008464:	58025494 	.word	0x58025494
 8008468:	cccccccd 	.word	0xcccccccd
 800846c:	16009600 	.word	0x16009600
 8008470:	58025880 	.word	0x58025880
 8008474:	aaaaaaab 	.word	0xaaaaaaab
 8008478:	400204b8 	.word	0x400204b8
 800847c:	4002040f 	.word	0x4002040f
 8008480:	10008200 	.word	0x10008200
 8008484:	40020880 	.word	0x40020880

08008488 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d04a      	beq.n	8008534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d847      	bhi.n	8008534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a25      	ldr	r2, [pc, #148]	; (8008540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d022      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a24      	ldr	r2, [pc, #144]	; (8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d01d      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a22      	ldr	r2, [pc, #136]	; (8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d018      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a21      	ldr	r2, [pc, #132]	; (800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d013      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00e      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1b      	ldr	r2, [pc, #108]	; (800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d101      	bne.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80084f4:	2301      	movs	r3, #1
 80084f6:	e000      	b.n	80084fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80084f8:	2300      	movs	r3, #0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4b17      	ldr	r3, [pc, #92]	; (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	461a      	mov	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a15      	ldr	r2, [pc, #84]	; (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008510:	671a      	str	r2, [r3, #112]	; 0x70
 8008512:	e009      	b.n	8008528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	461a      	mov	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a11      	ldr	r2, [pc, #68]	; (800856c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008526:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3b01      	subs	r3, #1
 800852c:	2201      	movs	r2, #1
 800852e:	409a      	lsls	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	58025408 	.word	0x58025408
 8008544:	5802541c 	.word	0x5802541c
 8008548:	58025430 	.word	0x58025430
 800854c:	58025444 	.word	0x58025444
 8008550:	58025458 	.word	0x58025458
 8008554:	5802546c 	.word	0x5802546c
 8008558:	58025480 	.word	0x58025480
 800855c:	58025494 	.word	0x58025494
 8008560:	1600963f 	.word	0x1600963f
 8008564:	58025940 	.word	0x58025940
 8008568:	1000823f 	.word	0x1000823f
 800856c:	40020940 	.word	0x40020940

08008570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008570:	b480      	push	{r7}
 8008572:	b089      	sub	sp, #36	; 0x24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800857e:	4b89      	ldr	r3, [pc, #548]	; (80087a4 <HAL_GPIO_Init+0x234>)
 8008580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008582:	e194      	b.n	80088ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	2101      	movs	r1, #1
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	fa01 f303 	lsl.w	r3, r1, r3
 8008590:	4013      	ands	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8186 	beq.w	80088a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d005      	beq.n	80085b4 <HAL_GPIO_Init+0x44>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d130      	bne.n	8008616 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	2203      	movs	r2, #3
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	43db      	mvns	r3, r3
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	4013      	ands	r3, r2
 80085ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	4313      	orrs	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085ea:	2201      	movs	r2, #1
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	43db      	mvns	r3, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	4013      	ands	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	091b      	lsrs	r3, r3, #4
 8008600:	f003 0201 	and.w	r2, r3, #1
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	2b03      	cmp	r3, #3
 8008620:	d017      	beq.n	8008652 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	2203      	movs	r2, #3
 800862e:	fa02 f303 	lsl.w	r3, r2, r3
 8008632:	43db      	mvns	r3, r3
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	4013      	ands	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	4313      	orrs	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d123      	bne.n	80086a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	08da      	lsrs	r2, r3, #3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3208      	adds	r2, #8
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	220f      	movs	r2, #15
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	4013      	ands	r3, r2
 8008680:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	691a      	ldr	r2, [r3, #16]
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	4313      	orrs	r3, r2
 8008696:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	08da      	lsrs	r2, r3, #3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3208      	adds	r2, #8
 80086a0:	69b9      	ldr	r1, [r7, #24]
 80086a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	2203      	movs	r2, #3
 80086b2:	fa02 f303 	lsl.w	r3, r2, r3
 80086b6:	43db      	mvns	r3, r3
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	4013      	ands	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f003 0203 	and.w	r2, r3, #3
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80e0 	beq.w	80088a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086e8:	4b2f      	ldr	r3, [pc, #188]	; (80087a8 <HAL_GPIO_Init+0x238>)
 80086ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086ee:	4a2e      	ldr	r2, [pc, #184]	; (80087a8 <HAL_GPIO_Init+0x238>)
 80086f0:	f043 0302 	orr.w	r3, r3, #2
 80086f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80086f8:	4b2b      	ldr	r3, [pc, #172]	; (80087a8 <HAL_GPIO_Init+0x238>)
 80086fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008706:	4a29      	ldr	r2, [pc, #164]	; (80087ac <HAL_GPIO_Init+0x23c>)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	089b      	lsrs	r3, r3, #2
 800870c:	3302      	adds	r3, #2
 800870e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	220f      	movs	r2, #15
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	43db      	mvns	r3, r3
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	4013      	ands	r3, r2
 8008728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <HAL_GPIO_Init+0x240>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d052      	beq.n	80087d8 <HAL_GPIO_Init+0x268>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1f      	ldr	r2, [pc, #124]	; (80087b4 <HAL_GPIO_Init+0x244>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d031      	beq.n	800879e <HAL_GPIO_Init+0x22e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <HAL_GPIO_Init+0x248>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d02b      	beq.n	800879a <HAL_GPIO_Init+0x22a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a1d      	ldr	r2, [pc, #116]	; (80087bc <HAL_GPIO_Init+0x24c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d025      	beq.n	8008796 <HAL_GPIO_Init+0x226>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a1c      	ldr	r2, [pc, #112]	; (80087c0 <HAL_GPIO_Init+0x250>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01f      	beq.n	8008792 <HAL_GPIO_Init+0x222>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a1b      	ldr	r2, [pc, #108]	; (80087c4 <HAL_GPIO_Init+0x254>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d019      	beq.n	800878e <HAL_GPIO_Init+0x21e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <HAL_GPIO_Init+0x258>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_GPIO_Init+0x21a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a19      	ldr	r2, [pc, #100]	; (80087cc <HAL_GPIO_Init+0x25c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00d      	beq.n	8008786 <HAL_GPIO_Init+0x216>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <HAL_GPIO_Init+0x260>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d007      	beq.n	8008782 <HAL_GPIO_Init+0x212>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a17      	ldr	r2, [pc, #92]	; (80087d4 <HAL_GPIO_Init+0x264>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d101      	bne.n	800877e <HAL_GPIO_Init+0x20e>
 800877a:	2309      	movs	r3, #9
 800877c:	e02d      	b.n	80087da <HAL_GPIO_Init+0x26a>
 800877e:	230a      	movs	r3, #10
 8008780:	e02b      	b.n	80087da <HAL_GPIO_Init+0x26a>
 8008782:	2308      	movs	r3, #8
 8008784:	e029      	b.n	80087da <HAL_GPIO_Init+0x26a>
 8008786:	2307      	movs	r3, #7
 8008788:	e027      	b.n	80087da <HAL_GPIO_Init+0x26a>
 800878a:	2306      	movs	r3, #6
 800878c:	e025      	b.n	80087da <HAL_GPIO_Init+0x26a>
 800878e:	2305      	movs	r3, #5
 8008790:	e023      	b.n	80087da <HAL_GPIO_Init+0x26a>
 8008792:	2304      	movs	r3, #4
 8008794:	e021      	b.n	80087da <HAL_GPIO_Init+0x26a>
 8008796:	2303      	movs	r3, #3
 8008798:	e01f      	b.n	80087da <HAL_GPIO_Init+0x26a>
 800879a:	2302      	movs	r3, #2
 800879c:	e01d      	b.n	80087da <HAL_GPIO_Init+0x26a>
 800879e:	2301      	movs	r3, #1
 80087a0:	e01b      	b.n	80087da <HAL_GPIO_Init+0x26a>
 80087a2:	bf00      	nop
 80087a4:	58000080 	.word	0x58000080
 80087a8:	58024400 	.word	0x58024400
 80087ac:	58000400 	.word	0x58000400
 80087b0:	58020000 	.word	0x58020000
 80087b4:	58020400 	.word	0x58020400
 80087b8:	58020800 	.word	0x58020800
 80087bc:	58020c00 	.word	0x58020c00
 80087c0:	58021000 	.word	0x58021000
 80087c4:	58021400 	.word	0x58021400
 80087c8:	58021800 	.word	0x58021800
 80087cc:	58021c00 	.word	0x58021c00
 80087d0:	58022000 	.word	0x58022000
 80087d4:	58022400 	.word	0x58022400
 80087d8:	2300      	movs	r3, #0
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	f002 0203 	and.w	r2, r2, #3
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	4093      	lsls	r3, r2
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087ea:	4938      	ldr	r1, [pc, #224]	; (80088cc <HAL_GPIO_Init+0x35c>)
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	089b      	lsrs	r3, r3, #2
 80087f0:	3302      	adds	r3, #2
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	43db      	mvns	r3, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4013      	ands	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800881e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	43db      	mvns	r3, r3
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	4013      	ands	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4313      	orrs	r3, r2
 800884a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800884c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	43db      	mvns	r3, r3
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	4013      	ands	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	43db      	mvns	r3, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	4013      	ands	r3, r2
 800888c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4313      	orrs	r3, r2
 80088a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	fa22 f303 	lsr.w	r3, r2, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f47f ae63 	bne.w	8008584 <HAL_GPIO_Init+0x14>
  }
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	3724      	adds	r7, #36	; 0x24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	58000400 	.word	0x58000400

080088d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	887b      	ldrh	r3, [r7, #2]
 80088e2:	4013      	ands	r3, r2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088e8:	2301      	movs	r3, #1
 80088ea:	73fb      	strb	r3, [r7, #15]
 80088ec:	e001      	b.n	80088f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	807b      	strh	r3, [r7, #2]
 800890c:	4613      	mov	r3, r2
 800890e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008910:	787b      	ldrb	r3, [r7, #1]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008916:	887a      	ldrh	r2, [r7, #2]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800891c:	e003      	b.n	8008926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800891e:	887b      	ldrh	r3, [r7, #2]
 8008920:	041a      	lsls	r2, r3, #16
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	619a      	str	r2, [r3, #24]
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e08b      	b.n	8008a5e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fa f938 	bl	8002bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2224      	movs	r2, #36	; 0x24
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0201 	bic.w	r2, r2, #1
 8008976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008984:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008994:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d107      	bne.n	80089ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089aa:	609a      	str	r2, [r3, #8]
 80089ac:	e006      	b.n	80089bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80089ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d108      	bne.n	80089d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089d2:	605a      	str	r2, [r3, #4]
 80089d4:	e007      	b.n	80089e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6859      	ldr	r1, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <HAL_I2C_Init+0x134>)
 80089f2:	430b      	orrs	r3, r1
 80089f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69d9      	ldr	r1, [r3, #28]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0201 	orr.w	r2, r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	02008000 	.word	0x02008000

08008a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d138      	bne.n	8008af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e032      	b.n	8008af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2224      	movs	r2, #36	; 0x24
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0201 	bic.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6819      	ldr	r1, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0201 	orr.w	r2, r2, #1
 8008ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	e000      	b.n	8008af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008af4:	2302      	movs	r3, #2
  }
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	d139      	bne.n	8008b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d101      	bne.n	8008b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008b22:	2302      	movs	r3, #2
 8008b24:	e033      	b.n	8008b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2224      	movs	r2, #36	; 0x24
 8008b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0201 	bic.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e000      	b.n	8008b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
	...

08008b9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ba4:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <HAL_PWREx_ConfigSupply+0x70>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d00a      	beq.n	8008bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bb0:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <HAL_PWREx_ConfigSupply+0x70>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d001      	beq.n	8008bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e01f      	b.n	8008c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e01d      	b.n	8008c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <HAL_PWREx_ConfigSupply+0x70>)
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f023 0207 	bic.w	r2, r3, #7
 8008bce:	490f      	ldr	r1, [pc, #60]	; (8008c0c <HAL_PWREx_ConfigSupply+0x70>)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008bd6:	f7fa fd67 	bl	80036a8 <HAL_GetTick>
 8008bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bdc:	e009      	b.n	8008bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008bde:	f7fa fd63 	bl	80036a8 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bec:	d901      	bls.n	8008bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e007      	b.n	8008c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bf2:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <HAL_PWREx_ConfigSupply+0x70>)
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfe:	d1ee      	bne.n	8008bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	58024800 	.word	0x58024800

08008c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	; 0x30
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f000 bc48 	b.w	80094b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8088 	beq.w	8008d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c32:	4b99      	ldr	r3, [pc, #612]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c3c:	4b96      	ldr	r3, [pc, #600]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	d007      	beq.n	8008c58 <HAL_RCC_OscConfig+0x48>
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	2b18      	cmp	r3, #24
 8008c4c:	d111      	bne.n	8008c72 <HAL_RCC_OscConfig+0x62>
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d10c      	bne.n	8008c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c58:	4b8f      	ldr	r3, [pc, #572]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d06d      	beq.n	8008d40 <HAL_RCC_OscConfig+0x130>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d169      	bne.n	8008d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f000 bc21 	b.w	80094b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c7a:	d106      	bne.n	8008c8a <HAL_RCC_OscConfig+0x7a>
 8008c7c:	4b86      	ldr	r3, [pc, #536]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a85      	ldr	r2, [pc, #532]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	e02e      	b.n	8008ce8 <HAL_RCC_OscConfig+0xd8>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10c      	bne.n	8008cac <HAL_RCC_OscConfig+0x9c>
 8008c92:	4b81      	ldr	r3, [pc, #516]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a80      	ldr	r2, [pc, #512]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	4b7e      	ldr	r3, [pc, #504]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a7d      	ldr	r2, [pc, #500]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	e01d      	b.n	8008ce8 <HAL_RCC_OscConfig+0xd8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cb4:	d10c      	bne.n	8008cd0 <HAL_RCC_OscConfig+0xc0>
 8008cb6:	4b78      	ldr	r3, [pc, #480]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a77      	ldr	r2, [pc, #476]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	4b75      	ldr	r3, [pc, #468]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a74      	ldr	r2, [pc, #464]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	e00b      	b.n	8008ce8 <HAL_RCC_OscConfig+0xd8>
 8008cd0:	4b71      	ldr	r3, [pc, #452]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a70      	ldr	r2, [pc, #448]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4b6e      	ldr	r3, [pc, #440]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a6d      	ldr	r2, [pc, #436]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d013      	beq.n	8008d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7fa fcda 	bl	80036a8 <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cf8:	f7fa fcd6 	bl	80036a8 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b64      	cmp	r3, #100	; 0x64
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e3d4      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d0a:	4b63      	ldr	r3, [pc, #396]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0f0      	beq.n	8008cf8 <HAL_RCC_OscConfig+0xe8>
 8008d16:	e014      	b.n	8008d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fa fcc6 	bl	80036a8 <HAL_GetTick>
 8008d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d20:	f7fa fcc2 	bl	80036a8 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b64      	cmp	r3, #100	; 0x64
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e3c0      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d32:	4b59      	ldr	r3, [pc, #356]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1f0      	bne.n	8008d20 <HAL_RCC_OscConfig+0x110>
 8008d3e:	e000      	b.n	8008d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 80ca 	beq.w	8008ee4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d50:	4b51      	ldr	r3, [pc, #324]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d5a:	4b4f      	ldr	r3, [pc, #316]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_RCC_OscConfig+0x166>
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	2b18      	cmp	r3, #24
 8008d6a:	d156      	bne.n	8008e1a <HAL_RCC_OscConfig+0x20a>
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d151      	bne.n	8008e1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d76:	4b48      	ldr	r3, [pc, #288]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0304 	and.w	r3, r3, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <HAL_RCC_OscConfig+0x17e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e392      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d8e:	4b42      	ldr	r3, [pc, #264]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f023 0219 	bic.w	r2, r3, #25
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	493f      	ldr	r1, [pc, #252]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da0:	f7fa fc82 	bl	80036a8 <HAL_GetTick>
 8008da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008da8:	f7fa fc7e 	bl	80036a8 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e37c      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dba:	4b37      	ldr	r3, [pc, #220]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f0      	beq.n	8008da8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dc6:	f7fa fc7b 	bl	80036c0 <HAL_GetREVID>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d817      	bhi.n	8008e04 <HAL_RCC_OscConfig+0x1f4>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b40      	cmp	r3, #64	; 0x40
 8008dda:	d108      	bne.n	8008dee <HAL_RCC_OscConfig+0x1de>
 8008ddc:	4b2e      	ldr	r3, [pc, #184]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008de4:	4a2c      	ldr	r2, [pc, #176]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dec:	e07a      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dee:	4b2a      	ldr	r3, [pc, #168]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	031b      	lsls	r3, r3, #12
 8008dfc:	4926      	ldr	r1, [pc, #152]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e02:	e06f      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e04:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	061b      	lsls	r3, r3, #24
 8008e12:	4921      	ldr	r1, [pc, #132]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e18:	e064      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d047      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e22:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f023 0219 	bic.w	r2, r3, #25
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	491a      	ldr	r1, [pc, #104]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e34:	f7fa fc38 	bl	80036a8 <HAL_GetTick>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e3c:	f7fa fc34 	bl	80036a8 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e332      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e4e:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f0      	beq.n	8008e3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e5a:	f7fa fc31 	bl	80036c0 <HAL_GetREVID>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d819      	bhi.n	8008e9c <HAL_RCC_OscConfig+0x28c>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b40      	cmp	r3, #64	; 0x40
 8008e6e:	d108      	bne.n	8008e82 <HAL_RCC_OscConfig+0x272>
 8008e70:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e78:	4a07      	ldr	r2, [pc, #28]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7e:	6053      	str	r3, [r2, #4]
 8008e80:	e030      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	031b      	lsls	r3, r3, #12
 8008e90:	4901      	ldr	r1, [pc, #4]	; (8008e98 <HAL_RCC_OscConfig+0x288>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	604b      	str	r3, [r1, #4]
 8008e96:	e025      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
 8008e98:	58024400 	.word	0x58024400
 8008e9c:	4b9a      	ldr	r3, [pc, #616]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	061b      	lsls	r3, r3, #24
 8008eaa:	4997      	ldr	r1, [pc, #604]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	604b      	str	r3, [r1, #4]
 8008eb0:	e018      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eb2:	4b95      	ldr	r3, [pc, #596]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a94      	ldr	r2, [pc, #592]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebe:	f7fa fbf3 	bl	80036a8 <HAL_GetTick>
 8008ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ec4:	e008      	b.n	8008ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ec6:	f7fa fbef 	bl	80036a8 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e2ed      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ed8:	4b8b      	ldr	r3, [pc, #556]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f0      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80a9 	beq.w	8009044 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ef2:	4b85      	ldr	r3, [pc, #532]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008efa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008efc:	4b82      	ldr	r3, [pc, #520]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d007      	beq.n	8008f18 <HAL_RCC_OscConfig+0x308>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b18      	cmp	r3, #24
 8008f0c:	d13a      	bne.n	8008f84 <HAL_RCC_OscConfig+0x374>
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d135      	bne.n	8008f84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f18:	4b7b      	ldr	r3, [pc, #492]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_RCC_OscConfig+0x320>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	2b80      	cmp	r3, #128	; 0x80
 8008f2a:	d001      	beq.n	8008f30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e2c1      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f30:	f7fa fbc6 	bl	80036c0 <HAL_GetREVID>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d817      	bhi.n	8008f6e <HAL_RCC_OscConfig+0x35e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d108      	bne.n	8008f58 <HAL_RCC_OscConfig+0x348>
 8008f46:	4b70      	ldr	r3, [pc, #448]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f4e:	4a6e      	ldr	r2, [pc, #440]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f56:	e075      	b.n	8009044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f58:	4b6b      	ldr	r3, [pc, #428]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	069b      	lsls	r3, r3, #26
 8008f66:	4968      	ldr	r1, [pc, #416]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f6c:	e06a      	b.n	8009044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f6e:	4b66      	ldr	r3, [pc, #408]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	061b      	lsls	r3, r3, #24
 8008f7c:	4962      	ldr	r1, [pc, #392]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f82:	e05f      	b.n	8009044 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d042      	beq.n	8009012 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f8c:	4b5e      	ldr	r3, [pc, #376]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a5d      	ldr	r2, [pc, #372]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f98:	f7fa fb86 	bl	80036a8 <HAL_GetTick>
 8008f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fa0:	f7fa fb82 	bl	80036a8 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e280      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fb2:	4b55      	ldr	r3, [pc, #340]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0f0      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fbe:	f7fa fb7f 	bl	80036c0 <HAL_GetREVID>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d817      	bhi.n	8008ffc <HAL_RCC_OscConfig+0x3ec>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d108      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x3d6>
 8008fd4:	4b4c      	ldr	r3, [pc, #304]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008fdc:	4a4a      	ldr	r2, [pc, #296]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fe2:	6053      	str	r3, [r2, #4]
 8008fe4:	e02e      	b.n	8009044 <HAL_RCC_OscConfig+0x434>
 8008fe6:	4b48      	ldr	r3, [pc, #288]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	069b      	lsls	r3, r3, #26
 8008ff4:	4944      	ldr	r1, [pc, #272]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	604b      	str	r3, [r1, #4]
 8008ffa:	e023      	b.n	8009044 <HAL_RCC_OscConfig+0x434>
 8008ffc:	4b42      	ldr	r3, [pc, #264]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	061b      	lsls	r3, r3, #24
 800900a:	493f      	ldr	r1, [pc, #252]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 800900c:	4313      	orrs	r3, r2
 800900e:	60cb      	str	r3, [r1, #12]
 8009010:	e018      	b.n	8009044 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009012:	4b3d      	ldr	r3, [pc, #244]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a3c      	ldr	r2, [pc, #240]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8009018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800901c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800901e:	f7fa fb43 	bl	80036a8 <HAL_GetTick>
 8009022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009024:	e008      	b.n	8009038 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009026:	f7fa fb3f 	bl	80036a8 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e23d      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009038:	4b33      	ldr	r3, [pc, #204]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1f0      	bne.n	8009026 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b00      	cmp	r3, #0
 800904e:	d036      	beq.n	80090be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d019      	beq.n	800908c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009058:	4b2b      	ldr	r3, [pc, #172]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 800905a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905c:	4a2a      	ldr	r2, [pc, #168]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009064:	f7fa fb20 	bl	80036a8 <HAL_GetTick>
 8009068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800906a:	e008      	b.n	800907e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800906c:	f7fa fb1c 	bl	80036a8 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b02      	cmp	r3, #2
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e21a      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800907e:	4b22      	ldr	r3, [pc, #136]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8009080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f0      	beq.n	800906c <HAL_RCC_OscConfig+0x45c>
 800908a:	e018      	b.n	80090be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800908c:	4b1e      	ldr	r3, [pc, #120]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 800908e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009090:	4a1d      	ldr	r2, [pc, #116]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 8009092:	f023 0301 	bic.w	r3, r3, #1
 8009096:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009098:	f7fa fb06 	bl	80036a8 <HAL_GetTick>
 800909c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090a0:	f7fa fb02 	bl	80036a8 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e200      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 80090b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1f0      	bne.n	80090a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d039      	beq.n	800913e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d01c      	beq.n	800910c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090d2:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 80090d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090de:	f7fa fae3 	bl	80036a8 <HAL_GetTick>
 80090e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090e6:	f7fa fadf 	bl	80036a8 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e1dd      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090f8:	4b03      	ldr	r3, [pc, #12]	; (8009108 <HAL_RCC_OscConfig+0x4f8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f0      	beq.n	80090e6 <HAL_RCC_OscConfig+0x4d6>
 8009104:	e01b      	b.n	800913e <HAL_RCC_OscConfig+0x52e>
 8009106:	bf00      	nop
 8009108:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800910c:	4b9b      	ldr	r3, [pc, #620]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a9a      	ldr	r2, [pc, #616]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009116:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009118:	f7fa fac6 	bl	80036a8 <HAL_GetTick>
 800911c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009120:	f7fa fac2 	bl	80036a8 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e1c0      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009132:	4b92      	ldr	r3, [pc, #584]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 8081 	beq.w	800924e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800914c:	4b8c      	ldr	r3, [pc, #560]	; (8009380 <HAL_RCC_OscConfig+0x770>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a8b      	ldr	r2, [pc, #556]	; (8009380 <HAL_RCC_OscConfig+0x770>)
 8009152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009158:	f7fa faa6 	bl	80036a8 <HAL_GetTick>
 800915c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800915e:	e008      	b.n	8009172 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009160:	f7fa faa2 	bl	80036a8 <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	2b64      	cmp	r3, #100	; 0x64
 800916c:	d901      	bls.n	8009172 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e1a0      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009172:	4b83      	ldr	r3, [pc, #524]	; (8009380 <HAL_RCC_OscConfig+0x770>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0f0      	beq.n	8009160 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d106      	bne.n	8009194 <HAL_RCC_OscConfig+0x584>
 8009186:	4b7d      	ldr	r3, [pc, #500]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	4a7c      	ldr	r2, [pc, #496]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	6713      	str	r3, [r2, #112]	; 0x70
 8009192:	e02d      	b.n	80091f0 <HAL_RCC_OscConfig+0x5e0>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10c      	bne.n	80091b6 <HAL_RCC_OscConfig+0x5a6>
 800919c:	4b77      	ldr	r3, [pc, #476]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800919e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a0:	4a76      	ldr	r2, [pc, #472]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	6713      	str	r3, [r2, #112]	; 0x70
 80091a8:	4b74      	ldr	r3, [pc, #464]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ac:	4a73      	ldr	r2, [pc, #460]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091ae:	f023 0304 	bic.w	r3, r3, #4
 80091b2:	6713      	str	r3, [r2, #112]	; 0x70
 80091b4:	e01c      	b.n	80091f0 <HAL_RCC_OscConfig+0x5e0>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	d10c      	bne.n	80091d8 <HAL_RCC_OscConfig+0x5c8>
 80091be:	4b6f      	ldr	r3, [pc, #444]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c2:	4a6e      	ldr	r2, [pc, #440]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091c4:	f043 0304 	orr.w	r3, r3, #4
 80091c8:	6713      	str	r3, [r2, #112]	; 0x70
 80091ca:	4b6c      	ldr	r3, [pc, #432]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	4a6b      	ldr	r2, [pc, #428]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091d0:	f043 0301 	orr.w	r3, r3, #1
 80091d4:	6713      	str	r3, [r2, #112]	; 0x70
 80091d6:	e00b      	b.n	80091f0 <HAL_RCC_OscConfig+0x5e0>
 80091d8:	4b68      	ldr	r3, [pc, #416]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091dc:	4a67      	ldr	r2, [pc, #412]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	6713      	str	r3, [r2, #112]	; 0x70
 80091e4:	4b65      	ldr	r3, [pc, #404]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e8:	4a64      	ldr	r2, [pc, #400]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80091ea:	f023 0304 	bic.w	r3, r3, #4
 80091ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d015      	beq.n	8009224 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f8:	f7fa fa56 	bl	80036a8 <HAL_GetTick>
 80091fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091fe:	e00a      	b.n	8009216 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009200:	f7fa fa52 	bl	80036a8 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	f241 3288 	movw	r2, #5000	; 0x1388
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e14e      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009216:	4b59      	ldr	r3, [pc, #356]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0ee      	beq.n	8009200 <HAL_RCC_OscConfig+0x5f0>
 8009222:	e014      	b.n	800924e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009224:	f7fa fa40 	bl	80036a8 <HAL_GetTick>
 8009228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800922a:	e00a      	b.n	8009242 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800922c:	f7fa fa3c 	bl	80036a8 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f241 3288 	movw	r2, #5000	; 0x1388
 800923a:	4293      	cmp	r3, r2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e138      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009242:	4b4e      	ldr	r3, [pc, #312]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1ee      	bne.n	800922c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 812d 	beq.w	80094b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009258:	4b48      	ldr	r3, [pc, #288]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009260:	2b18      	cmp	r3, #24
 8009262:	f000 80bd 	beq.w	80093e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b02      	cmp	r3, #2
 800926c:	f040 809e 	bne.w	80093ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009270:	4b42      	ldr	r3, [pc, #264]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a41      	ldr	r2, [pc, #260]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800927a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927c:	f7fa fa14 	bl	80036a8 <HAL_GetTick>
 8009280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009284:	f7fa fa10 	bl	80036a8 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e10e      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092a2:	4b36      	ldr	r3, [pc, #216]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80092a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092a6:	4b37      	ldr	r3, [pc, #220]	; (8009384 <HAL_RCC_OscConfig+0x774>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092b2:	0112      	lsls	r2, r2, #4
 80092b4:	430a      	orrs	r2, r1
 80092b6:	4931      	ldr	r1, [pc, #196]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	628b      	str	r3, [r1, #40]	; 0x28
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c0:	3b01      	subs	r3, #1
 80092c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	3b01      	subs	r3, #1
 80092cc:	025b      	lsls	r3, r3, #9
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d6:	3b01      	subs	r3, #1
 80092d8:	041b      	lsls	r3, r3, #16
 80092da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e4:	3b01      	subs	r3, #1
 80092e6:	061b      	lsls	r3, r3, #24
 80092e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092ec:	4923      	ldr	r1, [pc, #140]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80092f2:	4b22      	ldr	r3, [pc, #136]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	4a21      	ldr	r2, [pc, #132]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 80092f8:	f023 0301 	bic.w	r3, r3, #1
 80092fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092fe:	4b1f      	ldr	r3, [pc, #124]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009302:	4b21      	ldr	r3, [pc, #132]	; (8009388 <HAL_RCC_OscConfig+0x778>)
 8009304:	4013      	ands	r3, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800930a:	00d2      	lsls	r2, r2, #3
 800930c:	491b      	ldr	r1, [pc, #108]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800930e:	4313      	orrs	r3, r2
 8009310:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009312:	4b1a      	ldr	r3, [pc, #104]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009316:	f023 020c 	bic.w	r2, r3, #12
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931e:	4917      	ldr	r1, [pc, #92]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009320:	4313      	orrs	r3, r2
 8009322:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009324:	4b15      	ldr	r3, [pc, #84]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	f023 0202 	bic.w	r2, r3, #2
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009330:	4912      	ldr	r1, [pc, #72]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009332:	4313      	orrs	r3, r2
 8009334:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933a:	4a10      	ldr	r2, [pc, #64]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800933c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	4a0d      	ldr	r2, [pc, #52]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800934c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	4a0a      	ldr	r2, [pc, #40]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800935a:	4b08      	ldr	r3, [pc, #32]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	4a07      	ldr	r2, [pc, #28]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a04      	ldr	r2, [pc, #16]	; (800937c <HAL_RCC_OscConfig+0x76c>)
 800936c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009372:	f7fa f999 	bl	80036a8 <HAL_GetTick>
 8009376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009378:	e011      	b.n	800939e <HAL_RCC_OscConfig+0x78e>
 800937a:	bf00      	nop
 800937c:	58024400 	.word	0x58024400
 8009380:	58024800 	.word	0x58024800
 8009384:	fffffc0c 	.word	0xfffffc0c
 8009388:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800938c:	f7fa f98c 	bl	80036a8 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e08a      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800939e:	4b47      	ldr	r3, [pc, #284]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d0f0      	beq.n	800938c <HAL_RCC_OscConfig+0x77c>
 80093aa:	e082      	b.n	80094b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ac:	4b43      	ldr	r3, [pc, #268]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a42      	ldr	r2, [pc, #264]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80093b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b8:	f7fa f976 	bl	80036a8 <HAL_GetTick>
 80093bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093be:	e008      	b.n	80093d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c0:	f7fa f972 	bl	80036a8 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e070      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093d2:	4b3a      	ldr	r3, [pc, #232]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1f0      	bne.n	80093c0 <HAL_RCC_OscConfig+0x7b0>
 80093de:	e068      	b.n	80094b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80093e0:	4b36      	ldr	r3, [pc, #216]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80093e6:	4b35      	ldr	r3, [pc, #212]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d031      	beq.n	8009458 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f003 0203 	and.w	r2, r3, #3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093fe:	429a      	cmp	r2, r3
 8009400:	d12a      	bne.n	8009458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	091b      	lsrs	r3, r3, #4
 8009406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940e:	429a      	cmp	r2, r3
 8009410:	d122      	bne.n	8009458 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800941e:	429a      	cmp	r2, r3
 8009420:	d11a      	bne.n	8009458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	0a5b      	lsrs	r3, r3, #9
 8009426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009430:	429a      	cmp	r2, r3
 8009432:	d111      	bne.n	8009458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0c1b      	lsrs	r3, r3, #16
 8009438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009442:	429a      	cmp	r2, r3
 8009444:	d108      	bne.n	8009458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	0e1b      	lsrs	r3, r3, #24
 800944a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009452:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009454:	429a      	cmp	r2, r3
 8009456:	d001      	beq.n	800945c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e02b      	b.n	80094b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800945c:	4b17      	ldr	r3, [pc, #92]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 800945e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009460:	08db      	lsrs	r3, r3, #3
 8009462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009466:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	429a      	cmp	r2, r3
 8009470:	d01f      	beq.n	80094b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	4a11      	ldr	r2, [pc, #68]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 8009478:	f023 0301 	bic.w	r3, r3, #1
 800947c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800947e:	f7fa f913 	bl	80036a8 <HAL_GetTick>
 8009482:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009484:	bf00      	nop
 8009486:	f7fa f90f 	bl	80036a8 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	4293      	cmp	r3, r2
 8009490:	d0f9      	beq.n	8009486 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009492:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 8009494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009496:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <HAL_RCC_OscConfig+0x8b0>)
 8009498:	4013      	ands	r3, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800949e:	00d2      	lsls	r2, r2, #3
 80094a0:	4906      	ldr	r1, [pc, #24]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	4a04      	ldr	r2, [pc, #16]	; (80094bc <HAL_RCC_OscConfig+0x8ac>)
 80094ac:	f043 0301 	orr.w	r3, r3, #1
 80094b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3730      	adds	r7, #48	; 0x30
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	58024400 	.word	0x58024400
 80094c0:	ffff0007 	.word	0xffff0007

080094c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e19c      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094d8:	4b8a      	ldr	r3, [pc, #552]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 030f 	and.w	r3, r3, #15
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d910      	bls.n	8009508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094e6:	4b87      	ldr	r3, [pc, #540]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f023 020f 	bic.w	r2, r3, #15
 80094ee:	4985      	ldr	r1, [pc, #532]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094f6:	4b83      	ldr	r3, [pc, #524]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d001      	beq.n	8009508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e184      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691a      	ldr	r2, [r3, #16]
 8009518:	4b7b      	ldr	r3, [pc, #492]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009520:	429a      	cmp	r2, r3
 8009522:	d908      	bls.n	8009536 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009524:	4b78      	ldr	r3, [pc, #480]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	4975      	ldr	r1, [pc, #468]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009532:	4313      	orrs	r3, r2
 8009534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0308 	and.w	r3, r3, #8
 800953e:	2b00      	cmp	r3, #0
 8009540:	d010      	beq.n	8009564 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	4b70      	ldr	r3, [pc, #448]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800954e:	429a      	cmp	r2, r3
 8009550:	d908      	bls.n	8009564 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009552:	4b6d      	ldr	r3, [pc, #436]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	496a      	ldr	r1, [pc, #424]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009560:	4313      	orrs	r3, r2
 8009562:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d010      	beq.n	8009592 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	4b64      	ldr	r3, [pc, #400]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800957c:	429a      	cmp	r2, r3
 800957e:	d908      	bls.n	8009592 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009580:	4b61      	ldr	r3, [pc, #388]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	495e      	ldr	r1, [pc, #376]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 800958e:	4313      	orrs	r3, r2
 8009590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d010      	beq.n	80095c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69da      	ldr	r2, [r3, #28]
 80095a2:	4b59      	ldr	r3, [pc, #356]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d908      	bls.n	80095c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80095ae:	4b56      	ldr	r3, [pc, #344]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	4953      	ldr	r1, [pc, #332]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d010      	beq.n	80095ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	4b4d      	ldr	r3, [pc, #308]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	429a      	cmp	r2, r3
 80095da:	d908      	bls.n	80095ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095dc:	4b4a      	ldr	r3, [pc, #296]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f023 020f 	bic.w	r2, r3, #15
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	4947      	ldr	r1, [pc, #284]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d055      	beq.n	80096a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80095fa:	4b43      	ldr	r3, [pc, #268]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	4940      	ldr	r1, [pc, #256]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009608:	4313      	orrs	r3, r2
 800960a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d107      	bne.n	8009624 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009614:	4b3c      	ldr	r3, [pc, #240]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d121      	bne.n	8009664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e0f6      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2b03      	cmp	r3, #3
 800962a:	d107      	bne.n	800963c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800962c:	4b36      	ldr	r3, [pc, #216]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d115      	bne.n	8009664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e0ea      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d107      	bne.n	8009654 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009644:	4b30      	ldr	r3, [pc, #192]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e0de      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009654:	4b2c      	ldr	r3, [pc, #176]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0304 	and.w	r3, r3, #4
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e0d6      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009664:	4b28      	ldr	r3, [pc, #160]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f023 0207 	bic.w	r2, r3, #7
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4925      	ldr	r1, [pc, #148]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009672:	4313      	orrs	r3, r2
 8009674:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009676:	f7fa f817 	bl	80036a8 <HAL_GetTick>
 800967a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800967c:	e00a      	b.n	8009694 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800967e:	f7fa f813 	bl	80036a8 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	f241 3288 	movw	r2, #5000	; 0x1388
 800968c:	4293      	cmp	r3, r2
 800968e:	d901      	bls.n	8009694 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e0be      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009694:	4b1c      	ldr	r3, [pc, #112]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d1eb      	bne.n	800967e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d010      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	429a      	cmp	r2, r3
 80096c0:	d208      	bcs.n	80096d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096c2:	4b11      	ldr	r3, [pc, #68]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f023 020f 	bic.w	r2, r3, #15
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	490e      	ldr	r1, [pc, #56]	; (8009708 <HAL_RCC_ClockConfig+0x244>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096d4:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d214      	bcs.n	800970c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e2:	4b08      	ldr	r3, [pc, #32]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f023 020f 	bic.w	r2, r3, #15
 80096ea:	4906      	ldr	r1, [pc, #24]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b04      	ldr	r3, [pc, #16]	; (8009704 <HAL_RCC_ClockConfig+0x240>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d005      	beq.n	800970c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e086      	b.n	8009812 <HAL_RCC_ClockConfig+0x34e>
 8009704:	52002000 	.word	0x52002000
 8009708:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d010      	beq.n	800973a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	4b3f      	ldr	r3, [pc, #252]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009724:	429a      	cmp	r2, r3
 8009726:	d208      	bcs.n	800973a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009728:	4b3c      	ldr	r3, [pc, #240]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	4939      	ldr	r1, [pc, #228]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 8009736:	4313      	orrs	r3, r2
 8009738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d010      	beq.n	8009768 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695a      	ldr	r2, [r3, #20]
 800974a:	4b34      	ldr	r3, [pc, #208]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009752:	429a      	cmp	r2, r3
 8009754:	d208      	bcs.n	8009768 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009756:	4b31      	ldr	r3, [pc, #196]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	492e      	ldr	r1, [pc, #184]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 8009764:	4313      	orrs	r3, r2
 8009766:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699a      	ldr	r2, [r3, #24]
 8009778:	4b28      	ldr	r3, [pc, #160]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009780:	429a      	cmp	r2, r3
 8009782:	d208      	bcs.n	8009796 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009784:	4b25      	ldr	r3, [pc, #148]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	4922      	ldr	r1, [pc, #136]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 8009792:	4313      	orrs	r3, r2
 8009794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d010      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69da      	ldr	r2, [r3, #28]
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d208      	bcs.n	80097c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097b2:	4b1a      	ldr	r3, [pc, #104]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	4917      	ldr	r1, [pc, #92]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80097c4:	f000 f834 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 80097c8:	4602      	mov	r2, r0
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	0a1b      	lsrs	r3, r3, #8
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	4912      	ldr	r1, [pc, #72]	; (8009820 <HAL_RCC_ClockConfig+0x35c>)
 80097d6:	5ccb      	ldrb	r3, [r1, r3]
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	fa22 f303 	lsr.w	r3, r2, r3
 80097e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097e2:	4b0e      	ldr	r3, [pc, #56]	; (800981c <HAL_RCC_ClockConfig+0x358>)
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	4a0d      	ldr	r2, [pc, #52]	; (8009820 <HAL_RCC_ClockConfig+0x35c>)
 80097ec:	5cd3      	ldrb	r3, [r2, r3]
 80097ee:	f003 031f 	and.w	r3, r3, #31
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <HAL_RCC_ClockConfig+0x360>)
 80097fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097fc:	4a0a      	ldr	r2, [pc, #40]	; (8009828 <HAL_RCC_ClockConfig+0x364>)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <HAL_RCC_ClockConfig+0x368>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f7f9 fc86 	bl	8003118 <HAL_InitTick>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	58024400 	.word	0x58024400
 8009820:	080160b4 	.word	0x080160b4
 8009824:	2400008c 	.word	0x2400008c
 8009828:	24000088 	.word	0x24000088
 800982c:	24000090 	.word	0x24000090

08009830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009830:	b480      	push	{r7}
 8009832:	b089      	sub	sp, #36	; 0x24
 8009834:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009836:	4bb3      	ldr	r3, [pc, #716]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800983e:	2b18      	cmp	r3, #24
 8009840:	f200 8155 	bhi.w	8009aee <HAL_RCC_GetSysClockFreq+0x2be>
 8009844:	a201      	add	r2, pc, #4	; (adr r2, 800984c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	080098b1 	.word	0x080098b1
 8009850:	08009aef 	.word	0x08009aef
 8009854:	08009aef 	.word	0x08009aef
 8009858:	08009aef 	.word	0x08009aef
 800985c:	08009aef 	.word	0x08009aef
 8009860:	08009aef 	.word	0x08009aef
 8009864:	08009aef 	.word	0x08009aef
 8009868:	08009aef 	.word	0x08009aef
 800986c:	080098d7 	.word	0x080098d7
 8009870:	08009aef 	.word	0x08009aef
 8009874:	08009aef 	.word	0x08009aef
 8009878:	08009aef 	.word	0x08009aef
 800987c:	08009aef 	.word	0x08009aef
 8009880:	08009aef 	.word	0x08009aef
 8009884:	08009aef 	.word	0x08009aef
 8009888:	08009aef 	.word	0x08009aef
 800988c:	080098dd 	.word	0x080098dd
 8009890:	08009aef 	.word	0x08009aef
 8009894:	08009aef 	.word	0x08009aef
 8009898:	08009aef 	.word	0x08009aef
 800989c:	08009aef 	.word	0x08009aef
 80098a0:	08009aef 	.word	0x08009aef
 80098a4:	08009aef 	.word	0x08009aef
 80098a8:	08009aef 	.word	0x08009aef
 80098ac:	080098e3 	.word	0x080098e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098b0:	4b94      	ldr	r3, [pc, #592]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d009      	beq.n	80098d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098bc:	4b91      	ldr	r3, [pc, #580]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	08db      	lsrs	r3, r3, #3
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	4a90      	ldr	r2, [pc, #576]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098c8:	fa22 f303 	lsr.w	r3, r2, r3
 80098cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80098ce:	e111      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80098d0:	4b8d      	ldr	r3, [pc, #564]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098d2:	61bb      	str	r3, [r7, #24]
      break;
 80098d4:	e10e      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80098d6:	4b8d      	ldr	r3, [pc, #564]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80098d8:	61bb      	str	r3, [r7, #24]
      break;
 80098da:	e10b      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80098dc:	4b8c      	ldr	r3, [pc, #560]	; (8009b10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80098de:	61bb      	str	r3, [r7, #24]
      break;
 80098e0:	e108      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098e2:	4b88      	ldr	r3, [pc, #544]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80098ec:	4b85      	ldr	r3, [pc, #532]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098f8:	4b82      	ldr	r3, [pc, #520]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009902:	4b80      	ldr	r3, [pc, #512]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009906:	08db      	lsrs	r3, r3, #3
 8009908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 80e1 	beq.w	8009ae8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b02      	cmp	r3, #2
 800992a:	f000 8083 	beq.w	8009a34 <HAL_RCC_GetSysClockFreq+0x204>
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b02      	cmp	r3, #2
 8009932:	f200 80a1 	bhi.w	8009a78 <HAL_RCC_GetSysClockFreq+0x248>
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <HAL_RCC_GetSysClockFreq+0x114>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d056      	beq.n	80099f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009942:	e099      	b.n	8009a78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009944:	4b6f      	ldr	r3, [pc, #444]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	d02d      	beq.n	80099ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009950:	4b6c      	ldr	r3, [pc, #432]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	08db      	lsrs	r3, r3, #3
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	4a6b      	ldr	r2, [pc, #428]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800995c:	fa22 f303 	lsr.w	r3, r2, r3
 8009960:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997a:	4b62      	ldr	r3, [pc, #392]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998a:	ed97 6a02 	vldr	s12, [r7, #8]
 800998e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80099aa:	e087      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80099ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099be:	4b51      	ldr	r3, [pc, #324]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80099d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099ee:	e065      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80099fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a02:	4b40      	ldr	r3, [pc, #256]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a32:	e043      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a46:	4b2f      	ldr	r3, [pc, #188]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a76:	e021      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009abc:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac0:	0a5b      	lsrs	r3, r3, #9
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae0:	ee17 3a90 	vmov	r3, s15
 8009ae4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009ae6:	e005      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61bb      	str	r3, [r7, #24]
      break;
 8009aec:	e002      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009af0:	61bb      	str	r3, [r7, #24]
      break;
 8009af2:	bf00      	nop
  }

  return sysclockfreq;
 8009af4:	69bb      	ldr	r3, [r7, #24]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3724      	adds	r7, #36	; 0x24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	58024400 	.word	0x58024400
 8009b08:	03d09000 	.word	0x03d09000
 8009b0c:	003d0900 	.word	0x003d0900
 8009b10:	017d7840 	.word	0x017d7840
 8009b14:	46000000 	.word	0x46000000
 8009b18:	4c742400 	.word	0x4c742400
 8009b1c:	4a742400 	.word	0x4a742400
 8009b20:	4bbebc20 	.word	0x4bbebc20

08009b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b2a:	f7ff fe81 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	0a1b      	lsrs	r3, r3, #8
 8009b36:	f003 030f 	and.w	r3, r3, #15
 8009b3a:	490f      	ldr	r1, [pc, #60]	; (8009b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b3c:	5ccb      	ldrb	r3, [r1, r3]
 8009b3e:	f003 031f 	and.w	r3, r3, #31
 8009b42:	fa22 f303 	lsr.w	r3, r2, r3
 8009b46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b52:	5cd3      	ldrb	r3, [r2, r3]
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8009b60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b62:	4a07      	ldr	r2, [pc, #28]	; (8009b80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	58024400 	.word	0x58024400
 8009b78:	080160b4 	.word	0x080160b4
 8009b7c:	2400008c 	.word	0x2400008c
 8009b80:	24000088 	.word	0x24000088

08009b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b88:	f7ff ffcc 	bl	8009b24 <HAL_RCC_GetHCLKFreq>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	091b      	lsrs	r3, r3, #4
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	4904      	ldr	r1, [pc, #16]	; (8009bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b9a:	5ccb      	ldrb	r3, [r1, r3]
 8009b9c:	f003 031f 	and.w	r3, r3, #31
 8009ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	080160b4 	.word	0x080160b4

08009bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bb4:	f7ff ffb6 	bl	8009b24 <HAL_RCC_GetHCLKFreq>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	4904      	ldr	r1, [pc, #16]	; (8009bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bc6:	5ccb      	ldrb	r3, [r1, r3]
 8009bc8:	f003 031f 	and.w	r3, r3, #31
 8009bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	080160b4 	.word	0x080160b4

08009bdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	223f      	movs	r2, #63	; 0x3f
 8009bea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009bec:	4b1a      	ldr	r3, [pc, #104]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0207 	and.w	r2, r3, #7
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009bf8:	4b17      	ldr	r3, [pc, #92]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009c04:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f003 020f 	and.w	r2, r3, #15
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009c10:	4b11      	ldr	r3, [pc, #68]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009c28:	4b0b      	ldr	r3, [pc, #44]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009c34:	4b08      	ldr	r3, [pc, #32]	; (8009c58 <HAL_RCC_GetClockConfig+0x7c>)
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c40:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <HAL_RCC_GetClockConfig+0x80>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	601a      	str	r2, [r3, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	52002000 	.word	0x52002000

08009c60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c64:	b0ca      	sub	sp, #296	; 0x128
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c72:	2300      	movs	r3, #0
 8009c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009c84:	2500      	movs	r5, #0
 8009c86:	ea54 0305 	orrs.w	r3, r4, r5
 8009c8a:	d049      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c96:	d02f      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c9c:	d828      	bhi.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ca2:	d01a      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ca8:	d822      	bhi.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cb2:	d007      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009cb4:	e01c      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb6:	4bb8      	ldr	r3, [pc, #736]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	4ab7      	ldr	r2, [pc, #732]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cc2:	e01a      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc8:	3308      	adds	r3, #8
 8009cca:	2102      	movs	r1, #2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f002 fb61 	bl	800c394 <RCCEx_PLL2_Config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cd8:	e00f      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cde:	3328      	adds	r3, #40	; 0x28
 8009ce0:	2102      	movs	r1, #2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 fc08 	bl	800c4f8 <RCCEx_PLL3_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cee:	e004      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cf6:	e000      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d02:	4ba5      	ldr	r3, [pc, #660]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d10:	4aa1      	ldr	r2, [pc, #644]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d12:	430b      	orrs	r3, r1
 8009d14:	6513      	str	r3, [r2, #80]	; 0x50
 8009d16:	e003      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009d2c:	f04f 0900 	mov.w	r9, #0
 8009d30:	ea58 0309 	orrs.w	r3, r8, r9
 8009d34:	d047      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	d82a      	bhi.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d40:	a201      	add	r2, pc, #4	; (adr r2, 8009d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009d5d 	.word	0x08009d5d
 8009d4c:	08009d6b 	.word	0x08009d6b
 8009d50:	08009d81 	.word	0x08009d81
 8009d54:	08009d9f 	.word	0x08009d9f
 8009d58:	08009d9f 	.word	0x08009d9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d5c:	4b8e      	ldr	r3, [pc, #568]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	4a8d      	ldr	r2, [pc, #564]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d68:	e01a      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6e:	3308      	adds	r3, #8
 8009d70:	2100      	movs	r1, #0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f002 fb0e 	bl	800c394 <RCCEx_PLL2_Config>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d7e:	e00f      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d84:	3328      	adds	r3, #40	; 0x28
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f002 fbb5 	bl	800c4f8 <RCCEx_PLL3_Config>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d94:	e004      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d9c:	e000      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10a      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009da8:	4b7b      	ldr	r3, [pc, #492]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dac:	f023 0107 	bic.w	r1, r3, #7
 8009db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db6:	4a78      	ldr	r2, [pc, #480]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009db8:	430b      	orrs	r3, r1
 8009dba:	6513      	str	r3, [r2, #80]	; 0x50
 8009dbc:	e003      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009dd2:	f04f 0b00 	mov.w	fp, #0
 8009dd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8009dda:	d04c      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de6:	d030      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dec:	d829      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dee:	2bc0      	cmp	r3, #192	; 0xc0
 8009df0:	d02d      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009df2:	2bc0      	cmp	r3, #192	; 0xc0
 8009df4:	d825      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009df6:	2b80      	cmp	r3, #128	; 0x80
 8009df8:	d018      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009dfa:	2b80      	cmp	r3, #128	; 0x80
 8009dfc:	d821      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	d007      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009e06:	e01c      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e08:	4b63      	ldr	r3, [pc, #396]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	4a62      	ldr	r2, [pc, #392]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e14:	e01c      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 fab8 	bl	800c394 <RCCEx_PLL2_Config>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e2a:	e011      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e30:	3328      	adds	r3, #40	; 0x28
 8009e32:	2100      	movs	r1, #0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f002 fb5f 	bl	800c4f8 <RCCEx_PLL3_Config>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e40:	e006      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e48:	e002      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e4a:	bf00      	nop
 8009e4c:	e000      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009e58:	4b4f      	ldr	r3, [pc, #316]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e66:	4a4c      	ldr	r2, [pc, #304]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	6513      	str	r3, [r2, #80]	; 0x50
 8009e6c:	e003      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009e82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009e86:	2300      	movs	r3, #0
 8009e88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009e8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009e90:	460b      	mov	r3, r1
 8009e92:	4313      	orrs	r3, r2
 8009e94:	d053      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ea2:	d035      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ea8:	d82e      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009eaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009eae:	d031      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009eb4:	d828      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eba:	d01a      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ec0:	d822      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eca:	d007      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009ecc:	e01c      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ece:	4b32      	ldr	r3, [pc, #200]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	4a31      	ldr	r2, [pc, #196]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eda:	e01c      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f002 fa55 	bl	800c394 <RCCEx_PLL2_Config>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ef0:	e011      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef6:	3328      	adds	r3, #40	; 0x28
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 fafc 	bl	800c4f8 <RCCEx_PLL3_Config>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f06:	e006      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f0e:	e002      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009f10:	bf00      	nop
 8009f12:	e000      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10b      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f22:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f2e:	4a1a      	ldr	r2, [pc, #104]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	6593      	str	r3, [r2, #88]	; 0x58
 8009f34:	e003      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009f4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	d056      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f6a:	d038      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f70:	d831      	bhi.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f76:	d034      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009f78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f7c:	d82b      	bhi.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f82:	d01d      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f88:	d825      	bhi.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d006      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f92:	d00a      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f94:	e01f      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f96:	bf00      	nop
 8009f98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f9c:	4ba2      	ldr	r3, [pc, #648]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	4aa1      	ldr	r2, [pc, #644]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fa8:	e01c      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fae:	3308      	adds	r3, #8
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f002 f9ee 	bl	800c394 <RCCEx_PLL2_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009fbe:	e011      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc4:	3328      	adds	r3, #40	; 0x28
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f002 fa95 	bl	800c4f8 <RCCEx_PLL3_Config>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fd4:	e006      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10b      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009fec:	4b8e      	ldr	r3, [pc, #568]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ffc:	4a8a      	ldr	r2, [pc, #552]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ffe:	430b      	orrs	r3, r1
 800a000:	6593      	str	r3, [r2, #88]	; 0x58
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a022:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a026:	460b      	mov	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	d03a      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a032:	2b30      	cmp	r3, #48	; 0x30
 800a034:	d01f      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a036:	2b30      	cmp	r3, #48	; 0x30
 800a038:	d819      	bhi.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	d00c      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a03e:	2b20      	cmp	r3, #32
 800a040:	d815      	bhi.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d019      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a046:	2b10      	cmp	r3, #16
 800a048:	d111      	bne.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04a:	4b77      	ldr	r3, [pc, #476]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	4a76      	ldr	r2, [pc, #472]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a054:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a056:	e011      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05c:	3308      	adds	r3, #8
 800a05e:	2102      	movs	r1, #2
 800a060:	4618      	mov	r0, r3
 800a062:	f002 f997 	bl	800c394 <RCCEx_PLL2_Config>
 800a066:	4603      	mov	r3, r0
 800a068:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a06c:	e006      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a074:	e002      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a07a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10a      	bne.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a084:	4b68      	ldr	r3, [pc, #416]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a088:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a092:	4a65      	ldr	r2, [pc, #404]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a094:	430b      	orrs	r3, r1
 800a096:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a098:	e003      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a09e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a0ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	d051      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0cc:	d035      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a0ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d2:	d82e      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0d8:	d031      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a0da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0de:	d828      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0e4:	d01a      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a0e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ea:	d822      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f4:	d007      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a0f6:	e01c      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f8:	4b4b      	ldr	r3, [pc, #300]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	4a4a      	ldr	r2, [pc, #296]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a104:	e01c      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10a:	3308      	adds	r3, #8
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f002 f940 	bl	800c394 <RCCEx_PLL2_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a11a:	e011      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a120:	3328      	adds	r3, #40	; 0x28
 800a122:	2100      	movs	r1, #0
 800a124:	4618      	mov	r0, r3
 800a126:	f002 f9e7 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a130:	e006      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a138:	e002      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a13e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a148:	4b37      	ldr	r3, [pc, #220]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a156:	4a34      	ldr	r2, [pc, #208]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a158:	430b      	orrs	r3, r1
 800a15a:	6513      	str	r3, [r2, #80]	; 0x50
 800a15c:	e003      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a176:	2300      	movs	r3, #0
 800a178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a17c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a180:	460b      	mov	r3, r1
 800a182:	4313      	orrs	r3, r2
 800a184:	d056      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a18c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a190:	d033      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a196:	d82c      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a19c:	d02f      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a19e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1a2:	d826      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1a8:	d02b      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a1aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1ae:	d820      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1b4:	d012      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a1b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1ba:	d81a      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d022      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c4:	d115      	bne.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 f8e0 	bl	800c394 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1da:	e015      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	3328      	adds	r3, #40	; 0x28
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f002 f987 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1f0:	e00a      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1f8:	e006      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1fa:	bf00      	nop
 800a1fc:	e004      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1fe:	bf00      	nop
 800a200:	e002      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a202:	bf00      	nop
 800a204:	e000      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a206:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10d      	bne.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a214:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a21e:	4a02      	ldr	r2, [pc, #8]	; (800a228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a220:	430b      	orrs	r3, r1
 800a222:	6513      	str	r3, [r2, #80]	; 0x50
 800a224:	e006      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a226:	bf00      	nop
 800a228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a230:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a244:	2300      	movs	r3, #0
 800a246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a24a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a24e:	460b      	mov	r3, r1
 800a250:	4313      	orrs	r3, r2
 800a252:	d055      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a25c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a260:	d033      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a266:	d82c      	bhi.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26c:	d02f      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a272:	d826      	bhi.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a274:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a278:	d02b      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a27a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a27e:	d820      	bhi.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a284:	d012      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28a:	d81a      	bhi.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d022      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a294:	d115      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29a:	3308      	adds	r3, #8
 800a29c:	2101      	movs	r1, #1
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f002 f878 	bl	800c394 <RCCEx_PLL2_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2aa:	e015      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b0:	3328      	adds	r3, #40	; 0x28
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f002 f91f 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2c0:	e00a      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2c8:	e006      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2ca:	bf00      	nop
 800a2cc:	e004      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2ce:	bf00      	nop
 800a2d0:	e002      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2d2:	bf00      	nop
 800a2d4:	e000      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10b      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2e0:	4ba3      	ldr	r3, [pc, #652]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2f0:	4a9f      	ldr	r2, [pc, #636]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	6593      	str	r3, [r2, #88]	; 0x58
 800a2f6:	e003      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a30c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a310:	2300      	movs	r3, #0
 800a312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a31a:	460b      	mov	r3, r1
 800a31c:	4313      	orrs	r3, r2
 800a31e:	d037      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a32a:	d00e      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a32c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a330:	d816      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d018      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a33a:	d111      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a33c:	4b8c      	ldr	r3, [pc, #560]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a8b      	ldr	r2, [pc, #556]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a348:	e00f      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34e:	3308      	adds	r3, #8
 800a350:	2101      	movs	r1, #1
 800a352:	4618      	mov	r0, r3
 800a354:	f002 f81e 	bl	800c394 <RCCEx_PLL2_Config>
 800a358:	4603      	mov	r3, r0
 800a35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a35e:	e004      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a366:	e000      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a36a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a372:	4b7f      	ldr	r3, [pc, #508]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a376:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a380:	4a7b      	ldr	r2, [pc, #492]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a382:	430b      	orrs	r3, r1
 800a384:	6513      	str	r3, [r2, #80]	; 0x50
 800a386:	e003      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a39c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	d039      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d81c      	bhi.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a3ba:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a3fd 	.word	0x0800a3fd
 800a3c4:	0800a3d1 	.word	0x0800a3d1
 800a3c8:	0800a3df 	.word	0x0800a3df
 800a3cc:	0800a3fd 	.word	0x0800a3fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d0:	4b67      	ldr	r3, [pc, #412]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	4a66      	ldr	r2, [pc, #408]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3dc:	e00f      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	2102      	movs	r1, #2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 ffd4 	bl	800c394 <RCCEx_PLL2_Config>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3f2:	e004      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3fa:	e000      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a406:	4b5a      	ldr	r3, [pc, #360]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40a:	f023 0103 	bic.w	r1, r3, #3
 800a40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a414:	4a56      	ldr	r2, [pc, #344]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a416:	430b      	orrs	r3, r1
 800a418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a41a:	e003      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a434:	2300      	movs	r3, #0
 800a436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a43a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a43e:	460b      	mov	r3, r1
 800a440:	4313      	orrs	r3, r2
 800a442:	f000 809f 	beq.w	800a584 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a446:	4b4b      	ldr	r3, [pc, #300]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a4a      	ldr	r2, [pc, #296]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a44c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a450:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a452:	f7f9 f929 	bl	80036a8 <HAL_GetTick>
 800a456:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a45a:	e00b      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a45c:	f7f9 f924 	bl	80036a8 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b64      	cmp	r3, #100	; 0x64
 800a46a:	d903      	bls.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a472:	e005      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a474:	4b3f      	ldr	r3, [pc, #252]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0ed      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a484:	2b00      	cmp	r3, #0
 800a486:	d179      	bne.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a488:	4b39      	ldr	r3, [pc, #228]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a48a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a494:	4053      	eors	r3, r2
 800a496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d015      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a49e:	4b34      	ldr	r3, [pc, #208]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4aa:	4b31      	ldr	r3, [pc, #196]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	4a30      	ldr	r2, [pc, #192]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4b6:	4b2e      	ldr	r3, [pc, #184]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	4a2d      	ldr	r2, [pc, #180]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4c2:	4a2b      	ldr	r2, [pc, #172]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d6:	d118      	bne.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d8:	f7f9 f8e6 	bl	80036a8 <HAL_GetTick>
 800a4dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4e0:	e00d      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e2:	f7f9 f8e1 	bl	80036a8 <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a4ec:	1ad2      	subs	r2, r2, r3
 800a4ee:	f241 3388 	movw	r3, #5000	; 0x1388
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d903      	bls.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a4fc:	e005      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0eb      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a50a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d129      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a522:	d10e      	bne.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a524:	4b12      	ldr	r3, [pc, #72]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a530:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a534:	091a      	lsrs	r2, r3, #4
 800a536:	4b10      	ldr	r3, [pc, #64]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a538:	4013      	ands	r3, r2
 800a53a:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6113      	str	r3, [r2, #16]
 800a540:	e005      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a542:	4b0b      	ldr	r3, [pc, #44]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	4a0a      	ldr	r2, [pc, #40]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a548:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a54c:	6113      	str	r3, [r2, #16]
 800a54e:	4b08      	ldr	r3, [pc, #32]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a550:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a55a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a55e:	4a04      	ldr	r2, [pc, #16]	; (800a570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a560:	430b      	orrs	r3, r1
 800a562:	6713      	str	r3, [r2, #112]	; 0x70
 800a564:	e00e      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a56a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a56e:	e009      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a570:	58024400 	.word	0x58024400
 800a574:	58024800 	.word	0x58024800
 800a578:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f002 0301 	and.w	r3, r2, #1
 800a590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a594:	2300      	movs	r3, #0
 800a596:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a59a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	f000 8089 	beq.w	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ac:	2b28      	cmp	r3, #40	; 0x28
 800a5ae:	d86b      	bhi.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a5b0:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a691 	.word	0x0800a691
 800a5bc:	0800a689 	.word	0x0800a689
 800a5c0:	0800a689 	.word	0x0800a689
 800a5c4:	0800a689 	.word	0x0800a689
 800a5c8:	0800a689 	.word	0x0800a689
 800a5cc:	0800a689 	.word	0x0800a689
 800a5d0:	0800a689 	.word	0x0800a689
 800a5d4:	0800a689 	.word	0x0800a689
 800a5d8:	0800a65d 	.word	0x0800a65d
 800a5dc:	0800a689 	.word	0x0800a689
 800a5e0:	0800a689 	.word	0x0800a689
 800a5e4:	0800a689 	.word	0x0800a689
 800a5e8:	0800a689 	.word	0x0800a689
 800a5ec:	0800a689 	.word	0x0800a689
 800a5f0:	0800a689 	.word	0x0800a689
 800a5f4:	0800a689 	.word	0x0800a689
 800a5f8:	0800a673 	.word	0x0800a673
 800a5fc:	0800a689 	.word	0x0800a689
 800a600:	0800a689 	.word	0x0800a689
 800a604:	0800a689 	.word	0x0800a689
 800a608:	0800a689 	.word	0x0800a689
 800a60c:	0800a689 	.word	0x0800a689
 800a610:	0800a689 	.word	0x0800a689
 800a614:	0800a689 	.word	0x0800a689
 800a618:	0800a691 	.word	0x0800a691
 800a61c:	0800a689 	.word	0x0800a689
 800a620:	0800a689 	.word	0x0800a689
 800a624:	0800a689 	.word	0x0800a689
 800a628:	0800a689 	.word	0x0800a689
 800a62c:	0800a689 	.word	0x0800a689
 800a630:	0800a689 	.word	0x0800a689
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a691 	.word	0x0800a691
 800a63c:	0800a689 	.word	0x0800a689
 800a640:	0800a689 	.word	0x0800a689
 800a644:	0800a689 	.word	0x0800a689
 800a648:	0800a689 	.word	0x0800a689
 800a64c:	0800a689 	.word	0x0800a689
 800a650:	0800a689 	.word	0x0800a689
 800a654:	0800a689 	.word	0x0800a689
 800a658:	0800a691 	.word	0x0800a691
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a660:	3308      	adds	r3, #8
 800a662:	2101      	movs	r1, #1
 800a664:	4618      	mov	r0, r3
 800a666:	f001 fe95 	bl	800c394 <RCCEx_PLL2_Config>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a670:	e00f      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a676:	3328      	adds	r3, #40	; 0x28
 800a678:	2101      	movs	r1, #1
 800a67a:	4618      	mov	r0, r3
 800a67c:	f001 ff3c 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a686:	e004      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a68e:	e000      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10a      	bne.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a69a:	4bbf      	ldr	r3, [pc, #764]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a8:	4abb      	ldr	r2, [pc, #748]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6aa:	430b      	orrs	r3, r1
 800a6ac:	6553      	str	r3, [r2, #84]	; 0x54
 800a6ae:	e003      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f002 0302 	and.w	r3, r2, #2
 800a6c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a6ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d041      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6de:	2b05      	cmp	r3, #5
 800a6e0:	d824      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a6e2:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e8:	0800a735 	.word	0x0800a735
 800a6ec:	0800a701 	.word	0x0800a701
 800a6f0:	0800a717 	.word	0x0800a717
 800a6f4:	0800a735 	.word	0x0800a735
 800a6f8:	0800a735 	.word	0x0800a735
 800a6fc:	0800a735 	.word	0x0800a735
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a704:	3308      	adds	r3, #8
 800a706:	2101      	movs	r1, #1
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 fe43 	bl	800c394 <RCCEx_PLL2_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a714:	e00f      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71a:	3328      	adds	r3, #40	; 0x28
 800a71c:	2101      	movs	r1, #1
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 feea 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a72a:	e004      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a732:	e000      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a73e:	4b96      	ldr	r3, [pc, #600]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a742:	f023 0107 	bic.w	r1, r3, #7
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a74c:	4a92      	ldr	r2, [pc, #584]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a74e:	430b      	orrs	r3, r1
 800a750:	6553      	str	r3, [r2, #84]	; 0x54
 800a752:	e003      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f002 0304 	and.w	r3, r2, #4
 800a768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a772:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a776:	460b      	mov	r3, r1
 800a778:	4313      	orrs	r3, r2
 800a77a:	d044      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a784:	2b05      	cmp	r3, #5
 800a786:	d825      	bhi.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a788:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78e:	bf00      	nop
 800a790:	0800a7dd 	.word	0x0800a7dd
 800a794:	0800a7a9 	.word	0x0800a7a9
 800a798:	0800a7bf 	.word	0x0800a7bf
 800a79c:	0800a7dd 	.word	0x0800a7dd
 800a7a0:	0800a7dd 	.word	0x0800a7dd
 800a7a4:	0800a7dd 	.word	0x0800a7dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 fdef 	bl	800c394 <RCCEx_PLL2_Config>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7bc:	e00f      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c2:	3328      	adds	r3, #40	; 0x28
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f001 fe96 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7d2:	e004      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7da:	e000      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10b      	bne.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7e6:	4b6c      	ldr	r3, [pc, #432]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ea:	f023 0107 	bic.w	r1, r3, #7
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7f6:	4a68      	ldr	r2, [pc, #416]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7f8:	430b      	orrs	r3, r1
 800a7fa:	6593      	str	r3, [r2, #88]	; 0x58
 800a7fc:	e003      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f002 0320 	and.w	r3, r2, #32
 800a812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a816:	2300      	movs	r3, #0
 800a818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a81c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a820:	460b      	mov	r3, r1
 800a822:	4313      	orrs	r3, r2
 800a824:	d055      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a82e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a832:	d033      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a838:	d82c      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d02f      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a844:	d826      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a846:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a84a:	d02b      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a84c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a850:	d820      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a856:	d012      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85c:	d81a      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d022      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a866:	d115      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86c:	3308      	adds	r3, #8
 800a86e:	2100      	movs	r1, #0
 800a870:	4618      	mov	r0, r3
 800a872:	f001 fd8f 	bl	800c394 <RCCEx_PLL2_Config>
 800a876:	4603      	mov	r3, r0
 800a878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a87c:	e015      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a882:	3328      	adds	r3, #40	; 0x28
 800a884:	2102      	movs	r1, #2
 800a886:	4618      	mov	r0, r3
 800a888:	f001 fe36 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a88c:	4603      	mov	r3, r0
 800a88e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a892:	e00a      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a89a:	e006      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a89c:	bf00      	nop
 800a89e:	e004      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8a0:	bf00      	nop
 800a8a2:	e002      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10b      	bne.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8b2:	4b39      	ldr	r3, [pc, #228]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c2:	4a35      	ldr	r2, [pc, #212]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	6553      	str	r3, [r2, #84]	; 0x54
 800a8c8:	e003      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a8de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a8e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	d058      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8fe:	d033      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a900:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a904:	d82c      	bhi.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90a:	d02f      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a90c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a910:	d826      	bhi.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a916:	d02b      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a91c:	d820      	bhi.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a91e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a922:	d012      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a928:	d81a      	bhi.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d022      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a92e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a932:	d115      	bne.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a938:	3308      	adds	r3, #8
 800a93a:	2100      	movs	r1, #0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f001 fd29 	bl	800c394 <RCCEx_PLL2_Config>
 800a942:	4603      	mov	r3, r0
 800a944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a948:	e015      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94e:	3328      	adds	r3, #40	; 0x28
 800a950:	2102      	movs	r1, #2
 800a952:	4618      	mov	r0, r3
 800a954:	f001 fdd0 	bl	800c4f8 <RCCEx_PLL3_Config>
 800a958:	4603      	mov	r3, r0
 800a95a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a95e:	e00a      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a966:	e006      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a968:	bf00      	nop
 800a96a:	e004      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a96c:	bf00      	nop
 800a96e:	e002      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a970:	bf00      	nop
 800a972:	e000      	b.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a974:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10e      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a982:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a98e:	4a02      	ldr	r2, [pc, #8]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a990:	430b      	orrs	r3, r1
 800a992:	6593      	str	r3, [r2, #88]	; 0x58
 800a994:	e006      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a996:	bf00      	nop
 800a998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a9b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	d055      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a9cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9d0:	d033      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a9d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9d6:	d82c      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9dc:	d02f      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a9de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e2:	d826      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9e8:	d02b      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a9ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9ee:	d820      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9f4:	d012      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a9f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9fa:	d81a      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d022      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800aa00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa04:	d115      	bne.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 fcc0 	bl	800c394 <RCCEx_PLL2_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa1a:	e015      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa20:	3328      	adds	r3, #40	; 0x28
 800aa22:	2102      	movs	r1, #2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 fd67 	bl	800c4f8 <RCCEx_PLL3_Config>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa30:	e00a      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa38:	e006      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa3a:	bf00      	nop
 800aa3c:	e004      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa3e:	bf00      	nop
 800aa40:	e002      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa42:	bf00      	nop
 800aa44:	e000      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10b      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa50:	4ba1      	ldr	r3, [pc, #644]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800aa58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa60:	4a9d      	ldr	r2, [pc, #628]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa62:	430b      	orrs	r3, r1
 800aa64:	6593      	str	r3, [r2, #88]	; 0x58
 800aa66:	e003      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f002 0308 	and.w	r3, r2, #8
 800aa7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa80:	2300      	movs	r3, #0
 800aa82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d01e      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aa90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9c:	d10c      	bne.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa2:	3328      	adds	r3, #40	; 0x28
 800aaa4:	2102      	movs	r1, #2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 fd26 	bl	800c4f8 <RCCEx_PLL3_Config>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aab8:	4b87      	ldr	r3, [pc, #540]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aabc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac8:	4a83      	ldr	r2, [pc, #524]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaca:	430b      	orrs	r3, r1
 800aacc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f002 0310 	and.w	r3, r2, #16
 800aada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aade:	2300      	movs	r3, #0
 800aae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aae4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aae8:	460b      	mov	r3, r1
 800aaea:	4313      	orrs	r3, r2
 800aaec:	d01e      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aafa:	d10c      	bne.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab00:	3328      	adds	r3, #40	; 0x28
 800ab02:	2102      	movs	r1, #2
 800ab04:	4618      	mov	r0, r3
 800ab06:	f001 fcf7 	bl	800c4f8 <RCCEx_PLL3_Config>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab16:	4b70      	ldr	r3, [pc, #448]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ab1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab26:	4a6c      	ldr	r2, [pc, #432]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ab38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ab46:	460b      	mov	r3, r1
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	d03e      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab58:	d022      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ab5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab5e:	d81b      	bhi.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ab64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab68:	d00b      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ab6a:	e015      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab70:	3308      	adds	r3, #8
 800ab72:	2100      	movs	r1, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 fc0d 	bl	800c394 <RCCEx_PLL2_Config>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab80:	e00f      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab86:	3328      	adds	r3, #40	; 0x28
 800ab88:	2102      	movs	r1, #2
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 fcb4 	bl	800c4f8 <RCCEx_PLL3_Config>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab96:	e004      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab9e:	e000      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10b      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abaa:	4b4b      	ldr	r3, [pc, #300]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800abb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abba:	4a47      	ldr	r2, [pc, #284]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abbc:	430b      	orrs	r3, r1
 800abbe:	6593      	str	r3, [r2, #88]	; 0x58
 800abc0:	e003      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800abd6:	67bb      	str	r3, [r7, #120]	; 0x78
 800abd8:	2300      	movs	r3, #0
 800abda:	67fb      	str	r3, [r7, #124]	; 0x7c
 800abdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800abe0:	460b      	mov	r3, r1
 800abe2:	4313      	orrs	r3, r2
 800abe4:	d03b      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abf2:	d01f      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800abf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abf8:	d818      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800abfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abfe:	d003      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ac00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac04:	d007      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ac06:	e011      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac08:	4b33      	ldr	r3, [pc, #204]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	4a32      	ldr	r2, [pc, #200]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac14:	e00f      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac1a:	3328      	adds	r3, #40	; 0x28
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f001 fc6a 	bl	800c4f8 <RCCEx_PLL3_Config>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac2a:	e004      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac32:	e000      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ac34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10b      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac3e:	4b26      	ldr	r3, [pc, #152]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ac46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	4a22      	ldr	r2, [pc, #136]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6553      	str	r3, [r2, #84]	; 0x54
 800ac54:	e003      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ac6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	677b      	str	r3, [r7, #116]	; 0x74
 800ac70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ac74:	460b      	mov	r3, r1
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d034      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ac84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac88:	d007      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ac8a:	e011      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	4a11      	ldr	r2, [pc, #68]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac98:	e00e      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9e:	3308      	adds	r3, #8
 800aca0:	2102      	movs	r1, #2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f001 fb76 	bl	800c394 <RCCEx_PLL2_Config>
 800aca8:	4603      	mov	r3, r0
 800acaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800acae:	e003      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10d      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acc0:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800accc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acce:	4a02      	ldr	r2, [pc, #8]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acd0:	430b      	orrs	r3, r1
 800acd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acd4:	e006      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800acd6:	bf00      	nop
 800acd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ace0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ace4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800acf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800acf2:	2300      	movs	r3, #0
 800acf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acf6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800acfa:	460b      	mov	r3, r1
 800acfc:	4313      	orrs	r3, r2
 800acfe:	d00c      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad04:	3328      	adds	r3, #40	; 0x28
 800ad06:	2102      	movs	r1, #2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f001 fbf5 	bl	800c4f8 <RCCEx_PLL3_Config>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ad26:	663b      	str	r3, [r7, #96]	; 0x60
 800ad28:	2300      	movs	r3, #0
 800ad2a:	667b      	str	r3, [r7, #100]	; 0x64
 800ad2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ad30:	460b      	mov	r3, r1
 800ad32:	4313      	orrs	r3, r2
 800ad34:	d038      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad42:	d018      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ad44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad48:	d811      	bhi.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad4e:	d014      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ad50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad54:	d80b      	bhi.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d011      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ad5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5e:	d106      	bne.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad60:	4bc3      	ldr	r3, [pc, #780]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	4ac2      	ldr	r2, [pc, #776]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ad6c:	e008      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad74:	e004      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad76:	bf00      	nop
 800ad78:	e002      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad7a:	bf00      	nop
 800ad7c:	e000      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10b      	bne.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad88:	4bb9      	ldr	r3, [pc, #740]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad98:	4ab5      	ldr	r2, [pc, #724]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad9a:	430b      	orrs	r3, r1
 800ad9c:	6553      	str	r3, [r2, #84]	; 0x54
 800ad9e:	e003      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ada4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800adb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800adb6:	2300      	movs	r3, #0
 800adb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800adbe:	460b      	mov	r3, r1
 800adc0:	4313      	orrs	r3, r2
 800adc2:	d009      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800adc4:	4baa      	ldr	r3, [pc, #680]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800adcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add2:	4aa7      	ldr	r2, [pc, #668]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800add4:	430b      	orrs	r3, r1
 800add6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800add8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ade4:	653b      	str	r3, [r7, #80]	; 0x50
 800ade6:	2300      	movs	r3, #0
 800ade8:	657b      	str	r3, [r7, #84]	; 0x54
 800adea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800adee:	460b      	mov	r3, r1
 800adf0:	4313      	orrs	r3, r2
 800adf2:	d00a      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800adf4:	4b9e      	ldr	r3, [pc, #632]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800adfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ae04:	4a9a      	ldr	r2, [pc, #616]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae06:	430b      	orrs	r3, r1
 800ae08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ae16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae18:	2300      	movs	r3, #0
 800ae1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ae20:	460b      	mov	r3, r1
 800ae22:	4313      	orrs	r3, r2
 800ae24:	d009      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae26:	4b92      	ldr	r3, [pc, #584]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ae2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae34:	4a8e      	ldr	r2, [pc, #568]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae36:	430b      	orrs	r3, r1
 800ae38:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ae46:	643b      	str	r3, [r7, #64]	; 0x40
 800ae48:	2300      	movs	r3, #0
 800ae4a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ae50:	460b      	mov	r3, r1
 800ae52:	4313      	orrs	r3, r2
 800ae54:	d00e      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae56:	4b86      	ldr	r3, [pc, #536]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	4a85      	ldr	r2, [pc, #532]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae60:	6113      	str	r3, [r2, #16]
 800ae62:	4b83      	ldr	r3, [pc, #524]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae64:	6919      	ldr	r1, [r3, #16]
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ae6e:	4a80      	ldr	r2, [pc, #512]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae70:	430b      	orrs	r3, r1
 800ae72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae82:	2300      	movs	r3, #0
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	d009      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae90:	4b77      	ldr	r3, [pc, #476]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae94:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9e:	4a74      	ldr	r2, [pc, #464]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aea0:	430b      	orrs	r3, r1
 800aea2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aeb0:	633b      	str	r3, [r7, #48]	; 0x30
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	637b      	str	r3, [r7, #52]	; 0x34
 800aeb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aeba:	460b      	mov	r3, r1
 800aebc:	4313      	orrs	r3, r2
 800aebe:	d00a      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aec0:	4b6b      	ldr	r3, [pc, #428]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed0:	4a67      	ldr	r2, [pc, #412]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aed2:	430b      	orrs	r3, r1
 800aed4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	2100      	movs	r1, #0
 800aee0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aee8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aeec:	460b      	mov	r3, r1
 800aeee:	4313      	orrs	r3, r2
 800aef0:	d011      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef6:	3308      	adds	r3, #8
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 fa4a 	bl	800c394 <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	2100      	movs	r1, #0
 800af20:	6239      	str	r1, [r7, #32]
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
 800af28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af2c:	460b      	mov	r3, r1
 800af2e:	4313      	orrs	r3, r2
 800af30:	d011      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af36:	3308      	adds	r3, #8
 800af38:	2101      	movs	r1, #1
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 fa2a 	bl	800c394 <RCCEx_PLL2_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	2100      	movs	r1, #0
 800af60:	61b9      	str	r1, [r7, #24]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	61fb      	str	r3, [r7, #28]
 800af68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af6c:	460b      	mov	r3, r1
 800af6e:	4313      	orrs	r3, r2
 800af70:	d011      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af76:	3308      	adds	r3, #8
 800af78:	2102      	movs	r1, #2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f001 fa0a 	bl	800c394 <RCCEx_PLL2_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800af96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	2100      	movs	r1, #0
 800afa0:	6139      	str	r1, [r7, #16]
 800afa2:	f003 0308 	and.w	r3, r3, #8
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800afac:	460b      	mov	r3, r1
 800afae:	4313      	orrs	r3, r2
 800afb0:	d011      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb6:	3328      	adds	r3, #40	; 0x28
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 fa9c 	bl	800c4f8 <RCCEx_PLL3_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800afc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800afd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	2100      	movs	r1, #0
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	f003 0310 	and.w	r3, r3, #16
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800afec:	460b      	mov	r3, r1
 800afee:	4313      	orrs	r3, r2
 800aff0:	d011      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff6:	3328      	adds	r3, #40	; 0x28
 800aff8:	2101      	movs	r1, #1
 800affa:	4618      	mov	r0, r3
 800affc:	f001 fa7c 	bl	800c4f8 <RCCEx_PLL3_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	2100      	movs	r1, #0
 800b020:	6039      	str	r1, [r7, #0]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	607b      	str	r3, [r7, #4]
 800b028:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b02c:	460b      	mov	r3, r1
 800b02e:	4313      	orrs	r3, r2
 800b030:	d011      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b036:	3328      	adds	r3, #40	; 0x28
 800b038:	2102      	movs	r1, #2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fa5c 	bl	800c4f8 <RCCEx_PLL3_Config>
 800b040:	4603      	mov	r3, r0
 800b042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b052:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b056:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	e000      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
}
 800b064:	4618      	mov	r0, r3
 800b066:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b06a:	46bd      	mov	sp, r7
 800b06c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b070:	58024400 	.word	0x58024400

0800b074 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b090      	sub	sp, #64	; 0x40
 800b078:	af00      	add	r7, sp, #0
 800b07a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b07e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b082:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b086:	430b      	orrs	r3, r1
 800b088:	f040 8094 	bne.w	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b08c:	4b9e      	ldr	r3, [pc, #632]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b090:	f003 0307 	and.w	r3, r3, #7
 800b094:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	2b04      	cmp	r3, #4
 800b09a:	f200 8087 	bhi.w	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b09e:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a4:	0800b0b9 	.word	0x0800b0b9
 800b0a8:	0800b0e1 	.word	0x0800b0e1
 800b0ac:	0800b109 	.word	0x0800b109
 800b0b0:	0800b1a5 	.word	0x0800b1a5
 800b0b4:	0800b131 	.word	0x0800b131
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0b8:	4b93      	ldr	r3, [pc, #588]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0c4:	d108      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 f810 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d4:	f000 bd45 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0dc:	f000 bd41 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0e0:	4b89      	ldr	r3, [pc, #548]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0ec:	d108      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ee:	f107 0318 	add.w	r3, r7, #24
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fd54 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0fc:	f000 bd31 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b104:	f000 bd2d 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b108:	4b7f      	ldr	r3, [pc, #508]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b114:	d108      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b116:	f107 030c 	add.w	r3, r7, #12
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 fe94 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b124:	f000 bd1d 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b12c:	f000 bd19 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b130:	4b75      	ldr	r3, [pc, #468]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b138:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b13a:	4b73      	ldr	r3, [pc, #460]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0304 	and.w	r3, r3, #4
 800b142:	2b04      	cmp	r3, #4
 800b144:	d10c      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d109      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b14c:	4b6e      	ldr	r3, [pc, #440]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	08db      	lsrs	r3, r3, #3
 800b152:	f003 0303 	and.w	r3, r3, #3
 800b156:	4a6d      	ldr	r2, [pc, #436]	; (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b158:	fa22 f303 	lsr.w	r3, r2, r3
 800b15c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b15e:	e01f      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b160:	4b69      	ldr	r3, [pc, #420]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16c:	d106      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b174:	d102      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b176:	4b66      	ldr	r3, [pc, #408]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b17a:	e011      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b17c:	4b62      	ldr	r3, [pc, #392]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b188:	d106      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b190:	d102      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b192:	4b60      	ldr	r3, [pc, #384]	; (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b194:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b196:	e003      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b19c:	f000 bce1 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1a0:	f000 bcdf 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1a4:	4b5c      	ldr	r3, [pc, #368]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1a8:	f000 bcdb 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1b0:	f000 bcd7 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	f040 80ad 	bne.w	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b1c2:	4b51      	ldr	r3, [pc, #324]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b1ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1d2:	d056      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1da:	f200 8090 	bhi.w	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	2bc0      	cmp	r3, #192	; 0xc0
 800b1e2:	f000 8088 	beq.w	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	2bc0      	cmp	r3, #192	; 0xc0
 800b1ea:	f200 8088 	bhi.w	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	2b80      	cmp	r3, #128	; 0x80
 800b1f2:	d032      	beq.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	2b80      	cmp	r3, #128	; 0x80
 800b1f8:	f200 8081 	bhi.w	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	2b40      	cmp	r3, #64	; 0x40
 800b206:	d014      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b208:	e079      	b.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b20a:	4b3f      	ldr	r3, [pc, #252]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b216:	d108      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 ff67 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b226:	f000 bc9c 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b22e:	f000 bc98 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b232:	4b35      	ldr	r3, [pc, #212]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b23a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b23e:	d108      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b240:	f107 0318 	add.w	r3, r7, #24
 800b244:	4618      	mov	r0, r3
 800b246:	f000 fcab 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24e:	f000 bc88 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b256:	f000 bc84 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b25a:	4b2b      	ldr	r3, [pc, #172]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b266:	d108      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b268:	f107 030c 	add.w	r3, r7, #12
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 fdeb 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b276:	f000 bc74 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b27e:	f000 bc70 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b282:	4b21      	ldr	r3, [pc, #132]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b28c:	4b1e      	ldr	r3, [pc, #120]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b04      	cmp	r3, #4
 800b296:	d10c      	bne.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d109      	bne.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b29e:	4b1a      	ldr	r3, [pc, #104]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	08db      	lsrs	r3, r3, #3
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	4a18      	ldr	r2, [pc, #96]	; (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b0:	e01f      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2be:	d106      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2c6:	d102      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2c8:	4b11      	ldr	r3, [pc, #68]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2cc:	e011      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2da:	d106      	bne.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e2:	d102      	bne.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2e4:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e8:	e003      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2ee:	f000 bc38 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2f2:	f000 bc36 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2f6:	4b08      	ldr	r3, [pc, #32]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2fa:	f000 bc32 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b302:	f000 bc2e 	b.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
 800b30c:	03d09000 	.word	0x03d09000
 800b310:	003d0900 	.word	0x003d0900
 800b314:	017d7840 	.word	0x017d7840
 800b318:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b320:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b324:	430b      	orrs	r3, r1
 800b326:	f040 809c 	bne.w	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b32a:	4b9e      	ldr	r3, [pc, #632]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b332:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b33a:	d054      	beq.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b342:	f200 808b 	bhi.w	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b34c:	f000 8083 	beq.w	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b356:	f200 8081 	bhi.w	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b360:	d02f      	beq.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b368:	d878      	bhi.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d004      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b376:	d012      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b378:	e070      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b37a:	4b8a      	ldr	r3, [pc, #552]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b386:	d107      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 feaf 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b396:	e3e4      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b39c:	e3e1      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b39e:	4b81      	ldr	r3, [pc, #516]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3aa:	d107      	bne.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ac:	f107 0318 	add.w	r3, r7, #24
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fbf5 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ba:	e3d2      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c0:	e3cf      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3c2:	4b78      	ldr	r3, [pc, #480]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ce:	d107      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fd37 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3de:	e3c0      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e4:	e3bd      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3e6:	4b6f      	ldr	r3, [pc, #444]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3f0:	4b6c      	ldr	r3, [pc, #432]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	d10c      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b402:	4b68      	ldr	r3, [pc, #416]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	08db      	lsrs	r3, r3, #3
 800b408:	f003 0303 	and.w	r3, r3, #3
 800b40c:	4a66      	ldr	r2, [pc, #408]	; (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b40e:	fa22 f303 	lsr.w	r3, r2, r3
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b414:	e01e      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b416:	4b63      	ldr	r3, [pc, #396]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b422:	d106      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b42a:	d102      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b42c:	4b5f      	ldr	r3, [pc, #380]	; (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b430:	e010      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b432:	4b5c      	ldr	r3, [pc, #368]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b43e:	d106      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b446:	d102      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b448:	4b59      	ldr	r3, [pc, #356]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b44c:	e002      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b452:	e386      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b454:	e385      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b456:	4b57      	ldr	r3, [pc, #348]	; (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b45a:	e382      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b460:	e37f      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b466:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b46a:	430b      	orrs	r3, r1
 800b46c:	f040 80a7 	bne.w	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b470:	4b4c      	ldr	r3, [pc, #304]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b474:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b478:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b480:	d055      	beq.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b488:	f200 8096 	bhi.w	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b492:	f000 8084 	beq.w	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b49c:	f200 808c 	bhi.w	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4a6:	d030      	beq.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ae:	f200 8083 	bhi.w	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4be:	d012      	beq.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b4c0:	e07a      	b.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4c2:	4b38      	ldr	r3, [pc, #224]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ce:	d107      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fe0b 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4de:	e340      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e4:	e33d      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4e6:	4b2f      	ldr	r3, [pc, #188]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4f2:	d107      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4f4:	f107 0318 	add.w	r3, r7, #24
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fb51 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b502:	e32e      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b508:	e32b      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b50a:	4b26      	ldr	r3, [pc, #152]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b516:	d107      	bne.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b518:	f107 030c 	add.w	r3, r7, #12
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fc93 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b526:	e31c      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b52c:	e319      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b52e:	4b1d      	ldr	r3, [pc, #116]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b536:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b538:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b04      	cmp	r3, #4
 800b542:	d10c      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	2b00      	cmp	r3, #0
 800b548:	d109      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b54a:	4b16      	ldr	r3, [pc, #88]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	08db      	lsrs	r3, r3, #3
 800b550:	f003 0303 	and.w	r3, r3, #3
 800b554:	4a14      	ldr	r2, [pc, #80]	; (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b556:	fa22 f303 	lsr.w	r3, r2, r3
 800b55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b55c:	e01e      	b.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b55e:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b56a:	d106      	bne.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b572:	d102      	bne.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b574:	4b0d      	ldr	r3, [pc, #52]	; (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b576:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b578:	e010      	b.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b57a:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b586:	d106      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b58e:	d102      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b590:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b594:	e002      	b.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b59a:	e2e2      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b59c:	e2e1      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b59e:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a2:	e2de      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5a4:	58024400 	.word	0x58024400
 800b5a8:	03d09000 	.word	0x03d09000
 800b5ac:	003d0900 	.word	0x003d0900
 800b5b0:	017d7840 	.word	0x017d7840
 800b5b4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5bc:	e2d1      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b5be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	f040 809c 	bne.w	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b5cc:	4b93      	ldr	r3, [pc, #588]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b5d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5dc:	d054      	beq.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5e4:	f200 808b 	bhi.w	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5ee:	f000 8083 	beq.w	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5f8:	f200 8081 	bhi.w	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b602:	d02f      	beq.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b60a:	d878      	bhi.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d004      	beq.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b618:	d012      	beq.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b61a:	e070      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b61c:	4b7f      	ldr	r3, [pc, #508]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b628:	d107      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b62a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fd5e 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b638:	e293      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b63e:	e290      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b640:	4b76      	ldr	r3, [pc, #472]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b64c:	d107      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b64e:	f107 0318 	add.w	r3, r7, #24
 800b652:	4618      	mov	r0, r3
 800b654:	f000 faa4 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65c:	e281      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b662:	e27e      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b664:	4b6d      	ldr	r3, [pc, #436]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b670:	d107      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b672:	f107 030c 	add.w	r3, r7, #12
 800b676:	4618      	mov	r0, r3
 800b678:	f000 fbe6 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b680:	e26f      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b686:	e26c      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b688:	4b64      	ldr	r3, [pc, #400]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b68a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b68c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b690:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b692:	4b62      	ldr	r3, [pc, #392]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0304 	and.w	r3, r3, #4
 800b69a:	2b04      	cmp	r3, #4
 800b69c:	d10c      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d109      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a4:	4b5d      	ldr	r3, [pc, #372]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	08db      	lsrs	r3, r3, #3
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	4a5c      	ldr	r2, [pc, #368]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6b6:	e01e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6b8:	4b58      	ldr	r3, [pc, #352]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c4:	d106      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6cc:	d102      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6ce:	4b55      	ldr	r3, [pc, #340]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6d2:	e010      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6d4:	4b51      	ldr	r3, [pc, #324]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6e0:	d106      	bne.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e8:	d102      	bne.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6ea:	4b4f      	ldr	r3, [pc, #316]	; (800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6ee:	e002      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b6f4:	e235      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6f6:	e234      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6f8:	4b4c      	ldr	r3, [pc, #304]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6fc:	e231      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b702:	e22e      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b708:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b70c:	430b      	orrs	r3, r1
 800b70e:	f040 808f 	bne.w	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b712:	4b42      	ldr	r3, [pc, #264]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b716:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b722:	d06b      	beq.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b72a:	d874      	bhi.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b732:	d056      	beq.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b73a:	d86c      	bhi.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b742:	d03b      	beq.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b74a:	d864      	bhi.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b752:	d021      	beq.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b75a:	d85c      	bhi.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d004      	beq.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b768:	d004      	beq.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b76a:	e054      	b.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b76c:	f7fe fa0a 	bl	8009b84 <HAL_RCC_GetPCLK1Freq>
 800b770:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b772:	e1f6      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b774:	4b29      	ldr	r3, [pc, #164]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b77c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b780:	d107      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b782:	f107 0318 	add.w	r3, r7, #24
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fa0a 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b790:	e1e7      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b796:	e1e4      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b798:	4b20      	ldr	r3, [pc, #128]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7a4:	d107      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7a6:	f107 030c 	add.w	r3, r7, #12
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 fb4c 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b4:	e1d5      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ba:	e1d2      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7bc:	4b17      	ldr	r3, [pc, #92]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0304 	and.w	r3, r3, #4
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d109      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7c8:	4b14      	ldr	r3, [pc, #80]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	08db      	lsrs	r3, r3, #3
 800b7ce:	f003 0303 	and.w	r3, r3, #3
 800b7d2:	4a13      	ldr	r2, [pc, #76]	; (800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b7d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7da:	e1c2      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e0:	e1bf      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ee:	d102      	bne.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b7f0:	4b0c      	ldr	r3, [pc, #48]	; (800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7f4:	e1b5      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7fa:	e1b2      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7fc:	4b07      	ldr	r3, [pc, #28]	; (800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b808:	d102      	bne.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b80a:	4b07      	ldr	r3, [pc, #28]	; (800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80e:	e1a8      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b810:	2300      	movs	r3, #0
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b814:	e1a5      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b81a:	e1a2      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b81c:	58024400 	.word	0x58024400
 800b820:	03d09000 	.word	0x03d09000
 800b824:	003d0900 	.word	0x003d0900
 800b828:	017d7840 	.word	0x017d7840
 800b82c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b834:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b838:	430b      	orrs	r3, r1
 800b83a:	d173      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b83c:	4b9c      	ldr	r3, [pc, #624]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b844:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b84c:	d02f      	beq.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b854:	d863      	bhi.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b862:	d012      	beq.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b864:	e05b      	b.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b866:	4b92      	ldr	r3, [pc, #584]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b86e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b872:	d107      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b874:	f107 0318 	add.w	r3, r7, #24
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 f991 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b882:	e16e      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b888:	e16b      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b88a:	4b89      	ldr	r3, [pc, #548]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b896:	d107      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b898:	f107 030c 	add.w	r3, r7, #12
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fad3 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8a6:	e15c      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ac:	e159      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8ae:	4b80      	ldr	r3, [pc, #512]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8b8:	4b7d      	ldr	r3, [pc, #500]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0304 	and.w	r3, r3, #4
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	d10c      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8ca:	4b79      	ldr	r3, [pc, #484]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	08db      	lsrs	r3, r3, #3
 800b8d0:	f003 0303 	and.w	r3, r3, #3
 800b8d4:	4a77      	ldr	r2, [pc, #476]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8dc:	e01e      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8de:	4b74      	ldr	r3, [pc, #464]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ea:	d106      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f2:	d102      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8f4:	4b70      	ldr	r3, [pc, #448]	; (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8f8:	e010      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8fa:	4b6d      	ldr	r3, [pc, #436]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b906:	d106      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90e:	d102      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b910:	4b6a      	ldr	r3, [pc, #424]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b914:	e002      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b91a:	e122      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b91c:	e121      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b922:	e11e      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b924:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b928:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b92c:	430b      	orrs	r3, r1
 800b92e:	d133      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b930:	4b5f      	ldr	r3, [pc, #380]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b938:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b946:	d012      	beq.n	800b96e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b948:	e023      	b.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b94a:	4b59      	ldr	r3, [pc, #356]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b956:	d107      	bne.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fbc7 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b966:	e0fc      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b96c:	e0f9      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b96e:	4b50      	ldr	r3, [pc, #320]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b97a:	d107      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b97c:	f107 0318 	add.w	r3, r7, #24
 800b980:	4618      	mov	r0, r3
 800b982:	f000 f90d 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98a:	e0ea      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b990:	e0e7      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b996:	e0e4      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b99c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	f040 808d 	bne.w	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b9a6:	4b42      	ldr	r3, [pc, #264]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b9ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9b6:	d06b      	beq.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9be:	d874      	bhi.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c6:	d056      	beq.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ce:	d86c      	bhi.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9d6:	d03b      	beq.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9de:	d864      	bhi.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e6:	d021      	beq.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ee:	d85c      	bhi.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d004      	beq.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9fc:	d004      	beq.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b9fe:	e054      	b.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba00:	f000 f8b8 	bl	800bb74 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba04:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba06:	e0ac      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba08:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba14:	d107      	bne.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba16:	f107 0318 	add.w	r3, r7, #24
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 f8c0 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba24:	e09d      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba2a:	e09a      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba2c:	4b20      	ldr	r3, [pc, #128]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba38:	d107      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba3a:	f107 030c 	add.w	r3, r7, #12
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fa02 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba48:	e08b      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba4e:	e088      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba50:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	d109      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba5c:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	08db      	lsrs	r3, r3, #3
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ba68:	fa22 f303 	lsr.w	r3, r2, r3
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba6e:	e078      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba74:	e075      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba76:	4b0e      	ldr	r3, [pc, #56]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba82:	d102      	bne.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba88:	e06b      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba8e:	e068      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba9c:	d102      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ba9e:	4b07      	ldr	r3, [pc, #28]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa2:	e05e      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa8:	e05b      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baae:	e058      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bab0:	58024400 	.word	0x58024400
 800bab4:	03d09000 	.word	0x03d09000
 800bab8:	003d0900 	.word	0x003d0900
 800babc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bac4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bac8:	430b      	orrs	r3, r1
 800baca:	d148      	bne.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bacc:	4b27      	ldr	r3, [pc, #156]	; (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bad4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800badc:	d02a      	beq.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae4:	d838      	bhi.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d004      	beq.n	800baf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baf2:	d00d      	beq.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800baf4:	e030      	b.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800baf6:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bafe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb02:	d102      	bne.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bb04:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb08:	e02b      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0e:	e028      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb10:	4b16      	ldr	r3, [pc, #88]	; (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb1c:	d107      	bne.n	800bb2e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 fae4 	bl	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb2c:	e019      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb32:	e016      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb34:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb40:	d107      	bne.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb42:	f107 0318 	add.w	r3, r7, #24
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f82a 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb50:	e007      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb56:	e004      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb5c:	e001      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bb62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3740      	adds	r7, #64	; 0x40
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	58024400 	.word	0x58024400
 800bb70:	017d7840 	.word	0x017d7840

0800bb74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb78:	f7fd ffd4 	bl	8009b24 <HAL_RCC_GetHCLKFreq>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	091b      	lsrs	r3, r3, #4
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	4904      	ldr	r1, [pc, #16]	; (800bb9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb8a:	5ccb      	ldrb	r3, [r1, r3]
 800bb8c:	f003 031f 	and.w	r3, r3, #31
 800bb90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	58024400 	.word	0x58024400
 800bb9c:	080160b4 	.word	0x080160b4

0800bba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b089      	sub	sp, #36	; 0x24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bba8:	4ba1      	ldr	r3, [pc, #644]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbac:	f003 0303 	and.w	r3, r3, #3
 800bbb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bbb2:	4b9f      	ldr	r3, [pc, #636]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb6:	0b1b      	lsrs	r3, r3, #12
 800bbb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbbe:	4b9c      	ldr	r3, [pc, #624]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc2:	091b      	lsrs	r3, r3, #4
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bbca:	4b99      	ldr	r3, [pc, #612]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbce:	08db      	lsrs	r3, r3, #3
 800bbd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	fb02 f303 	mul.w	r3, r2, r3
 800bbda:	ee07 3a90 	vmov	s15, r3
 800bbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 8111 	beq.w	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	f000 8083 	beq.w	800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	f200 80a1 	bhi.w	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d056      	beq.n	800bcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc0a:	e099      	b.n	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc0c:	4b88      	ldr	r3, [pc, #544]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 0320 	and.w	r3, r3, #32
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d02d      	beq.n	800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc18:	4b85      	ldr	r3, [pc, #532]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	08db      	lsrs	r3, r3, #3
 800bc1e:	f003 0303 	and.w	r3, r3, #3
 800bc22:	4a84      	ldr	r2, [pc, #528]	; (800be34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc24:	fa22 f303 	lsr.w	r3, r2, r3
 800bc28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	ee07 3a90 	vmov	s15, r3
 800bc30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc42:	4b7b      	ldr	r3, [pc, #492]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc72:	e087      	b.n	800bd84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc86:	4b6a      	ldr	r3, [pc, #424]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcb6:	e065      	b.n	800bd84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcca:	4b59      	ldr	r3, [pc, #356]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcde:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcfa:	e043      	b.n	800bd84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0e:	4b48      	ldr	r3, [pc, #288]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd3e:	e021      	b.n	800bd84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd52:	4b37      	ldr	r3, [pc, #220]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5a:	ee07 3a90 	vmov	s15, r3
 800bd5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd62:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bd84:	4b2a      	ldr	r3, [pc, #168]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd88:	0a5b      	lsrs	r3, r3, #9
 800bd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd8e:	ee07 3a90 	vmov	s15, r3
 800bd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bda2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdaa:	ee17 2a90 	vmov	r2, s15
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bdb2:	4b1f      	ldr	r3, [pc, #124]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb6:	0c1b      	lsrs	r3, r3, #16
 800bdb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdbc:	ee07 3a90 	vmov	s15, r3
 800bdc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd8:	ee17 2a90 	vmov	r2, s15
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bde0:	4b13      	ldr	r3, [pc, #76]	; (800be30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde4:	0e1b      	lsrs	r3, r3, #24
 800bde6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be06:	ee17 2a90 	vmov	r2, s15
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be0e:	e008      	b.n	800be22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	609a      	str	r2, [r3, #8]
}
 800be22:	bf00      	nop
 800be24:	3724      	adds	r7, #36	; 0x24
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	58024400 	.word	0x58024400
 800be34:	03d09000 	.word	0x03d09000
 800be38:	46000000 	.word	0x46000000
 800be3c:	4c742400 	.word	0x4c742400
 800be40:	4a742400 	.word	0x4a742400
 800be44:	4bbebc20 	.word	0x4bbebc20

0800be48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be48:	b480      	push	{r7}
 800be4a:	b089      	sub	sp, #36	; 0x24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be50:	4ba1      	ldr	r3, [pc, #644]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be54:	f003 0303 	and.w	r3, r3, #3
 800be58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be5a:	4b9f      	ldr	r3, [pc, #636]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5e:	0d1b      	lsrs	r3, r3, #20
 800be60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be66:	4b9c      	ldr	r3, [pc, #624]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be72:	4b99      	ldr	r3, [pc, #612]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be76:	08db      	lsrs	r3, r3, #3
 800be78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	fb02 f303 	mul.w	r3, r2, r3
 800be82:	ee07 3a90 	vmov	s15, r3
 800be86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 8111 	beq.w	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b02      	cmp	r3, #2
 800be9a:	f000 8083 	beq.w	800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	f200 80a1 	bhi.w	800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d003      	beq.n	800beb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d056      	beq.n	800bf60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800beb2:	e099      	b.n	800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beb4:	4b88      	ldr	r3, [pc, #544]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0320 	and.w	r3, r3, #32
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d02d      	beq.n	800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bec0:	4b85      	ldr	r3, [pc, #532]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	08db      	lsrs	r3, r3, #3
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	4a84      	ldr	r2, [pc, #528]	; (800c0dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800becc:	fa22 f303 	lsr.w	r3, r2, r3
 800bed0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	ee07 3a90 	vmov	s15, r3
 800bed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beea:	4b7b      	ldr	r3, [pc, #492]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef2:	ee07 3a90 	vmov	s15, r3
 800bef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befa:	ed97 6a03 	vldr	s12, [r7, #12]
 800befe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf1a:	e087      	b.n	800c02c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2e:	4b6a      	ldr	r3, [pc, #424]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf36:	ee07 3a90 	vmov	s15, r3
 800bf3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf42:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf5e:	e065      	b.n	800c02c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf72:	4b59      	ldr	r3, [pc, #356]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf86:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfa2:	e043      	b.n	800c02c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bfb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb6:	4b48      	ldr	r3, [pc, #288]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfe6:	e021      	b.n	800c02c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffa:	4b37      	ldr	r3, [pc, #220]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c002:	ee07 3a90 	vmov	s15, r3
 800c006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c02a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c02c:	4b2a      	ldr	r3, [pc, #168]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c030:	0a5b      	lsrs	r3, r3, #9
 800c032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c042:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c046:	edd7 6a07 	vldr	s13, [r7, #28]
 800c04a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c04e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c052:	ee17 2a90 	vmov	r2, s15
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c05a:	4b1f      	ldr	r3, [pc, #124]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05e:	0c1b      	lsrs	r3, r3, #16
 800c060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c070:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c074:	edd7 6a07 	vldr	s13, [r7, #28]
 800c078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c07c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c080:	ee17 2a90 	vmov	r2, s15
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c088:	4b13      	ldr	r3, [pc, #76]	; (800c0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	0e1b      	lsrs	r3, r3, #24
 800c08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c09e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ae:	ee17 2a90 	vmov	r2, s15
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0b6:	e008      	b.n	800c0ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	609a      	str	r2, [r3, #8]
}
 800c0ca:	bf00      	nop
 800c0cc:	3724      	adds	r7, #36	; 0x24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	03d09000 	.word	0x03d09000
 800c0e0:	46000000 	.word	0x46000000
 800c0e4:	4c742400 	.word	0x4c742400
 800c0e8:	4a742400 	.word	0x4a742400
 800c0ec:	4bbebc20 	.word	0x4bbebc20

0800c0f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b089      	sub	sp, #36	; 0x24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0f8:	4ba0      	ldr	r3, [pc, #640]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fc:	f003 0303 	and.w	r3, r3, #3
 800c100:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c102:	4b9e      	ldr	r3, [pc, #632]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	091b      	lsrs	r3, r3, #4
 800c108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c10c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c10e:	4b9b      	ldr	r3, [pc, #620]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c118:	4b98      	ldr	r3, [pc, #608]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c11c:	08db      	lsrs	r3, r3, #3
 800c11e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	fb02 f303 	mul.w	r3, r2, r3
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c130:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 8111 	beq.w	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	f000 8083 	beq.w	800c24a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	2b02      	cmp	r3, #2
 800c148:	f200 80a1 	bhi.w	800c28e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d056      	beq.n	800c206 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c158:	e099      	b.n	800c28e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c15a:	4b88      	ldr	r3, [pc, #544]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 0320 	and.w	r3, r3, #32
 800c162:	2b00      	cmp	r3, #0
 800c164:	d02d      	beq.n	800c1c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c166:	4b85      	ldr	r3, [pc, #532]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	08db      	lsrs	r3, r3, #3
 800c16c:	f003 0303 	and.w	r3, r3, #3
 800c170:	4a83      	ldr	r2, [pc, #524]	; (800c380 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c172:	fa22 f303 	lsr.w	r3, r2, r3
 800c176:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	ee07 3a90 	vmov	s15, r3
 800c188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c18c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c190:	4b7a      	ldr	r3, [pc, #488]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c198:	ee07 3a90 	vmov	s15, r3
 800c19c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1c0:	e087      	b.n	800c2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d4:	4b69      	ldr	r3, [pc, #420]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1dc:	ee07 3a90 	vmov	s15, r3
 800c1e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c200:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c204:	e065      	b.n	800c2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	ee07 3a90 	vmov	s15, r3
 800c20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c210:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c38c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c218:	4b58      	ldr	r3, [pc, #352]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c220:	ee07 3a90 	vmov	s15, r3
 800c224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c228:	ed97 6a03 	vldr	s12, [r7, #12]
 800c22c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c248:	e043      	b.n	800c2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	ee07 3a90 	vmov	s15, r3
 800c250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c254:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c390 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25c:	4b47      	ldr	r3, [pc, #284]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c264:	ee07 3a90 	vmov	s15, r3
 800c268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c270:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c28c:	e021      	b.n	800c2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	ee07 3a90 	vmov	s15, r3
 800c294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c298:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c29c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a0:	4b36      	ldr	r3, [pc, #216]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a8:	ee07 3a90 	vmov	s15, r3
 800c2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c2d2:	4b2a      	ldr	r3, [pc, #168]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d6:	0a5b      	lsrs	r3, r3, #9
 800c2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2dc:	ee07 3a90 	vmov	s15, r3
 800c2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f8:	ee17 2a90 	vmov	r2, s15
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c300:	4b1e      	ldr	r3, [pc, #120]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c304:	0c1b      	lsrs	r3, r3, #16
 800c306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c31a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c31e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c326:	ee17 2a90 	vmov	r2, s15
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c32e:	4b13      	ldr	r3, [pc, #76]	; (800c37c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c332:	0e1b      	lsrs	r3, r3, #24
 800c334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c338:	ee07 3a90 	vmov	s15, r3
 800c33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c344:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c348:	edd7 6a07 	vldr	s13, [r7, #28]
 800c34c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c354:	ee17 2a90 	vmov	r2, s15
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c35c:	e008      	b.n	800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	609a      	str	r2, [r3, #8]
}
 800c370:	bf00      	nop
 800c372:	3724      	adds	r7, #36	; 0x24
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	58024400 	.word	0x58024400
 800c380:	03d09000 	.word	0x03d09000
 800c384:	46000000 	.word	0x46000000
 800c388:	4c742400 	.word	0x4c742400
 800c38c:	4a742400 	.word	0x4a742400
 800c390:	4bbebc20 	.word	0x4bbebc20

0800c394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3a2:	4b53      	ldr	r3, [pc, #332]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	f003 0303 	and.w	r3, r3, #3
 800c3aa:	2b03      	cmp	r3, #3
 800c3ac:	d101      	bne.n	800c3b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e099      	b.n	800c4e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c3b2:	4b4f      	ldr	r3, [pc, #316]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a4e      	ldr	r2, [pc, #312]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c3b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3be:	f7f7 f973 	bl	80036a8 <HAL_GetTick>
 800c3c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3c4:	e008      	b.n	800c3d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3c6:	f7f7 f96f 	bl	80036a8 <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d901      	bls.n	800c3d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e086      	b.n	800c4e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3d8:	4b45      	ldr	r3, [pc, #276]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1f0      	bne.n	800c3c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c3e4:	4b42      	ldr	r3, [pc, #264]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	031b      	lsls	r3, r3, #12
 800c3f2:	493f      	ldr	r1, [pc, #252]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	628b      	str	r3, [r1, #40]	; 0x28
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	3b01      	subs	r3, #1
 800c408:	025b      	lsls	r3, r3, #9
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	431a      	orrs	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	3b01      	subs	r3, #1
 800c414:	041b      	lsls	r3, r3, #16
 800c416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c41a:	431a      	orrs	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	3b01      	subs	r3, #1
 800c422:	061b      	lsls	r3, r3, #24
 800c424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c428:	4931      	ldr	r1, [pc, #196]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c42e:	4b30      	ldr	r3, [pc, #192]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	492d      	ldr	r1, [pc, #180]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c43c:	4313      	orrs	r3, r2
 800c43e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c440:	4b2b      	ldr	r3, [pc, #172]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	f023 0220 	bic.w	r2, r3, #32
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	4928      	ldr	r1, [pc, #160]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c452:	4b27      	ldr	r3, [pc, #156]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c456:	4a26      	ldr	r2, [pc, #152]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c458:	f023 0310 	bic.w	r3, r3, #16
 800c45c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c45e:	4b24      	ldr	r3, [pc, #144]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c462:	4b24      	ldr	r3, [pc, #144]	; (800c4f4 <RCCEx_PLL2_Config+0x160>)
 800c464:	4013      	ands	r3, r2
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	69d2      	ldr	r2, [r2, #28]
 800c46a:	00d2      	lsls	r2, r2, #3
 800c46c:	4920      	ldr	r1, [pc, #128]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c472:	4b1f      	ldr	r3, [pc, #124]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c476:	4a1e      	ldr	r2, [pc, #120]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c478:	f043 0310 	orr.w	r3, r3, #16
 800c47c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d106      	bne.n	800c492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c484:	4b1a      	ldr	r3, [pc, #104]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c488:	4a19      	ldr	r2, [pc, #100]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c48e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c490:	e00f      	b.n	800c4b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d106      	bne.n	800c4a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	4a14      	ldr	r2, [pc, #80]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c49e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4a4:	e005      	b.n	800c4b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c4a6:	4b12      	ldr	r3, [pc, #72]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4aa:	4a11      	ldr	r2, [pc, #68]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c4ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c4b2:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a0e      	ldr	r2, [pc, #56]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c4b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4be:	f7f7 f8f3 	bl	80036a8 <HAL_GetTick>
 800c4c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4c4:	e008      	b.n	800c4d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4c6:	f7f7 f8ef 	bl	80036a8 <HAL_GetTick>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d901      	bls.n	800c4d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e006      	b.n	800c4e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4d8:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <RCCEx_PLL2_Config+0x15c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0f0      	beq.n	800c4c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	ffff0007 	.word	0xffff0007

0800c4f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c506:	4b53      	ldr	r3, [pc, #332]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50a:	f003 0303 	and.w	r3, r3, #3
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d101      	bne.n	800c516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e099      	b.n	800c64a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c516:	4b4f      	ldr	r3, [pc, #316]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a4e      	ldr	r2, [pc, #312]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c51c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c522:	f7f7 f8c1 	bl	80036a8 <HAL_GetTick>
 800c526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c528:	e008      	b.n	800c53c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c52a:	f7f7 f8bd 	bl	80036a8 <HAL_GetTick>
 800c52e:	4602      	mov	r2, r0
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	2b02      	cmp	r3, #2
 800c536:	d901      	bls.n	800c53c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	e086      	b.n	800c64a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c53c:	4b45      	ldr	r3, [pc, #276]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f0      	bne.n	800c52a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c548:	4b42      	ldr	r3, [pc, #264]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	051b      	lsls	r3, r3, #20
 800c556:	493f      	ldr	r1, [pc, #252]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	628b      	str	r3, [r1, #40]	; 0x28
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	3b01      	subs	r3, #1
 800c562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	025b      	lsls	r3, r3, #9
 800c56e:	b29b      	uxth	r3, r3
 800c570:	431a      	orrs	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	3b01      	subs	r3, #1
 800c578:	041b      	lsls	r3, r3, #16
 800c57a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c57e:	431a      	orrs	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	3b01      	subs	r3, #1
 800c586:	061b      	lsls	r3, r3, #24
 800c588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c58c:	4931      	ldr	r1, [pc, #196]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c592:	4b30      	ldr	r3, [pc, #192]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	492d      	ldr	r1, [pc, #180]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c5a4:	4b2b      	ldr	r3, [pc, #172]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	4928      	ldr	r1, [pc, #160]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c5b6:	4b27      	ldr	r3, [pc, #156]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ba:	4a26      	ldr	r2, [pc, #152]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5c2:	4b24      	ldr	r3, [pc, #144]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5c6:	4b24      	ldr	r3, [pc, #144]	; (800c658 <RCCEx_PLL3_Config+0x160>)
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	69d2      	ldr	r2, [r2, #28]
 800c5ce:	00d2      	lsls	r2, r2, #3
 800c5d0:	4920      	ldr	r1, [pc, #128]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c5d6:	4b1f      	ldr	r3, [pc, #124]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5da:	4a1e      	ldr	r2, [pc, #120]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5e8:	4b1a      	ldr	r3, [pc, #104]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ec:	4a19      	ldr	r2, [pc, #100]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c5f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5f4:	e00f      	b.n	800c616 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d106      	bne.n	800c60a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5fc:	4b15      	ldr	r3, [pc, #84]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c600:	4a14      	ldr	r2, [pc, #80]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c606:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c608:	e005      	b.n	800c616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c60a:	4b12      	ldr	r3, [pc, #72]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60e:	4a11      	ldr	r2, [pc, #68]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c614:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c616:	4b0f      	ldr	r3, [pc, #60]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a0e      	ldr	r2, [pc, #56]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c61c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c622:	f7f7 f841 	bl	80036a8 <HAL_GetTick>
 800c626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c628:	e008      	b.n	800c63c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c62a:	f7f7 f83d 	bl	80036a8 <HAL_GetTick>
 800c62e:	4602      	mov	r2, r0
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	2b02      	cmp	r3, #2
 800c636:	d901      	bls.n	800c63c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c638:	2303      	movs	r3, #3
 800c63a:	e006      	b.n	800c64a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c63c:	4b05      	ldr	r3, [pc, #20]	; (800c654 <RCCEx_PLL3_Config+0x15c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c644:	2b00      	cmp	r3, #0
 800c646:	d0f0      	beq.n	800c62a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	58024400 	.word	0x58024400
 800c658:	ffff0007 	.word	0xffff0007

0800c65c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d071      	beq.n	800c752 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d106      	bne.n	800c688 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7f6 fb0e 	bl	8002ca4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	f003 0310 	and.w	r3, r3, #16
 800c69a:	2b10      	cmp	r3, #16
 800c69c:	d050      	beq.n	800c740 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	22ca      	movs	r2, #202	; 0xca
 800c6a4:	625a      	str	r2, [r3, #36]	; 0x24
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2253      	movs	r2, #83	; 0x53
 800c6ac:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa4a 	bl	800cb48 <RTC_EnterInitMode>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d124      	bne.n	800c708 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6899      	ldr	r1, [r3, #8]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	4b24      	ldr	r3, [pc, #144]	; (800c75c <HAL_RTC_Init+0x100>)
 800c6ca:	400b      	ands	r3, r1
 800c6cc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6899      	ldr	r1, [r3, #8]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	0419      	lsls	r1, r3, #16
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	430a      	orrs	r2, r1
 800c6fc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fa56 	bl	800cbb0 <RTC_ExitInitMode>
 800c704:	4603      	mov	r3, r0
 800c706:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d113      	bne.n	800c736 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0203 	bic.w	r2, r2, #3
 800c71c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	69da      	ldr	r2, [r3, #28]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	431a      	orrs	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	430a      	orrs	r2, r1
 800c734:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	22ff      	movs	r2, #255	; 0xff
 800c73c:	625a      	str	r2, [r3, #36]	; 0x24
 800c73e:	e001      	b.n	800c744 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d103      	bne.n	800c752 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c752:	7bfb      	ldrb	r3, [r7, #15]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	ff8fffbf 	.word	0xff8fffbf

0800c760 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c760:	b590      	push	{r4, r7, lr}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d101      	bne.n	800c77a <HAL_RTC_SetTime+0x1a>
 800c776:	2302      	movs	r3, #2
 800c778:	e089      	b.n	800c88e <HAL_RTC_SetTime+0x12e>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2202      	movs	r2, #2
 800c786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	22ca      	movs	r2, #202	; 0xca
 800c790:	625a      	str	r2, [r3, #36]	; 0x24
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2253      	movs	r2, #83	; 0x53
 800c798:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f9d4 	bl	800cb48 <RTC_EnterInitMode>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c7a4:	7cfb      	ldrb	r3, [r7, #19]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d161      	bne.n	800c86e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d126      	bne.n	800c7fe <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 fa2f 	bl	800cc2c <RTC_ByteToBcd2>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	785b      	ldrb	r3, [r3, #1]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 fa28 	bl	800cc2c <RTC_ByteToBcd2>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7e0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	789b      	ldrb	r3, [r3, #2]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fa20 	bl	800cc2c <RTC_ByteToBcd2>
 800c7ec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c7ee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	78db      	ldrb	r3, [r3, #3]
 800c7f6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	617b      	str	r3, [r7, #20]
 800c7fc:	e018      	b.n	800c830 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2200      	movs	r2, #0
 800c810:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	785b      	ldrb	r3, [r3, #1]
 800c81c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c81e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c824:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	78db      	ldrb	r3, [r3, #3]
 800c82a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c82c:	4313      	orrs	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	6979      	ldr	r1, [r7, #20]
 800c836:	4b18      	ldr	r3, [pc, #96]	; (800c898 <HAL_RTC_SetTime+0x138>)
 800c838:	400b      	ands	r3, r1
 800c83a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	689a      	ldr	r2, [r3, #8]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c84a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6899      	ldr	r1, [r3, #8]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	68da      	ldr	r2, [r3, #12]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	430a      	orrs	r2, r1
 800c862:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f9a3 	bl	800cbb0 <RTC_ExitInitMode>
 800c86a:	4603      	mov	r3, r0
 800c86c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	22ff      	movs	r2, #255	; 0xff
 800c874:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c876:	7cfb      	ldrb	r3, [r7, #19]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d103      	bne.n	800c884 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c88c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	bd90      	pop	{r4, r7, pc}
 800c896:	bf00      	nop
 800c898:	007f7f7f 	.word	0x007f7f7f

0800c89c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	4b22      	ldr	r3, [pc, #136]	; (800c950 <HAL_RTC_GetTime+0xb4>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	0c1b      	lsrs	r3, r3, #16
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	0a1b      	lsrs	r3, r3, #8
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	0d9b      	lsrs	r3, r3, #22
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	b2da      	uxtb	r2, r3
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d11a      	bne.n	800c946 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	4618      	mov	r0, r3
 800c916:	f000 f9a9 	bl	800cc6c <RTC_Bcd2ToByte>
 800c91a:	4603      	mov	r3, r0
 800c91c:	461a      	mov	r2, r3
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	785b      	ldrb	r3, [r3, #1]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f9a0 	bl	800cc6c <RTC_Bcd2ToByte>
 800c92c:	4603      	mov	r3, r0
 800c92e:	461a      	mov	r2, r3
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	789b      	ldrb	r3, [r3, #2]
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 f997 	bl	800cc6c <RTC_Bcd2ToByte>
 800c93e:	4603      	mov	r3, r0
 800c940:	461a      	mov	r2, r3
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	007f7f7f 	.word	0x007f7f7f

0800c954 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c954:	b590      	push	{r4, r7, lr}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d101      	bne.n	800c96e <HAL_RTC_SetDate+0x1a>
 800c96a:	2302      	movs	r3, #2
 800c96c:	e073      	b.n	800ca56 <HAL_RTC_SetDate+0x102>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10e      	bne.n	800c9a2 <HAL_RTC_SetDate+0x4e>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	785b      	ldrb	r3, [r3, #1]
 800c988:	f003 0310 	and.w	r3, r3, #16
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d008      	beq.n	800c9a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	785b      	ldrb	r3, [r3, #1]
 800c994:	f023 0310 	bic.w	r3, r3, #16
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	330a      	adds	r3, #10
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11c      	bne.n	800c9e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	78db      	ldrb	r3, [r3, #3]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 f93d 	bl	800cc2c <RTC_ByteToBcd2>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	785b      	ldrb	r3, [r3, #1]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 f936 	bl	800cc2c <RTC_ByteToBcd2>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	789b      	ldrb	r3, [r3, #2]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f92e 	bl	800cc2c <RTC_ByteToBcd2>
 800c9d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c9d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	617b      	str	r3, [r7, #20]
 800c9e0:	e00e      	b.n	800ca00 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	78db      	ldrb	r3, [r3, #3]
 800c9e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	785b      	ldrb	r3, [r3, #1]
 800c9ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c9ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c9f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	22ca      	movs	r2, #202	; 0xca
 800ca06:	625a      	str	r2, [r3, #36]	; 0x24
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2253      	movs	r2, #83	; 0x53
 800ca0e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f000 f899 	bl	800cb48 <RTC_EnterInitMode>
 800ca16:	4603      	mov	r3, r0
 800ca18:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ca1a:	7cfb      	ldrb	r3, [r7, #19]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	6979      	ldr	r1, [r7, #20]
 800ca26:	4b0e      	ldr	r3, [pc, #56]	; (800ca60 <HAL_RTC_SetDate+0x10c>)
 800ca28:	400b      	ands	r3, r1
 800ca2a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 f8bf 	bl	800cbb0 <RTC_ExitInitMode>
 800ca32:	4603      	mov	r3, r0
 800ca34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	22ff      	movs	r2, #255	; 0xff
 800ca3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ca3e:	7cfb      	ldrb	r3, [r7, #19]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d103      	bne.n	800ca4c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ca54:	7cfb      	ldrb	r3, [r7, #19]


}
 800ca56:	4618      	mov	r0, r3
 800ca58:	371c      	adds	r7, #28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd90      	pop	{r4, r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	00ffff3f 	.word	0x00ffff3f

0800ca64 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	4b21      	ldr	r3, [pc, #132]	; (800cafc <HAL_RTC_GetDate+0x98>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	0c1b      	lsrs	r3, r3, #16
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f003 031f 	and.w	r3, r3, #31
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	0b5b      	lsrs	r3, r3, #13
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f003 0307 	and.w	r3, r3, #7
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d11a      	bne.n	800caf0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	78db      	ldrb	r3, [r3, #3]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f8d4 	bl	800cc6c <RTC_Bcd2ToByte>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	785b      	ldrb	r3, [r3, #1]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f8cb 	bl	800cc6c <RTC_Bcd2ToByte>
 800cad6:	4603      	mov	r3, r0
 800cad8:	461a      	mov	r2, r3
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	789b      	ldrb	r3, [r3, #2]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f8c2 	bl	800cc6c <RTC_Bcd2ToByte>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	00ffff3f 	.word	0x00ffff3f

0800cb00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a0d      	ldr	r2, [pc, #52]	; (800cb44 <HAL_RTC_WaitForSynchro+0x44>)
 800cb0e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800cb10:	f7f6 fdca 	bl	80036a8 <HAL_GetTick>
 800cb14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb16:	e009      	b.n	800cb2c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb18:	f7f6 fdc6 	bl	80036a8 <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb26:	d901      	bls.n	800cb2c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e007      	b.n	800cb3c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	f003 0320 	and.w	r3, r3, #32
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0ee      	beq.n	800cb18 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	0003ff5f 	.word	0x0003ff5f

0800cb48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d120      	bne.n	800cba4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cb6c:	f7f6 fd9c 	bl	80036a8 <HAL_GetTick>
 800cb70:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cb72:	e00d      	b.n	800cb90 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cb74:	f7f6 fd98 	bl	80036a8 <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb82:	d905      	bls.n	800cb90 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cb84:	2303      	movs	r3, #3
 800cb86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2203      	movs	r2, #3
 800cb8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d102      	bne.n	800cba4 <RTC_EnterInitMode+0x5c>
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
 800cba0:	2b03      	cmp	r3, #3
 800cba2:	d1e7      	bne.n	800cb74 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cbbc:	4b1a      	ldr	r3, [pc, #104]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	4a19      	ldr	r2, [pc, #100]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cbc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbc6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cbc8:	4b17      	ldr	r3, [pc, #92]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f003 0320 	and.w	r3, r3, #32
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10c      	bne.n	800cbee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ff93 	bl	800cb00 <HAL_RTC_WaitForSynchro>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d01e      	beq.n	800cc1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2203      	movs	r2, #3
 800cbe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	73fb      	strb	r3, [r7, #15]
 800cbec:	e017      	b.n	800cc1e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cbee:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	4a0d      	ldr	r2, [pc, #52]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cbf4:	f023 0320 	bic.w	r3, r3, #32
 800cbf8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff ff80 	bl	800cb00 <HAL_RTC_WaitForSynchro>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d005      	beq.n	800cc12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2203      	movs	r2, #3
 800cc0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc12:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	4a04      	ldr	r2, [pc, #16]	; (800cc28 <RTC_ExitInitMode+0x78>)
 800cc18:	f043 0320 	orr.w	r3, r3, #32
 800cc1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	58004000 	.word	0x58004000

0800cc2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cc3e:	e005      	b.n	800cc4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	3301      	adds	r3, #1
 800cc44:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cc46:	7afb      	ldrb	r3, [r7, #11]
 800cc48:	3b0a      	subs	r3, #10
 800cc4a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cc4c:	7afb      	ldrb	r3, [r7, #11]
 800cc4e:	2b09      	cmp	r3, #9
 800cc50:	d8f6      	bhi.n	800cc40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	011b      	lsls	r3, r3, #4
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	7afb      	ldrb	r3, [r7, #11]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	b2db      	uxtb	r3, r3
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	091b      	lsrs	r3, r3, #4
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	0092      	lsls	r2, r2, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	f003 030f 	and.w	r3, r3, #15
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
 800cc90:	4413      	add	r3, r2
 800cc92:	b2db      	uxtb	r3, r3
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e10f      	b.n	800ced2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a87      	ldr	r2, [pc, #540]	; (800cedc <HAL_SPI_Init+0x23c>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d00f      	beq.n	800cce2 <HAL_SPI_Init+0x42>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a86      	ldr	r2, [pc, #536]	; (800cee0 <HAL_SPI_Init+0x240>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d00a      	beq.n	800cce2 <HAL_SPI_Init+0x42>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a84      	ldr	r2, [pc, #528]	; (800cee4 <HAL_SPI_Init+0x244>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d005      	beq.n	800cce2 <HAL_SPI_Init+0x42>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	2b0f      	cmp	r3, #15
 800ccdc:	d901      	bls.n	800cce2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e0f7      	b.n	800ced2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f900 	bl	800cee8 <SPI_GetPacketSize>
 800cce8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a7b      	ldr	r2, [pc, #492]	; (800cedc <HAL_SPI_Init+0x23c>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d00c      	beq.n	800cd0e <HAL_SPI_Init+0x6e>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a79      	ldr	r2, [pc, #484]	; (800cee0 <HAL_SPI_Init+0x240>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d007      	beq.n	800cd0e <HAL_SPI_Init+0x6e>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a78      	ldr	r2, [pc, #480]	; (800cee4 <HAL_SPI_Init+0x244>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d002      	beq.n	800cd0e <HAL_SPI_Init+0x6e>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b08      	cmp	r3, #8
 800cd0c:	d811      	bhi.n	800cd32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd12:	4a72      	ldr	r2, [pc, #456]	; (800cedc <HAL_SPI_Init+0x23c>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d009      	beq.n	800cd2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a70      	ldr	r2, [pc, #448]	; (800cee0 <HAL_SPI_Init+0x240>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d004      	beq.n	800cd2c <HAL_SPI_Init+0x8c>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a6f      	ldr	r2, [pc, #444]	; (800cee4 <HAL_SPI_Init+0x244>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d104      	bne.n	800cd36 <HAL_SPI_Init+0x96>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b10      	cmp	r3, #16
 800cd30:	d901      	bls.n	800cd36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e0cd      	b.n	800ced2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d106      	bne.n	800cd50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7f5 ffdc 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f022 0201 	bic.w	r2, r2, #1
 800cd66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cd72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd7c:	d119      	bne.n	800cdb2 <HAL_SPI_Init+0x112>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd86:	d103      	bne.n	800cd90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d008      	beq.n	800cda2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10c      	bne.n	800cdb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cd9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cda0:	d107      	bne.n	800cdb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <HAL_SPI_Init+0x13e>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	2b06      	cmp	r3, #6
 800cdc4:	d90b      	bls.n	800cdde <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	e007      	b.n	800cdee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	69da      	ldr	r2, [r3, #28]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce00:	ea42 0103 	orr.w	r1, r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68da      	ldr	r2, [r3, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	431a      	orrs	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	431a      	orrs	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a1b      	ldr	r3, [r3, #32]
 800ce36:	431a      	orrs	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	431a      	orrs	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce4e:	ea42 0103 	orr.w	r1, r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d113      	bne.n	800ce8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 0201 	bic.w	r2, r2, #1
 800ce9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	430a      	orrs	r2, r1
 800cebe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	40013000 	.word	0x40013000
 800cee0:	40003800 	.word	0x40003800
 800cee4:	40003c00 	.word	0x40003c00

0800cee8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef4:	095b      	lsrs	r3, r3, #5
 800cef6:	3301      	adds	r3, #1
 800cef8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	3301      	adds	r3, #1
 800cf00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	3307      	adds	r3, #7
 800cf06:	08db      	lsrs	r3, r3, #3
 800cf08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e049      	b.n	800cfc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7f5 ff95 	bl	8002e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2202      	movs	r2, #2
 800cf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f000 ff41 	bl	800dde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d001      	beq.n	800cfe4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e04c      	b.n	800d07e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a26      	ldr	r2, [pc, #152]	; (800d08c <HAL_TIM_Base_Start+0xc0>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d022      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cffe:	d01d      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a22      	ldr	r2, [pc, #136]	; (800d090 <HAL_TIM_Base_Start+0xc4>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d018      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a21      	ldr	r2, [pc, #132]	; (800d094 <HAL_TIM_Base_Start+0xc8>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d013      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a1f      	ldr	r2, [pc, #124]	; (800d098 <HAL_TIM_Base_Start+0xcc>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d00e      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a1e      	ldr	r2, [pc, #120]	; (800d09c <HAL_TIM_Base_Start+0xd0>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d009      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a1c      	ldr	r2, [pc, #112]	; (800d0a0 <HAL_TIM_Base_Start+0xd4>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d004      	beq.n	800d03c <HAL_TIM_Base_Start+0x70>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a1b      	ldr	r2, [pc, #108]	; (800d0a4 <HAL_TIM_Base_Start+0xd8>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d115      	bne.n	800d068 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	4b19      	ldr	r3, [pc, #100]	; (800d0a8 <HAL_TIM_Base_Start+0xdc>)
 800d044:	4013      	ands	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b06      	cmp	r3, #6
 800d04c:	d015      	beq.n	800d07a <HAL_TIM_Base_Start+0xae>
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d054:	d011      	beq.n	800d07a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f042 0201 	orr.w	r2, r2, #1
 800d064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d066:	e008      	b.n	800d07a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f042 0201 	orr.w	r2, r2, #1
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	e000      	b.n	800d07c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d07a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	40010000 	.word	0x40010000
 800d090:	40000400 	.word	0x40000400
 800d094:	40000800 	.word	0x40000800
 800d098:	40000c00 	.word	0x40000c00
 800d09c:	40010400 	.word	0x40010400
 800d0a0:	40001800 	.word	0x40001800
 800d0a4:	40014000 	.word	0x40014000
 800d0a8:	00010007 	.word	0x00010007

0800d0ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6a1a      	ldr	r2, [r3, #32]
 800d0ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800d0be:	4013      	ands	r3, r2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10f      	bne.n	800d0e4 <HAL_TIM_Base_Stop+0x38>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6a1a      	ldr	r2, [r3, #32]
 800d0ca:	f240 4344 	movw	r3, #1092	; 0x444
 800d0ce:	4013      	ands	r3, r2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d107      	bne.n	800d0e4 <HAL_TIM_Base_Stop+0x38>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f022 0201 	bic.w	r2, r2, #1
 800d0e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
	...

0800d0fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d001      	beq.n	800d114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e054      	b.n	800d1be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f042 0201 	orr.w	r2, r2, #1
 800d12a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a26      	ldr	r2, [pc, #152]	; (800d1cc <HAL_TIM_Base_Start_IT+0xd0>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d022      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d13e:	d01d      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a22      	ldr	r2, [pc, #136]	; (800d1d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d018      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a21      	ldr	r2, [pc, #132]	; (800d1d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d013      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a1f      	ldr	r2, [pc, #124]	; (800d1d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d00e      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a1e      	ldr	r2, [pc, #120]	; (800d1dc <HAL_TIM_Base_Start_IT+0xe0>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d009      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d004      	beq.n	800d17c <HAL_TIM_Base_Start_IT+0x80>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a1b      	ldr	r2, [pc, #108]	; (800d1e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d115      	bne.n	800d1a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689a      	ldr	r2, [r3, #8]
 800d182:	4b19      	ldr	r3, [pc, #100]	; (800d1e8 <HAL_TIM_Base_Start_IT+0xec>)
 800d184:	4013      	ands	r3, r2
 800d186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b06      	cmp	r3, #6
 800d18c:	d015      	beq.n	800d1ba <HAL_TIM_Base_Start_IT+0xbe>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d194:	d011      	beq.n	800d1ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f042 0201 	orr.w	r2, r2, #1
 800d1a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1a6:	e008      	b.n	800d1ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f042 0201 	orr.w	r2, r2, #1
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	e000      	b.n	800d1bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	40010000 	.word	0x40010000
 800d1d0:	40000400 	.word	0x40000400
 800d1d4:	40000800 	.word	0x40000800
 800d1d8:	40000c00 	.word	0x40000c00
 800d1dc:	40010400 	.word	0x40010400
 800d1e0:	40001800 	.word	0x40001800
 800d1e4:	40014000 	.word	0x40014000
 800d1e8:	00010007 	.word	0x00010007

0800d1ec <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d109      	bne.n	800d214 <HAL_TIM_OC_Start_IT+0x28>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b01      	cmp	r3, #1
 800d20a:	bf14      	ite	ne
 800d20c:	2301      	movne	r3, #1
 800d20e:	2300      	moveq	r3, #0
 800d210:	b2db      	uxtb	r3, r3
 800d212:	e03c      	b.n	800d28e <HAL_TIM_OC_Start_IT+0xa2>
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2b04      	cmp	r3, #4
 800d218:	d109      	bne.n	800d22e <HAL_TIM_OC_Start_IT+0x42>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b01      	cmp	r3, #1
 800d224:	bf14      	ite	ne
 800d226:	2301      	movne	r3, #1
 800d228:	2300      	moveq	r3, #0
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	e02f      	b.n	800d28e <HAL_TIM_OC_Start_IT+0xa2>
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2b08      	cmp	r3, #8
 800d232:	d109      	bne.n	800d248 <HAL_TIM_OC_Start_IT+0x5c>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	bf14      	ite	ne
 800d240:	2301      	movne	r3, #1
 800d242:	2300      	moveq	r3, #0
 800d244:	b2db      	uxtb	r3, r3
 800d246:	e022      	b.n	800d28e <HAL_TIM_OC_Start_IT+0xa2>
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b0c      	cmp	r3, #12
 800d24c:	d109      	bne.n	800d262 <HAL_TIM_OC_Start_IT+0x76>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b01      	cmp	r3, #1
 800d258:	bf14      	ite	ne
 800d25a:	2301      	movne	r3, #1
 800d25c:	2300      	moveq	r3, #0
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	e015      	b.n	800d28e <HAL_TIM_OC_Start_IT+0xa2>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b10      	cmp	r3, #16
 800d266:	d109      	bne.n	800d27c <HAL_TIM_OC_Start_IT+0x90>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	bf14      	ite	ne
 800d274:	2301      	movne	r3, #1
 800d276:	2300      	moveq	r3, #0
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	e008      	b.n	800d28e <HAL_TIM_OC_Start_IT+0xa2>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b01      	cmp	r3, #1
 800d286:	bf14      	ite	ne
 800d288:	2301      	movne	r3, #1
 800d28a:	2300      	moveq	r3, #0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d001      	beq.n	800d296 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e0ec      	b.n	800d470 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d104      	bne.n	800d2a6 <HAL_TIM_OC_Start_IT+0xba>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2202      	movs	r2, #2
 800d2a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2a4:	e023      	b.n	800d2ee <HAL_TIM_OC_Start_IT+0x102>
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b04      	cmp	r3, #4
 800d2aa:	d104      	bne.n	800d2b6 <HAL_TIM_OC_Start_IT+0xca>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2b4:	e01b      	b.n	800d2ee <HAL_TIM_OC_Start_IT+0x102>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b08      	cmp	r3, #8
 800d2ba:	d104      	bne.n	800d2c6 <HAL_TIM_OC_Start_IT+0xda>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2202      	movs	r2, #2
 800d2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2c4:	e013      	b.n	800d2ee <HAL_TIM_OC_Start_IT+0x102>
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	2b0c      	cmp	r3, #12
 800d2ca:	d104      	bne.n	800d2d6 <HAL_TIM_OC_Start_IT+0xea>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2d4:	e00b      	b.n	800d2ee <HAL_TIM_OC_Start_IT+0x102>
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b10      	cmp	r3, #16
 800d2da:	d104      	bne.n	800d2e6 <HAL_TIM_OC_Start_IT+0xfa>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2e4:	e003      	b.n	800d2ee <HAL_TIM_OC_Start_IT+0x102>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b0c      	cmp	r3, #12
 800d2f2:	d841      	bhi.n	800d378 <HAL_TIM_OC_Start_IT+0x18c>
 800d2f4:	a201      	add	r2, pc, #4	; (adr r2, 800d2fc <HAL_TIM_OC_Start_IT+0x110>)
 800d2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fa:	bf00      	nop
 800d2fc:	0800d331 	.word	0x0800d331
 800d300:	0800d379 	.word	0x0800d379
 800d304:	0800d379 	.word	0x0800d379
 800d308:	0800d379 	.word	0x0800d379
 800d30c:	0800d343 	.word	0x0800d343
 800d310:	0800d379 	.word	0x0800d379
 800d314:	0800d379 	.word	0x0800d379
 800d318:	0800d379 	.word	0x0800d379
 800d31c:	0800d355 	.word	0x0800d355
 800d320:	0800d379 	.word	0x0800d379
 800d324:	0800d379 	.word	0x0800d379
 800d328:	0800d379 	.word	0x0800d379
 800d32c:	0800d367 	.word	0x0800d367
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68da      	ldr	r2, [r3, #12]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f042 0202 	orr.w	r2, r2, #2
 800d33e:	60da      	str	r2, [r3, #12]
      break;
 800d340:	e01d      	b.n	800d37e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68da      	ldr	r2, [r3, #12]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f042 0204 	orr.w	r2, r2, #4
 800d350:	60da      	str	r2, [r3, #12]
      break;
 800d352:	e014      	b.n	800d37e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68da      	ldr	r2, [r3, #12]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f042 0208 	orr.w	r2, r2, #8
 800d362:	60da      	str	r2, [r3, #12]
      break;
 800d364:	e00b      	b.n	800d37e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68da      	ldr	r2, [r3, #12]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f042 0210 	orr.w	r2, r2, #16
 800d374:	60da      	str	r2, [r3, #12]
      break;
 800d376:	e002      	b.n	800d37e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	73fb      	strb	r3, [r7, #15]
      break;
 800d37c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d174      	bne.n	800d46e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2201      	movs	r2, #1
 800d38a:	6839      	ldr	r1, [r7, #0]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f001 f943 	bl	800e618 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a38      	ldr	r2, [pc, #224]	; (800d478 <HAL_TIM_OC_Start_IT+0x28c>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d013      	beq.n	800d3c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a36      	ldr	r2, [pc, #216]	; (800d47c <HAL_TIM_OC_Start_IT+0x290>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d00e      	beq.n	800d3c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a35      	ldr	r2, [pc, #212]	; (800d480 <HAL_TIM_OC_Start_IT+0x294>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d009      	beq.n	800d3c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a33      	ldr	r2, [pc, #204]	; (800d484 <HAL_TIM_OC_Start_IT+0x298>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d004      	beq.n	800d3c4 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a32      	ldr	r2, [pc, #200]	; (800d488 <HAL_TIM_OC_Start_IT+0x29c>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d101      	bne.n	800d3c8 <HAL_TIM_OC_Start_IT+0x1dc>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e000      	b.n	800d3ca <HAL_TIM_OC_Start_IT+0x1de>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d007      	beq.n	800d3de <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a25      	ldr	r2, [pc, #148]	; (800d478 <HAL_TIM_OC_Start_IT+0x28c>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d022      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3f0:	d01d      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a25      	ldr	r2, [pc, #148]	; (800d48c <HAL_TIM_OC_Start_IT+0x2a0>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d018      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a23      	ldr	r2, [pc, #140]	; (800d490 <HAL_TIM_OC_Start_IT+0x2a4>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d013      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a22      	ldr	r2, [pc, #136]	; (800d494 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d00e      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a19      	ldr	r2, [pc, #100]	; (800d47c <HAL_TIM_OC_Start_IT+0x290>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d009      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a1e      	ldr	r2, [pc, #120]	; (800d498 <HAL_TIM_OC_Start_IT+0x2ac>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d004      	beq.n	800d42e <HAL_TIM_OC_Start_IT+0x242>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a15      	ldr	r2, [pc, #84]	; (800d480 <HAL_TIM_OC_Start_IT+0x294>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d115      	bne.n	800d45a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	4b19      	ldr	r3, [pc, #100]	; (800d49c <HAL_TIM_OC_Start_IT+0x2b0>)
 800d436:	4013      	ands	r3, r2
 800d438:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2b06      	cmp	r3, #6
 800d43e:	d015      	beq.n	800d46c <HAL_TIM_OC_Start_IT+0x280>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d446:	d011      	beq.n	800d46c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f042 0201 	orr.w	r2, r2, #1
 800d456:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d458:	e008      	b.n	800d46c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f042 0201 	orr.w	r2, r2, #1
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	e000      	b.n	800d46e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d46c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	40010000 	.word	0x40010000
 800d47c:	40010400 	.word	0x40010400
 800d480:	40014000 	.word	0x40014000
 800d484:	40014400 	.word	0x40014400
 800d488:	40014800 	.word	0x40014800
 800d48c:	40000400 	.word	0x40000400
 800d490:	40000800 	.word	0x40000800
 800d494:	40000c00 	.word	0x40000c00
 800d498:	40001800 	.word	0x40001800
 800d49c:	00010007 	.word	0x00010007

0800d4a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e049      	b.n	800d546 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f841 	bl	800d54e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	3304      	adds	r3, #4
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4610      	mov	r0, r2
 800d4e0:	f000 fc80 	bl	800dde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2201      	movs	r2, #1
 800d538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d54e:	b480      	push	{r7}
 800d550:	b083      	sub	sp, #12
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d556:	bf00      	nop
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
	...

0800d564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d109      	bne.n	800d588 <HAL_TIM_PWM_Start+0x24>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	bf14      	ite	ne
 800d580:	2301      	movne	r3, #1
 800d582:	2300      	moveq	r3, #0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	e03c      	b.n	800d602 <HAL_TIM_PWM_Start+0x9e>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2b04      	cmp	r3, #4
 800d58c:	d109      	bne.n	800d5a2 <HAL_TIM_PWM_Start+0x3e>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d594:	b2db      	uxtb	r3, r3
 800d596:	2b01      	cmp	r3, #1
 800d598:	bf14      	ite	ne
 800d59a:	2301      	movne	r3, #1
 800d59c:	2300      	moveq	r3, #0
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	e02f      	b.n	800d602 <HAL_TIM_PWM_Start+0x9e>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d109      	bne.n	800d5bc <HAL_TIM_PWM_Start+0x58>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	e022      	b.n	800d602 <HAL_TIM_PWM_Start+0x9e>
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2b0c      	cmp	r3, #12
 800d5c0:	d109      	bne.n	800d5d6 <HAL_TIM_PWM_Start+0x72>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	bf14      	ite	ne
 800d5ce:	2301      	movne	r3, #1
 800d5d0:	2300      	moveq	r3, #0
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	e015      	b.n	800d602 <HAL_TIM_PWM_Start+0x9e>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	2b10      	cmp	r3, #16
 800d5da:	d109      	bne.n	800d5f0 <HAL_TIM_PWM_Start+0x8c>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	bf14      	ite	ne
 800d5e8:	2301      	movne	r3, #1
 800d5ea:	2300      	moveq	r3, #0
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	e008      	b.n	800d602 <HAL_TIM_PWM_Start+0x9e>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	bf14      	ite	ne
 800d5fc:	2301      	movne	r3, #1
 800d5fe:	2300      	moveq	r3, #0
 800d600:	b2db      	uxtb	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e0a1      	b.n	800d74e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d104      	bne.n	800d61a <HAL_TIM_PWM_Start+0xb6>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2202      	movs	r2, #2
 800d614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d618:	e023      	b.n	800d662 <HAL_TIM_PWM_Start+0xfe>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b04      	cmp	r3, #4
 800d61e:	d104      	bne.n	800d62a <HAL_TIM_PWM_Start+0xc6>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2202      	movs	r2, #2
 800d624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d628:	e01b      	b.n	800d662 <HAL_TIM_PWM_Start+0xfe>
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	2b08      	cmp	r3, #8
 800d62e:	d104      	bne.n	800d63a <HAL_TIM_PWM_Start+0xd6>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2202      	movs	r2, #2
 800d634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d638:	e013      	b.n	800d662 <HAL_TIM_PWM_Start+0xfe>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	2b0c      	cmp	r3, #12
 800d63e:	d104      	bne.n	800d64a <HAL_TIM_PWM_Start+0xe6>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2202      	movs	r2, #2
 800d644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d648:	e00b      	b.n	800d662 <HAL_TIM_PWM_Start+0xfe>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b10      	cmp	r3, #16
 800d64e:	d104      	bne.n	800d65a <HAL_TIM_PWM_Start+0xf6>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2202      	movs	r2, #2
 800d654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d658:	e003      	b.n	800d662 <HAL_TIM_PWM_Start+0xfe>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2202      	movs	r2, #2
 800d65e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2201      	movs	r2, #1
 800d668:	6839      	ldr	r1, [r7, #0]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 ffd4 	bl	800e618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a38      	ldr	r2, [pc, #224]	; (800d758 <HAL_TIM_PWM_Start+0x1f4>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d013      	beq.n	800d6a2 <HAL_TIM_PWM_Start+0x13e>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a37      	ldr	r2, [pc, #220]	; (800d75c <HAL_TIM_PWM_Start+0x1f8>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d00e      	beq.n	800d6a2 <HAL_TIM_PWM_Start+0x13e>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a35      	ldr	r2, [pc, #212]	; (800d760 <HAL_TIM_PWM_Start+0x1fc>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d009      	beq.n	800d6a2 <HAL_TIM_PWM_Start+0x13e>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a34      	ldr	r2, [pc, #208]	; (800d764 <HAL_TIM_PWM_Start+0x200>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d004      	beq.n	800d6a2 <HAL_TIM_PWM_Start+0x13e>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a32      	ldr	r2, [pc, #200]	; (800d768 <HAL_TIM_PWM_Start+0x204>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d101      	bne.n	800d6a6 <HAL_TIM_PWM_Start+0x142>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e000      	b.n	800d6a8 <HAL_TIM_PWM_Start+0x144>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d007      	beq.n	800d6bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a25      	ldr	r2, [pc, #148]	; (800d758 <HAL_TIM_PWM_Start+0x1f4>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d022      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ce:	d01d      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a25      	ldr	r2, [pc, #148]	; (800d76c <HAL_TIM_PWM_Start+0x208>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d018      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a24      	ldr	r2, [pc, #144]	; (800d770 <HAL_TIM_PWM_Start+0x20c>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d013      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a22      	ldr	r2, [pc, #136]	; (800d774 <HAL_TIM_PWM_Start+0x210>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d00e      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a1a      	ldr	r2, [pc, #104]	; (800d75c <HAL_TIM_PWM_Start+0x1f8>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d009      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a1e      	ldr	r2, [pc, #120]	; (800d778 <HAL_TIM_PWM_Start+0x214>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d004      	beq.n	800d70c <HAL_TIM_PWM_Start+0x1a8>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a16      	ldr	r2, [pc, #88]	; (800d760 <HAL_TIM_PWM_Start+0x1fc>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d115      	bne.n	800d738 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	689a      	ldr	r2, [r3, #8]
 800d712:	4b1a      	ldr	r3, [pc, #104]	; (800d77c <HAL_TIM_PWM_Start+0x218>)
 800d714:	4013      	ands	r3, r2
 800d716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b06      	cmp	r3, #6
 800d71c:	d015      	beq.n	800d74a <HAL_TIM_PWM_Start+0x1e6>
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d724:	d011      	beq.n	800d74a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f042 0201 	orr.w	r2, r2, #1
 800d734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d736:	e008      	b.n	800d74a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f042 0201 	orr.w	r2, r2, #1
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	e000      	b.n	800d74c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d74a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	40010000 	.word	0x40010000
 800d75c:	40010400 	.word	0x40010400
 800d760:	40014000 	.word	0x40014000
 800d764:	40014400 	.word	0x40014400
 800d768:	40014800 	.word	0x40014800
 800d76c:	40000400 	.word	0x40000400
 800d770:	40000800 	.word	0x40000800
 800d774:	40000c00 	.word	0x40000c00
 800d778:	40001800 	.word	0x40001800
 800d77c:	00010007 	.word	0x00010007

0800d780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d020      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d01b      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f06f 0202 	mvn.w	r2, #2
 800d7b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	f003 0303 	and.w	r3, r3, #3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 faec 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800d7d0:	e005      	b.n	800d7de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7f2 ff56 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 faef 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f003 0304 	and.w	r3, r3, #4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d020      	beq.n	800d830 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f003 0304 	and.w	r3, r3, #4
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d01b      	beq.n	800d830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f06f 0204 	mvn.w	r2, #4
 800d800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2202      	movs	r2, #2
 800d806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	699b      	ldr	r3, [r3, #24]
 800d80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d812:	2b00      	cmp	r3, #0
 800d814:	d003      	beq.n	800d81e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fac6 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800d81c:	e005      	b.n	800d82a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7f2 ff30 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fac9 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	f003 0308 	and.w	r3, r3, #8
 800d836:	2b00      	cmp	r3, #0
 800d838:	d020      	beq.n	800d87c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b00      	cmp	r3, #0
 800d842:	d01b      	beq.n	800d87c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f06f 0208 	mvn.w	r2, #8
 800d84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2204      	movs	r2, #4
 800d852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	69db      	ldr	r3, [r3, #28]
 800d85a:	f003 0303 	and.w	r3, r3, #3
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d003      	beq.n	800d86a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 faa0 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800d868:	e005      	b.n	800d876 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7f2 ff0a 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 faa3 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	f003 0310 	and.w	r3, r3, #16
 800d882:	2b00      	cmp	r3, #0
 800d884:	d020      	beq.n	800d8c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f003 0310 	and.w	r3, r3, #16
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01b      	beq.n	800d8c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f06f 0210 	mvn.w	r2, #16
 800d898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2208      	movs	r2, #8
 800d89e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	69db      	ldr	r3, [r3, #28]
 800d8a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fa7a 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800d8b4:	e005      	b.n	800d8c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7f2 fee4 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fa7d 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d007      	beq.n	800d8ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f06f 0201 	mvn.w	r2, #1
 800d8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7f4 ffa0 	bl	800282c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d104      	bne.n	800d900 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00c      	beq.n	800d91a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d906:	2b00      	cmp	r3, #0
 800d908:	d007      	beq.n	800d91a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 ffbb 	bl	800e890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00c      	beq.n	800d93e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d007      	beq.n	800d93e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 ffb3 	bl	800e8a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00c      	beq.n	800d962 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d007      	beq.n	800d962 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fa37 	bl	800ddd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f003 0320 	and.w	r3, r3, #32
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00c      	beq.n	800d986 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f003 0320 	and.w	r3, r3, #32
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f06f 0220 	mvn.w	r2, #32
 800d97e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 ff7b 	bl	800e87c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b086      	sub	sp, #24
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d101      	bne.n	800d9ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d9aa:	2302      	movs	r3, #2
 800d9ac:	e0ff      	b.n	800dbae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b14      	cmp	r3, #20
 800d9ba:	f200 80f0 	bhi.w	800db9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d9be:	a201      	add	r2, pc, #4	; (adr r2, 800d9c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c4:	0800da19 	.word	0x0800da19
 800d9c8:	0800db9f 	.word	0x0800db9f
 800d9cc:	0800db9f 	.word	0x0800db9f
 800d9d0:	0800db9f 	.word	0x0800db9f
 800d9d4:	0800da59 	.word	0x0800da59
 800d9d8:	0800db9f 	.word	0x0800db9f
 800d9dc:	0800db9f 	.word	0x0800db9f
 800d9e0:	0800db9f 	.word	0x0800db9f
 800d9e4:	0800da9b 	.word	0x0800da9b
 800d9e8:	0800db9f 	.word	0x0800db9f
 800d9ec:	0800db9f 	.word	0x0800db9f
 800d9f0:	0800db9f 	.word	0x0800db9f
 800d9f4:	0800dadb 	.word	0x0800dadb
 800d9f8:	0800db9f 	.word	0x0800db9f
 800d9fc:	0800db9f 	.word	0x0800db9f
 800da00:	0800db9f 	.word	0x0800db9f
 800da04:	0800db1d 	.word	0x0800db1d
 800da08:	0800db9f 	.word	0x0800db9f
 800da0c:	0800db9f 	.word	0x0800db9f
 800da10:	0800db9f 	.word	0x0800db9f
 800da14:	0800db5d 	.word	0x0800db5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68b9      	ldr	r1, [r7, #8]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 fa86 	bl	800df30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	699a      	ldr	r2, [r3, #24]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f042 0208 	orr.w	r2, r2, #8
 800da32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	699a      	ldr	r2, [r3, #24]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f022 0204 	bic.w	r2, r2, #4
 800da42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6999      	ldr	r1, [r3, #24]
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	619a      	str	r2, [r3, #24]
      break;
 800da56:	e0a5      	b.n	800dba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 faf6 	bl	800e050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	699a      	ldr	r2, [r3, #24]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6999      	ldr	r1, [r3, #24]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	021a      	lsls	r2, r3, #8
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	430a      	orrs	r2, r1
 800da96:	619a      	str	r2, [r3, #24]
      break;
 800da98:	e084      	b.n	800dba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fb5f 	bl	800e164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	69da      	ldr	r2, [r3, #28]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0208 	orr.w	r2, r2, #8
 800dab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69da      	ldr	r2, [r3, #28]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f022 0204 	bic.w	r2, r2, #4
 800dac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	69d9      	ldr	r1, [r3, #28]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	691a      	ldr	r2, [r3, #16]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	430a      	orrs	r2, r1
 800dad6:	61da      	str	r2, [r3, #28]
      break;
 800dad8:	e064      	b.n	800dba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68b9      	ldr	r1, [r7, #8]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 fbc7 	bl	800e274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	69da      	ldr	r2, [r3, #28]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	69da      	ldr	r2, [r3, #28]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	69d9      	ldr	r1, [r3, #28]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	021a      	lsls	r2, r3, #8
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	430a      	orrs	r2, r1
 800db18:	61da      	str	r2, [r3, #28]
      break;
 800db1a:	e043      	b.n	800dba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	4618      	mov	r0, r3
 800db24:	f000 fc10 	bl	800e348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f042 0208 	orr.w	r2, r2, #8
 800db36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f022 0204 	bic.w	r2, r2, #4
 800db46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	691a      	ldr	r2, [r3, #16]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	430a      	orrs	r2, r1
 800db58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800db5a:	e023      	b.n	800dba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68b9      	ldr	r1, [r7, #8]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 fc54 	bl	800e410 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	021a      	lsls	r2, r3, #8
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	430a      	orrs	r2, r1
 800db9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800db9c:	e002      	b.n	800dba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	75fb      	strb	r3, [r7, #23]
      break;
 800dba2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop

0800dbb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d101      	bne.n	800dbd4 <HAL_TIM_ConfigClockSource+0x1c>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e0dc      	b.n	800dd8e <HAL_TIM_ConfigClockSource+0x1d6>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2202      	movs	r2, #2
 800dbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	4b6a      	ldr	r3, [pc, #424]	; (800dd98 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a64      	ldr	r2, [pc, #400]	; (800dd9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	f000 80a9 	beq.w	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc10:	4a62      	ldr	r2, [pc, #392]	; (800dd9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	f200 80ae 	bhi.w	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc18:	4a61      	ldr	r2, [pc, #388]	; (800dda0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	f000 80a1 	beq.w	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc20:	4a5f      	ldr	r2, [pc, #380]	; (800dda0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	f200 80a6 	bhi.w	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc28:	4a5e      	ldr	r2, [pc, #376]	; (800dda4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	f000 8099 	beq.w	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc30:	4a5c      	ldr	r2, [pc, #368]	; (800dda4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	f200 809e 	bhi.w	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc3c:	f000 8091 	beq.w	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc44:	f200 8096 	bhi.w	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc4c:	f000 8089 	beq.w	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc54:	f200 808e 	bhi.w	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc5c:	d03e      	beq.n	800dcdc <HAL_TIM_ConfigClockSource+0x124>
 800dc5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc62:	f200 8087 	bhi.w	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc6a:	f000 8086 	beq.w	800dd7a <HAL_TIM_ConfigClockSource+0x1c2>
 800dc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc72:	d87f      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc74:	2b70      	cmp	r3, #112	; 0x70
 800dc76:	d01a      	beq.n	800dcae <HAL_TIM_ConfigClockSource+0xf6>
 800dc78:	2b70      	cmp	r3, #112	; 0x70
 800dc7a:	d87b      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc7c:	2b60      	cmp	r3, #96	; 0x60
 800dc7e:	d050      	beq.n	800dd22 <HAL_TIM_ConfigClockSource+0x16a>
 800dc80:	2b60      	cmp	r3, #96	; 0x60
 800dc82:	d877      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc84:	2b50      	cmp	r3, #80	; 0x50
 800dc86:	d03c      	beq.n	800dd02 <HAL_TIM_ConfigClockSource+0x14a>
 800dc88:	2b50      	cmp	r3, #80	; 0x50
 800dc8a:	d873      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc8c:	2b40      	cmp	r3, #64	; 0x40
 800dc8e:	d058      	beq.n	800dd42 <HAL_TIM_ConfigClockSource+0x18a>
 800dc90:	2b40      	cmp	r3, #64	; 0x40
 800dc92:	d86f      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc94:	2b30      	cmp	r3, #48	; 0x30
 800dc96:	d064      	beq.n	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc98:	2b30      	cmp	r3, #48	; 0x30
 800dc9a:	d86b      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc9c:	2b20      	cmp	r3, #32
 800dc9e:	d060      	beq.n	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dca0:	2b20      	cmp	r3, #32
 800dca2:	d867      	bhi.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d05c      	beq.n	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dca8:	2b10      	cmp	r3, #16
 800dcaa:	d05a      	beq.n	800dd62 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcac:	e062      	b.n	800dd74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6818      	ldr	r0, [r3, #0]
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	6899      	ldr	r1, [r3, #8]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	685a      	ldr	r2, [r3, #4]
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	f000 fc8b 	bl	800e5d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dcd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	609a      	str	r2, [r3, #8]
      break;
 800dcda:	e04f      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6818      	ldr	r0, [r3, #0]
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	6899      	ldr	r1, [r3, #8]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	685a      	ldr	r2, [r3, #4]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	f000 fc74 	bl	800e5d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	689a      	ldr	r2, [r3, #8]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dcfe:	609a      	str	r2, [r3, #8]
      break;
 800dd00:	e03c      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6818      	ldr	r0, [r3, #0]
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	6859      	ldr	r1, [r3, #4]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f000 fbe4 	bl	800e4dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2150      	movs	r1, #80	; 0x50
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f000 fc3e 	bl	800e59c <TIM_ITRx_SetConfig>
      break;
 800dd20:	e02c      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	6859      	ldr	r1, [r3, #4]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	f000 fc03 	bl	800e53a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2160      	movs	r1, #96	; 0x60
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 fc2e 	bl	800e59c <TIM_ITRx_SetConfig>
      break;
 800dd40:	e01c      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6818      	ldr	r0, [r3, #0]
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	6859      	ldr	r1, [r3, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f000 fbc4 	bl	800e4dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2140      	movs	r1, #64	; 0x40
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fc1e 	bl	800e59c <TIM_ITRx_SetConfig>
      break;
 800dd60:	e00c      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f000 fc15 	bl	800e59c <TIM_ITRx_SetConfig>
      break;
 800dd72:	e003      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	73fb      	strb	r3, [r7, #15]
      break;
 800dd78:	e000      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dd7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	ffceff88 	.word	0xffceff88
 800dd9c:	00100040 	.word	0x00100040
 800dda0:	00100030 	.word	0x00100030
 800dda4:	00100020 	.word	0x00100020

0800dda8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a46      	ldr	r2, [pc, #280]	; (800df10 <TIM_Base_SetConfig+0x12c>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d013      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de02:	d00f      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a43      	ldr	r2, [pc, #268]	; (800df14 <TIM_Base_SetConfig+0x130>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00b      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a42      	ldr	r2, [pc, #264]	; (800df18 <TIM_Base_SetConfig+0x134>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d007      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a41      	ldr	r2, [pc, #260]	; (800df1c <TIM_Base_SetConfig+0x138>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a40      	ldr	r2, [pc, #256]	; (800df20 <TIM_Base_SetConfig+0x13c>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d108      	bne.n	800de36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a35      	ldr	r2, [pc, #212]	; (800df10 <TIM_Base_SetConfig+0x12c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d01f      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de44:	d01b      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a32      	ldr	r2, [pc, #200]	; (800df14 <TIM_Base_SetConfig+0x130>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d017      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a31      	ldr	r2, [pc, #196]	; (800df18 <TIM_Base_SetConfig+0x134>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d013      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a30      	ldr	r2, [pc, #192]	; (800df1c <TIM_Base_SetConfig+0x138>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d00f      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a2f      	ldr	r2, [pc, #188]	; (800df20 <TIM_Base_SetConfig+0x13c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00b      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a2e      	ldr	r2, [pc, #184]	; (800df24 <TIM_Base_SetConfig+0x140>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d007      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a2d      	ldr	r2, [pc, #180]	; (800df28 <TIM_Base_SetConfig+0x144>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d003      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a2c      	ldr	r2, [pc, #176]	; (800df2c <TIM_Base_SetConfig+0x148>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d108      	bne.n	800de90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	689a      	ldr	r2, [r3, #8]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a16      	ldr	r2, [pc, #88]	; (800df10 <TIM_Base_SetConfig+0x12c>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d00f      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a18      	ldr	r2, [pc, #96]	; (800df20 <TIM_Base_SetConfig+0x13c>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d00b      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4a17      	ldr	r2, [pc, #92]	; (800df24 <TIM_Base_SetConfig+0x140>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d007      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a16      	ldr	r2, [pc, #88]	; (800df28 <TIM_Base_SetConfig+0x144>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d003      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a15      	ldr	r2, [pc, #84]	; (800df2c <TIM_Base_SetConfig+0x148>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d103      	bne.n	800dee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b01      	cmp	r3, #1
 800def4:	d105      	bne.n	800df02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	f023 0201 	bic.w	r2, r3, #1
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	611a      	str	r2, [r3, #16]
  }
}
 800df02:	bf00      	nop
 800df04:	3714      	adds	r7, #20
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	40010000 	.word	0x40010000
 800df14:	40000400 	.word	0x40000400
 800df18:	40000800 	.word	0x40000800
 800df1c:	40000c00 	.word	0x40000c00
 800df20:	40010400 	.word	0x40010400
 800df24:	40014000 	.word	0x40014000
 800df28:	40014400 	.word	0x40014400
 800df2c:	40014800 	.word	0x40014800

0800df30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	f023 0201 	bic.w	r2, r3, #1
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	4b37      	ldr	r3, [pc, #220]	; (800e038 <TIM_OC1_SetConfig+0x108>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f023 0303 	bic.w	r3, r3, #3
 800df66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	4313      	orrs	r3, r2
 800df70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f023 0302 	bic.w	r3, r3, #2
 800df78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	689b      	ldr	r3, [r3, #8]
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	4313      	orrs	r3, r2
 800df82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a2d      	ldr	r2, [pc, #180]	; (800e03c <TIM_OC1_SetConfig+0x10c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d00f      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a2c      	ldr	r2, [pc, #176]	; (800e040 <TIM_OC1_SetConfig+0x110>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d00b      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a2b      	ldr	r2, [pc, #172]	; (800e044 <TIM_OC1_SetConfig+0x114>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d007      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a2a      	ldr	r2, [pc, #168]	; (800e048 <TIM_OC1_SetConfig+0x118>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d003      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a29      	ldr	r2, [pc, #164]	; (800e04c <TIM_OC1_SetConfig+0x11c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d10c      	bne.n	800dfc6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	f023 0308 	bic.w	r3, r3, #8
 800dfb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f023 0304 	bic.w	r3, r3, #4
 800dfc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4a1c      	ldr	r2, [pc, #112]	; (800e03c <TIM_OC1_SetConfig+0x10c>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d00f      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4a1b      	ldr	r2, [pc, #108]	; (800e040 <TIM_OC1_SetConfig+0x110>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d00b      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a1a      	ldr	r2, [pc, #104]	; (800e044 <TIM_OC1_SetConfig+0x114>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d007      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a19      	ldr	r2, [pc, #100]	; (800e048 <TIM_OC1_SetConfig+0x118>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d003      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a18      	ldr	r2, [pc, #96]	; (800e04c <TIM_OC1_SetConfig+0x11c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d111      	bne.n	800e012 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	4313      	orrs	r3, r2
 800e006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	4313      	orrs	r3, r2
 800e010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	621a      	str	r2, [r3, #32]
}
 800e02c:	bf00      	nop
 800e02e:	371c      	adds	r7, #28
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	fffeff8f 	.word	0xfffeff8f
 800e03c:	40010000 	.word	0x40010000
 800e040:	40010400 	.word	0x40010400
 800e044:	40014000 	.word	0x40014000
 800e048:	40014400 	.word	0x40014400
 800e04c:	40014800 	.word	0x40014800

0800e050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e050:	b480      	push	{r7}
 800e052:	b087      	sub	sp, #28
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a1b      	ldr	r3, [r3, #32]
 800e064:	f023 0210 	bic.w	r2, r3, #16
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4b34      	ldr	r3, [pc, #208]	; (800e14c <TIM_OC2_SetConfig+0xfc>)
 800e07c:	4013      	ands	r3, r2
 800e07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	4313      	orrs	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f023 0320 	bic.w	r3, r3, #32
 800e09a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	011b      	lsls	r3, r3, #4
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4a29      	ldr	r2, [pc, #164]	; (800e150 <TIM_OC2_SetConfig+0x100>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d003      	beq.n	800e0b8 <TIM_OC2_SetConfig+0x68>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a28      	ldr	r2, [pc, #160]	; (800e154 <TIM_OC2_SetConfig+0x104>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d10d      	bne.n	800e0d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	011b      	lsls	r3, r3, #4
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a1e      	ldr	r2, [pc, #120]	; (800e150 <TIM_OC2_SetConfig+0x100>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d00f      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a1d      	ldr	r2, [pc, #116]	; (800e154 <TIM_OC2_SetConfig+0x104>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d00b      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a1c      	ldr	r2, [pc, #112]	; (800e158 <TIM_OC2_SetConfig+0x108>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d007      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a1b      	ldr	r2, [pc, #108]	; (800e15c <TIM_OC2_SetConfig+0x10c>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d003      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a1a      	ldr	r2, [pc, #104]	; (800e160 <TIM_OC2_SetConfig+0x110>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d113      	bne.n	800e124 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e10a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	695b      	ldr	r3, [r3, #20]
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	693a      	ldr	r2, [r7, #16]
 800e114:	4313      	orrs	r3, r2
 800e116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	4313      	orrs	r3, r2
 800e122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	621a      	str	r2, [r3, #32]
}
 800e13e:	bf00      	nop
 800e140:	371c      	adds	r7, #28
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	feff8fff 	.word	0xfeff8fff
 800e150:	40010000 	.word	0x40010000
 800e154:	40010400 	.word	0x40010400
 800e158:	40014000 	.word	0x40014000
 800e15c:	40014400 	.word	0x40014400
 800e160:	40014800 	.word	0x40014800

0800e164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e164:	b480      	push	{r7}
 800e166:	b087      	sub	sp, #28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a1b      	ldr	r3, [r3, #32]
 800e172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	4b33      	ldr	r3, [pc, #204]	; (800e25c <TIM_OC3_SetConfig+0xf8>)
 800e190:	4013      	ands	r3, r2
 800e192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f023 0303 	bic.w	r3, r3, #3
 800e19a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	021b      	lsls	r3, r3, #8
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a28      	ldr	r2, [pc, #160]	; (800e260 <TIM_OC3_SetConfig+0xfc>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d003      	beq.n	800e1ca <TIM_OC3_SetConfig+0x66>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a27      	ldr	r2, [pc, #156]	; (800e264 <TIM_OC3_SetConfig+0x100>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d10d      	bne.n	800e1e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e1d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	021b      	lsls	r3, r3, #8
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e1e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a1d      	ldr	r2, [pc, #116]	; (800e260 <TIM_OC3_SetConfig+0xfc>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d00f      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a1c      	ldr	r2, [pc, #112]	; (800e264 <TIM_OC3_SetConfig+0x100>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00b      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a1b      	ldr	r2, [pc, #108]	; (800e268 <TIM_OC3_SetConfig+0x104>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d007      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a1a      	ldr	r2, [pc, #104]	; (800e26c <TIM_OC3_SetConfig+0x108>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d003      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a19      	ldr	r2, [pc, #100]	; (800e270 <TIM_OC3_SetConfig+0x10c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d113      	bne.n	800e236 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e21c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	011b      	lsls	r3, r3, #4
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	4313      	orrs	r3, r2
 800e228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	011b      	lsls	r3, r3, #4
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	4313      	orrs	r3, r2
 800e234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	693a      	ldr	r2, [r7, #16]
 800e23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	621a      	str	r2, [r3, #32]
}
 800e250:	bf00      	nop
 800e252:	371c      	adds	r7, #28
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	fffeff8f 	.word	0xfffeff8f
 800e260:	40010000 	.word	0x40010000
 800e264:	40010400 	.word	0x40010400
 800e268:	40014000 	.word	0x40014000
 800e26c:	40014400 	.word	0x40014400
 800e270:	40014800 	.word	0x40014800

0800e274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e274:	b480      	push	{r7}
 800e276:	b087      	sub	sp, #28
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a1b      	ldr	r3, [r3, #32]
 800e288:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	4b24      	ldr	r3, [pc, #144]	; (800e330 <TIM_OC4_SetConfig+0xbc>)
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e2be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	031b      	lsls	r3, r3, #12
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a19      	ldr	r2, [pc, #100]	; (800e334 <TIM_OC4_SetConfig+0xc0>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d00f      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a18      	ldr	r2, [pc, #96]	; (800e338 <TIM_OC4_SetConfig+0xc4>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d00b      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a17      	ldr	r2, [pc, #92]	; (800e33c <TIM_OC4_SetConfig+0xc8>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d007      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a16      	ldr	r2, [pc, #88]	; (800e340 <TIM_OC4_SetConfig+0xcc>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d003      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a15      	ldr	r2, [pc, #84]	; (800e344 <TIM_OC4_SetConfig+0xd0>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d109      	bne.n	800e308 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e2fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	695b      	ldr	r3, [r3, #20]
 800e300:	019b      	lsls	r3, r3, #6
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	4313      	orrs	r3, r2
 800e306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	697a      	ldr	r2, [r7, #20]
 800e30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	621a      	str	r2, [r3, #32]
}
 800e322:	bf00      	nop
 800e324:	371c      	adds	r7, #28
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	feff8fff 	.word	0xfeff8fff
 800e334:	40010000 	.word	0x40010000
 800e338:	40010400 	.word	0x40010400
 800e33c:	40014000 	.word	0x40014000
 800e340:	40014400 	.word	0x40014400
 800e344:	40014800 	.word	0x40014800

0800e348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e348:	b480      	push	{r7}
 800e34a:	b087      	sub	sp, #28
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a1b      	ldr	r3, [r3, #32]
 800e35c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	4b21      	ldr	r3, [pc, #132]	; (800e3f8 <TIM_OC5_SetConfig+0xb0>)
 800e374:	4013      	ands	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	4313      	orrs	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e388:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	041b      	lsls	r3, r3, #16
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4313      	orrs	r3, r2
 800e394:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a18      	ldr	r2, [pc, #96]	; (800e3fc <TIM_OC5_SetConfig+0xb4>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d00f      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a17      	ldr	r2, [pc, #92]	; (800e400 <TIM_OC5_SetConfig+0xb8>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d00b      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a16      	ldr	r2, [pc, #88]	; (800e404 <TIM_OC5_SetConfig+0xbc>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d007      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a15      	ldr	r2, [pc, #84]	; (800e408 <TIM_OC5_SetConfig+0xc0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d003      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4a14      	ldr	r2, [pc, #80]	; (800e40c <TIM_OC5_SetConfig+0xc4>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d109      	bne.n	800e3d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	021b      	lsls	r3, r3, #8
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	621a      	str	r2, [r3, #32]
}
 800e3ec:	bf00      	nop
 800e3ee:	371c      	adds	r7, #28
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	fffeff8f 	.word	0xfffeff8f
 800e3fc:	40010000 	.word	0x40010000
 800e400:	40010400 	.word	0x40010400
 800e404:	40014000 	.word	0x40014000
 800e408:	40014400 	.word	0x40014400
 800e40c:	40014800 	.word	0x40014800

0800e410 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	4b22      	ldr	r3, [pc, #136]	; (800e4c4 <TIM_OC6_SetConfig+0xb4>)
 800e43c:	4013      	ands	r3, r2
 800e43e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	021b      	lsls	r3, r3, #8
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4313      	orrs	r3, r2
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	051b      	lsls	r3, r3, #20
 800e45a:	693a      	ldr	r2, [r7, #16]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a19      	ldr	r2, [pc, #100]	; (800e4c8 <TIM_OC6_SetConfig+0xb8>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d00f      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a18      	ldr	r2, [pc, #96]	; (800e4cc <TIM_OC6_SetConfig+0xbc>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d00b      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a17      	ldr	r2, [pc, #92]	; (800e4d0 <TIM_OC6_SetConfig+0xc0>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d007      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a16      	ldr	r2, [pc, #88]	; (800e4d4 <TIM_OC6_SetConfig+0xc4>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d003      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a15      	ldr	r2, [pc, #84]	; (800e4d8 <TIM_OC6_SetConfig+0xc8>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d109      	bne.n	800e49c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e48e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	029b      	lsls	r3, r3, #10
 800e496:	697a      	ldr	r2, [r7, #20]
 800e498:	4313      	orrs	r3, r2
 800e49a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	685a      	ldr	r2, [r3, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	621a      	str	r2, [r3, #32]
}
 800e4b6:	bf00      	nop
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	feff8fff 	.word	0xfeff8fff
 800e4c8:	40010000 	.word	0x40010000
 800e4cc:	40010400 	.word	0x40010400
 800e4d0:	40014000 	.word	0x40014000
 800e4d4:	40014400 	.word	0x40014400
 800e4d8:	40014800 	.word	0x40014800

0800e4dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6a1b      	ldr	r3, [r3, #32]
 800e4ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6a1b      	ldr	r3, [r3, #32]
 800e4f2:	f023 0201 	bic.w	r2, r3, #1
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	699b      	ldr	r3, [r3, #24]
 800e4fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	011b      	lsls	r3, r3, #4
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	4313      	orrs	r3, r2
 800e510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f023 030a 	bic.w	r3, r3, #10
 800e518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4313      	orrs	r3, r2
 800e520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	693a      	ldr	r2, [r7, #16]
 800e526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	621a      	str	r2, [r3, #32]
}
 800e52e:	bf00      	nop
 800e530:	371c      	adds	r7, #28
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b087      	sub	sp, #28
 800e53e:	af00      	add	r7, sp, #0
 800e540:	60f8      	str	r0, [r7, #12]
 800e542:	60b9      	str	r1, [r7, #8]
 800e544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6a1b      	ldr	r3, [r3, #32]
 800e550:	f023 0210 	bic.w	r2, r3, #16
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	031b      	lsls	r3, r3, #12
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	011b      	lsls	r3, r3, #4
 800e57c:	697a      	ldr	r2, [r7, #20]
 800e57e:	4313      	orrs	r3, r2
 800e580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	693a      	ldr	r2, [r7, #16]
 800e586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	621a      	str	r2, [r3, #32]
}
 800e58e:	bf00      	nop
 800e590:	371c      	adds	r7, #28
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
	...

0800e59c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <TIM_ITRx_SetConfig+0x38>)
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e5b4:	683a      	ldr	r2, [r7, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	f043 0307 	orr.w	r3, r3, #7
 800e5be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	609a      	str	r2, [r3, #8]
}
 800e5c6:	bf00      	nop
 800e5c8:	3714      	adds	r7, #20
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	ffcfff8f 	.word	0xffcfff8f

0800e5d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e5f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	021a      	lsls	r2, r3, #8
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	431a      	orrs	r2, r3
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	697a      	ldr	r2, [r7, #20]
 800e602:	4313      	orrs	r3, r2
 800e604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	609a      	str	r2, [r3, #8]
}
 800e60c:	bf00      	nop
 800e60e:	371c      	adds	r7, #28
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e618:	b480      	push	{r7}
 800e61a:	b087      	sub	sp, #28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	f003 031f 	and.w	r3, r3, #31
 800e62a:	2201      	movs	r2, #1
 800e62c:	fa02 f303 	lsl.w	r3, r2, r3
 800e630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6a1a      	ldr	r2, [r3, #32]
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	43db      	mvns	r3, r3
 800e63a:	401a      	ands	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6a1a      	ldr	r2, [r3, #32]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	f003 031f 	and.w	r3, r3, #31
 800e64a:	6879      	ldr	r1, [r7, #4]
 800e64c:	fa01 f303 	lsl.w	r3, r1, r3
 800e650:	431a      	orrs	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	621a      	str	r2, [r3, #32]
}
 800e656:	bf00      	nop
 800e658:	371c      	adds	r7, #28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
	...

0800e664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e674:	2b01      	cmp	r3, #1
 800e676:	d101      	bne.n	800e67c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e678:	2302      	movs	r3, #2
 800e67a:	e06d      	b.n	800e758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2202      	movs	r2, #2
 800e688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a30      	ldr	r2, [pc, #192]	; (800e764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d004      	beq.n	800e6b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a2f      	ldr	r2, [pc, #188]	; (800e768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d108      	bne.n	800e6c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e6b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a20      	ldr	r2, [pc, #128]	; (800e764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d022      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ee:	d01d      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a1d      	ldr	r2, [pc, #116]	; (800e76c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d018      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a1c      	ldr	r2, [pc, #112]	; (800e770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d013      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a1a      	ldr	r2, [pc, #104]	; (800e774 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d00e      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a15      	ldr	r2, [pc, #84]	; (800e768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d009      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a16      	ldr	r2, [pc, #88]	; (800e778 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d004      	beq.n	800e72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a15      	ldr	r2, [pc, #84]	; (800e77c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d10c      	bne.n	800e746 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	4313      	orrs	r3, r2
 800e73c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e756:	2300      	movs	r3, #0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	40010000 	.word	0x40010000
 800e768:	40010400 	.word	0x40010400
 800e76c:	40000400 	.word	0x40000400
 800e770:	40000800 	.word	0x40000800
 800e774:	40000c00 	.word	0x40000c00
 800e778:	40001800 	.word	0x40001800
 800e77c:	40014000 	.word	0x40014000

0800e780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e78a:	2300      	movs	r3, #0
 800e78c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e794:	2b01      	cmp	r3, #1
 800e796:	d101      	bne.n	800e79c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e798:	2302      	movs	r3, #2
 800e79a:	e065      	b.n	800e868 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	695b      	ldr	r3, [r3, #20]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e802:	4313      	orrs	r3, r2
 800e804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	041b      	lsls	r3, r3, #16
 800e812:	4313      	orrs	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a16      	ldr	r2, [pc, #88]	; (800e874 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d004      	beq.n	800e82a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a14      	ldr	r2, [pc, #80]	; (800e878 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d115      	bne.n	800e856 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e834:	051b      	lsls	r3, r3, #20
 800e836:	4313      	orrs	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	69db      	ldr	r3, [r3, #28]
 800e844:	4313      	orrs	r3, r2
 800e846:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	4313      	orrs	r3, r2
 800e854:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	40010000 	.word	0x40010000
 800e878:	40010400 	.word	0x40010400

0800e87c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e898:	bf00      	nop
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d101      	bne.n	800e8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e042      	b.n	800e950 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d106      	bne.n	800e8e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7f4 fba9 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2224      	movs	r2, #36	; 0x24
 800e8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f022 0201 	bic.w	r2, r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f001 fb0c 	bl	800ff20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 fda1 	bl	800f450 <UART_SetConfig>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b01      	cmp	r3, #1
 800e912:	d101      	bne.n	800e918 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	e01b      	b.n	800e950 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	685a      	ldr	r2, [r3, #4]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f042 0201 	orr.w	r2, r2, #1
 800e946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f001 fb8b 	bl	8010064 <UART_CheckIdleState>
 800e94e:	4603      	mov	r3, r0
}
 800e950:	4618      	mov	r0, r3
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af02      	add	r7, sp, #8
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	603b      	str	r3, [r7, #0]
 800e964:	4613      	mov	r3, r2
 800e966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e96e:	2b20      	cmp	r3, #32
 800e970:	d17b      	bne.n	800ea6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d002      	beq.n	800e97e <HAL_UART_Transmit+0x26>
 800e978:	88fb      	ldrh	r3, [r7, #6]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d101      	bne.n	800e982 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	e074      	b.n	800ea6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2200      	movs	r2, #0
 800e986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2221      	movs	r2, #33	; 0x21
 800e98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e992:	f7f4 fe89 	bl	80036a8 <HAL_GetTick>
 800e996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	88fa      	ldrh	r2, [r7, #6]
 800e99c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	88fa      	ldrh	r2, [r7, #6]
 800e9a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9b0:	d108      	bne.n	800e9c4 <HAL_UART_Transmit+0x6c>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d104      	bne.n	800e9c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	61bb      	str	r3, [r7, #24]
 800e9c2:	e003      	b.n	800e9cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e9cc:	e030      	b.n	800ea30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2180      	movs	r1, #128	; 0x80
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f001 fbed 	bl	80101b8 <UART_WaitOnFlagUntilTimeout>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d005      	beq.n	800e9f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2220      	movs	r2, #32
 800e9e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e03d      	b.n	800ea6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d10b      	bne.n	800ea0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	3302      	adds	r3, #2
 800ea0a:	61bb      	str	r3, [r7, #24]
 800ea0c:	e007      	b.n	800ea1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	781a      	ldrb	r2, [r3, #0]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	3b01      	subs	r3, #1
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1c8      	bne.n	800e9ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2200      	movs	r2, #0
 800ea44:	2140      	movs	r1, #64	; 0x40
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f001 fbb6 	bl	80101b8 <UART_WaitOnFlagUntilTimeout>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2220      	movs	r2, #32
 800ea56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	e006      	b.n	800ea6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2220      	movs	r2, #32
 800ea62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	e000      	b.n	800ea6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ea6a:	2302      	movs	r3, #2
  }
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3720      	adds	r7, #32
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08a      	sub	sp, #40	; 0x28
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	603b      	str	r3, [r7, #0]
 800ea80:	4613      	mov	r3, r2
 800ea82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea8a:	2b20      	cmp	r3, #32
 800ea8c:	f040 80b5 	bne.w	800ebfa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <HAL_UART_Receive+0x28>
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e0ad      	b.n	800ebfc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2222      	movs	r2, #34	; 0x22
 800eaac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eab6:	f7f4 fdf7 	bl	80036a8 <HAL_GetTick>
 800eaba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	88fa      	ldrh	r2, [r7, #6]
 800eac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	88fa      	ldrh	r2, [r7, #6]
 800eac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ead4:	d10e      	bne.n	800eaf4 <HAL_UART_Receive+0x80>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d105      	bne.n	800eaea <HAL_UART_Receive+0x76>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800eae4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eae8:	e02d      	b.n	800eb46 <HAL_UART_Receive+0xd2>
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	22ff      	movs	r2, #255	; 0xff
 800eaee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eaf2:	e028      	b.n	800eb46 <HAL_UART_Receive+0xd2>
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10d      	bne.n	800eb18 <HAL_UART_Receive+0xa4>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d104      	bne.n	800eb0e <HAL_UART_Receive+0x9a>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	22ff      	movs	r2, #255	; 0xff
 800eb08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb0c:	e01b      	b.n	800eb46 <HAL_UART_Receive+0xd2>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	227f      	movs	r2, #127	; 0x7f
 800eb12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb16:	e016      	b.n	800eb46 <HAL_UART_Receive+0xd2>
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb20:	d10d      	bne.n	800eb3e <HAL_UART_Receive+0xca>
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d104      	bne.n	800eb34 <HAL_UART_Receive+0xc0>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	227f      	movs	r2, #127	; 0x7f
 800eb2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb32:	e008      	b.n	800eb46 <HAL_UART_Receive+0xd2>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	223f      	movs	r2, #63	; 0x3f
 800eb38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb3c:	e003      	b.n	800eb46 <HAL_UART_Receive+0xd2>
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb4c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb56:	d108      	bne.n	800eb6a <HAL_UART_Receive+0xf6>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d104      	bne.n	800eb6a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	61bb      	str	r3, [r7, #24]
 800eb68:	e003      	b.n	800eb72 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800eb72:	e036      	b.n	800ebe2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	2120      	movs	r1, #32
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f001 fb1a 	bl	80101b8 <UART_WaitOnFlagUntilTimeout>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d005      	beq.n	800eb96 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2220      	movs	r2, #32
 800eb8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800eb92:	2303      	movs	r3, #3
 800eb94:	e032      	b.n	800ebfc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10c      	bne.n	800ebb6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	8a7b      	ldrh	r3, [r7, #18]
 800eba6:	4013      	ands	r3, r2
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	3302      	adds	r3, #2
 800ebb2:	61bb      	str	r3, [r7, #24]
 800ebb4:	e00c      	b.n	800ebd0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	b2da      	uxtb	r2, r3
 800ebbe:	8a7b      	ldrh	r3, [r7, #18]
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	b2da      	uxtb	r2, r3
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1c2      	bne.n	800eb74 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2220      	movs	r2, #32
 800ebf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	e000      	b.n	800ebfc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ebfa:	2302      	movs	r3, #2
  }
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3720      	adds	r7, #32
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b08a      	sub	sp, #40	; 0x28
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec18:	2b20      	cmp	r3, #32
 800ec1a:	d137      	bne.n	800ec8c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <HAL_UART_Receive_IT+0x24>
 800ec22:	88fb      	ldrh	r3, [r7, #6]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e030      	b.n	800ec8e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a18      	ldr	r2, [pc, #96]	; (800ec98 <HAL_UART_Receive_IT+0x94>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d01f      	beq.n	800ec7c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d018      	beq.n	800ec7c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	e853 3f00 	ldrex	r3, [r3]
 800ec56:	613b      	str	r3, [r7, #16]
   return(result);
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	461a      	mov	r2, r3
 800ec66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec68:	623b      	str	r3, [r7, #32]
 800ec6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec6c:	69f9      	ldr	r1, [r7, #28]
 800ec6e:	6a3a      	ldr	r2, [r7, #32]
 800ec70:	e841 2300 	strex	r3, r2, [r1]
 800ec74:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1e6      	bne.n	800ec4a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ec7c:	88fb      	ldrh	r3, [r7, #6]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	68b9      	ldr	r1, [r7, #8]
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f001 fb06 	bl	8010294 <UART_Start_Receive_IT>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	e000      	b.n	800ec8e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec8c:	2302      	movs	r3, #2
  }
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3728      	adds	r7, #40	; 0x28
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	58000c00 	.word	0x58000c00

0800ec9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b0ba      	sub	sp, #232	; 0xe8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	69db      	ldr	r3, [r3, #28]
 800ecaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ecc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ecc6:	f640 030f 	movw	r3, #2063	; 0x80f
 800ecca:	4013      	ands	r3, r2
 800eccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ecd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d11b      	bne.n	800ed10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ecd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecdc:	f003 0320 	and.w	r3, r3, #32
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d015      	beq.n	800ed10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ece4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ece8:	f003 0320 	and.w	r3, r3, #32
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d105      	bne.n	800ecfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ecf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d009      	beq.n	800ed10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 8377 	beq.w	800f3f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	4798      	blx	r3
      }
      return;
 800ed0e:	e371      	b.n	800f3f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ed10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8123 	beq.w	800ef60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ed1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed1e:	4b8d      	ldr	r3, [pc, #564]	; (800ef54 <HAL_UART_IRQHandler+0x2b8>)
 800ed20:	4013      	ands	r3, r2
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d106      	bne.n	800ed34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ed26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ed2a:	4b8b      	ldr	r3, [pc, #556]	; (800ef58 <HAL_UART_IRQHandler+0x2bc>)
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 8116 	beq.w	800ef60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed38:	f003 0301 	and.w	r3, r3, #1
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d011      	beq.n	800ed64 <HAL_UART_IRQHandler+0xc8>
 800ed40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00b      	beq.n	800ed64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2201      	movs	r2, #1
 800ed52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed5a:	f043 0201 	orr.w	r2, r3, #1
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed68:	f003 0302 	and.w	r3, r3, #2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d011      	beq.n	800ed94 <HAL_UART_IRQHandler+0xf8>
 800ed70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed74:	f003 0301 	and.w	r3, r3, #1
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00b      	beq.n	800ed94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2202      	movs	r2, #2
 800ed82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed8a:	f043 0204 	orr.w	r2, r3, #4
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed98:	f003 0304 	and.w	r3, r3, #4
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d011      	beq.n	800edc4 <HAL_UART_IRQHandler+0x128>
 800eda0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00b      	beq.n	800edc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2204      	movs	r2, #4
 800edb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edba:	f043 0202 	orr.w	r2, r3, #2
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800edc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edc8:	f003 0308 	and.w	r3, r3, #8
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d017      	beq.n	800ee00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800edd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edd4:	f003 0320 	and.w	r3, r3, #32
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d105      	bne.n	800ede8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eddc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ede0:	4b5c      	ldr	r3, [pc, #368]	; (800ef54 <HAL_UART_IRQHandler+0x2b8>)
 800ede2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00b      	beq.n	800ee00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2208      	movs	r2, #8
 800edee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edf6:	f043 0208 	orr.w	r2, r3, #8
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d012      	beq.n	800ee32 <HAL_UART_IRQHandler+0x196>
 800ee0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00c      	beq.n	800ee32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee28:	f043 0220 	orr.w	r2, r3, #32
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 82dd 	beq.w	800f3f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee42:	f003 0320 	and.w	r3, r3, #32
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d013      	beq.n	800ee72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee4e:	f003 0320 	and.w	r3, r3, #32
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d105      	bne.n	800ee62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d007      	beq.n	800ee72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d003      	beq.n	800ee72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee86:	2b40      	cmp	r3, #64	; 0x40
 800ee88:	d005      	beq.n	800ee96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d054      	beq.n	800ef40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f001 fb1e 	bl	80104d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea6:	2b40      	cmp	r3, #64	; 0x40
 800eea8:	d146      	bne.n	800ef38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eeb8:	e853 3f00 	ldrex	r3, [r3]
 800eebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	3308      	adds	r3, #8
 800eed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eeda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800eee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eee6:	e841 2300 	strex	r3, r2, [r1]
 800eeea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800eeee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1d9      	bne.n	800eeaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d017      	beq.n	800ef30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef06:	4a15      	ldr	r2, [pc, #84]	; (800ef5c <HAL_UART_IRQHandler+0x2c0>)
 800ef08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7f7 fdd5 	bl	8006ac0 <HAL_DMA_Abort_IT>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d019      	beq.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef2e:	e00f      	b.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fa77 	bl	800f424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef36:	e00b      	b.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 fa73 	bl	800f424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef3e:	e007      	b.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fa6f 	bl	800f424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ef4e:	e253      	b.n	800f3f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef50:	bf00      	nop
    return;
 800ef52:	e251      	b.n	800f3f8 <HAL_UART_IRQHandler+0x75c>
 800ef54:	10000001 	.word	0x10000001
 800ef58:	04000120 	.word	0x04000120
 800ef5c:	080105a5 	.word	0x080105a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	f040 81e7 	bne.w	800f338 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef6e:	f003 0310 	and.w	r3, r3, #16
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 81e0 	beq.w	800f338 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef7c:	f003 0310 	and.w	r3, r3, #16
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f000 81d9 	beq.w	800f338 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2210      	movs	r2, #16
 800ef8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef98:	2b40      	cmp	r3, #64	; 0x40
 800ef9a:	f040 8151 	bne.w	800f240 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a96      	ldr	r2, [pc, #600]	; (800f200 <HAL_UART_IRQHandler+0x564>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d068      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a93      	ldr	r2, [pc, #588]	; (800f204 <HAL_UART_IRQHandler+0x568>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d061      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4a91      	ldr	r2, [pc, #580]	; (800f208 <HAL_UART_IRQHandler+0x56c>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d05a      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a8e      	ldr	r2, [pc, #568]	; (800f20c <HAL_UART_IRQHandler+0x570>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d053      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a8c      	ldr	r2, [pc, #560]	; (800f210 <HAL_UART_IRQHandler+0x574>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d04c      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a89      	ldr	r2, [pc, #548]	; (800f214 <HAL_UART_IRQHandler+0x578>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d045      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a87      	ldr	r2, [pc, #540]	; (800f218 <HAL_UART_IRQHandler+0x57c>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d03e      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a84      	ldr	r2, [pc, #528]	; (800f21c <HAL_UART_IRQHandler+0x580>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d037      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a82      	ldr	r2, [pc, #520]	; (800f220 <HAL_UART_IRQHandler+0x584>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d030      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a7f      	ldr	r2, [pc, #508]	; (800f224 <HAL_UART_IRQHandler+0x588>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d029      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a7d      	ldr	r2, [pc, #500]	; (800f228 <HAL_UART_IRQHandler+0x58c>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d022      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4a7a      	ldr	r2, [pc, #488]	; (800f22c <HAL_UART_IRQHandler+0x590>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d01b      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a78      	ldr	r2, [pc, #480]	; (800f230 <HAL_UART_IRQHandler+0x594>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d014      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a75      	ldr	r2, [pc, #468]	; (800f234 <HAL_UART_IRQHandler+0x598>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d00d      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4a73      	ldr	r2, [pc, #460]	; (800f238 <HAL_UART_IRQHandler+0x59c>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d006      	beq.n	800f07e <HAL_UART_IRQHandler+0x3e2>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a70      	ldr	r2, [pc, #448]	; (800f23c <HAL_UART_IRQHandler+0x5a0>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d106      	bne.n	800f08c <HAL_UART_IRQHandler+0x3f0>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	e005      	b.n	800f098 <HAL_UART_IRQHandler+0x3fc>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	b29b      	uxth	r3, r3
 800f098:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f09c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 81ab 	beq.w	800f3fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	f080 81a3 	bcs.w	800f3fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0c6:	69db      	ldr	r3, [r3, #28]
 800f0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0cc:	f000 8087 	beq.w	800f1de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f0dc:	e853 3f00 	ldrex	r3, [r3]
 800f0e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f0e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f0fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f102:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f106:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f10a:	e841 2300 	strex	r3, r2, [r1]
 800f10e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1da      	bne.n	800f0d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f124:	e853 3f00 	ldrex	r3, [r3]
 800f128:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f12a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f12c:	f023 0301 	bic.w	r3, r3, #1
 800f130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	3308      	adds	r3, #8
 800f13a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f13e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f142:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f144:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f146:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f14a:	e841 2300 	strex	r3, r2, [r1]
 800f14e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1e1      	bne.n	800f11a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	3308      	adds	r3, #8
 800f15c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f160:	e853 3f00 	ldrex	r3, [r3]
 800f164:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f16c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3308      	adds	r3, #8
 800f176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f17a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f17c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f17e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f182:	e841 2300 	strex	r3, r2, [r1]
 800f186:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d1e3      	bne.n	800f156 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2220      	movs	r2, #32
 800f192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1a4:	e853 3f00 	ldrex	r3, [r3]
 800f1a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ac:	f023 0310 	bic.w	r3, r3, #16
 800f1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1be:	65bb      	str	r3, [r7, #88]	; 0x58
 800f1c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f1c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1c6:	e841 2300 	strex	r3, r2, [r1]
 800f1ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1e4      	bne.n	800f19c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7f7 f953 	bl	8006484 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2202      	movs	r2, #2
 800f1e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 f91d 	bl	800f438 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f1fe:	e0fd      	b.n	800f3fc <HAL_UART_IRQHandler+0x760>
 800f200:	40020010 	.word	0x40020010
 800f204:	40020028 	.word	0x40020028
 800f208:	40020040 	.word	0x40020040
 800f20c:	40020058 	.word	0x40020058
 800f210:	40020070 	.word	0x40020070
 800f214:	40020088 	.word	0x40020088
 800f218:	400200a0 	.word	0x400200a0
 800f21c:	400200b8 	.word	0x400200b8
 800f220:	40020410 	.word	0x40020410
 800f224:	40020428 	.word	0x40020428
 800f228:	40020440 	.word	0x40020440
 800f22c:	40020458 	.word	0x40020458
 800f230:	40020470 	.word	0x40020470
 800f234:	40020488 	.word	0x40020488
 800f238:	400204a0 	.word	0x400204a0
 800f23c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 80cf 	beq.w	800f400 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f266:	2b00      	cmp	r3, #0
 800f268:	f000 80ca 	beq.w	800f400 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f274:	e853 3f00 	ldrex	r3, [r3]
 800f278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f27c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	461a      	mov	r2, r3
 800f28a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f28e:	647b      	str	r3, [r7, #68]	; 0x44
 800f290:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f296:	e841 2300 	strex	r3, r2, [r1]
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1e4      	bne.n	800f26c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ac:	e853 3f00 	ldrex	r3, [r3]
 800f2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800f2b2:	6a3a      	ldr	r2, [r7, #32]
 800f2b4:	4b55      	ldr	r3, [pc, #340]	; (800f40c <HAL_UART_IRQHandler+0x770>)
 800f2b6:	4013      	ands	r3, r2
 800f2b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f2c6:	633a      	str	r2, [r7, #48]	; 0x30
 800f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ce:	e841 2300 	strex	r3, r2, [r1]
 800f2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1e3      	bne.n	800f2a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2220      	movs	r2, #32
 800f2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	e853 3f00 	ldrex	r3, [r3]
 800f2fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f023 0310 	bic.w	r3, r3, #16
 800f302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f310:	61fb      	str	r3, [r7, #28]
 800f312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f314:	69b9      	ldr	r1, [r7, #24]
 800f316:	69fa      	ldr	r2, [r7, #28]
 800f318:	e841 2300 	strex	r3, r2, [r1]
 800f31c:	617b      	str	r3, [r7, #20]
   return(result);
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1e4      	bne.n	800f2ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2202      	movs	r2, #2
 800f328:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f32a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f881 	bl	800f438 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f336:	e063      	b.n	800f400 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f33c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00e      	beq.n	800f362 <HAL_UART_IRQHandler+0x6c6>
 800f344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d008      	beq.n	800f362 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f001 fe80 	bl	8011060 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f360:	e051      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d014      	beq.n	800f398 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f36e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f37e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d008      	beq.n	800f398 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d03a      	beq.n	800f404 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	4798      	blx	r3
    }
    return;
 800f396:	e035      	b.n	800f404 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d009      	beq.n	800f3b8 <HAL_UART_IRQHandler+0x71c>
 800f3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d003      	beq.n	800f3b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f001 f90d 	bl	80105d0 <UART_EndTransmit_IT>
    return;
 800f3b6:	e026      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d009      	beq.n	800f3d8 <HAL_UART_IRQHandler+0x73c>
 800f3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d003      	beq.n	800f3d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f001 fe59 	bl	8011088 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3d6:	e016      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d010      	beq.n	800f406 <HAL_UART_IRQHandler+0x76a>
 800f3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	da0c      	bge.n	800f406 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f001 fe41 	bl	8011074 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3f2:	e008      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
      return;
 800f3f4:	bf00      	nop
 800f3f6:	e006      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
    return;
 800f3f8:	bf00      	nop
 800f3fa:	e004      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
      return;
 800f3fc:	bf00      	nop
 800f3fe:	e002      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
      return;
 800f400:	bf00      	nop
 800f402:	e000      	b.n	800f406 <HAL_UART_IRQHandler+0x76a>
    return;
 800f404:	bf00      	nop
  }
}
 800f406:	37e8      	adds	r7, #232	; 0xe8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	effffffe 	.word	0xeffffffe

0800f410 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f418:	bf00      	nop
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f454:	b092      	sub	sp, #72	; 0x48
 800f456:	af00      	add	r7, sp, #0
 800f458:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	689a      	ldr	r2, [r3, #8]
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	431a      	orrs	r2, r3
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	695b      	ldr	r3, [r3, #20]
 800f46e:	431a      	orrs	r2, r3
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	69db      	ldr	r3, [r3, #28]
 800f474:	4313      	orrs	r3, r2
 800f476:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	4bbe      	ldr	r3, [pc, #760]	; (800f778 <UART_SetConfig+0x328>)
 800f480:	4013      	ands	r3, r2
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	6812      	ldr	r2, [r2, #0]
 800f486:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f488:	430b      	orrs	r3, r1
 800f48a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	68da      	ldr	r2, [r3, #12]
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	430a      	orrs	r2, r1
 800f4a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	699b      	ldr	r3, [r3, #24]
 800f4a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4ab3      	ldr	r2, [pc, #716]	; (800f77c <UART_SetConfig+0x32c>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d004      	beq.n	800f4bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	6a1b      	ldr	r3, [r3, #32]
 800f4b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	689a      	ldr	r2, [r3, #8]
 800f4c2:	4baf      	ldr	r3, [pc, #700]	; (800f780 <UART_SetConfig+0x330>)
 800f4c4:	4013      	ands	r3, r2
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	6812      	ldr	r2, [r2, #0]
 800f4ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4cc:	430b      	orrs	r3, r1
 800f4ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d6:	f023 010f 	bic.w	r1, r3, #15
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	430a      	orrs	r2, r1
 800f4e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4aa6      	ldr	r2, [pc, #664]	; (800f784 <UART_SetConfig+0x334>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d177      	bne.n	800f5e0 <UART_SetConfig+0x190>
 800f4f0:	4ba5      	ldr	r3, [pc, #660]	; (800f788 <UART_SetConfig+0x338>)
 800f4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f4f8:	2b28      	cmp	r3, #40	; 0x28
 800f4fa:	d86d      	bhi.n	800f5d8 <UART_SetConfig+0x188>
 800f4fc:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <UART_SetConfig+0xb4>)
 800f4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f502:	bf00      	nop
 800f504:	0800f5a9 	.word	0x0800f5a9
 800f508:	0800f5d9 	.word	0x0800f5d9
 800f50c:	0800f5d9 	.word	0x0800f5d9
 800f510:	0800f5d9 	.word	0x0800f5d9
 800f514:	0800f5d9 	.word	0x0800f5d9
 800f518:	0800f5d9 	.word	0x0800f5d9
 800f51c:	0800f5d9 	.word	0x0800f5d9
 800f520:	0800f5d9 	.word	0x0800f5d9
 800f524:	0800f5b1 	.word	0x0800f5b1
 800f528:	0800f5d9 	.word	0x0800f5d9
 800f52c:	0800f5d9 	.word	0x0800f5d9
 800f530:	0800f5d9 	.word	0x0800f5d9
 800f534:	0800f5d9 	.word	0x0800f5d9
 800f538:	0800f5d9 	.word	0x0800f5d9
 800f53c:	0800f5d9 	.word	0x0800f5d9
 800f540:	0800f5d9 	.word	0x0800f5d9
 800f544:	0800f5b9 	.word	0x0800f5b9
 800f548:	0800f5d9 	.word	0x0800f5d9
 800f54c:	0800f5d9 	.word	0x0800f5d9
 800f550:	0800f5d9 	.word	0x0800f5d9
 800f554:	0800f5d9 	.word	0x0800f5d9
 800f558:	0800f5d9 	.word	0x0800f5d9
 800f55c:	0800f5d9 	.word	0x0800f5d9
 800f560:	0800f5d9 	.word	0x0800f5d9
 800f564:	0800f5c1 	.word	0x0800f5c1
 800f568:	0800f5d9 	.word	0x0800f5d9
 800f56c:	0800f5d9 	.word	0x0800f5d9
 800f570:	0800f5d9 	.word	0x0800f5d9
 800f574:	0800f5d9 	.word	0x0800f5d9
 800f578:	0800f5d9 	.word	0x0800f5d9
 800f57c:	0800f5d9 	.word	0x0800f5d9
 800f580:	0800f5d9 	.word	0x0800f5d9
 800f584:	0800f5c9 	.word	0x0800f5c9
 800f588:	0800f5d9 	.word	0x0800f5d9
 800f58c:	0800f5d9 	.word	0x0800f5d9
 800f590:	0800f5d9 	.word	0x0800f5d9
 800f594:	0800f5d9 	.word	0x0800f5d9
 800f598:	0800f5d9 	.word	0x0800f5d9
 800f59c:	0800f5d9 	.word	0x0800f5d9
 800f5a0:	0800f5d9 	.word	0x0800f5d9
 800f5a4:	0800f5d1 	.word	0x0800f5d1
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ae:	e222      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5b0:	2304      	movs	r3, #4
 800f5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b6:	e21e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5b8:	2308      	movs	r3, #8
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5be:	e21a      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5c0:	2310      	movs	r3, #16
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c6:	e216      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5c8:	2320      	movs	r3, #32
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ce:	e212      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5d0:	2340      	movs	r3, #64	; 0x40
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d6:	e20e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5d8:	2380      	movs	r3, #128	; 0x80
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5de:	e20a      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a69      	ldr	r2, [pc, #420]	; (800f78c <UART_SetConfig+0x33c>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d130      	bne.n	800f64c <UART_SetConfig+0x1fc>
 800f5ea:	4b67      	ldr	r3, [pc, #412]	; (800f788 <UART_SetConfig+0x338>)
 800f5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ee:	f003 0307 	and.w	r3, r3, #7
 800f5f2:	2b05      	cmp	r3, #5
 800f5f4:	d826      	bhi.n	800f644 <UART_SetConfig+0x1f4>
 800f5f6:	a201      	add	r2, pc, #4	; (adr r2, 800f5fc <UART_SetConfig+0x1ac>)
 800f5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fc:	0800f615 	.word	0x0800f615
 800f600:	0800f61d 	.word	0x0800f61d
 800f604:	0800f625 	.word	0x0800f625
 800f608:	0800f62d 	.word	0x0800f62d
 800f60c:	0800f635 	.word	0x0800f635
 800f610:	0800f63d 	.word	0x0800f63d
 800f614:	2300      	movs	r3, #0
 800f616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61a:	e1ec      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f61c:	2304      	movs	r3, #4
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f622:	e1e8      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f624:	2308      	movs	r3, #8
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e1e4      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f62c:	2310      	movs	r3, #16
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e1e0      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f634:	2320      	movs	r3, #32
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e1dc      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f63c:	2340      	movs	r3, #64	; 0x40
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e1d8      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f644:	2380      	movs	r3, #128	; 0x80
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e1d4      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a4f      	ldr	r2, [pc, #316]	; (800f790 <UART_SetConfig+0x340>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d130      	bne.n	800f6b8 <UART_SetConfig+0x268>
 800f656:	4b4c      	ldr	r3, [pc, #304]	; (800f788 <UART_SetConfig+0x338>)
 800f658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f65a:	f003 0307 	and.w	r3, r3, #7
 800f65e:	2b05      	cmp	r3, #5
 800f660:	d826      	bhi.n	800f6b0 <UART_SetConfig+0x260>
 800f662:	a201      	add	r2, pc, #4	; (adr r2, 800f668 <UART_SetConfig+0x218>)
 800f664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f668:	0800f681 	.word	0x0800f681
 800f66c:	0800f689 	.word	0x0800f689
 800f670:	0800f691 	.word	0x0800f691
 800f674:	0800f699 	.word	0x0800f699
 800f678:	0800f6a1 	.word	0x0800f6a1
 800f67c:	0800f6a9 	.word	0x0800f6a9
 800f680:	2300      	movs	r3, #0
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f686:	e1b6      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f688:	2304      	movs	r3, #4
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68e:	e1b2      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f690:	2308      	movs	r3, #8
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f696:	e1ae      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f698:	2310      	movs	r3, #16
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69e:	e1aa      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f6a0:	2320      	movs	r3, #32
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6a6:	e1a6      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f6a8:	2340      	movs	r3, #64	; 0x40
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ae:	e1a2      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f6b0:	2380      	movs	r3, #128	; 0x80
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b6:	e19e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a35      	ldr	r2, [pc, #212]	; (800f794 <UART_SetConfig+0x344>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d130      	bne.n	800f724 <UART_SetConfig+0x2d4>
 800f6c2:	4b31      	ldr	r3, [pc, #196]	; (800f788 <UART_SetConfig+0x338>)
 800f6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6c6:	f003 0307 	and.w	r3, r3, #7
 800f6ca:	2b05      	cmp	r3, #5
 800f6cc:	d826      	bhi.n	800f71c <UART_SetConfig+0x2cc>
 800f6ce:	a201      	add	r2, pc, #4	; (adr r2, 800f6d4 <UART_SetConfig+0x284>)
 800f6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d4:	0800f6ed 	.word	0x0800f6ed
 800f6d8:	0800f6f5 	.word	0x0800f6f5
 800f6dc:	0800f6fd 	.word	0x0800f6fd
 800f6e0:	0800f705 	.word	0x0800f705
 800f6e4:	0800f70d 	.word	0x0800f70d
 800f6e8:	0800f715 	.word	0x0800f715
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6f2:	e180      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f6f4:	2304      	movs	r3, #4
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6fa:	e17c      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f6fc:	2308      	movs	r3, #8
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e178      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f704:	2310      	movs	r3, #16
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e174      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f70c:	2320      	movs	r3, #32
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e170      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f714:	2340      	movs	r3, #64	; 0x40
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e16c      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f71c:	2380      	movs	r3, #128	; 0x80
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e168      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4a1b      	ldr	r2, [pc, #108]	; (800f798 <UART_SetConfig+0x348>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d142      	bne.n	800f7b4 <UART_SetConfig+0x364>
 800f72e:	4b16      	ldr	r3, [pc, #88]	; (800f788 <UART_SetConfig+0x338>)
 800f730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f732:	f003 0307 	and.w	r3, r3, #7
 800f736:	2b05      	cmp	r3, #5
 800f738:	d838      	bhi.n	800f7ac <UART_SetConfig+0x35c>
 800f73a:	a201      	add	r2, pc, #4	; (adr r2, 800f740 <UART_SetConfig+0x2f0>)
 800f73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f740:	0800f759 	.word	0x0800f759
 800f744:	0800f761 	.word	0x0800f761
 800f748:	0800f769 	.word	0x0800f769
 800f74c:	0800f771 	.word	0x0800f771
 800f750:	0800f79d 	.word	0x0800f79d
 800f754:	0800f7a5 	.word	0x0800f7a5
 800f758:	2300      	movs	r3, #0
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f75e:	e14a      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f760:	2304      	movs	r3, #4
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f766:	e146      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f768:	2308      	movs	r3, #8
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76e:	e142      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f770:	2310      	movs	r3, #16
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f776:	e13e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f778:	cfff69f3 	.word	0xcfff69f3
 800f77c:	58000c00 	.word	0x58000c00
 800f780:	11fff4ff 	.word	0x11fff4ff
 800f784:	40011000 	.word	0x40011000
 800f788:	58024400 	.word	0x58024400
 800f78c:	40004400 	.word	0x40004400
 800f790:	40004800 	.word	0x40004800
 800f794:	40004c00 	.word	0x40004c00
 800f798:	40005000 	.word	0x40005000
 800f79c:	2320      	movs	r3, #32
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a2:	e128      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f7a4:	2340      	movs	r3, #64	; 0x40
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7aa:	e124      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f7ac:	2380      	movs	r3, #128	; 0x80
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b2:	e120      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4acb      	ldr	r2, [pc, #812]	; (800fae8 <UART_SetConfig+0x698>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d176      	bne.n	800f8ac <UART_SetConfig+0x45c>
 800f7be:	4bcb      	ldr	r3, [pc, #812]	; (800faec <UART_SetConfig+0x69c>)
 800f7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7c6:	2b28      	cmp	r3, #40	; 0x28
 800f7c8:	d86c      	bhi.n	800f8a4 <UART_SetConfig+0x454>
 800f7ca:	a201      	add	r2, pc, #4	; (adr r2, 800f7d0 <UART_SetConfig+0x380>)
 800f7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d0:	0800f875 	.word	0x0800f875
 800f7d4:	0800f8a5 	.word	0x0800f8a5
 800f7d8:	0800f8a5 	.word	0x0800f8a5
 800f7dc:	0800f8a5 	.word	0x0800f8a5
 800f7e0:	0800f8a5 	.word	0x0800f8a5
 800f7e4:	0800f8a5 	.word	0x0800f8a5
 800f7e8:	0800f8a5 	.word	0x0800f8a5
 800f7ec:	0800f8a5 	.word	0x0800f8a5
 800f7f0:	0800f87d 	.word	0x0800f87d
 800f7f4:	0800f8a5 	.word	0x0800f8a5
 800f7f8:	0800f8a5 	.word	0x0800f8a5
 800f7fc:	0800f8a5 	.word	0x0800f8a5
 800f800:	0800f8a5 	.word	0x0800f8a5
 800f804:	0800f8a5 	.word	0x0800f8a5
 800f808:	0800f8a5 	.word	0x0800f8a5
 800f80c:	0800f8a5 	.word	0x0800f8a5
 800f810:	0800f885 	.word	0x0800f885
 800f814:	0800f8a5 	.word	0x0800f8a5
 800f818:	0800f8a5 	.word	0x0800f8a5
 800f81c:	0800f8a5 	.word	0x0800f8a5
 800f820:	0800f8a5 	.word	0x0800f8a5
 800f824:	0800f8a5 	.word	0x0800f8a5
 800f828:	0800f8a5 	.word	0x0800f8a5
 800f82c:	0800f8a5 	.word	0x0800f8a5
 800f830:	0800f88d 	.word	0x0800f88d
 800f834:	0800f8a5 	.word	0x0800f8a5
 800f838:	0800f8a5 	.word	0x0800f8a5
 800f83c:	0800f8a5 	.word	0x0800f8a5
 800f840:	0800f8a5 	.word	0x0800f8a5
 800f844:	0800f8a5 	.word	0x0800f8a5
 800f848:	0800f8a5 	.word	0x0800f8a5
 800f84c:	0800f8a5 	.word	0x0800f8a5
 800f850:	0800f895 	.word	0x0800f895
 800f854:	0800f8a5 	.word	0x0800f8a5
 800f858:	0800f8a5 	.word	0x0800f8a5
 800f85c:	0800f8a5 	.word	0x0800f8a5
 800f860:	0800f8a5 	.word	0x0800f8a5
 800f864:	0800f8a5 	.word	0x0800f8a5
 800f868:	0800f8a5 	.word	0x0800f8a5
 800f86c:	0800f8a5 	.word	0x0800f8a5
 800f870:	0800f89d 	.word	0x0800f89d
 800f874:	2301      	movs	r3, #1
 800f876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87a:	e0bc      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f87c:	2304      	movs	r3, #4
 800f87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f882:	e0b8      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f884:	2308      	movs	r3, #8
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88a:	e0b4      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f88c:	2310      	movs	r3, #16
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f892:	e0b0      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f894:	2320      	movs	r3, #32
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89a:	e0ac      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f89c:	2340      	movs	r3, #64	; 0x40
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a2:	e0a8      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f8a4:	2380      	movs	r3, #128	; 0x80
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8aa:	e0a4      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a8f      	ldr	r2, [pc, #572]	; (800faf0 <UART_SetConfig+0x6a0>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d130      	bne.n	800f918 <UART_SetConfig+0x4c8>
 800f8b6:	4b8d      	ldr	r3, [pc, #564]	; (800faec <UART_SetConfig+0x69c>)
 800f8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ba:	f003 0307 	and.w	r3, r3, #7
 800f8be:	2b05      	cmp	r3, #5
 800f8c0:	d826      	bhi.n	800f910 <UART_SetConfig+0x4c0>
 800f8c2:	a201      	add	r2, pc, #4	; (adr r2, 800f8c8 <UART_SetConfig+0x478>)
 800f8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c8:	0800f8e1 	.word	0x0800f8e1
 800f8cc:	0800f8e9 	.word	0x0800f8e9
 800f8d0:	0800f8f1 	.word	0x0800f8f1
 800f8d4:	0800f8f9 	.word	0x0800f8f9
 800f8d8:	0800f901 	.word	0x0800f901
 800f8dc:	0800f909 	.word	0x0800f909
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e6:	e086      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f8e8:	2304      	movs	r3, #4
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ee:	e082      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f8f0:	2308      	movs	r3, #8
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f6:	e07e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f8f8:	2310      	movs	r3, #16
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fe:	e07a      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f900:	2320      	movs	r3, #32
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f906:	e076      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f908:	2340      	movs	r3, #64	; 0x40
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90e:	e072      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f910:	2380      	movs	r3, #128	; 0x80
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f916:	e06e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a75      	ldr	r2, [pc, #468]	; (800faf4 <UART_SetConfig+0x6a4>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d130      	bne.n	800f984 <UART_SetConfig+0x534>
 800f922:	4b72      	ldr	r3, [pc, #456]	; (800faec <UART_SetConfig+0x69c>)
 800f924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f926:	f003 0307 	and.w	r3, r3, #7
 800f92a:	2b05      	cmp	r3, #5
 800f92c:	d826      	bhi.n	800f97c <UART_SetConfig+0x52c>
 800f92e:	a201      	add	r2, pc, #4	; (adr r2, 800f934 <UART_SetConfig+0x4e4>)
 800f930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f934:	0800f94d 	.word	0x0800f94d
 800f938:	0800f955 	.word	0x0800f955
 800f93c:	0800f95d 	.word	0x0800f95d
 800f940:	0800f965 	.word	0x0800f965
 800f944:	0800f96d 	.word	0x0800f96d
 800f948:	0800f975 	.word	0x0800f975
 800f94c:	2300      	movs	r3, #0
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f952:	e050      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f954:	2304      	movs	r3, #4
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95a:	e04c      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f95c:	2308      	movs	r3, #8
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f962:	e048      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f964:	2310      	movs	r3, #16
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96a:	e044      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f96c:	2320      	movs	r3, #32
 800f96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f972:	e040      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f974:	2340      	movs	r3, #64	; 0x40
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97a:	e03c      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f97c:	2380      	movs	r3, #128	; 0x80
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f982:	e038      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a5b      	ldr	r2, [pc, #364]	; (800faf8 <UART_SetConfig+0x6a8>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d130      	bne.n	800f9f0 <UART_SetConfig+0x5a0>
 800f98e:	4b57      	ldr	r3, [pc, #348]	; (800faec <UART_SetConfig+0x69c>)
 800f990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f992:	f003 0307 	and.w	r3, r3, #7
 800f996:	2b05      	cmp	r3, #5
 800f998:	d826      	bhi.n	800f9e8 <UART_SetConfig+0x598>
 800f99a:	a201      	add	r2, pc, #4	; (adr r2, 800f9a0 <UART_SetConfig+0x550>)
 800f99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a0:	0800f9b9 	.word	0x0800f9b9
 800f9a4:	0800f9c1 	.word	0x0800f9c1
 800f9a8:	0800f9c9 	.word	0x0800f9c9
 800f9ac:	0800f9d1 	.word	0x0800f9d1
 800f9b0:	0800f9d9 	.word	0x0800f9d9
 800f9b4:	0800f9e1 	.word	0x0800f9e1
 800f9b8:	2302      	movs	r3, #2
 800f9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9be:	e01a      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9c0:	2304      	movs	r3, #4
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c6:	e016      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9c8:	2308      	movs	r3, #8
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ce:	e012      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9d0:	2310      	movs	r3, #16
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d6:	e00e      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9d8:	2320      	movs	r3, #32
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9de:	e00a      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9e0:	2340      	movs	r3, #64	; 0x40
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e6:	e006      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9e8:	2380      	movs	r3, #128	; 0x80
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ee:	e002      	b.n	800f9f6 <UART_SetConfig+0x5a6>
 800f9f0:	2380      	movs	r3, #128	; 0x80
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a3f      	ldr	r2, [pc, #252]	; (800faf8 <UART_SetConfig+0x6a8>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	f040 80f8 	bne.w	800fbf2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa06:	2b20      	cmp	r3, #32
 800fa08:	dc46      	bgt.n	800fa98 <UART_SetConfig+0x648>
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	f2c0 8082 	blt.w	800fb14 <UART_SetConfig+0x6c4>
 800fa10:	3b02      	subs	r3, #2
 800fa12:	2b1e      	cmp	r3, #30
 800fa14:	d87e      	bhi.n	800fb14 <UART_SetConfig+0x6c4>
 800fa16:	a201      	add	r2, pc, #4	; (adr r2, 800fa1c <UART_SetConfig+0x5cc>)
 800fa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa1c:	0800fa9f 	.word	0x0800fa9f
 800fa20:	0800fb15 	.word	0x0800fb15
 800fa24:	0800faa7 	.word	0x0800faa7
 800fa28:	0800fb15 	.word	0x0800fb15
 800fa2c:	0800fb15 	.word	0x0800fb15
 800fa30:	0800fb15 	.word	0x0800fb15
 800fa34:	0800fab7 	.word	0x0800fab7
 800fa38:	0800fb15 	.word	0x0800fb15
 800fa3c:	0800fb15 	.word	0x0800fb15
 800fa40:	0800fb15 	.word	0x0800fb15
 800fa44:	0800fb15 	.word	0x0800fb15
 800fa48:	0800fb15 	.word	0x0800fb15
 800fa4c:	0800fb15 	.word	0x0800fb15
 800fa50:	0800fb15 	.word	0x0800fb15
 800fa54:	0800fac7 	.word	0x0800fac7
 800fa58:	0800fb15 	.word	0x0800fb15
 800fa5c:	0800fb15 	.word	0x0800fb15
 800fa60:	0800fb15 	.word	0x0800fb15
 800fa64:	0800fb15 	.word	0x0800fb15
 800fa68:	0800fb15 	.word	0x0800fb15
 800fa6c:	0800fb15 	.word	0x0800fb15
 800fa70:	0800fb15 	.word	0x0800fb15
 800fa74:	0800fb15 	.word	0x0800fb15
 800fa78:	0800fb15 	.word	0x0800fb15
 800fa7c:	0800fb15 	.word	0x0800fb15
 800fa80:	0800fb15 	.word	0x0800fb15
 800fa84:	0800fb15 	.word	0x0800fb15
 800fa88:	0800fb15 	.word	0x0800fb15
 800fa8c:	0800fb15 	.word	0x0800fb15
 800fa90:	0800fb15 	.word	0x0800fb15
 800fa94:	0800fb07 	.word	0x0800fb07
 800fa98:	2b40      	cmp	r3, #64	; 0x40
 800fa9a:	d037      	beq.n	800fb0c <UART_SetConfig+0x6bc>
 800fa9c:	e03a      	b.n	800fb14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fa9e:	f7fc f869 	bl	800bb74 <HAL_RCCEx_GetD3PCLK1Freq>
 800faa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800faa4:	e03c      	b.n	800fb20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fc f878 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fab4:	e034      	b.n	800fb20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fab6:	f107 0318 	add.w	r3, r7, #24
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fc f9c4 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fac4:	e02c      	b.n	800fb20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fac6:	4b09      	ldr	r3, [pc, #36]	; (800faec <UART_SetConfig+0x69c>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f003 0320 	and.w	r3, r3, #32
 800face:	2b00      	cmp	r3, #0
 800fad0:	d016      	beq.n	800fb00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fad2:	4b06      	ldr	r3, [pc, #24]	; (800faec <UART_SetConfig+0x69c>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	08db      	lsrs	r3, r3, #3
 800fad8:	f003 0303 	and.w	r3, r3, #3
 800fadc:	4a07      	ldr	r2, [pc, #28]	; (800fafc <UART_SetConfig+0x6ac>)
 800fade:	fa22 f303 	lsr.w	r3, r2, r3
 800fae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fae4:	e01c      	b.n	800fb20 <UART_SetConfig+0x6d0>
 800fae6:	bf00      	nop
 800fae8:	40011400 	.word	0x40011400
 800faec:	58024400 	.word	0x58024400
 800faf0:	40007800 	.word	0x40007800
 800faf4:	40007c00 	.word	0x40007c00
 800faf8:	58000c00 	.word	0x58000c00
 800fafc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fb00:	4b9d      	ldr	r3, [pc, #628]	; (800fd78 <UART_SetConfig+0x928>)
 800fb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb04:	e00c      	b.n	800fb20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb06:	4b9d      	ldr	r3, [pc, #628]	; (800fd7c <UART_SetConfig+0x92c>)
 800fb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb0a:	e009      	b.n	800fb20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb12:	e005      	b.n	800fb20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fb14:	2300      	movs	r3, #0
 800fb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fb1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f000 81de 	beq.w	800fee4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb2c:	4a94      	ldr	r2, [pc, #592]	; (800fd80 <UART_SetConfig+0x930>)
 800fb2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb32:	461a      	mov	r2, r3
 800fb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb36:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb3a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	4613      	mov	r3, r2
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	4413      	add	r3, r2
 800fb46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d305      	bcc.n	800fb58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d903      	bls.n	800fb60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb5e:	e1c1      	b.n	800fee4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb62:	2200      	movs	r2, #0
 800fb64:	60bb      	str	r3, [r7, #8]
 800fb66:	60fa      	str	r2, [r7, #12]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	4a84      	ldr	r2, [pc, #528]	; (800fd80 <UART_SetConfig+0x930>)
 800fb6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	2200      	movs	r2, #0
 800fb76:	603b      	str	r3, [r7, #0]
 800fb78:	607a      	str	r2, [r7, #4]
 800fb7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fb82:	f7f0 fbfd 	bl	8000380 <__aeabi_uldivmod>
 800fb86:	4602      	mov	r2, r0
 800fb88:	460b      	mov	r3, r1
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	f04f 0200 	mov.w	r2, #0
 800fb92:	f04f 0300 	mov.w	r3, #0
 800fb96:	020b      	lsls	r3, r1, #8
 800fb98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb9c:	0202      	lsls	r2, r0, #8
 800fb9e:	6979      	ldr	r1, [r7, #20]
 800fba0:	6849      	ldr	r1, [r1, #4]
 800fba2:	0849      	lsrs	r1, r1, #1
 800fba4:	2000      	movs	r0, #0
 800fba6:	460c      	mov	r4, r1
 800fba8:	4605      	mov	r5, r0
 800fbaa:	eb12 0804 	adds.w	r8, r2, r4
 800fbae:	eb43 0905 	adc.w	r9, r3, r5
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	469a      	mov	sl, r3
 800fbba:	4693      	mov	fp, r2
 800fbbc:	4652      	mov	r2, sl
 800fbbe:	465b      	mov	r3, fp
 800fbc0:	4640      	mov	r0, r8
 800fbc2:	4649      	mov	r1, r9
 800fbc4:	f7f0 fbdc 	bl	8000380 <__aeabi_uldivmod>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	460b      	mov	r3, r1
 800fbcc:	4613      	mov	r3, r2
 800fbce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbd6:	d308      	bcc.n	800fbea <UART_SetConfig+0x79a>
 800fbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbde:	d204      	bcs.n	800fbea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbe6:	60da      	str	r2, [r3, #12]
 800fbe8:	e17c      	b.n	800fee4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fbf0:	e178      	b.n	800fee4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbfa:	f040 80c5 	bne.w	800fd88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fbfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc02:	2b20      	cmp	r3, #32
 800fc04:	dc48      	bgt.n	800fc98 <UART_SetConfig+0x848>
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	db7b      	blt.n	800fd02 <UART_SetConfig+0x8b2>
 800fc0a:	2b20      	cmp	r3, #32
 800fc0c:	d879      	bhi.n	800fd02 <UART_SetConfig+0x8b2>
 800fc0e:	a201      	add	r2, pc, #4	; (adr r2, 800fc14 <UART_SetConfig+0x7c4>)
 800fc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc14:	0800fc9f 	.word	0x0800fc9f
 800fc18:	0800fca7 	.word	0x0800fca7
 800fc1c:	0800fd03 	.word	0x0800fd03
 800fc20:	0800fd03 	.word	0x0800fd03
 800fc24:	0800fcaf 	.word	0x0800fcaf
 800fc28:	0800fd03 	.word	0x0800fd03
 800fc2c:	0800fd03 	.word	0x0800fd03
 800fc30:	0800fd03 	.word	0x0800fd03
 800fc34:	0800fcbf 	.word	0x0800fcbf
 800fc38:	0800fd03 	.word	0x0800fd03
 800fc3c:	0800fd03 	.word	0x0800fd03
 800fc40:	0800fd03 	.word	0x0800fd03
 800fc44:	0800fd03 	.word	0x0800fd03
 800fc48:	0800fd03 	.word	0x0800fd03
 800fc4c:	0800fd03 	.word	0x0800fd03
 800fc50:	0800fd03 	.word	0x0800fd03
 800fc54:	0800fccf 	.word	0x0800fccf
 800fc58:	0800fd03 	.word	0x0800fd03
 800fc5c:	0800fd03 	.word	0x0800fd03
 800fc60:	0800fd03 	.word	0x0800fd03
 800fc64:	0800fd03 	.word	0x0800fd03
 800fc68:	0800fd03 	.word	0x0800fd03
 800fc6c:	0800fd03 	.word	0x0800fd03
 800fc70:	0800fd03 	.word	0x0800fd03
 800fc74:	0800fd03 	.word	0x0800fd03
 800fc78:	0800fd03 	.word	0x0800fd03
 800fc7c:	0800fd03 	.word	0x0800fd03
 800fc80:	0800fd03 	.word	0x0800fd03
 800fc84:	0800fd03 	.word	0x0800fd03
 800fc88:	0800fd03 	.word	0x0800fd03
 800fc8c:	0800fd03 	.word	0x0800fd03
 800fc90:	0800fd03 	.word	0x0800fd03
 800fc94:	0800fcf5 	.word	0x0800fcf5
 800fc98:	2b40      	cmp	r3, #64	; 0x40
 800fc9a:	d02e      	beq.n	800fcfa <UART_SetConfig+0x8aa>
 800fc9c:	e031      	b.n	800fd02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc9e:	f7f9 ff71 	bl	8009b84 <HAL_RCC_GetPCLK1Freq>
 800fca2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fca4:	e033      	b.n	800fd0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fca6:	f7f9 ff83 	bl	8009bb0 <HAL_RCC_GetPCLK2Freq>
 800fcaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcac:	e02f      	b.n	800fd0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fb ff74 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcbc:	e027      	b.n	800fd0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcbe:	f107 0318 	add.w	r3, r7, #24
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fc f8c0 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fccc:	e01f      	b.n	800fd0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcce:	4b2d      	ldr	r3, [pc, #180]	; (800fd84 <UART_SetConfig+0x934>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f003 0320 	and.w	r3, r3, #32
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d009      	beq.n	800fcee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fcda:	4b2a      	ldr	r3, [pc, #168]	; (800fd84 <UART_SetConfig+0x934>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	08db      	lsrs	r3, r3, #3
 800fce0:	f003 0303 	and.w	r3, r3, #3
 800fce4:	4a24      	ldr	r2, [pc, #144]	; (800fd78 <UART_SetConfig+0x928>)
 800fce6:	fa22 f303 	lsr.w	r3, r2, r3
 800fcea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fcec:	e00f      	b.n	800fd0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fcee:	4b22      	ldr	r3, [pc, #136]	; (800fd78 <UART_SetConfig+0x928>)
 800fcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf2:	e00c      	b.n	800fd0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fcf4:	4b21      	ldr	r3, [pc, #132]	; (800fd7c <UART_SetConfig+0x92c>)
 800fcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf8:	e009      	b.n	800fd0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd00:	e005      	b.n	800fd0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd02:	2300      	movs	r3, #0
 800fd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 80e7 	beq.w	800fee4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1a:	4a19      	ldr	r2, [pc, #100]	; (800fd80 <UART_SetConfig+0x930>)
 800fd1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd20:	461a      	mov	r2, r3
 800fd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd24:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd28:	005a      	lsls	r2, r3, #1
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	085b      	lsrs	r3, r3, #1
 800fd30:	441a      	add	r2, r3
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd3a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	2b0f      	cmp	r3, #15
 800fd40:	d916      	bls.n	800fd70 <UART_SetConfig+0x920>
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd48:	d212      	bcs.n	800fd70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	f023 030f 	bic.w	r3, r3, #15
 800fd52:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd56:	085b      	lsrs	r3, r3, #1
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	f003 0307 	and.w	r3, r3, #7
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd62:	4313      	orrs	r3, r2
 800fd64:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fd6c:	60da      	str	r2, [r3, #12]
 800fd6e:	e0b9      	b.n	800fee4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fd70:	2301      	movs	r3, #1
 800fd72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd76:	e0b5      	b.n	800fee4 <UART_SetConfig+0xa94>
 800fd78:	03d09000 	.word	0x03d09000
 800fd7c:	003d0900 	.word	0x003d0900
 800fd80:	080160cc 	.word	0x080160cc
 800fd84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd8c:	2b20      	cmp	r3, #32
 800fd8e:	dc49      	bgt.n	800fe24 <UART_SetConfig+0x9d4>
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	db7c      	blt.n	800fe8e <UART_SetConfig+0xa3e>
 800fd94:	2b20      	cmp	r3, #32
 800fd96:	d87a      	bhi.n	800fe8e <UART_SetConfig+0xa3e>
 800fd98:	a201      	add	r2, pc, #4	; (adr r2, 800fda0 <UART_SetConfig+0x950>)
 800fd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9e:	bf00      	nop
 800fda0:	0800fe2b 	.word	0x0800fe2b
 800fda4:	0800fe33 	.word	0x0800fe33
 800fda8:	0800fe8f 	.word	0x0800fe8f
 800fdac:	0800fe8f 	.word	0x0800fe8f
 800fdb0:	0800fe3b 	.word	0x0800fe3b
 800fdb4:	0800fe8f 	.word	0x0800fe8f
 800fdb8:	0800fe8f 	.word	0x0800fe8f
 800fdbc:	0800fe8f 	.word	0x0800fe8f
 800fdc0:	0800fe4b 	.word	0x0800fe4b
 800fdc4:	0800fe8f 	.word	0x0800fe8f
 800fdc8:	0800fe8f 	.word	0x0800fe8f
 800fdcc:	0800fe8f 	.word	0x0800fe8f
 800fdd0:	0800fe8f 	.word	0x0800fe8f
 800fdd4:	0800fe8f 	.word	0x0800fe8f
 800fdd8:	0800fe8f 	.word	0x0800fe8f
 800fddc:	0800fe8f 	.word	0x0800fe8f
 800fde0:	0800fe5b 	.word	0x0800fe5b
 800fde4:	0800fe8f 	.word	0x0800fe8f
 800fde8:	0800fe8f 	.word	0x0800fe8f
 800fdec:	0800fe8f 	.word	0x0800fe8f
 800fdf0:	0800fe8f 	.word	0x0800fe8f
 800fdf4:	0800fe8f 	.word	0x0800fe8f
 800fdf8:	0800fe8f 	.word	0x0800fe8f
 800fdfc:	0800fe8f 	.word	0x0800fe8f
 800fe00:	0800fe8f 	.word	0x0800fe8f
 800fe04:	0800fe8f 	.word	0x0800fe8f
 800fe08:	0800fe8f 	.word	0x0800fe8f
 800fe0c:	0800fe8f 	.word	0x0800fe8f
 800fe10:	0800fe8f 	.word	0x0800fe8f
 800fe14:	0800fe8f 	.word	0x0800fe8f
 800fe18:	0800fe8f 	.word	0x0800fe8f
 800fe1c:	0800fe8f 	.word	0x0800fe8f
 800fe20:	0800fe81 	.word	0x0800fe81
 800fe24:	2b40      	cmp	r3, #64	; 0x40
 800fe26:	d02e      	beq.n	800fe86 <UART_SetConfig+0xa36>
 800fe28:	e031      	b.n	800fe8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe2a:	f7f9 feab 	bl	8009b84 <HAL_RCC_GetPCLK1Freq>
 800fe2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe30:	e033      	b.n	800fe9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe32:	f7f9 febd 	bl	8009bb0 <HAL_RCC_GetPCLK2Freq>
 800fe36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe38:	e02f      	b.n	800fe9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fb feae 	bl	800bba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe48:	e027      	b.n	800fe9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe4a:	f107 0318 	add.w	r3, r7, #24
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fb fffa 	bl	800be48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe54:	69fb      	ldr	r3, [r7, #28]
 800fe56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe58:	e01f      	b.n	800fe9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe5a:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <UART_SetConfig+0xac0>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f003 0320 	and.w	r3, r3, #32
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d009      	beq.n	800fe7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe66:	4b2a      	ldr	r3, [pc, #168]	; (800ff10 <UART_SetConfig+0xac0>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	08db      	lsrs	r3, r3, #3
 800fe6c:	f003 0303 	and.w	r3, r3, #3
 800fe70:	4a28      	ldr	r2, [pc, #160]	; (800ff14 <UART_SetConfig+0xac4>)
 800fe72:	fa22 f303 	lsr.w	r3, r2, r3
 800fe76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe78:	e00f      	b.n	800fe9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fe7a:	4b26      	ldr	r3, [pc, #152]	; (800ff14 <UART_SetConfig+0xac4>)
 800fe7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe7e:	e00c      	b.n	800fe9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe80:	4b25      	ldr	r3, [pc, #148]	; (800ff18 <UART_SetConfig+0xac8>)
 800fe82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe84:	e009      	b.n	800fe9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe8c:	e005      	b.n	800fe9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fe98:	bf00      	nop
    }

    if (pclk != 0U)
 800fe9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d021      	beq.n	800fee4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea4:	4a1d      	ldr	r2, [pc, #116]	; (800ff1c <UART_SetConfig+0xacc>)
 800fea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800feaa:	461a      	mov	r2, r3
 800feac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feae:	fbb3 f2f2 	udiv	r2, r3, r2
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	085b      	lsrs	r3, r3, #1
 800feb8:	441a      	add	r2, r3
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	fbb2 f3f3 	udiv	r3, r2, r3
 800fec2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	2b0f      	cmp	r3, #15
 800fec8:	d909      	bls.n	800fede <UART_SetConfig+0xa8e>
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fed0:	d205      	bcs.n	800fede <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	60da      	str	r2, [r3, #12]
 800fedc:	e002      	b.n	800fee4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	2201      	movs	r2, #1
 800fef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	2200      	movs	r2, #0
 800fef8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2200      	movs	r2, #0
 800fefe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ff00:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3748      	adds	r7, #72	; 0x48
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff0e:	bf00      	nop
 800ff10:	58024400 	.word	0x58024400
 800ff14:	03d09000 	.word	0x03d09000
 800ff18:	003d0900 	.word	0x003d0900
 800ff1c:	080160cc 	.word	0x080160cc

0800ff20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2c:	f003 0308 	and.w	r3, r3, #8
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00a      	beq.n	800ff4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	430a      	orrs	r2, r1
 800ff48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00a      	beq.n	800ff6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff70:	f003 0302 	and.w	r3, r3, #2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00a      	beq.n	800ff8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	430a      	orrs	r2, r1
 800ff8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff92:	f003 0304 	and.w	r3, r3, #4
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00a      	beq.n	800ffb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	430a      	orrs	r2, r1
 800ffae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb4:	f003 0310 	and.w	r3, r3, #16
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00a      	beq.n	800ffd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	430a      	orrs	r2, r1
 800ffd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffd6:	f003 0320 	and.w	r3, r3, #32
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00a      	beq.n	800fff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	430a      	orrs	r2, r1
 800fff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d01a      	beq.n	8010036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	430a      	orrs	r2, r1
 8010014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801001a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801001e:	d10a      	bne.n	8010036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	430a      	orrs	r2, r1
 8010034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00a      	beq.n	8010058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	430a      	orrs	r2, r1
 8010056:	605a      	str	r2, [r3, #4]
  }
}
 8010058:	bf00      	nop
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b098      	sub	sp, #96	; 0x60
 8010068:	af02      	add	r7, sp, #8
 801006a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010074:	f7f3 fb18 	bl	80036a8 <HAL_GetTick>
 8010078:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f003 0308 	and.w	r3, r3, #8
 8010084:	2b08      	cmp	r3, #8
 8010086:	d12f      	bne.n	80100e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801008c:	9300      	str	r3, [sp, #0]
 801008e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010090:	2200      	movs	r2, #0
 8010092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f88e 	bl	80101b8 <UART_WaitOnFlagUntilTimeout>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d022      	beq.n	80100e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100aa:	e853 3f00 	ldrex	r3, [r3]
 80100ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100b6:	653b      	str	r3, [r7, #80]	; 0x50
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	461a      	mov	r2, r3
 80100be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c0:	647b      	str	r3, [r7, #68]	; 0x44
 80100c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100c8:	e841 2300 	strex	r3, r2, [r1]
 80100cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80100ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d1e6      	bne.n	80100a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2220      	movs	r2, #32
 80100d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100e4:	2303      	movs	r3, #3
 80100e6:	e063      	b.n	80101b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f003 0304 	and.w	r3, r3, #4
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d149      	bne.n	801018a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100fe:	2200      	movs	r2, #0
 8010100:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 f857 	bl	80101b8 <UART_WaitOnFlagUntilTimeout>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d03c      	beq.n	801018a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010118:	e853 3f00 	ldrex	r3, [r3]
 801011c:	623b      	str	r3, [r7, #32]
   return(result);
 801011e:	6a3b      	ldr	r3, [r7, #32]
 8010120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	461a      	mov	r2, r3
 801012c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801012e:	633b      	str	r3, [r7, #48]	; 0x30
 8010130:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010136:	e841 2300 	strex	r3, r2, [r1]
 801013a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801013c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1e6      	bne.n	8010110 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	3308      	adds	r3, #8
 8010148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	e853 3f00 	ldrex	r3, [r3]
 8010150:	60fb      	str	r3, [r7, #12]
   return(result);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f023 0301 	bic.w	r3, r3, #1
 8010158:	64bb      	str	r3, [r7, #72]	; 0x48
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	3308      	adds	r3, #8
 8010160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010162:	61fa      	str	r2, [r7, #28]
 8010164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010166:	69b9      	ldr	r1, [r7, #24]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	e841 2300 	strex	r3, r2, [r1]
 801016e:	617b      	str	r3, [r7, #20]
   return(result);
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e5      	bne.n	8010142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2220      	movs	r2, #32
 801017a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2200      	movs	r2, #0
 8010182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e012      	b.n	80101b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2220      	movs	r2, #32
 801018e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2220      	movs	r2, #32
 8010196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3758      	adds	r7, #88	; 0x58
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af00      	add	r7, sp, #0
 80101be:	60f8      	str	r0, [r7, #12]
 80101c0:	60b9      	str	r1, [r7, #8]
 80101c2:	603b      	str	r3, [r7, #0]
 80101c4:	4613      	mov	r3, r2
 80101c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101c8:	e04f      	b.n	801026a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101d0:	d04b      	beq.n	801026a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101d2:	f7f3 fa69 	bl	80036a8 <HAL_GetTick>
 80101d6:	4602      	mov	r2, r0
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	69ba      	ldr	r2, [r7, #24]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d302      	bcc.n	80101e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d101      	bne.n	80101ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80101e8:	2303      	movs	r3, #3
 80101ea:	e04e      	b.n	801028a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f003 0304 	and.w	r3, r3, #4
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d037      	beq.n	801026a <UART_WaitOnFlagUntilTimeout+0xb2>
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	2b80      	cmp	r3, #128	; 0x80
 80101fe:	d034      	beq.n	801026a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	2b40      	cmp	r3, #64	; 0x40
 8010204:	d031      	beq.n	801026a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	f003 0308 	and.w	r3, r3, #8
 8010210:	2b08      	cmp	r3, #8
 8010212:	d110      	bne.n	8010236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2208      	movs	r2, #8
 801021a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 f95b 	bl	80104d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2208      	movs	r2, #8
 8010226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	e029      	b.n	801028a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010244:	d111      	bne.n	801026a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801024e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f000 f941 	bl	80104d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2220      	movs	r2, #32
 801025a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2200      	movs	r2, #0
 8010262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010266:	2303      	movs	r3, #3
 8010268:	e00f      	b.n	801028a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	69da      	ldr	r2, [r3, #28]
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	4013      	ands	r3, r2
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	429a      	cmp	r2, r3
 8010278:	bf0c      	ite	eq
 801027a:	2301      	moveq	r3, #1
 801027c:	2300      	movne	r3, #0
 801027e:	b2db      	uxtb	r3, r3
 8010280:	461a      	mov	r2, r3
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	429a      	cmp	r2, r3
 8010286:	d0a0      	beq.n	80101ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010294:	b480      	push	{r7}
 8010296:	b0a3      	sub	sp, #140	; 0x8c
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	4613      	mov	r3, r2
 80102a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	88fa      	ldrh	r2, [r7, #6]
 80102ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	88fa      	ldrh	r2, [r7, #6]
 80102b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2200      	movs	r2, #0
 80102bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102c6:	d10e      	bne.n	80102e6 <UART_Start_Receive_IT+0x52>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d105      	bne.n	80102dc <UART_Start_Receive_IT+0x48>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80102d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102da:	e02d      	b.n	8010338 <UART_Start_Receive_IT+0xa4>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	22ff      	movs	r2, #255	; 0xff
 80102e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102e4:	e028      	b.n	8010338 <UART_Start_Receive_IT+0xa4>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10d      	bne.n	801030a <UART_Start_Receive_IT+0x76>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d104      	bne.n	8010300 <UART_Start_Receive_IT+0x6c>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	22ff      	movs	r2, #255	; 0xff
 80102fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102fe:	e01b      	b.n	8010338 <UART_Start_Receive_IT+0xa4>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	227f      	movs	r2, #127	; 0x7f
 8010304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010308:	e016      	b.n	8010338 <UART_Start_Receive_IT+0xa4>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010312:	d10d      	bne.n	8010330 <UART_Start_Receive_IT+0x9c>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d104      	bne.n	8010326 <UART_Start_Receive_IT+0x92>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	227f      	movs	r2, #127	; 0x7f
 8010320:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010324:	e008      	b.n	8010338 <UART_Start_Receive_IT+0xa4>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	223f      	movs	r2, #63	; 0x3f
 801032a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801032e:	e003      	b.n	8010338 <UART_Start_Receive_IT+0xa4>
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2222      	movs	r2, #34	; 0x22
 8010344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3308      	adds	r3, #8
 801034e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010352:	e853 3f00 	ldrex	r3, [r3]
 8010356:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801035a:	f043 0301 	orr.w	r3, r3, #1
 801035e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3308      	adds	r3, #8
 8010368:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801036c:	673a      	str	r2, [r7, #112]	; 0x70
 801036e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010370:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010372:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010374:	e841 2300 	strex	r3, r2, [r1]
 8010378:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801037a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1e3      	bne.n	8010348 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010388:	d14f      	bne.n	801042a <UART_Start_Receive_IT+0x196>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010390:	88fa      	ldrh	r2, [r7, #6]
 8010392:	429a      	cmp	r2, r3
 8010394:	d349      	bcc.n	801042a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801039e:	d107      	bne.n	80103b0 <UART_Start_Receive_IT+0x11c>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d103      	bne.n	80103b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	4a47      	ldr	r2, [pc, #284]	; (80104c8 <UART_Start_Receive_IT+0x234>)
 80103ac:	675a      	str	r2, [r3, #116]	; 0x74
 80103ae:	e002      	b.n	80103b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	4a46      	ldr	r2, [pc, #280]	; (80104cc <UART_Start_Receive_IT+0x238>)
 80103b4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d01a      	beq.n	80103f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c6:	e853 3f00 	ldrex	r3, [r3]
 80103ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	461a      	mov	r2, r3
 80103dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80103e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103e2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103e8:	e841 2300 	strex	r3, r2, [r1]
 80103ec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80103ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d1e4      	bne.n	80103be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3308      	adds	r3, #8
 80103fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fe:	e853 3f00 	ldrex	r3, [r3]
 8010402:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801040a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3308      	adds	r3, #8
 8010412:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010414:	64ba      	str	r2, [r7, #72]	; 0x48
 8010416:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010418:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801041a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801041c:	e841 2300 	strex	r3, r2, [r1]
 8010420:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1e5      	bne.n	80103f4 <UART_Start_Receive_IT+0x160>
 8010428:	e046      	b.n	80104b8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010432:	d107      	bne.n	8010444 <UART_Start_Receive_IT+0x1b0>
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4a24      	ldr	r2, [pc, #144]	; (80104d0 <UART_Start_Receive_IT+0x23c>)
 8010440:	675a      	str	r2, [r3, #116]	; 0x74
 8010442:	e002      	b.n	801044a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	4a23      	ldr	r2, [pc, #140]	; (80104d4 <UART_Start_Receive_IT+0x240>)
 8010448:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d019      	beq.n	8010486 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045a:	e853 3f00 	ldrex	r3, [r3]
 801045e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010466:	677b      	str	r3, [r7, #116]	; 0x74
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	461a      	mov	r2, r3
 801046e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010470:	637b      	str	r3, [r7, #52]	; 0x34
 8010472:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010478:	e841 2300 	strex	r3, r2, [r1]
 801047c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010480:	2b00      	cmp	r3, #0
 8010482:	d1e6      	bne.n	8010452 <UART_Start_Receive_IT+0x1be>
 8010484:	e018      	b.n	80104b8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	e853 3f00 	ldrex	r3, [r3]
 8010492:	613b      	str	r3, [r7, #16]
   return(result);
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	f043 0320 	orr.w	r3, r3, #32
 801049a:	67bb      	str	r3, [r7, #120]	; 0x78
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104a4:	623b      	str	r3, [r7, #32]
 80104a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	69f9      	ldr	r1, [r7, #28]
 80104aa:	6a3a      	ldr	r2, [r7, #32]
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e6      	bne.n	8010486 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80104b8:	2300      	movs	r3, #0
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	378c      	adds	r7, #140	; 0x8c
 80104be:	46bd      	mov	sp, r7
 80104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	08010cf9 	.word	0x08010cf9
 80104cc:	08010999 	.word	0x08010999
 80104d0:	080107e1 	.word	0x080107e1
 80104d4:	08010629 	.word	0x08010629

080104d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80104d8:	b480      	push	{r7}
 80104da:	b095      	sub	sp, #84	; 0x54
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e8:	e853 3f00 	ldrex	r3, [r3]
 80104ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80104f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	461a      	mov	r2, r3
 80104fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104fe:	643b      	str	r3, [r7, #64]	; 0x40
 8010500:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010506:	e841 2300 	strex	r3, r2, [r1]
 801050a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801050c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1e6      	bne.n	80104e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	3308      	adds	r3, #8
 8010518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	e853 3f00 	ldrex	r3, [r3]
 8010520:	61fb      	str	r3, [r7, #28]
   return(result);
 8010522:	69fa      	ldr	r2, [r7, #28]
 8010524:	4b1e      	ldr	r3, [pc, #120]	; (80105a0 <UART_EndRxTransfer+0xc8>)
 8010526:	4013      	ands	r3, r2
 8010528:	64bb      	str	r3, [r7, #72]	; 0x48
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	3308      	adds	r3, #8
 8010530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801053a:	e841 2300 	strex	r3, r2, [r1]
 801053e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1e5      	bne.n	8010512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054a:	2b01      	cmp	r3, #1
 801054c:	d118      	bne.n	8010580 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	e853 3f00 	ldrex	r3, [r3]
 801055a:	60bb      	str	r3, [r7, #8]
   return(result);
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	f023 0310 	bic.w	r3, r3, #16
 8010562:	647b      	str	r3, [r7, #68]	; 0x44
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	461a      	mov	r2, r3
 801056a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801056c:	61bb      	str	r3, [r7, #24]
 801056e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010570:	6979      	ldr	r1, [r7, #20]
 8010572:	69ba      	ldr	r2, [r7, #24]
 8010574:	e841 2300 	strex	r3, r2, [r1]
 8010578:	613b      	str	r3, [r7, #16]
   return(result);
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1e6      	bne.n	801054e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2220      	movs	r2, #32
 8010584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010594:	bf00      	nop
 8010596:	3754      	adds	r7, #84	; 0x54
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr
 80105a0:	effffffe 	.word	0xeffffffe

080105a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2200      	movs	r2, #0
 80105b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2200      	movs	r2, #0
 80105be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7fe ff2e 	bl	800f424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105c8:	bf00      	nop
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b088      	sub	sp, #32
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	e853 3f00 	ldrex	r3, [r3]
 80105e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ec:	61fb      	str	r3, [r7, #28]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fa:	6979      	ldr	r1, [r7, #20]
 80105fc:	69ba      	ldr	r2, [r7, #24]
 80105fe:	e841 2300 	strex	r3, r2, [r1]
 8010602:	613b      	str	r3, [r7, #16]
   return(result);
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e6      	bne.n	80105d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2220      	movs	r2, #32
 801060e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2200      	movs	r2, #0
 8010616:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7fe fef9 	bl	800f410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801061e:	bf00      	nop
 8010620:	3720      	adds	r7, #32
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b09c      	sub	sp, #112	; 0x70
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010636:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010640:	2b22      	cmp	r3, #34	; 0x22
 8010642:	f040 80be 	bne.w	80107c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010650:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010654:	b2d9      	uxtb	r1, r3
 8010656:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801065a:	b2da      	uxtb	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010660:	400a      	ands	r2, r1
 8010662:	b2d2      	uxtb	r2, r2
 8010664:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801066a:	1c5a      	adds	r2, r3, #1
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010676:	b29b      	uxth	r3, r3
 8010678:	3b01      	subs	r3, #1
 801067a:	b29a      	uxth	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010688:	b29b      	uxth	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	f040 80a1 	bne.w	80107d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010698:	e853 3f00 	ldrex	r3, [r3]
 801069c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801069e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80106b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106b6:	e841 2300 	strex	r3, r2, [r1]
 80106ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1e6      	bne.n	8010690 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3308      	adds	r3, #8
 80106c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	e853 3f00 	ldrex	r3, [r3]
 80106d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	f023 0301 	bic.w	r3, r3, #1
 80106d8:	667b      	str	r3, [r7, #100]	; 0x64
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	3308      	adds	r3, #8
 80106e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80106e2:	647a      	str	r2, [r7, #68]	; 0x44
 80106e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ea:	e841 2300 	strex	r3, r2, [r1]
 80106ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1e5      	bne.n	80106c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2220      	movs	r2, #32
 80106fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a33      	ldr	r2, [pc, #204]	; (80107dc <UART_RxISR_8BIT+0x1b4>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d01f      	beq.n	8010754 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801071e:	2b00      	cmp	r3, #0
 8010720:	d018      	beq.n	8010754 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072a:	e853 3f00 	ldrex	r3, [r3]
 801072e:	623b      	str	r3, [r7, #32]
   return(result);
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010736:	663b      	str	r3, [r7, #96]	; 0x60
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010740:	633b      	str	r3, [r7, #48]	; 0x30
 8010742:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010748:	e841 2300 	strex	r3, r2, [r1]
 801074c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1e6      	bne.n	8010722 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010758:	2b01      	cmp	r3, #1
 801075a:	d12e      	bne.n	80107ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	e853 3f00 	ldrex	r3, [r3]
 801076e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f023 0310 	bic.w	r3, r3, #16
 8010776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	461a      	mov	r2, r3
 801077e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010780:	61fb      	str	r3, [r7, #28]
 8010782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010784:	69b9      	ldr	r1, [r7, #24]
 8010786:	69fa      	ldr	r2, [r7, #28]
 8010788:	e841 2300 	strex	r3, r2, [r1]
 801078c:	617b      	str	r3, [r7, #20]
   return(result);
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d1e6      	bne.n	8010762 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	69db      	ldr	r3, [r3, #28]
 801079a:	f003 0310 	and.w	r3, r3, #16
 801079e:	2b10      	cmp	r3, #16
 80107a0:	d103      	bne.n	80107aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2210      	movs	r2, #16
 80107a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107b0:	4619      	mov	r1, r3
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7fe fe40 	bl	800f438 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107b8:	e00b      	b.n	80107d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7ef ff98 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80107c0:	e007      	b.n	80107d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	699a      	ldr	r2, [r3, #24]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f042 0208 	orr.w	r2, r2, #8
 80107d0:	619a      	str	r2, [r3, #24]
}
 80107d2:	bf00      	nop
 80107d4:	3770      	adds	r7, #112	; 0x70
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	58000c00 	.word	0x58000c00

080107e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b09c      	sub	sp, #112	; 0x70
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107f8:	2b22      	cmp	r3, #34	; 0x22
 80107fa:	f040 80be 	bne.w	801097a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010804:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801080c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801080e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010812:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010816:	4013      	ands	r3, r2
 8010818:	b29a      	uxth	r2, r3
 801081a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801081c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010822:	1c9a      	adds	r2, r3, #2
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801082e:	b29b      	uxth	r3, r3
 8010830:	3b01      	subs	r3, #1
 8010832:	b29a      	uxth	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010840:	b29b      	uxth	r3, r3
 8010842:	2b00      	cmp	r3, #0
 8010844:	f040 80a1 	bne.w	801098a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010850:	e853 3f00 	ldrex	r3, [r3]
 8010854:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801085c:	667b      	str	r3, [r7, #100]	; 0x64
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	461a      	mov	r2, r3
 8010864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010866:	657b      	str	r3, [r7, #84]	; 0x54
 8010868:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801086c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801086e:	e841 2300 	strex	r3, r2, [r1]
 8010872:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1e6      	bne.n	8010848 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	3308      	adds	r3, #8
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	e853 3f00 	ldrex	r3, [r3]
 8010888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	f023 0301 	bic.w	r3, r3, #1
 8010890:	663b      	str	r3, [r7, #96]	; 0x60
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	3308      	adds	r3, #8
 8010898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801089a:	643a      	str	r2, [r7, #64]	; 0x40
 801089c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108a2:	e841 2300 	strex	r3, r2, [r1]
 80108a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1e5      	bne.n	801087a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2220      	movs	r2, #32
 80108b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a33      	ldr	r2, [pc, #204]	; (8010994 <UART_RxISR_16BIT+0x1b4>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d01f      	beq.n	801090c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d018      	beq.n	801090c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	e853 3f00 	ldrex	r3, [r3]
 80108e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80108ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	461a      	mov	r2, r3
 80108f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010900:	e841 2300 	strex	r3, r2, [r1]
 8010904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1e6      	bne.n	80108da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010910:	2b01      	cmp	r3, #1
 8010912:	d12e      	bne.n	8010972 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	e853 3f00 	ldrex	r3, [r3]
 8010926:	60bb      	str	r3, [r7, #8]
   return(result);
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	f023 0310 	bic.w	r3, r3, #16
 801092e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	461a      	mov	r2, r3
 8010936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010938:	61bb      	str	r3, [r7, #24]
 801093a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093c:	6979      	ldr	r1, [r7, #20]
 801093e:	69ba      	ldr	r2, [r7, #24]
 8010940:	e841 2300 	strex	r3, r2, [r1]
 8010944:	613b      	str	r3, [r7, #16]
   return(result);
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1e6      	bne.n	801091a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	69db      	ldr	r3, [r3, #28]
 8010952:	f003 0310 	and.w	r3, r3, #16
 8010956:	2b10      	cmp	r3, #16
 8010958:	d103      	bne.n	8010962 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2210      	movs	r2, #16
 8010960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7fe fd64 	bl	800f438 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010970:	e00b      	b.n	801098a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ef febc 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 8010978:	e007      	b.n	801098a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	699a      	ldr	r2, [r3, #24]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f042 0208 	orr.w	r2, r2, #8
 8010988:	619a      	str	r2, [r3, #24]
}
 801098a:	bf00      	nop
 801098c:	3770      	adds	r7, #112	; 0x70
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	58000c00 	.word	0x58000c00

08010998 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b0ac      	sub	sp, #176	; 0xb0
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	69db      	ldr	r3, [r3, #28]
 80109b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80109ce:	2b22      	cmp	r3, #34	; 0x22
 80109d0:	f040 8180 	bne.w	8010cd4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80109da:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80109de:	e123      	b.n	8010c28 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80109ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80109ee:	b2d9      	uxtb	r1, r3
 80109f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80109f4:	b2da      	uxtb	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109fa:	400a      	ands	r2, r1
 80109fc:	b2d2      	uxtb	r2, r2
 80109fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a04:	1c5a      	adds	r2, r3, #1
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	3b01      	subs	r3, #1
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	69db      	ldr	r3, [r3, #28]
 8010a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a2a:	f003 0307 	and.w	r3, r3, #7
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d053      	beq.n	8010ada <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a36:	f003 0301 	and.w	r3, r3, #1
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d011      	beq.n	8010a62 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010a3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00b      	beq.n	8010a62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a58:	f043 0201 	orr.w	r2, r3, #1
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a66:	f003 0302 	and.w	r3, r3, #2
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d011      	beq.n	8010a92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00b      	beq.n	8010a92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2202      	movs	r2, #2
 8010a80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a88:	f043 0204 	orr.w	r2, r3, #4
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a96:	f003 0304 	and.w	r3, r3, #4
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d011      	beq.n	8010ac2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010aa2:	f003 0301 	and.w	r3, r3, #1
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d00b      	beq.n	8010ac2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2204      	movs	r2, #4
 8010ab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ab8:	f043 0202 	orr.w	r2, r3, #2
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d006      	beq.n	8010ada <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7fe fca9 	bl	800f424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f040 80a0 	bne.w	8010c28 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010af0:	e853 3f00 	ldrex	r3, [r3]
 8010af4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	461a      	mov	r2, r3
 8010b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010b0c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010b10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010b12:	e841 2300 	strex	r3, r2, [r1]
 8010b16:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d1e4      	bne.n	8010ae8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	3308      	adds	r3, #8
 8010b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b28:	e853 3f00 	ldrex	r3, [r3]
 8010b2c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b30:	4b6e      	ldr	r3, [pc, #440]	; (8010cec <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010b32:	4013      	ands	r3, r2
 8010b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	3308      	adds	r3, #8
 8010b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b42:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b4a:	e841 2300 	strex	r3, r2, [r1]
 8010b4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1e3      	bne.n	8010b1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2220      	movs	r2, #32
 8010b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4a60      	ldr	r2, [pc, #384]	; (8010cf0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d021      	beq.n	8010bb8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d01a      	beq.n	8010bb8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b8a:	e853 3f00 	ldrex	r3, [r3]
 8010b8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8010ba6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010baa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bac:	e841 2300 	strex	r3, r2, [r1]
 8010bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d1e4      	bne.n	8010b82 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d130      	bne.n	8010c22 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bce:	e853 3f00 	ldrex	r3, [r3]
 8010bd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd6:	f023 0310 	bic.w	r3, r3, #16
 8010bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	461a      	mov	r2, r3
 8010be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010be8:	643b      	str	r3, [r7, #64]	; 0x40
 8010bea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010bee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010bf0:	e841 2300 	strex	r3, r2, [r1]
 8010bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1e4      	bne.n	8010bc6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	f003 0310 	and.w	r3, r3, #16
 8010c06:	2b10      	cmp	r3, #16
 8010c08:	d103      	bne.n	8010c12 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2210      	movs	r2, #16
 8010c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c18:	4619      	mov	r1, r3
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7fe fc0c 	bl	800f438 <HAL_UARTEx_RxEventCallback>
 8010c20:	e002      	b.n	8010c28 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ef fd64 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d006      	beq.n	8010c3e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c34:	f003 0320 	and.w	r3, r3, #32
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f47f aed1 	bne.w	80109e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010c48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d049      	beq.n	8010ce4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d242      	bcs.n	8010ce4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	3308      	adds	r3, #8
 8010c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	e853 3f00 	ldrex	r3, [r3]
 8010c6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	3308      	adds	r3, #8
 8010c7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c8a:	e841 2300 	strex	r3, r2, [r1]
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1e3      	bne.n	8010c5e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4a16      	ldr	r2, [pc, #88]	; (8010cf4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010c9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	e853 3f00 	ldrex	r3, [r3]
 8010ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	f043 0320 	orr.w	r3, r3, #32
 8010cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cbe:	61bb      	str	r3, [r7, #24]
 8010cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc2:	6979      	ldr	r1, [r7, #20]
 8010cc4:	69ba      	ldr	r2, [r7, #24]
 8010cc6:	e841 2300 	strex	r3, r2, [r1]
 8010cca:	613b      	str	r3, [r7, #16]
   return(result);
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d1e4      	bne.n	8010c9c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010cd2:	e007      	b.n	8010ce4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	699a      	ldr	r2, [r3, #24]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f042 0208 	orr.w	r2, r2, #8
 8010ce2:	619a      	str	r2, [r3, #24]
}
 8010ce4:	bf00      	nop
 8010ce6:	37b0      	adds	r7, #176	; 0xb0
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	effffffe 	.word	0xeffffffe
 8010cf0:	58000c00 	.word	0x58000c00
 8010cf4:	08010629 	.word	0x08010629

08010cf8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b0ae      	sub	sp, #184	; 0xb8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d06:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	69db      	ldr	r3, [r3, #28]
 8010d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d2e:	2b22      	cmp	r3, #34	; 0x22
 8010d30:	f040 8184 	bne.w	801103c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d3e:	e127      	b.n	8010f90 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d46:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010d52:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010d56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010d5a:	4013      	ands	r3, r2
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d68:	1c9a      	adds	r2, r3, #2
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	3b01      	subs	r3, #1
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	69db      	ldr	r3, [r3, #28]
 8010d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d8e:	f003 0307 	and.w	r3, r3, #7
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d053      	beq.n	8010e3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d9a:	f003 0301 	and.w	r3, r3, #1
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d011      	beq.n	8010dc6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00b      	beq.n	8010dc6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2201      	movs	r2, #1
 8010db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dbc:	f043 0201 	orr.w	r2, r3, #1
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dca:	f003 0302 	and.w	r3, r3, #2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d011      	beq.n	8010df6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010dd6:	f003 0301 	and.w	r3, r3, #1
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00b      	beq.n	8010df6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2202      	movs	r2, #2
 8010de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dec:	f043 0204 	orr.w	r2, r3, #4
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dfa:	f003 0304 	and.w	r3, r3, #4
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d011      	beq.n	8010e26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010e06:	f003 0301 	and.w	r3, r3, #1
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00b      	beq.n	8010e26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2204      	movs	r2, #4
 8010e14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e1c:	f043 0202 	orr.w	r2, r3, #2
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d006      	beq.n	8010e3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7fe faf7 	bl	800f424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f040 80a2 	bne.w	8010f90 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e54:	e853 3f00 	ldrex	r3, [r3]
 8010e58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e72:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e7a:	e841 2300 	strex	r3, r2, [r1]
 8010e7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1e2      	bne.n	8010e4c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	3308      	adds	r3, #8
 8010e8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e90:	e853 3f00 	ldrex	r3, [r3]
 8010e94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010e96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e98:	4b6e      	ldr	r3, [pc, #440]	; (8011054 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010e9a:	4013      	ands	r3, r2
 8010e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	3308      	adds	r3, #8
 8010ea6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010eaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010eac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010eb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010eb2:	e841 2300 	strex	r3, r2, [r1]
 8010eb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1e3      	bne.n	8010e86 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2220      	movs	r2, #32
 8010ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a60      	ldr	r2, [pc, #384]	; (8011058 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d021      	beq.n	8010f20 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d01a      	beq.n	8010f20 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ef2:	e853 3f00 	ldrex	r3, [r3]
 8010ef6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	461a      	mov	r2, r3
 8010f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f14:	e841 2300 	strex	r3, r2, [r1]
 8010f18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d1e4      	bne.n	8010eea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d130      	bne.n	8010f8a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f36:	e853 3f00 	ldrex	r3, [r3]
 8010f3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3e:	f023 0310 	bic.w	r3, r3, #16
 8010f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f50:	647b      	str	r3, [r7, #68]	; 0x44
 8010f52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f58:	e841 2300 	strex	r3, r2, [r1]
 8010f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1e4      	bne.n	8010f2e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	69db      	ldr	r3, [r3, #28]
 8010f6a:	f003 0310 	and.w	r3, r3, #16
 8010f6e:	2b10      	cmp	r3, #16
 8010f70:	d103      	bne.n	8010f7a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2210      	movs	r2, #16
 8010f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f80:	4619      	mov	r1, r3
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7fe fa58 	bl	800f438 <HAL_UARTEx_RxEventCallback>
 8010f88:	e002      	b.n	8010f90 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ef fbb0 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010f90:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d006      	beq.n	8010fa6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010f9c:	f003 0320 	and.w	r3, r3, #32
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f47f aecd 	bne.w	8010d40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010fb0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d049      	beq.n	801104c <UART_RxISR_16BIT_FIFOEN+0x354>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010fbe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d242      	bcs.n	801104c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	3308      	adds	r3, #8
 8010fcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd0:	e853 3f00 	ldrex	r3, [r3]
 8010fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8010fd6:	6a3b      	ldr	r3, [r7, #32]
 8010fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010fea:	633a      	str	r2, [r7, #48]	; 0x30
 8010fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ff2:	e841 2300 	strex	r3, r2, [r1]
 8010ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1e3      	bne.n	8010fc6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	4a16      	ldr	r2, [pc, #88]	; (801105c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011002:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	e853 3f00 	ldrex	r3, [r3]
 8011010:	60fb      	str	r3, [r7, #12]
   return(result);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f043 0320 	orr.w	r3, r3, #32
 8011018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	461a      	mov	r2, r3
 8011022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011026:	61fb      	str	r3, [r7, #28]
 8011028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801102a:	69b9      	ldr	r1, [r7, #24]
 801102c:	69fa      	ldr	r2, [r7, #28]
 801102e:	e841 2300 	strex	r3, r2, [r1]
 8011032:	617b      	str	r3, [r7, #20]
   return(result);
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1e4      	bne.n	8011004 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801103a:	e007      	b.n	801104c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	699a      	ldr	r2, [r3, #24]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f042 0208 	orr.w	r2, r2, #8
 801104a:	619a      	str	r2, [r3, #24]
}
 801104c:	bf00      	nop
 801104e:	37b8      	adds	r7, #184	; 0xb8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	effffffe 	.word	0xeffffffe
 8011058:	58000c00 	.word	0x58000c00
 801105c:	080107e1 	.word	0x080107e1

08011060 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011068:	bf00      	nop
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801107c:	bf00      	nop
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011090:	bf00      	nop
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801109c:	b480      	push	{r7}
 801109e:	b085      	sub	sp, #20
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d101      	bne.n	80110b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80110ae:	2302      	movs	r3, #2
 80110b0:	e027      	b.n	8011102 <HAL_UARTEx_DisableFifoMode+0x66>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2224      	movs	r2, #36	; 0x24
 80110be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f022 0201 	bic.w	r2, r2, #1
 80110d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80110e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2200      	movs	r2, #0
 80110e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	68fa      	ldr	r2, [r7, #12]
 80110ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2220      	movs	r2, #32
 80110f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	3714      	adds	r7, #20
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801111e:	2b01      	cmp	r3, #1
 8011120:	d101      	bne.n	8011126 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011122:	2302      	movs	r3, #2
 8011124:	e02d      	b.n	8011182 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2201      	movs	r2, #1
 801112a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2224      	movs	r2, #36	; 0x24
 8011132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	681a      	ldr	r2, [r3, #0]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f022 0201 	bic.w	r2, r2, #1
 801114c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	683a      	ldr	r2, [r7, #0]
 801115e:	430a      	orrs	r2, r1
 8011160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 f850 	bl	8011208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2220      	movs	r2, #32
 8011174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b084      	sub	sp, #16
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801119a:	2b01      	cmp	r3, #1
 801119c:	d101      	bne.n	80111a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801119e:	2302      	movs	r3, #2
 80111a0:	e02d      	b.n	80111fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2201      	movs	r2, #1
 80111a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2224      	movs	r2, #36	; 0x24
 80111ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f022 0201 	bic.w	r2, r2, #1
 80111c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	683a      	ldr	r2, [r7, #0]
 80111da:	430a      	orrs	r2, r1
 80111dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f812 	bl	8011208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2220      	movs	r2, #32
 80111f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011214:	2b00      	cmp	r3, #0
 8011216:	d108      	bne.n	801122a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2201      	movs	r2, #1
 801121c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2201      	movs	r2, #1
 8011224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011228:	e031      	b.n	801128e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801122a:	2310      	movs	r3, #16
 801122c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801122e:	2310      	movs	r3, #16
 8011230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	0e5b      	lsrs	r3, r3, #25
 801123a:	b2db      	uxtb	r3, r3
 801123c:	f003 0307 	and.w	r3, r3, #7
 8011240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	0f5b      	lsrs	r3, r3, #29
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f003 0307 	and.w	r3, r3, #7
 8011250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011252:	7bbb      	ldrb	r3, [r7, #14]
 8011254:	7b3a      	ldrb	r2, [r7, #12]
 8011256:	4911      	ldr	r1, [pc, #68]	; (801129c <UARTEx_SetNbDataToProcess+0x94>)
 8011258:	5c8a      	ldrb	r2, [r1, r2]
 801125a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801125e:	7b3a      	ldrb	r2, [r7, #12]
 8011260:	490f      	ldr	r1, [pc, #60]	; (80112a0 <UARTEx_SetNbDataToProcess+0x98>)
 8011262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011264:	fb93 f3f2 	sdiv	r3, r3, r2
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011270:	7bfb      	ldrb	r3, [r7, #15]
 8011272:	7b7a      	ldrb	r2, [r7, #13]
 8011274:	4909      	ldr	r1, [pc, #36]	; (801129c <UARTEx_SetNbDataToProcess+0x94>)
 8011276:	5c8a      	ldrb	r2, [r1, r2]
 8011278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801127c:	7b7a      	ldrb	r2, [r7, #13]
 801127e:	4908      	ldr	r1, [pc, #32]	; (80112a0 <UARTEx_SetNbDataToProcess+0x98>)
 8011280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011282:	fb93 f3f2 	sdiv	r3, r3, r2
 8011286:	b29a      	uxth	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801128e:	bf00      	nop
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	080160e4 	.word	0x080160e4
 80112a0:	080160ec 	.word	0x080160ec

080112a4 <__NVIC_SetPriority>:
{
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	4603      	mov	r3, r0
 80112ac:	6039      	str	r1, [r7, #0]
 80112ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80112b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	db0a      	blt.n	80112ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	490c      	ldr	r1, [pc, #48]	; (80112f0 <__NVIC_SetPriority+0x4c>)
 80112be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112c2:	0112      	lsls	r2, r2, #4
 80112c4:	b2d2      	uxtb	r2, r2
 80112c6:	440b      	add	r3, r1
 80112c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80112cc:	e00a      	b.n	80112e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	4908      	ldr	r1, [pc, #32]	; (80112f4 <__NVIC_SetPriority+0x50>)
 80112d4:	88fb      	ldrh	r3, [r7, #6]
 80112d6:	f003 030f 	and.w	r3, r3, #15
 80112da:	3b04      	subs	r3, #4
 80112dc:	0112      	lsls	r2, r2, #4
 80112de:	b2d2      	uxtb	r2, r2
 80112e0:	440b      	add	r3, r1
 80112e2:	761a      	strb	r2, [r3, #24]
}
 80112e4:	bf00      	nop
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	e000e100 	.word	0xe000e100
 80112f4:	e000ed00 	.word	0xe000ed00

080112f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80112f8:	b580      	push	{r7, lr}
 80112fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80112fc:	4b05      	ldr	r3, [pc, #20]	; (8011314 <SysTick_Handler+0x1c>)
 80112fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011300:	f002 fc16 	bl	8013b30 <xTaskGetSchedulerState>
 8011304:	4603      	mov	r3, r0
 8011306:	2b01      	cmp	r3, #1
 8011308:	d001      	beq.n	801130e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801130a:	f003 fa35 	bl	8014778 <xPortSysTickHandler>
  }
}
 801130e:	bf00      	nop
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	e000e010 	.word	0xe000e010

08011318 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011318:	b580      	push	{r7, lr}
 801131a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801131c:	2100      	movs	r1, #0
 801131e:	f06f 0004 	mvn.w	r0, #4
 8011322:	f7ff ffbf 	bl	80112a4 <__NVIC_SetPriority>
#endif
}
 8011326:	bf00      	nop
 8011328:	bd80      	pop	{r7, pc}
	...

0801132c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011332:	f3ef 8305 	mrs	r3, IPSR
 8011336:	603b      	str	r3, [r7, #0]
  return(result);
 8011338:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801133a:	2b00      	cmp	r3, #0
 801133c:	d003      	beq.n	8011346 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801133e:	f06f 0305 	mvn.w	r3, #5
 8011342:	607b      	str	r3, [r7, #4]
 8011344:	e00c      	b.n	8011360 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011346:	4b0a      	ldr	r3, [pc, #40]	; (8011370 <osKernelInitialize+0x44>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d105      	bne.n	801135a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801134e:	4b08      	ldr	r3, [pc, #32]	; (8011370 <osKernelInitialize+0x44>)
 8011350:	2201      	movs	r2, #1
 8011352:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011354:	2300      	movs	r3, #0
 8011356:	607b      	str	r3, [r7, #4]
 8011358:	e002      	b.n	8011360 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801135e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011360:	687b      	ldr	r3, [r7, #4]
}
 8011362:	4618      	mov	r0, r3
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	24000c3c 	.word	0x24000c3c

08011374 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801137a:	f3ef 8305 	mrs	r3, IPSR
 801137e:	603b      	str	r3, [r7, #0]
  return(result);
 8011380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011382:	2b00      	cmp	r3, #0
 8011384:	d003      	beq.n	801138e <osKernelStart+0x1a>
    stat = osErrorISR;
 8011386:	f06f 0305 	mvn.w	r3, #5
 801138a:	607b      	str	r3, [r7, #4]
 801138c:	e010      	b.n	80113b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801138e:	4b0b      	ldr	r3, [pc, #44]	; (80113bc <osKernelStart+0x48>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	2b01      	cmp	r3, #1
 8011394:	d109      	bne.n	80113aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011396:	f7ff ffbf 	bl	8011318 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801139a:	4b08      	ldr	r3, [pc, #32]	; (80113bc <osKernelStart+0x48>)
 801139c:	2202      	movs	r2, #2
 801139e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80113a0:	f001 fee0 	bl	8013164 <vTaskStartScheduler>
      stat = osOK;
 80113a4:	2300      	movs	r3, #0
 80113a6:	607b      	str	r3, [r7, #4]
 80113a8:	e002      	b.n	80113b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80113aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80113b0:	687b      	ldr	r3, [r7, #4]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	24000c3c 	.word	0x24000c3c

080113c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b08e      	sub	sp, #56	; 0x38
 80113c4:	af04      	add	r7, sp, #16
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113d0:	f3ef 8305 	mrs	r3, IPSR
 80113d4:	617b      	str	r3, [r7, #20]
  return(result);
 80113d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d17e      	bne.n	80114da <osThreadNew+0x11a>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d07b      	beq.n	80114da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80113e2:	2380      	movs	r3, #128	; 0x80
 80113e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80113e6:	2318      	movs	r3, #24
 80113e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80113ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d045      	beq.n	8011486 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d002      	beq.n	8011408 <osThreadNew+0x48>
        name = attr->name;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	699b      	ldr	r3, [r3, #24]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d002      	beq.n	8011416 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d008      	beq.n	801142e <osThreadNew+0x6e>
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	2b38      	cmp	r3, #56	; 0x38
 8011420:	d805      	bhi.n	801142e <osThreadNew+0x6e>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	f003 0301 	and.w	r3, r3, #1
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <osThreadNew+0x72>
        return (NULL);
 801142e:	2300      	movs	r3, #0
 8011430:	e054      	b.n	80114dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	695b      	ldr	r3, [r3, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d003      	beq.n	8011442 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	089b      	lsrs	r3, r3, #2
 8011440:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00e      	beq.n	8011468 <osThreadNew+0xa8>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	2b5b      	cmp	r3, #91	; 0x5b
 8011450:	d90a      	bls.n	8011468 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011456:	2b00      	cmp	r3, #0
 8011458:	d006      	beq.n	8011468 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	695b      	ldr	r3, [r3, #20]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d002      	beq.n	8011468 <osThreadNew+0xa8>
        mem = 1;
 8011462:	2301      	movs	r3, #1
 8011464:	61bb      	str	r3, [r7, #24]
 8011466:	e010      	b.n	801148a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d10c      	bne.n	801148a <osThreadNew+0xca>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d108      	bne.n	801148a <osThreadNew+0xca>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d104      	bne.n	801148a <osThreadNew+0xca>
          mem = 0;
 8011480:	2300      	movs	r3, #0
 8011482:	61bb      	str	r3, [r7, #24]
 8011484:	e001      	b.n	801148a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011486:	2300      	movs	r3, #0
 8011488:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d110      	bne.n	80114b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011498:	9202      	str	r2, [sp, #8]
 801149a:	9301      	str	r3, [sp, #4]
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	6a3a      	ldr	r2, [r7, #32]
 80114a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f001 fb6c 	bl	8012b84 <xTaskCreateStatic>
 80114ac:	4603      	mov	r3, r0
 80114ae:	613b      	str	r3, [r7, #16]
 80114b0:	e013      	b.n	80114da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d110      	bne.n	80114da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80114b8:	6a3b      	ldr	r3, [r7, #32]
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	f107 0310 	add.w	r3, r7, #16
 80114c0:	9301      	str	r3, [sp, #4]
 80114c2:	69fb      	ldr	r3, [r7, #28]
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f001 fbb7 	bl	8012c3e <xTaskCreate>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d001      	beq.n	80114da <osThreadNew+0x11a>
            hTask = NULL;
 80114d6:	2300      	movs	r3, #0
 80114d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80114da:	693b      	ldr	r3, [r7, #16]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3728      	adds	r7, #40	; 0x28
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114ea:	f3ef 8305 	mrs	r3, IPSR
 80114ee:	603b      	str	r3, [r7, #0]
  return(result);
 80114f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d003      	beq.n	80114fe <osThreadYield+0x1a>
    stat = osErrorISR;
 80114f6:	f06f 0305 	mvn.w	r3, #5
 80114fa:	607b      	str	r3, [r7, #4]
 80114fc:	e009      	b.n	8011512 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80114fe:	2300      	movs	r3, #0
 8011500:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8011502:	4b07      	ldr	r3, [pc, #28]	; (8011520 <osThreadYield+0x3c>)
 8011504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011508:	601a      	str	r2, [r3, #0]
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011512:	687b      	ldr	r3, [r7, #4]
}
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	e000ed04 	.word	0xe000ed04

08011524 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011530:	f3ef 8305 	mrs	r3, IPSR
 8011534:	60fb      	str	r3, [r7, #12]
  return(result);
 8011536:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011538:	2b00      	cmp	r3, #0
 801153a:	d003      	beq.n	8011544 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801153c:	f06f 0305 	mvn.w	r3, #5
 8011540:	617b      	str	r3, [r7, #20]
 8011542:	e00b      	b.n	801155c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d103      	bne.n	8011552 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801154a:	f06f 0303 	mvn.w	r3, #3
 801154e:	617b      	str	r3, [r7, #20]
 8011550:	e004      	b.n	801155c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8011552:	2300      	movs	r3, #0
 8011554:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8011556:	6938      	ldr	r0, [r7, #16]
 8011558:	f001 fcea 	bl	8012f30 <vTaskSuspend>
  }

  return (stat);
 801155c:	697b      	ldr	r3, [r7, #20]
}
 801155e:	4618      	mov	r0, r3
 8011560:	3718      	adds	r7, #24
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}

08011566 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011566:	b580      	push	{r7, lr}
 8011568:	b084      	sub	sp, #16
 801156a:	af00      	add	r7, sp, #0
 801156c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801156e:	f3ef 8305 	mrs	r3, IPSR
 8011572:	60bb      	str	r3, [r7, #8]
  return(result);
 8011574:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011576:	2b00      	cmp	r3, #0
 8011578:	d003      	beq.n	8011582 <osDelay+0x1c>
    stat = osErrorISR;
 801157a:	f06f 0305 	mvn.w	r3, #5
 801157e:	60fb      	str	r3, [r7, #12]
 8011580:	e007      	b.n	8011592 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011582:	2300      	movs	r3, #0
 8011584:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d002      	beq.n	8011592 <osDelay+0x2c>
      vTaskDelay(ticks);
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f001 fc9b 	bl	8012ec8 <vTaskDelay>
    }
  }

  return (stat);
 8011592:	68fb      	ldr	r3, [r7, #12]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801159c:	b580      	push	{r7, lr}
 801159e:	b086      	sub	sp, #24
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80115a4:	2300      	movs	r3, #0
 80115a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115a8:	f3ef 8305 	mrs	r3, IPSR
 80115ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80115ae:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d12d      	bne.n	8011610 <osEventFlagsNew+0x74>
    mem = -1;
 80115b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115b8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d015      	beq.n	80115ec <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	689b      	ldr	r3, [r3, #8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d006      	beq.n	80115d6 <osEventFlagsNew+0x3a>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	2b1f      	cmp	r3, #31
 80115ce:	d902      	bls.n	80115d6 <osEventFlagsNew+0x3a>
        mem = 1;
 80115d0:	2301      	movs	r3, #1
 80115d2:	613b      	str	r3, [r7, #16]
 80115d4:	e00c      	b.n	80115f0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d108      	bne.n	80115f0 <osEventFlagsNew+0x54>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d104      	bne.n	80115f0 <osEventFlagsNew+0x54>
          mem = 0;
 80115e6:	2300      	movs	r3, #0
 80115e8:	613b      	str	r3, [r7, #16]
 80115ea:	e001      	b.n	80115f0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80115ec:	2300      	movs	r3, #0
 80115ee:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d106      	bne.n	8011604 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f000 fa3e 	bl	8011a7c <xEventGroupCreateStatic>
 8011600:	6178      	str	r0, [r7, #20]
 8011602:	e005      	b.n	8011610 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d102      	bne.n	8011610 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801160a:	f000 fa6e 	bl	8011aea <xEventGroupCreate>
 801160e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8011610:	697b      	ldr	r3, [r7, #20]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3718      	adds	r7, #24
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
	...

0801161c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d004      	beq.n	801163a <osEventFlagsSet+0x1e>
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011636:	2b00      	cmp	r3, #0
 8011638:	d003      	beq.n	8011642 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801163a:	f06f 0303 	mvn.w	r3, #3
 801163e:	617b      	str	r3, [r7, #20]
 8011640:	e028      	b.n	8011694 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011642:	f3ef 8305 	mrs	r3, IPSR
 8011646:	60fb      	str	r3, [r7, #12]
  return(result);
 8011648:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801164a:	2b00      	cmp	r3, #0
 801164c:	d01d      	beq.n	801168a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801164e:	2300      	movs	r3, #0
 8011650:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011652:	f107 0308 	add.w	r3, r7, #8
 8011656:	461a      	mov	r2, r3
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	6938      	ldr	r0, [r7, #16]
 801165c:	f000 fbe8 	bl	8011e30 <xEventGroupSetBitsFromISR>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d103      	bne.n	801166e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011666:	f06f 0302 	mvn.w	r3, #2
 801166a:	617b      	str	r3, [r7, #20]
 801166c:	e012      	b.n	8011694 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d00d      	beq.n	8011694 <osEventFlagsSet+0x78>
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <osEventFlagsSet+0x84>)
 801167a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801167e:	601a      	str	r2, [r3, #0]
 8011680:	f3bf 8f4f 	dsb	sy
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	e004      	b.n	8011694 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801168a:	6839      	ldr	r1, [r7, #0]
 801168c:	6938      	ldr	r0, [r7, #16]
 801168e:	f000 fb15 	bl	8011cbc <xEventGroupSetBits>
 8011692:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011694:	697b      	ldr	r3, [r7, #20]
}
 8011696:	4618      	mov	r0, r3
 8011698:	3718      	adds	r7, #24
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	e000ed04 	.word	0xe000ed04

080116a4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b08c      	sub	sp, #48	; 0x30
 80116a8:	af02      	add	r7, sp, #8
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d004      	beq.n	80116c6 <osEventFlagsWait+0x22>
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d003      	beq.n	80116ce <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80116c6:	f06f 0303 	mvn.w	r3, #3
 80116ca:	61fb      	str	r3, [r7, #28]
 80116cc:	e04b      	b.n	8011766 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116ce:	f3ef 8305 	mrs	r3, IPSR
 80116d2:	617b      	str	r3, [r7, #20]
  return(result);
 80116d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d003      	beq.n	80116e2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80116da:	f06f 0305 	mvn.w	r3, #5
 80116de:	61fb      	str	r3, [r7, #28]
 80116e0:	e041      	b.n	8011766 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f003 0301 	and.w	r3, r3, #1
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d002      	beq.n	80116f2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80116ec:	2301      	movs	r3, #1
 80116ee:	627b      	str	r3, [r7, #36]	; 0x24
 80116f0:	e001      	b.n	80116f6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80116f2:	2300      	movs	r3, #0
 80116f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f003 0302 	and.w	r3, r3, #2
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d002      	beq.n	8011706 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8011700:	2300      	movs	r3, #0
 8011702:	623b      	str	r3, [r7, #32]
 8011704:	e001      	b.n	801170a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8011706:	2301      	movs	r3, #1
 8011708:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011710:	6a3a      	ldr	r2, [r7, #32]
 8011712:	68b9      	ldr	r1, [r7, #8]
 8011714:	69b8      	ldr	r0, [r7, #24]
 8011716:	f000 fa03 	bl	8011b20 <xEventGroupWaitBits>
 801171a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f003 0301 	and.w	r3, r3, #1
 8011722:	2b00      	cmp	r3, #0
 8011724:	d010      	beq.n	8011748 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	4013      	ands	r3, r2
 801172c:	68ba      	ldr	r2, [r7, #8]
 801172e:	429a      	cmp	r2, r3
 8011730:	d019      	beq.n	8011766 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d003      	beq.n	8011740 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011738:	f06f 0301 	mvn.w	r3, #1
 801173c:	61fb      	str	r3, [r7, #28]
 801173e:	e012      	b.n	8011766 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011740:	f06f 0302 	mvn.w	r3, #2
 8011744:	61fb      	str	r3, [r7, #28]
 8011746:	e00e      	b.n	8011766 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	4013      	ands	r3, r2
 801174e:	2b00      	cmp	r3, #0
 8011750:	d109      	bne.n	8011766 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d003      	beq.n	8011760 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011758:	f06f 0301 	mvn.w	r3, #1
 801175c:	61fb      	str	r3, [r7, #28]
 801175e:	e002      	b.n	8011766 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011760:	f06f 0302 	mvn.w	r3, #2
 8011764:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011766:	69fb      	ldr	r3, [r7, #28]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3728      	adds	r7, #40	; 0x28
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011770:	b580      	push	{r7, lr}
 8011772:	b08a      	sub	sp, #40	; 0x28
 8011774:	af02      	add	r7, sp, #8
 8011776:	60f8      	str	r0, [r7, #12]
 8011778:	60b9      	str	r1, [r7, #8]
 801177a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801177c:	2300      	movs	r3, #0
 801177e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011780:	f3ef 8305 	mrs	r3, IPSR
 8011784:	613b      	str	r3, [r7, #16]
  return(result);
 8011786:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011788:	2b00      	cmp	r3, #0
 801178a:	d15f      	bne.n	801184c <osMessageQueueNew+0xdc>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d05c      	beq.n	801184c <osMessageQueueNew+0xdc>
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d059      	beq.n	801184c <osMessageQueueNew+0xdc>
    mem = -1;
 8011798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801179c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d029      	beq.n	80117f8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d012      	beq.n	80117d2 <osMessageQueueNew+0x62>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	68db      	ldr	r3, [r3, #12]
 80117b0:	2b4f      	cmp	r3, #79	; 0x4f
 80117b2:	d90e      	bls.n	80117d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00a      	beq.n	80117d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	695a      	ldr	r2, [r3, #20]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	68b9      	ldr	r1, [r7, #8]
 80117c4:	fb01 f303 	mul.w	r3, r1, r3
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d302      	bcc.n	80117d2 <osMessageQueueNew+0x62>
        mem = 1;
 80117cc:	2301      	movs	r3, #1
 80117ce:	61bb      	str	r3, [r7, #24]
 80117d0:	e014      	b.n	80117fc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d110      	bne.n	80117fc <osMessageQueueNew+0x8c>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10c      	bne.n	80117fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d108      	bne.n	80117fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	695b      	ldr	r3, [r3, #20]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d104      	bne.n	80117fc <osMessageQueueNew+0x8c>
          mem = 0;
 80117f2:	2300      	movs	r3, #0
 80117f4:	61bb      	str	r3, [r7, #24]
 80117f6:	e001      	b.n	80117fc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d10b      	bne.n	801181a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	691a      	ldr	r2, [r3, #16]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	2100      	movs	r1, #0
 801180c:	9100      	str	r1, [sp, #0]
 801180e:	68b9      	ldr	r1, [r7, #8]
 8011810:	68f8      	ldr	r0, [r7, #12]
 8011812:	f000 fc3d 	bl	8012090 <xQueueGenericCreateStatic>
 8011816:	61f8      	str	r0, [r7, #28]
 8011818:	e008      	b.n	801182c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d105      	bne.n	801182c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011820:	2200      	movs	r2, #0
 8011822:	68b9      	ldr	r1, [r7, #8]
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f000 fcab 	bl	8012180 <xQueueGenericCreate>
 801182a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00c      	beq.n	801184c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d003      	beq.n	8011840 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	617b      	str	r3, [r7, #20]
 801183e:	e001      	b.n	8011844 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011840:	2300      	movs	r3, #0
 8011842:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011844:	6979      	ldr	r1, [r7, #20]
 8011846:	69f8      	ldr	r0, [r7, #28]
 8011848:	f001 f93e 	bl	8012ac8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801184c:	69fb      	ldr	r3, [r7, #28]
}
 801184e:	4618      	mov	r0, r3
 8011850:	3720      	adds	r7, #32
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
	...

08011858 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011858:	b580      	push	{r7, lr}
 801185a:	b088      	sub	sp, #32
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	603b      	str	r3, [r7, #0]
 8011864:	4613      	mov	r3, r2
 8011866:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801186c:	2300      	movs	r3, #0
 801186e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011870:	f3ef 8305 	mrs	r3, IPSR
 8011874:	617b      	str	r3, [r7, #20]
  return(result);
 8011876:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011878:	2b00      	cmp	r3, #0
 801187a:	d028      	beq.n	80118ce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d005      	beq.n	801188e <osMessageQueuePut+0x36>
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <osMessageQueuePut+0x36>
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d003      	beq.n	8011896 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801188e:	f06f 0303 	mvn.w	r3, #3
 8011892:	61fb      	str	r3, [r7, #28]
 8011894:	e038      	b.n	8011908 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011896:	2300      	movs	r3, #0
 8011898:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801189a:	f107 0210 	add.w	r2, r7, #16
 801189e:	2300      	movs	r3, #0
 80118a0:	68b9      	ldr	r1, [r7, #8]
 80118a2:	69b8      	ldr	r0, [r7, #24]
 80118a4:	f000 fdc8 	bl	8012438 <xQueueGenericSendFromISR>
 80118a8:	4603      	mov	r3, r0
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d003      	beq.n	80118b6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80118ae:	f06f 0302 	mvn.w	r3, #2
 80118b2:	61fb      	str	r3, [r7, #28]
 80118b4:	e028      	b.n	8011908 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d025      	beq.n	8011908 <osMessageQueuePut+0xb0>
 80118bc:	4b15      	ldr	r3, [pc, #84]	; (8011914 <osMessageQueuePut+0xbc>)
 80118be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	f3bf 8f4f 	dsb	sy
 80118c8:	f3bf 8f6f 	isb	sy
 80118cc:	e01c      	b.n	8011908 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d002      	beq.n	80118da <osMessageQueuePut+0x82>
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d103      	bne.n	80118e2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80118da:	f06f 0303 	mvn.w	r3, #3
 80118de:	61fb      	str	r3, [r7, #28]
 80118e0:	e012      	b.n	8011908 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80118e2:	2300      	movs	r3, #0
 80118e4:	683a      	ldr	r2, [r7, #0]
 80118e6:	68b9      	ldr	r1, [r7, #8]
 80118e8:	69b8      	ldr	r0, [r7, #24]
 80118ea:	f000 fca7 	bl	801223c <xQueueGenericSend>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d009      	beq.n	8011908 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d003      	beq.n	8011902 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80118fa:	f06f 0301 	mvn.w	r3, #1
 80118fe:	61fb      	str	r3, [r7, #28]
 8011900:	e002      	b.n	8011908 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011902:	f06f 0302 	mvn.w	r3, #2
 8011906:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011908:	69fb      	ldr	r3, [r7, #28]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3720      	adds	r7, #32
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	e000ed04 	.word	0xe000ed04

08011918 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	607a      	str	r2, [r7, #4]
 8011924:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801192a:	2300      	movs	r3, #0
 801192c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801192e:	f3ef 8305 	mrs	r3, IPSR
 8011932:	617b      	str	r3, [r7, #20]
  return(result);
 8011934:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011936:	2b00      	cmp	r3, #0
 8011938:	d028      	beq.n	801198c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d005      	beq.n	801194c <osMessageQueueGet+0x34>
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d002      	beq.n	801194c <osMessageQueueGet+0x34>
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d003      	beq.n	8011954 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801194c:	f06f 0303 	mvn.w	r3, #3
 8011950:	61fb      	str	r3, [r7, #28]
 8011952:	e037      	b.n	80119c4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011954:	2300      	movs	r3, #0
 8011956:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011958:	f107 0310 	add.w	r3, r7, #16
 801195c:	461a      	mov	r2, r3
 801195e:	68b9      	ldr	r1, [r7, #8]
 8011960:	69b8      	ldr	r0, [r7, #24]
 8011962:	f000 fee5 	bl	8012730 <xQueueReceiveFromISR>
 8011966:	4603      	mov	r3, r0
 8011968:	2b01      	cmp	r3, #1
 801196a:	d003      	beq.n	8011974 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801196c:	f06f 0302 	mvn.w	r3, #2
 8011970:	61fb      	str	r3, [r7, #28]
 8011972:	e027      	b.n	80119c4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d024      	beq.n	80119c4 <osMessageQueueGet+0xac>
 801197a:	4b15      	ldr	r3, [pc, #84]	; (80119d0 <osMessageQueueGet+0xb8>)
 801197c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011980:	601a      	str	r2, [r3, #0]
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	e01b      	b.n	80119c4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d002      	beq.n	8011998 <osMessageQueueGet+0x80>
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d103      	bne.n	80119a0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011998:	f06f 0303 	mvn.w	r3, #3
 801199c:	61fb      	str	r3, [r7, #28]
 801199e:	e011      	b.n	80119c4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80119a0:	683a      	ldr	r2, [r7, #0]
 80119a2:	68b9      	ldr	r1, [r7, #8]
 80119a4:	69b8      	ldr	r0, [r7, #24]
 80119a6:	f000 fde3 	bl	8012570 <xQueueReceive>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d009      	beq.n	80119c4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d003      	beq.n	80119be <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80119b6:	f06f 0301 	mvn.w	r3, #1
 80119ba:	61fb      	str	r3, [r7, #28]
 80119bc:	e002      	b.n	80119c4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80119be:	f06f 0302 	mvn.w	r3, #2
 80119c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80119c4:	69fb      	ldr	r3, [r7, #28]
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3720      	adds	r7, #32
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	e000ed04 	.word	0xe000ed04

080119d4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d102      	bne.n	80119ec <osMessageQueueGetCount+0x18>
    count = 0U;
 80119e6:	2300      	movs	r3, #0
 80119e8:	617b      	str	r3, [r7, #20]
 80119ea:	e00e      	b.n	8011a0a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119ec:	f3ef 8305 	mrs	r3, IPSR
 80119f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80119f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d004      	beq.n	8011a02 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80119f8:	6938      	ldr	r0, [r7, #16]
 80119fa:	f000 ff37 	bl	801286c <uxQueueMessagesWaitingFromISR>
 80119fe:	6178      	str	r0, [r7, #20]
 8011a00:	e003      	b.n	8011a0a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8011a02:	6938      	ldr	r0, [r7, #16]
 8011a04:	f000 ff14 	bl	8012830 <uxQueueMessagesWaiting>
 8011a08:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8011a0a:	697b      	ldr	r3, [r7, #20]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3718      	adds	r7, #24
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	4a07      	ldr	r2, [pc, #28]	; (8011a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8011a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	4a06      	ldr	r2, [pc, #24]	; (8011a44 <vApplicationGetIdleTaskMemory+0x30>)
 8011a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2280      	movs	r2, #128	; 0x80
 8011a30:	601a      	str	r2, [r3, #0]
}
 8011a32:	bf00      	nop
 8011a34:	3714      	adds	r7, #20
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	24000c40 	.word	0x24000c40
 8011a44:	24000c9c 	.word	0x24000c9c

08011a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	4a07      	ldr	r2, [pc, #28]	; (8011a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8011a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	4a06      	ldr	r2, [pc, #24]	; (8011a78 <vApplicationGetTimerTaskMemory+0x30>)
 8011a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a66:	601a      	str	r2, [r3, #0]
}
 8011a68:	bf00      	nop
 8011a6a:	3714      	adds	r7, #20
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr
 8011a74:	24000e9c 	.word	0x24000e9c
 8011a78:	24000ef8 	.word	0x24000ef8

08011a7c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d10a      	bne.n	8011aa0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8e:	f383 8811 	msr	BASEPRI, r3
 8011a92:	f3bf 8f6f 	isb	sy
 8011a96:	f3bf 8f4f 	dsb	sy
 8011a9a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011a9c:	bf00      	nop
 8011a9e:	e7fe      	b.n	8011a9e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011aa0:	2320      	movs	r3, #32
 8011aa2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	2b20      	cmp	r3, #32
 8011aa8:	d00a      	beq.n	8011ac0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aae:	f383 8811 	msr	BASEPRI, r3
 8011ab2:	f3bf 8f6f 	isb	sy
 8011ab6:	f3bf 8f4f 	dsb	sy
 8011aba:	60fb      	str	r3, [r7, #12]
}
 8011abc:	bf00      	nop
 8011abe:	e7fe      	b.n	8011abe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d00a      	beq.n	8011ae0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	2200      	movs	r2, #0
 8011ace:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	3304      	adds	r3, #4
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f000 f9bf 	bl	8011e58 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	2201      	movs	r2, #1
 8011ade:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011ae0:	697b      	ldr	r3, [r7, #20]
	}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3718      	adds	r7, #24
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011aea:	b580      	push	{r7, lr}
 8011aec:	b082      	sub	sp, #8
 8011aee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011af0:	2020      	movs	r0, #32
 8011af2:	f002 fed1 	bl	8014898 <pvPortMalloc>
 8011af6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00a      	beq.n	8011b14 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	3304      	adds	r3, #4
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f000 f9a5 	bl	8011e58 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011b14:	687b      	ldr	r3, [r7, #4]
	}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
	...

08011b20 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b090      	sub	sp, #64	; 0x40
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
 8011b2c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011b36:	2300      	movs	r3, #0
 8011b38:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d10a      	bne.n	8011b56 <xEventGroupWaitBits+0x36>
	__asm volatile
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	623b      	str	r3, [r7, #32]
}
 8011b52:	bf00      	nop
 8011b54:	e7fe      	b.n	8011b54 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00a      	beq.n	8011b76 <xEventGroupWaitBits+0x56>
	__asm volatile
 8011b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b64:	f383 8811 	msr	BASEPRI, r3
 8011b68:	f3bf 8f6f 	isb	sy
 8011b6c:	f3bf 8f4f 	dsb	sy
 8011b70:	61fb      	str	r3, [r7, #28]
}
 8011b72:	bf00      	nop
 8011b74:	e7fe      	b.n	8011b74 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d10a      	bne.n	8011b92 <xEventGroupWaitBits+0x72>
	__asm volatile
 8011b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b80:	f383 8811 	msr	BASEPRI, r3
 8011b84:	f3bf 8f6f 	isb	sy
 8011b88:	f3bf 8f4f 	dsb	sy
 8011b8c:	61bb      	str	r3, [r7, #24]
}
 8011b8e:	bf00      	nop
 8011b90:	e7fe      	b.n	8011b90 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b92:	f001 ffcd 	bl	8013b30 <xTaskGetSchedulerState>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d102      	bne.n	8011ba2 <xEventGroupWaitBits+0x82>
 8011b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <xEventGroupWaitBits+0x86>
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e000      	b.n	8011ba8 <xEventGroupWaitBits+0x88>
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d10a      	bne.n	8011bc2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb0:	f383 8811 	msr	BASEPRI, r3
 8011bb4:	f3bf 8f6f 	isb	sy
 8011bb8:	f3bf 8f4f 	dsb	sy
 8011bbc:	617b      	str	r3, [r7, #20]
}
 8011bbe:	bf00      	nop
 8011bc0:	e7fe      	b.n	8011bc0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011bc2:	f001 fb35 	bl	8013230 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011bcc:	683a      	ldr	r2, [r7, #0]
 8011bce:	68b9      	ldr	r1, [r7, #8]
 8011bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bd2:	f000 f90b 	bl	8011dec <prvTestWaitCondition>
 8011bd6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d00e      	beq.n	8011bfc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011be2:	2300      	movs	r3, #0
 8011be4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d028      	beq.n	8011c3e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	43db      	mvns	r3, r3
 8011bf4:	401a      	ands	r2, r3
 8011bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	e020      	b.n	8011c3e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d104      	bne.n	8011c0c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c04:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011c06:	2301      	movs	r3, #1
 8011c08:	633b      	str	r3, [r7, #48]	; 0x30
 8011c0a:	e018      	b.n	8011c3e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d003      	beq.n	8011c1a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011c18:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d003      	beq.n	8011c28 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011c26:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2a:	1d18      	adds	r0, r3, #4
 8011c2c:	68ba      	ldr	r2, [r7, #8]
 8011c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c30:	4313      	orrs	r3, r2
 8011c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c34:	4619      	mov	r1, r3
 8011c36:	f001 fcf3 	bl	8013620 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011c3e:	f001 fb05 	bl	801324c <xTaskResumeAll>
 8011c42:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d031      	beq.n	8011cae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d107      	bne.n	8011c60 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011c50:	4b19      	ldr	r3, [pc, #100]	; (8011cb8 <xEventGroupWaitBits+0x198>)
 8011c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c56:	601a      	str	r2, [r3, #0]
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011c60:	f001 fff2 	bl	8013c48 <uxTaskResetEventItemValue>
 8011c64:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d11a      	bne.n	8011ca6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011c70:	f002 fcf0 	bl	8014654 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011c7a:	683a      	ldr	r2, [r7, #0]
 8011c7c:	68b9      	ldr	r1, [r7, #8]
 8011c7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c80:	f000 f8b4 	bl	8011dec <prvTestWaitCondition>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d009      	beq.n	8011c9e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d006      	beq.n	8011c9e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	43db      	mvns	r3, r3
 8011c98:	401a      	ands	r2, r3
 8011c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c9c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011ca2:	f002 fd07 	bl	80146b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011cac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3740      	adds	r7, #64	; 0x40
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	e000ed04 	.word	0xe000ed04

08011cbc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b08e      	sub	sp, #56	; 0x38
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d10a      	bne.n	8011cee <xEventGroupSetBits+0x32>
	__asm volatile
 8011cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cdc:	f383 8811 	msr	BASEPRI, r3
 8011ce0:	f3bf 8f6f 	isb	sy
 8011ce4:	f3bf 8f4f 	dsb	sy
 8011ce8:	613b      	str	r3, [r7, #16]
}
 8011cea:	bf00      	nop
 8011cec:	e7fe      	b.n	8011cec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00a      	beq.n	8011d0e <xEventGroupSetBits+0x52>
	__asm volatile
 8011cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cfc:	f383 8811 	msr	BASEPRI, r3
 8011d00:	f3bf 8f6f 	isb	sy
 8011d04:	f3bf 8f4f 	dsb	sy
 8011d08:	60fb      	str	r3, [r7, #12]
}
 8011d0a:	bf00      	nop
 8011d0c:	e7fe      	b.n	8011d0c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d10:	3304      	adds	r3, #4
 8011d12:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d16:	3308      	adds	r3, #8
 8011d18:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011d1a:	f001 fa89 	bl	8013230 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d20:	68db      	ldr	r3, [r3, #12]
 8011d22:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d2e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011d30:	e03c      	b.n	8011dac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011d48:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011d50:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d108      	bne.n	8011d6e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	4013      	ands	r3, r2
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d00b      	beq.n	8011d80 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d6c:	e008      	b.n	8011d80 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	4013      	ands	r3, r2
 8011d76:	69ba      	ldr	r2, [r7, #24]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d101      	bne.n	8011d80 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d010      	beq.n	8011da8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d003      	beq.n	8011d98 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	4313      	orrs	r3, r2
 8011d96:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011da0:	4619      	mov	r1, r3
 8011da2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011da4:	f001 fd08 	bl	80137b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dae:	6a3b      	ldr	r3, [r7, #32]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d1be      	bne.n	8011d32 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	43db      	mvns	r3, r3
 8011dbc:	401a      	ands	r2, r3
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011dc2:	f001 fa43 	bl	801324c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc8:	681b      	ldr	r3, [r3, #0]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3738      	adds	r7, #56	; 0x38
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b082      	sub	sp, #8
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
 8011dda:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011ddc:	6839      	ldr	r1, [r7, #0]
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7ff ff6c 	bl	8011cbc <xEventGroupSetBits>
}
 8011de4:	bf00      	nop
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011dec:	b480      	push	{r7}
 8011dee:	b087      	sub	sp, #28
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d107      	bne.n	8011e12 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	4013      	ands	r3, r2
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00a      	beq.n	8011e22 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	617b      	str	r3, [r7, #20]
 8011e10:	e007      	b.n	8011e22 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	4013      	ands	r3, r2
 8011e18:	68ba      	ldr	r2, [r7, #8]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d101      	bne.n	8011e22 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011e22:	697b      	ldr	r3, [r7, #20]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	371c      	adds	r7, #28
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b086      	sub	sp, #24
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	68f9      	ldr	r1, [r7, #12]
 8011e42:	4804      	ldr	r0, [pc, #16]	; (8011e54 <xEventGroupSetBitsFromISR+0x24>)
 8011e44:	f002 faba 	bl	80143bc <xTimerPendFunctionCallFromISR>
 8011e48:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011e4a:	697b      	ldr	r3, [r7, #20]
	}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3718      	adds	r7, #24
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	08011dd3 	.word	0x08011dd3

08011e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f103 0208 	add.w	r2, r3, #8
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f103 0208 	add.w	r2, r3, #8
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f103 0208 	add.w	r2, r3, #8
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011e8c:	bf00      	nop
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011ea6:	bf00      	nop
 8011ea8:	370c      	adds	r7, #12
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr

08011eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011eb2:	b480      	push	{r7}
 8011eb4:	b085      	sub	sp, #20
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
 8011eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	68fa      	ldr	r2, [r7, #12]
 8011ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	689a      	ldr	r2, [r3, #8]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	689b      	ldr	r3, [r3, #8]
 8011ed4:	683a      	ldr	r2, [r7, #0]
 8011ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	1c5a      	adds	r2, r3, #1
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	601a      	str	r2, [r3, #0]
}
 8011eee:	bf00      	nop
 8011ef0:	3714      	adds	r7, #20
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr

08011efa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011efa:	b480      	push	{r7}
 8011efc:	b085      	sub	sp, #20
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
 8011f02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f10:	d103      	bne.n	8011f1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	60fb      	str	r3, [r7, #12]
 8011f18:	e00c      	b.n	8011f34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	3308      	adds	r3, #8
 8011f1e:	60fb      	str	r3, [r7, #12]
 8011f20:	e002      	b.n	8011f28 <vListInsert+0x2e>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	60fb      	str	r3, [r7, #12]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	68ba      	ldr	r2, [r7, #8]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d2f6      	bcs.n	8011f22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	685a      	ldr	r2, [r3, #4]
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	683a      	ldr	r2, [r7, #0]
 8011f4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	1c5a      	adds	r2, r3, #1
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	601a      	str	r2, [r3, #0]
}
 8011f60:	bf00      	nop
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b085      	sub	sp, #20
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	6892      	ldr	r2, [r2, #8]
 8011f82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	6852      	ldr	r2, [r2, #4]
 8011f8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d103      	bne.n	8011fa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	689a      	ldr	r2, [r3, #8]
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	1e5a      	subs	r2, r3, #1
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d10a      	bne.n	8011fea <xQueueGenericReset+0x2a>
	__asm volatile
 8011fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd8:	f383 8811 	msr	BASEPRI, r3
 8011fdc:	f3bf 8f6f 	isb	sy
 8011fe0:	f3bf 8f4f 	dsb	sy
 8011fe4:	60bb      	str	r3, [r7, #8]
}
 8011fe6:	bf00      	nop
 8011fe8:	e7fe      	b.n	8011fe8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011fea:	f002 fb33 	bl	8014654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ff6:	68f9      	ldr	r1, [r7, #12]
 8011ff8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ffa:	fb01 f303 	mul.w	r3, r1, r3
 8011ffe:	441a      	add	r2, r3
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2200      	movs	r2, #0
 8012008:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801201a:	3b01      	subs	r3, #1
 801201c:	68f9      	ldr	r1, [r7, #12]
 801201e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012020:	fb01 f303 	mul.w	r3, r1, r3
 8012024:	441a      	add	r2, r3
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	22ff      	movs	r2, #255	; 0xff
 801202e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	22ff      	movs	r2, #255	; 0xff
 8012036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d114      	bne.n	801206a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	691b      	ldr	r3, [r3, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d01a      	beq.n	801207e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	3310      	adds	r3, #16
 801204c:	4618      	mov	r0, r3
 801204e:	f001 fb4f 	bl	80136f0 <xTaskRemoveFromEventList>
 8012052:	4603      	mov	r3, r0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d012      	beq.n	801207e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012058:	4b0c      	ldr	r3, [pc, #48]	; (801208c <xQueueGenericReset+0xcc>)
 801205a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	f3bf 8f4f 	dsb	sy
 8012064:	f3bf 8f6f 	isb	sy
 8012068:	e009      	b.n	801207e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	3310      	adds	r3, #16
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff fef2 	bl	8011e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	3324      	adds	r3, #36	; 0x24
 8012078:	4618      	mov	r0, r3
 801207a:	f7ff feed 	bl	8011e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801207e:	f002 fb19 	bl	80146b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012082:	2301      	movs	r3, #1
}
 8012084:	4618      	mov	r0, r3
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	e000ed04 	.word	0xe000ed04

08012090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012090:	b580      	push	{r7, lr}
 8012092:	b08e      	sub	sp, #56	; 0x38
 8012094:	af02      	add	r7, sp, #8
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	60b9      	str	r1, [r7, #8]
 801209a:	607a      	str	r2, [r7, #4]
 801209c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d10a      	bne.n	80120ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80120a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80120b6:	bf00      	nop
 80120b8:	e7fe      	b.n	80120b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10a      	bne.n	80120d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80120c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c4:	f383 8811 	msr	BASEPRI, r3
 80120c8:	f3bf 8f6f 	isb	sy
 80120cc:	f3bf 8f4f 	dsb	sy
 80120d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80120d2:	bf00      	nop
 80120d4:	e7fe      	b.n	80120d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <xQueueGenericCreateStatic+0x52>
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d001      	beq.n	80120e6 <xQueueGenericCreateStatic+0x56>
 80120e2:	2301      	movs	r3, #1
 80120e4:	e000      	b.n	80120e8 <xQueueGenericCreateStatic+0x58>
 80120e6:	2300      	movs	r3, #0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10a      	bne.n	8012102 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80120ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f0:	f383 8811 	msr	BASEPRI, r3
 80120f4:	f3bf 8f6f 	isb	sy
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	623b      	str	r3, [r7, #32]
}
 80120fe:	bf00      	nop
 8012100:	e7fe      	b.n	8012100 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d102      	bne.n	801210e <xQueueGenericCreateStatic+0x7e>
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <xQueueGenericCreateStatic+0x82>
 801210e:	2301      	movs	r3, #1
 8012110:	e000      	b.n	8012114 <xQueueGenericCreateStatic+0x84>
 8012112:	2300      	movs	r3, #0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d10a      	bne.n	801212e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	61fb      	str	r3, [r7, #28]
}
 801212a:	bf00      	nop
 801212c:	e7fe      	b.n	801212c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801212e:	2350      	movs	r3, #80	; 0x50
 8012130:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	2b50      	cmp	r3, #80	; 0x50
 8012136:	d00a      	beq.n	801214e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213c:	f383 8811 	msr	BASEPRI, r3
 8012140:	f3bf 8f6f 	isb	sy
 8012144:	f3bf 8f4f 	dsb	sy
 8012148:	61bb      	str	r3, [r7, #24]
}
 801214a:	bf00      	nop
 801214c:	e7fe      	b.n	801214c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801214e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00d      	beq.n	8012176 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215c:	2201      	movs	r2, #1
 801215e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012162:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012168:	9300      	str	r3, [sp, #0]
 801216a:	4613      	mov	r3, r2
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	68b9      	ldr	r1, [r7, #8]
 8012170:	68f8      	ldr	r0, [r7, #12]
 8012172:	f000 f83f 	bl	80121f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012178:	4618      	mov	r0, r3
 801217a:	3730      	adds	r7, #48	; 0x30
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012180:	b580      	push	{r7, lr}
 8012182:	b08a      	sub	sp, #40	; 0x28
 8012184:	af02      	add	r7, sp, #8
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	4613      	mov	r3, r2
 801218c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10a      	bne.n	80121aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	613b      	str	r3, [r7, #16]
}
 80121a6:	bf00      	nop
 80121a8:	e7fe      	b.n	80121a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	68ba      	ldr	r2, [r7, #8]
 80121ae:	fb02 f303 	mul.w	r3, r2, r3
 80121b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	3350      	adds	r3, #80	; 0x50
 80121b8:	4618      	mov	r0, r3
 80121ba:	f002 fb6d 	bl	8014898 <pvPortMalloc>
 80121be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d011      	beq.n	80121ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	3350      	adds	r3, #80	; 0x50
 80121ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	2200      	movs	r2, #0
 80121d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80121d8:	79fa      	ldrb	r2, [r7, #7]
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	4613      	mov	r3, r2
 80121e0:	697a      	ldr	r2, [r7, #20]
 80121e2:	68b9      	ldr	r1, [r7, #8]
 80121e4:	68f8      	ldr	r0, [r7, #12]
 80121e6:	f000 f805 	bl	80121f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80121ea:	69bb      	ldr	r3, [r7, #24]
	}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3720      	adds	r7, #32
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60f8      	str	r0, [r7, #12]
 80121fc:	60b9      	str	r1, [r7, #8]
 80121fe:	607a      	str	r2, [r7, #4]
 8012200:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d103      	bne.n	8012210 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	69ba      	ldr	r2, [r7, #24]
 801220c:	601a      	str	r2, [r3, #0]
 801220e:	e002      	b.n	8012216 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012222:	2101      	movs	r1, #1
 8012224:	69b8      	ldr	r0, [r7, #24]
 8012226:	f7ff fecb 	bl	8011fc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	78fa      	ldrb	r2, [r7, #3]
 801222e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012232:	bf00      	nop
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
	...

0801223c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b08e      	sub	sp, #56	; 0x38
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801224a:	2300      	movs	r3, #0
 801224c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012254:	2b00      	cmp	r3, #0
 8012256:	d10a      	bne.n	801226e <xQueueGenericSend+0x32>
	__asm volatile
 8012258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225c:	f383 8811 	msr	BASEPRI, r3
 8012260:	f3bf 8f6f 	isb	sy
 8012264:	f3bf 8f4f 	dsb	sy
 8012268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801226a:	bf00      	nop
 801226c:	e7fe      	b.n	801226c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d103      	bne.n	801227c <xQueueGenericSend+0x40>
 8012274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012278:	2b00      	cmp	r3, #0
 801227a:	d101      	bne.n	8012280 <xQueueGenericSend+0x44>
 801227c:	2301      	movs	r3, #1
 801227e:	e000      	b.n	8012282 <xQueueGenericSend+0x46>
 8012280:	2300      	movs	r3, #0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d10a      	bne.n	801229c <xQueueGenericSend+0x60>
	__asm volatile
 8012286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801228a:	f383 8811 	msr	BASEPRI, r3
 801228e:	f3bf 8f6f 	isb	sy
 8012292:	f3bf 8f4f 	dsb	sy
 8012296:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012298:	bf00      	nop
 801229a:	e7fe      	b.n	801229a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	2b02      	cmp	r3, #2
 80122a0:	d103      	bne.n	80122aa <xQueueGenericSend+0x6e>
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122a6:	2b01      	cmp	r3, #1
 80122a8:	d101      	bne.n	80122ae <xQueueGenericSend+0x72>
 80122aa:	2301      	movs	r3, #1
 80122ac:	e000      	b.n	80122b0 <xQueueGenericSend+0x74>
 80122ae:	2300      	movs	r3, #0
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10a      	bne.n	80122ca <xQueueGenericSend+0x8e>
	__asm volatile
 80122b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b8:	f383 8811 	msr	BASEPRI, r3
 80122bc:	f3bf 8f6f 	isb	sy
 80122c0:	f3bf 8f4f 	dsb	sy
 80122c4:	623b      	str	r3, [r7, #32]
}
 80122c6:	bf00      	nop
 80122c8:	e7fe      	b.n	80122c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122ca:	f001 fc31 	bl	8013b30 <xTaskGetSchedulerState>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d102      	bne.n	80122da <xQueueGenericSend+0x9e>
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d101      	bne.n	80122de <xQueueGenericSend+0xa2>
 80122da:	2301      	movs	r3, #1
 80122dc:	e000      	b.n	80122e0 <xQueueGenericSend+0xa4>
 80122de:	2300      	movs	r3, #0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d10a      	bne.n	80122fa <xQueueGenericSend+0xbe>
	__asm volatile
 80122e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e8:	f383 8811 	msr	BASEPRI, r3
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	61fb      	str	r3, [r7, #28]
}
 80122f6:	bf00      	nop
 80122f8:	e7fe      	b.n	80122f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80122fa:	f002 f9ab 	bl	8014654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80122fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012306:	429a      	cmp	r2, r3
 8012308:	d302      	bcc.n	8012310 <xQueueGenericSend+0xd4>
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	2b02      	cmp	r3, #2
 801230e:	d129      	bne.n	8012364 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012310:	683a      	ldr	r2, [r7, #0]
 8012312:	68b9      	ldr	r1, [r7, #8]
 8012314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012316:	f000 fac7 	bl	80128a8 <prvCopyDataToQueue>
 801231a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012320:	2b00      	cmp	r3, #0
 8012322:	d010      	beq.n	8012346 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012326:	3324      	adds	r3, #36	; 0x24
 8012328:	4618      	mov	r0, r3
 801232a:	f001 f9e1 	bl	80136f0 <xTaskRemoveFromEventList>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d013      	beq.n	801235c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012334:	4b3f      	ldr	r3, [pc, #252]	; (8012434 <xQueueGenericSend+0x1f8>)
 8012336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	f3bf 8f4f 	dsb	sy
 8012340:	f3bf 8f6f 	isb	sy
 8012344:	e00a      	b.n	801235c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012348:	2b00      	cmp	r3, #0
 801234a:	d007      	beq.n	801235c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801234c:	4b39      	ldr	r3, [pc, #228]	; (8012434 <xQueueGenericSend+0x1f8>)
 801234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012352:	601a      	str	r2, [r3, #0]
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801235c:	f002 f9aa 	bl	80146b4 <vPortExitCritical>
				return pdPASS;
 8012360:	2301      	movs	r3, #1
 8012362:	e063      	b.n	801242c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d103      	bne.n	8012372 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801236a:	f002 f9a3 	bl	80146b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801236e:	2300      	movs	r3, #0
 8012370:	e05c      	b.n	801242c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012374:	2b00      	cmp	r3, #0
 8012376:	d106      	bne.n	8012386 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012378:	f107 0314 	add.w	r3, r7, #20
 801237c:	4618      	mov	r0, r3
 801237e:	f001 fa7d 	bl	801387c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012382:	2301      	movs	r3, #1
 8012384:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012386:	f002 f995 	bl	80146b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801238a:	f000 ff51 	bl	8013230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801238e:	f002 f961 	bl	8014654 <vPortEnterCritical>
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012398:	b25b      	sxtb	r3, r3
 801239a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801239e:	d103      	bne.n	80123a8 <xQueueGenericSend+0x16c>
 80123a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a2:	2200      	movs	r2, #0
 80123a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123ae:	b25b      	sxtb	r3, r3
 80123b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123b4:	d103      	bne.n	80123be <xQueueGenericSend+0x182>
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	2200      	movs	r2, #0
 80123ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123be:	f002 f979 	bl	80146b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123c2:	1d3a      	adds	r2, r7, #4
 80123c4:	f107 0314 	add.w	r3, r7, #20
 80123c8:	4611      	mov	r1, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f001 fa6c 	bl	80138a8 <xTaskCheckForTimeOut>
 80123d0:	4603      	mov	r3, r0
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d124      	bne.n	8012420 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80123d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123d8:	f000 fb5e 	bl	8012a98 <prvIsQueueFull>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d018      	beq.n	8012414 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80123e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e4:	3310      	adds	r3, #16
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	4611      	mov	r1, r2
 80123ea:	4618      	mov	r0, r3
 80123ec:	f001 f8f4 	bl	80135d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80123f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123f2:	f000 fae9 	bl	80129c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80123f6:	f000 ff29 	bl	801324c <xTaskResumeAll>
 80123fa:	4603      	mov	r3, r0
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	f47f af7c 	bne.w	80122fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012402:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <xQueueGenericSend+0x1f8>)
 8012404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012408:	601a      	str	r2, [r3, #0]
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	f3bf 8f6f 	isb	sy
 8012412:	e772      	b.n	80122fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012416:	f000 fad7 	bl	80129c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801241a:	f000 ff17 	bl	801324c <xTaskResumeAll>
 801241e:	e76c      	b.n	80122fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012422:	f000 fad1 	bl	80129c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012426:	f000 ff11 	bl	801324c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801242a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801242c:	4618      	mov	r0, r3
 801242e:	3738      	adds	r7, #56	; 0x38
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	e000ed04 	.word	0xe000ed04

08012438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b090      	sub	sp, #64	; 0x40
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
 8012444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10a      	bne.n	8012466 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012454:	f383 8811 	msr	BASEPRI, r3
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012462:	bf00      	nop
 8012464:	e7fe      	b.n	8012464 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d103      	bne.n	8012474 <xQueueGenericSendFromISR+0x3c>
 801246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012470:	2b00      	cmp	r3, #0
 8012472:	d101      	bne.n	8012478 <xQueueGenericSendFromISR+0x40>
 8012474:	2301      	movs	r3, #1
 8012476:	e000      	b.n	801247a <xQueueGenericSendFromISR+0x42>
 8012478:	2300      	movs	r3, #0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d10a      	bne.n	8012494 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012482:	f383 8811 	msr	BASEPRI, r3
 8012486:	f3bf 8f6f 	isb	sy
 801248a:	f3bf 8f4f 	dsb	sy
 801248e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012490:	bf00      	nop
 8012492:	e7fe      	b.n	8012492 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	2b02      	cmp	r3, #2
 8012498:	d103      	bne.n	80124a2 <xQueueGenericSendFromISR+0x6a>
 801249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d101      	bne.n	80124a6 <xQueueGenericSendFromISR+0x6e>
 80124a2:	2301      	movs	r3, #1
 80124a4:	e000      	b.n	80124a8 <xQueueGenericSendFromISR+0x70>
 80124a6:	2300      	movs	r3, #0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d10a      	bne.n	80124c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80124ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b0:	f383 8811 	msr	BASEPRI, r3
 80124b4:	f3bf 8f6f 	isb	sy
 80124b8:	f3bf 8f4f 	dsb	sy
 80124bc:	623b      	str	r3, [r7, #32]
}
 80124be:	bf00      	nop
 80124c0:	e7fe      	b.n	80124c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124c2:	f002 f9a9 	bl	8014818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80124c6:	f3ef 8211 	mrs	r2, BASEPRI
 80124ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ce:	f383 8811 	msr	BASEPRI, r3
 80124d2:	f3bf 8f6f 	isb	sy
 80124d6:	f3bf 8f4f 	dsb	sy
 80124da:	61fa      	str	r2, [r7, #28]
 80124dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80124de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d302      	bcc.n	80124f4 <xQueueGenericSendFromISR+0xbc>
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d12f      	bne.n	8012554 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012502:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	68b9      	ldr	r1, [r7, #8]
 8012508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801250a:	f000 f9cd 	bl	80128a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801250e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012516:	d112      	bne.n	801253e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251c:	2b00      	cmp	r3, #0
 801251e:	d016      	beq.n	801254e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012522:	3324      	adds	r3, #36	; 0x24
 8012524:	4618      	mov	r0, r3
 8012526:	f001 f8e3 	bl	80136f0 <xTaskRemoveFromEventList>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00e      	beq.n	801254e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00b      	beq.n	801254e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2201      	movs	r2, #1
 801253a:	601a      	str	r2, [r3, #0]
 801253c:	e007      	b.n	801254e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801253e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012542:	3301      	adds	r3, #1
 8012544:	b2db      	uxtb	r3, r3
 8012546:	b25a      	sxtb	r2, r3
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801254e:	2301      	movs	r3, #1
 8012550:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012552:	e001      	b.n	8012558 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012554:	2300      	movs	r3, #0
 8012556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801255a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012562:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012566:	4618      	mov	r0, r3
 8012568:	3740      	adds	r7, #64	; 0x40
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
	...

08012570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b08c      	sub	sp, #48	; 0x30
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801257c:	2300      	movs	r3, #0
 801257e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012586:	2b00      	cmp	r3, #0
 8012588:	d10a      	bne.n	80125a0 <xQueueReceive+0x30>
	__asm volatile
 801258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258e:	f383 8811 	msr	BASEPRI, r3
 8012592:	f3bf 8f6f 	isb	sy
 8012596:	f3bf 8f4f 	dsb	sy
 801259a:	623b      	str	r3, [r7, #32]
}
 801259c:	bf00      	nop
 801259e:	e7fe      	b.n	801259e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d103      	bne.n	80125ae <xQueueReceive+0x3e>
 80125a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d101      	bne.n	80125b2 <xQueueReceive+0x42>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e000      	b.n	80125b4 <xQueueReceive+0x44>
 80125b2:	2300      	movs	r3, #0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d10a      	bne.n	80125ce <xQueueReceive+0x5e>
	__asm volatile
 80125b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125bc:	f383 8811 	msr	BASEPRI, r3
 80125c0:	f3bf 8f6f 	isb	sy
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	61fb      	str	r3, [r7, #28]
}
 80125ca:	bf00      	nop
 80125cc:	e7fe      	b.n	80125cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80125ce:	f001 faaf 	bl	8013b30 <xTaskGetSchedulerState>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d102      	bne.n	80125de <xQueueReceive+0x6e>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d101      	bne.n	80125e2 <xQueueReceive+0x72>
 80125de:	2301      	movs	r3, #1
 80125e0:	e000      	b.n	80125e4 <xQueueReceive+0x74>
 80125e2:	2300      	movs	r3, #0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d10a      	bne.n	80125fe <xQueueReceive+0x8e>
	__asm volatile
 80125e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ec:	f383 8811 	msr	BASEPRI, r3
 80125f0:	f3bf 8f6f 	isb	sy
 80125f4:	f3bf 8f4f 	dsb	sy
 80125f8:	61bb      	str	r3, [r7, #24]
}
 80125fa:	bf00      	nop
 80125fc:	e7fe      	b.n	80125fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80125fe:	f002 f829 	bl	8014654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012606:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260a:	2b00      	cmp	r3, #0
 801260c:	d01f      	beq.n	801264e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801260e:	68b9      	ldr	r1, [r7, #8]
 8012610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012612:	f000 f9b3 	bl	801297c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	1e5a      	subs	r2, r3, #1
 801261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012620:	691b      	ldr	r3, [r3, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00f      	beq.n	8012646 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012628:	3310      	adds	r3, #16
 801262a:	4618      	mov	r0, r3
 801262c:	f001 f860 	bl	80136f0 <xTaskRemoveFromEventList>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d007      	beq.n	8012646 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012636:	4b3d      	ldr	r3, [pc, #244]	; (801272c <xQueueReceive+0x1bc>)
 8012638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801263c:	601a      	str	r2, [r3, #0]
 801263e:	f3bf 8f4f 	dsb	sy
 8012642:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012646:	f002 f835 	bl	80146b4 <vPortExitCritical>
				return pdPASS;
 801264a:	2301      	movs	r3, #1
 801264c:	e069      	b.n	8012722 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d103      	bne.n	801265c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012654:	f002 f82e 	bl	80146b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012658:	2300      	movs	r3, #0
 801265a:	e062      	b.n	8012722 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265e:	2b00      	cmp	r3, #0
 8012660:	d106      	bne.n	8012670 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012662:	f107 0310 	add.w	r3, r7, #16
 8012666:	4618      	mov	r0, r3
 8012668:	f001 f908 	bl	801387c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801266c:	2301      	movs	r3, #1
 801266e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012670:	f002 f820 	bl	80146b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012674:	f000 fddc 	bl	8013230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012678:	f001 ffec 	bl	8014654 <vPortEnterCritical>
 801267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012682:	b25b      	sxtb	r3, r3
 8012684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012688:	d103      	bne.n	8012692 <xQueueReceive+0x122>
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	2200      	movs	r2, #0
 801268e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012698:	b25b      	sxtb	r3, r3
 801269a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801269e:	d103      	bne.n	80126a8 <xQueueReceive+0x138>
 80126a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a2:	2200      	movs	r2, #0
 80126a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126a8:	f002 f804 	bl	80146b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80126ac:	1d3a      	adds	r2, r7, #4
 80126ae:	f107 0310 	add.w	r3, r7, #16
 80126b2:	4611      	mov	r1, r2
 80126b4:	4618      	mov	r0, r3
 80126b6:	f001 f8f7 	bl	80138a8 <xTaskCheckForTimeOut>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d123      	bne.n	8012708 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126c2:	f000 f9d3 	bl	8012a6c <prvIsQueueEmpty>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d017      	beq.n	80126fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80126cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ce:	3324      	adds	r3, #36	; 0x24
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	4611      	mov	r1, r2
 80126d4:	4618      	mov	r0, r3
 80126d6:	f000 ff7f 	bl	80135d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80126da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126dc:	f000 f974 	bl	80129c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80126e0:	f000 fdb4 	bl	801324c <xTaskResumeAll>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d189      	bne.n	80125fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80126ea:	4b10      	ldr	r3, [pc, #64]	; (801272c <xQueueReceive+0x1bc>)
 80126ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126f0:	601a      	str	r2, [r3, #0]
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	f3bf 8f6f 	isb	sy
 80126fa:	e780      	b.n	80125fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80126fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126fe:	f000 f963 	bl	80129c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012702:	f000 fda3 	bl	801324c <xTaskResumeAll>
 8012706:	e77a      	b.n	80125fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801270a:	f000 f95d 	bl	80129c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801270e:	f000 fd9d 	bl	801324c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012714:	f000 f9aa 	bl	8012a6c <prvIsQueueEmpty>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	f43f af6f 	beq.w	80125fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012722:	4618      	mov	r0, r3
 8012724:	3730      	adds	r7, #48	; 0x30
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	e000ed04 	.word	0xe000ed04

08012730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08e      	sub	sp, #56	; 0x38
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10a      	bne.n	801275c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	623b      	str	r3, [r7, #32]
}
 8012758:	bf00      	nop
 801275a:	e7fe      	b.n	801275a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d103      	bne.n	801276a <xQueueReceiveFromISR+0x3a>
 8012762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012766:	2b00      	cmp	r3, #0
 8012768:	d101      	bne.n	801276e <xQueueReceiveFromISR+0x3e>
 801276a:	2301      	movs	r3, #1
 801276c:	e000      	b.n	8012770 <xQueueReceiveFromISR+0x40>
 801276e:	2300      	movs	r3, #0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10a      	bne.n	801278a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	61fb      	str	r3, [r7, #28]
}
 8012786:	bf00      	nop
 8012788:	e7fe      	b.n	8012788 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801278a:	f002 f845 	bl	8014818 <vPortValidateInterruptPriority>
	__asm volatile
 801278e:	f3ef 8211 	mrs	r2, BASEPRI
 8012792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	61ba      	str	r2, [r7, #24]
 80127a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80127a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80127b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d02f      	beq.n	8012816 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80127b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80127c0:	68b9      	ldr	r1, [r7, #8]
 80127c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127c4:	f000 f8da 	bl	801297c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80127c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ca:	1e5a      	subs	r2, r3, #1
 80127cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80127d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127d8:	d112      	bne.n	8012800 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127dc:	691b      	ldr	r3, [r3, #16]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d016      	beq.n	8012810 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e4:	3310      	adds	r3, #16
 80127e6:	4618      	mov	r0, r3
 80127e8:	f000 ff82 	bl	80136f0 <xTaskRemoveFromEventList>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00e      	beq.n	8012810 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d00b      	beq.n	8012810 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2201      	movs	r2, #1
 80127fc:	601a      	str	r2, [r3, #0]
 80127fe:	e007      	b.n	8012810 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012804:	3301      	adds	r3, #1
 8012806:	b2db      	uxtb	r3, r3
 8012808:	b25a      	sxtb	r2, r3
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012810:	2301      	movs	r3, #1
 8012812:	637b      	str	r3, [r7, #52]	; 0x34
 8012814:	e001      	b.n	801281a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012816:	2300      	movs	r3, #0
 8012818:	637b      	str	r3, [r7, #52]	; 0x34
 801281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	f383 8811 	msr	BASEPRI, r3
}
 8012824:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012828:	4618      	mov	r0, r3
 801282a:	3738      	adds	r7, #56	; 0x38
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d10a      	bne.n	8012854 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012842:	f383 8811 	msr	BASEPRI, r3
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	f3bf 8f4f 	dsb	sy
 801284e:	60bb      	str	r3, [r7, #8]
}
 8012850:	bf00      	nop
 8012852:	e7fe      	b.n	8012852 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012854:	f001 fefe 	bl	8014654 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801285c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801285e:	f001 ff29 	bl	80146b4 <vPortExitCritical>

	return uxReturn;
 8012862:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012864:	4618      	mov	r0, r3
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801286c:	b480      	push	{r7}
 801286e:	b087      	sub	sp, #28
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d10a      	bne.n	8012894 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012882:	f383 8811 	msr	BASEPRI, r3
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	60fb      	str	r3, [r7, #12]
}
 8012890:	bf00      	nop
 8012892:	e7fe      	b.n	8012892 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012898:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801289a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801289c:	4618      	mov	r0, r3
 801289e:	371c      	adds	r7, #28
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b086      	sub	sp, #24
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80128b4:	2300      	movs	r3, #0
 80128b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d10d      	bne.n	80128e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d14d      	bne.n	801296a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	689b      	ldr	r3, [r3, #8]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f001 f94a 	bl	8013b6c <xTaskPriorityDisinherit>
 80128d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2200      	movs	r2, #0
 80128de:	609a      	str	r2, [r3, #8]
 80128e0:	e043      	b.n	801296a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d119      	bne.n	801291c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	6858      	ldr	r0, [r3, #4]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f0:	461a      	mov	r2, r3
 80128f2:	68b9      	ldr	r1, [r7, #8]
 80128f4:	f002 f9f4 	bl	8014ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	685a      	ldr	r2, [r3, #4]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012900:	441a      	add	r2, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	689b      	ldr	r3, [r3, #8]
 801290e:	429a      	cmp	r2, r3
 8012910:	d32b      	bcc.n	801296a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	605a      	str	r2, [r3, #4]
 801291a:	e026      	b.n	801296a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	68d8      	ldr	r0, [r3, #12]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012924:	461a      	mov	r2, r3
 8012926:	68b9      	ldr	r1, [r7, #8]
 8012928:	f002 f9da 	bl	8014ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	68da      	ldr	r2, [r3, #12]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012934:	425b      	negs	r3, r3
 8012936:	441a      	add	r2, r3
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	68da      	ldr	r2, [r3, #12]
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	429a      	cmp	r2, r3
 8012946:	d207      	bcs.n	8012958 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	689a      	ldr	r2, [r3, #8]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012950:	425b      	negs	r3, r3
 8012952:	441a      	add	r2, r3
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b02      	cmp	r3, #2
 801295c:	d105      	bne.n	801296a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d002      	beq.n	801296a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	3b01      	subs	r3, #1
 8012968:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012972:	697b      	ldr	r3, [r7, #20]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3718      	adds	r7, #24
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298a:	2b00      	cmp	r3, #0
 801298c:	d018      	beq.n	80129c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	68da      	ldr	r2, [r3, #12]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012996:	441a      	add	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68da      	ldr	r2, [r3, #12]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d303      	bcc.n	80129b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	68d9      	ldr	r1, [r3, #12]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129b8:	461a      	mov	r2, r3
 80129ba:	6838      	ldr	r0, [r7, #0]
 80129bc:	f002 f990 	bl	8014ce0 <memcpy>
	}
}
 80129c0:	bf00      	nop
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80129d0:	f001 fe40 	bl	8014654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129dc:	e011      	b.n	8012a02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d012      	beq.n	8012a0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	3324      	adds	r3, #36	; 0x24
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 fe80 	bl	80136f0 <xTaskRemoveFromEventList>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80129f6:	f000 ffb9 	bl	801396c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80129fa:	7bfb      	ldrb	r3, [r7, #15]
 80129fc:	3b01      	subs	r3, #1
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	dce9      	bgt.n	80129de <prvUnlockQueue+0x16>
 8012a0a:	e000      	b.n	8012a0e <prvUnlockQueue+0x46>
					break;
 8012a0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	22ff      	movs	r2, #255	; 0xff
 8012a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012a16:	f001 fe4d 	bl	80146b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012a1a:	f001 fe1b 	bl	8014654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a26:	e011      	b.n	8012a4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	691b      	ldr	r3, [r3, #16]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d012      	beq.n	8012a56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3310      	adds	r3, #16
 8012a34:	4618      	mov	r0, r3
 8012a36:	f000 fe5b 	bl	80136f0 <xTaskRemoveFromEventList>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d001      	beq.n	8012a44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012a40:	f000 ff94 	bl	801396c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012a44:	7bbb      	ldrb	r3, [r7, #14]
 8012a46:	3b01      	subs	r3, #1
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	dce9      	bgt.n	8012a28 <prvUnlockQueue+0x60>
 8012a54:	e000      	b.n	8012a58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012a56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	22ff      	movs	r2, #255	; 0xff
 8012a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a60:	f001 fe28 	bl	80146b4 <vPortExitCritical>
}
 8012a64:	bf00      	nop
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a74:	f001 fdee 	bl	8014654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012a80:	2301      	movs	r3, #1
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	e001      	b.n	8012a8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012a86:	2300      	movs	r3, #0
 8012a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a8a:	f001 fe13 	bl	80146b4 <vPortExitCritical>

	return xReturn;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012aa0:	f001 fdd8 	bl	8014654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d102      	bne.n	8012ab6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	60fb      	str	r3, [r7, #12]
 8012ab4:	e001      	b.n	8012aba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012aba:	f001 fdfb 	bl	80146b4 <vPortExitCritical>

	return xReturn;
 8012abe:	68fb      	ldr	r3, [r7, #12]
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3710      	adds	r7, #16
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	60fb      	str	r3, [r7, #12]
 8012ad6:	e014      	b.n	8012b02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012ad8:	4a0f      	ldr	r2, [pc, #60]	; (8012b18 <vQueueAddToRegistry+0x50>)
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10b      	bne.n	8012afc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012ae4:	490c      	ldr	r1, [pc, #48]	; (8012b18 <vQueueAddToRegistry+0x50>)
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	683a      	ldr	r2, [r7, #0]
 8012aea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012aee:	4a0a      	ldr	r2, [pc, #40]	; (8012b18 <vQueueAddToRegistry+0x50>)
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	00db      	lsls	r3, r3, #3
 8012af4:	4413      	add	r3, r2
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012afa:	e006      	b.n	8012b0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	3301      	adds	r3, #1
 8012b00:	60fb      	str	r3, [r7, #12]
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2b07      	cmp	r3, #7
 8012b06:	d9e7      	bls.n	8012ad8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012b08:	bf00      	nop
 8012b0a:	bf00      	nop
 8012b0c:	3714      	adds	r7, #20
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr
 8012b16:	bf00      	nop
 8012b18:	240012f8 	.word	0x240012f8

08012b1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b086      	sub	sp, #24
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012b2c:	f001 fd92 	bl	8014654 <vPortEnterCritical>
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b36:	b25b      	sxtb	r3, r3
 8012b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b3c:	d103      	bne.n	8012b46 <vQueueWaitForMessageRestricted+0x2a>
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	2200      	movs	r2, #0
 8012b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b4c:	b25b      	sxtb	r3, r3
 8012b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b52:	d103      	bne.n	8012b5c <vQueueWaitForMessageRestricted+0x40>
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2200      	movs	r2, #0
 8012b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b5c:	f001 fdaa 	bl	80146b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d106      	bne.n	8012b76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	3324      	adds	r3, #36	; 0x24
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	68b9      	ldr	r1, [r7, #8]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f000 fd91 	bl	8013698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012b76:	6978      	ldr	r0, [r7, #20]
 8012b78:	f7ff ff26 	bl	80129c8 <prvUnlockQueue>
	}
 8012b7c:	bf00      	nop
 8012b7e:	3718      	adds	r7, #24
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b08e      	sub	sp, #56	; 0x38
 8012b88:	af04      	add	r7, sp, #16
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
 8012b90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10a      	bne.n	8012bae <xTaskCreateStatic+0x2a>
	__asm volatile
 8012b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9c:	f383 8811 	msr	BASEPRI, r3
 8012ba0:	f3bf 8f6f 	isb	sy
 8012ba4:	f3bf 8f4f 	dsb	sy
 8012ba8:	623b      	str	r3, [r7, #32]
}
 8012baa:	bf00      	nop
 8012bac:	e7fe      	b.n	8012bac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10a      	bne.n	8012bca <xTaskCreateStatic+0x46>
	__asm volatile
 8012bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb8:	f383 8811 	msr	BASEPRI, r3
 8012bbc:	f3bf 8f6f 	isb	sy
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	61fb      	str	r3, [r7, #28]
}
 8012bc6:	bf00      	nop
 8012bc8:	e7fe      	b.n	8012bc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012bca:	235c      	movs	r3, #92	; 0x5c
 8012bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8012bd2:	d00a      	beq.n	8012bea <xTaskCreateStatic+0x66>
	__asm volatile
 8012bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd8:	f383 8811 	msr	BASEPRI, r3
 8012bdc:	f3bf 8f6f 	isb	sy
 8012be0:	f3bf 8f4f 	dsb	sy
 8012be4:	61bb      	str	r3, [r7, #24]
}
 8012be6:	bf00      	nop
 8012be8:	e7fe      	b.n	8012be8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012bea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d01e      	beq.n	8012c30 <xTaskCreateStatic+0xac>
 8012bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d01b      	beq.n	8012c30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c04:	2202      	movs	r2, #2
 8012c06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	9303      	str	r3, [sp, #12]
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	9302      	str	r3, [sp, #8]
 8012c12:	f107 0314 	add.w	r3, r7, #20
 8012c16:	9301      	str	r3, [sp, #4]
 8012c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1a:	9300      	str	r3, [sp, #0]
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	68b9      	ldr	r1, [r7, #8]
 8012c22:	68f8      	ldr	r0, [r7, #12]
 8012c24:	f000 f850 	bl	8012cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c2a:	f000 f8dd 	bl	8012de8 <prvAddNewTaskToReadyList>
 8012c2e:	e001      	b.n	8012c34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c34:	697b      	ldr	r3, [r7, #20]
	}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3728      	adds	r7, #40	; 0x28
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c3e:	b580      	push	{r7, lr}
 8012c40:	b08c      	sub	sp, #48	; 0x30
 8012c42:	af04      	add	r7, sp, #16
 8012c44:	60f8      	str	r0, [r7, #12]
 8012c46:	60b9      	str	r1, [r7, #8]
 8012c48:	603b      	str	r3, [r7, #0]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c4e:	88fb      	ldrh	r3, [r7, #6]
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	4618      	mov	r0, r3
 8012c54:	f001 fe20 	bl	8014898 <pvPortMalloc>
 8012c58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d00e      	beq.n	8012c7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c60:	205c      	movs	r0, #92	; 0x5c
 8012c62:	f001 fe19 	bl	8014898 <pvPortMalloc>
 8012c66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d003      	beq.n	8012c76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	697a      	ldr	r2, [r7, #20]
 8012c72:	631a      	str	r2, [r3, #48]	; 0x30
 8012c74:	e005      	b.n	8012c82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c76:	6978      	ldr	r0, [r7, #20]
 8012c78:	f001 feda 	bl	8014a30 <vPortFree>
 8012c7c:	e001      	b.n	8012c82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d017      	beq.n	8012cb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012c90:	88fa      	ldrh	r2, [r7, #6]
 8012c92:	2300      	movs	r3, #0
 8012c94:	9303      	str	r3, [sp, #12]
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	9302      	str	r3, [sp, #8]
 8012c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca0:	9300      	str	r3, [sp, #0]
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	68b9      	ldr	r1, [r7, #8]
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f000 f80e 	bl	8012cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012cac:	69f8      	ldr	r0, [r7, #28]
 8012cae:	f000 f89b 	bl	8012de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	61bb      	str	r3, [r7, #24]
 8012cb6:	e002      	b.n	8012cbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3720      	adds	r7, #32
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b088      	sub	sp, #32
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	60b9      	str	r1, [r7, #8]
 8012cd2:	607a      	str	r2, [r7, #4]
 8012cd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	009b      	lsls	r3, r3, #2
 8012cde:	461a      	mov	r2, r3
 8012ce0:	21a5      	movs	r1, #165	; 0xa5
 8012ce2:	f002 f80b 	bl	8014cfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cea:	6879      	ldr	r1, [r7, #4]
 8012cec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012cf0:	440b      	add	r3, r1
 8012cf2:	009b      	lsls	r3, r3, #2
 8012cf4:	4413      	add	r3, r2
 8012cf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	f023 0307 	bic.w	r3, r3, #7
 8012cfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	f003 0307 	and.w	r3, r3, #7
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00a      	beq.n	8012d20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0e:	f383 8811 	msr	BASEPRI, r3
 8012d12:	f3bf 8f6f 	isb	sy
 8012d16:	f3bf 8f4f 	dsb	sy
 8012d1a:	617b      	str	r3, [r7, #20]
}
 8012d1c:	bf00      	nop
 8012d1e:	e7fe      	b.n	8012d1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d01f      	beq.n	8012d66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d26:	2300      	movs	r3, #0
 8012d28:	61fb      	str	r3, [r7, #28]
 8012d2a:	e012      	b.n	8012d52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d2c:	68ba      	ldr	r2, [r7, #8]
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	4413      	add	r3, r2
 8012d32:	7819      	ldrb	r1, [r3, #0]
 8012d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	4413      	add	r3, r2
 8012d3a:	3334      	adds	r3, #52	; 0x34
 8012d3c:	460a      	mov	r2, r1
 8012d3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d40:	68ba      	ldr	r2, [r7, #8]
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	4413      	add	r3, r2
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d006      	beq.n	8012d5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	61fb      	str	r3, [r7, #28]
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	2b0f      	cmp	r3, #15
 8012d56:	d9e9      	bls.n	8012d2c <prvInitialiseNewTask+0x64>
 8012d58:	e000      	b.n	8012d5c <prvInitialiseNewTask+0x94>
			{
				break;
 8012d5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	2200      	movs	r2, #0
 8012d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d64:	e003      	b.n	8012d6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d70:	2b37      	cmp	r3, #55	; 0x37
 8012d72:	d901      	bls.n	8012d78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012d74:	2337      	movs	r3, #55	; 0x37
 8012d76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d86:	2200      	movs	r2, #0
 8012d88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	3304      	adds	r3, #4
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7ff f882 	bl	8011e98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	3318      	adds	r3, #24
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff f87d 	bl	8011e98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012da2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012db2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db6:	2200      	movs	r2, #0
 8012db8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012dc2:	683a      	ldr	r2, [r7, #0]
 8012dc4:	68f9      	ldr	r1, [r7, #12]
 8012dc6:	69b8      	ldr	r0, [r7, #24]
 8012dc8:	f001 fb18 	bl	80143fc <pxPortInitialiseStack>
 8012dcc:	4602      	mov	r2, r0
 8012dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d002      	beq.n	8012dde <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012dde:	bf00      	nop
 8012de0:	3720      	adds	r7, #32
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
	...

08012de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012df0:	f001 fc30 	bl	8014654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012df4:	4b2d      	ldr	r3, [pc, #180]	; (8012eac <prvAddNewTaskToReadyList+0xc4>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	4a2c      	ldr	r2, [pc, #176]	; (8012eac <prvAddNewTaskToReadyList+0xc4>)
 8012dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012dfe:	4b2c      	ldr	r3, [pc, #176]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d109      	bne.n	8012e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012e06:	4a2a      	ldr	r2, [pc, #168]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012e0c:	4b27      	ldr	r3, [pc, #156]	; (8012eac <prvAddNewTaskToReadyList+0xc4>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d110      	bne.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012e14:	f000 fdce 	bl	80139b4 <prvInitialiseTaskLists>
 8012e18:	e00d      	b.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012e1a:	4b26      	ldr	r3, [pc, #152]	; (8012eb4 <prvAddNewTaskToReadyList+0xcc>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d109      	bne.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012e22:	4b23      	ldr	r3, [pc, #140]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d802      	bhi.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e30:	4a1f      	ldr	r2, [pc, #124]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e36:	4b20      	ldr	r3, [pc, #128]	; (8012eb8 <prvAddNewTaskToReadyList+0xd0>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	4a1e      	ldr	r2, [pc, #120]	; (8012eb8 <prvAddNewTaskToReadyList+0xd0>)
 8012e3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012e40:	4b1d      	ldr	r3, [pc, #116]	; (8012eb8 <prvAddNewTaskToReadyList+0xd0>)
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e4c:	4b1b      	ldr	r3, [pc, #108]	; (8012ebc <prvAddNewTaskToReadyList+0xd4>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d903      	bls.n	8012e5c <prvAddNewTaskToReadyList+0x74>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e58:	4a18      	ldr	r2, [pc, #96]	; (8012ebc <prvAddNewTaskToReadyList+0xd4>)
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e60:	4613      	mov	r3, r2
 8012e62:	009b      	lsls	r3, r3, #2
 8012e64:	4413      	add	r3, r2
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	4a15      	ldr	r2, [pc, #84]	; (8012ec0 <prvAddNewTaskToReadyList+0xd8>)
 8012e6a:	441a      	add	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	3304      	adds	r3, #4
 8012e70:	4619      	mov	r1, r3
 8012e72:	4610      	mov	r0, r2
 8012e74:	f7ff f81d 	bl	8011eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e78:	f001 fc1c 	bl	80146b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012e7c:	4b0d      	ldr	r3, [pc, #52]	; (8012eb4 <prvAddNewTaskToReadyList+0xcc>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00e      	beq.n	8012ea2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012e84:	4b0a      	ldr	r3, [pc, #40]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d207      	bcs.n	8012ea2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012e92:	4b0c      	ldr	r3, [pc, #48]	; (8012ec4 <prvAddNewTaskToReadyList+0xdc>)
 8012e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e98:	601a      	str	r2, [r3, #0]
 8012e9a:	f3bf 8f4f 	dsb	sy
 8012e9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ea2:	bf00      	nop
 8012ea4:	3708      	adds	r7, #8
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	2400180c 	.word	0x2400180c
 8012eb0:	24001338 	.word	0x24001338
 8012eb4:	24001818 	.word	0x24001818
 8012eb8:	24001828 	.word	0x24001828
 8012ebc:	24001814 	.word	0x24001814
 8012ec0:	2400133c 	.word	0x2400133c
 8012ec4:	e000ed04 	.word	0xe000ed04

08012ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d017      	beq.n	8012f0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012eda:	4b13      	ldr	r3, [pc, #76]	; (8012f28 <vTaskDelay+0x60>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00a      	beq.n	8012ef8 <vTaskDelay+0x30>
	__asm volatile
 8012ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	60bb      	str	r3, [r7, #8]
}
 8012ef4:	bf00      	nop
 8012ef6:	e7fe      	b.n	8012ef6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012ef8:	f000 f99a 	bl	8013230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012efc:	2100      	movs	r1, #0
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 feba 	bl	8013c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012f04:	f000 f9a2 	bl	801324c <xTaskResumeAll>
 8012f08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d107      	bne.n	8012f20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012f10:	4b06      	ldr	r3, [pc, #24]	; (8012f2c <vTaskDelay+0x64>)
 8012f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	f3bf 8f4f 	dsb	sy
 8012f1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f20:	bf00      	nop
 8012f22:	3710      	adds	r7, #16
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	24001834 	.word	0x24001834
 8012f2c:	e000ed04 	.word	0xe000ed04

08012f30 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012f38:	f001 fb8c 	bl	8014654 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d102      	bne.n	8012f48 <vTaskSuspend+0x18>
 8012f42:	4b30      	ldr	r3, [pc, #192]	; (8013004 <vTaskSuspend+0xd4>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	e000      	b.n	8012f4a <vTaskSuspend+0x1a>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7ff f80b 	bl	8011f6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d004      	beq.n	8012f68 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	3318      	adds	r3, #24
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff f802 	bl	8011f6c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	3304      	adds	r3, #4
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	4826      	ldr	r0, [pc, #152]	; (8013008 <vTaskSuspend+0xd8>)
 8012f70:	f7fe ff9f 	bl	8011eb2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d103      	bne.n	8012f88 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	2200      	movs	r2, #0
 8012f84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012f88:	f001 fb94 	bl	80146b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012f8c:	4b1f      	ldr	r3, [pc, #124]	; (801300c <vTaskSuspend+0xdc>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d005      	beq.n	8012fa0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012f94:	f001 fb5e 	bl	8014654 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012f98:	f000 fdaa 	bl	8013af0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012f9c:	f001 fb8a 	bl	80146b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012fa0:	4b18      	ldr	r3, [pc, #96]	; (8013004 <vTaskSuspend+0xd4>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	68fa      	ldr	r2, [r7, #12]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d127      	bne.n	8012ffa <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8012faa:	4b18      	ldr	r3, [pc, #96]	; (801300c <vTaskSuspend+0xdc>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d017      	beq.n	8012fe2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012fb2:	4b17      	ldr	r3, [pc, #92]	; (8013010 <vTaskSuspend+0xe0>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d00a      	beq.n	8012fd0 <vTaskSuspend+0xa0>
	__asm volatile
 8012fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbe:	f383 8811 	msr	BASEPRI, r3
 8012fc2:	f3bf 8f6f 	isb	sy
 8012fc6:	f3bf 8f4f 	dsb	sy
 8012fca:	60bb      	str	r3, [r7, #8]
}
 8012fcc:	bf00      	nop
 8012fce:	e7fe      	b.n	8012fce <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8012fd0:	4b10      	ldr	r3, [pc, #64]	; (8013014 <vTaskSuspend+0xe4>)
 8012fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd6:	601a      	str	r2, [r3, #0]
 8012fd8:	f3bf 8f4f 	dsb	sy
 8012fdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012fe0:	e00b      	b.n	8012ffa <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012fe2:	4b09      	ldr	r3, [pc, #36]	; (8013008 <vTaskSuspend+0xd8>)
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	4b0c      	ldr	r3, [pc, #48]	; (8013018 <vTaskSuspend+0xe8>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d103      	bne.n	8012ff6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8012fee:	4b05      	ldr	r3, [pc, #20]	; (8013004 <vTaskSuspend+0xd4>)
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	601a      	str	r2, [r3, #0]
	}
 8012ff4:	e001      	b.n	8012ffa <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8012ff6:	f000 fa91 	bl	801351c <vTaskSwitchContext>
	}
 8012ffa:	bf00      	nop
 8012ffc:	3710      	adds	r7, #16
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	24001338 	.word	0x24001338
 8013008:	240017f8 	.word	0x240017f8
 801300c:	24001818 	.word	0x24001818
 8013010:	24001834 	.word	0x24001834
 8013014:	e000ed04 	.word	0xe000ed04
 8013018:	2400180c 	.word	0x2400180c

0801301c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801301c:	b480      	push	{r7}
 801301e:	b087      	sub	sp, #28
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013024:	2300      	movs	r3, #0
 8013026:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d10a      	bne.n	8013048 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013036:	f383 8811 	msr	BASEPRI, r3
 801303a:	f3bf 8f6f 	isb	sy
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	60fb      	str	r3, [r7, #12]
}
 8013044:	bf00      	nop
 8013046:	e7fe      	b.n	8013046 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	695b      	ldr	r3, [r3, #20]
 801304c:	4a0a      	ldr	r2, [pc, #40]	; (8013078 <prvTaskIsTaskSuspended+0x5c>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d10a      	bne.n	8013068 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013056:	4a09      	ldr	r2, [pc, #36]	; (801307c <prvTaskIsTaskSuspended+0x60>)
 8013058:	4293      	cmp	r3, r2
 801305a:	d005      	beq.n	8013068 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013060:	2b00      	cmp	r3, #0
 8013062:	d101      	bne.n	8013068 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013064:	2301      	movs	r3, #1
 8013066:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013068:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801306a:	4618      	mov	r0, r3
 801306c:	371c      	adds	r7, #28
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop
 8013078:	240017f8 	.word	0x240017f8
 801307c:	240017cc 	.word	0x240017cc

08013080 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8013080:	b580      	push	{r7, lr}
 8013082:	b08a      	sub	sp, #40	; 0x28
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8013088:	2300      	movs	r3, #0
 801308a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d10a      	bne.n	80130ac <xTaskResumeFromISR+0x2c>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	61bb      	str	r3, [r7, #24]
}
 80130a8:	bf00      	nop
 80130aa:	e7fe      	b.n	80130aa <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130ac:	f001 fbb4 	bl	8014818 <vPortValidateInterruptPriority>
	__asm volatile
 80130b0:	f3ef 8211 	mrs	r2, BASEPRI
 80130b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	617a      	str	r2, [r7, #20]
 80130c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80130c8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130ca:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80130cc:	6a38      	ldr	r0, [r7, #32]
 80130ce:	f7ff ffa5 	bl	801301c <prvTaskIsTaskSuspended>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d030      	beq.n	801313a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130d8:	4b1d      	ldr	r3, [pc, #116]	; (8013150 <xTaskResumeFromISR+0xd0>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d126      	bne.n	801312e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e4:	4b1b      	ldr	r3, [pc, #108]	; (8013154 <xTaskResumeFromISR+0xd4>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d301      	bcc.n	80130f2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80130ee:	2301      	movs	r3, #1
 80130f0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130f2:	6a3b      	ldr	r3, [r7, #32]
 80130f4:	3304      	adds	r3, #4
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fe ff38 	bl	8011f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80130fc:	6a3b      	ldr	r3, [r7, #32]
 80130fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013100:	4b15      	ldr	r3, [pc, #84]	; (8013158 <xTaskResumeFromISR+0xd8>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	429a      	cmp	r2, r3
 8013106:	d903      	bls.n	8013110 <xTaskResumeFromISR+0x90>
 8013108:	6a3b      	ldr	r3, [r7, #32]
 801310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801310c:	4a12      	ldr	r2, [pc, #72]	; (8013158 <xTaskResumeFromISR+0xd8>)
 801310e:	6013      	str	r3, [r2, #0]
 8013110:	6a3b      	ldr	r3, [r7, #32]
 8013112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013114:	4613      	mov	r3, r2
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	4413      	add	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	4a0f      	ldr	r2, [pc, #60]	; (801315c <xTaskResumeFromISR+0xdc>)
 801311e:	441a      	add	r2, r3
 8013120:	6a3b      	ldr	r3, [r7, #32]
 8013122:	3304      	adds	r3, #4
 8013124:	4619      	mov	r1, r3
 8013126:	4610      	mov	r0, r2
 8013128:	f7fe fec3 	bl	8011eb2 <vListInsertEnd>
 801312c:	e005      	b.n	801313a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801312e:	6a3b      	ldr	r3, [r7, #32]
 8013130:	3318      	adds	r3, #24
 8013132:	4619      	mov	r1, r3
 8013134:	480a      	ldr	r0, [pc, #40]	; (8013160 <xTaskResumeFromISR+0xe0>)
 8013136:	f7fe febc 	bl	8011eb2 <vListInsertEnd>
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	f383 8811 	msr	BASEPRI, r3
}
 8013144:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8013146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013148:	4618      	mov	r0, r3
 801314a:	3728      	adds	r7, #40	; 0x28
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	24001834 	.word	0x24001834
 8013154:	24001338 	.word	0x24001338
 8013158:	24001814 	.word	0x24001814
 801315c:	2400133c 	.word	0x2400133c
 8013160:	240017cc 	.word	0x240017cc

08013164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b08a      	sub	sp, #40	; 0x28
 8013168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801316a:	2300      	movs	r3, #0
 801316c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801316e:	2300      	movs	r3, #0
 8013170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013172:	463a      	mov	r2, r7
 8013174:	1d39      	adds	r1, r7, #4
 8013176:	f107 0308 	add.w	r3, r7, #8
 801317a:	4618      	mov	r0, r3
 801317c:	f7fe fc4a 	bl	8011a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013180:	6839      	ldr	r1, [r7, #0]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	68ba      	ldr	r2, [r7, #8]
 8013186:	9202      	str	r2, [sp, #8]
 8013188:	9301      	str	r3, [sp, #4]
 801318a:	2300      	movs	r3, #0
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	2300      	movs	r3, #0
 8013190:	460a      	mov	r2, r1
 8013192:	4921      	ldr	r1, [pc, #132]	; (8013218 <vTaskStartScheduler+0xb4>)
 8013194:	4821      	ldr	r0, [pc, #132]	; (801321c <vTaskStartScheduler+0xb8>)
 8013196:	f7ff fcf5 	bl	8012b84 <xTaskCreateStatic>
 801319a:	4603      	mov	r3, r0
 801319c:	4a20      	ldr	r2, [pc, #128]	; (8013220 <vTaskStartScheduler+0xbc>)
 801319e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80131a0:	4b1f      	ldr	r3, [pc, #124]	; (8013220 <vTaskStartScheduler+0xbc>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d002      	beq.n	80131ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80131a8:	2301      	movs	r3, #1
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	e001      	b.n	80131b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80131ae:	2300      	movs	r3, #0
 80131b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d102      	bne.n	80131be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80131b8:	f000 fdb2 	bl	8013d20 <xTimerCreateTimerTask>
 80131bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d116      	bne.n	80131f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80131c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c8:	f383 8811 	msr	BASEPRI, r3
 80131cc:	f3bf 8f6f 	isb	sy
 80131d0:	f3bf 8f4f 	dsb	sy
 80131d4:	613b      	str	r3, [r7, #16]
}
 80131d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80131d8:	4b12      	ldr	r3, [pc, #72]	; (8013224 <vTaskStartScheduler+0xc0>)
 80131da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80131e0:	4b11      	ldr	r3, [pc, #68]	; (8013228 <vTaskStartScheduler+0xc4>)
 80131e2:	2201      	movs	r2, #1
 80131e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80131e6:	4b11      	ldr	r3, [pc, #68]	; (801322c <vTaskStartScheduler+0xc8>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80131ec:	f001 f990 	bl	8014510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80131f0:	e00e      	b.n	8013210 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131f8:	d10a      	bne.n	8013210 <vTaskStartScheduler+0xac>
	__asm volatile
 80131fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fe:	f383 8811 	msr	BASEPRI, r3
 8013202:	f3bf 8f6f 	isb	sy
 8013206:	f3bf 8f4f 	dsb	sy
 801320a:	60fb      	str	r3, [r7, #12]
}
 801320c:	bf00      	nop
 801320e:	e7fe      	b.n	801320e <vTaskStartScheduler+0xaa>
}
 8013210:	bf00      	nop
 8013212:	3718      	adds	r7, #24
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	08015fa0 	.word	0x08015fa0
 801321c:	08013985 	.word	0x08013985
 8013220:	24001830 	.word	0x24001830
 8013224:	2400182c 	.word	0x2400182c
 8013228:	24001818 	.word	0x24001818
 801322c:	24001810 	.word	0x24001810

08013230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013230:	b480      	push	{r7}
 8013232:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013234:	4b04      	ldr	r3, [pc, #16]	; (8013248 <vTaskSuspendAll+0x18>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	3301      	adds	r3, #1
 801323a:	4a03      	ldr	r2, [pc, #12]	; (8013248 <vTaskSuspendAll+0x18>)
 801323c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801323e:	bf00      	nop
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr
 8013248:	24001834 	.word	0x24001834

0801324c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013256:	2300      	movs	r3, #0
 8013258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801325a:	4b42      	ldr	r3, [pc, #264]	; (8013364 <xTaskResumeAll+0x118>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d10a      	bne.n	8013278 <xTaskResumeAll+0x2c>
	__asm volatile
 8013262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013266:	f383 8811 	msr	BASEPRI, r3
 801326a:	f3bf 8f6f 	isb	sy
 801326e:	f3bf 8f4f 	dsb	sy
 8013272:	603b      	str	r3, [r7, #0]
}
 8013274:	bf00      	nop
 8013276:	e7fe      	b.n	8013276 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013278:	f001 f9ec 	bl	8014654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801327c:	4b39      	ldr	r3, [pc, #228]	; (8013364 <xTaskResumeAll+0x118>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	3b01      	subs	r3, #1
 8013282:	4a38      	ldr	r2, [pc, #224]	; (8013364 <xTaskResumeAll+0x118>)
 8013284:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013286:	4b37      	ldr	r3, [pc, #220]	; (8013364 <xTaskResumeAll+0x118>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d162      	bne.n	8013354 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801328e:	4b36      	ldr	r3, [pc, #216]	; (8013368 <xTaskResumeAll+0x11c>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d05e      	beq.n	8013354 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013296:	e02f      	b.n	80132f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013298:	4b34      	ldr	r3, [pc, #208]	; (801336c <xTaskResumeAll+0x120>)
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	3318      	adds	r3, #24
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7fe fe61 	bl	8011f6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	3304      	adds	r3, #4
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fe fe5c 	bl	8011f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132b8:	4b2d      	ldr	r3, [pc, #180]	; (8013370 <xTaskResumeAll+0x124>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	429a      	cmp	r2, r3
 80132be:	d903      	bls.n	80132c8 <xTaskResumeAll+0x7c>
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132c4:	4a2a      	ldr	r2, [pc, #168]	; (8013370 <xTaskResumeAll+0x124>)
 80132c6:	6013      	str	r3, [r2, #0]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132cc:	4613      	mov	r3, r2
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	4413      	add	r3, r2
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	4a27      	ldr	r2, [pc, #156]	; (8013374 <xTaskResumeAll+0x128>)
 80132d6:	441a      	add	r2, r3
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	3304      	adds	r3, #4
 80132dc:	4619      	mov	r1, r3
 80132de:	4610      	mov	r0, r2
 80132e0:	f7fe fde7 	bl	8011eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132e8:	4b23      	ldr	r3, [pc, #140]	; (8013378 <xTaskResumeAll+0x12c>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d302      	bcc.n	80132f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80132f2:	4b22      	ldr	r3, [pc, #136]	; (801337c <xTaskResumeAll+0x130>)
 80132f4:	2201      	movs	r2, #1
 80132f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132f8:	4b1c      	ldr	r3, [pc, #112]	; (801336c <xTaskResumeAll+0x120>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d1cb      	bne.n	8013298 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d001      	beq.n	801330a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013306:	f000 fbf3 	bl	8013af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801330a:	4b1d      	ldr	r3, [pc, #116]	; (8013380 <xTaskResumeAll+0x134>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d010      	beq.n	8013338 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013316:	f000 f847 	bl	80133a8 <xTaskIncrementTick>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d002      	beq.n	8013326 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013320:	4b16      	ldr	r3, [pc, #88]	; (801337c <xTaskResumeAll+0x130>)
 8013322:	2201      	movs	r2, #1
 8013324:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3b01      	subs	r3, #1
 801332a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d1f1      	bne.n	8013316 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013332:	4b13      	ldr	r3, [pc, #76]	; (8013380 <xTaskResumeAll+0x134>)
 8013334:	2200      	movs	r2, #0
 8013336:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013338:	4b10      	ldr	r3, [pc, #64]	; (801337c <xTaskResumeAll+0x130>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d009      	beq.n	8013354 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013340:	2301      	movs	r3, #1
 8013342:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013344:	4b0f      	ldr	r3, [pc, #60]	; (8013384 <xTaskResumeAll+0x138>)
 8013346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801334a:	601a      	str	r2, [r3, #0]
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013354:	f001 f9ae 	bl	80146b4 <vPortExitCritical>

	return xAlreadyYielded;
 8013358:	68bb      	ldr	r3, [r7, #8]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	24001834 	.word	0x24001834
 8013368:	2400180c 	.word	0x2400180c
 801336c:	240017cc 	.word	0x240017cc
 8013370:	24001814 	.word	0x24001814
 8013374:	2400133c 	.word	0x2400133c
 8013378:	24001338 	.word	0x24001338
 801337c:	24001820 	.word	0x24001820
 8013380:	2400181c 	.word	0x2400181c
 8013384:	e000ed04 	.word	0xe000ed04

08013388 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801338e:	4b05      	ldr	r3, [pc, #20]	; (80133a4 <xTaskGetTickCount+0x1c>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013394:	687b      	ldr	r3, [r7, #4]
}
 8013396:	4618      	mov	r0, r3
 8013398:	370c      	adds	r7, #12
 801339a:	46bd      	mov	sp, r7
 801339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop
 80133a4:	24001810 	.word	0x24001810

080133a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80133ae:	2300      	movs	r3, #0
 80133b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133b2:	4b4f      	ldr	r3, [pc, #316]	; (80134f0 <xTaskIncrementTick+0x148>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f040 808f 	bne.w	80134da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80133bc:	4b4d      	ldr	r3, [pc, #308]	; (80134f4 <xTaskIncrementTick+0x14c>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	3301      	adds	r3, #1
 80133c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80133c4:	4a4b      	ldr	r2, [pc, #300]	; (80134f4 <xTaskIncrementTick+0x14c>)
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d120      	bne.n	8013412 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80133d0:	4b49      	ldr	r3, [pc, #292]	; (80134f8 <xTaskIncrementTick+0x150>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00a      	beq.n	80133f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80133da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133de:	f383 8811 	msr	BASEPRI, r3
 80133e2:	f3bf 8f6f 	isb	sy
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	603b      	str	r3, [r7, #0]
}
 80133ec:	bf00      	nop
 80133ee:	e7fe      	b.n	80133ee <xTaskIncrementTick+0x46>
 80133f0:	4b41      	ldr	r3, [pc, #260]	; (80134f8 <xTaskIncrementTick+0x150>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	60fb      	str	r3, [r7, #12]
 80133f6:	4b41      	ldr	r3, [pc, #260]	; (80134fc <xTaskIncrementTick+0x154>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	4a3f      	ldr	r2, [pc, #252]	; (80134f8 <xTaskIncrementTick+0x150>)
 80133fc:	6013      	str	r3, [r2, #0]
 80133fe:	4a3f      	ldr	r2, [pc, #252]	; (80134fc <xTaskIncrementTick+0x154>)
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	6013      	str	r3, [r2, #0]
 8013404:	4b3e      	ldr	r3, [pc, #248]	; (8013500 <xTaskIncrementTick+0x158>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	3301      	adds	r3, #1
 801340a:	4a3d      	ldr	r2, [pc, #244]	; (8013500 <xTaskIncrementTick+0x158>)
 801340c:	6013      	str	r3, [r2, #0]
 801340e:	f000 fb6f 	bl	8013af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013412:	4b3c      	ldr	r3, [pc, #240]	; (8013504 <xTaskIncrementTick+0x15c>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	693a      	ldr	r2, [r7, #16]
 8013418:	429a      	cmp	r2, r3
 801341a:	d349      	bcc.n	80134b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801341c:	4b36      	ldr	r3, [pc, #216]	; (80134f8 <xTaskIncrementTick+0x150>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d104      	bne.n	8013430 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013426:	4b37      	ldr	r3, [pc, #220]	; (8013504 <xTaskIncrementTick+0x15c>)
 8013428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801342c:	601a      	str	r2, [r3, #0]
					break;
 801342e:	e03f      	b.n	80134b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013430:	4b31      	ldr	r3, [pc, #196]	; (80134f8 <xTaskIncrementTick+0x150>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013440:	693a      	ldr	r2, [r7, #16]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	429a      	cmp	r2, r3
 8013446:	d203      	bcs.n	8013450 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013448:	4a2e      	ldr	r2, [pc, #184]	; (8013504 <xTaskIncrementTick+0x15c>)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801344e:	e02f      	b.n	80134b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	3304      	adds	r3, #4
 8013454:	4618      	mov	r0, r3
 8013456:	f7fe fd89 	bl	8011f6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801345e:	2b00      	cmp	r3, #0
 8013460:	d004      	beq.n	801346c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	3318      	adds	r3, #24
 8013466:	4618      	mov	r0, r3
 8013468:	f7fe fd80 	bl	8011f6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013470:	4b25      	ldr	r3, [pc, #148]	; (8013508 <xTaskIncrementTick+0x160>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	429a      	cmp	r2, r3
 8013476:	d903      	bls.n	8013480 <xTaskIncrementTick+0xd8>
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347c:	4a22      	ldr	r2, [pc, #136]	; (8013508 <xTaskIncrementTick+0x160>)
 801347e:	6013      	str	r3, [r2, #0]
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013484:	4613      	mov	r3, r2
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	4413      	add	r3, r2
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	4a1f      	ldr	r2, [pc, #124]	; (801350c <xTaskIncrementTick+0x164>)
 801348e:	441a      	add	r2, r3
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	3304      	adds	r3, #4
 8013494:	4619      	mov	r1, r3
 8013496:	4610      	mov	r0, r2
 8013498:	f7fe fd0b 	bl	8011eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a0:	4b1b      	ldr	r3, [pc, #108]	; (8013510 <xTaskIncrementTick+0x168>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d3b8      	bcc.n	801341c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80134aa:	2301      	movs	r3, #1
 80134ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134ae:	e7b5      	b.n	801341c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80134b0:	4b17      	ldr	r3, [pc, #92]	; (8013510 <xTaskIncrementTick+0x168>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b6:	4915      	ldr	r1, [pc, #84]	; (801350c <xTaskIncrementTick+0x164>)
 80134b8:	4613      	mov	r3, r2
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	4413      	add	r3, r2
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	440b      	add	r3, r1
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	d901      	bls.n	80134cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80134c8:	2301      	movs	r3, #1
 80134ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80134cc:	4b11      	ldr	r3, [pc, #68]	; (8013514 <xTaskIncrementTick+0x16c>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d007      	beq.n	80134e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80134d4:	2301      	movs	r3, #1
 80134d6:	617b      	str	r3, [r7, #20]
 80134d8:	e004      	b.n	80134e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80134da:	4b0f      	ldr	r3, [pc, #60]	; (8013518 <xTaskIncrementTick+0x170>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	3301      	adds	r3, #1
 80134e0:	4a0d      	ldr	r2, [pc, #52]	; (8013518 <xTaskIncrementTick+0x170>)
 80134e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80134e4:	697b      	ldr	r3, [r7, #20]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3718      	adds	r7, #24
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	24001834 	.word	0x24001834
 80134f4:	24001810 	.word	0x24001810
 80134f8:	240017c4 	.word	0x240017c4
 80134fc:	240017c8 	.word	0x240017c8
 8013500:	24001824 	.word	0x24001824
 8013504:	2400182c 	.word	0x2400182c
 8013508:	24001814 	.word	0x24001814
 801350c:	2400133c 	.word	0x2400133c
 8013510:	24001338 	.word	0x24001338
 8013514:	24001820 	.word	0x24001820
 8013518:	2400181c 	.word	0x2400181c

0801351c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801351c:	b480      	push	{r7}
 801351e:	b085      	sub	sp, #20
 8013520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013522:	4b28      	ldr	r3, [pc, #160]	; (80135c4 <vTaskSwitchContext+0xa8>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d003      	beq.n	8013532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801352a:	4b27      	ldr	r3, [pc, #156]	; (80135c8 <vTaskSwitchContext+0xac>)
 801352c:	2201      	movs	r2, #1
 801352e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013530:	e041      	b.n	80135b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013532:	4b25      	ldr	r3, [pc, #148]	; (80135c8 <vTaskSwitchContext+0xac>)
 8013534:	2200      	movs	r2, #0
 8013536:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013538:	4b24      	ldr	r3, [pc, #144]	; (80135cc <vTaskSwitchContext+0xb0>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	60fb      	str	r3, [r7, #12]
 801353e:	e010      	b.n	8013562 <vTaskSwitchContext+0x46>
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d10a      	bne.n	801355c <vTaskSwitchContext+0x40>
	__asm volatile
 8013546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354a:	f383 8811 	msr	BASEPRI, r3
 801354e:	f3bf 8f6f 	isb	sy
 8013552:	f3bf 8f4f 	dsb	sy
 8013556:	607b      	str	r3, [r7, #4]
}
 8013558:	bf00      	nop
 801355a:	e7fe      	b.n	801355a <vTaskSwitchContext+0x3e>
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	3b01      	subs	r3, #1
 8013560:	60fb      	str	r3, [r7, #12]
 8013562:	491b      	ldr	r1, [pc, #108]	; (80135d0 <vTaskSwitchContext+0xb4>)
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	4613      	mov	r3, r2
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	4413      	add	r3, r2
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	440b      	add	r3, r1
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d0e4      	beq.n	8013540 <vTaskSwitchContext+0x24>
 8013576:	68fa      	ldr	r2, [r7, #12]
 8013578:	4613      	mov	r3, r2
 801357a:	009b      	lsls	r3, r3, #2
 801357c:	4413      	add	r3, r2
 801357e:	009b      	lsls	r3, r3, #2
 8013580:	4a13      	ldr	r2, [pc, #76]	; (80135d0 <vTaskSwitchContext+0xb4>)
 8013582:	4413      	add	r3, r2
 8013584:	60bb      	str	r3, [r7, #8]
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	685a      	ldr	r2, [r3, #4]
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	605a      	str	r2, [r3, #4]
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	685a      	ldr	r2, [r3, #4]
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	3308      	adds	r3, #8
 8013598:	429a      	cmp	r2, r3
 801359a:	d104      	bne.n	80135a6 <vTaskSwitchContext+0x8a>
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	685a      	ldr	r2, [r3, #4]
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	605a      	str	r2, [r3, #4]
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	4a09      	ldr	r2, [pc, #36]	; (80135d4 <vTaskSwitchContext+0xb8>)
 80135ae:	6013      	str	r3, [r2, #0]
 80135b0:	4a06      	ldr	r2, [pc, #24]	; (80135cc <vTaskSwitchContext+0xb0>)
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6013      	str	r3, [r2, #0]
}
 80135b6:	bf00      	nop
 80135b8:	3714      	adds	r7, #20
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	24001834 	.word	0x24001834
 80135c8:	24001820 	.word	0x24001820
 80135cc:	24001814 	.word	0x24001814
 80135d0:	2400133c 	.word	0x2400133c
 80135d4:	24001338 	.word	0x24001338

080135d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10a      	bne.n	80135fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	60fb      	str	r3, [r7, #12]
}
 80135fa:	bf00      	nop
 80135fc:	e7fe      	b.n	80135fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80135fe:	4b07      	ldr	r3, [pc, #28]	; (801361c <vTaskPlaceOnEventList+0x44>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	3318      	adds	r3, #24
 8013604:	4619      	mov	r1, r3
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7fe fc77 	bl	8011efa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801360c:	2101      	movs	r1, #1
 801360e:	6838      	ldr	r0, [r7, #0]
 8013610:	f000 fb32 	bl	8013c78 <prvAddCurrentTaskToDelayedList>
}
 8013614:	bf00      	nop
 8013616:	3710      	adds	r7, #16
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	24001338 	.word	0x24001338

08013620 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b086      	sub	sp, #24
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d10a      	bne.n	8013648 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8013632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013636:	f383 8811 	msr	BASEPRI, r3
 801363a:	f3bf 8f6f 	isb	sy
 801363e:	f3bf 8f4f 	dsb	sy
 8013642:	617b      	str	r3, [r7, #20]
}
 8013644:	bf00      	nop
 8013646:	e7fe      	b.n	8013646 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013648:	4b11      	ldr	r3, [pc, #68]	; (8013690 <vTaskPlaceOnUnorderedEventList+0x70>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d10a      	bne.n	8013666 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013654:	f383 8811 	msr	BASEPRI, r3
 8013658:	f3bf 8f6f 	isb	sy
 801365c:	f3bf 8f4f 	dsb	sy
 8013660:	613b      	str	r3, [r7, #16]
}
 8013662:	bf00      	nop
 8013664:	e7fe      	b.n	8013664 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013666:	4b0b      	ldr	r3, [pc, #44]	; (8013694 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	68ba      	ldr	r2, [r7, #8]
 801366c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013670:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013672:	4b08      	ldr	r3, [pc, #32]	; (8013694 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	3318      	adds	r3, #24
 8013678:	4619      	mov	r1, r3
 801367a:	68f8      	ldr	r0, [r7, #12]
 801367c:	f7fe fc19 	bl	8011eb2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013680:	2101      	movs	r1, #1
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f000 faf8 	bl	8013c78 <prvAddCurrentTaskToDelayedList>
}
 8013688:	bf00      	nop
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	24001834 	.word	0x24001834
 8013694:	24001338 	.word	0x24001338

08013698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d10a      	bne.n	80136c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80136aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ae:	f383 8811 	msr	BASEPRI, r3
 80136b2:	f3bf 8f6f 	isb	sy
 80136b6:	f3bf 8f4f 	dsb	sy
 80136ba:	617b      	str	r3, [r7, #20]
}
 80136bc:	bf00      	nop
 80136be:	e7fe      	b.n	80136be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136c0:	4b0a      	ldr	r3, [pc, #40]	; (80136ec <vTaskPlaceOnEventListRestricted+0x54>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	3318      	adds	r3, #24
 80136c6:	4619      	mov	r1, r3
 80136c8:	68f8      	ldr	r0, [r7, #12]
 80136ca:	f7fe fbf2 	bl	8011eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d002      	beq.n	80136da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80136d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80136da:	6879      	ldr	r1, [r7, #4]
 80136dc:	68b8      	ldr	r0, [r7, #8]
 80136de:	f000 facb 	bl	8013c78 <prvAddCurrentTaskToDelayedList>
	}
 80136e2:	bf00      	nop
 80136e4:	3718      	adds	r7, #24
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	24001338 	.word	0x24001338

080136f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b086      	sub	sp, #24
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	68db      	ldr	r3, [r3, #12]
 80136fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d10a      	bne.n	801371c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370a:	f383 8811 	msr	BASEPRI, r3
 801370e:	f3bf 8f6f 	isb	sy
 8013712:	f3bf 8f4f 	dsb	sy
 8013716:	60fb      	str	r3, [r7, #12]
}
 8013718:	bf00      	nop
 801371a:	e7fe      	b.n	801371a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	3318      	adds	r3, #24
 8013720:	4618      	mov	r0, r3
 8013722:	f7fe fc23 	bl	8011f6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013726:	4b1e      	ldr	r3, [pc, #120]	; (80137a0 <xTaskRemoveFromEventList+0xb0>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d11d      	bne.n	801376a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	3304      	adds	r3, #4
 8013732:	4618      	mov	r0, r3
 8013734:	f7fe fc1a 	bl	8011f6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801373c:	4b19      	ldr	r3, [pc, #100]	; (80137a4 <xTaskRemoveFromEventList+0xb4>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	429a      	cmp	r2, r3
 8013742:	d903      	bls.n	801374c <xTaskRemoveFromEventList+0x5c>
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013748:	4a16      	ldr	r2, [pc, #88]	; (80137a4 <xTaskRemoveFromEventList+0xb4>)
 801374a:	6013      	str	r3, [r2, #0]
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013750:	4613      	mov	r3, r2
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	4413      	add	r3, r2
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	4a13      	ldr	r2, [pc, #76]	; (80137a8 <xTaskRemoveFromEventList+0xb8>)
 801375a:	441a      	add	r2, r3
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	3304      	adds	r3, #4
 8013760:	4619      	mov	r1, r3
 8013762:	4610      	mov	r0, r2
 8013764:	f7fe fba5 	bl	8011eb2 <vListInsertEnd>
 8013768:	e005      	b.n	8013776 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	3318      	adds	r3, #24
 801376e:	4619      	mov	r1, r3
 8013770:	480e      	ldr	r0, [pc, #56]	; (80137ac <xTaskRemoveFromEventList+0xbc>)
 8013772:	f7fe fb9e 	bl	8011eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801377a:	4b0d      	ldr	r3, [pc, #52]	; (80137b0 <xTaskRemoveFromEventList+0xc0>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013780:	429a      	cmp	r2, r3
 8013782:	d905      	bls.n	8013790 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013784:	2301      	movs	r3, #1
 8013786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013788:	4b0a      	ldr	r3, [pc, #40]	; (80137b4 <xTaskRemoveFromEventList+0xc4>)
 801378a:	2201      	movs	r2, #1
 801378c:	601a      	str	r2, [r3, #0]
 801378e:	e001      	b.n	8013794 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013790:	2300      	movs	r3, #0
 8013792:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013794:	697b      	ldr	r3, [r7, #20]
}
 8013796:	4618      	mov	r0, r3
 8013798:	3718      	adds	r7, #24
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	24001834 	.word	0x24001834
 80137a4:	24001814 	.word	0x24001814
 80137a8:	2400133c 	.word	0x2400133c
 80137ac:	240017cc 	.word	0x240017cc
 80137b0:	24001338 	.word	0x24001338
 80137b4:	24001820 	.word	0x24001820

080137b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b086      	sub	sp, #24
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80137c2:	4b29      	ldr	r3, [pc, #164]	; (8013868 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d10a      	bne.n	80137e0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80137ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	613b      	str	r3, [r7, #16]
}
 80137dc:	bf00      	nop
 80137de:	e7fe      	b.n	80137de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10a      	bne.n	801380c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80137f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fa:	f383 8811 	msr	BASEPRI, r3
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	f3bf 8f4f 	dsb	sy
 8013806:	60fb      	str	r3, [r7, #12]
}
 8013808:	bf00      	nop
 801380a:	e7fe      	b.n	801380a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7fe fbad 	bl	8011f6c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	3304      	adds	r3, #4
 8013816:	4618      	mov	r0, r3
 8013818:	f7fe fba8 	bl	8011f6c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013820:	4b12      	ldr	r3, [pc, #72]	; (801386c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	429a      	cmp	r2, r3
 8013826:	d903      	bls.n	8013830 <vTaskRemoveFromUnorderedEventList+0x78>
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801382c:	4a0f      	ldr	r2, [pc, #60]	; (801386c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801382e:	6013      	str	r3, [r2, #0]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013834:	4613      	mov	r3, r2
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	4413      	add	r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	4a0c      	ldr	r2, [pc, #48]	; (8013870 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801383e:	441a      	add	r2, r3
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	3304      	adds	r3, #4
 8013844:	4619      	mov	r1, r3
 8013846:	4610      	mov	r0, r2
 8013848:	f7fe fb33 	bl	8011eb2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013850:	4b08      	ldr	r3, [pc, #32]	; (8013874 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013856:	429a      	cmp	r2, r3
 8013858:	d902      	bls.n	8013860 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801385a:	4b07      	ldr	r3, [pc, #28]	; (8013878 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801385c:	2201      	movs	r2, #1
 801385e:	601a      	str	r2, [r3, #0]
	}
}
 8013860:	bf00      	nop
 8013862:	3718      	adds	r7, #24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	24001834 	.word	0x24001834
 801386c:	24001814 	.word	0x24001814
 8013870:	2400133c 	.word	0x2400133c
 8013874:	24001338 	.word	0x24001338
 8013878:	24001820 	.word	0x24001820

0801387c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801387c:	b480      	push	{r7}
 801387e:	b083      	sub	sp, #12
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013884:	4b06      	ldr	r3, [pc, #24]	; (80138a0 <vTaskInternalSetTimeOutState+0x24>)
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801388c:	4b05      	ldr	r3, [pc, #20]	; (80138a4 <vTaskInternalSetTimeOutState+0x28>)
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	605a      	str	r2, [r3, #4]
}
 8013894:	bf00      	nop
 8013896:	370c      	adds	r7, #12
 8013898:	46bd      	mov	sp, r7
 801389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389e:	4770      	bx	lr
 80138a0:	24001824 	.word	0x24001824
 80138a4:	24001810 	.word	0x24001810

080138a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b088      	sub	sp, #32
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d10a      	bne.n	80138ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	613b      	str	r3, [r7, #16]
}
 80138ca:	bf00      	nop
 80138cc:	e7fe      	b.n	80138cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d10a      	bne.n	80138ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80138d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d8:	f383 8811 	msr	BASEPRI, r3
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	60fb      	str	r3, [r7, #12]
}
 80138e6:	bf00      	nop
 80138e8:	e7fe      	b.n	80138e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80138ea:	f000 feb3 	bl	8014654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80138ee:	4b1d      	ldr	r3, [pc, #116]	; (8013964 <xTaskCheckForTimeOut+0xbc>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	69ba      	ldr	r2, [r7, #24]
 80138fa:	1ad3      	subs	r3, r2, r3
 80138fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013906:	d102      	bne.n	801390e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013908:	2300      	movs	r3, #0
 801390a:	61fb      	str	r3, [r7, #28]
 801390c:	e023      	b.n	8013956 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681a      	ldr	r2, [r3, #0]
 8013912:	4b15      	ldr	r3, [pc, #84]	; (8013968 <xTaskCheckForTimeOut+0xc0>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	429a      	cmp	r2, r3
 8013918:	d007      	beq.n	801392a <xTaskCheckForTimeOut+0x82>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	685b      	ldr	r3, [r3, #4]
 801391e:	69ba      	ldr	r2, [r7, #24]
 8013920:	429a      	cmp	r2, r3
 8013922:	d302      	bcc.n	801392a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013924:	2301      	movs	r3, #1
 8013926:	61fb      	str	r3, [r7, #28]
 8013928:	e015      	b.n	8013956 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	697a      	ldr	r2, [r7, #20]
 8013930:	429a      	cmp	r2, r3
 8013932:	d20b      	bcs.n	801394c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	1ad2      	subs	r2, r2, r3
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7ff ff9b 	bl	801387c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013946:	2300      	movs	r3, #0
 8013948:	61fb      	str	r3, [r7, #28]
 801394a:	e004      	b.n	8013956 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	2200      	movs	r2, #0
 8013950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013952:	2301      	movs	r3, #1
 8013954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013956:	f000 fead 	bl	80146b4 <vPortExitCritical>

	return xReturn;
 801395a:	69fb      	ldr	r3, [r7, #28]
}
 801395c:	4618      	mov	r0, r3
 801395e:	3720      	adds	r7, #32
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}
 8013964:	24001810 	.word	0x24001810
 8013968:	24001824 	.word	0x24001824

0801396c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801396c:	b480      	push	{r7}
 801396e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013970:	4b03      	ldr	r3, [pc, #12]	; (8013980 <vTaskMissedYield+0x14>)
 8013972:	2201      	movs	r2, #1
 8013974:	601a      	str	r2, [r3, #0]
}
 8013976:	bf00      	nop
 8013978:	46bd      	mov	sp, r7
 801397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397e:	4770      	bx	lr
 8013980:	24001820 	.word	0x24001820

08013984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801398c:	f000 f852 	bl	8013a34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013990:	4b06      	ldr	r3, [pc, #24]	; (80139ac <prvIdleTask+0x28>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d9f9      	bls.n	801398c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013998:	4b05      	ldr	r3, [pc, #20]	; (80139b0 <prvIdleTask+0x2c>)
 801399a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801399e:	601a      	str	r2, [r3, #0]
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80139a8:	e7f0      	b.n	801398c <prvIdleTask+0x8>
 80139aa:	bf00      	nop
 80139ac:	2400133c 	.word	0x2400133c
 80139b0:	e000ed04 	.word	0xe000ed04

080139b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139ba:	2300      	movs	r3, #0
 80139bc:	607b      	str	r3, [r7, #4]
 80139be:	e00c      	b.n	80139da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	4613      	mov	r3, r2
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	4413      	add	r3, r2
 80139c8:	009b      	lsls	r3, r3, #2
 80139ca:	4a12      	ldr	r2, [pc, #72]	; (8013a14 <prvInitialiseTaskLists+0x60>)
 80139cc:	4413      	add	r3, r2
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7fe fa42 	bl	8011e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	3301      	adds	r3, #1
 80139d8:	607b      	str	r3, [r7, #4]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2b37      	cmp	r3, #55	; 0x37
 80139de:	d9ef      	bls.n	80139c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80139e0:	480d      	ldr	r0, [pc, #52]	; (8013a18 <prvInitialiseTaskLists+0x64>)
 80139e2:	f7fe fa39 	bl	8011e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80139e6:	480d      	ldr	r0, [pc, #52]	; (8013a1c <prvInitialiseTaskLists+0x68>)
 80139e8:	f7fe fa36 	bl	8011e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80139ec:	480c      	ldr	r0, [pc, #48]	; (8013a20 <prvInitialiseTaskLists+0x6c>)
 80139ee:	f7fe fa33 	bl	8011e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80139f2:	480c      	ldr	r0, [pc, #48]	; (8013a24 <prvInitialiseTaskLists+0x70>)
 80139f4:	f7fe fa30 	bl	8011e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80139f8:	480b      	ldr	r0, [pc, #44]	; (8013a28 <prvInitialiseTaskLists+0x74>)
 80139fa:	f7fe fa2d 	bl	8011e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80139fe:	4b0b      	ldr	r3, [pc, #44]	; (8013a2c <prvInitialiseTaskLists+0x78>)
 8013a00:	4a05      	ldr	r2, [pc, #20]	; (8013a18 <prvInitialiseTaskLists+0x64>)
 8013a02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a04:	4b0a      	ldr	r3, [pc, #40]	; (8013a30 <prvInitialiseTaskLists+0x7c>)
 8013a06:	4a05      	ldr	r2, [pc, #20]	; (8013a1c <prvInitialiseTaskLists+0x68>)
 8013a08:	601a      	str	r2, [r3, #0]
}
 8013a0a:	bf00      	nop
 8013a0c:	3708      	adds	r7, #8
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	2400133c 	.word	0x2400133c
 8013a18:	2400179c 	.word	0x2400179c
 8013a1c:	240017b0 	.word	0x240017b0
 8013a20:	240017cc 	.word	0x240017cc
 8013a24:	240017e0 	.word	0x240017e0
 8013a28:	240017f8 	.word	0x240017f8
 8013a2c:	240017c4 	.word	0x240017c4
 8013a30:	240017c8 	.word	0x240017c8

08013a34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a3a:	e019      	b.n	8013a70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a3c:	f000 fe0a 	bl	8014654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a40:	4b10      	ldr	r3, [pc, #64]	; (8013a84 <prvCheckTasksWaitingTermination+0x50>)
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	68db      	ldr	r3, [r3, #12]
 8013a46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	3304      	adds	r3, #4
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fe fa8d 	bl	8011f6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a52:	4b0d      	ldr	r3, [pc, #52]	; (8013a88 <prvCheckTasksWaitingTermination+0x54>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	4a0b      	ldr	r2, [pc, #44]	; (8013a88 <prvCheckTasksWaitingTermination+0x54>)
 8013a5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a5c:	4b0b      	ldr	r3, [pc, #44]	; (8013a8c <prvCheckTasksWaitingTermination+0x58>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	3b01      	subs	r3, #1
 8013a62:	4a0a      	ldr	r2, [pc, #40]	; (8013a8c <prvCheckTasksWaitingTermination+0x58>)
 8013a64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a66:	f000 fe25 	bl	80146b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f000 f810 	bl	8013a90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a70:	4b06      	ldr	r3, [pc, #24]	; (8013a8c <prvCheckTasksWaitingTermination+0x58>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d1e1      	bne.n	8013a3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013a78:	bf00      	nop
 8013a7a:	bf00      	nop
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	240017e0 	.word	0x240017e0
 8013a88:	2400180c 	.word	0x2400180c
 8013a8c:	240017f4 	.word	0x240017f4

08013a90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d108      	bne.n	8013ab4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f000 ffc2 	bl	8014a30 <vPortFree>
				vPortFree( pxTCB );
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 ffbf 	bl	8014a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ab2:	e018      	b.n	8013ae6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d103      	bne.n	8013ac6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f000 ffb6 	bl	8014a30 <vPortFree>
	}
 8013ac4:	e00f      	b.n	8013ae6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013acc:	2b02      	cmp	r3, #2
 8013ace:	d00a      	beq.n	8013ae6 <prvDeleteTCB+0x56>
	__asm volatile
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	f383 8811 	msr	BASEPRI, r3
 8013ad8:	f3bf 8f6f 	isb	sy
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	60fb      	str	r3, [r7, #12]
}
 8013ae2:	bf00      	nop
 8013ae4:	e7fe      	b.n	8013ae4 <prvDeleteTCB+0x54>
	}
 8013ae6:	bf00      	nop
 8013ae8:	3710      	adds	r7, #16
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
	...

08013af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013af6:	4b0c      	ldr	r3, [pc, #48]	; (8013b28 <prvResetNextTaskUnblockTime+0x38>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d104      	bne.n	8013b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013b00:	4b0a      	ldr	r3, [pc, #40]	; (8013b2c <prvResetNextTaskUnblockTime+0x3c>)
 8013b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013b08:	e008      	b.n	8013b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b0a:	4b07      	ldr	r3, [pc, #28]	; (8013b28 <prvResetNextTaskUnblockTime+0x38>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	68db      	ldr	r3, [r3, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	4a04      	ldr	r2, [pc, #16]	; (8013b2c <prvResetNextTaskUnblockTime+0x3c>)
 8013b1a:	6013      	str	r3, [r2, #0]
}
 8013b1c:	bf00      	nop
 8013b1e:	370c      	adds	r7, #12
 8013b20:	46bd      	mov	sp, r7
 8013b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b26:	4770      	bx	lr
 8013b28:	240017c4 	.word	0x240017c4
 8013b2c:	2400182c 	.word	0x2400182c

08013b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b36:	4b0b      	ldr	r3, [pc, #44]	; (8013b64 <xTaskGetSchedulerState+0x34>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d102      	bne.n	8013b44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b3e:	2301      	movs	r3, #1
 8013b40:	607b      	str	r3, [r7, #4]
 8013b42:	e008      	b.n	8013b56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b44:	4b08      	ldr	r3, [pc, #32]	; (8013b68 <xTaskGetSchedulerState+0x38>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d102      	bne.n	8013b52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	607b      	str	r3, [r7, #4]
 8013b50:	e001      	b.n	8013b56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b52:	2300      	movs	r3, #0
 8013b54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b56:	687b      	ldr	r3, [r7, #4]
	}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	370c      	adds	r7, #12
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr
 8013b64:	24001818 	.word	0x24001818
 8013b68:	24001834 	.word	0x24001834

08013b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d056      	beq.n	8013c30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013b82:	4b2e      	ldr	r3, [pc, #184]	; (8013c3c <xTaskPriorityDisinherit+0xd0>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	693a      	ldr	r2, [r7, #16]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d00a      	beq.n	8013ba2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b90:	f383 8811 	msr	BASEPRI, r3
 8013b94:	f3bf 8f6f 	isb	sy
 8013b98:	f3bf 8f4f 	dsb	sy
 8013b9c:	60fb      	str	r3, [r7, #12]
}
 8013b9e:	bf00      	nop
 8013ba0:	e7fe      	b.n	8013ba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10a      	bne.n	8013bc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bae:	f383 8811 	msr	BASEPRI, r3
 8013bb2:	f3bf 8f6f 	isb	sy
 8013bb6:	f3bf 8f4f 	dsb	sy
 8013bba:	60bb      	str	r3, [r7, #8]
}
 8013bbc:	bf00      	nop
 8013bbe:	e7fe      	b.n	8013bbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bc4:	1e5a      	subs	r2, r3, #1
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d02c      	beq.n	8013c30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d128      	bne.n	8013c30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	3304      	adds	r3, #4
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fe f9c2 	bl	8011f6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c00:	4b0f      	ldr	r3, [pc, #60]	; (8013c40 <xTaskPriorityDisinherit+0xd4>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d903      	bls.n	8013c10 <xTaskPriorityDisinherit+0xa4>
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c0c:	4a0c      	ldr	r2, [pc, #48]	; (8013c40 <xTaskPriorityDisinherit+0xd4>)
 8013c0e:	6013      	str	r3, [r2, #0]
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c14:	4613      	mov	r3, r2
 8013c16:	009b      	lsls	r3, r3, #2
 8013c18:	4413      	add	r3, r2
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4a09      	ldr	r2, [pc, #36]	; (8013c44 <xTaskPriorityDisinherit+0xd8>)
 8013c1e:	441a      	add	r2, r3
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	3304      	adds	r3, #4
 8013c24:	4619      	mov	r1, r3
 8013c26:	4610      	mov	r0, r2
 8013c28:	f7fe f943 	bl	8011eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c30:	697b      	ldr	r3, [r7, #20]
	}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3718      	adds	r7, #24
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	24001338 	.word	0x24001338
 8013c40:	24001814 	.word	0x24001814
 8013c44:	2400133c 	.word	0x2400133c

08013c48 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8013c4e:	4b09      	ldr	r3, [pc, #36]	; (8013c74 <uxTaskResetEventItemValue+0x2c>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	699b      	ldr	r3, [r3, #24]
 8013c54:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c56:	4b07      	ldr	r3, [pc, #28]	; (8013c74 <uxTaskResetEventItemValue+0x2c>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c5c:	4b05      	ldr	r3, [pc, #20]	; (8013c74 <uxTaskResetEventItemValue+0x2c>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013c64:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013c66:	687b      	ldr	r3, [r7, #4]
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr
 8013c74:	24001338 	.word	0x24001338

08013c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013c82:	4b21      	ldr	r3, [pc, #132]	; (8013d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c88:	4b20      	ldr	r3, [pc, #128]	; (8013d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fe f96c 	bl	8011f6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c9a:	d10a      	bne.n	8013cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d007      	beq.n	8013cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ca2:	4b1a      	ldr	r3, [pc, #104]	; (8013d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	3304      	adds	r3, #4
 8013ca8:	4619      	mov	r1, r3
 8013caa:	4819      	ldr	r0, [pc, #100]	; (8013d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8013cac:	f7fe f901 	bl	8011eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013cb0:	e026      	b.n	8013d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013cb2:	68fa      	ldr	r2, [r7, #12]
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013cba:	4b14      	ldr	r3, [pc, #80]	; (8013d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	68ba      	ldr	r2, [r7, #8]
 8013cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013cc2:	68ba      	ldr	r2, [r7, #8]
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d209      	bcs.n	8013cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cca:	4b12      	ldr	r3, [pc, #72]	; (8013d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	4b0f      	ldr	r3, [pc, #60]	; (8013d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	3304      	adds	r3, #4
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	f7fe f90f 	bl	8011efa <vListInsert>
}
 8013cdc:	e010      	b.n	8013d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cde:	4b0e      	ldr	r3, [pc, #56]	; (8013d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	4b0a      	ldr	r3, [pc, #40]	; (8013d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	3304      	adds	r3, #4
 8013ce8:	4619      	mov	r1, r3
 8013cea:	4610      	mov	r0, r2
 8013cec:	f7fe f905 	bl	8011efa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013cf0:	4b0a      	ldr	r3, [pc, #40]	; (8013d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	68ba      	ldr	r2, [r7, #8]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d202      	bcs.n	8013d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013cfa:	4a08      	ldr	r2, [pc, #32]	; (8013d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	6013      	str	r3, [r2, #0]
}
 8013d00:	bf00      	nop
 8013d02:	3710      	adds	r7, #16
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	24001810 	.word	0x24001810
 8013d0c:	24001338 	.word	0x24001338
 8013d10:	240017f8 	.word	0x240017f8
 8013d14:	240017c8 	.word	0x240017c8
 8013d18:	240017c4 	.word	0x240017c4
 8013d1c:	2400182c 	.word	0x2400182c

08013d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b08a      	sub	sp, #40	; 0x28
 8013d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013d26:	2300      	movs	r3, #0
 8013d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013d2a:	f000 fb07 	bl	801433c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013d2e:	4b1c      	ldr	r3, [pc, #112]	; (8013da0 <xTimerCreateTimerTask+0x80>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d021      	beq.n	8013d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013d36:	2300      	movs	r3, #0
 8013d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013d3e:	1d3a      	adds	r2, r7, #4
 8013d40:	f107 0108 	add.w	r1, r7, #8
 8013d44:	f107 030c 	add.w	r3, r7, #12
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fd fe7d 	bl	8011a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013d4e:	6879      	ldr	r1, [r7, #4]
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	68fa      	ldr	r2, [r7, #12]
 8013d54:	9202      	str	r2, [sp, #8]
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	2302      	movs	r3, #2
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	460a      	mov	r2, r1
 8013d60:	4910      	ldr	r1, [pc, #64]	; (8013da4 <xTimerCreateTimerTask+0x84>)
 8013d62:	4811      	ldr	r0, [pc, #68]	; (8013da8 <xTimerCreateTimerTask+0x88>)
 8013d64:	f7fe ff0e 	bl	8012b84 <xTaskCreateStatic>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	4a10      	ldr	r2, [pc, #64]	; (8013dac <xTimerCreateTimerTask+0x8c>)
 8013d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013d6e:	4b0f      	ldr	r3, [pc, #60]	; (8013dac <xTimerCreateTimerTask+0x8c>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d001      	beq.n	8013d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013d76:	2301      	movs	r3, #1
 8013d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d10a      	bne.n	8013d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	613b      	str	r3, [r7, #16]
}
 8013d92:	bf00      	nop
 8013d94:	e7fe      	b.n	8013d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013d96:	697b      	ldr	r3, [r7, #20]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3718      	adds	r7, #24
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	24001868 	.word	0x24001868
 8013da4:	08015fa8 	.word	0x08015fa8
 8013da8:	08013ee5 	.word	0x08013ee5
 8013dac:	2400186c 	.word	0x2400186c

08013db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b08a      	sub	sp, #40	; 0x28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	607a      	str	r2, [r7, #4]
 8013dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10a      	bne.n	8013dde <xTimerGenericCommand+0x2e>
	__asm volatile
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	623b      	str	r3, [r7, #32]
}
 8013dda:	bf00      	nop
 8013ddc:	e7fe      	b.n	8013ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013dde:	4b1a      	ldr	r3, [pc, #104]	; (8013e48 <xTimerGenericCommand+0x98>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d02a      	beq.n	8013e3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	2b05      	cmp	r3, #5
 8013df6:	dc18      	bgt.n	8013e2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013df8:	f7ff fe9a 	bl	8013b30 <xTaskGetSchedulerState>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	d109      	bne.n	8013e16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013e02:	4b11      	ldr	r3, [pc, #68]	; (8013e48 <xTimerGenericCommand+0x98>)
 8013e04:	6818      	ldr	r0, [r3, #0]
 8013e06:	f107 0110 	add.w	r1, r7, #16
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e0e:	f7fe fa15 	bl	801223c <xQueueGenericSend>
 8013e12:	6278      	str	r0, [r7, #36]	; 0x24
 8013e14:	e012      	b.n	8013e3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013e16:	4b0c      	ldr	r3, [pc, #48]	; (8013e48 <xTimerGenericCommand+0x98>)
 8013e18:	6818      	ldr	r0, [r3, #0]
 8013e1a:	f107 0110 	add.w	r1, r7, #16
 8013e1e:	2300      	movs	r3, #0
 8013e20:	2200      	movs	r2, #0
 8013e22:	f7fe fa0b 	bl	801223c <xQueueGenericSend>
 8013e26:	6278      	str	r0, [r7, #36]	; 0x24
 8013e28:	e008      	b.n	8013e3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013e2a:	4b07      	ldr	r3, [pc, #28]	; (8013e48 <xTimerGenericCommand+0x98>)
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	f107 0110 	add.w	r1, r7, #16
 8013e32:	2300      	movs	r3, #0
 8013e34:	683a      	ldr	r2, [r7, #0]
 8013e36:	f7fe faff 	bl	8012438 <xQueueGenericSendFromISR>
 8013e3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3728      	adds	r7, #40	; 0x28
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	24001868 	.word	0x24001868

08013e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b088      	sub	sp, #32
 8013e50:	af02      	add	r7, sp, #8
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e56:	4b22      	ldr	r3, [pc, #136]	; (8013ee0 <prvProcessExpiredTimer+0x94>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	68db      	ldr	r3, [r3, #12]
 8013e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	3304      	adds	r3, #4
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fe f881 	bl	8011f6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e70:	f003 0304 	and.w	r3, r3, #4
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d022      	beq.n	8013ebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	699a      	ldr	r2, [r3, #24]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	18d1      	adds	r1, r2, r3
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	683a      	ldr	r2, [r7, #0]
 8013e84:	6978      	ldr	r0, [r7, #20]
 8013e86:	f000 f8d1 	bl	801402c <prvInsertTimerInActiveList>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d01f      	beq.n	8013ed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013e90:	2300      	movs	r3, #0
 8013e92:	9300      	str	r3, [sp, #0]
 8013e94:	2300      	movs	r3, #0
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	2100      	movs	r1, #0
 8013e9a:	6978      	ldr	r0, [r7, #20]
 8013e9c:	f7ff ff88 	bl	8013db0 <xTimerGenericCommand>
 8013ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d113      	bne.n	8013ed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	60fb      	str	r3, [r7, #12]
}
 8013eba:	bf00      	nop
 8013ebc:	e7fe      	b.n	8013ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ec4:	f023 0301 	bic.w	r3, r3, #1
 8013ec8:	b2da      	uxtb	r2, r3
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	6a1b      	ldr	r3, [r3, #32]
 8013ed4:	6978      	ldr	r0, [r7, #20]
 8013ed6:	4798      	blx	r3
}
 8013ed8:	bf00      	nop
 8013eda:	3718      	adds	r7, #24
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	24001860 	.word	0x24001860

08013ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013eec:	f107 0308 	add.w	r3, r7, #8
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f000 f857 	bl	8013fa4 <prvGetNextExpireTime>
 8013ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	4619      	mov	r1, r3
 8013efc:	68f8      	ldr	r0, [r7, #12]
 8013efe:	f000 f803 	bl	8013f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013f02:	f000 f8d5 	bl	80140b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f06:	e7f1      	b.n	8013eec <prvTimerTask+0x8>

08013f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013f12:	f7ff f98d 	bl	8013230 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f16:	f107 0308 	add.w	r3, r7, #8
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f000 f866 	bl	8013fec <prvSampleTimeNow>
 8013f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d130      	bne.n	8013f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10a      	bne.n	8013f44 <prvProcessTimerOrBlockTask+0x3c>
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d806      	bhi.n	8013f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013f36:	f7ff f989 	bl	801324c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013f3a:	68f9      	ldr	r1, [r7, #12]
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7ff ff85 	bl	8013e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013f42:	e024      	b.n	8013f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d008      	beq.n	8013f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013f4a:	4b13      	ldr	r3, [pc, #76]	; (8013f98 <prvProcessTimerOrBlockTask+0x90>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d101      	bne.n	8013f58 <prvProcessTimerOrBlockTask+0x50>
 8013f54:	2301      	movs	r3, #1
 8013f56:	e000      	b.n	8013f5a <prvProcessTimerOrBlockTask+0x52>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f5c:	4b0f      	ldr	r3, [pc, #60]	; (8013f9c <prvProcessTimerOrBlockTask+0x94>)
 8013f5e:	6818      	ldr	r0, [r3, #0]
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	1ad3      	subs	r3, r2, r3
 8013f66:	683a      	ldr	r2, [r7, #0]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	f7fe fdd7 	bl	8012b1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013f6e:	f7ff f96d 	bl	801324c <xTaskResumeAll>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10a      	bne.n	8013f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013f78:	4b09      	ldr	r3, [pc, #36]	; (8013fa0 <prvProcessTimerOrBlockTask+0x98>)
 8013f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f7e:	601a      	str	r2, [r3, #0]
 8013f80:	f3bf 8f4f 	dsb	sy
 8013f84:	f3bf 8f6f 	isb	sy
}
 8013f88:	e001      	b.n	8013f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013f8a:	f7ff f95f 	bl	801324c <xTaskResumeAll>
}
 8013f8e:	bf00      	nop
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	24001864 	.word	0x24001864
 8013f9c:	24001868 	.word	0x24001868
 8013fa0:	e000ed04 	.word	0xe000ed04

08013fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013fac:	4b0e      	ldr	r3, [pc, #56]	; (8013fe8 <prvGetNextExpireTime+0x44>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d101      	bne.n	8013fba <prvGetNextExpireTime+0x16>
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	e000      	b.n	8013fbc <prvGetNextExpireTime+0x18>
 8013fba:	2200      	movs	r2, #0
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d105      	bne.n	8013fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013fc8:	4b07      	ldr	r3, [pc, #28]	; (8013fe8 <prvGetNextExpireTime+0x44>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	60fb      	str	r3, [r7, #12]
 8013fd2:	e001      	b.n	8013fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3714      	adds	r7, #20
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	24001860 	.word	0x24001860

08013fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ff4:	f7ff f9c8 	bl	8013388 <xTaskGetTickCount>
 8013ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ffa:	4b0b      	ldr	r3, [pc, #44]	; (8014028 <prvSampleTimeNow+0x3c>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	429a      	cmp	r2, r3
 8014002:	d205      	bcs.n	8014010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014004:	f000 f936 	bl	8014274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2201      	movs	r2, #1
 801400c:	601a      	str	r2, [r3, #0]
 801400e:	e002      	b.n	8014016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014016:	4a04      	ldr	r2, [pc, #16]	; (8014028 <prvSampleTimeNow+0x3c>)
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801401c:	68fb      	ldr	r3, [r7, #12]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	24001870 	.word	0x24001870

0801402c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
 8014038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801403a:	2300      	movs	r3, #0
 801403c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	68ba      	ldr	r2, [r7, #8]
 8014042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	68fa      	ldr	r2, [r7, #12]
 8014048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801404a:	68ba      	ldr	r2, [r7, #8]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	429a      	cmp	r2, r3
 8014050:	d812      	bhi.n	8014078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	1ad2      	subs	r2, r2, r3
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	699b      	ldr	r3, [r3, #24]
 801405c:	429a      	cmp	r2, r3
 801405e:	d302      	bcc.n	8014066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014060:	2301      	movs	r3, #1
 8014062:	617b      	str	r3, [r7, #20]
 8014064:	e01b      	b.n	801409e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014066:	4b10      	ldr	r3, [pc, #64]	; (80140a8 <prvInsertTimerInActiveList+0x7c>)
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	3304      	adds	r3, #4
 801406e:	4619      	mov	r1, r3
 8014070:	4610      	mov	r0, r2
 8014072:	f7fd ff42 	bl	8011efa <vListInsert>
 8014076:	e012      	b.n	801409e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	429a      	cmp	r2, r3
 801407e:	d206      	bcs.n	801408e <prvInsertTimerInActiveList+0x62>
 8014080:	68ba      	ldr	r2, [r7, #8]
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	429a      	cmp	r2, r3
 8014086:	d302      	bcc.n	801408e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014088:	2301      	movs	r3, #1
 801408a:	617b      	str	r3, [r7, #20]
 801408c:	e007      	b.n	801409e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801408e:	4b07      	ldr	r3, [pc, #28]	; (80140ac <prvInsertTimerInActiveList+0x80>)
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	3304      	adds	r3, #4
 8014096:	4619      	mov	r1, r3
 8014098:	4610      	mov	r0, r2
 801409a:	f7fd ff2e 	bl	8011efa <vListInsert>
		}
	}

	return xProcessTimerNow;
 801409e:	697b      	ldr	r3, [r7, #20]
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3718      	adds	r7, #24
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	24001864 	.word	0x24001864
 80140ac:	24001860 	.word	0x24001860

080140b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b08e      	sub	sp, #56	; 0x38
 80140b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80140b6:	e0ca      	b.n	801424e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	da18      	bge.n	80140f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80140be:	1d3b      	adds	r3, r7, #4
 80140c0:	3304      	adds	r3, #4
 80140c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80140c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d10a      	bne.n	80140e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80140ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ce:	f383 8811 	msr	BASEPRI, r3
 80140d2:	f3bf 8f6f 	isb	sy
 80140d6:	f3bf 8f4f 	dsb	sy
 80140da:	61fb      	str	r3, [r7, #28]
}
 80140dc:	bf00      	nop
 80140de:	e7fe      	b.n	80140de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140e6:	6850      	ldr	r0, [r2, #4]
 80140e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140ea:	6892      	ldr	r2, [r2, #8]
 80140ec:	4611      	mov	r1, r2
 80140ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	f2c0 80aa 	blt.w	801424c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80140fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140fe:	695b      	ldr	r3, [r3, #20]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d004      	beq.n	801410e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014106:	3304      	adds	r3, #4
 8014108:	4618      	mov	r0, r3
 801410a:	f7fd ff2f 	bl	8011f6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801410e:	463b      	mov	r3, r7
 8014110:	4618      	mov	r0, r3
 8014112:	f7ff ff6b 	bl	8013fec <prvSampleTimeNow>
 8014116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2b09      	cmp	r3, #9
 801411c:	f200 8097 	bhi.w	801424e <prvProcessReceivedCommands+0x19e>
 8014120:	a201      	add	r2, pc, #4	; (adr r2, 8014128 <prvProcessReceivedCommands+0x78>)
 8014122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014126:	bf00      	nop
 8014128:	08014151 	.word	0x08014151
 801412c:	08014151 	.word	0x08014151
 8014130:	08014151 	.word	0x08014151
 8014134:	080141c5 	.word	0x080141c5
 8014138:	080141d9 	.word	0x080141d9
 801413c:	08014223 	.word	0x08014223
 8014140:	08014151 	.word	0x08014151
 8014144:	08014151 	.word	0x08014151
 8014148:	080141c5 	.word	0x080141c5
 801414c:	080141d9 	.word	0x080141d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014156:	f043 0301 	orr.w	r3, r3, #1
 801415a:	b2da      	uxtb	r2, r3
 801415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014162:	68ba      	ldr	r2, [r7, #8]
 8014164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014166:	699b      	ldr	r3, [r3, #24]
 8014168:	18d1      	adds	r1, r2, r3
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014170:	f7ff ff5c 	bl	801402c <prvInsertTimerInActiveList>
 8014174:	4603      	mov	r3, r0
 8014176:	2b00      	cmp	r3, #0
 8014178:	d069      	beq.n	801424e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801417c:	6a1b      	ldr	r3, [r3, #32]
 801417e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014188:	f003 0304 	and.w	r3, r3, #4
 801418c:	2b00      	cmp	r3, #0
 801418e:	d05e      	beq.n	801424e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014190:	68ba      	ldr	r2, [r7, #8]
 8014192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014194:	699b      	ldr	r3, [r3, #24]
 8014196:	441a      	add	r2, r3
 8014198:	2300      	movs	r3, #0
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	2300      	movs	r3, #0
 801419e:	2100      	movs	r1, #0
 80141a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141a2:	f7ff fe05 	bl	8013db0 <xTimerGenericCommand>
 80141a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80141a8:	6a3b      	ldr	r3, [r7, #32]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d14f      	bne.n	801424e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80141ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b2:	f383 8811 	msr	BASEPRI, r3
 80141b6:	f3bf 8f6f 	isb	sy
 80141ba:	f3bf 8f4f 	dsb	sy
 80141be:	61bb      	str	r3, [r7, #24]
}
 80141c0:	bf00      	nop
 80141c2:	e7fe      	b.n	80141c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80141c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141ca:	f023 0301 	bic.w	r3, r3, #1
 80141ce:	b2da      	uxtb	r2, r3
 80141d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80141d6:	e03a      	b.n	801424e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80141d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141de:	f043 0301 	orr.w	r3, r3, #1
 80141e2:	b2da      	uxtb	r2, r3
 80141e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80141f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f2:	699b      	ldr	r3, [r3, #24]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d10a      	bne.n	801420e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80141f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fc:	f383 8811 	msr	BASEPRI, r3
 8014200:	f3bf 8f6f 	isb	sy
 8014204:	f3bf 8f4f 	dsb	sy
 8014208:	617b      	str	r3, [r7, #20]
}
 801420a:	bf00      	nop
 801420c:	e7fe      	b.n	801420c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014210:	699a      	ldr	r2, [r3, #24]
 8014212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014214:	18d1      	adds	r1, r2, r3
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801421a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801421c:	f7ff ff06 	bl	801402c <prvInsertTimerInActiveList>
					break;
 8014220:	e015      	b.n	801424e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014228:	f003 0302 	and.w	r3, r3, #2
 801422c:	2b00      	cmp	r3, #0
 801422e:	d103      	bne.n	8014238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014232:	f000 fbfd 	bl	8014a30 <vPortFree>
 8014236:	e00a      	b.n	801424e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801423e:	f023 0301 	bic.w	r3, r3, #1
 8014242:	b2da      	uxtb	r2, r3
 8014244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801424a:	e000      	b.n	801424e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801424c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801424e:	4b08      	ldr	r3, [pc, #32]	; (8014270 <prvProcessReceivedCommands+0x1c0>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	1d39      	adds	r1, r7, #4
 8014254:	2200      	movs	r2, #0
 8014256:	4618      	mov	r0, r3
 8014258:	f7fe f98a 	bl	8012570 <xQueueReceive>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	f47f af2a 	bne.w	80140b8 <prvProcessReceivedCommands+0x8>
	}
}
 8014264:	bf00      	nop
 8014266:	bf00      	nop
 8014268:	3730      	adds	r7, #48	; 0x30
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	24001868 	.word	0x24001868

08014274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b088      	sub	sp, #32
 8014278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801427a:	e048      	b.n	801430e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801427c:	4b2d      	ldr	r3, [pc, #180]	; (8014334 <prvSwitchTimerLists+0xc0>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014286:	4b2b      	ldr	r3, [pc, #172]	; (8014334 <prvSwitchTimerLists+0xc0>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	3304      	adds	r3, #4
 8014294:	4618      	mov	r0, r3
 8014296:	f7fd fe69 	bl	8011f6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	6a1b      	ldr	r3, [r3, #32]
 801429e:	68f8      	ldr	r0, [r7, #12]
 80142a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80142a8:	f003 0304 	and.w	r3, r3, #4
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d02e      	beq.n	801430e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	699b      	ldr	r3, [r3, #24]
 80142b4:	693a      	ldr	r2, [r7, #16]
 80142b6:	4413      	add	r3, r2
 80142b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80142ba:	68ba      	ldr	r2, [r7, #8]
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d90e      	bls.n	80142e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	68ba      	ldr	r2, [r7, #8]
 80142c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	68fa      	ldr	r2, [r7, #12]
 80142cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80142ce:	4b19      	ldr	r3, [pc, #100]	; (8014334 <prvSwitchTimerLists+0xc0>)
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	3304      	adds	r3, #4
 80142d6:	4619      	mov	r1, r3
 80142d8:	4610      	mov	r0, r2
 80142da:	f7fd fe0e 	bl	8011efa <vListInsert>
 80142de:	e016      	b.n	801430e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80142e0:	2300      	movs	r3, #0
 80142e2:	9300      	str	r3, [sp, #0]
 80142e4:	2300      	movs	r3, #0
 80142e6:	693a      	ldr	r2, [r7, #16]
 80142e8:	2100      	movs	r1, #0
 80142ea:	68f8      	ldr	r0, [r7, #12]
 80142ec:	f7ff fd60 	bl	8013db0 <xTimerGenericCommand>
 80142f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d10a      	bne.n	801430e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80142f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142fc:	f383 8811 	msr	BASEPRI, r3
 8014300:	f3bf 8f6f 	isb	sy
 8014304:	f3bf 8f4f 	dsb	sy
 8014308:	603b      	str	r3, [r7, #0]
}
 801430a:	bf00      	nop
 801430c:	e7fe      	b.n	801430c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801430e:	4b09      	ldr	r3, [pc, #36]	; (8014334 <prvSwitchTimerLists+0xc0>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1b1      	bne.n	801427c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014318:	4b06      	ldr	r3, [pc, #24]	; (8014334 <prvSwitchTimerLists+0xc0>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801431e:	4b06      	ldr	r3, [pc, #24]	; (8014338 <prvSwitchTimerLists+0xc4>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4a04      	ldr	r2, [pc, #16]	; (8014334 <prvSwitchTimerLists+0xc0>)
 8014324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014326:	4a04      	ldr	r2, [pc, #16]	; (8014338 <prvSwitchTimerLists+0xc4>)
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	6013      	str	r3, [r2, #0]
}
 801432c:	bf00      	nop
 801432e:	3718      	adds	r7, #24
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	24001860 	.word	0x24001860
 8014338:	24001864 	.word	0x24001864

0801433c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014342:	f000 f987 	bl	8014654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014346:	4b15      	ldr	r3, [pc, #84]	; (801439c <prvCheckForValidListAndQueue+0x60>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d120      	bne.n	8014390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801434e:	4814      	ldr	r0, [pc, #80]	; (80143a0 <prvCheckForValidListAndQueue+0x64>)
 8014350:	f7fd fd82 	bl	8011e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014354:	4813      	ldr	r0, [pc, #76]	; (80143a4 <prvCheckForValidListAndQueue+0x68>)
 8014356:	f7fd fd7f 	bl	8011e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801435a:	4b13      	ldr	r3, [pc, #76]	; (80143a8 <prvCheckForValidListAndQueue+0x6c>)
 801435c:	4a10      	ldr	r2, [pc, #64]	; (80143a0 <prvCheckForValidListAndQueue+0x64>)
 801435e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014360:	4b12      	ldr	r3, [pc, #72]	; (80143ac <prvCheckForValidListAndQueue+0x70>)
 8014362:	4a10      	ldr	r2, [pc, #64]	; (80143a4 <prvCheckForValidListAndQueue+0x68>)
 8014364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014366:	2300      	movs	r3, #0
 8014368:	9300      	str	r3, [sp, #0]
 801436a:	4b11      	ldr	r3, [pc, #68]	; (80143b0 <prvCheckForValidListAndQueue+0x74>)
 801436c:	4a11      	ldr	r2, [pc, #68]	; (80143b4 <prvCheckForValidListAndQueue+0x78>)
 801436e:	2110      	movs	r1, #16
 8014370:	200a      	movs	r0, #10
 8014372:	f7fd fe8d 	bl	8012090 <xQueueGenericCreateStatic>
 8014376:	4603      	mov	r3, r0
 8014378:	4a08      	ldr	r2, [pc, #32]	; (801439c <prvCheckForValidListAndQueue+0x60>)
 801437a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801437c:	4b07      	ldr	r3, [pc, #28]	; (801439c <prvCheckForValidListAndQueue+0x60>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d005      	beq.n	8014390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014384:	4b05      	ldr	r3, [pc, #20]	; (801439c <prvCheckForValidListAndQueue+0x60>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	490b      	ldr	r1, [pc, #44]	; (80143b8 <prvCheckForValidListAndQueue+0x7c>)
 801438a:	4618      	mov	r0, r3
 801438c:	f7fe fb9c 	bl	8012ac8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014390:	f000 f990 	bl	80146b4 <vPortExitCritical>
}
 8014394:	bf00      	nop
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	24001868 	.word	0x24001868
 80143a0:	24001838 	.word	0x24001838
 80143a4:	2400184c 	.word	0x2400184c
 80143a8:	24001860 	.word	0x24001860
 80143ac:	24001864 	.word	0x24001864
 80143b0:	24001914 	.word	0x24001914
 80143b4:	24001874 	.word	0x24001874
 80143b8:	08015fb0 	.word	0x08015fb0

080143bc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b08a      	sub	sp, #40	; 0x28
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	607a      	str	r2, [r7, #4]
 80143c8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80143ca:	f06f 0301 	mvn.w	r3, #1
 80143ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80143dc:	4b06      	ldr	r3, [pc, #24]	; (80143f8 <xTimerPendFunctionCallFromISR+0x3c>)
 80143de:	6818      	ldr	r0, [r3, #0]
 80143e0:	f107 0114 	add.w	r1, r7, #20
 80143e4:	2300      	movs	r3, #0
 80143e6:	683a      	ldr	r2, [r7, #0]
 80143e8:	f7fe f826 	bl	8012438 <xQueueGenericSendFromISR>
 80143ec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80143ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3728      	adds	r7, #40	; 0x28
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	24001868 	.word	0x24001868

080143fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80143fc:	b480      	push	{r7}
 80143fe:	b085      	sub	sp, #20
 8014400:	af00      	add	r7, sp, #0
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	60b9      	str	r1, [r7, #8]
 8014406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	3b04      	subs	r3, #4
 801440c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	3b04      	subs	r3, #4
 801441a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	f023 0201 	bic.w	r2, r3, #1
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	3b04      	subs	r3, #4
 801442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801442c:	4a0c      	ldr	r2, [pc, #48]	; (8014460 <pxPortInitialiseStack+0x64>)
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	3b14      	subs	r3, #20
 8014436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	3b04      	subs	r3, #4
 8014442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	f06f 0202 	mvn.w	r2, #2
 801444a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	3b20      	subs	r3, #32
 8014450:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014452:	68fb      	ldr	r3, [r7, #12]
}
 8014454:	4618      	mov	r0, r3
 8014456:	3714      	adds	r7, #20
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr
 8014460:	08014465 	.word	0x08014465

08014464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014464:	b480      	push	{r7}
 8014466:	b085      	sub	sp, #20
 8014468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801446a:	2300      	movs	r3, #0
 801446c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801446e:	4b12      	ldr	r3, [pc, #72]	; (80144b8 <prvTaskExitError+0x54>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014476:	d00a      	beq.n	801448e <prvTaskExitError+0x2a>
	__asm volatile
 8014478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447c:	f383 8811 	msr	BASEPRI, r3
 8014480:	f3bf 8f6f 	isb	sy
 8014484:	f3bf 8f4f 	dsb	sy
 8014488:	60fb      	str	r3, [r7, #12]
}
 801448a:	bf00      	nop
 801448c:	e7fe      	b.n	801448c <prvTaskExitError+0x28>
	__asm volatile
 801448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014492:	f383 8811 	msr	BASEPRI, r3
 8014496:	f3bf 8f6f 	isb	sy
 801449a:	f3bf 8f4f 	dsb	sy
 801449e:	60bb      	str	r3, [r7, #8]
}
 80144a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80144a2:	bf00      	nop
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d0fc      	beq.n	80144a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80144aa:	bf00      	nop
 80144ac:	bf00      	nop
 80144ae:	3714      	adds	r7, #20
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr
 80144b8:	24000098 	.word	0x24000098
 80144bc:	00000000 	.word	0x00000000

080144c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80144c0:	4b07      	ldr	r3, [pc, #28]	; (80144e0 <pxCurrentTCBConst2>)
 80144c2:	6819      	ldr	r1, [r3, #0]
 80144c4:	6808      	ldr	r0, [r1, #0]
 80144c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ca:	f380 8809 	msr	PSP, r0
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f04f 0000 	mov.w	r0, #0
 80144d6:	f380 8811 	msr	BASEPRI, r0
 80144da:	4770      	bx	lr
 80144dc:	f3af 8000 	nop.w

080144e0 <pxCurrentTCBConst2>:
 80144e0:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80144e4:	bf00      	nop
 80144e6:	bf00      	nop

080144e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80144e8:	4808      	ldr	r0, [pc, #32]	; (801450c <prvPortStartFirstTask+0x24>)
 80144ea:	6800      	ldr	r0, [r0, #0]
 80144ec:	6800      	ldr	r0, [r0, #0]
 80144ee:	f380 8808 	msr	MSP, r0
 80144f2:	f04f 0000 	mov.w	r0, #0
 80144f6:	f380 8814 	msr	CONTROL, r0
 80144fa:	b662      	cpsie	i
 80144fc:	b661      	cpsie	f
 80144fe:	f3bf 8f4f 	dsb	sy
 8014502:	f3bf 8f6f 	isb	sy
 8014506:	df00      	svc	0
 8014508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801450a:	bf00      	nop
 801450c:	e000ed08 	.word	0xe000ed08

08014510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b086      	sub	sp, #24
 8014514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014516:	4b46      	ldr	r3, [pc, #280]	; (8014630 <xPortStartScheduler+0x120>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4a46      	ldr	r2, [pc, #280]	; (8014634 <xPortStartScheduler+0x124>)
 801451c:	4293      	cmp	r3, r2
 801451e:	d10a      	bne.n	8014536 <xPortStartScheduler+0x26>
	__asm volatile
 8014520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014524:	f383 8811 	msr	BASEPRI, r3
 8014528:	f3bf 8f6f 	isb	sy
 801452c:	f3bf 8f4f 	dsb	sy
 8014530:	613b      	str	r3, [r7, #16]
}
 8014532:	bf00      	nop
 8014534:	e7fe      	b.n	8014534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014536:	4b3e      	ldr	r3, [pc, #248]	; (8014630 <xPortStartScheduler+0x120>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4a3f      	ldr	r2, [pc, #252]	; (8014638 <xPortStartScheduler+0x128>)
 801453c:	4293      	cmp	r3, r2
 801453e:	d10a      	bne.n	8014556 <xPortStartScheduler+0x46>
	__asm volatile
 8014540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014544:	f383 8811 	msr	BASEPRI, r3
 8014548:	f3bf 8f6f 	isb	sy
 801454c:	f3bf 8f4f 	dsb	sy
 8014550:	60fb      	str	r3, [r7, #12]
}
 8014552:	bf00      	nop
 8014554:	e7fe      	b.n	8014554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014556:	4b39      	ldr	r3, [pc, #228]	; (801463c <xPortStartScheduler+0x12c>)
 8014558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	b2db      	uxtb	r3, r3
 8014560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	22ff      	movs	r2, #255	; 0xff
 8014566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	b2db      	uxtb	r3, r3
 801456e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014570:	78fb      	ldrb	r3, [r7, #3]
 8014572:	b2db      	uxtb	r3, r3
 8014574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014578:	b2da      	uxtb	r2, r3
 801457a:	4b31      	ldr	r3, [pc, #196]	; (8014640 <xPortStartScheduler+0x130>)
 801457c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801457e:	4b31      	ldr	r3, [pc, #196]	; (8014644 <xPortStartScheduler+0x134>)
 8014580:	2207      	movs	r2, #7
 8014582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014584:	e009      	b.n	801459a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014586:	4b2f      	ldr	r3, [pc, #188]	; (8014644 <xPortStartScheduler+0x134>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	3b01      	subs	r3, #1
 801458c:	4a2d      	ldr	r2, [pc, #180]	; (8014644 <xPortStartScheduler+0x134>)
 801458e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014590:	78fb      	ldrb	r3, [r7, #3]
 8014592:	b2db      	uxtb	r3, r3
 8014594:	005b      	lsls	r3, r3, #1
 8014596:	b2db      	uxtb	r3, r3
 8014598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801459a:	78fb      	ldrb	r3, [r7, #3]
 801459c:	b2db      	uxtb	r3, r3
 801459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145a2:	2b80      	cmp	r3, #128	; 0x80
 80145a4:	d0ef      	beq.n	8014586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80145a6:	4b27      	ldr	r3, [pc, #156]	; (8014644 <xPortStartScheduler+0x134>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	f1c3 0307 	rsb	r3, r3, #7
 80145ae:	2b04      	cmp	r3, #4
 80145b0:	d00a      	beq.n	80145c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80145b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	60bb      	str	r3, [r7, #8]
}
 80145c4:	bf00      	nop
 80145c6:	e7fe      	b.n	80145c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80145c8:	4b1e      	ldr	r3, [pc, #120]	; (8014644 <xPortStartScheduler+0x134>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	021b      	lsls	r3, r3, #8
 80145ce:	4a1d      	ldr	r2, [pc, #116]	; (8014644 <xPortStartScheduler+0x134>)
 80145d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80145d2:	4b1c      	ldr	r3, [pc, #112]	; (8014644 <xPortStartScheduler+0x134>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80145da:	4a1a      	ldr	r2, [pc, #104]	; (8014644 <xPortStartScheduler+0x134>)
 80145dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	b2da      	uxtb	r2, r3
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80145e6:	4b18      	ldr	r3, [pc, #96]	; (8014648 <xPortStartScheduler+0x138>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	4a17      	ldr	r2, [pc, #92]	; (8014648 <xPortStartScheduler+0x138>)
 80145ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80145f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80145f2:	4b15      	ldr	r3, [pc, #84]	; (8014648 <xPortStartScheduler+0x138>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	4a14      	ldr	r2, [pc, #80]	; (8014648 <xPortStartScheduler+0x138>)
 80145f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80145fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80145fe:	f000 f8dd 	bl	80147bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014602:	4b12      	ldr	r3, [pc, #72]	; (801464c <xPortStartScheduler+0x13c>)
 8014604:	2200      	movs	r2, #0
 8014606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014608:	f000 f8fc 	bl	8014804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801460c:	4b10      	ldr	r3, [pc, #64]	; (8014650 <xPortStartScheduler+0x140>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a0f      	ldr	r2, [pc, #60]	; (8014650 <xPortStartScheduler+0x140>)
 8014612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014618:	f7ff ff66 	bl	80144e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801461c:	f7fe ff7e 	bl	801351c <vTaskSwitchContext>
	prvTaskExitError();
 8014620:	f7ff ff20 	bl	8014464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014624:	2300      	movs	r3, #0
}
 8014626:	4618      	mov	r0, r3
 8014628:	3718      	adds	r7, #24
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	e000ed00 	.word	0xe000ed00
 8014634:	410fc271 	.word	0x410fc271
 8014638:	410fc270 	.word	0x410fc270
 801463c:	e000e400 	.word	0xe000e400
 8014640:	24001964 	.word	0x24001964
 8014644:	24001968 	.word	0x24001968
 8014648:	e000ed20 	.word	0xe000ed20
 801464c:	24000098 	.word	0x24000098
 8014650:	e000ef34 	.word	0xe000ef34

08014654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
	__asm volatile
 801465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801465e:	f383 8811 	msr	BASEPRI, r3
 8014662:	f3bf 8f6f 	isb	sy
 8014666:	f3bf 8f4f 	dsb	sy
 801466a:	607b      	str	r3, [r7, #4]
}
 801466c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801466e:	4b0f      	ldr	r3, [pc, #60]	; (80146ac <vPortEnterCritical+0x58>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	3301      	adds	r3, #1
 8014674:	4a0d      	ldr	r2, [pc, #52]	; (80146ac <vPortEnterCritical+0x58>)
 8014676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014678:	4b0c      	ldr	r3, [pc, #48]	; (80146ac <vPortEnterCritical+0x58>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2b01      	cmp	r3, #1
 801467e:	d10f      	bne.n	80146a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014680:	4b0b      	ldr	r3, [pc, #44]	; (80146b0 <vPortEnterCritical+0x5c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	b2db      	uxtb	r3, r3
 8014686:	2b00      	cmp	r3, #0
 8014688:	d00a      	beq.n	80146a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801468e:	f383 8811 	msr	BASEPRI, r3
 8014692:	f3bf 8f6f 	isb	sy
 8014696:	f3bf 8f4f 	dsb	sy
 801469a:	603b      	str	r3, [r7, #0]
}
 801469c:	bf00      	nop
 801469e:	e7fe      	b.n	801469e <vPortEnterCritical+0x4a>
	}
}
 80146a0:	bf00      	nop
 80146a2:	370c      	adds	r7, #12
 80146a4:	46bd      	mov	sp, r7
 80146a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146aa:	4770      	bx	lr
 80146ac:	24000098 	.word	0x24000098
 80146b0:	e000ed04 	.word	0xe000ed04

080146b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80146ba:	4b12      	ldr	r3, [pc, #72]	; (8014704 <vPortExitCritical+0x50>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d10a      	bne.n	80146d8 <vPortExitCritical+0x24>
	__asm volatile
 80146c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c6:	f383 8811 	msr	BASEPRI, r3
 80146ca:	f3bf 8f6f 	isb	sy
 80146ce:	f3bf 8f4f 	dsb	sy
 80146d2:	607b      	str	r3, [r7, #4]
}
 80146d4:	bf00      	nop
 80146d6:	e7fe      	b.n	80146d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80146d8:	4b0a      	ldr	r3, [pc, #40]	; (8014704 <vPortExitCritical+0x50>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	3b01      	subs	r3, #1
 80146de:	4a09      	ldr	r2, [pc, #36]	; (8014704 <vPortExitCritical+0x50>)
 80146e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80146e2:	4b08      	ldr	r3, [pc, #32]	; (8014704 <vPortExitCritical+0x50>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d105      	bne.n	80146f6 <vPortExitCritical+0x42>
 80146ea:	2300      	movs	r3, #0
 80146ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	f383 8811 	msr	BASEPRI, r3
}
 80146f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80146f6:	bf00      	nop
 80146f8:	370c      	adds	r7, #12
 80146fa:	46bd      	mov	sp, r7
 80146fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop
 8014704:	24000098 	.word	0x24000098
	...

08014710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014710:	f3ef 8009 	mrs	r0, PSP
 8014714:	f3bf 8f6f 	isb	sy
 8014718:	4b15      	ldr	r3, [pc, #84]	; (8014770 <pxCurrentTCBConst>)
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	f01e 0f10 	tst.w	lr, #16
 8014720:	bf08      	it	eq
 8014722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472a:	6010      	str	r0, [r2, #0]
 801472c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014734:	f380 8811 	msr	BASEPRI, r0
 8014738:	f3bf 8f4f 	dsb	sy
 801473c:	f3bf 8f6f 	isb	sy
 8014740:	f7fe feec 	bl	801351c <vTaskSwitchContext>
 8014744:	f04f 0000 	mov.w	r0, #0
 8014748:	f380 8811 	msr	BASEPRI, r0
 801474c:	bc09      	pop	{r0, r3}
 801474e:	6819      	ldr	r1, [r3, #0]
 8014750:	6808      	ldr	r0, [r1, #0]
 8014752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014756:	f01e 0f10 	tst.w	lr, #16
 801475a:	bf08      	it	eq
 801475c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014760:	f380 8809 	msr	PSP, r0
 8014764:	f3bf 8f6f 	isb	sy
 8014768:	4770      	bx	lr
 801476a:	bf00      	nop
 801476c:	f3af 8000 	nop.w

08014770 <pxCurrentTCBConst>:
 8014770:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014774:	bf00      	nop
 8014776:	bf00      	nop

08014778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
	__asm volatile
 801477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014782:	f383 8811 	msr	BASEPRI, r3
 8014786:	f3bf 8f6f 	isb	sy
 801478a:	f3bf 8f4f 	dsb	sy
 801478e:	607b      	str	r3, [r7, #4]
}
 8014790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014792:	f7fe fe09 	bl	80133a8 <xTaskIncrementTick>
 8014796:	4603      	mov	r3, r0
 8014798:	2b00      	cmp	r3, #0
 801479a:	d003      	beq.n	80147a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801479c:	4b06      	ldr	r3, [pc, #24]	; (80147b8 <xPortSysTickHandler+0x40>)
 801479e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147a2:	601a      	str	r2, [r3, #0]
 80147a4:	2300      	movs	r3, #0
 80147a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	f383 8811 	msr	BASEPRI, r3
}
 80147ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80147b0:	bf00      	nop
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	e000ed04 	.word	0xe000ed04

080147bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80147bc:	b480      	push	{r7}
 80147be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80147c0:	4b0b      	ldr	r3, [pc, #44]	; (80147f0 <vPortSetupTimerInterrupt+0x34>)
 80147c2:	2200      	movs	r2, #0
 80147c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80147c6:	4b0b      	ldr	r3, [pc, #44]	; (80147f4 <vPortSetupTimerInterrupt+0x38>)
 80147c8:	2200      	movs	r2, #0
 80147ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80147cc:	4b0a      	ldr	r3, [pc, #40]	; (80147f8 <vPortSetupTimerInterrupt+0x3c>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4a0a      	ldr	r2, [pc, #40]	; (80147fc <vPortSetupTimerInterrupt+0x40>)
 80147d2:	fba2 2303 	umull	r2, r3, r2, r3
 80147d6:	099b      	lsrs	r3, r3, #6
 80147d8:	4a09      	ldr	r2, [pc, #36]	; (8014800 <vPortSetupTimerInterrupt+0x44>)
 80147da:	3b01      	subs	r3, #1
 80147dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80147de:	4b04      	ldr	r3, [pc, #16]	; (80147f0 <vPortSetupTimerInterrupt+0x34>)
 80147e0:	2207      	movs	r2, #7
 80147e2:	601a      	str	r2, [r3, #0]
}
 80147e4:	bf00      	nop
 80147e6:	46bd      	mov	sp, r7
 80147e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop
 80147f0:	e000e010 	.word	0xe000e010
 80147f4:	e000e018 	.word	0xe000e018
 80147f8:	24000088 	.word	0x24000088
 80147fc:	10624dd3 	.word	0x10624dd3
 8014800:	e000e014 	.word	0xe000e014

08014804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014814 <vPortEnableVFP+0x10>
 8014808:	6801      	ldr	r1, [r0, #0]
 801480a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801480e:	6001      	str	r1, [r0, #0]
 8014810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014812:	bf00      	nop
 8014814:	e000ed88 	.word	0xe000ed88

08014818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014818:	b480      	push	{r7}
 801481a:	b085      	sub	sp, #20
 801481c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801481e:	f3ef 8305 	mrs	r3, IPSR
 8014822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2b0f      	cmp	r3, #15
 8014828:	d914      	bls.n	8014854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801482a:	4a17      	ldr	r2, [pc, #92]	; (8014888 <vPortValidateInterruptPriority+0x70>)
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	4413      	add	r3, r2
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014834:	4b15      	ldr	r3, [pc, #84]	; (801488c <vPortValidateInterruptPriority+0x74>)
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	7afa      	ldrb	r2, [r7, #11]
 801483a:	429a      	cmp	r2, r3
 801483c:	d20a      	bcs.n	8014854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014842:	f383 8811 	msr	BASEPRI, r3
 8014846:	f3bf 8f6f 	isb	sy
 801484a:	f3bf 8f4f 	dsb	sy
 801484e:	607b      	str	r3, [r7, #4]
}
 8014850:	bf00      	nop
 8014852:	e7fe      	b.n	8014852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014854:	4b0e      	ldr	r3, [pc, #56]	; (8014890 <vPortValidateInterruptPriority+0x78>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801485c:	4b0d      	ldr	r3, [pc, #52]	; (8014894 <vPortValidateInterruptPriority+0x7c>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	429a      	cmp	r2, r3
 8014862:	d90a      	bls.n	801487a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014868:	f383 8811 	msr	BASEPRI, r3
 801486c:	f3bf 8f6f 	isb	sy
 8014870:	f3bf 8f4f 	dsb	sy
 8014874:	603b      	str	r3, [r7, #0]
}
 8014876:	bf00      	nop
 8014878:	e7fe      	b.n	8014878 <vPortValidateInterruptPriority+0x60>
	}
 801487a:	bf00      	nop
 801487c:	3714      	adds	r7, #20
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	e000e3f0 	.word	0xe000e3f0
 801488c:	24001964 	.word	0x24001964
 8014890:	e000ed0c 	.word	0xe000ed0c
 8014894:	24001968 	.word	0x24001968

08014898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b08a      	sub	sp, #40	; 0x28
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80148a0:	2300      	movs	r3, #0
 80148a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80148a4:	f7fe fcc4 	bl	8013230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80148a8:	4b5b      	ldr	r3, [pc, #364]	; (8014a18 <pvPortMalloc+0x180>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d101      	bne.n	80148b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80148b0:	f000 f920 	bl	8014af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80148b4:	4b59      	ldr	r3, [pc, #356]	; (8014a1c <pvPortMalloc+0x184>)
 80148b6:	681a      	ldr	r2, [r3, #0]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	4013      	ands	r3, r2
 80148bc:	2b00      	cmp	r3, #0
 80148be:	f040 8093 	bne.w	80149e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d01d      	beq.n	8014904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80148c8:	2208      	movs	r2, #8
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	4413      	add	r3, r2
 80148ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f003 0307 	and.w	r3, r3, #7
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d014      	beq.n	8014904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f023 0307 	bic.w	r3, r3, #7
 80148e0:	3308      	adds	r3, #8
 80148e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f003 0307 	and.w	r3, r3, #7
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00a      	beq.n	8014904 <pvPortMalloc+0x6c>
	__asm volatile
 80148ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	617b      	str	r3, [r7, #20]
}
 8014900:	bf00      	nop
 8014902:	e7fe      	b.n	8014902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d06e      	beq.n	80149e8 <pvPortMalloc+0x150>
 801490a:	4b45      	ldr	r3, [pc, #276]	; (8014a20 <pvPortMalloc+0x188>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	429a      	cmp	r2, r3
 8014912:	d869      	bhi.n	80149e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014914:	4b43      	ldr	r3, [pc, #268]	; (8014a24 <pvPortMalloc+0x18c>)
 8014916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014918:	4b42      	ldr	r3, [pc, #264]	; (8014a24 <pvPortMalloc+0x18c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801491e:	e004      	b.n	801492a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	429a      	cmp	r2, r3
 8014932:	d903      	bls.n	801493c <pvPortMalloc+0xa4>
 8014934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d1f1      	bne.n	8014920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801493c:	4b36      	ldr	r3, [pc, #216]	; (8014a18 <pvPortMalloc+0x180>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014942:	429a      	cmp	r2, r3
 8014944:	d050      	beq.n	80149e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014946:	6a3b      	ldr	r3, [r7, #32]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	2208      	movs	r2, #8
 801494c:	4413      	add	r3, r2
 801494e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	6a3b      	ldr	r3, [r7, #32]
 8014956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495a:	685a      	ldr	r2, [r3, #4]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	1ad2      	subs	r2, r2, r3
 8014960:	2308      	movs	r3, #8
 8014962:	005b      	lsls	r3, r3, #1
 8014964:	429a      	cmp	r2, r3
 8014966:	d91f      	bls.n	80149a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	4413      	add	r3, r2
 801496e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	f003 0307 	and.w	r3, r3, #7
 8014976:	2b00      	cmp	r3, #0
 8014978:	d00a      	beq.n	8014990 <pvPortMalloc+0xf8>
	__asm volatile
 801497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801497e:	f383 8811 	msr	BASEPRI, r3
 8014982:	f3bf 8f6f 	isb	sy
 8014986:	f3bf 8f4f 	dsb	sy
 801498a:	613b      	str	r3, [r7, #16]
}
 801498c:	bf00      	nop
 801498e:	e7fe      	b.n	801498e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014992:	685a      	ldr	r2, [r3, #4]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	1ad2      	subs	r2, r2, r3
 8014998:	69bb      	ldr	r3, [r7, #24]
 801499a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80149a2:	69b8      	ldr	r0, [r7, #24]
 80149a4:	f000 f908 	bl	8014bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80149a8:	4b1d      	ldr	r3, [pc, #116]	; (8014a20 <pvPortMalloc+0x188>)
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	1ad3      	subs	r3, r2, r3
 80149b2:	4a1b      	ldr	r2, [pc, #108]	; (8014a20 <pvPortMalloc+0x188>)
 80149b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80149b6:	4b1a      	ldr	r3, [pc, #104]	; (8014a20 <pvPortMalloc+0x188>)
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	4b1b      	ldr	r3, [pc, #108]	; (8014a28 <pvPortMalloc+0x190>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d203      	bcs.n	80149ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80149c2:	4b17      	ldr	r3, [pc, #92]	; (8014a20 <pvPortMalloc+0x188>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	4a18      	ldr	r2, [pc, #96]	; (8014a28 <pvPortMalloc+0x190>)
 80149c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149cc:	685a      	ldr	r2, [r3, #4]
 80149ce:	4b13      	ldr	r3, [pc, #76]	; (8014a1c <pvPortMalloc+0x184>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	431a      	orrs	r2, r3
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80149d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149da:	2200      	movs	r2, #0
 80149dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80149de:	4b13      	ldr	r3, [pc, #76]	; (8014a2c <pvPortMalloc+0x194>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	3301      	adds	r3, #1
 80149e4:	4a11      	ldr	r2, [pc, #68]	; (8014a2c <pvPortMalloc+0x194>)
 80149e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80149e8:	f7fe fc30 	bl	801324c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	f003 0307 	and.w	r3, r3, #7
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d00a      	beq.n	8014a0c <pvPortMalloc+0x174>
	__asm volatile
 80149f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fa:	f383 8811 	msr	BASEPRI, r3
 80149fe:	f3bf 8f6f 	isb	sy
 8014a02:	f3bf 8f4f 	dsb	sy
 8014a06:	60fb      	str	r3, [r7, #12]
}
 8014a08:	bf00      	nop
 8014a0a:	e7fe      	b.n	8014a0a <pvPortMalloc+0x172>
	return pvReturn;
 8014a0c:	69fb      	ldr	r3, [r7, #28]
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3728      	adds	r7, #40	; 0x28
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	24005574 	.word	0x24005574
 8014a1c:	24005588 	.word	0x24005588
 8014a20:	24005578 	.word	0x24005578
 8014a24:	2400556c 	.word	0x2400556c
 8014a28:	2400557c 	.word	0x2400557c
 8014a2c:	24005580 	.word	0x24005580

08014a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b086      	sub	sp, #24
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d04d      	beq.n	8014ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014a42:	2308      	movs	r3, #8
 8014a44:	425b      	negs	r3, r3
 8014a46:	697a      	ldr	r2, [r7, #20]
 8014a48:	4413      	add	r3, r2
 8014a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	685a      	ldr	r2, [r3, #4]
 8014a54:	4b24      	ldr	r3, [pc, #144]	; (8014ae8 <vPortFree+0xb8>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4013      	ands	r3, r2
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d10a      	bne.n	8014a74 <vPortFree+0x44>
	__asm volatile
 8014a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a62:	f383 8811 	msr	BASEPRI, r3
 8014a66:	f3bf 8f6f 	isb	sy
 8014a6a:	f3bf 8f4f 	dsb	sy
 8014a6e:	60fb      	str	r3, [r7, #12]
}
 8014a70:	bf00      	nop
 8014a72:	e7fe      	b.n	8014a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00a      	beq.n	8014a92 <vPortFree+0x62>
	__asm volatile
 8014a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a80:	f383 8811 	msr	BASEPRI, r3
 8014a84:	f3bf 8f6f 	isb	sy
 8014a88:	f3bf 8f4f 	dsb	sy
 8014a8c:	60bb      	str	r3, [r7, #8]
}
 8014a8e:	bf00      	nop
 8014a90:	e7fe      	b.n	8014a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	685a      	ldr	r2, [r3, #4]
 8014a96:	4b14      	ldr	r3, [pc, #80]	; (8014ae8 <vPortFree+0xb8>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	4013      	ands	r3, r2
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d01e      	beq.n	8014ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d11a      	bne.n	8014ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	685a      	ldr	r2, [r3, #4]
 8014aac:	4b0e      	ldr	r3, [pc, #56]	; (8014ae8 <vPortFree+0xb8>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	43db      	mvns	r3, r3
 8014ab2:	401a      	ands	r2, r3
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ab8:	f7fe fbba 	bl	8013230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	685a      	ldr	r2, [r3, #4]
 8014ac0:	4b0a      	ldr	r3, [pc, #40]	; (8014aec <vPortFree+0xbc>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	4a09      	ldr	r2, [pc, #36]	; (8014aec <vPortFree+0xbc>)
 8014ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014aca:	6938      	ldr	r0, [r7, #16]
 8014acc:	f000 f874 	bl	8014bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014ad0:	4b07      	ldr	r3, [pc, #28]	; (8014af0 <vPortFree+0xc0>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	4a06      	ldr	r2, [pc, #24]	; (8014af0 <vPortFree+0xc0>)
 8014ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014ada:	f7fe fbb7 	bl	801324c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ade:	bf00      	nop
 8014ae0:	3718      	adds	r7, #24
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	24005588 	.word	0x24005588
 8014aec:	24005578 	.word	0x24005578
 8014af0:	24005584 	.word	0x24005584

08014af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014af4:	b480      	push	{r7}
 8014af6:	b085      	sub	sp, #20
 8014af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014b00:	4b27      	ldr	r3, [pc, #156]	; (8014ba0 <prvHeapInit+0xac>)
 8014b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	f003 0307 	and.w	r3, r3, #7
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d00c      	beq.n	8014b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	3307      	adds	r3, #7
 8014b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	f023 0307 	bic.w	r3, r3, #7
 8014b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014b1c:	68ba      	ldr	r2, [r7, #8]
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	1ad3      	subs	r3, r2, r3
 8014b22:	4a1f      	ldr	r2, [pc, #124]	; (8014ba0 <prvHeapInit+0xac>)
 8014b24:	4413      	add	r3, r2
 8014b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014b2c:	4a1d      	ldr	r2, [pc, #116]	; (8014ba4 <prvHeapInit+0xb0>)
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014b32:	4b1c      	ldr	r3, [pc, #112]	; (8014ba4 <prvHeapInit+0xb0>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	68ba      	ldr	r2, [r7, #8]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014b40:	2208      	movs	r2, #8
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	1a9b      	subs	r3, r3, r2
 8014b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f023 0307 	bic.w	r3, r3, #7
 8014b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	4a15      	ldr	r2, [pc, #84]	; (8014ba8 <prvHeapInit+0xb4>)
 8014b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014b56:	4b14      	ldr	r3, [pc, #80]	; (8014ba8 <prvHeapInit+0xb4>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014b5e:	4b12      	ldr	r3, [pc, #72]	; (8014ba8 <prvHeapInit+0xb4>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	2200      	movs	r2, #0
 8014b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	68fa      	ldr	r2, [r7, #12]
 8014b6e:	1ad2      	subs	r2, r2, r3
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014b74:	4b0c      	ldr	r3, [pc, #48]	; (8014ba8 <prvHeapInit+0xb4>)
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	685b      	ldr	r3, [r3, #4]
 8014b80:	4a0a      	ldr	r2, [pc, #40]	; (8014bac <prvHeapInit+0xb8>)
 8014b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	685b      	ldr	r3, [r3, #4]
 8014b88:	4a09      	ldr	r2, [pc, #36]	; (8014bb0 <prvHeapInit+0xbc>)
 8014b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014b8c:	4b09      	ldr	r3, [pc, #36]	; (8014bb4 <prvHeapInit+0xc0>)
 8014b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014b92:	601a      	str	r2, [r3, #0]
}
 8014b94:	bf00      	nop
 8014b96:	3714      	adds	r7, #20
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr
 8014ba0:	2400196c 	.word	0x2400196c
 8014ba4:	2400556c 	.word	0x2400556c
 8014ba8:	24005574 	.word	0x24005574
 8014bac:	2400557c 	.word	0x2400557c
 8014bb0:	24005578 	.word	0x24005578
 8014bb4:	24005588 	.word	0x24005588

08014bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b085      	sub	sp, #20
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014bc0:	4b28      	ldr	r3, [pc, #160]	; (8014c64 <prvInsertBlockIntoFreeList+0xac>)
 8014bc2:	60fb      	str	r3, [r7, #12]
 8014bc4:	e002      	b.n	8014bcc <prvInsertBlockIntoFreeList+0x14>
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	60fb      	str	r3, [r7, #12]
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d8f7      	bhi.n	8014bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	68ba      	ldr	r2, [r7, #8]
 8014be0:	4413      	add	r3, r2
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d108      	bne.n	8014bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	685a      	ldr	r2, [r3, #4]
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	441a      	add	r2, r3
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	68ba      	ldr	r2, [r7, #8]
 8014c04:	441a      	add	r2, r3
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d118      	bne.n	8014c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	681a      	ldr	r2, [r3, #0]
 8014c12:	4b15      	ldr	r3, [pc, #84]	; (8014c68 <prvInsertBlockIntoFreeList+0xb0>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d00d      	beq.n	8014c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	685a      	ldr	r2, [r3, #4]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	441a      	add	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	601a      	str	r2, [r3, #0]
 8014c34:	e008      	b.n	8014c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014c36:	4b0c      	ldr	r3, [pc, #48]	; (8014c68 <prvInsertBlockIntoFreeList+0xb0>)
 8014c38:	681a      	ldr	r2, [r3, #0]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	601a      	str	r2, [r3, #0]
 8014c3e:	e003      	b.n	8014c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014c48:	68fa      	ldr	r2, [r7, #12]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d002      	beq.n	8014c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c56:	bf00      	nop
 8014c58:	3714      	adds	r7, #20
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	2400556c 	.word	0x2400556c
 8014c68:	24005574 	.word	0x24005574

08014c6c <__errno>:
 8014c6c:	4b01      	ldr	r3, [pc, #4]	; (8014c74 <__errno+0x8>)
 8014c6e:	6818      	ldr	r0, [r3, #0]
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop
 8014c74:	2400009c 	.word	0x2400009c

08014c78 <__libc_init_array>:
 8014c78:	b570      	push	{r4, r5, r6, lr}
 8014c7a:	4d0d      	ldr	r5, [pc, #52]	; (8014cb0 <__libc_init_array+0x38>)
 8014c7c:	4c0d      	ldr	r4, [pc, #52]	; (8014cb4 <__libc_init_array+0x3c>)
 8014c7e:	1b64      	subs	r4, r4, r5
 8014c80:	10a4      	asrs	r4, r4, #2
 8014c82:	2600      	movs	r6, #0
 8014c84:	42a6      	cmp	r6, r4
 8014c86:	d109      	bne.n	8014c9c <__libc_init_array+0x24>
 8014c88:	4d0b      	ldr	r5, [pc, #44]	; (8014cb8 <__libc_init_array+0x40>)
 8014c8a:	4c0c      	ldr	r4, [pc, #48]	; (8014cbc <__libc_init_array+0x44>)
 8014c8c:	f001 f842 	bl	8015d14 <_init>
 8014c90:	1b64      	subs	r4, r4, r5
 8014c92:	10a4      	asrs	r4, r4, #2
 8014c94:	2600      	movs	r6, #0
 8014c96:	42a6      	cmp	r6, r4
 8014c98:	d105      	bne.n	8014ca6 <__libc_init_array+0x2e>
 8014c9a:	bd70      	pop	{r4, r5, r6, pc}
 8014c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ca0:	4798      	blx	r3
 8014ca2:	3601      	adds	r6, #1
 8014ca4:	e7ee      	b.n	8014c84 <__libc_init_array+0xc>
 8014ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014caa:	4798      	blx	r3
 8014cac:	3601      	adds	r6, #1
 8014cae:	e7f2      	b.n	8014c96 <__libc_init_array+0x1e>
 8014cb0:	08016194 	.word	0x08016194
 8014cb4:	08016194 	.word	0x08016194
 8014cb8:	08016194 	.word	0x08016194
 8014cbc:	08016198 	.word	0x08016198

08014cc0 <malloc>:
 8014cc0:	4b02      	ldr	r3, [pc, #8]	; (8014ccc <malloc+0xc>)
 8014cc2:	4601      	mov	r1, r0
 8014cc4:	6818      	ldr	r0, [r3, #0]
 8014cc6:	f000 b88d 	b.w	8014de4 <_malloc_r>
 8014cca:	bf00      	nop
 8014ccc:	2400009c 	.word	0x2400009c

08014cd0 <free>:
 8014cd0:	4b02      	ldr	r3, [pc, #8]	; (8014cdc <free+0xc>)
 8014cd2:	4601      	mov	r1, r0
 8014cd4:	6818      	ldr	r0, [r3, #0]
 8014cd6:	f000 b819 	b.w	8014d0c <_free_r>
 8014cda:	bf00      	nop
 8014cdc:	2400009c 	.word	0x2400009c

08014ce0 <memcpy>:
 8014ce0:	440a      	add	r2, r1
 8014ce2:	4291      	cmp	r1, r2
 8014ce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014ce8:	d100      	bne.n	8014cec <memcpy+0xc>
 8014cea:	4770      	bx	lr
 8014cec:	b510      	push	{r4, lr}
 8014cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cf6:	4291      	cmp	r1, r2
 8014cf8:	d1f9      	bne.n	8014cee <memcpy+0xe>
 8014cfa:	bd10      	pop	{r4, pc}

08014cfc <memset>:
 8014cfc:	4402      	add	r2, r0
 8014cfe:	4603      	mov	r3, r0
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d100      	bne.n	8014d06 <memset+0xa>
 8014d04:	4770      	bx	lr
 8014d06:	f803 1b01 	strb.w	r1, [r3], #1
 8014d0a:	e7f9      	b.n	8014d00 <memset+0x4>

08014d0c <_free_r>:
 8014d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d0e:	2900      	cmp	r1, #0
 8014d10:	d044      	beq.n	8014d9c <_free_r+0x90>
 8014d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d16:	9001      	str	r0, [sp, #4]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8014d1e:	bfb8      	it	lt
 8014d20:	18e4      	addlt	r4, r4, r3
 8014d22:	f000 fc51 	bl	80155c8 <__malloc_lock>
 8014d26:	4a1e      	ldr	r2, [pc, #120]	; (8014da0 <_free_r+0x94>)
 8014d28:	9801      	ldr	r0, [sp, #4]
 8014d2a:	6813      	ldr	r3, [r2, #0]
 8014d2c:	b933      	cbnz	r3, 8014d3c <_free_r+0x30>
 8014d2e:	6063      	str	r3, [r4, #4]
 8014d30:	6014      	str	r4, [r2, #0]
 8014d32:	b003      	add	sp, #12
 8014d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d38:	f000 bc4c 	b.w	80155d4 <__malloc_unlock>
 8014d3c:	42a3      	cmp	r3, r4
 8014d3e:	d908      	bls.n	8014d52 <_free_r+0x46>
 8014d40:	6825      	ldr	r5, [r4, #0]
 8014d42:	1961      	adds	r1, r4, r5
 8014d44:	428b      	cmp	r3, r1
 8014d46:	bf01      	itttt	eq
 8014d48:	6819      	ldreq	r1, [r3, #0]
 8014d4a:	685b      	ldreq	r3, [r3, #4]
 8014d4c:	1949      	addeq	r1, r1, r5
 8014d4e:	6021      	streq	r1, [r4, #0]
 8014d50:	e7ed      	b.n	8014d2e <_free_r+0x22>
 8014d52:	461a      	mov	r2, r3
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	b10b      	cbz	r3, 8014d5c <_free_r+0x50>
 8014d58:	42a3      	cmp	r3, r4
 8014d5a:	d9fa      	bls.n	8014d52 <_free_r+0x46>
 8014d5c:	6811      	ldr	r1, [r2, #0]
 8014d5e:	1855      	adds	r5, r2, r1
 8014d60:	42a5      	cmp	r5, r4
 8014d62:	d10b      	bne.n	8014d7c <_free_r+0x70>
 8014d64:	6824      	ldr	r4, [r4, #0]
 8014d66:	4421      	add	r1, r4
 8014d68:	1854      	adds	r4, r2, r1
 8014d6a:	42a3      	cmp	r3, r4
 8014d6c:	6011      	str	r1, [r2, #0]
 8014d6e:	d1e0      	bne.n	8014d32 <_free_r+0x26>
 8014d70:	681c      	ldr	r4, [r3, #0]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	6053      	str	r3, [r2, #4]
 8014d76:	4421      	add	r1, r4
 8014d78:	6011      	str	r1, [r2, #0]
 8014d7a:	e7da      	b.n	8014d32 <_free_r+0x26>
 8014d7c:	d902      	bls.n	8014d84 <_free_r+0x78>
 8014d7e:	230c      	movs	r3, #12
 8014d80:	6003      	str	r3, [r0, #0]
 8014d82:	e7d6      	b.n	8014d32 <_free_r+0x26>
 8014d84:	6825      	ldr	r5, [r4, #0]
 8014d86:	1961      	adds	r1, r4, r5
 8014d88:	428b      	cmp	r3, r1
 8014d8a:	bf04      	itt	eq
 8014d8c:	6819      	ldreq	r1, [r3, #0]
 8014d8e:	685b      	ldreq	r3, [r3, #4]
 8014d90:	6063      	str	r3, [r4, #4]
 8014d92:	bf04      	itt	eq
 8014d94:	1949      	addeq	r1, r1, r5
 8014d96:	6021      	streq	r1, [r4, #0]
 8014d98:	6054      	str	r4, [r2, #4]
 8014d9a:	e7ca      	b.n	8014d32 <_free_r+0x26>
 8014d9c:	b003      	add	sp, #12
 8014d9e:	bd30      	pop	{r4, r5, pc}
 8014da0:	2400558c 	.word	0x2400558c

08014da4 <sbrk_aligned>:
 8014da4:	b570      	push	{r4, r5, r6, lr}
 8014da6:	4e0e      	ldr	r6, [pc, #56]	; (8014de0 <sbrk_aligned+0x3c>)
 8014da8:	460c      	mov	r4, r1
 8014daa:	6831      	ldr	r1, [r6, #0]
 8014dac:	4605      	mov	r5, r0
 8014dae:	b911      	cbnz	r1, 8014db6 <sbrk_aligned+0x12>
 8014db0:	f000 f91a 	bl	8014fe8 <_sbrk_r>
 8014db4:	6030      	str	r0, [r6, #0]
 8014db6:	4621      	mov	r1, r4
 8014db8:	4628      	mov	r0, r5
 8014dba:	f000 f915 	bl	8014fe8 <_sbrk_r>
 8014dbe:	1c43      	adds	r3, r0, #1
 8014dc0:	d00a      	beq.n	8014dd8 <sbrk_aligned+0x34>
 8014dc2:	1cc4      	adds	r4, r0, #3
 8014dc4:	f024 0403 	bic.w	r4, r4, #3
 8014dc8:	42a0      	cmp	r0, r4
 8014dca:	d007      	beq.n	8014ddc <sbrk_aligned+0x38>
 8014dcc:	1a21      	subs	r1, r4, r0
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f000 f90a 	bl	8014fe8 <_sbrk_r>
 8014dd4:	3001      	adds	r0, #1
 8014dd6:	d101      	bne.n	8014ddc <sbrk_aligned+0x38>
 8014dd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014ddc:	4620      	mov	r0, r4
 8014dde:	bd70      	pop	{r4, r5, r6, pc}
 8014de0:	24005590 	.word	0x24005590

08014de4 <_malloc_r>:
 8014de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014de8:	1ccd      	adds	r5, r1, #3
 8014dea:	f025 0503 	bic.w	r5, r5, #3
 8014dee:	3508      	adds	r5, #8
 8014df0:	2d0c      	cmp	r5, #12
 8014df2:	bf38      	it	cc
 8014df4:	250c      	movcc	r5, #12
 8014df6:	2d00      	cmp	r5, #0
 8014df8:	4607      	mov	r7, r0
 8014dfa:	db01      	blt.n	8014e00 <_malloc_r+0x1c>
 8014dfc:	42a9      	cmp	r1, r5
 8014dfe:	d905      	bls.n	8014e0c <_malloc_r+0x28>
 8014e00:	230c      	movs	r3, #12
 8014e02:	603b      	str	r3, [r7, #0]
 8014e04:	2600      	movs	r6, #0
 8014e06:	4630      	mov	r0, r6
 8014e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e0c:	4e2e      	ldr	r6, [pc, #184]	; (8014ec8 <_malloc_r+0xe4>)
 8014e0e:	f000 fbdb 	bl	80155c8 <__malloc_lock>
 8014e12:	6833      	ldr	r3, [r6, #0]
 8014e14:	461c      	mov	r4, r3
 8014e16:	bb34      	cbnz	r4, 8014e66 <_malloc_r+0x82>
 8014e18:	4629      	mov	r1, r5
 8014e1a:	4638      	mov	r0, r7
 8014e1c:	f7ff ffc2 	bl	8014da4 <sbrk_aligned>
 8014e20:	1c43      	adds	r3, r0, #1
 8014e22:	4604      	mov	r4, r0
 8014e24:	d14d      	bne.n	8014ec2 <_malloc_r+0xde>
 8014e26:	6834      	ldr	r4, [r6, #0]
 8014e28:	4626      	mov	r6, r4
 8014e2a:	2e00      	cmp	r6, #0
 8014e2c:	d140      	bne.n	8014eb0 <_malloc_r+0xcc>
 8014e2e:	6823      	ldr	r3, [r4, #0]
 8014e30:	4631      	mov	r1, r6
 8014e32:	4638      	mov	r0, r7
 8014e34:	eb04 0803 	add.w	r8, r4, r3
 8014e38:	f000 f8d6 	bl	8014fe8 <_sbrk_r>
 8014e3c:	4580      	cmp	r8, r0
 8014e3e:	d13a      	bne.n	8014eb6 <_malloc_r+0xd2>
 8014e40:	6821      	ldr	r1, [r4, #0]
 8014e42:	3503      	adds	r5, #3
 8014e44:	1a6d      	subs	r5, r5, r1
 8014e46:	f025 0503 	bic.w	r5, r5, #3
 8014e4a:	3508      	adds	r5, #8
 8014e4c:	2d0c      	cmp	r5, #12
 8014e4e:	bf38      	it	cc
 8014e50:	250c      	movcc	r5, #12
 8014e52:	4629      	mov	r1, r5
 8014e54:	4638      	mov	r0, r7
 8014e56:	f7ff ffa5 	bl	8014da4 <sbrk_aligned>
 8014e5a:	3001      	adds	r0, #1
 8014e5c:	d02b      	beq.n	8014eb6 <_malloc_r+0xd2>
 8014e5e:	6823      	ldr	r3, [r4, #0]
 8014e60:	442b      	add	r3, r5
 8014e62:	6023      	str	r3, [r4, #0]
 8014e64:	e00e      	b.n	8014e84 <_malloc_r+0xa0>
 8014e66:	6822      	ldr	r2, [r4, #0]
 8014e68:	1b52      	subs	r2, r2, r5
 8014e6a:	d41e      	bmi.n	8014eaa <_malloc_r+0xc6>
 8014e6c:	2a0b      	cmp	r2, #11
 8014e6e:	d916      	bls.n	8014e9e <_malloc_r+0xba>
 8014e70:	1961      	adds	r1, r4, r5
 8014e72:	42a3      	cmp	r3, r4
 8014e74:	6025      	str	r5, [r4, #0]
 8014e76:	bf18      	it	ne
 8014e78:	6059      	strne	r1, [r3, #4]
 8014e7a:	6863      	ldr	r3, [r4, #4]
 8014e7c:	bf08      	it	eq
 8014e7e:	6031      	streq	r1, [r6, #0]
 8014e80:	5162      	str	r2, [r4, r5]
 8014e82:	604b      	str	r3, [r1, #4]
 8014e84:	4638      	mov	r0, r7
 8014e86:	f104 060b 	add.w	r6, r4, #11
 8014e8a:	f000 fba3 	bl	80155d4 <__malloc_unlock>
 8014e8e:	f026 0607 	bic.w	r6, r6, #7
 8014e92:	1d23      	adds	r3, r4, #4
 8014e94:	1af2      	subs	r2, r6, r3
 8014e96:	d0b6      	beq.n	8014e06 <_malloc_r+0x22>
 8014e98:	1b9b      	subs	r3, r3, r6
 8014e9a:	50a3      	str	r3, [r4, r2]
 8014e9c:	e7b3      	b.n	8014e06 <_malloc_r+0x22>
 8014e9e:	6862      	ldr	r2, [r4, #4]
 8014ea0:	42a3      	cmp	r3, r4
 8014ea2:	bf0c      	ite	eq
 8014ea4:	6032      	streq	r2, [r6, #0]
 8014ea6:	605a      	strne	r2, [r3, #4]
 8014ea8:	e7ec      	b.n	8014e84 <_malloc_r+0xa0>
 8014eaa:	4623      	mov	r3, r4
 8014eac:	6864      	ldr	r4, [r4, #4]
 8014eae:	e7b2      	b.n	8014e16 <_malloc_r+0x32>
 8014eb0:	4634      	mov	r4, r6
 8014eb2:	6876      	ldr	r6, [r6, #4]
 8014eb4:	e7b9      	b.n	8014e2a <_malloc_r+0x46>
 8014eb6:	230c      	movs	r3, #12
 8014eb8:	603b      	str	r3, [r7, #0]
 8014eba:	4638      	mov	r0, r7
 8014ebc:	f000 fb8a 	bl	80155d4 <__malloc_unlock>
 8014ec0:	e7a1      	b.n	8014e06 <_malloc_r+0x22>
 8014ec2:	6025      	str	r5, [r4, #0]
 8014ec4:	e7de      	b.n	8014e84 <_malloc_r+0xa0>
 8014ec6:	bf00      	nop
 8014ec8:	2400558c 	.word	0x2400558c

08014ecc <iprintf>:
 8014ecc:	b40f      	push	{r0, r1, r2, r3}
 8014ece:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <iprintf+0x2c>)
 8014ed0:	b513      	push	{r0, r1, r4, lr}
 8014ed2:	681c      	ldr	r4, [r3, #0]
 8014ed4:	b124      	cbz	r4, 8014ee0 <iprintf+0x14>
 8014ed6:	69a3      	ldr	r3, [r4, #24]
 8014ed8:	b913      	cbnz	r3, 8014ee0 <iprintf+0x14>
 8014eda:	4620      	mov	r0, r4
 8014edc:	f000 fa6e 	bl	80153bc <__sinit>
 8014ee0:	ab05      	add	r3, sp, #20
 8014ee2:	9a04      	ldr	r2, [sp, #16]
 8014ee4:	68a1      	ldr	r1, [r4, #8]
 8014ee6:	9301      	str	r3, [sp, #4]
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f000 fba3 	bl	8015634 <_vfiprintf_r>
 8014eee:	b002      	add	sp, #8
 8014ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ef4:	b004      	add	sp, #16
 8014ef6:	4770      	bx	lr
 8014ef8:	2400009c 	.word	0x2400009c

08014efc <_puts_r>:
 8014efc:	b570      	push	{r4, r5, r6, lr}
 8014efe:	460e      	mov	r6, r1
 8014f00:	4605      	mov	r5, r0
 8014f02:	b118      	cbz	r0, 8014f0c <_puts_r+0x10>
 8014f04:	6983      	ldr	r3, [r0, #24]
 8014f06:	b90b      	cbnz	r3, 8014f0c <_puts_r+0x10>
 8014f08:	f000 fa58 	bl	80153bc <__sinit>
 8014f0c:	69ab      	ldr	r3, [r5, #24]
 8014f0e:	68ac      	ldr	r4, [r5, #8]
 8014f10:	b913      	cbnz	r3, 8014f18 <_puts_r+0x1c>
 8014f12:	4628      	mov	r0, r5
 8014f14:	f000 fa52 	bl	80153bc <__sinit>
 8014f18:	4b2c      	ldr	r3, [pc, #176]	; (8014fcc <_puts_r+0xd0>)
 8014f1a:	429c      	cmp	r4, r3
 8014f1c:	d120      	bne.n	8014f60 <_puts_r+0x64>
 8014f1e:	686c      	ldr	r4, [r5, #4]
 8014f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f22:	07db      	lsls	r3, r3, #31
 8014f24:	d405      	bmi.n	8014f32 <_puts_r+0x36>
 8014f26:	89a3      	ldrh	r3, [r4, #12]
 8014f28:	0598      	lsls	r0, r3, #22
 8014f2a:	d402      	bmi.n	8014f32 <_puts_r+0x36>
 8014f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f2e:	f000 fae3 	bl	80154f8 <__retarget_lock_acquire_recursive>
 8014f32:	89a3      	ldrh	r3, [r4, #12]
 8014f34:	0719      	lsls	r1, r3, #28
 8014f36:	d51d      	bpl.n	8014f74 <_puts_r+0x78>
 8014f38:	6923      	ldr	r3, [r4, #16]
 8014f3a:	b1db      	cbz	r3, 8014f74 <_puts_r+0x78>
 8014f3c:	3e01      	subs	r6, #1
 8014f3e:	68a3      	ldr	r3, [r4, #8]
 8014f40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f44:	3b01      	subs	r3, #1
 8014f46:	60a3      	str	r3, [r4, #8]
 8014f48:	bb39      	cbnz	r1, 8014f9a <_puts_r+0x9e>
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	da38      	bge.n	8014fc0 <_puts_r+0xc4>
 8014f4e:	4622      	mov	r2, r4
 8014f50:	210a      	movs	r1, #10
 8014f52:	4628      	mov	r0, r5
 8014f54:	f000 f858 	bl	8015008 <__swbuf_r>
 8014f58:	3001      	adds	r0, #1
 8014f5a:	d011      	beq.n	8014f80 <_puts_r+0x84>
 8014f5c:	250a      	movs	r5, #10
 8014f5e:	e011      	b.n	8014f84 <_puts_r+0x88>
 8014f60:	4b1b      	ldr	r3, [pc, #108]	; (8014fd0 <_puts_r+0xd4>)
 8014f62:	429c      	cmp	r4, r3
 8014f64:	d101      	bne.n	8014f6a <_puts_r+0x6e>
 8014f66:	68ac      	ldr	r4, [r5, #8]
 8014f68:	e7da      	b.n	8014f20 <_puts_r+0x24>
 8014f6a:	4b1a      	ldr	r3, [pc, #104]	; (8014fd4 <_puts_r+0xd8>)
 8014f6c:	429c      	cmp	r4, r3
 8014f6e:	bf08      	it	eq
 8014f70:	68ec      	ldreq	r4, [r5, #12]
 8014f72:	e7d5      	b.n	8014f20 <_puts_r+0x24>
 8014f74:	4621      	mov	r1, r4
 8014f76:	4628      	mov	r0, r5
 8014f78:	f000 f898 	bl	80150ac <__swsetup_r>
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d0dd      	beq.n	8014f3c <_puts_r+0x40>
 8014f80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f86:	07da      	lsls	r2, r3, #31
 8014f88:	d405      	bmi.n	8014f96 <_puts_r+0x9a>
 8014f8a:	89a3      	ldrh	r3, [r4, #12]
 8014f8c:	059b      	lsls	r3, r3, #22
 8014f8e:	d402      	bmi.n	8014f96 <_puts_r+0x9a>
 8014f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f92:	f000 fab2 	bl	80154fa <__retarget_lock_release_recursive>
 8014f96:	4628      	mov	r0, r5
 8014f98:	bd70      	pop	{r4, r5, r6, pc}
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	da04      	bge.n	8014fa8 <_puts_r+0xac>
 8014f9e:	69a2      	ldr	r2, [r4, #24]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	dc06      	bgt.n	8014fb2 <_puts_r+0xb6>
 8014fa4:	290a      	cmp	r1, #10
 8014fa6:	d004      	beq.n	8014fb2 <_puts_r+0xb6>
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	1c5a      	adds	r2, r3, #1
 8014fac:	6022      	str	r2, [r4, #0]
 8014fae:	7019      	strb	r1, [r3, #0]
 8014fb0:	e7c5      	b.n	8014f3e <_puts_r+0x42>
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f000 f827 	bl	8015008 <__swbuf_r>
 8014fba:	3001      	adds	r0, #1
 8014fbc:	d1bf      	bne.n	8014f3e <_puts_r+0x42>
 8014fbe:	e7df      	b.n	8014f80 <_puts_r+0x84>
 8014fc0:	6823      	ldr	r3, [r4, #0]
 8014fc2:	250a      	movs	r5, #10
 8014fc4:	1c5a      	adds	r2, r3, #1
 8014fc6:	6022      	str	r2, [r4, #0]
 8014fc8:	701d      	strb	r5, [r3, #0]
 8014fca:	e7db      	b.n	8014f84 <_puts_r+0x88>
 8014fcc:	08016118 	.word	0x08016118
 8014fd0:	08016138 	.word	0x08016138
 8014fd4:	080160f8 	.word	0x080160f8

08014fd8 <puts>:
 8014fd8:	4b02      	ldr	r3, [pc, #8]	; (8014fe4 <puts+0xc>)
 8014fda:	4601      	mov	r1, r0
 8014fdc:	6818      	ldr	r0, [r3, #0]
 8014fde:	f7ff bf8d 	b.w	8014efc <_puts_r>
 8014fe2:	bf00      	nop
 8014fe4:	2400009c 	.word	0x2400009c

08014fe8 <_sbrk_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4d06      	ldr	r5, [pc, #24]	; (8015004 <_sbrk_r+0x1c>)
 8014fec:	2300      	movs	r3, #0
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4608      	mov	r0, r1
 8014ff2:	602b      	str	r3, [r5, #0]
 8014ff4:	f7ee fa20 	bl	8003438 <_sbrk>
 8014ff8:	1c43      	adds	r3, r0, #1
 8014ffa:	d102      	bne.n	8015002 <_sbrk_r+0x1a>
 8014ffc:	682b      	ldr	r3, [r5, #0]
 8014ffe:	b103      	cbz	r3, 8015002 <_sbrk_r+0x1a>
 8015000:	6023      	str	r3, [r4, #0]
 8015002:	bd38      	pop	{r3, r4, r5, pc}
 8015004:	24005598 	.word	0x24005598

08015008 <__swbuf_r>:
 8015008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801500a:	460e      	mov	r6, r1
 801500c:	4614      	mov	r4, r2
 801500e:	4605      	mov	r5, r0
 8015010:	b118      	cbz	r0, 801501a <__swbuf_r+0x12>
 8015012:	6983      	ldr	r3, [r0, #24]
 8015014:	b90b      	cbnz	r3, 801501a <__swbuf_r+0x12>
 8015016:	f000 f9d1 	bl	80153bc <__sinit>
 801501a:	4b21      	ldr	r3, [pc, #132]	; (80150a0 <__swbuf_r+0x98>)
 801501c:	429c      	cmp	r4, r3
 801501e:	d12b      	bne.n	8015078 <__swbuf_r+0x70>
 8015020:	686c      	ldr	r4, [r5, #4]
 8015022:	69a3      	ldr	r3, [r4, #24]
 8015024:	60a3      	str	r3, [r4, #8]
 8015026:	89a3      	ldrh	r3, [r4, #12]
 8015028:	071a      	lsls	r2, r3, #28
 801502a:	d52f      	bpl.n	801508c <__swbuf_r+0x84>
 801502c:	6923      	ldr	r3, [r4, #16]
 801502e:	b36b      	cbz	r3, 801508c <__swbuf_r+0x84>
 8015030:	6923      	ldr	r3, [r4, #16]
 8015032:	6820      	ldr	r0, [r4, #0]
 8015034:	1ac0      	subs	r0, r0, r3
 8015036:	6963      	ldr	r3, [r4, #20]
 8015038:	b2f6      	uxtb	r6, r6
 801503a:	4283      	cmp	r3, r0
 801503c:	4637      	mov	r7, r6
 801503e:	dc04      	bgt.n	801504a <__swbuf_r+0x42>
 8015040:	4621      	mov	r1, r4
 8015042:	4628      	mov	r0, r5
 8015044:	f000 f926 	bl	8015294 <_fflush_r>
 8015048:	bb30      	cbnz	r0, 8015098 <__swbuf_r+0x90>
 801504a:	68a3      	ldr	r3, [r4, #8]
 801504c:	3b01      	subs	r3, #1
 801504e:	60a3      	str	r3, [r4, #8]
 8015050:	6823      	ldr	r3, [r4, #0]
 8015052:	1c5a      	adds	r2, r3, #1
 8015054:	6022      	str	r2, [r4, #0]
 8015056:	701e      	strb	r6, [r3, #0]
 8015058:	6963      	ldr	r3, [r4, #20]
 801505a:	3001      	adds	r0, #1
 801505c:	4283      	cmp	r3, r0
 801505e:	d004      	beq.n	801506a <__swbuf_r+0x62>
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	07db      	lsls	r3, r3, #31
 8015064:	d506      	bpl.n	8015074 <__swbuf_r+0x6c>
 8015066:	2e0a      	cmp	r6, #10
 8015068:	d104      	bne.n	8015074 <__swbuf_r+0x6c>
 801506a:	4621      	mov	r1, r4
 801506c:	4628      	mov	r0, r5
 801506e:	f000 f911 	bl	8015294 <_fflush_r>
 8015072:	b988      	cbnz	r0, 8015098 <__swbuf_r+0x90>
 8015074:	4638      	mov	r0, r7
 8015076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015078:	4b0a      	ldr	r3, [pc, #40]	; (80150a4 <__swbuf_r+0x9c>)
 801507a:	429c      	cmp	r4, r3
 801507c:	d101      	bne.n	8015082 <__swbuf_r+0x7a>
 801507e:	68ac      	ldr	r4, [r5, #8]
 8015080:	e7cf      	b.n	8015022 <__swbuf_r+0x1a>
 8015082:	4b09      	ldr	r3, [pc, #36]	; (80150a8 <__swbuf_r+0xa0>)
 8015084:	429c      	cmp	r4, r3
 8015086:	bf08      	it	eq
 8015088:	68ec      	ldreq	r4, [r5, #12]
 801508a:	e7ca      	b.n	8015022 <__swbuf_r+0x1a>
 801508c:	4621      	mov	r1, r4
 801508e:	4628      	mov	r0, r5
 8015090:	f000 f80c 	bl	80150ac <__swsetup_r>
 8015094:	2800      	cmp	r0, #0
 8015096:	d0cb      	beq.n	8015030 <__swbuf_r+0x28>
 8015098:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801509c:	e7ea      	b.n	8015074 <__swbuf_r+0x6c>
 801509e:	bf00      	nop
 80150a0:	08016118 	.word	0x08016118
 80150a4:	08016138 	.word	0x08016138
 80150a8:	080160f8 	.word	0x080160f8

080150ac <__swsetup_r>:
 80150ac:	4b32      	ldr	r3, [pc, #200]	; (8015178 <__swsetup_r+0xcc>)
 80150ae:	b570      	push	{r4, r5, r6, lr}
 80150b0:	681d      	ldr	r5, [r3, #0]
 80150b2:	4606      	mov	r6, r0
 80150b4:	460c      	mov	r4, r1
 80150b6:	b125      	cbz	r5, 80150c2 <__swsetup_r+0x16>
 80150b8:	69ab      	ldr	r3, [r5, #24]
 80150ba:	b913      	cbnz	r3, 80150c2 <__swsetup_r+0x16>
 80150bc:	4628      	mov	r0, r5
 80150be:	f000 f97d 	bl	80153bc <__sinit>
 80150c2:	4b2e      	ldr	r3, [pc, #184]	; (801517c <__swsetup_r+0xd0>)
 80150c4:	429c      	cmp	r4, r3
 80150c6:	d10f      	bne.n	80150e8 <__swsetup_r+0x3c>
 80150c8:	686c      	ldr	r4, [r5, #4]
 80150ca:	89a3      	ldrh	r3, [r4, #12]
 80150cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80150d0:	0719      	lsls	r1, r3, #28
 80150d2:	d42c      	bmi.n	801512e <__swsetup_r+0x82>
 80150d4:	06dd      	lsls	r5, r3, #27
 80150d6:	d411      	bmi.n	80150fc <__swsetup_r+0x50>
 80150d8:	2309      	movs	r3, #9
 80150da:	6033      	str	r3, [r6, #0]
 80150dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80150e0:	81a3      	strh	r3, [r4, #12]
 80150e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150e6:	e03e      	b.n	8015166 <__swsetup_r+0xba>
 80150e8:	4b25      	ldr	r3, [pc, #148]	; (8015180 <__swsetup_r+0xd4>)
 80150ea:	429c      	cmp	r4, r3
 80150ec:	d101      	bne.n	80150f2 <__swsetup_r+0x46>
 80150ee:	68ac      	ldr	r4, [r5, #8]
 80150f0:	e7eb      	b.n	80150ca <__swsetup_r+0x1e>
 80150f2:	4b24      	ldr	r3, [pc, #144]	; (8015184 <__swsetup_r+0xd8>)
 80150f4:	429c      	cmp	r4, r3
 80150f6:	bf08      	it	eq
 80150f8:	68ec      	ldreq	r4, [r5, #12]
 80150fa:	e7e6      	b.n	80150ca <__swsetup_r+0x1e>
 80150fc:	0758      	lsls	r0, r3, #29
 80150fe:	d512      	bpl.n	8015126 <__swsetup_r+0x7a>
 8015100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015102:	b141      	cbz	r1, 8015116 <__swsetup_r+0x6a>
 8015104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015108:	4299      	cmp	r1, r3
 801510a:	d002      	beq.n	8015112 <__swsetup_r+0x66>
 801510c:	4630      	mov	r0, r6
 801510e:	f7ff fdfd 	bl	8014d0c <_free_r>
 8015112:	2300      	movs	r3, #0
 8015114:	6363      	str	r3, [r4, #52]	; 0x34
 8015116:	89a3      	ldrh	r3, [r4, #12]
 8015118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801511c:	81a3      	strh	r3, [r4, #12]
 801511e:	2300      	movs	r3, #0
 8015120:	6063      	str	r3, [r4, #4]
 8015122:	6923      	ldr	r3, [r4, #16]
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	89a3      	ldrh	r3, [r4, #12]
 8015128:	f043 0308 	orr.w	r3, r3, #8
 801512c:	81a3      	strh	r3, [r4, #12]
 801512e:	6923      	ldr	r3, [r4, #16]
 8015130:	b94b      	cbnz	r3, 8015146 <__swsetup_r+0x9a>
 8015132:	89a3      	ldrh	r3, [r4, #12]
 8015134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801513c:	d003      	beq.n	8015146 <__swsetup_r+0x9a>
 801513e:	4621      	mov	r1, r4
 8015140:	4630      	mov	r0, r6
 8015142:	f000 fa01 	bl	8015548 <__smakebuf_r>
 8015146:	89a0      	ldrh	r0, [r4, #12]
 8015148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801514c:	f010 0301 	ands.w	r3, r0, #1
 8015150:	d00a      	beq.n	8015168 <__swsetup_r+0xbc>
 8015152:	2300      	movs	r3, #0
 8015154:	60a3      	str	r3, [r4, #8]
 8015156:	6963      	ldr	r3, [r4, #20]
 8015158:	425b      	negs	r3, r3
 801515a:	61a3      	str	r3, [r4, #24]
 801515c:	6923      	ldr	r3, [r4, #16]
 801515e:	b943      	cbnz	r3, 8015172 <__swsetup_r+0xc6>
 8015160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015164:	d1ba      	bne.n	80150dc <__swsetup_r+0x30>
 8015166:	bd70      	pop	{r4, r5, r6, pc}
 8015168:	0781      	lsls	r1, r0, #30
 801516a:	bf58      	it	pl
 801516c:	6963      	ldrpl	r3, [r4, #20]
 801516e:	60a3      	str	r3, [r4, #8]
 8015170:	e7f4      	b.n	801515c <__swsetup_r+0xb0>
 8015172:	2000      	movs	r0, #0
 8015174:	e7f7      	b.n	8015166 <__swsetup_r+0xba>
 8015176:	bf00      	nop
 8015178:	2400009c 	.word	0x2400009c
 801517c:	08016118 	.word	0x08016118
 8015180:	08016138 	.word	0x08016138
 8015184:	080160f8 	.word	0x080160f8

08015188 <__sflush_r>:
 8015188:	898a      	ldrh	r2, [r1, #12]
 801518a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801518e:	4605      	mov	r5, r0
 8015190:	0710      	lsls	r0, r2, #28
 8015192:	460c      	mov	r4, r1
 8015194:	d458      	bmi.n	8015248 <__sflush_r+0xc0>
 8015196:	684b      	ldr	r3, [r1, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	dc05      	bgt.n	80151a8 <__sflush_r+0x20>
 801519c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801519e:	2b00      	cmp	r3, #0
 80151a0:	dc02      	bgt.n	80151a8 <__sflush_r+0x20>
 80151a2:	2000      	movs	r0, #0
 80151a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151aa:	2e00      	cmp	r6, #0
 80151ac:	d0f9      	beq.n	80151a2 <__sflush_r+0x1a>
 80151ae:	2300      	movs	r3, #0
 80151b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80151b4:	682f      	ldr	r7, [r5, #0]
 80151b6:	602b      	str	r3, [r5, #0]
 80151b8:	d032      	beq.n	8015220 <__sflush_r+0x98>
 80151ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	075a      	lsls	r2, r3, #29
 80151c0:	d505      	bpl.n	80151ce <__sflush_r+0x46>
 80151c2:	6863      	ldr	r3, [r4, #4]
 80151c4:	1ac0      	subs	r0, r0, r3
 80151c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151c8:	b10b      	cbz	r3, 80151ce <__sflush_r+0x46>
 80151ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151cc:	1ac0      	subs	r0, r0, r3
 80151ce:	2300      	movs	r3, #0
 80151d0:	4602      	mov	r2, r0
 80151d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151d4:	6a21      	ldr	r1, [r4, #32]
 80151d6:	4628      	mov	r0, r5
 80151d8:	47b0      	blx	r6
 80151da:	1c43      	adds	r3, r0, #1
 80151dc:	89a3      	ldrh	r3, [r4, #12]
 80151de:	d106      	bne.n	80151ee <__sflush_r+0x66>
 80151e0:	6829      	ldr	r1, [r5, #0]
 80151e2:	291d      	cmp	r1, #29
 80151e4:	d82c      	bhi.n	8015240 <__sflush_r+0xb8>
 80151e6:	4a2a      	ldr	r2, [pc, #168]	; (8015290 <__sflush_r+0x108>)
 80151e8:	40ca      	lsrs	r2, r1
 80151ea:	07d6      	lsls	r6, r2, #31
 80151ec:	d528      	bpl.n	8015240 <__sflush_r+0xb8>
 80151ee:	2200      	movs	r2, #0
 80151f0:	6062      	str	r2, [r4, #4]
 80151f2:	04d9      	lsls	r1, r3, #19
 80151f4:	6922      	ldr	r2, [r4, #16]
 80151f6:	6022      	str	r2, [r4, #0]
 80151f8:	d504      	bpl.n	8015204 <__sflush_r+0x7c>
 80151fa:	1c42      	adds	r2, r0, #1
 80151fc:	d101      	bne.n	8015202 <__sflush_r+0x7a>
 80151fe:	682b      	ldr	r3, [r5, #0]
 8015200:	b903      	cbnz	r3, 8015204 <__sflush_r+0x7c>
 8015202:	6560      	str	r0, [r4, #84]	; 0x54
 8015204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015206:	602f      	str	r7, [r5, #0]
 8015208:	2900      	cmp	r1, #0
 801520a:	d0ca      	beq.n	80151a2 <__sflush_r+0x1a>
 801520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015210:	4299      	cmp	r1, r3
 8015212:	d002      	beq.n	801521a <__sflush_r+0x92>
 8015214:	4628      	mov	r0, r5
 8015216:	f7ff fd79 	bl	8014d0c <_free_r>
 801521a:	2000      	movs	r0, #0
 801521c:	6360      	str	r0, [r4, #52]	; 0x34
 801521e:	e7c1      	b.n	80151a4 <__sflush_r+0x1c>
 8015220:	6a21      	ldr	r1, [r4, #32]
 8015222:	2301      	movs	r3, #1
 8015224:	4628      	mov	r0, r5
 8015226:	47b0      	blx	r6
 8015228:	1c41      	adds	r1, r0, #1
 801522a:	d1c7      	bne.n	80151bc <__sflush_r+0x34>
 801522c:	682b      	ldr	r3, [r5, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d0c4      	beq.n	80151bc <__sflush_r+0x34>
 8015232:	2b1d      	cmp	r3, #29
 8015234:	d001      	beq.n	801523a <__sflush_r+0xb2>
 8015236:	2b16      	cmp	r3, #22
 8015238:	d101      	bne.n	801523e <__sflush_r+0xb6>
 801523a:	602f      	str	r7, [r5, #0]
 801523c:	e7b1      	b.n	80151a2 <__sflush_r+0x1a>
 801523e:	89a3      	ldrh	r3, [r4, #12]
 8015240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015244:	81a3      	strh	r3, [r4, #12]
 8015246:	e7ad      	b.n	80151a4 <__sflush_r+0x1c>
 8015248:	690f      	ldr	r7, [r1, #16]
 801524a:	2f00      	cmp	r7, #0
 801524c:	d0a9      	beq.n	80151a2 <__sflush_r+0x1a>
 801524e:	0793      	lsls	r3, r2, #30
 8015250:	680e      	ldr	r6, [r1, #0]
 8015252:	bf08      	it	eq
 8015254:	694b      	ldreq	r3, [r1, #20]
 8015256:	600f      	str	r7, [r1, #0]
 8015258:	bf18      	it	ne
 801525a:	2300      	movne	r3, #0
 801525c:	eba6 0807 	sub.w	r8, r6, r7
 8015260:	608b      	str	r3, [r1, #8]
 8015262:	f1b8 0f00 	cmp.w	r8, #0
 8015266:	dd9c      	ble.n	80151a2 <__sflush_r+0x1a>
 8015268:	6a21      	ldr	r1, [r4, #32]
 801526a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801526c:	4643      	mov	r3, r8
 801526e:	463a      	mov	r2, r7
 8015270:	4628      	mov	r0, r5
 8015272:	47b0      	blx	r6
 8015274:	2800      	cmp	r0, #0
 8015276:	dc06      	bgt.n	8015286 <__sflush_r+0xfe>
 8015278:	89a3      	ldrh	r3, [r4, #12]
 801527a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801527e:	81a3      	strh	r3, [r4, #12]
 8015280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015284:	e78e      	b.n	80151a4 <__sflush_r+0x1c>
 8015286:	4407      	add	r7, r0
 8015288:	eba8 0800 	sub.w	r8, r8, r0
 801528c:	e7e9      	b.n	8015262 <__sflush_r+0xda>
 801528e:	bf00      	nop
 8015290:	20400001 	.word	0x20400001

08015294 <_fflush_r>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	690b      	ldr	r3, [r1, #16]
 8015298:	4605      	mov	r5, r0
 801529a:	460c      	mov	r4, r1
 801529c:	b913      	cbnz	r3, 80152a4 <_fflush_r+0x10>
 801529e:	2500      	movs	r5, #0
 80152a0:	4628      	mov	r0, r5
 80152a2:	bd38      	pop	{r3, r4, r5, pc}
 80152a4:	b118      	cbz	r0, 80152ae <_fflush_r+0x1a>
 80152a6:	6983      	ldr	r3, [r0, #24]
 80152a8:	b90b      	cbnz	r3, 80152ae <_fflush_r+0x1a>
 80152aa:	f000 f887 	bl	80153bc <__sinit>
 80152ae:	4b14      	ldr	r3, [pc, #80]	; (8015300 <_fflush_r+0x6c>)
 80152b0:	429c      	cmp	r4, r3
 80152b2:	d11b      	bne.n	80152ec <_fflush_r+0x58>
 80152b4:	686c      	ldr	r4, [r5, #4]
 80152b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d0ef      	beq.n	801529e <_fflush_r+0xa>
 80152be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80152c0:	07d0      	lsls	r0, r2, #31
 80152c2:	d404      	bmi.n	80152ce <_fflush_r+0x3a>
 80152c4:	0599      	lsls	r1, r3, #22
 80152c6:	d402      	bmi.n	80152ce <_fflush_r+0x3a>
 80152c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152ca:	f000 f915 	bl	80154f8 <__retarget_lock_acquire_recursive>
 80152ce:	4628      	mov	r0, r5
 80152d0:	4621      	mov	r1, r4
 80152d2:	f7ff ff59 	bl	8015188 <__sflush_r>
 80152d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152d8:	07da      	lsls	r2, r3, #31
 80152da:	4605      	mov	r5, r0
 80152dc:	d4e0      	bmi.n	80152a0 <_fflush_r+0xc>
 80152de:	89a3      	ldrh	r3, [r4, #12]
 80152e0:	059b      	lsls	r3, r3, #22
 80152e2:	d4dd      	bmi.n	80152a0 <_fflush_r+0xc>
 80152e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152e6:	f000 f908 	bl	80154fa <__retarget_lock_release_recursive>
 80152ea:	e7d9      	b.n	80152a0 <_fflush_r+0xc>
 80152ec:	4b05      	ldr	r3, [pc, #20]	; (8015304 <_fflush_r+0x70>)
 80152ee:	429c      	cmp	r4, r3
 80152f0:	d101      	bne.n	80152f6 <_fflush_r+0x62>
 80152f2:	68ac      	ldr	r4, [r5, #8]
 80152f4:	e7df      	b.n	80152b6 <_fflush_r+0x22>
 80152f6:	4b04      	ldr	r3, [pc, #16]	; (8015308 <_fflush_r+0x74>)
 80152f8:	429c      	cmp	r4, r3
 80152fa:	bf08      	it	eq
 80152fc:	68ec      	ldreq	r4, [r5, #12]
 80152fe:	e7da      	b.n	80152b6 <_fflush_r+0x22>
 8015300:	08016118 	.word	0x08016118
 8015304:	08016138 	.word	0x08016138
 8015308:	080160f8 	.word	0x080160f8

0801530c <std>:
 801530c:	2300      	movs	r3, #0
 801530e:	b510      	push	{r4, lr}
 8015310:	4604      	mov	r4, r0
 8015312:	e9c0 3300 	strd	r3, r3, [r0]
 8015316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801531a:	6083      	str	r3, [r0, #8]
 801531c:	8181      	strh	r1, [r0, #12]
 801531e:	6643      	str	r3, [r0, #100]	; 0x64
 8015320:	81c2      	strh	r2, [r0, #14]
 8015322:	6183      	str	r3, [r0, #24]
 8015324:	4619      	mov	r1, r3
 8015326:	2208      	movs	r2, #8
 8015328:	305c      	adds	r0, #92	; 0x5c
 801532a:	f7ff fce7 	bl	8014cfc <memset>
 801532e:	4b05      	ldr	r3, [pc, #20]	; (8015344 <std+0x38>)
 8015330:	6263      	str	r3, [r4, #36]	; 0x24
 8015332:	4b05      	ldr	r3, [pc, #20]	; (8015348 <std+0x3c>)
 8015334:	62a3      	str	r3, [r4, #40]	; 0x28
 8015336:	4b05      	ldr	r3, [pc, #20]	; (801534c <std+0x40>)
 8015338:	62e3      	str	r3, [r4, #44]	; 0x2c
 801533a:	4b05      	ldr	r3, [pc, #20]	; (8015350 <std+0x44>)
 801533c:	6224      	str	r4, [r4, #32]
 801533e:	6323      	str	r3, [r4, #48]	; 0x30
 8015340:	bd10      	pop	{r4, pc}
 8015342:	bf00      	nop
 8015344:	08015bbd 	.word	0x08015bbd
 8015348:	08015bdf 	.word	0x08015bdf
 801534c:	08015c17 	.word	0x08015c17
 8015350:	08015c3b 	.word	0x08015c3b

08015354 <_cleanup_r>:
 8015354:	4901      	ldr	r1, [pc, #4]	; (801535c <_cleanup_r+0x8>)
 8015356:	f000 b8af 	b.w	80154b8 <_fwalk_reent>
 801535a:	bf00      	nop
 801535c:	08015295 	.word	0x08015295

08015360 <__sfmoreglue>:
 8015360:	b570      	push	{r4, r5, r6, lr}
 8015362:	2268      	movs	r2, #104	; 0x68
 8015364:	1e4d      	subs	r5, r1, #1
 8015366:	4355      	muls	r5, r2
 8015368:	460e      	mov	r6, r1
 801536a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801536e:	f7ff fd39 	bl	8014de4 <_malloc_r>
 8015372:	4604      	mov	r4, r0
 8015374:	b140      	cbz	r0, 8015388 <__sfmoreglue+0x28>
 8015376:	2100      	movs	r1, #0
 8015378:	e9c0 1600 	strd	r1, r6, [r0]
 801537c:	300c      	adds	r0, #12
 801537e:	60a0      	str	r0, [r4, #8]
 8015380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015384:	f7ff fcba 	bl	8014cfc <memset>
 8015388:	4620      	mov	r0, r4
 801538a:	bd70      	pop	{r4, r5, r6, pc}

0801538c <__sfp_lock_acquire>:
 801538c:	4801      	ldr	r0, [pc, #4]	; (8015394 <__sfp_lock_acquire+0x8>)
 801538e:	f000 b8b3 	b.w	80154f8 <__retarget_lock_acquire_recursive>
 8015392:	bf00      	nop
 8015394:	24005595 	.word	0x24005595

08015398 <__sfp_lock_release>:
 8015398:	4801      	ldr	r0, [pc, #4]	; (80153a0 <__sfp_lock_release+0x8>)
 801539a:	f000 b8ae 	b.w	80154fa <__retarget_lock_release_recursive>
 801539e:	bf00      	nop
 80153a0:	24005595 	.word	0x24005595

080153a4 <__sinit_lock_acquire>:
 80153a4:	4801      	ldr	r0, [pc, #4]	; (80153ac <__sinit_lock_acquire+0x8>)
 80153a6:	f000 b8a7 	b.w	80154f8 <__retarget_lock_acquire_recursive>
 80153aa:	bf00      	nop
 80153ac:	24005596 	.word	0x24005596

080153b0 <__sinit_lock_release>:
 80153b0:	4801      	ldr	r0, [pc, #4]	; (80153b8 <__sinit_lock_release+0x8>)
 80153b2:	f000 b8a2 	b.w	80154fa <__retarget_lock_release_recursive>
 80153b6:	bf00      	nop
 80153b8:	24005596 	.word	0x24005596

080153bc <__sinit>:
 80153bc:	b510      	push	{r4, lr}
 80153be:	4604      	mov	r4, r0
 80153c0:	f7ff fff0 	bl	80153a4 <__sinit_lock_acquire>
 80153c4:	69a3      	ldr	r3, [r4, #24]
 80153c6:	b11b      	cbz	r3, 80153d0 <__sinit+0x14>
 80153c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153cc:	f7ff bff0 	b.w	80153b0 <__sinit_lock_release>
 80153d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80153d4:	6523      	str	r3, [r4, #80]	; 0x50
 80153d6:	4b13      	ldr	r3, [pc, #76]	; (8015424 <__sinit+0x68>)
 80153d8:	4a13      	ldr	r2, [pc, #76]	; (8015428 <__sinit+0x6c>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80153de:	42a3      	cmp	r3, r4
 80153e0:	bf04      	itt	eq
 80153e2:	2301      	moveq	r3, #1
 80153e4:	61a3      	streq	r3, [r4, #24]
 80153e6:	4620      	mov	r0, r4
 80153e8:	f000 f820 	bl	801542c <__sfp>
 80153ec:	6060      	str	r0, [r4, #4]
 80153ee:	4620      	mov	r0, r4
 80153f0:	f000 f81c 	bl	801542c <__sfp>
 80153f4:	60a0      	str	r0, [r4, #8]
 80153f6:	4620      	mov	r0, r4
 80153f8:	f000 f818 	bl	801542c <__sfp>
 80153fc:	2200      	movs	r2, #0
 80153fe:	60e0      	str	r0, [r4, #12]
 8015400:	2104      	movs	r1, #4
 8015402:	6860      	ldr	r0, [r4, #4]
 8015404:	f7ff ff82 	bl	801530c <std>
 8015408:	68a0      	ldr	r0, [r4, #8]
 801540a:	2201      	movs	r2, #1
 801540c:	2109      	movs	r1, #9
 801540e:	f7ff ff7d 	bl	801530c <std>
 8015412:	68e0      	ldr	r0, [r4, #12]
 8015414:	2202      	movs	r2, #2
 8015416:	2112      	movs	r1, #18
 8015418:	f7ff ff78 	bl	801530c <std>
 801541c:	2301      	movs	r3, #1
 801541e:	61a3      	str	r3, [r4, #24]
 8015420:	e7d2      	b.n	80153c8 <__sinit+0xc>
 8015422:	bf00      	nop
 8015424:	080160f4 	.word	0x080160f4
 8015428:	08015355 	.word	0x08015355

0801542c <__sfp>:
 801542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801542e:	4607      	mov	r7, r0
 8015430:	f7ff ffac 	bl	801538c <__sfp_lock_acquire>
 8015434:	4b1e      	ldr	r3, [pc, #120]	; (80154b0 <__sfp+0x84>)
 8015436:	681e      	ldr	r6, [r3, #0]
 8015438:	69b3      	ldr	r3, [r6, #24]
 801543a:	b913      	cbnz	r3, 8015442 <__sfp+0x16>
 801543c:	4630      	mov	r0, r6
 801543e:	f7ff ffbd 	bl	80153bc <__sinit>
 8015442:	3648      	adds	r6, #72	; 0x48
 8015444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015448:	3b01      	subs	r3, #1
 801544a:	d503      	bpl.n	8015454 <__sfp+0x28>
 801544c:	6833      	ldr	r3, [r6, #0]
 801544e:	b30b      	cbz	r3, 8015494 <__sfp+0x68>
 8015450:	6836      	ldr	r6, [r6, #0]
 8015452:	e7f7      	b.n	8015444 <__sfp+0x18>
 8015454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015458:	b9d5      	cbnz	r5, 8015490 <__sfp+0x64>
 801545a:	4b16      	ldr	r3, [pc, #88]	; (80154b4 <__sfp+0x88>)
 801545c:	60e3      	str	r3, [r4, #12]
 801545e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015462:	6665      	str	r5, [r4, #100]	; 0x64
 8015464:	f000 f847 	bl	80154f6 <__retarget_lock_init_recursive>
 8015468:	f7ff ff96 	bl	8015398 <__sfp_lock_release>
 801546c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015474:	6025      	str	r5, [r4, #0]
 8015476:	61a5      	str	r5, [r4, #24]
 8015478:	2208      	movs	r2, #8
 801547a:	4629      	mov	r1, r5
 801547c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015480:	f7ff fc3c 	bl	8014cfc <memset>
 8015484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801548c:	4620      	mov	r0, r4
 801548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015490:	3468      	adds	r4, #104	; 0x68
 8015492:	e7d9      	b.n	8015448 <__sfp+0x1c>
 8015494:	2104      	movs	r1, #4
 8015496:	4638      	mov	r0, r7
 8015498:	f7ff ff62 	bl	8015360 <__sfmoreglue>
 801549c:	4604      	mov	r4, r0
 801549e:	6030      	str	r0, [r6, #0]
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d1d5      	bne.n	8015450 <__sfp+0x24>
 80154a4:	f7ff ff78 	bl	8015398 <__sfp_lock_release>
 80154a8:	230c      	movs	r3, #12
 80154aa:	603b      	str	r3, [r7, #0]
 80154ac:	e7ee      	b.n	801548c <__sfp+0x60>
 80154ae:	bf00      	nop
 80154b0:	080160f4 	.word	0x080160f4
 80154b4:	ffff0001 	.word	0xffff0001

080154b8 <_fwalk_reent>:
 80154b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154bc:	4606      	mov	r6, r0
 80154be:	4688      	mov	r8, r1
 80154c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80154c4:	2700      	movs	r7, #0
 80154c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80154ca:	f1b9 0901 	subs.w	r9, r9, #1
 80154ce:	d505      	bpl.n	80154dc <_fwalk_reent+0x24>
 80154d0:	6824      	ldr	r4, [r4, #0]
 80154d2:	2c00      	cmp	r4, #0
 80154d4:	d1f7      	bne.n	80154c6 <_fwalk_reent+0xe>
 80154d6:	4638      	mov	r0, r7
 80154d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154dc:	89ab      	ldrh	r3, [r5, #12]
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d907      	bls.n	80154f2 <_fwalk_reent+0x3a>
 80154e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80154e6:	3301      	adds	r3, #1
 80154e8:	d003      	beq.n	80154f2 <_fwalk_reent+0x3a>
 80154ea:	4629      	mov	r1, r5
 80154ec:	4630      	mov	r0, r6
 80154ee:	47c0      	blx	r8
 80154f0:	4307      	orrs	r7, r0
 80154f2:	3568      	adds	r5, #104	; 0x68
 80154f4:	e7e9      	b.n	80154ca <_fwalk_reent+0x12>

080154f6 <__retarget_lock_init_recursive>:
 80154f6:	4770      	bx	lr

080154f8 <__retarget_lock_acquire_recursive>:
 80154f8:	4770      	bx	lr

080154fa <__retarget_lock_release_recursive>:
 80154fa:	4770      	bx	lr

080154fc <__swhatbuf_r>:
 80154fc:	b570      	push	{r4, r5, r6, lr}
 80154fe:	460e      	mov	r6, r1
 8015500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015504:	2900      	cmp	r1, #0
 8015506:	b096      	sub	sp, #88	; 0x58
 8015508:	4614      	mov	r4, r2
 801550a:	461d      	mov	r5, r3
 801550c:	da08      	bge.n	8015520 <__swhatbuf_r+0x24>
 801550e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015512:	2200      	movs	r2, #0
 8015514:	602a      	str	r2, [r5, #0]
 8015516:	061a      	lsls	r2, r3, #24
 8015518:	d410      	bmi.n	801553c <__swhatbuf_r+0x40>
 801551a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801551e:	e00e      	b.n	801553e <__swhatbuf_r+0x42>
 8015520:	466a      	mov	r2, sp
 8015522:	f000 fbb1 	bl	8015c88 <_fstat_r>
 8015526:	2800      	cmp	r0, #0
 8015528:	dbf1      	blt.n	801550e <__swhatbuf_r+0x12>
 801552a:	9a01      	ldr	r2, [sp, #4]
 801552c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015534:	425a      	negs	r2, r3
 8015536:	415a      	adcs	r2, r3
 8015538:	602a      	str	r2, [r5, #0]
 801553a:	e7ee      	b.n	801551a <__swhatbuf_r+0x1e>
 801553c:	2340      	movs	r3, #64	; 0x40
 801553e:	2000      	movs	r0, #0
 8015540:	6023      	str	r3, [r4, #0]
 8015542:	b016      	add	sp, #88	; 0x58
 8015544:	bd70      	pop	{r4, r5, r6, pc}
	...

08015548 <__smakebuf_r>:
 8015548:	898b      	ldrh	r3, [r1, #12]
 801554a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801554c:	079d      	lsls	r5, r3, #30
 801554e:	4606      	mov	r6, r0
 8015550:	460c      	mov	r4, r1
 8015552:	d507      	bpl.n	8015564 <__smakebuf_r+0x1c>
 8015554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015558:	6023      	str	r3, [r4, #0]
 801555a:	6123      	str	r3, [r4, #16]
 801555c:	2301      	movs	r3, #1
 801555e:	6163      	str	r3, [r4, #20]
 8015560:	b002      	add	sp, #8
 8015562:	bd70      	pop	{r4, r5, r6, pc}
 8015564:	ab01      	add	r3, sp, #4
 8015566:	466a      	mov	r2, sp
 8015568:	f7ff ffc8 	bl	80154fc <__swhatbuf_r>
 801556c:	9900      	ldr	r1, [sp, #0]
 801556e:	4605      	mov	r5, r0
 8015570:	4630      	mov	r0, r6
 8015572:	f7ff fc37 	bl	8014de4 <_malloc_r>
 8015576:	b948      	cbnz	r0, 801558c <__smakebuf_r+0x44>
 8015578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801557c:	059a      	lsls	r2, r3, #22
 801557e:	d4ef      	bmi.n	8015560 <__smakebuf_r+0x18>
 8015580:	f023 0303 	bic.w	r3, r3, #3
 8015584:	f043 0302 	orr.w	r3, r3, #2
 8015588:	81a3      	strh	r3, [r4, #12]
 801558a:	e7e3      	b.n	8015554 <__smakebuf_r+0xc>
 801558c:	4b0d      	ldr	r3, [pc, #52]	; (80155c4 <__smakebuf_r+0x7c>)
 801558e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015590:	89a3      	ldrh	r3, [r4, #12]
 8015592:	6020      	str	r0, [r4, #0]
 8015594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015598:	81a3      	strh	r3, [r4, #12]
 801559a:	9b00      	ldr	r3, [sp, #0]
 801559c:	6163      	str	r3, [r4, #20]
 801559e:	9b01      	ldr	r3, [sp, #4]
 80155a0:	6120      	str	r0, [r4, #16]
 80155a2:	b15b      	cbz	r3, 80155bc <__smakebuf_r+0x74>
 80155a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155a8:	4630      	mov	r0, r6
 80155aa:	f000 fb7f 	bl	8015cac <_isatty_r>
 80155ae:	b128      	cbz	r0, 80155bc <__smakebuf_r+0x74>
 80155b0:	89a3      	ldrh	r3, [r4, #12]
 80155b2:	f023 0303 	bic.w	r3, r3, #3
 80155b6:	f043 0301 	orr.w	r3, r3, #1
 80155ba:	81a3      	strh	r3, [r4, #12]
 80155bc:	89a0      	ldrh	r0, [r4, #12]
 80155be:	4305      	orrs	r5, r0
 80155c0:	81a5      	strh	r5, [r4, #12]
 80155c2:	e7cd      	b.n	8015560 <__smakebuf_r+0x18>
 80155c4:	08015355 	.word	0x08015355

080155c8 <__malloc_lock>:
 80155c8:	4801      	ldr	r0, [pc, #4]	; (80155d0 <__malloc_lock+0x8>)
 80155ca:	f7ff bf95 	b.w	80154f8 <__retarget_lock_acquire_recursive>
 80155ce:	bf00      	nop
 80155d0:	24005594 	.word	0x24005594

080155d4 <__malloc_unlock>:
 80155d4:	4801      	ldr	r0, [pc, #4]	; (80155dc <__malloc_unlock+0x8>)
 80155d6:	f7ff bf90 	b.w	80154fa <__retarget_lock_release_recursive>
 80155da:	bf00      	nop
 80155dc:	24005594 	.word	0x24005594

080155e0 <__sfputc_r>:
 80155e0:	6893      	ldr	r3, [r2, #8]
 80155e2:	3b01      	subs	r3, #1
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	b410      	push	{r4}
 80155e8:	6093      	str	r3, [r2, #8]
 80155ea:	da08      	bge.n	80155fe <__sfputc_r+0x1e>
 80155ec:	6994      	ldr	r4, [r2, #24]
 80155ee:	42a3      	cmp	r3, r4
 80155f0:	db01      	blt.n	80155f6 <__sfputc_r+0x16>
 80155f2:	290a      	cmp	r1, #10
 80155f4:	d103      	bne.n	80155fe <__sfputc_r+0x1e>
 80155f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155fa:	f7ff bd05 	b.w	8015008 <__swbuf_r>
 80155fe:	6813      	ldr	r3, [r2, #0]
 8015600:	1c58      	adds	r0, r3, #1
 8015602:	6010      	str	r0, [r2, #0]
 8015604:	7019      	strb	r1, [r3, #0]
 8015606:	4608      	mov	r0, r1
 8015608:	f85d 4b04 	ldr.w	r4, [sp], #4
 801560c:	4770      	bx	lr

0801560e <__sfputs_r>:
 801560e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015610:	4606      	mov	r6, r0
 8015612:	460f      	mov	r7, r1
 8015614:	4614      	mov	r4, r2
 8015616:	18d5      	adds	r5, r2, r3
 8015618:	42ac      	cmp	r4, r5
 801561a:	d101      	bne.n	8015620 <__sfputs_r+0x12>
 801561c:	2000      	movs	r0, #0
 801561e:	e007      	b.n	8015630 <__sfputs_r+0x22>
 8015620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015624:	463a      	mov	r2, r7
 8015626:	4630      	mov	r0, r6
 8015628:	f7ff ffda 	bl	80155e0 <__sfputc_r>
 801562c:	1c43      	adds	r3, r0, #1
 801562e:	d1f3      	bne.n	8015618 <__sfputs_r+0xa>
 8015630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015634 <_vfiprintf_r>:
 8015634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015638:	460d      	mov	r5, r1
 801563a:	b09d      	sub	sp, #116	; 0x74
 801563c:	4614      	mov	r4, r2
 801563e:	4698      	mov	r8, r3
 8015640:	4606      	mov	r6, r0
 8015642:	b118      	cbz	r0, 801564c <_vfiprintf_r+0x18>
 8015644:	6983      	ldr	r3, [r0, #24]
 8015646:	b90b      	cbnz	r3, 801564c <_vfiprintf_r+0x18>
 8015648:	f7ff feb8 	bl	80153bc <__sinit>
 801564c:	4b89      	ldr	r3, [pc, #548]	; (8015874 <_vfiprintf_r+0x240>)
 801564e:	429d      	cmp	r5, r3
 8015650:	d11b      	bne.n	801568a <_vfiprintf_r+0x56>
 8015652:	6875      	ldr	r5, [r6, #4]
 8015654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015656:	07d9      	lsls	r1, r3, #31
 8015658:	d405      	bmi.n	8015666 <_vfiprintf_r+0x32>
 801565a:	89ab      	ldrh	r3, [r5, #12]
 801565c:	059a      	lsls	r2, r3, #22
 801565e:	d402      	bmi.n	8015666 <_vfiprintf_r+0x32>
 8015660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015662:	f7ff ff49 	bl	80154f8 <__retarget_lock_acquire_recursive>
 8015666:	89ab      	ldrh	r3, [r5, #12]
 8015668:	071b      	lsls	r3, r3, #28
 801566a:	d501      	bpl.n	8015670 <_vfiprintf_r+0x3c>
 801566c:	692b      	ldr	r3, [r5, #16]
 801566e:	b9eb      	cbnz	r3, 80156ac <_vfiprintf_r+0x78>
 8015670:	4629      	mov	r1, r5
 8015672:	4630      	mov	r0, r6
 8015674:	f7ff fd1a 	bl	80150ac <__swsetup_r>
 8015678:	b1c0      	cbz	r0, 80156ac <_vfiprintf_r+0x78>
 801567a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801567c:	07dc      	lsls	r4, r3, #31
 801567e:	d50e      	bpl.n	801569e <_vfiprintf_r+0x6a>
 8015680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015684:	b01d      	add	sp, #116	; 0x74
 8015686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801568a:	4b7b      	ldr	r3, [pc, #492]	; (8015878 <_vfiprintf_r+0x244>)
 801568c:	429d      	cmp	r5, r3
 801568e:	d101      	bne.n	8015694 <_vfiprintf_r+0x60>
 8015690:	68b5      	ldr	r5, [r6, #8]
 8015692:	e7df      	b.n	8015654 <_vfiprintf_r+0x20>
 8015694:	4b79      	ldr	r3, [pc, #484]	; (801587c <_vfiprintf_r+0x248>)
 8015696:	429d      	cmp	r5, r3
 8015698:	bf08      	it	eq
 801569a:	68f5      	ldreq	r5, [r6, #12]
 801569c:	e7da      	b.n	8015654 <_vfiprintf_r+0x20>
 801569e:	89ab      	ldrh	r3, [r5, #12]
 80156a0:	0598      	lsls	r0, r3, #22
 80156a2:	d4ed      	bmi.n	8015680 <_vfiprintf_r+0x4c>
 80156a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156a6:	f7ff ff28 	bl	80154fa <__retarget_lock_release_recursive>
 80156aa:	e7e9      	b.n	8015680 <_vfiprintf_r+0x4c>
 80156ac:	2300      	movs	r3, #0
 80156ae:	9309      	str	r3, [sp, #36]	; 0x24
 80156b0:	2320      	movs	r3, #32
 80156b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80156ba:	2330      	movs	r3, #48	; 0x30
 80156bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015880 <_vfiprintf_r+0x24c>
 80156c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156c4:	f04f 0901 	mov.w	r9, #1
 80156c8:	4623      	mov	r3, r4
 80156ca:	469a      	mov	sl, r3
 80156cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156d0:	b10a      	cbz	r2, 80156d6 <_vfiprintf_r+0xa2>
 80156d2:	2a25      	cmp	r2, #37	; 0x25
 80156d4:	d1f9      	bne.n	80156ca <_vfiprintf_r+0x96>
 80156d6:	ebba 0b04 	subs.w	fp, sl, r4
 80156da:	d00b      	beq.n	80156f4 <_vfiprintf_r+0xc0>
 80156dc:	465b      	mov	r3, fp
 80156de:	4622      	mov	r2, r4
 80156e0:	4629      	mov	r1, r5
 80156e2:	4630      	mov	r0, r6
 80156e4:	f7ff ff93 	bl	801560e <__sfputs_r>
 80156e8:	3001      	adds	r0, #1
 80156ea:	f000 80aa 	beq.w	8015842 <_vfiprintf_r+0x20e>
 80156ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156f0:	445a      	add	r2, fp
 80156f2:	9209      	str	r2, [sp, #36]	; 0x24
 80156f4:	f89a 3000 	ldrb.w	r3, [sl]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	f000 80a2 	beq.w	8015842 <_vfiprintf_r+0x20e>
 80156fe:	2300      	movs	r3, #0
 8015700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015708:	f10a 0a01 	add.w	sl, sl, #1
 801570c:	9304      	str	r3, [sp, #16]
 801570e:	9307      	str	r3, [sp, #28]
 8015710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015714:	931a      	str	r3, [sp, #104]	; 0x68
 8015716:	4654      	mov	r4, sl
 8015718:	2205      	movs	r2, #5
 801571a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801571e:	4858      	ldr	r0, [pc, #352]	; (8015880 <_vfiprintf_r+0x24c>)
 8015720:	f7ea fdde 	bl	80002e0 <memchr>
 8015724:	9a04      	ldr	r2, [sp, #16]
 8015726:	b9d8      	cbnz	r0, 8015760 <_vfiprintf_r+0x12c>
 8015728:	06d1      	lsls	r1, r2, #27
 801572a:	bf44      	itt	mi
 801572c:	2320      	movmi	r3, #32
 801572e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015732:	0713      	lsls	r3, r2, #28
 8015734:	bf44      	itt	mi
 8015736:	232b      	movmi	r3, #43	; 0x2b
 8015738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801573c:	f89a 3000 	ldrb.w	r3, [sl]
 8015740:	2b2a      	cmp	r3, #42	; 0x2a
 8015742:	d015      	beq.n	8015770 <_vfiprintf_r+0x13c>
 8015744:	9a07      	ldr	r2, [sp, #28]
 8015746:	4654      	mov	r4, sl
 8015748:	2000      	movs	r0, #0
 801574a:	f04f 0c0a 	mov.w	ip, #10
 801574e:	4621      	mov	r1, r4
 8015750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015754:	3b30      	subs	r3, #48	; 0x30
 8015756:	2b09      	cmp	r3, #9
 8015758:	d94e      	bls.n	80157f8 <_vfiprintf_r+0x1c4>
 801575a:	b1b0      	cbz	r0, 801578a <_vfiprintf_r+0x156>
 801575c:	9207      	str	r2, [sp, #28]
 801575e:	e014      	b.n	801578a <_vfiprintf_r+0x156>
 8015760:	eba0 0308 	sub.w	r3, r0, r8
 8015764:	fa09 f303 	lsl.w	r3, r9, r3
 8015768:	4313      	orrs	r3, r2
 801576a:	9304      	str	r3, [sp, #16]
 801576c:	46a2      	mov	sl, r4
 801576e:	e7d2      	b.n	8015716 <_vfiprintf_r+0xe2>
 8015770:	9b03      	ldr	r3, [sp, #12]
 8015772:	1d19      	adds	r1, r3, #4
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	9103      	str	r1, [sp, #12]
 8015778:	2b00      	cmp	r3, #0
 801577a:	bfbb      	ittet	lt
 801577c:	425b      	neglt	r3, r3
 801577e:	f042 0202 	orrlt.w	r2, r2, #2
 8015782:	9307      	strge	r3, [sp, #28]
 8015784:	9307      	strlt	r3, [sp, #28]
 8015786:	bfb8      	it	lt
 8015788:	9204      	strlt	r2, [sp, #16]
 801578a:	7823      	ldrb	r3, [r4, #0]
 801578c:	2b2e      	cmp	r3, #46	; 0x2e
 801578e:	d10c      	bne.n	80157aa <_vfiprintf_r+0x176>
 8015790:	7863      	ldrb	r3, [r4, #1]
 8015792:	2b2a      	cmp	r3, #42	; 0x2a
 8015794:	d135      	bne.n	8015802 <_vfiprintf_r+0x1ce>
 8015796:	9b03      	ldr	r3, [sp, #12]
 8015798:	1d1a      	adds	r2, r3, #4
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	9203      	str	r2, [sp, #12]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	bfb8      	it	lt
 80157a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80157a6:	3402      	adds	r4, #2
 80157a8:	9305      	str	r3, [sp, #20]
 80157aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015890 <_vfiprintf_r+0x25c>
 80157ae:	7821      	ldrb	r1, [r4, #0]
 80157b0:	2203      	movs	r2, #3
 80157b2:	4650      	mov	r0, sl
 80157b4:	f7ea fd94 	bl	80002e0 <memchr>
 80157b8:	b140      	cbz	r0, 80157cc <_vfiprintf_r+0x198>
 80157ba:	2340      	movs	r3, #64	; 0x40
 80157bc:	eba0 000a 	sub.w	r0, r0, sl
 80157c0:	fa03 f000 	lsl.w	r0, r3, r0
 80157c4:	9b04      	ldr	r3, [sp, #16]
 80157c6:	4303      	orrs	r3, r0
 80157c8:	3401      	adds	r4, #1
 80157ca:	9304      	str	r3, [sp, #16]
 80157cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157d0:	482c      	ldr	r0, [pc, #176]	; (8015884 <_vfiprintf_r+0x250>)
 80157d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157d6:	2206      	movs	r2, #6
 80157d8:	f7ea fd82 	bl	80002e0 <memchr>
 80157dc:	2800      	cmp	r0, #0
 80157de:	d03f      	beq.n	8015860 <_vfiprintf_r+0x22c>
 80157e0:	4b29      	ldr	r3, [pc, #164]	; (8015888 <_vfiprintf_r+0x254>)
 80157e2:	bb1b      	cbnz	r3, 801582c <_vfiprintf_r+0x1f8>
 80157e4:	9b03      	ldr	r3, [sp, #12]
 80157e6:	3307      	adds	r3, #7
 80157e8:	f023 0307 	bic.w	r3, r3, #7
 80157ec:	3308      	adds	r3, #8
 80157ee:	9303      	str	r3, [sp, #12]
 80157f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f2:	443b      	add	r3, r7
 80157f4:	9309      	str	r3, [sp, #36]	; 0x24
 80157f6:	e767      	b.n	80156c8 <_vfiprintf_r+0x94>
 80157f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80157fc:	460c      	mov	r4, r1
 80157fe:	2001      	movs	r0, #1
 8015800:	e7a5      	b.n	801574e <_vfiprintf_r+0x11a>
 8015802:	2300      	movs	r3, #0
 8015804:	3401      	adds	r4, #1
 8015806:	9305      	str	r3, [sp, #20]
 8015808:	4619      	mov	r1, r3
 801580a:	f04f 0c0a 	mov.w	ip, #10
 801580e:	4620      	mov	r0, r4
 8015810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015814:	3a30      	subs	r2, #48	; 0x30
 8015816:	2a09      	cmp	r2, #9
 8015818:	d903      	bls.n	8015822 <_vfiprintf_r+0x1ee>
 801581a:	2b00      	cmp	r3, #0
 801581c:	d0c5      	beq.n	80157aa <_vfiprintf_r+0x176>
 801581e:	9105      	str	r1, [sp, #20]
 8015820:	e7c3      	b.n	80157aa <_vfiprintf_r+0x176>
 8015822:	fb0c 2101 	mla	r1, ip, r1, r2
 8015826:	4604      	mov	r4, r0
 8015828:	2301      	movs	r3, #1
 801582a:	e7f0      	b.n	801580e <_vfiprintf_r+0x1da>
 801582c:	ab03      	add	r3, sp, #12
 801582e:	9300      	str	r3, [sp, #0]
 8015830:	462a      	mov	r2, r5
 8015832:	4b16      	ldr	r3, [pc, #88]	; (801588c <_vfiprintf_r+0x258>)
 8015834:	a904      	add	r1, sp, #16
 8015836:	4630      	mov	r0, r6
 8015838:	f3af 8000 	nop.w
 801583c:	4607      	mov	r7, r0
 801583e:	1c78      	adds	r0, r7, #1
 8015840:	d1d6      	bne.n	80157f0 <_vfiprintf_r+0x1bc>
 8015842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015844:	07d9      	lsls	r1, r3, #31
 8015846:	d405      	bmi.n	8015854 <_vfiprintf_r+0x220>
 8015848:	89ab      	ldrh	r3, [r5, #12]
 801584a:	059a      	lsls	r2, r3, #22
 801584c:	d402      	bmi.n	8015854 <_vfiprintf_r+0x220>
 801584e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015850:	f7ff fe53 	bl	80154fa <__retarget_lock_release_recursive>
 8015854:	89ab      	ldrh	r3, [r5, #12]
 8015856:	065b      	lsls	r3, r3, #25
 8015858:	f53f af12 	bmi.w	8015680 <_vfiprintf_r+0x4c>
 801585c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801585e:	e711      	b.n	8015684 <_vfiprintf_r+0x50>
 8015860:	ab03      	add	r3, sp, #12
 8015862:	9300      	str	r3, [sp, #0]
 8015864:	462a      	mov	r2, r5
 8015866:	4b09      	ldr	r3, [pc, #36]	; (801588c <_vfiprintf_r+0x258>)
 8015868:	a904      	add	r1, sp, #16
 801586a:	4630      	mov	r0, r6
 801586c:	f000 f880 	bl	8015970 <_printf_i>
 8015870:	e7e4      	b.n	801583c <_vfiprintf_r+0x208>
 8015872:	bf00      	nop
 8015874:	08016118 	.word	0x08016118
 8015878:	08016138 	.word	0x08016138
 801587c:	080160f8 	.word	0x080160f8
 8015880:	08016158 	.word	0x08016158
 8015884:	08016162 	.word	0x08016162
 8015888:	00000000 	.word	0x00000000
 801588c:	0801560f 	.word	0x0801560f
 8015890:	0801615e 	.word	0x0801615e

08015894 <_printf_common>:
 8015894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015898:	4616      	mov	r6, r2
 801589a:	4699      	mov	r9, r3
 801589c:	688a      	ldr	r2, [r1, #8]
 801589e:	690b      	ldr	r3, [r1, #16]
 80158a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80158a4:	4293      	cmp	r3, r2
 80158a6:	bfb8      	it	lt
 80158a8:	4613      	movlt	r3, r2
 80158aa:	6033      	str	r3, [r6, #0]
 80158ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80158b0:	4607      	mov	r7, r0
 80158b2:	460c      	mov	r4, r1
 80158b4:	b10a      	cbz	r2, 80158ba <_printf_common+0x26>
 80158b6:	3301      	adds	r3, #1
 80158b8:	6033      	str	r3, [r6, #0]
 80158ba:	6823      	ldr	r3, [r4, #0]
 80158bc:	0699      	lsls	r1, r3, #26
 80158be:	bf42      	ittt	mi
 80158c0:	6833      	ldrmi	r3, [r6, #0]
 80158c2:	3302      	addmi	r3, #2
 80158c4:	6033      	strmi	r3, [r6, #0]
 80158c6:	6825      	ldr	r5, [r4, #0]
 80158c8:	f015 0506 	ands.w	r5, r5, #6
 80158cc:	d106      	bne.n	80158dc <_printf_common+0x48>
 80158ce:	f104 0a19 	add.w	sl, r4, #25
 80158d2:	68e3      	ldr	r3, [r4, #12]
 80158d4:	6832      	ldr	r2, [r6, #0]
 80158d6:	1a9b      	subs	r3, r3, r2
 80158d8:	42ab      	cmp	r3, r5
 80158da:	dc26      	bgt.n	801592a <_printf_common+0x96>
 80158dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80158e0:	1e13      	subs	r3, r2, #0
 80158e2:	6822      	ldr	r2, [r4, #0]
 80158e4:	bf18      	it	ne
 80158e6:	2301      	movne	r3, #1
 80158e8:	0692      	lsls	r2, r2, #26
 80158ea:	d42b      	bmi.n	8015944 <_printf_common+0xb0>
 80158ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158f0:	4649      	mov	r1, r9
 80158f2:	4638      	mov	r0, r7
 80158f4:	47c0      	blx	r8
 80158f6:	3001      	adds	r0, #1
 80158f8:	d01e      	beq.n	8015938 <_printf_common+0xa4>
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	68e5      	ldr	r5, [r4, #12]
 80158fe:	6832      	ldr	r2, [r6, #0]
 8015900:	f003 0306 	and.w	r3, r3, #6
 8015904:	2b04      	cmp	r3, #4
 8015906:	bf08      	it	eq
 8015908:	1aad      	subeq	r5, r5, r2
 801590a:	68a3      	ldr	r3, [r4, #8]
 801590c:	6922      	ldr	r2, [r4, #16]
 801590e:	bf0c      	ite	eq
 8015910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015914:	2500      	movne	r5, #0
 8015916:	4293      	cmp	r3, r2
 8015918:	bfc4      	itt	gt
 801591a:	1a9b      	subgt	r3, r3, r2
 801591c:	18ed      	addgt	r5, r5, r3
 801591e:	2600      	movs	r6, #0
 8015920:	341a      	adds	r4, #26
 8015922:	42b5      	cmp	r5, r6
 8015924:	d11a      	bne.n	801595c <_printf_common+0xc8>
 8015926:	2000      	movs	r0, #0
 8015928:	e008      	b.n	801593c <_printf_common+0xa8>
 801592a:	2301      	movs	r3, #1
 801592c:	4652      	mov	r2, sl
 801592e:	4649      	mov	r1, r9
 8015930:	4638      	mov	r0, r7
 8015932:	47c0      	blx	r8
 8015934:	3001      	adds	r0, #1
 8015936:	d103      	bne.n	8015940 <_printf_common+0xac>
 8015938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015940:	3501      	adds	r5, #1
 8015942:	e7c6      	b.n	80158d2 <_printf_common+0x3e>
 8015944:	18e1      	adds	r1, r4, r3
 8015946:	1c5a      	adds	r2, r3, #1
 8015948:	2030      	movs	r0, #48	; 0x30
 801594a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801594e:	4422      	add	r2, r4
 8015950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015958:	3302      	adds	r3, #2
 801595a:	e7c7      	b.n	80158ec <_printf_common+0x58>
 801595c:	2301      	movs	r3, #1
 801595e:	4622      	mov	r2, r4
 8015960:	4649      	mov	r1, r9
 8015962:	4638      	mov	r0, r7
 8015964:	47c0      	blx	r8
 8015966:	3001      	adds	r0, #1
 8015968:	d0e6      	beq.n	8015938 <_printf_common+0xa4>
 801596a:	3601      	adds	r6, #1
 801596c:	e7d9      	b.n	8015922 <_printf_common+0x8e>
	...

08015970 <_printf_i>:
 8015970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015974:	7e0f      	ldrb	r7, [r1, #24]
 8015976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015978:	2f78      	cmp	r7, #120	; 0x78
 801597a:	4691      	mov	r9, r2
 801597c:	4680      	mov	r8, r0
 801597e:	460c      	mov	r4, r1
 8015980:	469a      	mov	sl, r3
 8015982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015986:	d807      	bhi.n	8015998 <_printf_i+0x28>
 8015988:	2f62      	cmp	r7, #98	; 0x62
 801598a:	d80a      	bhi.n	80159a2 <_printf_i+0x32>
 801598c:	2f00      	cmp	r7, #0
 801598e:	f000 80d8 	beq.w	8015b42 <_printf_i+0x1d2>
 8015992:	2f58      	cmp	r7, #88	; 0x58
 8015994:	f000 80a3 	beq.w	8015ade <_printf_i+0x16e>
 8015998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80159a0:	e03a      	b.n	8015a18 <_printf_i+0xa8>
 80159a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80159a6:	2b15      	cmp	r3, #21
 80159a8:	d8f6      	bhi.n	8015998 <_printf_i+0x28>
 80159aa:	a101      	add	r1, pc, #4	; (adr r1, 80159b0 <_printf_i+0x40>)
 80159ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80159b0:	08015a09 	.word	0x08015a09
 80159b4:	08015a1d 	.word	0x08015a1d
 80159b8:	08015999 	.word	0x08015999
 80159bc:	08015999 	.word	0x08015999
 80159c0:	08015999 	.word	0x08015999
 80159c4:	08015999 	.word	0x08015999
 80159c8:	08015a1d 	.word	0x08015a1d
 80159cc:	08015999 	.word	0x08015999
 80159d0:	08015999 	.word	0x08015999
 80159d4:	08015999 	.word	0x08015999
 80159d8:	08015999 	.word	0x08015999
 80159dc:	08015b29 	.word	0x08015b29
 80159e0:	08015a4d 	.word	0x08015a4d
 80159e4:	08015b0b 	.word	0x08015b0b
 80159e8:	08015999 	.word	0x08015999
 80159ec:	08015999 	.word	0x08015999
 80159f0:	08015b4b 	.word	0x08015b4b
 80159f4:	08015999 	.word	0x08015999
 80159f8:	08015a4d 	.word	0x08015a4d
 80159fc:	08015999 	.word	0x08015999
 8015a00:	08015999 	.word	0x08015999
 8015a04:	08015b13 	.word	0x08015b13
 8015a08:	682b      	ldr	r3, [r5, #0]
 8015a0a:	1d1a      	adds	r2, r3, #4
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	602a      	str	r2, [r5, #0]
 8015a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a18:	2301      	movs	r3, #1
 8015a1a:	e0a3      	b.n	8015b64 <_printf_i+0x1f4>
 8015a1c:	6820      	ldr	r0, [r4, #0]
 8015a1e:	6829      	ldr	r1, [r5, #0]
 8015a20:	0606      	lsls	r6, r0, #24
 8015a22:	f101 0304 	add.w	r3, r1, #4
 8015a26:	d50a      	bpl.n	8015a3e <_printf_i+0xce>
 8015a28:	680e      	ldr	r6, [r1, #0]
 8015a2a:	602b      	str	r3, [r5, #0]
 8015a2c:	2e00      	cmp	r6, #0
 8015a2e:	da03      	bge.n	8015a38 <_printf_i+0xc8>
 8015a30:	232d      	movs	r3, #45	; 0x2d
 8015a32:	4276      	negs	r6, r6
 8015a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a38:	485e      	ldr	r0, [pc, #376]	; (8015bb4 <_printf_i+0x244>)
 8015a3a:	230a      	movs	r3, #10
 8015a3c:	e019      	b.n	8015a72 <_printf_i+0x102>
 8015a3e:	680e      	ldr	r6, [r1, #0]
 8015a40:	602b      	str	r3, [r5, #0]
 8015a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a46:	bf18      	it	ne
 8015a48:	b236      	sxthne	r6, r6
 8015a4a:	e7ef      	b.n	8015a2c <_printf_i+0xbc>
 8015a4c:	682b      	ldr	r3, [r5, #0]
 8015a4e:	6820      	ldr	r0, [r4, #0]
 8015a50:	1d19      	adds	r1, r3, #4
 8015a52:	6029      	str	r1, [r5, #0]
 8015a54:	0601      	lsls	r1, r0, #24
 8015a56:	d501      	bpl.n	8015a5c <_printf_i+0xec>
 8015a58:	681e      	ldr	r6, [r3, #0]
 8015a5a:	e002      	b.n	8015a62 <_printf_i+0xf2>
 8015a5c:	0646      	lsls	r6, r0, #25
 8015a5e:	d5fb      	bpl.n	8015a58 <_printf_i+0xe8>
 8015a60:	881e      	ldrh	r6, [r3, #0]
 8015a62:	4854      	ldr	r0, [pc, #336]	; (8015bb4 <_printf_i+0x244>)
 8015a64:	2f6f      	cmp	r7, #111	; 0x6f
 8015a66:	bf0c      	ite	eq
 8015a68:	2308      	moveq	r3, #8
 8015a6a:	230a      	movne	r3, #10
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a72:	6865      	ldr	r5, [r4, #4]
 8015a74:	60a5      	str	r5, [r4, #8]
 8015a76:	2d00      	cmp	r5, #0
 8015a78:	bfa2      	ittt	ge
 8015a7a:	6821      	ldrge	r1, [r4, #0]
 8015a7c:	f021 0104 	bicge.w	r1, r1, #4
 8015a80:	6021      	strge	r1, [r4, #0]
 8015a82:	b90e      	cbnz	r6, 8015a88 <_printf_i+0x118>
 8015a84:	2d00      	cmp	r5, #0
 8015a86:	d04d      	beq.n	8015b24 <_printf_i+0x1b4>
 8015a88:	4615      	mov	r5, r2
 8015a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8015a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8015a92:	5dc7      	ldrb	r7, [r0, r7]
 8015a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015a98:	4637      	mov	r7, r6
 8015a9a:	42bb      	cmp	r3, r7
 8015a9c:	460e      	mov	r6, r1
 8015a9e:	d9f4      	bls.n	8015a8a <_printf_i+0x11a>
 8015aa0:	2b08      	cmp	r3, #8
 8015aa2:	d10b      	bne.n	8015abc <_printf_i+0x14c>
 8015aa4:	6823      	ldr	r3, [r4, #0]
 8015aa6:	07de      	lsls	r6, r3, #31
 8015aa8:	d508      	bpl.n	8015abc <_printf_i+0x14c>
 8015aaa:	6923      	ldr	r3, [r4, #16]
 8015aac:	6861      	ldr	r1, [r4, #4]
 8015aae:	4299      	cmp	r1, r3
 8015ab0:	bfde      	ittt	le
 8015ab2:	2330      	movle	r3, #48	; 0x30
 8015ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ab8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015abc:	1b52      	subs	r2, r2, r5
 8015abe:	6122      	str	r2, [r4, #16]
 8015ac0:	f8cd a000 	str.w	sl, [sp]
 8015ac4:	464b      	mov	r3, r9
 8015ac6:	aa03      	add	r2, sp, #12
 8015ac8:	4621      	mov	r1, r4
 8015aca:	4640      	mov	r0, r8
 8015acc:	f7ff fee2 	bl	8015894 <_printf_common>
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	d14c      	bne.n	8015b6e <_printf_i+0x1fe>
 8015ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ad8:	b004      	add	sp, #16
 8015ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ade:	4835      	ldr	r0, [pc, #212]	; (8015bb4 <_printf_i+0x244>)
 8015ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015ae4:	6829      	ldr	r1, [r5, #0]
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8015aec:	6029      	str	r1, [r5, #0]
 8015aee:	061d      	lsls	r5, r3, #24
 8015af0:	d514      	bpl.n	8015b1c <_printf_i+0x1ac>
 8015af2:	07df      	lsls	r7, r3, #31
 8015af4:	bf44      	itt	mi
 8015af6:	f043 0320 	orrmi.w	r3, r3, #32
 8015afa:	6023      	strmi	r3, [r4, #0]
 8015afc:	b91e      	cbnz	r6, 8015b06 <_printf_i+0x196>
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	f023 0320 	bic.w	r3, r3, #32
 8015b04:	6023      	str	r3, [r4, #0]
 8015b06:	2310      	movs	r3, #16
 8015b08:	e7b0      	b.n	8015a6c <_printf_i+0xfc>
 8015b0a:	6823      	ldr	r3, [r4, #0]
 8015b0c:	f043 0320 	orr.w	r3, r3, #32
 8015b10:	6023      	str	r3, [r4, #0]
 8015b12:	2378      	movs	r3, #120	; 0x78
 8015b14:	4828      	ldr	r0, [pc, #160]	; (8015bb8 <_printf_i+0x248>)
 8015b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015b1a:	e7e3      	b.n	8015ae4 <_printf_i+0x174>
 8015b1c:	0659      	lsls	r1, r3, #25
 8015b1e:	bf48      	it	mi
 8015b20:	b2b6      	uxthmi	r6, r6
 8015b22:	e7e6      	b.n	8015af2 <_printf_i+0x182>
 8015b24:	4615      	mov	r5, r2
 8015b26:	e7bb      	b.n	8015aa0 <_printf_i+0x130>
 8015b28:	682b      	ldr	r3, [r5, #0]
 8015b2a:	6826      	ldr	r6, [r4, #0]
 8015b2c:	6961      	ldr	r1, [r4, #20]
 8015b2e:	1d18      	adds	r0, r3, #4
 8015b30:	6028      	str	r0, [r5, #0]
 8015b32:	0635      	lsls	r5, r6, #24
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	d501      	bpl.n	8015b3c <_printf_i+0x1cc>
 8015b38:	6019      	str	r1, [r3, #0]
 8015b3a:	e002      	b.n	8015b42 <_printf_i+0x1d2>
 8015b3c:	0670      	lsls	r0, r6, #25
 8015b3e:	d5fb      	bpl.n	8015b38 <_printf_i+0x1c8>
 8015b40:	8019      	strh	r1, [r3, #0]
 8015b42:	2300      	movs	r3, #0
 8015b44:	6123      	str	r3, [r4, #16]
 8015b46:	4615      	mov	r5, r2
 8015b48:	e7ba      	b.n	8015ac0 <_printf_i+0x150>
 8015b4a:	682b      	ldr	r3, [r5, #0]
 8015b4c:	1d1a      	adds	r2, r3, #4
 8015b4e:	602a      	str	r2, [r5, #0]
 8015b50:	681d      	ldr	r5, [r3, #0]
 8015b52:	6862      	ldr	r2, [r4, #4]
 8015b54:	2100      	movs	r1, #0
 8015b56:	4628      	mov	r0, r5
 8015b58:	f7ea fbc2 	bl	80002e0 <memchr>
 8015b5c:	b108      	cbz	r0, 8015b62 <_printf_i+0x1f2>
 8015b5e:	1b40      	subs	r0, r0, r5
 8015b60:	6060      	str	r0, [r4, #4]
 8015b62:	6863      	ldr	r3, [r4, #4]
 8015b64:	6123      	str	r3, [r4, #16]
 8015b66:	2300      	movs	r3, #0
 8015b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b6c:	e7a8      	b.n	8015ac0 <_printf_i+0x150>
 8015b6e:	6923      	ldr	r3, [r4, #16]
 8015b70:	462a      	mov	r2, r5
 8015b72:	4649      	mov	r1, r9
 8015b74:	4640      	mov	r0, r8
 8015b76:	47d0      	blx	sl
 8015b78:	3001      	adds	r0, #1
 8015b7a:	d0ab      	beq.n	8015ad4 <_printf_i+0x164>
 8015b7c:	6823      	ldr	r3, [r4, #0]
 8015b7e:	079b      	lsls	r3, r3, #30
 8015b80:	d413      	bmi.n	8015baa <_printf_i+0x23a>
 8015b82:	68e0      	ldr	r0, [r4, #12]
 8015b84:	9b03      	ldr	r3, [sp, #12]
 8015b86:	4298      	cmp	r0, r3
 8015b88:	bfb8      	it	lt
 8015b8a:	4618      	movlt	r0, r3
 8015b8c:	e7a4      	b.n	8015ad8 <_printf_i+0x168>
 8015b8e:	2301      	movs	r3, #1
 8015b90:	4632      	mov	r2, r6
 8015b92:	4649      	mov	r1, r9
 8015b94:	4640      	mov	r0, r8
 8015b96:	47d0      	blx	sl
 8015b98:	3001      	adds	r0, #1
 8015b9a:	d09b      	beq.n	8015ad4 <_printf_i+0x164>
 8015b9c:	3501      	adds	r5, #1
 8015b9e:	68e3      	ldr	r3, [r4, #12]
 8015ba0:	9903      	ldr	r1, [sp, #12]
 8015ba2:	1a5b      	subs	r3, r3, r1
 8015ba4:	42ab      	cmp	r3, r5
 8015ba6:	dcf2      	bgt.n	8015b8e <_printf_i+0x21e>
 8015ba8:	e7eb      	b.n	8015b82 <_printf_i+0x212>
 8015baa:	2500      	movs	r5, #0
 8015bac:	f104 0619 	add.w	r6, r4, #25
 8015bb0:	e7f5      	b.n	8015b9e <_printf_i+0x22e>
 8015bb2:	bf00      	nop
 8015bb4:	08016169 	.word	0x08016169
 8015bb8:	0801617a 	.word	0x0801617a

08015bbc <__sread>:
 8015bbc:	b510      	push	{r4, lr}
 8015bbe:	460c      	mov	r4, r1
 8015bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bc4:	f000 f894 	bl	8015cf0 <_read_r>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	bfab      	itete	ge
 8015bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bce:	89a3      	ldrhlt	r3, [r4, #12]
 8015bd0:	181b      	addge	r3, r3, r0
 8015bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bd6:	bfac      	ite	ge
 8015bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015bda:	81a3      	strhlt	r3, [r4, #12]
 8015bdc:	bd10      	pop	{r4, pc}

08015bde <__swrite>:
 8015bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be2:	461f      	mov	r7, r3
 8015be4:	898b      	ldrh	r3, [r1, #12]
 8015be6:	05db      	lsls	r3, r3, #23
 8015be8:	4605      	mov	r5, r0
 8015bea:	460c      	mov	r4, r1
 8015bec:	4616      	mov	r6, r2
 8015bee:	d505      	bpl.n	8015bfc <__swrite+0x1e>
 8015bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bf4:	2302      	movs	r3, #2
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	f000 f868 	bl	8015ccc <_lseek_r>
 8015bfc:	89a3      	ldrh	r3, [r4, #12]
 8015bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c06:	81a3      	strh	r3, [r4, #12]
 8015c08:	4632      	mov	r2, r6
 8015c0a:	463b      	mov	r3, r7
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c12:	f000 b817 	b.w	8015c44 <_write_r>

08015c16 <__sseek>:
 8015c16:	b510      	push	{r4, lr}
 8015c18:	460c      	mov	r4, r1
 8015c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c1e:	f000 f855 	bl	8015ccc <_lseek_r>
 8015c22:	1c43      	adds	r3, r0, #1
 8015c24:	89a3      	ldrh	r3, [r4, #12]
 8015c26:	bf15      	itete	ne
 8015c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c32:	81a3      	strheq	r3, [r4, #12]
 8015c34:	bf18      	it	ne
 8015c36:	81a3      	strhne	r3, [r4, #12]
 8015c38:	bd10      	pop	{r4, pc}

08015c3a <__sclose>:
 8015c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c3e:	f000 b813 	b.w	8015c68 <_close_r>
	...

08015c44 <_write_r>:
 8015c44:	b538      	push	{r3, r4, r5, lr}
 8015c46:	4d07      	ldr	r5, [pc, #28]	; (8015c64 <_write_r+0x20>)
 8015c48:	4604      	mov	r4, r0
 8015c4a:	4608      	mov	r0, r1
 8015c4c:	4611      	mov	r1, r2
 8015c4e:	2200      	movs	r2, #0
 8015c50:	602a      	str	r2, [r5, #0]
 8015c52:	461a      	mov	r2, r3
 8015c54:	f7ed fb9f 	bl	8003396 <_write>
 8015c58:	1c43      	adds	r3, r0, #1
 8015c5a:	d102      	bne.n	8015c62 <_write_r+0x1e>
 8015c5c:	682b      	ldr	r3, [r5, #0]
 8015c5e:	b103      	cbz	r3, 8015c62 <_write_r+0x1e>
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	bd38      	pop	{r3, r4, r5, pc}
 8015c64:	24005598 	.word	0x24005598

08015c68 <_close_r>:
 8015c68:	b538      	push	{r3, r4, r5, lr}
 8015c6a:	4d06      	ldr	r5, [pc, #24]	; (8015c84 <_close_r+0x1c>)
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	4604      	mov	r4, r0
 8015c70:	4608      	mov	r0, r1
 8015c72:	602b      	str	r3, [r5, #0]
 8015c74:	f7ed fbab 	bl	80033ce <_close>
 8015c78:	1c43      	adds	r3, r0, #1
 8015c7a:	d102      	bne.n	8015c82 <_close_r+0x1a>
 8015c7c:	682b      	ldr	r3, [r5, #0]
 8015c7e:	b103      	cbz	r3, 8015c82 <_close_r+0x1a>
 8015c80:	6023      	str	r3, [r4, #0]
 8015c82:	bd38      	pop	{r3, r4, r5, pc}
 8015c84:	24005598 	.word	0x24005598

08015c88 <_fstat_r>:
 8015c88:	b538      	push	{r3, r4, r5, lr}
 8015c8a:	4d07      	ldr	r5, [pc, #28]	; (8015ca8 <_fstat_r+0x20>)
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	4604      	mov	r4, r0
 8015c90:	4608      	mov	r0, r1
 8015c92:	4611      	mov	r1, r2
 8015c94:	602b      	str	r3, [r5, #0]
 8015c96:	f7ed fba6 	bl	80033e6 <_fstat>
 8015c9a:	1c43      	adds	r3, r0, #1
 8015c9c:	d102      	bne.n	8015ca4 <_fstat_r+0x1c>
 8015c9e:	682b      	ldr	r3, [r5, #0]
 8015ca0:	b103      	cbz	r3, 8015ca4 <_fstat_r+0x1c>
 8015ca2:	6023      	str	r3, [r4, #0]
 8015ca4:	bd38      	pop	{r3, r4, r5, pc}
 8015ca6:	bf00      	nop
 8015ca8:	24005598 	.word	0x24005598

08015cac <_isatty_r>:
 8015cac:	b538      	push	{r3, r4, r5, lr}
 8015cae:	4d06      	ldr	r5, [pc, #24]	; (8015cc8 <_isatty_r+0x1c>)
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	4608      	mov	r0, r1
 8015cb6:	602b      	str	r3, [r5, #0]
 8015cb8:	f7ed fba5 	bl	8003406 <_isatty>
 8015cbc:	1c43      	adds	r3, r0, #1
 8015cbe:	d102      	bne.n	8015cc6 <_isatty_r+0x1a>
 8015cc0:	682b      	ldr	r3, [r5, #0]
 8015cc2:	b103      	cbz	r3, 8015cc6 <_isatty_r+0x1a>
 8015cc4:	6023      	str	r3, [r4, #0]
 8015cc6:	bd38      	pop	{r3, r4, r5, pc}
 8015cc8:	24005598 	.word	0x24005598

08015ccc <_lseek_r>:
 8015ccc:	b538      	push	{r3, r4, r5, lr}
 8015cce:	4d07      	ldr	r5, [pc, #28]	; (8015cec <_lseek_r+0x20>)
 8015cd0:	4604      	mov	r4, r0
 8015cd2:	4608      	mov	r0, r1
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	602a      	str	r2, [r5, #0]
 8015cda:	461a      	mov	r2, r3
 8015cdc:	f7ed fb9e 	bl	800341c <_lseek>
 8015ce0:	1c43      	adds	r3, r0, #1
 8015ce2:	d102      	bne.n	8015cea <_lseek_r+0x1e>
 8015ce4:	682b      	ldr	r3, [r5, #0]
 8015ce6:	b103      	cbz	r3, 8015cea <_lseek_r+0x1e>
 8015ce8:	6023      	str	r3, [r4, #0]
 8015cea:	bd38      	pop	{r3, r4, r5, pc}
 8015cec:	24005598 	.word	0x24005598

08015cf0 <_read_r>:
 8015cf0:	b538      	push	{r3, r4, r5, lr}
 8015cf2:	4d07      	ldr	r5, [pc, #28]	; (8015d10 <_read_r+0x20>)
 8015cf4:	4604      	mov	r4, r0
 8015cf6:	4608      	mov	r0, r1
 8015cf8:	4611      	mov	r1, r2
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	602a      	str	r2, [r5, #0]
 8015cfe:	461a      	mov	r2, r3
 8015d00:	f7ed fb2c 	bl	800335c <_read>
 8015d04:	1c43      	adds	r3, r0, #1
 8015d06:	d102      	bne.n	8015d0e <_read_r+0x1e>
 8015d08:	682b      	ldr	r3, [r5, #0]
 8015d0a:	b103      	cbz	r3, 8015d0e <_read_r+0x1e>
 8015d0c:	6023      	str	r3, [r4, #0]
 8015d0e:	bd38      	pop	{r3, r4, r5, pc}
 8015d10:	24005598 	.word	0x24005598

08015d14 <_init>:
 8015d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d16:	bf00      	nop
 8015d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d1a:	bc08      	pop	{r3}
 8015d1c:	469e      	mov	lr, r3
 8015d1e:	4770      	bx	lr

08015d20 <_fini>:
 8015d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d22:	bf00      	nop
 8015d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d26:	bc08      	pop	{r3}
 8015d28:	469e      	mov	lr, r3
 8015d2a:	4770      	bx	lr
