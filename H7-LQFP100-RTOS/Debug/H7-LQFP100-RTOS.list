
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08016cb0  08016cb0  00026cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017148  08017148  00027148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017150  08017150  00027150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017154  08017154  00027154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08017158  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006630  24000100  08017254  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24006730  08017254  00036730  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b2fb  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000708d  00000000  00000000  0006b425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028d0  00000000  00000000  000724b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025e8  00000000  00000000  00074d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ab0  00000000  00000000  00077370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c901  00000000  00000000  000bbe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194f76  00000000  00000000  000f8721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028d697  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b1e4  00000000  00000000  0028d6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016c98 	.word	0x08016c98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016c98 	.word	0x08016c98

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 ff5f 	bl	800452c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fd96 	bl	80021a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f87a 	bl	800577c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd89 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f9bd 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fd70 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f9af 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fd62 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f9a1 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fd54 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f993 	bl	8004a34 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd46 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f984 	bl	8004a34 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd37 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f975 	bl	8004a34 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd28 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f966 	bl	8004a34 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd19 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f957 	bl	8004a34 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd0a 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f948 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fcfb 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f939 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fcec 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f92a 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fcdd 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fe47 	bl	800452c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc7e 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f8b2 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fc65 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f8a4 	bl	8004a34 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fc57 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f896 	bl	8004a34 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fc49 	bl	80021a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f888 	bl	8004a34 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc3b 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 faca 	bl	8008f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fabe 	bl	8008f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fab2 	bl	8008f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fc45 	bl	8006304 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb90 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fb00 	bl	80040e4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fafa 	bl	80040e4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fbe5 	bl	8006304 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb30 	bl	80021a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fb7d 	bl	801628c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 ffad 	bl	8005af8 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fafe 	bl	80021a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f9c8 	bl	8005f58 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fae9 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f99d 	bl	8008f94 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fb30 	bl	8006304 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa7b 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 fef2 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 ff09 	bl	8005adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fec9 	bl	8005aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 fee0 	bl	8005adc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fec1 	bl	8005aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 fed8 	bl	8005adc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 feb9 	bl	8005aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fed0 	bl	8005adc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 feb1 	bl	8005aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 fec8 	bl	8005adc <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24001964 	.word	0x24001964

08000d74 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_FREERTOS_Init+0x98>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_FREERTOS_Init+0x9c>)
 8000d96:	f012 f8ab 	bl	8012ef0 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <MX_FREERTOS_Init+0xa0>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_FREERTOS_Init+0xa4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MX_FREERTOS_Init+0xa8>)
 8000da6:	f012 f8a3 	bl	8012ef0 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_FREERTOS_Init+0xac>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <MX_FREERTOS_Init+0xb0>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_FREERTOS_Init+0xb4>)
 8000db6:	f012 f89b 	bl	8012ef0 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_FREERTOS_Init+0xb8>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_FREERTOS_Init+0xbc>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_FREERTOS_Init+0xc0>)
 8000dc6:	f012 f893 	bl	8012ef0 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <MX_FREERTOS_Init+0xc4>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_FREERTOS_Init+0xc8>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4820      	ldr	r0, [pc, #128]	; (8000e58 <MX_FREERTOS_Init+0xcc>)
 8000dd6:	f012 f88b 	bl	8012ef0 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <MX_FREERTOS_Init+0xd0>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <MX_FREERTOS_Init+0xd4>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_FREERTOS_Init+0xd8>)
 8000de6:	f012 f883 	bl	8012ef0 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_FREERTOS_Init+0xdc>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_FREERTOS_Init+0xe0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	481e      	ldr	r0, [pc, #120]	; (8000e70 <MX_FREERTOS_Init+0xe4>)
 8000df6:	f012 f87b 	bl	8012ef0 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_FREERTOS_Init+0xe8>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <MX_FREERTOS_Init+0xec>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	481d      	ldr	r0, [pc, #116]	; (8000e7c <MX_FREERTOS_Init+0xf0>)
 8000e06:	f012 f873 	bl	8012ef0 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_FREERTOS_Init+0xf4>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <MX_FREERTOS_Init+0xf8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <MX_FREERTOS_Init+0xfc>)
 8000e16:	f012 f86b 	bl	8012ef0 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_FREERTOS_Init+0x100>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08016f18 	.word	0x08016f18
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	24000360 	.word	0x24000360
 8000e30:	08016f3c 	.word	0x08016f3c
 8000e34:	08000eb9 	.word	0x08000eb9
 8000e38:	240005c0 	.word	0x240005c0
 8000e3c:	08016f60 	.word	0x08016f60
 8000e40:	08000ee1 	.word	0x08000ee1
 8000e44:	24000820 	.word	0x24000820
 8000e48:	08016f84 	.word	0x08016f84
 8000e4c:	08000f09 	.word	0x08000f09
 8000e50:	24000a80 	.word	0x24000a80
 8000e54:	08016fa8 	.word	0x08016fa8
 8000e58:	08000f81 	.word	0x08000f81
 8000e5c:	24000ce0 	.word	0x24000ce0
 8000e60:	08016fcc 	.word	0x08016fcc
 8000e64:	08000ff9 	.word	0x08000ff9
 8000e68:	24000f40 	.word	0x24000f40
 8000e6c:	08016ff0 	.word	0x08016ff0
 8000e70:	080010a5 	.word	0x080010a5
 8000e74:	240011a0 	.word	0x240011a0
 8000e78:	08017014 	.word	0x08017014
 8000e7c:	080010d5 	.word	0x080010d5
 8000e80:	24001400 	.word	0x24001400
 8000e84:	08017038 	.word	0x08017038
 8000e88:	08001199 	.word	0x08001199
 8000e8c:	24001660 	.word	0x24001660

08000e90 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <PMT_init+0x24>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f012 f9a6 	bl	80131f4 <osEventFlagsWait>

		create_pmt_packet();
 8000ea8:	f001 f982 	bl	80021b0 <create_pmt_packet>

		osThreadYield();
 8000eac:	f012 f8b2 	bl	8013014 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb0:	e7f2      	b.n	8000e98 <PMT_init+0x8>
 8000eb2:	bf00      	nop
 8000eb4:	24001914 	.word	0x24001914

08000eb8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <ERPA_init+0x24>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f012 f992 	bl	80131f4 <osEventFlagsWait>

		create_erpa_packet();
 8000ed0:	f001 f9b4 	bl	800223c <create_erpa_packet>

		osThreadYield();
 8000ed4:	f012 f89e 	bl	8013014 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed8:	e7f2      	b.n	8000ec0 <ERPA_init+0x8>
 8000eda:	bf00      	nop
 8000edc:	24001914 	.word	0x24001914

08000ee0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HK_init+0x24>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	f012 f97e 	bl	80131f4 <osEventFlagsWait>

		create_hk_packet();
 8000ef8:	f001 f9fe 	bl	80022f8 <create_hk_packet>

		osThreadYield();
 8000efc:	f012 f88a 	bl	8013014 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f00:	e7f2      	b.n	8000ee8 <HK_init+0x8>
 8000f02:	bf00      	nop
 8000f04:	24001914 	.word	0x24001914

08000f08 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <AUTOINIT_init+0x70>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f012 f96a 	bl	80131f4 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e012      	b.n	8000f4c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f008 f9f2 	bl	8009324 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f012 f887 	bl	8013054 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	dde9      	ble.n	8000f26 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f52:	2308      	movs	r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e008      	b.n	8000f6a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 ff8a 	bl	8003e78 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	ddf3      	ble.n	8000f58 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f70:	f012 f850 	bl	8013014 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f74:	e7cc      	b.n	8000f10 <AUTOINIT_init+0x8>
 8000f76:	bf00      	nop
 8000f78:	24001918 	.word	0x24001918
 8000f7c:	0801705c 	.word	0x0801705c

08000f80 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <AUTODEINIT_init+0x70>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f90:	2200      	movs	r2, #0
 8000f92:	2108      	movs	r1, #8
 8000f94:	f012 f92e 	bl	80131f4 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f98:	230d      	movs	r3, #13
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e008      	b.n	8000fb0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 ff67 	bl	8003e78 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	dcf3      	bgt.n	8000f9e <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e012      	b.n	8000fe2 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	889b      	ldrh	r3, [r3, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f008 f9a7 	bl	8009324 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f012 f83c 	bl	8013054 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dae9      	bge.n	8000fbc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fe8:	f012 f814 	bl	8013014 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fec:	e7cc      	b.n	8000f88 <AUTODEINIT_init+0x8>
 8000fee:	bf00      	nop
 8000ff0:	24001918 	.word	0x24001918
 8000ff4:	0801705c 	.word	0x0801705c

08000ff8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <Voltage_Monitor_init+0xa8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	f012 f8f2 	bl	80131f4 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001010:	f002 ff5c 	bl	8003ecc <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001014:	f002 ff50 	bl	8003eb8 <get_rail_monitor>
 8001018:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e03b      	b.n	8001098 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	789b      	ldrb	r3, [r3, #2]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02d      	beq.n	8001092 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	8898      	ldrh	r0, [r3, #4]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	461a      	mov	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	88db      	ldrh	r3, [r3, #6]
 800106e:	461a      	mov	r2, r3
 8001070:	f002 ff8e 	bl	8003f90 <in_range>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	785a      	ldrb	r2, [r3, #1]
 800108c:	3201      	adds	r2, #1
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b11      	cmp	r3, #17
 800109c:	ddc0      	ble.n	8001020 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800109e:	e7af      	b.n	8001000 <Voltage_Monitor_init+0x8>
 80010a0:	24001918 	.word	0x24001918

080010a4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <STOP_init+0x2c>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	f012 f89c 	bl	80131f4 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <STOP_init+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f012 f864 	bl	8013190 <osEventFlagsClear>

	  enter_stop();
 80010c8:	f001 f84e 	bl	8002168 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010cc:	e7ee      	b.n	80010ac <STOP_init+0x8>
 80010ce:	bf00      	nop
 80010d0:	24001918 	.word	0x24001918

080010d4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <Science_init+0xa4>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	f012 f884 	bl	80131f4 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e012      	b.n	8001118 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <Science_init+0xa8>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <Science_init+0xa8>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f008 f90c 	bl	8009324 <HAL_GPIO_WritePin>
			osDelay(200);
 800110c:	20c8      	movs	r0, #200	; 0xc8
 800110e:	f011 ffa1 	bl	8013054 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b08      	cmp	r3, #8
 800111c:	dde9      	ble.n	80010f2 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800111e:	2308      	movs	r3, #8
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	e008      	b.n	8001136 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fea4 	bl	8003e78 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b10      	cmp	r3, #16
 800113a:	ddf3      	ble.n	8001124 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2320      	movs	r3, #32
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <Science_init+0xac>)
 8001148:	2100      	movs	r1, #0
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <Science_init+0xb0>)
 800114c:	f004 fd4e 	bl	8005bec <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <Science_init+0xb4>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <Science_init+0xb8>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 800115c:	210c      	movs	r1, #12
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <Science_init+0xbc>)
 8001160:	f00d fce4 	bl	800eb2c <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001164:	2100      	movs	r1, #0
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <Science_init+0xc0>)
 8001168:	f00d fce0 	bl	800eb2c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800116c:	b662      	cpsie	i
}
 800116e:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001170:	f011 ff50 	bl	8013014 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001174:	e7b2      	b.n	80010dc <Science_init+0x8>
 8001176:	bf00      	nop
 8001178:	2400191c 	.word	0x2400191c
 800117c:	0801705c 	.word	0x0801705c
 8001180:	24000000 	.word	0x24000000
 8001184:	240002d4 	.word	0x240002d4
 8001188:	24001960 	.word	0x24001960
 800118c:	24001964 	.word	0x24001964
 8001190:	24001b74 	.word	0x24001b74
 8001194:	24001b28 	.word	0x24001b28

08001198 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <Idle_init+0x8c>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a8:	2200      	movs	r2, #0
 80011aa:	2102      	movs	r1, #2
 80011ac:	f012 f822 	bl	80131f4 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011b0:	210c      	movs	r1, #12
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <Idle_init+0x90>)
 80011b4:	f00d fe14 	bl	800ede0 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011b8:	2100      	movs	r1, #0
 80011ba:	481c      	ldr	r0, [pc, #112]	; (800122c <Idle_init+0x94>)
 80011bc:	f00d fe10 	bl	800ede0 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <Idle_init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80011c6:	2100      	movs	r1, #0
 80011c8:	481a      	ldr	r0, [pc, #104]	; (8001234 <Idle_init+0x9c>)
 80011ca:	f004 fdcf 	bl	8005d6c <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011ce:	2310      	movs	r3, #16
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e008      	b.n	80011e6 <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fe4c 	bl	8003e78 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	dcf3      	bgt.n	80011d4 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80011ec:	2308      	movs	r3, #8
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	e012      	b.n	8001218 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <Idle_init+0xa0>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <Idle_init+0xa0>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	f008 f88c 	bl	8009324 <HAL_GPIO_WritePin>
			osDelay(200);
 800120c:	20c8      	movs	r0, #200	; 0xc8
 800120e:	f011 ff21 	bl	8013054 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dae9      	bge.n	80011f2 <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 800121e:	f011 fef9 	bl	8013014 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001222:	e7bd      	b.n	80011a0 <Idle_init+0x8>
 8001224:	2400191c 	.word	0x2400191c
 8001228:	24001b74 	.word	0x24001b74
 800122c:	24001b28 	.word	0x24001b28
 8001230:	24001960 	.word	0x24001960
 8001234:	240002d4 	.word	0x240002d4
 8001238:	0801705c 	.word	0x0801705c

0800123c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <MX_GPIO_Init+0xe8>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a23      	ldr	r2, [pc, #140]	; (8001324 <MX_GPIO_Init+0xe8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_GPIO_Init+0xe8>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80012d0:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_GPIO_Init+0xec>)
 80012d2:	f008 f827 	bl	8009324 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_GPIO_Init+0xf0>)
 80012dc:	f008 f822 	bl	8009324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012e0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80012e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0xec>)
 80012fa:	f007 fe4b 	bl	8008f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0xf0>)
 8001316:	f007 fe3d 	bl	8008f94 <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400
 8001328:	58020800 	.word	0x58020800
 800132c:	58020400 	.word	0x58020400

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <MX_I2C1_Init+0x7c>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_I2C1_Init+0x78>)
 800133c:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x80>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_I2C1_Init+0x78>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_I2C1_Init+0x78>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x78>)
 800136c:	f007 fff4 	bl	8009358 <HAL_I2C_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001376:	f000 ff15 	bl	80021a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <MX_I2C1_Init+0x78>)
 800137e:	f008 fd3b 	bl	8009df8 <HAL_I2CEx_ConfigAnalogFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001388:	f000 ff0c 	bl	80021a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800138c:	2100      	movs	r1, #0
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001390:	f008 fd7d 	bl	8009e8e <HAL_I2CEx_ConfigDigitalFilter>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800139a:	f000 ff03 	bl	80021a4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f008 fdc2 	bl	8009f28 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	240018c0 	.word	0x240018c0
 80013ac:	40005400 	.word	0x40005400
 80013b0:	0020081f 	.word	0x0020081f

080013b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0ba      	sub	sp, #232	; 0xe8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	22c0      	movs	r2, #192	; 0xc0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f014 ff59 	bl	801628c <memset>
  if(i2cHandle->Instance==I2C1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_I2C_MspInit+0xc8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d146      	bne.n	8001472 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e4:	f04f 0208 	mov.w	r2, #8
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 fe56 	bl	800b0ac <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001406:	f000 fecd 	bl	80021a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001428:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001442:	2304      	movs	r3, #4
 8001444:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <HAL_I2C_MspInit+0xd0>)
 8001450:	f007 fda0 	bl	8008f94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 8001456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 800145c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001460:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_I2C_MspInit+0xcc>)
 8001466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	37e8      	adds	r7, #232	; 0xe8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005400 	.word	0x40005400
 8001480:	58024400 	.word	0x58024400
 8001484:	58020400 	.word	0x58020400

08001488 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800148c:	f3bf 8f4f 	dsb	sy
}
 8001490:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <__NVIC_SystemReset+0x24>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800149a:	4904      	ldr	r1, [pc, #16]	; (80014ac <__NVIC_SystemReset+0x24>)
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_SystemReset+0x28>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <__NVIC_SystemReset+0x20>
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	05fa0004 	.word	0x05fa0004

080014b4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d106      	bne.n	80014d2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f011 fe1c 	bl	8013108 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80014d0:	e023      	b.n	800151a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a15      	ldr	r2, [pc, #84]	; (800152c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d106      	bne.n	80014e8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2102      	movs	r1, #2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f011 fe11 	bl	8013108 <osEventFlagsSet>
}
 80014e6:	e018      	b.n	800151a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f011 fe06 	bl	8013108 <osEventFlagsSet>
		if (HK_ENABLED){
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2104      	movs	r1, #4
 800150c:	4618      	mov	r0, r3
 800150e:	f011 fdfb 	bl	8013108 <osEventFlagsSet>
}
 8001512:	e002      	b.n	800151a <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001516:	f014 ff2f 	bl	8016378 <puts>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24001b28 	.word	0x24001b28
 8001528:	24001914 	.word	0x24001914
 800152c:	24001b74 	.word	0x24001b74
 8001530:	24001bc0 	.word	0x24001bc0
 8001534:	24001918 	.word	0x24001918
 8001538:	24001960 	.word	0x24001960
 800153c:	08016d28 	.word	0x08016d28

08001540 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001548:	2201      	movs	r2, #1
 800154a:	49f2      	ldr	r1, [pc, #968]	; (8001914 <HAL_UART_RxCpltCallback+0x3d4>)
 800154c:	48f2      	ldr	r0, [pc, #968]	; (8001918 <HAL_UART_RxCpltCallback+0x3d8>)
 800154e:	f00e ffcd 	bl	80104ec <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001552:	4bf0      	ldr	r3, [pc, #960]	; (8001914 <HAL_UART_RxCpltCallback+0x3d4>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2be0      	cmp	r3, #224	; 0xe0
 800155c:	f200 8419 	bhi.w	8001d92 <HAL_UART_RxCpltCallback+0x852>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <HAL_UART_RxCpltCallback+0x28>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001901 	.word	0x08001901
 800156c:	08001945 	.word	0x08001945
 8001570:	080019b5 	.word	0x080019b5
 8001574:	080019ef 	.word	0x080019ef
 8001578:	08001a27 	.word	0x08001a27
 800157c:	08001a61 	.word	0x08001a61
 8001580:	08001a9d 	.word	0x08001a9d
 8001584:	08001ad9 	.word	0x08001ad9
 8001588:	08001b13 	.word	0x08001b13
 800158c:	08001b47 	.word	0x08001b47
 8001590:	08001b73 	.word	0x08001b73
 8001594:	08001b9f 	.word	0x08001b9f
 8001598:	08001bc9 	.word	0x08001bc9
 800159c:	08001ca5 	.word	0x08001ca5
 80015a0:	08001d0d 	.word	0x08001d0d
 80015a4:	08001d35 	.word	0x08001d35
 80015a8:	080018ed 	.word	0x080018ed
 80015ac:	08001929 	.word	0x08001929
 80015b0:	08001997 	.word	0x08001997
 80015b4:	080019d3 	.word	0x080019d3
 80015b8:	08001a0b 	.word	0x08001a0b
 80015bc:	08001a43 	.word	0x08001a43
 80015c0:	08001a7f 	.word	0x08001a7f
 80015c4:	08001abb 	.word	0x08001abb
 80015c8:	08001af7 	.word	0x08001af7
 80015cc:	08001b2f 	.word	0x08001b2f
 80015d0:	08001b57 	.word	0x08001b57
 80015d4:	08001b83 	.word	0x08001b83
 80015d8:	08001baf 	.word	0x08001baf
 80015dc:	08001bd7 	.word	0x08001bd7
 80015e0:	08001ce5 	.word	0x08001ce5
 80015e4:	08001d93 	.word	0x08001d93
 80015e8:	08001d93 	.word	0x08001d93
 80015ec:	08001d93 	.word	0x08001d93
 80015f0:	08001d93 	.word	0x08001d93
 80015f4:	08001d93 	.word	0x08001d93
 80015f8:	08001d93 	.word	0x08001d93
 80015fc:	08001d93 	.word	0x08001d93
 8001600:	08001d93 	.word	0x08001d93
 8001604:	08001d93 	.word	0x08001d93
 8001608:	08001d93 	.word	0x08001d93
 800160c:	08001d93 	.word	0x08001d93
 8001610:	08001d93 	.word	0x08001d93
 8001614:	08001d93 	.word	0x08001d93
 8001618:	08001d93 	.word	0x08001d93
 800161c:	08001d93 	.word	0x08001d93
 8001620:	08001d93 	.word	0x08001d93
 8001624:	08001d93 	.word	0x08001d93
 8001628:	08001d93 	.word	0x08001d93
 800162c:	08001d93 	.word	0x08001d93
 8001630:	08001d93 	.word	0x08001d93
 8001634:	08001d93 	.word	0x08001d93
 8001638:	08001d93 	.word	0x08001d93
 800163c:	08001d93 	.word	0x08001d93
 8001640:	08001d93 	.word	0x08001d93
 8001644:	08001d93 	.word	0x08001d93
 8001648:	08001d93 	.word	0x08001d93
 800164c:	08001d93 	.word	0x08001d93
 8001650:	08001d93 	.word	0x08001d93
 8001654:	08001d93 	.word	0x08001d93
 8001658:	08001d93 	.word	0x08001d93
 800165c:	08001d93 	.word	0x08001d93
 8001660:	08001d93 	.word	0x08001d93
 8001664:	08001d93 	.word	0x08001d93
 8001668:	08001d93 	.word	0x08001d93
 800166c:	08001d93 	.word	0x08001d93
 8001670:	08001d93 	.word	0x08001d93
 8001674:	08001d93 	.word	0x08001d93
 8001678:	08001d93 	.word	0x08001d93
 800167c:	08001d93 	.word	0x08001d93
 8001680:	08001d93 	.word	0x08001d93
 8001684:	08001d93 	.word	0x08001d93
 8001688:	08001d93 	.word	0x08001d93
 800168c:	08001d93 	.word	0x08001d93
 8001690:	08001d93 	.word	0x08001d93
 8001694:	08001d93 	.word	0x08001d93
 8001698:	08001d93 	.word	0x08001d93
 800169c:	08001d93 	.word	0x08001d93
 80016a0:	08001d93 	.word	0x08001d93
 80016a4:	08001d93 	.word	0x08001d93
 80016a8:	08001d93 	.word	0x08001d93
 80016ac:	08001d93 	.word	0x08001d93
 80016b0:	08001d93 	.word	0x08001d93
 80016b4:	08001d93 	.word	0x08001d93
 80016b8:	08001d93 	.word	0x08001d93
 80016bc:	08001d93 	.word	0x08001d93
 80016c0:	08001d93 	.word	0x08001d93
 80016c4:	08001d93 	.word	0x08001d93
 80016c8:	08001d93 	.word	0x08001d93
 80016cc:	08001d93 	.word	0x08001d93
 80016d0:	08001d93 	.word	0x08001d93
 80016d4:	08001d93 	.word	0x08001d93
 80016d8:	08001d93 	.word	0x08001d93
 80016dc:	08001d93 	.word	0x08001d93
 80016e0:	08001d93 	.word	0x08001d93
 80016e4:	08001d93 	.word	0x08001d93
 80016e8:	08001d93 	.word	0x08001d93
 80016ec:	08001d93 	.word	0x08001d93
 80016f0:	08001d93 	.word	0x08001d93
 80016f4:	08001d93 	.word	0x08001d93
 80016f8:	08001d93 	.word	0x08001d93
 80016fc:	08001d93 	.word	0x08001d93
 8001700:	08001d93 	.word	0x08001d93
 8001704:	08001d93 	.word	0x08001d93
 8001708:	08001d93 	.word	0x08001d93
 800170c:	08001d93 	.word	0x08001d93
 8001710:	08001d93 	.word	0x08001d93
 8001714:	08001d93 	.word	0x08001d93
 8001718:	08001d93 	.word	0x08001d93
 800171c:	08001d93 	.word	0x08001d93
 8001720:	08001d93 	.word	0x08001d93
 8001724:	08001d93 	.word	0x08001d93
 8001728:	08001d93 	.word	0x08001d93
 800172c:	08001d93 	.word	0x08001d93
 8001730:	08001d93 	.word	0x08001d93
 8001734:	08001d93 	.word	0x08001d93
 8001738:	08001d93 	.word	0x08001d93
 800173c:	08001d93 	.word	0x08001d93
 8001740:	08001d93 	.word	0x08001d93
 8001744:	08001d93 	.word	0x08001d93
 8001748:	08001d93 	.word	0x08001d93
 800174c:	08001d93 	.word	0x08001d93
 8001750:	08001d93 	.word	0x08001d93
 8001754:	08001d93 	.word	0x08001d93
 8001758:	08001d93 	.word	0x08001d93
 800175c:	08001d93 	.word	0x08001d93
 8001760:	08001d93 	.word	0x08001d93
 8001764:	08001d93 	.word	0x08001d93
 8001768:	08001d93 	.word	0x08001d93
 800176c:	08001d93 	.word	0x08001d93
 8001770:	08001d93 	.word	0x08001d93
 8001774:	08001d93 	.word	0x08001d93
 8001778:	08001d93 	.word	0x08001d93
 800177c:	08001d93 	.word	0x08001d93
 8001780:	08001d93 	.word	0x08001d93
 8001784:	08001d93 	.word	0x08001d93
 8001788:	08001d93 	.word	0x08001d93
 800178c:	08001d93 	.word	0x08001d93
 8001790:	08001d93 	.word	0x08001d93
 8001794:	08001d93 	.word	0x08001d93
 8001798:	08001d93 	.word	0x08001d93
 800179c:	08001d93 	.word	0x08001d93
 80017a0:	08001d93 	.word	0x08001d93
 80017a4:	08001d93 	.word	0x08001d93
 80017a8:	08001d93 	.word	0x08001d93
 80017ac:	08001d93 	.word	0x08001d93
 80017b0:	08001d93 	.word	0x08001d93
 80017b4:	08001d93 	.word	0x08001d93
 80017b8:	08001d93 	.word	0x08001d93
 80017bc:	08001d93 	.word	0x08001d93
 80017c0:	08001d93 	.word	0x08001d93
 80017c4:	08001d93 	.word	0x08001d93
 80017c8:	08001d93 	.word	0x08001d93
 80017cc:	08001d93 	.word	0x08001d93
 80017d0:	08001d93 	.word	0x08001d93
 80017d4:	08001d93 	.word	0x08001d93
 80017d8:	08001d93 	.word	0x08001d93
 80017dc:	08001d93 	.word	0x08001d93
 80017e0:	08001d93 	.word	0x08001d93
 80017e4:	08001d93 	.word	0x08001d93
 80017e8:	08001d93 	.word	0x08001d93
 80017ec:	08001d93 	.word	0x08001d93
 80017f0:	08001d93 	.word	0x08001d93
 80017f4:	08001d93 	.word	0x08001d93
 80017f8:	08001d93 	.word	0x08001d93
 80017fc:	08001d93 	.word	0x08001d93
 8001800:	08001d93 	.word	0x08001d93
 8001804:	08001d93 	.word	0x08001d93
 8001808:	08001d93 	.word	0x08001d93
 800180c:	08001d93 	.word	0x08001d93
 8001810:	08001d93 	.word	0x08001d93
 8001814:	08001d93 	.word	0x08001d93
 8001818:	08001d93 	.word	0x08001d93
 800181c:	08001d93 	.word	0x08001d93
 8001820:	08001d93 	.word	0x08001d93
 8001824:	08001d71 	.word	0x08001d71
 8001828:	08001d93 	.word	0x08001d93
 800182c:	08001d93 	.word	0x08001d93
 8001830:	08001d93 	.word	0x08001d93
 8001834:	08001d93 	.word	0x08001d93
 8001838:	08001d93 	.word	0x08001d93
 800183c:	08001d93 	.word	0x08001d93
 8001840:	08001d93 	.word	0x08001d93
 8001844:	08001d93 	.word	0x08001d93
 8001848:	08001d93 	.word	0x08001d93
 800184c:	08001d93 	.word	0x08001d93
 8001850:	08001d93 	.word	0x08001d93
 8001854:	08001d93 	.word	0x08001d93
 8001858:	08001d93 	.word	0x08001d93
 800185c:	08001d93 	.word	0x08001d93
 8001860:	08001d93 	.word	0x08001d93
 8001864:	08001d77 	.word	0x08001d77
 8001868:	08001d93 	.word	0x08001d93
 800186c:	08001d93 	.word	0x08001d93
 8001870:	08001d93 	.word	0x08001d93
 8001874:	08001d93 	.word	0x08001d93
 8001878:	08001d93 	.word	0x08001d93
 800187c:	08001d93 	.word	0x08001d93
 8001880:	08001d93 	.word	0x08001d93
 8001884:	08001d93 	.word	0x08001d93
 8001888:	08001d93 	.word	0x08001d93
 800188c:	08001d93 	.word	0x08001d93
 8001890:	08001d93 	.word	0x08001d93
 8001894:	08001d93 	.word	0x08001d93
 8001898:	08001d93 	.word	0x08001d93
 800189c:	08001d93 	.word	0x08001d93
 80018a0:	08001d93 	.word	0x08001d93
 80018a4:	08001d85 	.word	0x08001d85
 80018a8:	08001d5d 	.word	0x08001d5d
 80018ac:	08001d93 	.word	0x08001d93
 80018b0:	08001d93 	.word	0x08001d93
 80018b4:	08001d93 	.word	0x08001d93
 80018b8:	08001d93 	.word	0x08001d93
 80018bc:	08001d93 	.word	0x08001d93
 80018c0:	08001d93 	.word	0x08001d93
 80018c4:	08001d93 	.word	0x08001d93
 80018c8:	08001d93 	.word	0x08001d93
 80018cc:	08001d93 	.word	0x08001d93
 80018d0:	08001d93 	.word	0x08001d93
 80018d4:	08001d93 	.word	0x08001d93
 80018d8:	08001d93 	.word	0x08001d93
 80018dc:	08001d93 	.word	0x08001d93
 80018e0:	08001d93 	.word	0x08001d93
 80018e4:	08001d93 	.word	0x08001d93
 80018e8:	08001d49 	.word	0x08001d49
	case 0x10: {
		printf("SDN1 ON\n");
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <HAL_UART_RxCpltCallback+0x3dc>)
 80018ee:	f014 fd43 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_UART_RxCpltCallback+0x3e0>)
 80018f4:	2104      	movs	r1, #4
 80018f6:	2201      	movs	r2, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f007 fd13 	bl	8009324 <HAL_GPIO_WritePin>
		break;
 80018fe:	e253      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <HAL_UART_RxCpltCallback+0x3e4>)
 8001902:	f014 fd39 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_UART_RxCpltCallback+0x3e0>)
 8001908:	2104      	movs	r1, #4
 800190a:	2200      	movs	r2, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f007 fd09 	bl	8009324 <HAL_GPIO_WritePin>
		break;
 8001912:	e249      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
 8001914:	24001920 	.word	0x24001920
 8001918:	24001c0c 	.word	0x24001c0c
 800191c:	08016d40 	.word	0x08016d40
 8001920:	58020400 	.word	0x58020400
 8001924:	08016d48 	.word	0x08016d48
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001928:	48bb      	ldr	r0, [pc, #748]	; (8001c18 <HAL_UART_RxCpltCallback+0x6d8>)
 800192a:	f014 fd25 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800192e:	4bbb      	ldr	r3, [pc, #748]	; (8001c1c <HAL_UART_RxCpltCallback+0x6dc>)
 8001930:	2120      	movs	r1, #32
 8001932:	2201      	movs	r2, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f007 fcf5 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800193a:	2101      	movs	r1, #1
 800193c:	2008      	movs	r0, #8
 800193e:	f002 fa9b 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001942:	e231      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001944:	48b6      	ldr	r0, [pc, #728]	; (8001c20 <HAL_UART_RxCpltCallback+0x6e0>)
 8001946:	f014 fd17 	bl	8016378 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800194a:	2308      	movs	r3, #8
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e00f      	b.n	8001970 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001950:	4ab4      	ldr	r2, [pc, #720]	; (8001c24 <HAL_UART_RxCpltCallback+0x6e4>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001958:	4ab2      	ldr	r2, [pc, #712]	; (8001c24 <HAL_UART_RxCpltCallback+0x6e4>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	889b      	ldrh	r3, [r3, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	4619      	mov	r1, r3
 8001966:	f007 fcdd 	bl	8009324 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3b01      	subs	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	dcec      	bgt.n	8001950 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001976:	2310      	movs	r3, #16
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e008      	b.n	800198e <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fa78 	bl	8003e78 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	3b01      	subs	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b07      	cmp	r3, #7
 8001992:	dcf3      	bgt.n	800197c <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001994:	e208      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001996:	48a4      	ldr	r0, [pc, #656]	; (8001c28 <HAL_UART_RxCpltCallback+0x6e8>)
 8001998:	f014 fcee 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800199c:	4ba3      	ldr	r3, [pc, #652]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 800199e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a2:	2201      	movs	r2, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fcbd 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80019aa:	2101      	movs	r1, #1
 80019ac:	2009      	movs	r0, #9
 80019ae:	f002 fa63 	bl	8003e78 <set_rail_monitor_enable>

		break;
 80019b2:	e1f9      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80019b4:	489e      	ldr	r0, [pc, #632]	; (8001c30 <HAL_UART_RxCpltCallback+0x6f0>)
 80019b6:	f014 fcdf 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80019ba:	4b9c      	ldr	r3, [pc, #624]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 80019bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c0:	2200      	movs	r2, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f007 fcae 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80019c8:	2100      	movs	r1, #0
 80019ca:	2009      	movs	r0, #9
 80019cc:	f002 fa54 	bl	8003e78 <set_rail_monitor_enable>
		break;
 80019d0:	e1ea      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80019d2:	4898      	ldr	r0, [pc, #608]	; (8001c34 <HAL_UART_RxCpltCallback+0x6f4>)
 80019d4:	f014 fcd0 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	2201      	movs	r2, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f007 fca0 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80019e4:	2101      	movs	r1, #1
 80019e6:	200a      	movs	r0, #10
 80019e8:	f002 fa46 	bl	8003e78 <set_rail_monitor_enable>

		break;
 80019ec:	e1dc      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80019ee:	4892      	ldr	r0, [pc, #584]	; (8001c38 <HAL_UART_RxCpltCallback+0x6f8>)
 80019f0:	f014 fcc2 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80019f4:	4b8d      	ldr	r3, [pc, #564]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	2200      	movs	r2, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 fc92 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a00:	2100      	movs	r1, #0
 8001a02:	200a      	movs	r0, #10
 8001a04:	f002 fa38 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001a08:	e1ce      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a0a:	488c      	ldr	r0, [pc, #560]	; (8001c3c <HAL_UART_RxCpltCallback+0x6fc>)
 8001a0c:	f014 fcb4 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a10:	4b86      	ldr	r3, [pc, #536]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	2201      	movs	r2, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fc84 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	200b      	movs	r0, #11
 8001a20:	f002 fa2a 	bl	8003e78 <set_rail_monitor_enable>

		break;
 8001a24:	e1c0      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001a26:	4886      	ldr	r0, [pc, #536]	; (8001c40 <HAL_UART_RxCpltCallback+0x700>)
 8001a28:	f014 fca6 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001a2c:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001a2e:	2140      	movs	r1, #64	; 0x40
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f007 fc76 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	200b      	movs	r0, #11
 8001a3c:	f002 fa1c 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001a40:	e1b2      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001a42:	4880      	ldr	r0, [pc, #512]	; (8001c44 <HAL_UART_RxCpltCallback+0x704>)
 8001a44:	f014 fc98 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001a48:	4b78      	ldr	r3, [pc, #480]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f007 fc67 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001a56:	2101      	movs	r1, #1
 8001a58:	200c      	movs	r0, #12
 8001a5a:	f002 fa0d 	bl	8003e78 <set_rail_monitor_enable>

		break;
 8001a5e:	e1a3      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001a60:	4879      	ldr	r0, [pc, #484]	; (8001c48 <HAL_UART_RxCpltCallback+0x708>)
 8001a62:	f014 fc89 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001a66:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 fc58 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	200c      	movs	r0, #12
 8001a78:	f002 f9fe 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001a7c:	e194      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001a7e:	4873      	ldr	r0, [pc, #460]	; (8001c4c <HAL_UART_RxCpltCallback+0x70c>)
 8001a80:	f014 fc7a 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001a84:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f007 fc49 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001a92:	2101      	movs	r1, #1
 8001a94:	200d      	movs	r0, #13
 8001a96:	f002 f9ef 	bl	8003e78 <set_rail_monitor_enable>

		break;
 8001a9a:	e185      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001a9c:	486c      	ldr	r0, [pc, #432]	; (8001c50 <HAL_UART_RxCpltCallback+0x710>)
 8001a9e:	f014 fc6b 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001aa2:	4b62      	ldr	r3, [pc, #392]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f007 fc3a 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200d      	movs	r0, #13
 8001ab4:	f002 f9e0 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001ab8:	e176      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001aba:	4866      	ldr	r0, [pc, #408]	; (8001c54 <HAL_UART_RxCpltCallback+0x714>)
 8001abc:	f014 fc5c 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001ac0:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f007 fc2b 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	200f      	movs	r0, #15
 8001ad2:	f002 f9d1 	bl	8003e78 <set_rail_monitor_enable>

		break;
 8001ad6:	e167      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001ad8:	485f      	ldr	r0, [pc, #380]	; (8001c58 <HAL_UART_RxCpltCallback+0x718>)
 8001ada:	f014 fc4d 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001ade:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_UART_RxCpltCallback+0x6ec>)
 8001ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f007 fc1c 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001aec:	2100      	movs	r1, #0
 8001aee:	200f      	movs	r0, #15
 8001af0:	f002 f9c2 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001af4:	e158      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001af6:	4859      	ldr	r0, [pc, #356]	; (8001c5c <HAL_UART_RxCpltCallback+0x71c>)
 8001af8:	f014 fc3e 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001afc:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_UART_RxCpltCallback+0x6dc>)
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	2201      	movs	r2, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fc0e 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b08:	2101      	movs	r1, #1
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f002 f9b4 	bl	8003e78 <set_rail_monitor_enable>

		break;
 8001b10:	e14a      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b12:	4853      	ldr	r0, [pc, #332]	; (8001c60 <HAL_UART_RxCpltCallback+0x720>)
 8001b14:	f014 fc30 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <HAL_UART_RxCpltCallback+0x6dc>)
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fc00 	bl	8009324 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001b24:	2100      	movs	r1, #0
 8001b26:	2010      	movs	r0, #16
 8001b28:	f002 f9a6 	bl	8003e78 <set_rail_monitor_enable>
		break;
 8001b2c:	e13c      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001b2e:	484d      	ldr	r0, [pc, #308]	; (8001c64 <HAL_UART_RxCpltCallback+0x724>)
 8001b30:	f014 fc22 	bl	8016378 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001b34:	2300      	movs	r3, #0
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2320      	movs	r3, #32
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_UART_RxCpltCallback+0x728>)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	484b      	ldr	r0, [pc, #300]	; (8001c6c <HAL_UART_RxCpltCallback+0x72c>)
 8001b40:	f004 f854 	bl	8005bec <HAL_DAC_Start_DMA>
		break;
 8001b44:	e130      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001b46:	484a      	ldr	r0, [pc, #296]	; (8001c70 <HAL_UART_RxCpltCallback+0x730>)
 8001b48:	f014 fc16 	bl	8016378 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4847      	ldr	r0, [pc, #284]	; (8001c6c <HAL_UART_RxCpltCallback+0x72c>)
 8001b50:	f004 f90c 	bl	8005d6c <HAL_DAC_Stop_DMA>
		break;
 8001b54:	e128      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001b56:	4847      	ldr	r0, [pc, #284]	; (8001c74 <HAL_UART_RxCpltCallback+0x734>)
 8001b58:	f014 fc0e 	bl	8016378 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b5c:	210c      	movs	r1, #12
 8001b5e:	4846      	ldr	r0, [pc, #280]	; (8001c78 <HAL_UART_RxCpltCallback+0x738>)
 8001b60:	f00c ffe4 	bl	800eb2c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001b64:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <HAL_UART_RxCpltCallback+0x73c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f011 facc 	bl	8013108 <osEventFlagsSet>
		break;
 8001b70:	e11a      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001b72:	4843      	ldr	r0, [pc, #268]	; (8001c80 <HAL_UART_RxCpltCallback+0x740>)
 8001b74:	f014 fc00 	bl	8016378 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001b78:	210c      	movs	r1, #12
 8001b7a:	483f      	ldr	r0, [pc, #252]	; (8001c78 <HAL_UART_RxCpltCallback+0x738>)
 8001b7c:	f00d f930 	bl	800ede0 <HAL_TIM_OC_Stop_IT>
		break;
 8001b80:	e112      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001b82:	4840      	ldr	r0, [pc, #256]	; (8001c84 <HAL_UART_RxCpltCallback+0x744>)
 8001b84:	f014 fbf8 	bl	8016378 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	483f      	ldr	r0, [pc, #252]	; (8001c88 <HAL_UART_RxCpltCallback+0x748>)
 8001b8c:	f00c ffce 	bl	800eb2c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_UART_RxCpltCallback+0x73c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f011 fab6 	bl	8013108 <osEventFlagsSet>
		break;
 8001b9c:	e104      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001b9e:	483b      	ldr	r0, [pc, #236]	; (8001c8c <HAL_UART_RxCpltCallback+0x74c>)
 8001ba0:	f014 fbea 	bl	8016378 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4838      	ldr	r0, [pc, #224]	; (8001c88 <HAL_UART_RxCpltCallback+0x748>)
 8001ba8:	f00d f91a 	bl	800ede0 <HAL_TIM_OC_Stop_IT>
		break;
 8001bac:	e0fc      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001bae:	4838      	ldr	r0, [pc, #224]	; (8001c90 <HAL_UART_RxCpltCallback+0x750>)
 8001bb0:	f014 fbe2 	bl	8016378 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_UART_RxCpltCallback+0x73c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2104      	movs	r1, #4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f011 faa4 	bl	8013108 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001bc0:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_UART_RxCpltCallback+0x754>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
		break;
 8001bc6:	e0ef      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001bc8:	4833      	ldr	r0, [pc, #204]	; (8001c98 <HAL_UART_RxCpltCallback+0x758>)
 8001bca:	f014 fbd5 	bl	8016378 <puts>
		HK_ENABLED = 0;
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_UART_RxCpltCallback+0x754>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
		break;
 8001bd4:	e0e8      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001bd6:	4831      	ldr	r0, [pc, #196]	; (8001c9c <HAL_UART_RxCpltCallback+0x75c>)
 8001bd8:	f014 fbce 	bl	8016378 <puts>
		if (step < 14) {
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_UART_RxCpltCallback+0x760>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b0d      	cmp	r3, #13
 8001be4:	f200 80d9 	bhi.w	8001d9a <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_UART_RxCpltCallback+0x760>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3302      	adds	r3, #2
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_UART_RxCpltCallback+0x760>)
 8001bf4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_UART_RxCpltCallback+0x760>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_UART_RxCpltCallback+0x728>)
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	4818      	ldr	r0, [pc, #96]	; (8001c6c <HAL_UART_RxCpltCallback+0x72c>)
 8001c0a:	f004 f952 	bl	8005eb2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4816      	ldr	r0, [pc, #88]	; (8001c6c <HAL_UART_RxCpltCallback+0x72c>)
 8001c12:	f003 ff93 	bl	8005b3c <HAL_DAC_Start>
		}
		break;
 8001c16:	e0c0      	b.n	8001d9a <HAL_UART_RxCpltCallback+0x85a>
 8001c18:	08016d54 	.word	0x08016d54
 8001c1c:	58020400 	.word	0x58020400
 8001c20:	08016d60 	.word	0x08016d60
 8001c24:	0801705c 	.word	0x0801705c
 8001c28:	08016d6c 	.word	0x08016d6c
 8001c2c:	58020800 	.word	0x58020800
 8001c30:	08016d78 	.word	0x08016d78
 8001c34:	08016d88 	.word	0x08016d88
 8001c38:	08016d94 	.word	0x08016d94
 8001c3c:	08016da0 	.word	0x08016da0
 8001c40:	08016dac 	.word	0x08016dac
 8001c44:	08016dbc 	.word	0x08016dbc
 8001c48:	08016dc8 	.word	0x08016dc8
 8001c4c:	08016dd4 	.word	0x08016dd4
 8001c50:	08016de0 	.word	0x08016de0
 8001c54:	08016dec 	.word	0x08016dec
 8001c58:	08016dfc 	.word	0x08016dfc
 8001c5c:	08016e0c 	.word	0x08016e0c
 8001c60:	08016e18 	.word	0x08016e18
 8001c64:	08016e28 	.word	0x08016e28
 8001c68:	24000000 	.word	0x24000000
 8001c6c:	240002d4 	.word	0x240002d4
 8001c70:	08016e38 	.word	0x08016e38
 8001c74:	08016e48 	.word	0x08016e48
 8001c78:	24001b74 	.word	0x24001b74
 8001c7c:	24001914 	.word	0x24001914
 8001c80:	08016e50 	.word	0x08016e50
 8001c84:	08016e5c 	.word	0x08016e5c
 8001c88:	24001b28 	.word	0x24001b28
 8001c8c:	08016e64 	.word	0x08016e64
 8001c90:	08016e6c 	.word	0x08016e6c
 8001c94:	24001960 	.word	0x24001960
 8001c98:	08016e74 	.word	0x08016e74
 8001c9c:	08016e7c 	.word	0x08016e7c
 8001ca0:	24001961 	.word	0x24001961
	}
	case 0x0D: {
		printf("Step Down\n");
 8001ca4:	4842      	ldr	r0, [pc, #264]	; (8001db0 <HAL_UART_RxCpltCallback+0x870>)
 8001ca6:	f014 fb67 	bl	8016378 <puts>
		if (step > 1) {
 8001caa:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <HAL_UART_RxCpltCallback+0x874>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d974      	bls.n	8001d9e <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_UART_RxCpltCallback+0x874>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3b02      	subs	r3, #2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_UART_RxCpltCallback+0x874>)
 8001cc0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cc2:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_UART_RxCpltCallback+0x874>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_UART_RxCpltCallback+0x878>)
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4839      	ldr	r0, [pc, #228]	; (8001dbc <HAL_UART_RxCpltCallback+0x87c>)
 8001cd6:	f004 f8ec 	bl	8005eb2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4837      	ldr	r0, [pc, #220]	; (8001dbc <HAL_UART_RxCpltCallback+0x87c>)
 8001cde:	f003 ff2d 	bl	8005b3c <HAL_DAC_Start>
		}
		break;
 8001ce2:	e05c      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001ce4:	4836      	ldr	r0, [pc, #216]	; (8001dc0 <HAL_UART_RxCpltCallback+0x880>)
 8001ce6:	f014 fb47 	bl	8016378 <puts>
		if (cadence <= 50000) {
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d855      	bhi.n	8001da2 <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001cfe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d0a:	e04a      	b.n	8001da2 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d0c:	482e      	ldr	r0, [pc, #184]	; (8001dc8 <HAL_UART_RxCpltCallback+0x888>)
 8001d0e:	f014 fb33 	bl	8016378 <puts>
		if (cadence >= 6250) {
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f641 0269 	movw	r2, #6249	; 0x1869
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d943      	bls.n	8001da6 <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001d26:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_UART_RxCpltCallback+0x884>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d32:	e038      	b.n	8001da6 <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001d34:	4825      	ldr	r0, [pc, #148]	; (8001dcc <HAL_UART_RxCpltCallback+0x88c>)
 8001d36:	f014 fb1f 	bl	8016378 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_UART_RxCpltCallback+0x890>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f011 f9e1 	bl	8013108 <osEventFlagsSet>
		break;
 8001d46:	e02f      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001d48:	4822      	ldr	r0, [pc, #136]	; (8001dd4 <HAL_UART_RxCpltCallback+0x894>)
 8001d4a:	f014 fb15 	bl	8016378 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_UART_RxCpltCallback+0x890>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2104      	movs	r1, #4
 8001d54:	4618      	mov	r0, r3
 8001d56:	f011 f9d7 	bl	8013108 <osEventFlagsSet>
		break;
 8001d5a:	e025      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001d5c:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <HAL_UART_RxCpltCallback+0x898>)
 8001d5e:	f014 fb0b 	bl	8016378 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_UART_RxCpltCallback+0x890>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2108      	movs	r1, #8
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f011 f9cd 	bl	8013108 <osEventFlagsSet>
		break;
 8001d6e:	e01b      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001d70:	f000 f960 	bl	8002034 <sync>
		break;
 8001d74:	e018      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_UART_RxCpltCallback+0x89c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f011 f9c3 	bl	8013108 <osEventFlagsSet>
		break;
 8001d82:	e011      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_UART_RxCpltCallback+0x89c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f011 f9bc 	bl	8013108 <osEventFlagsSet>
		break;
 8001d90:	e00a      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001d92:	4813      	ldr	r0, [pc, #76]	; (8001de0 <HAL_UART_RxCpltCallback+0x8a0>)
 8001d94:	f014 faf0 	bl	8016378 <puts>
		break;
 8001d98:	e006      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001d9a:	bf00      	nop
 8001d9c:	e004      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001d9e:	bf00      	nop
 8001da0:	e002      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001da2:	bf00      	nop
 8001da4:	e000      	b.n	8001da8 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001da6:	bf00      	nop
	}
	}
}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	08016e84 	.word	0x08016e84
 8001db4:	24001961 	.word	0x24001961
 8001db8:	24000000 	.word	0x24000000
 8001dbc:	240002d4 	.word	0x240002d4
 8001dc0:	08016e90 	.word	0x08016e90
 8001dc4:	24000080 	.word	0x24000080
 8001dc8:	08016e9c 	.word	0x08016e9c
 8001dcc:	08016ea8 	.word	0x08016ea8
 8001dd0:	24001918 	.word	0x24001918
 8001dd4:	08016eb8 	.word	0x08016eb8
 8001dd8:	08016ec4 	.word	0x08016ec4
 8001ddc:	2400191c 	.word	0x2400191c
 8001de0:	08016ed0 	.word	0x08016ed0

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f002 f914 	bl	8004014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dec:	f000 f826 	bl	8001e3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001df0:	f000 f8a4 	bl	8001f3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df4:	f7ff fa22 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 8001df8:	f7fe ff76 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001dfc:	f001 fae4 	bl	80033c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001e00:	f001 fd72 	bl	80038e8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e04:	f7ff fa94 	bl	8001330 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e08:	f000 fe36 	bl	8002a78 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e0c:	f001 fa66 	bl	80032dc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e10:	f001 f9b6 	bl	8003180 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001e14:	f7fe fd08 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001e18:	f7fe fbe4 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001e1c:	f7fe feb0 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001e20:	f000 fdd2 	bl	80029c8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e24:	f000 fbb6 	bl	8002594 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001e28:	f000 f8b8 	bl	8001f9c <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e2c:	f011 f816 	bl	8012e5c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e30:	f7fe ffac 	bl	8000d8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e34:	f011 f836 	bl	8012ea4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e38:	e7fe      	b.n	8001e38 <main+0x54>
	...

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b09c      	sub	sp, #112	; 0x70
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	224c      	movs	r2, #76	; 0x4c
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f014 fa1e 	bl	801628c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2220      	movs	r2, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f014 fa18 	bl	801628c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	f008 f8c3 	bl	8009fe8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <SystemClock_Config+0xf8>)
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <SystemClock_Config+0xf8>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <SystemClock_Config+0xf8>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e84:	4a2c      	ldr	r2, [pc, #176]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e98:	bf00      	nop
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea6:	d1f8      	bne.n	8001e9a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f008 f8b8 	bl	800a05c <HAL_RCC_OscConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001ef2:	f000 f957 	bl	80021a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	233f      	movs	r3, #63	; 0x3f
 8001ef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efa:	2303      	movs	r3, #3
 8001efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f008 fcf8 	bl	800a910 <HAL_RCC_ClockConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001f26:	f000 f93d 	bl	80021a4 <Error_Handler>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3770      	adds	r7, #112	; 0x70
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	58000400 	.word	0x58000400
 8001f38:	58024800 	.word	0x58024800

08001f3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0b0      	sub	sp, #192	; 0xc0
 8001f40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f42:	463b      	mov	r3, r7
 8001f44:	22c0      	movs	r2, #192	; 0xc0
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f014 f99f 	bl	801628c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001f62:	2308      	movs	r3, #8
 8001f64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f80:	463b      	mov	r3, r7
 8001f82:	4618      	mov	r0, r3
 8001f84:	f009 f892 	bl	800b0ac <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001f8e:	f000 f909 	bl	80021a4 <Error_Handler>
  }
}
 8001f92:	bf00      	nop
 8001f94:	37c0      	adds	r7, #192	; 0xc0
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f011 f872 	bl	801308a <osEventFlagsNew>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	; (800201c <system_setup+0x80>)
 8001faa:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <system_setup+0x80>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d100      	bne.n	8001fb6 <system_setup+0x1a>
        while (1);
 8001fb4:	e7fe      	b.n	8001fb4 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f011 f867 	bl	801308a <osEventFlagsNew>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <system_setup+0x84>)
 8001fc0:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <system_setup+0x84>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d100      	bne.n	8001fcc <system_setup+0x30>
        while (1);
 8001fca:	e7fe      	b.n	8001fca <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f011 f85c 	bl	801308a <osEventFlagsNew>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <system_setup+0x88>)
 8001fd6:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <system_setup+0x88>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d100      	bne.n	8001fe2 <system_setup+0x46>
        while (1);
 8001fe0:	e7fe      	b.n	8001fe0 <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001fe2:	f001 fd8b 	bl	8003afc <voltage_monitor_init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <system_setup+0x52>
		while (1);
 8001fec:	e7fe      	b.n	8001fec <system_setup+0x50>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <system_setup+0x8c>)
 8001ff2:	f00c fd9b 	bl	800eb2c <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffa:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8002000:	f000 fb5a 	bl	80026b8 <init_adc_dma>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d100      	bne.n	800200c <system_setup+0x70>
		while (1);
 800200a:	e7fe      	b.n	800200a <system_setup+0x6e>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800200c:	2201      	movs	r2, #1
 800200e:	4907      	ldr	r1, [pc, #28]	; (800202c <system_setup+0x90>)
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <system_setup+0x94>)
 8002012:	f00e fa6b 	bl	80104ec <HAL_UART_Receive_IT>

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	24001914 	.word	0x24001914
 8002020:	24001918 	.word	0x24001918
 8002024:	2400191c 	.word	0x2400191c
 8002028:	24001bc0 	.word	0x24001bc0
 800202c:	24001920 	.word	0x24001920
 8002030:	24001c0c 	.word	0x24001c0c

08002034 <sync>:

void sync() {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
	send_ACK();
 800203a:	f000 f821 	bl	8002080 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800203e:	480e      	ldr	r0, [pc, #56]	; (8002078 <sync+0x44>)
 8002040:	f00e faa0 	bl	8010584 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002044:	2364      	movs	r3, #100	; 0x64
 8002046:	2209      	movs	r2, #9
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <sync+0x48>)
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <sync+0x44>)
 800204c:	f00e f986 	bl	801035c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <sync+0x48>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2bff      	cmp	r3, #255	; 0xff
 800205a:	d1f3      	bne.n	8002044 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 800205c:	4807      	ldr	r0, [pc, #28]	; (800207c <sync+0x48>)
 800205e:	f001 fb81 	bl	8003764 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002062:	2201      	movs	r2, #1
 8002064:	4905      	ldr	r1, [pc, #20]	; (800207c <sync+0x48>)
 8002066:	4804      	ldr	r0, [pc, #16]	; (8002078 <sync+0x44>)
 8002068:	f00e fa40 	bl	80104ec <HAL_UART_Receive_IT>

	send_ACK();
 800206c:	f000 f808 	bl	8002080 <send_ACK>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24001c0c 	.word	0x24001c0c
 800207c:	24001920 	.word	0x24001920

08002080 <send_ACK>:

void send_ACK() {
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <send_ACK+0x1c>)
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800208a:	2364      	movs	r3, #100	; 0x64
 800208c:	2201      	movs	r2, #1
 800208e:	4903      	ldr	r1, [pc, #12]	; (800209c <send_ACK+0x1c>)
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <send_ACK+0x20>)
 8002092:	f00e f8d5 	bl	8010240 <HAL_UART_Transmit>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	24001968 	.word	0x24001968
 80020a0:	24001c0c 	.word	0x24001c0c

080020a4 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <get_current_step+0xc0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <get_current_step+0xac>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c0:	da48      	bge.n	8002154 <get_current_step+0xb0>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d03f      	beq.n	800214c <get_current_step+0xa8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020d2:	4293      	cmp	r3, r2
 80020d4:	dc3e      	bgt.n	8002154 <get_current_step+0xb0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020dc:	4293      	cmp	r3, r2
 80020de:	d033      	beq.n	8002148 <get_current_step+0xa4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80020e6:	da35      	bge.n	8002154 <get_current_step+0xb0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d028      	beq.n	8002144 <get_current_step+0xa0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020f8:	4293      	cmp	r3, r2
 80020fa:	dc2b      	bgt.n	8002154 <get_current_step+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f240 7245 	movw	r2, #1861	; 0x745
 8002102:	4293      	cmp	r3, r2
 8002104:	d01c      	beq.n	8002140 <get_current_step+0x9c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f240 7245 	movw	r2, #1861	; 0x745
 800210c:	4293      	cmp	r3, r2
 800210e:	dc21      	bgt.n	8002154 <get_current_step+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002116:	4293      	cmp	r3, r2
 8002118:	d010      	beq.n	800213c <get_current_step+0x98>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002120:	4293      	cmp	r3, r2
 8002122:	dc17      	bgt.n	8002154 <get_current_step+0xb0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <get_current_step+0x90>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002130:	d002      	beq.n	8002138 <get_current_step+0x94>
 8002132:	e00f      	b.n	8002154 <get_current_step+0xb0>
	case 0:
		return 0;
 8002134:	2300      	movs	r3, #0
 8002136:	e00e      	b.n	8002156 <get_current_step+0xb2>
	case 620:
		return 1;
 8002138:	2301      	movs	r3, #1
 800213a:	e00c      	b.n	8002156 <get_current_step+0xb2>
	case 1241:
		return 2;
 800213c:	2302      	movs	r3, #2
 800213e:	e00a      	b.n	8002156 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002140:	2303      	movs	r3, #3
 8002142:	e008      	b.n	8002156 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002144:	2304      	movs	r3, #4
 8002146:	e006      	b.n	8002156 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002148:	2305      	movs	r3, #5
 800214a:	e004      	b.n	8002156 <get_current_step+0xb2>
	case 3723:
		return 6;
 800214c:	2306      	movs	r3, #6
 800214e:	e002      	b.n	8002156 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002150:	2307      	movs	r3, #7
 8002152:	e000      	b.n	8002156 <get_current_step+0xb2>
	default:
		return -1;
 8002154:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007400 	.word	0x40007400

08002168 <enter_stop>:

void enter_stop() {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	  send_ACK();
 800216c:	f7ff ff88 	bl	8002080 <send_ACK>

	  vTaskSuspendAll();
 8002170:	f012 fb22 	bl	80147b8 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002174:	2101      	movs	r1, #1
 8002176:	2001      	movs	r0, #1
 8002178:	f007 fefa 	bl	8009f70 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 800217c:	f7ff f984 	bl	8001488 <__NVIC_SystemReset>

08002180 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002192:	f001 ff7b 	bl	800408c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40001000 	.word	0x40001000

080021a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021ac:	e7fe      	b.n	80021ac <Error_Handler+0x8>
	...

080021b0 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021b6:	bf00      	nop
 80021b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021bc:	481c      	ldr	r0, [pc, #112]	; (8002230 <create_pmt_packet+0x80>)
 80021be:	f007 f899 	bl	80092f4 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f7      	bne.n	80021b8 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 fa2a 	bl	8003624 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 faaf 	bl	8002738 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80021da:	23bb      	movs	r3, #187	; 0xbb
 80021dc:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80021de:	23bb      	movs	r3, #187	; 0xbb
 80021e0:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <create_pmt_packet+0x84>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <create_pmt_packet+0x84>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80021f6:	7a3b      	ldrb	r3, [r7, #8]
 80021f8:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80021fa:	7a7b      	ldrb	r3, [r7, #9]
 80021fc:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80021fe:	793b      	ldrb	r3, [r7, #4]
 8002200:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002202:	797b      	ldrb	r3, [r7, #5]
 8002204:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800220e:	f107 010c 	add.w	r1, r7, #12
 8002212:	2364      	movs	r3, #100	; 0x64
 8002214:	220a      	movs	r2, #10
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <create_pmt_packet+0x88>)
 8002218:	f00e f812 	bl	8010240 <HAL_UART_Transmit>

	pmt_seq++;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <create_pmt_packet+0x84>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <create_pmt_packet+0x84>)
 8002226:	801a      	strh	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	58020000 	.word	0x58020000
 8002234:	2400196a 	.word	0x2400196a
 8002238:	24001c0c 	.word	0x24001c0c

0800223c <create_erpa_packet>:


void create_erpa_packet() {
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002242:	bf00      	nop
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4828      	ldr	r0, [pc, #160]	; (80022ec <create_erpa_packet+0xb0>)
 800224a:	f007 f853 	bl	80092f4 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f7      	bne.n	8002244 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002254:	23ff      	movs	r3, #255	; 0xff
 8002256:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f001 f9e2 	bl	8003624 <get_uptime>
	sweep_step = get_current_step();
 8002260:	f7ff ff20 	bl	80020a4 <get_current_step>
 8002264:	4603      	mov	r3, r0
 8002266:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fa87 	bl	8002780 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4618      	mov	r0, r3
 8002278:	f000 faa6 	bl	80027c8 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 800227c:	23aa      	movs	r3, #170	; 0xaa
 800227e:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002280:	23aa      	movs	r3, #170	; 0xaa
 8002282:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <create_erpa_packet+0xb4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	b2db      	uxtb	r3, r3
 800228c:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <create_erpa_packet+0xb4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b2db      	uxtb	r3, r3
 8002296:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <create_erpa_packet+0xb4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022ae:	893b      	ldrh	r3, [r7, #8]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022b4:	7b3b      	ldrb	r3, [r7, #12]
 80022b6:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80022bc:	793b      	ldrb	r3, [r7, #4]
 80022be:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80022c0:	797b      	ldrb	r3, [r7, #5]
 80022c2:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80022cc:	f107 0110 	add.w	r1, r7, #16
 80022d0:	2364      	movs	r3, #100	; 0x64
 80022d2:	220e      	movs	r2, #14
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <create_erpa_packet+0xb8>)
 80022d6:	f00d ffb3 	bl	8010240 <HAL_UART_Transmit>

	erpa_seq++;
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <create_erpa_packet+0xb4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <create_erpa_packet+0xb4>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	58020400 	.word	0x58020400
 80022f0:	2400196c 	.word	0x2400196c
 80022f4:	24001c0c 	.word	0x24001c0c

080022f8 <create_hk_packet>:


void create_hk_packet() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b094      	sub	sp, #80	; 0x50
 80022fc:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f98f 	bl	8003624 <get_uptime>
	get_timestamp(timestamp);
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f9da 	bl	80036c4 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002310:	f001 fdd2 	bl	8003eb8 <get_rail_monitor>
 8002314:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002316:	23cc      	movs	r3, #204	; 0xcc
 8002318:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800231a:	23cc      	movs	r3, #204	; 0xcc
 800231c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800231e:	4b9b      	ldr	r3, [pc, #620]	; (800258c <create_hk_packet+0x294>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800232a:	4b98      	ldr	r3, [pc, #608]	; (800258c <create_hk_packet+0x294>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002334:	889b      	ldrh	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	889b      	ldrh	r3, [r3, #4]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002348:	330a      	adds	r3, #10
 800234a:	889b      	ldrh	r3, [r3, #4]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002356:	330a      	adds	r3, #10
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 800235e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002360:	3314      	adds	r3, #20
 8002362:	889b      	ldrh	r3, [r3, #4]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 800236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236e:	3314      	adds	r3, #20
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	331e      	adds	r3, #30
 800237a:	889b      	ldrh	r3, [r3, #4]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	331e      	adds	r3, #30
 8002388:	889b      	ldrh	r3, [r3, #4]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	3328      	adds	r3, #40	; 0x28
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	3328      	adds	r3, #40	; 0x28
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	3332      	adds	r3, #50	; 0x32
 80023be:	889b      	ldrh	r3, [r3, #4]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c8:	333c      	adds	r3, #60	; 0x3c
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	333c      	adds	r3, #60	; 0x3c
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80023e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e4:	3346      	adds	r3, #70	; 0x46
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	3346      	adds	r3, #70	; 0x46
 80023f6:	889b      	ldrh	r3, [r3, #4]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	3350      	adds	r3, #80	; 0x50
 8002402:	889b      	ldrh	r3, [r3, #4]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b29b      	uxth	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002410:	3350      	adds	r3, #80	; 0x50
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	335a      	adds	r3, #90	; 0x5a
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	335a      	adds	r3, #90	; 0x5a
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	3364      	adds	r3, #100	; 0x64
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	3364      	adds	r3, #100	; 0x64
 800244a:	889b      	ldrh	r3, [r3, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002454:	336e      	adds	r3, #110	; 0x6e
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	336e      	adds	r3, #110	; 0x6e
 8002466:	889b      	ldrh	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	3378      	adds	r3, #120	; 0x78
 8002472:	889b      	ldrh	r3, [r3, #4]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	3378      	adds	r3, #120	; 0x78
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 800248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248c:	3382      	adds	r3, #130	; 0x82
 800248e:	889b      	ldrh	r3, [r3, #4]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	3382      	adds	r3, #130	; 0x82
 800249e:	889b      	ldrh	r3, [r3, #4]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	338c      	adds	r3, #140	; 0x8c
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	338c      	adds	r3, #140	; 0x8c
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	3396      	adds	r3, #150	; 0x96
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	3396      	adds	r3, #150	; 0x96
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	33a0      	adds	r3, #160	; 0xa0
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	33a0      	adds	r3, #160	; 0xa0
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	33aa      	adds	r3, #170	; 0xaa
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	33aa      	adds	r3, #170	; 0xaa
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002516:	7a3b      	ldrb	r3, [r7, #8]
 8002518:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 800251c:	7a7b      	ldrb	r3, [r7, #9]
 800251e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002522:	7abb      	ldrb	r3, [r7, #10]
 8002524:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 800252e:	7b3b      	ldrb	r3, [r7, #12]
 8002530:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 800253a:	7bbb      	ldrb	r3, [r7, #14]
 800253c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002546:	7c3b      	ldrb	r3, [r7, #16]
 8002548:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 800254c:	7c7b      	ldrb	r3, [r7, #17]
 800254e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8002552:	793b      	ldrb	r3, [r7, #4]
 8002554:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002558:	797b      	ldrb	r3, [r7, #5]
 800255a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 800256a:	f107 0114 	add.w	r1, r7, #20
 800256e:	2364      	movs	r3, #100	; 0x64
 8002570:	2236      	movs	r2, #54	; 0x36
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <create_hk_packet+0x298>)
 8002574:	f00d fe64 	bl	8010240 <HAL_UART_Transmit>

	hk_seq++;
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <create_hk_packet+0x294>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <create_hk_packet+0x294>)
 8002582:	801a      	strh	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3750      	adds	r7, #80	; 0x50
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24001970 	.word	0x24001970
 8002590:	24001c0c 	.word	0x24001c0c

08002594 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <MX_RTC_Init+0xb4>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <MX_RTC_Init+0xb8>)
 80025b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <MX_RTC_Init+0xb4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <MX_RTC_Init+0xb4>)
 80025ba:	2263      	movs	r2, #99	; 0x63
 80025bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <MX_RTC_Init+0xb4>)
 80025c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80025c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_RTC_Init+0xb4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <MX_RTC_Init+0xb4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_RTC_Init+0xb4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_RTC_Init+0xb4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025de:	481a      	ldr	r0, [pc, #104]	; (8002648 <MX_RTC_Init+0xb4>)
 80025e0:	f00b fa62 	bl	800daa8 <HAL_RTC_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80025ea:	f7ff fddb 	bl	80021a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2201      	movs	r2, #1
 8002606:	4619      	mov	r1, r3
 8002608:	480f      	ldr	r0, [pc, #60]	; (8002648 <MX_RTC_Init+0xb4>)
 800260a:	f00b facf 	bl	800dbac <HAL_RTC_SetTime>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002614:	f7ff fdc6 	bl	80021a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002618:	2301      	movs	r3, #1
 800261a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800261c:	2301      	movs	r3, #1
 800261e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002620:	2301      	movs	r3, #1
 8002622:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002624:	2300      	movs	r3, #0
 8002626:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	2201      	movs	r2, #1
 800262c:	4619      	mov	r1, r3
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <MX_RTC_Init+0xb4>)
 8002630:	f00b fbb6 	bl	800dda0 <HAL_RTC_SetDate>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800263a:	f7ff fdb3 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	24001974 	.word	0x24001974
 800264c:	58004000 	.word	0x58004000

08002650 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0b2      	sub	sp, #200	; 0xc8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	22c0      	movs	r2, #192	; 0xc0
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f013 fe13 	bl	801628c <memset>
  if(rtcHandle->Instance==RTC)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <HAL_RTC_MspInit+0x5c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d118      	bne.n	80026a2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_RTC_MspInit+0x60>)
 800267e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	4618      	mov	r0, r3
 8002688:	f008 fd10 	bl	800b0ac <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8002692:	f7ff fd87 	bl	80021a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_RTC_MspInit+0x64>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_RTC_MspInit+0x64>)
 800269c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026a2:	bf00      	nop
 80026a4:	37c8      	adds	r7, #200	; 0xc8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	58004000 	.word	0x58004000
 80026b0:	00019300 	.word	0x00019300
 80026b4:	58024400 	.word	0x58024400

080026b8 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80026c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ca:	4817      	ldr	r0, [pc, #92]	; (8002728 <init_adc_dma+0x70>)
 80026cc:	f002 fff2 	bl	80056b4 <HAL_ADCEx_Calibration_Start>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80026d6:	f7ff fd65 	bl	80021a4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80026da:	220b      	movs	r2, #11
 80026dc:	4913      	ldr	r1, [pc, #76]	; (800272c <init_adc_dma+0x74>)
 80026de:	4812      	ldr	r0, [pc, #72]	; (8002728 <init_adc_dma+0x70>)
 80026e0:	f002 f8c6 	bl	8004870 <HAL_ADC_Start_DMA>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80026ea:	f7ff fd5b 	bl	80021a4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80026ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <init_adc_dma+0x78>)
 80026f8:	f002 ffdc 	bl	80056b4 <HAL_ADCEx_Calibration_Start>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002702:	f7ff fd4f 	bl	80021a4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002706:	2204      	movs	r2, #4
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <init_adc_dma+0x7c>)
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <init_adc_dma+0x78>)
 800270c:	f002 f8b0 	bl	8004870 <HAL_ADC_Start_DMA>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002716:	f7ff fd45 	bl	80021a4 <Error_Handler>
	}
	status = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	71fb      	strb	r3, [r7, #7]

	return status;
 800271e:	79fb      	ldrb	r3, [r7, #7]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2400011c 	.word	0x2400011c
 800272c:	240019a0 	.word	0x240019a0
 8002730:	24000180 	.word	0x24000180
 8002734:	240019c0 	.word	0x240019c0

08002738 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002740:	f107 010c 	add.w	r1, r7, #12
 8002744:	2301      	movs	r3, #1
 8002746:	2201      	movs	r2, #1
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <sample_pmt_spi+0x44>)
 800274a:	f00b fdf3 	bl	800e334 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002752:	7b7b      	ldrb	r3, [r7, #13]
 8002754:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <sample_pmt_spi+0x44>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <sample_pmt_spi+0x44>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002764:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7bba      	ldrb	r2, [r7, #14]
 800276a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3301      	adds	r3, #1
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	701a      	strb	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	240019c8 	.word	0x240019c8

08002780 <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8002788:	f107 010c 	add.w	r1, r7, #12
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	2201      	movs	r2, #1
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <sample_erpa_spi+0x44>)
 8002792:	f00b fdcf 	bl	800e334 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <sample_erpa_spi+0x44>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <sample_erpa_spi+0x44>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7bba      	ldrb	r2, [r7, #14]
 80027b2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	701a      	strb	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	24001a50 	.word	0x24001a50

080027c8 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <sample_erpa_adc+0x20>)
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	801a      	strh	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	240019a0 	.word	0x240019a0

080027ec <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80027f4:	2390      	movs	r3, #144	; 0x90
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f8a2 	bl	8002940 <poll_i2c_sensor>
 80027fc:	4603      	mov	r3, r0
 80027fe:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002800:	2394      	movs	r3, #148	; 0x94
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f89c 	bl	8002940 <poll_i2c_sensor>
 8002808:	4603      	mov	r3, r0
 800280a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800280c:	2392      	movs	r3, #146	; 0x92
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f896 	bl	8002940 <poll_i2c_sensor>
 8002814:	4603      	mov	r3, r0
 8002816:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002818:	2396      	movs	r3, #150	; 0x96
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f890 	bl	8002940 <poll_i2c_sensor>
 8002820:	4603      	mov	r3, r0
 8002822:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	89fa      	ldrh	r2, [r7, #14]
 8002828:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3302      	adds	r3, #2
 800282e:	89ba      	ldrh	r2, [r7, #12]
 8002830:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	897a      	ldrh	r2, [r7, #10]
 8002838:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3306      	adds	r3, #6
 800283e:	893a      	ldrh	r2, [r7, #8]
 8002840:	801a      	strh	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <sample_hk_adc1+0xa0>)
 8002856:	8a9b      	ldrh	r3, [r3, #20]
 8002858:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <sample_hk_adc1+0xa0>)
 800285c:	8a1b      	ldrh	r3, [r3, #16]
 800285e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <sample_hk_adc1+0xa0>)
 8002862:	899b      	ldrh	r3, [r3, #12]
 8002864:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <sample_hk_adc1+0xa0>)
 8002868:	8a5b      	ldrh	r3, [r3, #18]
 800286a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <sample_hk_adc1+0xa0>)
 800286e:	889b      	ldrh	r3, [r3, #4]
 8002870:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <sample_hk_adc1+0xa0>)
 8002874:	88db      	ldrh	r3, [r3, #6]
 8002876:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <sample_hk_adc1+0xa0>)
 800287a:	89db      	ldrh	r3, [r3, #14]
 800287c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <sample_hk_adc1+0xa0>)
 8002880:	891b      	ldrh	r3, [r3, #8]
 8002882:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <sample_hk_adc1+0xa0>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <sample_hk_adc1+0xa0>)
 800288c:	895b      	ldrh	r3, [r3, #10]
 800288e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8bfa      	ldrh	r2, [r7, #30]
 8002894:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3302      	adds	r3, #2
 800289a:	8bba      	ldrh	r2, [r7, #28]
 800289c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	8b7a      	ldrh	r2, [r7, #26]
 80028a4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3306      	adds	r3, #6
 80028aa:	8b3a      	ldrh	r2, [r7, #24]
 80028ac:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3308      	adds	r3, #8
 80028b2:	8afa      	ldrh	r2, [r7, #22]
 80028b4:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	330a      	adds	r3, #10
 80028ba:	8aba      	ldrh	r2, [r7, #20]
 80028bc:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	330c      	adds	r3, #12
 80028c2:	8a7a      	ldrh	r2, [r7, #18]
 80028c4:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	330e      	adds	r3, #14
 80028ca:	8a3a      	ldrh	r2, [r7, #16]
 80028cc:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3310      	adds	r3, #16
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3312      	adds	r3, #18
 80028da:	89ba      	ldrh	r2, [r7, #12]
 80028dc:	801a      	strh	r2, [r3, #0]
}
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	240019a0 	.word	0x240019a0

080028f0 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <sample_hk_adc3+0x4c>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <sample_hk_adc3+0x4c>)
 8002900:	885b      	ldrh	r3, [r3, #2]
 8002902:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <sample_hk_adc3+0x4c>)
 8002906:	889b      	ldrh	r3, [r3, #4]
 8002908:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <sample_hk_adc3+0x4c>)
 800290c:	88db      	ldrh	r3, [r3, #6]
 800290e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	89fa      	ldrh	r2, [r7, #14]
 8002914:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3302      	adds	r3, #2
 800291a:	89ba      	ldrh	r2, [r7, #12]
 800291c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	897a      	ldrh	r2, [r7, #10]
 8002924:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3306      	adds	r3, #6
 800292a:	893a      	ldrh	r2, [r7, #8]
 800292c:	801a      	strh	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	240019c0 	.word	0x240019c0

08002940 <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800294a:	2300      	movs	r3, #0
 800294c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	b299      	uxth	r1, r3
 8002952:	f107 0208 	add.w	r2, r7, #8
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	4817      	ldr	r0, [pc, #92]	; (80029bc <poll_i2c_sensor+0x7c>)
 8002960:	f006 fd96 	bl	8009490 <HAL_I2C_Master_Transmit>
 8002964:	4603      	mov	r3, r0
 8002966:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002968:	7b7b      	ldrb	r3, [r7, #13]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <poll_i2c_sensor+0x80>)
 8002970:	f013 fd02 	bl	8016378 <puts>
 8002974:	e01c      	b.n	80029b0 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	b299      	uxth	r1, r3
 800297a:	f107 0208 	add.w	r2, r7, #8
 800297e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2302      	movs	r3, #2
 8002986:	480d      	ldr	r0, [pc, #52]	; (80029bc <poll_i2c_sensor+0x7c>)
 8002988:	f006 fe9a 	bl	80096c0 <HAL_I2C_Master_Receive>
 800298c:	4603      	mov	r3, r0
 800298e:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002990:	7b7b      	ldrb	r3, [r7, #13]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002996:	480b      	ldr	r0, [pc, #44]	; (80029c4 <poll_i2c_sensor+0x84>)
 8002998:	f013 fcee 	bl	8016378 <puts>
 800299c:	e008      	b.n	80029b0 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 800299e:	7a3b      	ldrb	r3, [r7, #8]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80029a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a8:	7a7a      	ldrb	r2, [r7, #9]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	10db      	asrs	r3, r3, #3
 80029ae:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80029b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	240018c0 	.word	0x240018c0
 80029c0:	08016ee0 	.word	0x08016ee0
 80029c4:	08016ef0 	.word	0x08016ef0

080029c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029cc:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <MX_SPI1_Init+0xac>)
 80029d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029d2:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029e4:	220f      	movs	r2, #15
 80029e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80029fc:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <MX_SPI1_Init+0xa8>)
 80029fe:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_SPI1_Init+0xa8>)
 8002a5c:	f00b fb46 	bl	800e0ec <HAL_SPI_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002a66:	f7ff fb9d 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	240019c8 	.word	0x240019c8
 8002a74:	40013000 	.word	0x40013000

08002a78 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a7e:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <MX_SPI2_Init+0xac>)
 8002a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a8a:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a94:	220f      	movs	r2, #15
 8002a96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002aac:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aae:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_SPI2_Init+0xa8>)
 8002b0c:	f00b faee 	bl	800e0ec <HAL_SPI_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b16:	f7ff fb45 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	24001a50 	.word	0x24001a50
 8002b24:	40003800 	.word	0x40003800

08002b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0bc      	sub	sp, #240	; 0xf0
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	22c0      	movs	r2, #192	; 0xc0
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f013 fb9f 	bl	801628c <memset>
  if(spiHandle->Instance==SPI1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <HAL_SPI_MspInit+0x15c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d145      	bne.n	8002be4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f008 fa9d 	bl	800b0ac <HAL_RCCEx_PeriphCLKConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002b78:	f7ff fb14 	bl	80021a4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b82:	4a41      	ldr	r2, [pc, #260]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b8c:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002bb8:	2318      	movs	r3, #24
 8002bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd0:	2305      	movs	r3, #5
 8002bd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bda:	4619      	mov	r1, r3
 8002bdc:	482b      	ldr	r0, [pc, #172]	; (8002c8c <HAL_SPI_MspInit+0x164>)
 8002bde:	f006 f9d9 	bl	8008f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002be2:	e04a      	b.n	8002c7a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_SPI_MspInit+0x168>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d145      	bne.n	8002c7a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bfe:	f107 0318 	add.w	r3, r7, #24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f008 fa52 	bl	800b0ac <HAL_RCCEx_PeriphCLKConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002c0e:	f7ff fac9 	bl	80021a4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_SPI_MspInit+0x160>)
 8002c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002c4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c68:	2305      	movs	r3, #5
 8002c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <HAL_SPI_MspInit+0x164>)
 8002c76:	f006 f98d 	bl	8008f94 <HAL_GPIO_Init>
}
 8002c7a:	bf00      	nop
 8002c7c:	37f0      	adds	r7, #240	; 0xf0
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40013000 	.word	0x40013000
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	58020400 	.word	0x58020400
 8002c90:	40003800 	.word	0x40003800

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_MspInit+0x38>)
 8002c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_MspInit+0x38>)
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_MspInit+0x38>)
 8002cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f06f 0001 	mvn.w	r0, #1
 8002cc0:	f002 fef2 	bl	8005aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	58024400 	.word	0x58024400

08002cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	d827      	bhi.n	8002d2e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	2036      	movs	r0, #54	; 0x36
 8002ce4:	f002 fee0 	bl	8005aa8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ce8:	2036      	movs	r0, #54	; 0x36
 8002cea:	f002 fef7 	bl	8005adc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002cee:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_InitTick+0xc4>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_InitTick+0xc8>)
 8002cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <HAL_InitTick+0xc8>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_InitTick+0xc8>)
 8002d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d12:	f107 0210 	add.w	r2, r7, #16
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f008 f983 	bl	800b028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <HAL_InitTick+0x6a>
 8002d2c:	e001      	b.n	8002d32 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02b      	b.n	8002d8a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d32:	f008 f94d 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 8002d36:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d38:	e004      	b.n	8002d44 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d3a:	f008 f949 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <HAL_InitTick+0xcc>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_InitTick+0xd4>)
 8002d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d72:	480b      	ldr	r0, [pc, #44]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d74:	f00b fe0b 	bl	800e98e <HAL_TIM_Base_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <HAL_InitTick+0xd0>)
 8002d80:	f00b fe5c 	bl	800ea3c <HAL_TIM_Base_Start_IT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	e000      	b.n	8002d8a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3740      	adds	r7, #64	; 0x40
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2400008c 	.word	0x2400008c
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	431bde83 	.word	0x431bde83
 8002da0:	24001ad8 	.word	0x24001ad8
 8002da4:	40001000 	.word	0x40001000

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002dac:	e7fe      	b.n	8002dac <NMI_Handler+0x4>

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <DMA1_Stream0_IRQHandler+0x10>)
 8002dda:	f004 fdbd 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	240001e4 	.word	0x240001e4

08002de8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA1_Stream1_IRQHandler+0x10>)
 8002dee:	f004 fdb3 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2400025c 	.word	0x2400025c

08002dfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <DMA1_Stream2_IRQHandler+0x10>)
 8002e02:	f004 fda9 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24001ca0 	.word	0x24001ca0

08002e10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <DMA1_Stream5_IRQHandler+0x10>)
 8002e16:	f004 fd9f 	bl	8007958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	240002e8 	.word	0x240002e8

08002e24 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <TIM1_BRK_IRQHandler+0x10>)
 8002e2a:	f00c f91e 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	24001b28 	.word	0x24001b28

08002e38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM1_UP_IRQHandler+0x10>)
 8002e3e:	f00c f914 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24001b28 	.word	0x24001b28

08002e4c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e52:	f00c f90a 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	24001b28 	.word	0x24001b28

08002e60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <TIM1_CC_IRQHandler+0x10>)
 8002e66:	f00c f900 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	24001b28 	.word	0x24001b28

08002e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <TIM2_IRQHandler+0x10>)
 8002e7a:	f00c f8f6 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	24001b74 	.word	0x24001b74

08002e88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <TIM3_IRQHandler+0x10>)
 8002e8e:	f00c f8ec 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	24001bc0 	.word	0x24001bc0

08002e9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <USART1_IRQHandler+0x10>)
 8002ea2:	f00d fc25 	bl	80106f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	24001c0c 	.word	0x24001c0c

08002eb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <TIM6_DAC_IRQHandler+0x20>)
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002ebe:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <TIM6_DAC_IRQHandler+0x20>)
 8002ec0:	f002 ffa1 	bl	8005e06 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <TIM6_DAC_IRQHandler+0x24>)
 8002ec6:	f00c f8d0 	bl	800f06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	240002d4 	.word	0x240002d4
 8002ed4:	24001ad8 	.word	0x24001ad8

08002ed8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <ITM_SendChar+0x48>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <ITM_SendChar+0x48>)
 8002ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eec:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <ITM_SendChar+0x4c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <ITM_SendChar+0x4c>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002efa:	bf00      	nop
 8002efc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f8      	beq.n	8002efc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002f0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000edfc 	.word	0xe000edfc
 8002f24:	e0000e00 	.word	0xe0000e00

08002f28 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e00a      	b.n	8002f50 <_read+0x28>
		*ptr++ = __io_getchar();
 8002f3a:	f3af 8000 	nop.w
 8002f3e:	4601      	mov	r1, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbf0      	blt.n	8002f3a <_read+0x12>
	}

	return len;
 8002f58:	687b      	ldr	r3, [r7, #4]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e009      	b.n	8002f88 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60ba      	str	r2, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ffab 	bl	8002ed8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbf1      	blt.n	8002f74 <_write+0x12>
	}
	return len;
 8002f90:	687b      	ldr	r3, [r7, #4]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_close>:

int _close(int file) {
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_isatty>:

int _isatty(int file) {
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <_sbrk+0x64>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_sbrk+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d207      	bcs.n	8003044 <_sbrk+0x40>
		errno = ENOMEM;
 8003034:	f013 f8f2 	bl	801621c <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	220c      	movs	r2, #12
 800303c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003042:	e009      	b.n	8003058 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_sbrk+0x64>)
 8003054:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	24080000 	.word	0x24080000
 8003064:	00000400 	.word	0x00000400
 8003068:	24001b24 	.word	0x24001b24
 800306c:	24006730 	.word	0x24006730

08003070 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003074:	4b37      	ldr	r3, [pc, #220]	; (8003154 <SystemInit+0xe4>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	4a36      	ldr	r2, [pc, #216]	; (8003154 <SystemInit+0xe4>)
 800307c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <SystemInit+0xe8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	2b06      	cmp	r3, #6
 800308e:	d807      	bhi.n	80030a0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003090:	4b31      	ldr	r3, [pc, #196]	; (8003158 <SystemInit+0xe8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 030f 	bic.w	r3, r3, #15
 8003098:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <SystemInit+0xe8>)
 800309a:	f043 0307 	orr.w	r3, r3, #7
 800309e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <SystemInit+0xec>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	; (800315c <SystemInit+0xec>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <SystemInit+0xec>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <SystemInit+0xec>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4929      	ldr	r1, [pc, #164]	; (800315c <SystemInit+0xec>)
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <SystemInit+0xf0>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <SystemInit+0xe8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <SystemInit+0xe8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 030f 	bic.w	r3, r3, #15
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <SystemInit+0xe8>)
 80030d4:	f043 0307 	orr.w	r3, r3, #7
 80030d8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <SystemInit+0xec>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	; (800315c <SystemInit+0xec>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <SystemInit+0xec>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <SystemInit+0xec>)
 80030ee:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <SystemInit+0xf4>)
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <SystemInit+0xec>)
 80030f4:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <SystemInit+0xf8>)
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <SystemInit+0xec>)
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <SystemInit+0xfc>)
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <SystemInit+0xec>)
 8003100:	2200      	movs	r2, #0
 8003102:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <SystemInit+0xec>)
 8003106:	4a19      	ldr	r2, [pc, #100]	; (800316c <SystemInit+0xfc>)
 8003108:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <SystemInit+0xec>)
 800310c:	2200      	movs	r2, #0
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <SystemInit+0xec>)
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <SystemInit+0xfc>)
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <SystemInit+0xec>)
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <SystemInit+0xec>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0e      	ldr	r2, [pc, #56]	; (800315c <SystemInit+0xec>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <SystemInit+0xec>)
 800312a:	2200      	movs	r2, #0
 800312c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <SystemInit+0x100>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <SystemInit+0x104>)
 8003134:	4013      	ands	r3, r2
 8003136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800313a:	d202      	bcs.n	8003142 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <SystemInit+0x108>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <SystemInit+0x10c>)
 8003144:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003148:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00
 8003158:	52002000 	.word	0x52002000
 800315c:	58024400 	.word	0x58024400
 8003160:	eaf6ed7f 	.word	0xeaf6ed7f
 8003164:	02020200 	.word	0x02020200
 8003168:	01ff0000 	.word	0x01ff0000
 800316c:	01010280 	.word	0x01010280
 8003170:	5c001000 	.word	0x5c001000
 8003174:	ffff0000 	.word	0xffff0000
 8003178:	51008108 	.word	0x51008108
 800317c:	52004000 	.word	0x52004000

08003180 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b09a      	sub	sp, #104	; 0x68
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003186:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003194:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
 80031b0:	615a      	str	r2, [r3, #20]
 80031b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	222c      	movs	r2, #44	; 0x2c
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f013 f866 	bl	801628c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031c0:	4b44      	ldr	r3, [pc, #272]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031c2:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <MX_TIM1_Init+0x158>)
 80031c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80031c6:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031c8:	2263      	movs	r2, #99	; 0x63
 80031ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031cc:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80031d2:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031d4:	f24f 4223 	movw	r2, #62499	; 0xf423
 80031d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031e0:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031ec:	4839      	ldr	r0, [pc, #228]	; (80032d4 <MX_TIM1_Init+0x154>)
 80031ee:	f00b fbce 	bl	800e98e <HAL_TIM_Base_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80031f8:	f7fe ffd4 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003200:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003206:	4619      	mov	r1, r3
 8003208:	4832      	ldr	r0, [pc, #200]	; (80032d4 <MX_TIM1_Init+0x154>)
 800320a:	f00c f949 	bl	800f4a0 <HAL_TIM_ConfigClockSource>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003214:	f7fe ffc6 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003218:	482e      	ldr	r0, [pc, #184]	; (80032d4 <MX_TIM1_Init+0x154>)
 800321a:	f00b fec5 	bl	800efa8 <HAL_TIM_PWM_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003224:	f7fe ffbe 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003234:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003238:	4619      	mov	r1, r3
 800323a:	4826      	ldr	r0, [pc, #152]	; (80032d4 <MX_TIM1_Init+0x154>)
 800323c:	f00c fe86 	bl	800ff4c <HAL_TIMEx_MasterConfigSynchronization>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003246:	f7fe ffad 	bl	80021a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800324a:	2360      	movs	r3, #96	; 0x60
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800324e:	f240 13df 	movw	r3, #479	; 0x1df
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003254:	2300      	movs	r3, #0
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003258:	2300      	movs	r3, #0
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003268:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800326c:	2200      	movs	r2, #0
 800326e:	4619      	mov	r1, r3
 8003270:	4818      	ldr	r0, [pc, #96]	; (80032d4 <MX_TIM1_Init+0x154>)
 8003272:	f00c f801 	bl	800f278 <HAL_TIM_PWM_ConfigChannel>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800327c:	f7fe ff92 	bl	80021a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003298:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4807      	ldr	r0, [pc, #28]	; (80032d4 <MX_TIM1_Init+0x154>)
 80032b6:	f00c fed7 	bl	8010068 <HAL_TIMEx_ConfigBreakDeadTime>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80032c0:	f7fe ff70 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032c4:	4803      	ldr	r0, [pc, #12]	; (80032d4 <MX_TIM1_Init+0x154>)
 80032c6:	f000 f949 	bl	800355c <HAL_TIM_MspPostInit>

}
 80032ca:	bf00      	nop
 80032cc:	3768      	adds	r7, #104	; 0x68
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	24001b28 	.word	0x24001b28
 80032d8:	40010000 	.word	0x40010000

080032dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032fc:	463b      	mov	r3, r7
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	611a      	str	r2, [r3, #16]
 800330a:	615a      	str	r2, [r3, #20]
 800330c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003318:	2263      	movs	r2, #99	; 0x63
 800331a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <MX_TIM2_Init+0xe8>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003324:	f640 4234 	movw	r2, #3124	; 0xc34
 8003328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <MX_TIM2_Init+0xe8>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003336:	4823      	ldr	r0, [pc, #140]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003338:	f00b fb29 	bl	800e98e <HAL_TIM_Base_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003342:	f7fe ff2f 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800334c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003350:	4619      	mov	r1, r3
 8003352:	481c      	ldr	r0, [pc, #112]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003354:	f00c f8a4 	bl	800f4a0 <HAL_TIM_ConfigClockSource>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800335e:	f7fe ff21 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003362:	4818      	ldr	r0, [pc, #96]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003364:	f00b fe20 	bl	800efa8 <HAL_TIM_PWM_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800336e:	f7fe ff19 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003372:	2320      	movs	r3, #32
 8003374:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	4619      	mov	r1, r3
 8003380:	4810      	ldr	r0, [pc, #64]	; (80033c4 <MX_TIM2_Init+0xe8>)
 8003382:	f00c fde3 	bl	800ff4c <HAL_TIMEx_MasterConfigSynchronization>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800338c:	f7fe ff0a 	bl	80021a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003390:	2360      	movs	r3, #96	; 0x60
 8003392:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033a0:	463b      	mov	r3, r7
 80033a2:	220c      	movs	r2, #12
 80033a4:	4619      	mov	r1, r3
 80033a6:	4807      	ldr	r0, [pc, #28]	; (80033c4 <MX_TIM2_Init+0xe8>)
 80033a8:	f00b ff66 	bl	800f278 <HAL_TIM_PWM_ConfigChannel>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80033b2:	f7fe fef7 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033b6:	4803      	ldr	r0, [pc, #12]	; (80033c4 <MX_TIM2_Init+0xe8>)
 80033b8:	f000 f8d0 	bl	800355c <HAL_TIM_MspPostInit>

}
 80033bc:	bf00      	nop
 80033be:	3738      	adds	r7, #56	; 0x38
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	24001b74 	.word	0x24001b74

080033c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <MX_TIM3_Init+0x94>)
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <MX_TIM3_Init+0x98>)
 80033ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <MX_TIM3_Init+0x94>)
 80033ee:	22c7      	movs	r2, #199	; 0xc7
 80033f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <MX_TIM3_Init+0x94>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <MX_TIM3_Init+0x94>)
 80033fa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80033fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <MX_TIM3_Init+0x94>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <MX_TIM3_Init+0x94>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800340c:	4813      	ldr	r0, [pc, #76]	; (800345c <MX_TIM3_Init+0x94>)
 800340e:	f00b fabe 	bl	800e98e <HAL_TIM_Base_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003418:	f7fe fec4 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	4619      	mov	r1, r3
 8003428:	480c      	ldr	r0, [pc, #48]	; (800345c <MX_TIM3_Init+0x94>)
 800342a:	f00c f839 	bl	800f4a0 <HAL_TIM_ConfigClockSource>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003434:	f7fe feb6 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4805      	ldr	r0, [pc, #20]	; (800345c <MX_TIM3_Init+0x94>)
 8003446:	f00c fd81 	bl	800ff4c <HAL_TIMEx_MasterConfigSynchronization>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003450:	f7fe fea8 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003454:	bf00      	nop
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	24001bc0 	.word	0x24001bc0
 8003460:	40000400 	.word	0x40000400

08003464 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a37      	ldr	r2, [pc, #220]	; (8003550 <HAL_TIM_Base_MspInit+0xec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12f      	bne.n	80034d6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 8003478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800347c:	4a35      	ldr	r2, [pc, #212]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2105      	movs	r1, #5
 8003498:	2018      	movs	r0, #24
 800349a:	f002 fb05 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800349e:	2018      	movs	r0, #24
 80034a0:	f002 fb1c 	bl	8005adc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	2105      	movs	r1, #5
 80034a8:	2019      	movs	r0, #25
 80034aa:	f002 fafd 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034ae:	2019      	movs	r0, #25
 80034b0:	f002 fb14 	bl	8005adc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2105      	movs	r1, #5
 80034b8:	201a      	movs	r0, #26
 80034ba:	f002 faf5 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80034be:	201a      	movs	r0, #26
 80034c0:	f002 fb0c 	bl	8005adc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2105      	movs	r1, #5
 80034c8:	201b      	movs	r0, #27
 80034ca:	f002 faed 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80034ce:	201b      	movs	r0, #27
 80034d0:	f002 fb04 	bl	8005adc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80034d4:	e038      	b.n	8003548 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d117      	bne.n	8003510 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034e0:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 80034e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 80034f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2105      	movs	r1, #5
 8003502:	201c      	movs	r0, #28
 8003504:	f002 fad0 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003508:	201c      	movs	r0, #28
 800350a:	f002 fae7 	bl	8005adc <HAL_NVIC_EnableIRQ>
}
 800350e:	e01b      	b.n	8003548 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_TIM_Base_MspInit+0xf4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d116      	bne.n	8003548 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 800351c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003520:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_TIM_Base_MspInit+0xf0>)
 800352c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	2105      	movs	r1, #5
 800353c:	201d      	movs	r0, #29
 800353e:	f002 fab3 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003542:	201d      	movs	r0, #29
 8003544:	f002 faca 	bl	8005adc <HAL_NVIC_EnableIRQ>
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40010000 	.word	0x40010000
 8003554:	58024400 	.word	0x58024400
 8003558:	40000400 	.word	0x40000400

0800355c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_TIM_MspPostInit+0xb8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d120      	bne.n	80035c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 8003580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 8003590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800359c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	4818      	ldr	r0, [pc, #96]	; (800361c <HAL_TIM_MspPostInit+0xc0>)
 80035ba:	f005 fceb 	bl	8008f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035be:	e024      	b.n	800360a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d11f      	bne.n	800360a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 80035dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035fa:	2301      	movs	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4806      	ldr	r0, [pc, #24]	; (8003620 <HAL_TIM_MspPostInit+0xc4>)
 8003606:	f005 fcc5 	bl	8008f94 <HAL_GPIO_Init>
}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	58024400 	.word	0x58024400
 800361c:	58020000 	.word	0x58020000
 8003620:	58020400 	.word	0x58020400

08003624 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <get_uptime+0x94>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <get_uptime+0x98>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800363c:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <get_uptime+0x94>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	429a      	cmp	r2, r3
 8003644:	d005      	beq.n	8003652 <get_uptime+0x2e>
		ms = uptime_millis;
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <get_uptime+0x94>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <get_uptime+0x98>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003658:	fb03 f202 	mul.w	r2, r3, r2
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <get_uptime+0x98>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	3301      	adds	r3, #1
 8003662:	4917      	ldr	r1, [pc, #92]	; (80036c0 <get_uptime+0x9c>)
 8003664:	fba1 1303 	umull	r1, r3, r1, r3
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <get_uptime+0x5a>
		uptime = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0e1b      	lsrs	r3, r3, #24
 8003682:	b2da      	uxtb	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	0c1a      	lsrs	r2, r3, #16
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3301      	adds	r3, #1
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	0a1a      	lsrs	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3302      	adds	r3, #2
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3303      	adds	r3, #3
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	24001964 	.word	0x24001964
 80036bc:	e000e010 	.word	0xe000e010
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80036cc:	f107 0310 	add.w	r3, r7, #16
 80036d0:	2200      	movs	r2, #0
 80036d2:	4619      	mov	r1, r3
 80036d4:	4821      	ldr	r0, [pc, #132]	; (800375c <get_timestamp+0x98>)
 80036d6:	f00a fb07 	bl	800dce8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	2200      	movs	r2, #0
 80036e0:	4619      	mov	r1, r3
 80036e2:	481e      	ldr	r0, [pc, #120]	; (800375c <get_timestamp+0x98>)
 80036e4:	f00a fbe4 	bl	800deb0 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2264      	movs	r2, #100	; 0x64
 80036ec:	fb03 f202 	mul.w	r2, r3, r2
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <get_timestamp+0x9c>)
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3301      	adds	r3, #1
 8003700:	7b7a      	ldrb	r2, [r7, #13]
 8003702:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3302      	adds	r3, #2
 8003708:	7bba      	ldrb	r2, [r7, #14]
 800370a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3303      	adds	r3, #3
 8003710:	7c3a      	ldrb	r2, [r7, #16]
 8003712:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	7c7a      	ldrb	r2, [r7, #17]
 800371a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3305      	adds	r3, #5
 8003720:	7cba      	ldrb	r2, [r7, #18]
 8003722:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	0e1a      	lsrs	r2, r3, #24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3306      	adds	r3, #6
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	0c1a      	lsrs	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3307      	adds	r3, #7
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	0a1a      	lsrs	r2, r3, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3308      	adds	r3, #8
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3309      	adds	r3, #9
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	24001974 	.word	0x24001974
 8003760:	000f4240 	.word	0x000f4240

08003764 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	789b      	ldrb	r3, [r3, #2]
 8003778:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	78db      	ldrb	r3, [r3, #3]
 8003780:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	791b      	ldrb	r3, [r3, #4]
 8003788:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	795b      	ldrb	r3, [r3, #5]
 8003790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	799b      	ldrb	r3, [r3, #6]
 8003798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3307      	adds	r3, #7
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b21a      	sxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3308      	adds	r3, #8
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80037b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80037bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80037c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80037cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037d0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80037d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037d6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80037d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80037dc:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80037de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037e0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80037e2:	f107 0320 	add.w	r3, r7, #32
 80037e6:	2200      	movs	r2, #0
 80037e8:	4619      	mov	r1, r3
 80037ea:	480b      	ldr	r0, [pc, #44]	; (8003818 <calibrateRTC+0xb4>)
 80037ec:	f00a fad8 	bl	800dda0 <HAL_RTC_SetDate>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80037f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <calibrateRTC+0x9e>
		Error_Handler();
 80037fe:	f7fe fcd1 	bl	80021a4 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	2200      	movs	r2, #0
 8003808:	4619      	mov	r1, r3
 800380a:	4803      	ldr	r0, [pc, #12]	; (8003818 <calibrateRTC+0xb4>)
 800380c:	f000 f806 	bl	800381c <RTC_SetTime>
}
 8003810:	bf00      	nop
 8003812:	3730      	adds	r7, #48	; 0x30
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	24001974 	.word	0x24001974

0800381c <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <RTC_SetTime+0x1a>
 8003832:	2302      	movs	r3, #2
 8003834:	e051      	b.n	80038da <RTC_SetTime+0xbe>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	22ca      	movs	r2, #202	; 0xca
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2253      	movs	r2, #83	; 0x53
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f00a fb9c 	bl	800df94 <RTC_EnterInitMode>
 800385c:	4603      	mov	r3, r0
 800385e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d129      	bne.n	80038ba <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2200      	movs	r2, #0
 800386a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f00a fc01 	bl	800e078 <RTC_ByteToBcd2>
 8003876:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003878:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	4618      	mov	r0, r3
 8003880:	f00a fbfa 	bl	800e078 <RTC_ByteToBcd2>
 8003884:	4603      	mov	r3, r0
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	789b      	ldrb	r3, [r3, #2]
 800388e:	4618      	mov	r0, r3
 8003890:	f00a fbf2 	bl	800e078 <RTC_ByteToBcd2>
 8003894:	4603      	mov	r3, r0
 8003896:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	78db      	ldrb	r3, [r3, #3]
 800389e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	6939      	ldr	r1, [r7, #16]
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <RTC_SetTime+0xc8>)
 80038ac:	400b      	ands	r3, r1
 80038ae:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f00a fba3 	bl	800dffc <RTC_ExitInitMode>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]

}
 80038da:	4618      	mov	r0, r3
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd90      	pop	{r4, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	007f7f7f 	.word	0x007f7f7f

080038e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 80038ee:	4a31      	ldr	r2, [pc, #196]	; (80039b4 <MX_USART1_UART_Init+0xcc>)
 80038f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80038f2:	4b2f      	ldr	r3, [pc, #188]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 80038f4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80038f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038fa:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003902:	2200      	movs	r2, #0
 8003904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003906:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 800390e:	220c      	movs	r2, #12
 8003910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 800391a:	2200      	movs	r2, #0
 800391c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003920:	2200      	movs	r2, #0
 8003922:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003926:	2200      	movs	r2, #0
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 800392c:	2200      	movs	r2, #0
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003930:	481f      	ldr	r0, [pc, #124]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003932:	f00c fc35 	bl	80101a0 <HAL_UART_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800393c:	f7fe fc32 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003940:	2100      	movs	r1, #0
 8003942:	481b      	ldr	r0, [pc, #108]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003944:	f00f f97b 	bl	8012c3e <HAL_UARTEx_SetTxFifoThreshold>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800394e:	f7fe fc29 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003952:	2100      	movs	r1, #0
 8003954:	4816      	ldr	r0, [pc, #88]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003956:	f00f f9b0 	bl	8012cba <HAL_UARTEx_SetRxFifoThreshold>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003960:	f7fe fc20 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003964:	4812      	ldr	r0, [pc, #72]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003966:	f00f f931 	bl	8012bcc <HAL_UARTEx_DisableFifoMode>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003970:	f7fe fc18 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003978:	480d      	ldr	r0, [pc, #52]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 800397a:	f00f f99e 	bl	8012cba <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800397e:	480c      	ldr	r0, [pc, #48]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003980:	f00f f8e9 	bl	8012b56 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003984:	480a      	ldr	r0, [pc, #40]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003986:	f00f f8b3 	bl	8012af0 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003998:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <MX_USART1_UART_Init+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039a8:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	24001c0c 	.word	0x24001c0c
 80039b4:	40011000 	.word	0x40011000

080039b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b0ba      	sub	sp, #232	; 0xe8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039d0:	f107 0310 	add.w	r3, r7, #16
 80039d4:	22c0      	movs	r2, #192	; 0xc0
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f012 fc57 	bl	801628c <memset>
  if(uartHandle->Instance==USART1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a41      	ldr	r2, [pc, #260]	; (8003ae8 <HAL_UART_MspInit+0x130>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d17b      	bne.n	8003ae0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039e8:	f04f 0201 	mov.w	r2, #1
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80039f4:	2318      	movs	r3, #24
 80039f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039fa:	f107 0310 	add.w	r3, r7, #16
 80039fe:	4618      	mov	r0, r3
 8003a00:	f007 fb54 	bl	800b0ac <HAL_RCCEx_PeriphCLKConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a0a:	f7fe fbcb 	bl	80021a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_UART_MspInit+0x134>)
 8003a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a14:	4a35      	ldr	r2, [pc, #212]	; (8003aec <HAL_UART_MspInit+0x134>)
 8003a16:	f043 0310 	orr.w	r3, r3, #16
 8003a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a1e:	4b33      	ldr	r3, [pc, #204]	; (8003aec <HAL_UART_MspInit+0x134>)
 8003a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_UART_MspInit+0x134>)
 8003a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a32:	4a2e      	ldr	r2, [pc, #184]	; (8003aec <HAL_UART_MspInit+0x134>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_UART_MspInit+0x134>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a64:	2307      	movs	r3, #7
 8003a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	481f      	ldr	r0, [pc, #124]	; (8003af0 <HAL_UART_MspInit+0x138>)
 8003a72:	f005 fa8f 	bl	8008f94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a78:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <HAL_UART_MspInit+0x140>)
 8003a7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a7e:	222a      	movs	r2, #42	; 0x2a
 8003a80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a84:	2240      	movs	r2, #64	; 0x40
 8003a86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a8e:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a94:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a9c:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ab4:	480f      	ldr	r0, [pc, #60]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003ab6:	f002 fc25 	bl	8006304 <HAL_DMA_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003ac0:	f7fe fb70 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_UART_MspInit+0x13c>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	2025      	movs	r0, #37	; 0x25
 8003ad6:	f001 ffe7 	bl	8005aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ada:	2025      	movs	r0, #37	; 0x25
 8003adc:	f001 fffe 	bl	8005adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	37e8      	adds	r7, #232	; 0xe8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40011000 	.word	0x40011000
 8003aec:	58024400 	.word	0x58024400
 8003af0:	58020000 	.word	0x58020000
 8003af4:	24001ca0 	.word	0x24001ca0
 8003af8:	40020040 	.word	0x40020040

08003afc <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003b06:	4bc2      	ldr	r3, [pc, #776]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003b0c:	4bc0      	ldr	r3, [pc, #768]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003b12:	4bbf      	ldr	r3, [pc, #764]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003b18:	4bbd      	ldr	r3, [pc, #756]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b1e:	4bbc      	ldr	r3, [pc, #752]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b20:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b24:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003b26:	4bba      	ldr	r3, [pc, #744]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003b2c:	4bb8      	ldr	r3, [pc, #736]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003b32:	4bb7      	ldr	r3, [pc, #732]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003b38:	4bb5      	ldr	r3, [pc, #724]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003b3e:	4bb4      	ldr	r3, [pc, #720]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b44:	4bb2      	ldr	r3, [pc, #712]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b46:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b4a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003b4c:	4bb0      	ldr	r3, [pc, #704]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003b52:	4baf      	ldr	r3, [pc, #700]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b54:	2202      	movs	r2, #2
 8003b56:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003b58:	4bad      	ldr	r3, [pc, #692]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003b5e:	4bac      	ldr	r3, [pc, #688]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003b64:	4baa      	ldr	r3, [pc, #680]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b6a:	4ba9      	ldr	r3, [pc, #676]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b70:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003b72:	4ba7      	ldr	r3, [pc, #668]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003b78:	4ba5      	ldr	r3, [pc, #660]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003b7e:	4ba4      	ldr	r3, [pc, #656]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003b84:	4ba2      	ldr	r3, [pc, #648]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003b8c:	4ba0      	ldr	r3, [pc, #640]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b92:	4b9f      	ldr	r3, [pc, #636]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b94:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b98:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003b9a:	4b9d      	ldr	r3, [pc, #628]	; (8003e10 <voltage_monitor_init+0x314>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003ba0:	4b9b      	ldr	r3, [pc, #620]	; (8003e10 <voltage_monitor_init+0x314>)
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003ba8:	4b99      	ldr	r3, [pc, #612]	; (8003e10 <voltage_monitor_init+0x314>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003bb0:	4b97      	ldr	r3, [pc, #604]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003bb8:	4b95      	ldr	r3, [pc, #596]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bbe:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bc0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bc4:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003bc6:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003bcc:	4b90      	ldr	r3, [pc, #576]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003bd4:	4b8e      	ldr	r3, [pc, #568]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003bdc:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003be4:	4b8a      	ldr	r3, [pc, #552]	; (8003e10 <voltage_monitor_init+0x314>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bec:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bf0:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003bf2:	4b87      	ldr	r3, [pc, #540]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003bf8:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <voltage_monitor_init+0x314>)
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003c00:	4b83      	ldr	r3, [pc, #524]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003c08:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003c10:	4b7f      	ldr	r3, [pc, #508]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c18:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c1e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003c22:	4b7b      	ldr	r3, [pc, #492]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003c2a:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003c32:	4b77      	ldr	r3, [pc, #476]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003c3a:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003c42:	4b73      	ldr	r3, [pc, #460]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c4a:	4b71      	ldr	r3, [pc, #452]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003c54:	4b6e      	ldr	r3, [pc, #440]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003c5c:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c5e:	2208      	movs	r2, #8
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c7e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003c82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003c86:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c88:	f640 3283 	movw	r2, #2947	; 0xb83
 8003c8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c92:	2209      	movs	r2, #9
 8003c94:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003c98:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <voltage_monitor_init+0x314>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003ca0:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <voltage_monitor_init+0x314>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003ca8:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <voltage_monitor_init+0x314>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003cb0:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cb2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003cb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003cba:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003cc2:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <voltage_monitor_init+0x314>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003cda:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003ce2:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <voltage_monitor_init+0x314>)
 8003ce4:	f640 7245 	movw	r2, #3909	; 0xf45
 8003ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003cec:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cee:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003cf2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <voltage_monitor_init+0x314>)
 8003cf8:	220b      	movs	r2, #11
 8003cfa:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003d06:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d18:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003d1c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d22:	f640 6276 	movw	r2, #3702	; 0xe76
 8003d26:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d2c:	220c      	movs	r2, #12
 8003d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003d32:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003d3a:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003d4a:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d4c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003d50:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d5e:	220d      	movs	r2, #13
 8003d60:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003d74:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d7e:	f640 7238 	movw	r2, #3896	; 0xf38
 8003d82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d88:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003d8c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003d90:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d92:	220e      	movs	r2, #14
 8003d94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <voltage_monitor_init+0x314>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <voltage_monitor_init+0x314>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <voltage_monitor_init+0x314>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <voltage_monitor_init+0x314>)
 8003db2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003db6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <voltage_monitor_init+0x314>)
 8003dbc:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003dc0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <voltage_monitor_init+0x314>)
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <voltage_monitor_init+0x314>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <voltage_monitor_init+0x314>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <voltage_monitor_init+0x314>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <voltage_monitor_init+0x314>)
 8003de6:	f241 0264 	movw	r2, #4196	; 0x1064
 8003dea:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <voltage_monitor_init+0x314>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <voltage_monitor_init+0x314>)
 8003df8:	2210      	movs	r2, #16
 8003dfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003dfe:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <voltage_monitor_init+0x314>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003e06:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <voltage_monitor_init+0x314>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003e0e:	e001      	b.n	8003e14 <voltage_monitor_init+0x318>
 8003e10:	24001d18 	.word	0x24001d18
	rail_monitor[RAIL_n800v].data = 0;
 8003e14:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e1e:	f640 5208 	movw	r2, #3336	; 0xd08
 8003e22:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e28:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003e2c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e32:	2211      	movs	r2, #17
 8003e34:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e52:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e56:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <voltage_monitor_init+0x378>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	71fb      	strb	r3, [r7, #7]

	return status;
 8003e66:	79fb      	ldrb	r3, [r7, #7]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	24001d18 	.word	0x24001d18

08003e78 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460a      	mov	r2, r1
 8003e82:	71fb      	strb	r3, [r7, #7]
 8003e84:	4613      	mov	r3, r2
 8003e86:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003e8c:	79fa      	ldrb	r2, [r7, #7]
 8003e8e:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <set_rail_monitor_enable+0x3c>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	79ba      	ldrb	r2, [r7, #6]
 8003e9e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]

	return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	24001d18 	.word	0x24001d18

08003eb8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003ebc:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <get_rail_monitor+0x10>)
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	24001d18 	.word	0x24001d18

08003ecc <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003ed8:	463b      	mov	r3, r7
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fc86 	bl	80027ec <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003ee0:	f107 0310 	add.w	r3, r7, #16
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fcb1 	bl	800284c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fcfe 	bl	80028f0 <sample_hk_adc3>
 8003ef4:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <set_rail_monitor+0xc0>)
 8003ef8:	809a      	strh	r2, [r3, #4]
 8003efa:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <set_rail_monitor+0xc0>)
 8003efe:	81da      	strh	r2, [r3, #14]
 8003f00:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f04:	831a      	strh	r2, [r3, #24]
 8003f06:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f0a:	845a      	strh	r2, [r3, #34]	; 0x22
 8003f0c:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f10:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003f12:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f16:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f18:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003f20:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003f28:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003f30:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8003f38:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8003f40:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f44:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003f48:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f4c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003f50:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003f58:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f5c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8003f60:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f64:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8003f68:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f6c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003f70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <set_rail_monitor+0xc0>)
 8003f74:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8003f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3728      	adds	r7, #40	; 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	24001d18 	.word	0x24001d18

08003f90 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003f9e:	89fb      	ldrh	r3, [r7, #14]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	db05      	blt.n	8003fb2 <in_range+0x22>
 8003fa6:	89fb      	ldrh	r3, [r7, #14]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	dc01      	bgt.n	8003fb2 <in_range+0x22>
		return 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <in_range+0x24>
	}
	return 0;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fc4:	f7ff f854 	bl	8003070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fc8:	480c      	ldr	r0, [pc, #48]	; (8003ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fca:	490d      	ldr	r1, [pc, #52]	; (8004000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fd0:	e002      	b.n	8003fd8 <LoopCopyDataInit>

08003fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fd6:	3304      	adds	r3, #4

08003fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fdc:	d3f9      	bcc.n	8003fd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fe0:	4c0a      	ldr	r4, [pc, #40]	; (800400c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe4:	e001      	b.n	8003fea <LoopFillZerobss>

08003fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe8:	3204      	adds	r2, #4

08003fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fec:	d3fb      	bcc.n	8003fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fee:	f012 f91b 	bl	8016228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ff2:	f7fd fef7 	bl	8001de4 <main>
  bx  lr
 8003ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ff8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ffc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004000:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 8004004:	08017158 	.word	0x08017158
  ldr r2, =_sbss
 8004008:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800400c:	24006730 	.word	0x24006730

08004010 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004010:	e7fe      	b.n	8004010 <ADC3_IRQHandler>
	...

08004014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401a:	2003      	movs	r0, #3
 800401c:	f001 fd39 	bl	8005a92 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004020:	f006 fe2c 	bl	800ac7c <HAL_RCC_GetSysClockFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_Init+0x68>)
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	4913      	ldr	r1, [pc, #76]	; (8004080 <HAL_Init+0x6c>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_Init+0x68>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_Init+0x6c>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <HAL_Init+0x70>)
 8004056:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004058:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <HAL_Init+0x74>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800405e:	2005      	movs	r0, #5
 8004060:	f7fe fe36 	bl	8002cd0 <HAL_InitTick>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e002      	b.n	8004074 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800406e:	f7fe fe11 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	080170a4 	.word	0x080170a4
 8004084:	24000088 	.word	0x24000088
 8004088:	24000084 	.word	0x24000084

0800408c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x20>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_IncTick+0x24>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4413      	add	r3, r2
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <HAL_IncTick+0x24>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	24000090 	.word	0x24000090
 80040b0:	24001dcc 	.word	0x24001dcc

080040b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return uwTick;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_GetTick+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	24001dcc 	.word	0x24001dcc

080040cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <HAL_GetREVID+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0c1b      	lsrs	r3, r3, #16
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	5c001000 	.word	0x5c001000

080040e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	58000400 	.word	0x58000400

08004110 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3360      	adds	r3, #96	; 0x60
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	431a      	orrs	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	611a      	str	r2, [r3, #16]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3360      	adds	r3, #96	; 0x60
 80041fa:	461a      	mov	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	601a      	str	r2, [r3, #0]
  }
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3330      	adds	r3, #48	; 0x30
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	4413      	add	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	211f      	movs	r1, #31
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	401a      	ands	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	f003 011f 	and.w	r1, r3, #31
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	431a      	orrs	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f023 0203 	bic.w	r2, r3, #3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3314      	adds	r3, #20
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	0e5b      	lsrs	r3, r3, #25
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0d1b      	lsrs	r3, r3, #20
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2107      	movs	r1, #7
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	401a      	ands	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	0d1b      	lsrs	r3, r3, #20
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	431a      	orrs	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004334:	43db      	mvns	r3, r3
 8004336:	401a      	ands	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0318 	and.w	r3, r3, #24
 800433e:	4908      	ldr	r1, [pc, #32]	; (8004360 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004340:	40d9      	lsrs	r1, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	400b      	ands	r3, r1
 8004346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800434a:	431a      	orrs	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	000fffff 	.word	0x000fffff

08004364 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 031f 	and.w	r3, r3, #31
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800438e:	4013      	ands	r3, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6093      	str	r3, [r2, #8]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	5fffffc0 	.word	0x5fffffc0

080043a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b8:	d101      	bne.n	80043be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80043da:	4013      	ands	r3, r2
 80043dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	6fffffc0 	.word	0x6fffffc0

080043f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004408:	d101      	bne.n	800440e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <LL_ADC_Enable+0x24>)
 800442a:	4013      	ands	r3, r2
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	7fffffc0 	.word	0x7fffffc0

08004444 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <LL_ADC_Disable+0x24>)
 8004452:	4013      	ands	r3, r2
 8004454:	f043 0202 	orr.w	r2, r3, #2
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	7fffffc0 	.word	0x7fffffc0

0800446c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <LL_ADC_IsEnabled+0x18>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <LL_ADC_IsEnabled+0x1a>
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d101      	bne.n	80044aa <LL_ADC_IsDisableOngoing+0x18>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_ADC_IsDisableOngoing+0x1a>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <LL_ADC_REG_StartConversion+0x24>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	f043 0204 	orr.w	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	7fffffc0 	.word	0x7fffffc0

080044e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d101      	bne.n	80044f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d101      	bne.n	800451e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e18f      	b.n	8004866 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc f9f9 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff19 	bl	80043a4 <LL_ADC_IsDeepPowerDownEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff feff 	bl	8004380 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff34 	bl	80043f4 <LL_ADC_IsInternalRegulatorEnabled>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d114      	bne.n	80045bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff18 	bl	80043cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459c:	4b87      	ldr	r3, [pc, #540]	; (80047bc <HAL_ADC_Init+0x290>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_ADC_Init+0x294>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	3301      	adds	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ae:	e002      	b.n	80045b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f9      	bne.n	80045b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff17 	bl	80043f4 <LL_ADC_IsInternalRegulatorEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10d      	bne.n	80045e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f043 0210 	orr.w	r2, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff77 	bl	80044e0 <LL_ADC_REG_IsConversionOngoing>
 80045f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 8129 	bne.w	8004854 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 8125 	bne.w	8004854 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff24 	bl	800446c <LL_ADC_IsEnabled>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d136      	bne.n	8004698 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_ADC_Init+0x298>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_ADC_Init+0x112>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_ADC_Init+0x29c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10e      	bne.n	800465c <HAL_ADC_Init+0x130>
 800463e:	4861      	ldr	r0, [pc, #388]	; (80047c4 <HAL_ADC_Init+0x298>)
 8004640:	f7ff ff14 	bl	800446c <LL_ADC_IsEnabled>
 8004644:	4604      	mov	r4, r0
 8004646:	4860      	ldr	r0, [pc, #384]	; (80047c8 <HAL_ADC_Init+0x29c>)
 8004648:	f7ff ff10 	bl	800446c <LL_ADC_IsEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	4323      	orrs	r3, r4
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e008      	b.n	800466e <HAL_ADC_Init+0x142>
 800465c:	485b      	ldr	r0, [pc, #364]	; (80047cc <HAL_ADC_Init+0x2a0>)
 800465e:	f7ff ff05 	bl	800446c <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d012      	beq.n	8004698 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a53      	ldr	r2, [pc, #332]	; (80047c4 <HAL_ADC_Init+0x298>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_ADC_Init+0x15a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <HAL_ADC_Init+0x29c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_ADC_Init+0x15e>
 8004686:	4a52      	ldr	r2, [pc, #328]	; (80047d0 <HAL_ADC_Init+0x2a4>)
 8004688:	e000      	b.n	800468c <HAL_ADC_Init+0x160>
 800468a:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_ADC_Init+0x2a8>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7ff fd3c 	bl	8004110 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004698:	f7ff fd18 	bl	80040cc <HAL_GetREVID>
 800469c:	4603      	mov	r3, r0
 800469e:	f241 0203 	movw	r2, #4099	; 0x1003
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d914      	bls.n	80046d0 <HAL_ADC_Init+0x1a4>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d110      	bne.n	80046d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7d5b      	ldrb	r3, [r3, #21]
 80046b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7f1b      	ldrb	r3, [r3, #28]
 80046c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c8:	f043 030c 	orr.w	r3, r3, #12
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e00d      	b.n	80046ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7d5b      	ldrb	r3, [r3, #21]
 80046d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7f1b      	ldrb	r3, [r3, #28]
 80046e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7f1b      	ldrb	r3, [r3, #28]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	045b      	lsls	r3, r3, #17
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_ADC_Init+0x2ac>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	430b      	orrs	r3, r1
 8004730:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fed2 	bl	80044e0 <LL_ADC_REG_IsConversionOngoing>
 800473c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fedf 	bl	8004506 <LL_ADC_INJ_IsConversionOngoing>
 8004748:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d15f      	bne.n	8004810 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d15c      	bne.n	8004810 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7d1b      	ldrb	r3, [r3, #20]
 800475a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_ADC_Init+0x2b0>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	430b      	orrs	r3, r1
 8004776:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800477e:	2b01      	cmp	r3, #1
 8004780:	d130      	bne.n	80047e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_ADC_Init+0x2b4>)
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004796:	3a01      	subs	r2, #1
 8004798:	0411      	lsls	r1, r2, #16
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047a4:	4311      	orrs	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047aa:	430a      	orrs	r2, r1
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	611a      	str	r2, [r3, #16]
 80047b8:	e01c      	b.n	80047f4 <HAL_ADC_Init+0x2c8>
 80047ba:	bf00      	nop
 80047bc:	24000084 	.word	0x24000084
 80047c0:	053e2d63 	.word	0x053e2d63
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40022100 	.word	0x40022100
 80047cc:	58026000 	.word	0x58026000
 80047d0:	40022300 	.word	0x40022300
 80047d4:	58026300 	.word	0x58026300
 80047d8:	fff0c003 	.word	0xfff0c003
 80047dc:	ffffbffc 	.word	0xffffbffc
 80047e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fdec 	bl	80053e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10c      	bne.n	8004832 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f023 010f 	bic.w	r1, r3, #15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	1e5a      	subs	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
 8004830:	e007      	b.n	8004842 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 020f 	bic.w	r2, r2, #15
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
 8004852:	e007      	b.n	8004864 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0210 	orr.w	r2, r3, #16
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004864:	7ffb      	ldrb	r3, [r7, #31]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop

08004870 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a55      	ldr	r2, [pc, #340]	; (80049d8 <HAL_ADC_Start_DMA+0x168>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_ADC_Start_DMA+0x20>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a54      	ldr	r2, [pc, #336]	; (80049dc <HAL_ADC_Start_DMA+0x16c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <HAL_ADC_Start_DMA+0x24>
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_ADC_Start_DMA+0x170>)
 8004892:	e000      	b.n	8004896 <HAL_ADC_Start_DMA+0x26>
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_ADC_Start_DMA+0x174>)
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fd64 	bl	8004364 <LL_ADC_GetMultimode>
 800489c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fe1c 	bl	80044e0 <LL_ADC_REG_IsConversionOngoing>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 808c 	bne.w	80049c8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_ADC_Start_DMA+0x4e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e087      	b.n	80049ce <HAL_ADC_Start_DMA+0x15e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d002      	beq.n	80048d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d170      	bne.n	80049ba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fc07 	bl	80050ec <ADC_Enable>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d163      	bne.n	80049b0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ec:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <HAL_ADC_Start_DMA+0x178>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a37      	ldr	r2, [pc, #220]	; (80049dc <HAL_ADC_Start_DMA+0x16c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d002      	beq.n	8004908 <HAL_ADC_Start_DMA+0x98>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	e000      	b.n	800490a <HAL_ADC_Start_DMA+0x9a>
 8004908:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <HAL_ADC_Start_DMA+0x168>)
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4293      	cmp	r3, r2
 8004910:	d002      	beq.n	8004918 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f023 0206 	bic.w	r2, r3, #6
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
 800493c:	e002      	b.n	8004944 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <HAL_ADC_Start_DMA+0x17c>)
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4a27      	ldr	r2, [pc, #156]	; (80049f0 <HAL_ADC_Start_DMA+0x180>)
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <HAL_ADC_Start_DMA+0x184>)
 800495a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	221c      	movs	r2, #28
 8004962:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0210 	orr.w	r2, r2, #16
 800497a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f7ff fc89 	bl	800429e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3340      	adds	r3, #64	; 0x40
 8004996:	4619      	mov	r1, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f002 f80e 	bl	80069bc <HAL_DMA_Start_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fd85 	bl	80044b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80049ae:	e00d      	b.n	80049cc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80049b8:	e008      	b.n	80049cc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049c6:	e001      	b.n	80049cc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
 80049ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40022000 	.word	0x40022000
 80049dc:	40022100 	.word	0x40022100
 80049e0:	40022300 	.word	0x40022300
 80049e4:	58026300 	.word	0x58026300
 80049e8:	fffff0fe 	.word	0xfffff0fe
 80049ec:	080052bf 	.word	0x080052bf
 80049f0:	08005397 	.word	0x08005397
 80049f4:	080053b3 	.word	0x080053b3

080049f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b0a1      	sub	sp, #132	; 0x84
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a65      	ldr	r2, [pc, #404]	; (8004be4 <HAL_ADC_ConfigChannel+0x1b0>)
 8004a4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x2a>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e32e      	b.n	80050bc <HAL_ADC_ConfigChannel+0x688>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fd38 	bl	80044e0 <LL_ADC_REG_IsConversionOngoing>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 8313 	bne.w	800509e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db2c      	blt.n	8004ada <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d108      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x6a>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e9b      	lsrs	r3, r3, #26
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	e016      	b.n	8004acc <HAL_ADC_ConfigChannel+0x98>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	e003      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004abc:	fab3 f383 	clz	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	69d1      	ldr	r1, [r2, #28]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7ff fbad 	bl	8004246 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fcf5 	bl	80044e0 <LL_ADC_REG_IsConversionOngoing>
 8004af6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fd02 	bl	8004506 <LL_ADC_INJ_IsConversionOngoing>
 8004b02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 80b8 	bne.w	8004c7c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 80b4 	bne.w	8004c7c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	6819      	ldr	r1, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f7ff fbcf 	bl	80042c4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_ADC_ConfigChannel+0x1b4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b32:	d10b      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x118>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	e01d      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x154>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x13e>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	e00a      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x154>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d02c      	beq.n	8004bec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6919      	ldr	r1, [r3, #16]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba0:	f7ff faea 	bl	8004178 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6919      	ldr	r1, [r3, #16]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	7e5b      	ldrb	r3, [r3, #25]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d102      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x186>
 8004bb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bb8:	e000      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x188>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f7ff fb14 	bl	80041ea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6919      	ldr	r1, [r3, #16]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	7e1b      	ldrb	r3, [r3, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x1a4>
 8004bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd6:	e000      	b.n	8004bda <HAL_ADC_ConfigChannel+0x1a6>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7ff faec 	bl	80041b8 <LL_ADC_SetDataRightShift>
 8004be0:	e04c      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x248>
 8004be2:	bf00      	nop
 8004be4:	47ff0000 	.word	0x47ff0000
 8004be8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	069b      	lsls	r3, r3, #26
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	069b      	lsls	r3, r3, #26
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d107      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c32:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	069b      	lsls	r3, r3, #26
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c56:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	069b      	lsls	r3, r3, #26
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d107      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fbf3 	bl	800446c <LL_ADC_IsEnabled>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f040 8211 	bne.w	80050b0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6819      	ldr	r1, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f7ff fb3e 	bl	800431c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4aa1      	ldr	r2, [pc, #644]	; (8004f2c <HAL_ADC_ConfigChannel+0x4f8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f040 812e 	bne.w	8004f08 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x2a0>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0e9b      	lsrs	r3, r3, #26
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	bf94      	ite	ls
 8004ccc:	2301      	movls	r3, #1
 8004cce:	2300      	movhi	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e019      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x2d4>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004cec:	2320      	movs	r3, #32
 8004cee:	e003      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	bf94      	ite	ls
 8004d02:	2301      	movls	r3, #1
 8004d04:	2300      	movhi	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d079      	beq.n	8004e00 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d107      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x2f4>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	0e9b      	lsrs	r3, r3, #26
 8004d1e:	3301      	adds	r3, #1
 8004d20:	069b      	lsls	r3, r3, #26
 8004d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d26:	e015      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x320>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	e003      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	069b      	lsls	r3, r3, #26
 8004d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x340>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0e9b      	lsrs	r3, r3, #26
 8004d66:	3301      	adds	r3, #1
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	e017      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x370>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	e003      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2101      	movs	r1, #1
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	ea42 0103 	orr.w	r1, r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x396>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0e9b      	lsrs	r3, r3, #26
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f003 021f 	and.w	r2, r3, #31
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	051b      	lsls	r3, r3, #20
 8004dc8:	e018      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x3c8>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004de2:	2320      	movs	r3, #32
 8004de4:	e003      	b.n	8004dee <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	fab3 f383 	clz	r3, r3
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	3301      	adds	r3, #1
 8004df0:	f003 021f 	and.w	r2, r3, #31
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	e07e      	b.n	8004efe <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x3e8>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	0e9b      	lsrs	r3, r3, #26
 8004e12:	3301      	adds	r3, #1
 8004e14:	069b      	lsls	r3, r3, #26
 8004e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e1a:	e015      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x414>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004e34:	2320      	movs	r3, #32
 8004e36:	e003      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	3301      	adds	r3, #1
 8004e42:	069b      	lsls	r3, r3, #26
 8004e44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x434>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0e9b      	lsrs	r3, r3, #26
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	e017      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x464>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	61bb      	str	r3, [r7, #24]
  return result;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e80:	2320      	movs	r3, #32
 8004e82:	e003      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	2101      	movs	r1, #1
 8004e94:	fa01 f303 	lsl.w	r3, r1, r3
 8004e98:	ea42 0103 	orr.w	r1, r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x490>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	0e9b      	lsrs	r3, r3, #26
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f003 021f 	and.w	r2, r3, #31
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	3b1e      	subs	r3, #30
 8004ebc:	051b      	lsls	r3, r3, #20
 8004ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	e01b      	b.n	8004efc <HAL_ADC_ConfigChannel+0x4c8>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	fa93 f3a3 	rbit	r3, r3
 8004ed0:	60fb      	str	r3, [r7, #12]
  return result;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004edc:	2320      	movs	r3, #32
 8004ede:	e003      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f003 021f 	and.w	r2, r3, #31
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3b1e      	subs	r3, #30
 8004ef6:	051b      	lsls	r3, r3, #20
 8004ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004efc:	430b      	orrs	r3, r1
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	6892      	ldr	r2, [r2, #8]
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7ff f9de 	bl	80042c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f280 80cf 	bge.w	80050b0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <HAL_ADC_ConfigChannel+0x4fc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_ADC_ConfigChannel+0x4f2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <HAL_ADC_ConfigChannel+0x500>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10a      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x508>
 8004f26:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <HAL_ADC_ConfigChannel+0x504>)
 8004f28:	e009      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x50a>
 8004f2a:	bf00      	nop
 8004f2c:	47ff0000 	.word	0x47ff0000
 8004f30:	40022000 	.word	0x40022000
 8004f34:	40022100 	.word	0x40022100
 8004f38:	40022300 	.word	0x40022300
 8004f3c:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_ADC_ConfigChannel+0x690>)
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f90c 	bl	800415c <LL_ADC_GetCommonPathInternalCh>
 8004f44:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5f      	ldr	r2, [pc, #380]	; (80050c8 <HAL_ADC_ConfigChannel+0x694>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_ADC_ConfigChannel+0x526>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5d      	ldr	r2, [pc, #372]	; (80050cc <HAL_ADC_ConfigChannel+0x698>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10e      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x544>
 8004f5a:	485b      	ldr	r0, [pc, #364]	; (80050c8 <HAL_ADC_ConfigChannel+0x694>)
 8004f5c:	f7ff fa86 	bl	800446c <LL_ADC_IsEnabled>
 8004f60:	4604      	mov	r4, r0
 8004f62:	485a      	ldr	r0, [pc, #360]	; (80050cc <HAL_ADC_ConfigChannel+0x698>)
 8004f64:	f7ff fa82 	bl	800446c <LL_ADC_IsEnabled>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4323      	orrs	r3, r4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e008      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x556>
 8004f78:	4855      	ldr	r0, [pc, #340]	; (80050d0 <HAL_ADC_ConfigChannel+0x69c>)
 8004f7a:	f7ff fa77 	bl	800446c <LL_ADC_IsEnabled>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d07d      	beq.n	800508a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a50      	ldr	r2, [pc, #320]	; (80050d4 <HAL_ADC_ConfigChannel+0x6a0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d130      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x5c6>
 8004f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d12b      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a4a      	ldr	r2, [pc, #296]	; (80050d0 <HAL_ADC_ConfigChannel+0x69c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	f040 8081 	bne.w	80050b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a45      	ldr	r2, [pc, #276]	; (80050c8 <HAL_ADC_ConfigChannel+0x694>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_ADC_ConfigChannel+0x58e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a43      	ldr	r2, [pc, #268]	; (80050cc <HAL_ADC_ConfigChannel+0x698>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x592>
 8004fc2:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004fc4:	e000      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x594>
 8004fc6:	4a3f      	ldr	r2, [pc, #252]	; (80050c4 <HAL_ADC_ConfigChannel+0x690>)
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7ff f8b0 	bl	8004136 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fd6:	4b41      	ldr	r3, [pc, #260]	; (80050dc <HAL_ADC_ConfigChannel+0x6a8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	099b      	lsrs	r3, r3, #6
 8004fdc:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <HAL_ADC_ConfigChannel+0x6ac>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fea:	e002      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f9      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ff8:	e05a      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a39      	ldr	r2, [pc, #228]	; (80050e4 <HAL_ADC_ConfigChannel+0x6b0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d11e      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x60e>
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d119      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <HAL_ADC_ConfigChannel+0x69c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d14b      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <HAL_ADC_ConfigChannel+0x694>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_ADC_ConfigChannel+0x5f8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_ADC_ConfigChannel+0x698>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x5fc>
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_ADC_ConfigChannel+0x6a4>)
 800502e:	e000      	b.n	8005032 <HAL_ADC_ConfigChannel+0x5fe>
 8005030:	4a24      	ldr	r2, [pc, #144]	; (80050c4 <HAL_ADC_ConfigChannel+0x690>)
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7ff f87b 	bl	8004136 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005040:	e036      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <HAL_ADC_ConfigChannel+0x6b4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d131      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
 800504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d12c      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_ADC_ConfigChannel+0x69c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d127      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_ADC_ConfigChannel+0x694>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_ADC_ConfigChannel+0x640>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_ADC_ConfigChannel+0x698>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x644>
 8005074:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_ADC_ConfigChannel+0x6a4>)
 8005076:	e000      	b.n	800507a <HAL_ADC_ConfigChannel+0x646>
 8005078:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <HAL_ADC_ConfigChannel+0x690>)
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f7ff f857 	bl	8004136 <LL_ADC_SetCommonPathInternalCh>
 8005088:	e012      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800509c:	e008      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3784      	adds	r7, #132	; 0x84
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd90      	pop	{r4, r7, pc}
 80050c4:	58026300 	.word	0x58026300
 80050c8:	40022000 	.word	0x40022000
 80050cc:	40022100 	.word	0x40022100
 80050d0:	58026000 	.word	0x58026000
 80050d4:	cb840000 	.word	0xcb840000
 80050d8:	40022300 	.word	0x40022300
 80050dc:	24000084 	.word	0x24000084
 80050e0:	053e2d63 	.word	0x053e2d63
 80050e4:	c7520000 	.word	0xc7520000
 80050e8:	cfb80000 	.word	0xcfb80000

080050ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff f9b7 	bl	800446c <LL_ADC_IsEnabled>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d16e      	bne.n	80051e2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	4b38      	ldr	r3, [pc, #224]	; (80051ec <ADC_Enable+0x100>)
 800510c:	4013      	ands	r3, r2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f043 0201 	orr.w	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e05a      	b.n	80051e4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f972 	bl	800441c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005138:	f7fe ffbc 	bl	80040b4 <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <ADC_Enable+0x104>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <ADC_Enable+0x66>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a29      	ldr	r2, [pc, #164]	; (80051f4 <ADC_Enable+0x108>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <ADC_Enable+0x6a>
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <ADC_Enable+0x10c>)
 8005154:	e000      	b.n	8005158 <ADC_Enable+0x6c>
 8005156:	4b29      	ldr	r3, [pc, #164]	; (80051fc <ADC_Enable+0x110>)
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff f903 	bl	8004364 <LL_ADC_GetMultimode>
 800515e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <ADC_Enable+0x108>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d002      	beq.n	8005170 <ADC_Enable+0x84>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	e000      	b.n	8005172 <ADC_Enable+0x86>
 8005170:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <ADC_Enable+0x104>)
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	4293      	cmp	r3, r2
 8005178:	d02c      	beq.n	80051d4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d130      	bne.n	80051e2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005180:	e028      	b.n	80051d4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f970 	bl	800446c <LL_ADC_IsEnabled>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f940 	bl	800441c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800519c:	f7fe ff8a 	bl	80040b4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d914      	bls.n	80051d4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d00d      	beq.n	80051d4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	f043 0210 	orr.w	r2, r3, #16
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f043 0201 	orr.w	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d1cf      	bne.n	8005182 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	8000003f 	.word	0x8000003f
 80051f0:	40022000 	.word	0x40022000
 80051f4:	40022100 	.word	0x40022100
 80051f8:	40022300 	.word	0x40022300
 80051fc:	58026300 	.word	0x58026300

08005200 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff f940 	bl	8004492 <LL_ADC_IsDisableOngoing>
 8005212:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff f927 	bl	800446c <LL_ADC_IsEnabled>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d047      	beq.n	80052b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d144      	bne.n	80052b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030d 	and.w	r3, r3, #13
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10c      	bne.n	8005252 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f901 	bl	8004444 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2203      	movs	r2, #3
 8005248:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800524a:	f7fe ff33 	bl	80040b4 <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005250:	e029      	b.n	80052a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	f043 0210 	orr.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	f043 0201 	orr.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e023      	b.n	80052b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800526e:	f7fe ff21 	bl	80040b4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d914      	bls.n	80052a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f043 0210 	orr.w	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e007      	b.n	80052b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1dc      	bne.n	800526e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d14b      	bne.n	8005370 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d021      	beq.n	8005336 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe ff92 	bl	8004220 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d032      	beq.n	8005368 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d12b      	bne.n	8005368 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11f      	bne.n	8005368 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f043 0201 	orr.w	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
 8005334:	e018      	b.n	8005368 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d111      	bne.n	8005368 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	f043 0201 	orr.w	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff fb45 	bl	80049f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800536e:	e00e      	b.n	800538e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fb4f 	bl	8004a20 <HAL_ADC_ErrorCallback>
}
 8005382:	e004      	b.n	800538e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fb31 	bl	8004a0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	f043 0204 	orr.w	r2, r3, #4
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fb21 	bl	8004a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a7a      	ldr	r2, [pc, #488]	; (80055e0 <ADC_ConfigureBoostMode+0x1f8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <ADC_ConfigureBoostMode+0x1c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a79      	ldr	r2, [pc, #484]	; (80055e4 <ADC_ConfigureBoostMode+0x1fc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d109      	bne.n	8005418 <ADC_ConfigureBoostMode+0x30>
 8005404:	4b78      	ldr	r3, [pc, #480]	; (80055e8 <ADC_ConfigureBoostMode+0x200>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e008      	b.n	800542a <ADC_ConfigureBoostMode+0x42>
 8005418:	4b74      	ldr	r3, [pc, #464]	; (80055ec <ADC_ConfigureBoostMode+0x204>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01c      	beq.n	8005468 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800542e:	f005 fd9f 	bl	800af70 <HAL_RCC_GetHCLKFreq>
 8005432:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800543c:	d010      	beq.n	8005460 <ADC_ConfigureBoostMode+0x78>
 800543e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005442:	d873      	bhi.n	800552c <ADC_ConfigureBoostMode+0x144>
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d002      	beq.n	8005450 <ADC_ConfigureBoostMode+0x68>
 800544a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800544e:	d16d      	bne.n	800552c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	60fb      	str	r3, [r7, #12]
        break;
 800545e:	e068      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	60fb      	str	r3, [r7, #12]
        break;
 8005466:	e064      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005468:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800546c:	f04f 0100 	mov.w	r1, #0
 8005470:	f007 f826 	bl	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005474:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800547e:	d051      	beq.n	8005524 <ADC_ConfigureBoostMode+0x13c>
 8005480:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005484:	d854      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 8005486:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800548a:	d047      	beq.n	800551c <ADC_ConfigureBoostMode+0x134>
 800548c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005490:	d84e      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 8005492:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005496:	d03d      	beq.n	8005514 <ADC_ConfigureBoostMode+0x12c>
 8005498:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800549c:	d848      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 800549e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a2:	d033      	beq.n	800550c <ADC_ConfigureBoostMode+0x124>
 80054a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a8:	d842      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 80054aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054ae:	d029      	beq.n	8005504 <ADC_ConfigureBoostMode+0x11c>
 80054b0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054b4:	d83c      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 80054b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054ba:	d01a      	beq.n	80054f2 <ADC_ConfigureBoostMode+0x10a>
 80054bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054c0:	d836      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 80054c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054c6:	d014      	beq.n	80054f2 <ADC_ConfigureBoostMode+0x10a>
 80054c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054cc:	d830      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d00e      	beq.n	80054f2 <ADC_ConfigureBoostMode+0x10a>
 80054d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d8:	d82a      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 80054da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054de:	d008      	beq.n	80054f2 <ADC_ConfigureBoostMode+0x10a>
 80054e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054e4:	d824      	bhi.n	8005530 <ADC_ConfigureBoostMode+0x148>
 80054e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054ea:	d002      	beq.n	80054f2 <ADC_ConfigureBoostMode+0x10a>
 80054ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054f0:	d11e      	bne.n	8005530 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	0c9b      	lsrs	r3, r3, #18
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	60fb      	str	r3, [r7, #12]
        break;
 8005502:	e016      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	60fb      	str	r3, [r7, #12]
        break;
 800550a:	e012      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	60fb      	str	r3, [r7, #12]
        break;
 8005512:	e00e      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	60fb      	str	r3, [r7, #12]
        break;
 800551a:	e00a      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	60fb      	str	r3, [r7, #12]
        break;
 8005522:	e006      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	60fb      	str	r3, [r7, #12]
        break;
 800552a:	e002      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
        break;
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005530:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005532:	f7fe fdcb 	bl	80040cc <HAL_GetREVID>
 8005536:	4603      	mov	r3, r0
 8005538:	f241 0203 	movw	r2, #4099	; 0x1003
 800553c:	4293      	cmp	r3, r2
 800553e:	d815      	bhi.n	800556c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <ADC_ConfigureBoostMode+0x208>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d908      	bls.n	800555a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005556:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005558:	e03e      	b.n	80055d8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005568:	609a      	str	r2, [r3, #8]
}
 800556a:	e035      	b.n	80055d8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <ADC_ConfigureBoostMode+0x20c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d808      	bhi.n	800558c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005588:	609a      	str	r2, [r3, #8]
}
 800558a:	e025      	b.n	80055d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <ADC_ConfigureBoostMode+0x210>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d80a      	bhi.n	80055aa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a6:	609a      	str	r2, [r3, #8]
}
 80055a8:	e016      	b.n	80055d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <ADC_ConfigureBoostMode+0x214>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d80a      	bhi.n	80055c8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c4:	609a      	str	r2, [r3, #8]
}
 80055c6:	e007      	b.n	80055d8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40022000 	.word	0x40022000
 80055e4:	40022100 	.word	0x40022100
 80055e8:	40022300 	.word	0x40022300
 80055ec:	58026300 	.word	0x58026300
 80055f0:	01312d00 	.word	0x01312d00
 80055f4:	005f5e10 	.word	0x005f5e10
 80055f8:	00bebc20 	.word	0x00bebc20
 80055fc:	017d7840 	.word	0x017d7840

08005600 <LL_ADC_IsEnabled>:
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <LL_ADC_IsEnabled+0x18>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <LL_ADC_IsEnabled+0x1a>
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <LL_ADC_StartCalibration>:
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <LL_ADC_StartCalibration+0x38>)
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005648:	430a      	orrs	r2, r1
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	3ffeffc0 	.word	0x3ffeffc0

08005664 <LL_ADC_IsCalibrationOnGoing>:
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005678:	d101      	bne.n	800567e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <LL_ADC_REG_IsConversionOngoing>:
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d101      	bne.n	80056a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e04c      	b.n	800576c <HAL_ADCEx_Calibration_Start+0xb8>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fd90 	bl	8005200 <ADC_Disable>
 80056e0:	4603      	mov	r3, r0
 80056e2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d135      	bne.n	8005756 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ee:	4b21      	ldr	r3, [pc, #132]	; (8005774 <HAL_ADCEx_Calibration_Start+0xc0>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	f043 0202 	orr.w	r2, r3, #2
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff ff90 	bl	8005628 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005708:	e014      	b.n	8005734 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3301      	adds	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4a19      	ldr	r2, [pc, #100]	; (8005778 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d30d      	bcc.n	8005734 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	f023 0312 	bic.w	r3, r3, #18
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e01b      	b.n	800576c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff93 	bl	8005664 <LL_ADC_IsCalibrationOnGoing>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e2      	bne.n	800570a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	f023 0303 	bic.w	r3, r3, #3
 800574c:	f043 0201 	orr.w	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
 8005754:	e005      	b.n	8005762 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f043 0210 	orr.w	r2, r3, #16
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	ffffeefd 	.word	0xffffeefd
 8005778:	25c3f800 	.word	0x25c3f800

0800577c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b09f      	sub	sp, #124	; 0x7c
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005796:	2302      	movs	r3, #2
 8005798:	e0be      	b.n	8005918 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80057a2:	2300      	movs	r3, #0
 80057a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a5c      	ldr	r2, [pc, #368]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d102      	bne.n	80057ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057b4:	4b5b      	ldr	r3, [pc, #364]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	e001      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f043 0220 	orr.w	r2, r3, #32
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e09d      	b.n	8005918 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff ff54 	bl	800568c <LL_ADC_REG_IsConversionOngoing>
 80057e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff ff4e 	bl	800568c <LL_ADC_REG_IsConversionOngoing>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d17f      	bne.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80057f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d17c      	bne.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a47      	ldr	r2, [pc, #284]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a46      	ldr	r2, [pc, #280]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005810:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005812:	e000      	b.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005814:	4b45      	ldr	r3, [pc, #276]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005816:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d039      	beq.n	8005894 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	431a      	orrs	r2, r3
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a3a      	ldr	r2, [pc, #232]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a38      	ldr	r2, [pc, #224]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d10e      	bne.n	8005864 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005846:	4836      	ldr	r0, [pc, #216]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005848:	f7ff feda 	bl	8005600 <LL_ADC_IsEnabled>
 800584c:	4604      	mov	r4, r0
 800584e:	4835      	ldr	r0, [pc, #212]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005850:	f7ff fed6 	bl	8005600 <LL_ADC_IsEnabled>
 8005854:	4603      	mov	r3, r0
 8005856:	4323      	orrs	r3, r4
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e008      	b.n	8005876 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005864:	4832      	ldr	r0, [pc, #200]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005866:	f7ff fecb 	bl	8005600 <LL_ADC_IsEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	bf0c      	ite	eq
 8005870:	2301      	moveq	r3, #1
 8005872:	2300      	movne	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d047      	beq.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800587a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005880:	4013      	ands	r3, r2
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	6811      	ldr	r1, [r2, #0]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	6892      	ldr	r2, [r2, #8]
 800588a:	430a      	orrs	r2, r1
 800588c:	431a      	orrs	r2, r3
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005892:	e03a      	b.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10e      	bne.n	80058d2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80058b4:	481a      	ldr	r0, [pc, #104]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058b6:	f7ff fea3 	bl	8005600 <LL_ADC_IsEnabled>
 80058ba:	4604      	mov	r4, r0
 80058bc:	4819      	ldr	r0, [pc, #100]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058be:	f7ff fe9f 	bl	8005600 <LL_ADC_IsEnabled>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4323      	orrs	r3, r4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e008      	b.n	80058e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80058d2:	4817      	ldr	r0, [pc, #92]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058d4:	f7ff fe94 	bl	8005600 <LL_ADC_IsEnabled>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d010      	beq.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058f4:	e009      	b.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	f043 0220 	orr.w	r2, r3, #32
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005908:	e000      	b.n	800590c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800590a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005914:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005918:	4618      	mov	r0, r3
 800591a:	377c      	adds	r7, #124	; 0x7c
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}
 8005920:	40022000 	.word	0x40022000
 8005924:	40022100 	.word	0x40022100
 8005928:	40022300 	.word	0x40022300
 800592c:	58026300 	.word	0x58026300
 8005930:	58026000 	.word	0x58026000
 8005934:	fffff0e0 	.word	0xfffff0e0

08005938 <__NVIC_SetPriorityGrouping>:
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <__NVIC_SetPriorityGrouping+0x40>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005960:	4b06      	ldr	r3, [pc, #24]	; (800597c <__NVIC_SetPriorityGrouping+0x44>)
 8005962:	4313      	orrs	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005966:	4a04      	ldr	r2, [pc, #16]	; (8005978 <__NVIC_SetPriorityGrouping+0x40>)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	60d3      	str	r3, [r2, #12]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000ed00 	.word	0xe000ed00
 800597c:	05fa0000 	.word	0x05fa0000

08005980 <__NVIC_GetPriorityGrouping>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <__NVIC_GetPriorityGrouping+0x18>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	f003 0307 	and.w	r3, r3, #7
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <__NVIC_EnableIRQ>:
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	db0b      	blt.n	80059c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	f003 021f 	and.w	r2, r3, #31
 80059b4:	4907      	ldr	r1, [pc, #28]	; (80059d4 <__NVIC_EnableIRQ+0x38>)
 80059b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2001      	movs	r0, #1
 80059be:	fa00 f202 	lsl.w	r2, r0, r2
 80059c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	e000e100 	.word	0xe000e100

080059d8 <__NVIC_SetPriority>:
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	6039      	str	r1, [r7, #0]
 80059e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db0a      	blt.n	8005a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	490c      	ldr	r1, [pc, #48]	; (8005a24 <__NVIC_SetPriority+0x4c>)
 80059f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059f6:	0112      	lsls	r2, r2, #4
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	440b      	add	r3, r1
 80059fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a00:	e00a      	b.n	8005a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4908      	ldr	r1, [pc, #32]	; (8005a28 <__NVIC_SetPriority+0x50>)
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3b04      	subs	r3, #4
 8005a10:	0112      	lsls	r2, r2, #4
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	440b      	add	r3, r1
 8005a16:	761a      	strb	r2, [r3, #24]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	e000e100 	.word	0xe000e100
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <NVIC_EncodePriority>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f1c3 0307 	rsb	r3, r3, #7
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	bf28      	it	cs
 8005a4a:	2304      	movcs	r3, #4
 8005a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d902      	bls.n	8005a5c <NVIC_EncodePriority+0x30>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	3b03      	subs	r3, #3
 8005a5a:	e000      	b.n	8005a5e <NVIC_EncodePriority+0x32>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	401a      	ands	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	43d9      	mvns	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a84:	4313      	orrs	r3, r2
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ff4c 	bl	8005938 <__NVIC_SetPriorityGrouping>
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ab6:	f7ff ff63 	bl	8005980 <__NVIC_GetPriorityGrouping>
 8005aba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	6978      	ldr	r0, [r7, #20]
 8005ac2:	f7ff ffb3 	bl	8005a2c <NVIC_EncodePriority>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ff82 	bl	80059d8 <__NVIC_SetPriority>
}
 8005ad4:	bf00      	nop
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff ff56 	bl	800599c <__NVIC_EnableIRQ>
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e014      	b.n	8005b34 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	791b      	ldrb	r3, [r3, #4]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb f862 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e046      	b.n	8005bde <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	795b      	ldrb	r3, [r3, #5]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_DAC_Start+0x20>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e040      	b.n	8005bde <HAL_DAC_Start+0xa2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6819      	ldr	r1, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2201      	movs	r2, #1
 8005b76:	409a      	lsls	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10f      	bne.n	8005ba6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d11d      	bne.n	8005bd0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	e014      	b.n	8005bd0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0202 	orr.w	r2, r2, #2
 8005bce:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0a2      	b.n	8005d4a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	795b      	ldrb	r3, [r3, #5]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_DAC_Start_DMA+0x24>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e09c      	b.n	8005d4a <HAL_DAC_Start_DMA+0x15e>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d129      	bne.n	8005c76 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4a4b      	ldr	r2, [pc, #300]	; (8005d54 <HAL_DAC_Start_DMA+0x168>)
 8005c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	4a4a      	ldr	r2, [pc, #296]	; (8005d58 <HAL_DAC_Start_DMA+0x16c>)
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4a49      	ldr	r2, [pc, #292]	; (8005d5c <HAL_DAC_Start_DMA+0x170>)
 8005c38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c48:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_DAC_Start_DMA+0x6c>
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d005      	beq.n	8005c62 <HAL_DAC_Start_DMA+0x76>
 8005c56:	e009      	b.n	8005c6c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	613b      	str	r3, [r7, #16]
        break;
 8005c60:	e033      	b.n	8005cca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	613b      	str	r3, [r7, #16]
        break;
 8005c6a:	e02e      	b.n	8005cca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3310      	adds	r3, #16
 8005c72:	613b      	str	r3, [r7, #16]
        break;
 8005c74:	e029      	b.n	8005cca <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4a39      	ldr	r2, [pc, #228]	; (8005d60 <HAL_DAC_Start_DMA+0x174>)
 8005c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a38      	ldr	r2, [pc, #224]	; (8005d64 <HAL_DAC_Start_DMA+0x178>)
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4a37      	ldr	r2, [pc, #220]	; (8005d68 <HAL_DAC_Start_DMA+0x17c>)
 8005c8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c9c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_DAC_Start_DMA+0xc0>
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d005      	beq.n	8005cb6 <HAL_DAC_Start_DMA+0xca>
 8005caa:	e009      	b.n	8005cc0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	613b      	str	r3, [r7, #16]
        break;
 8005cb4:	e009      	b.n	8005cca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3318      	adds	r3, #24
 8005cbc:	613b      	str	r3, [r7, #16]
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	331c      	adds	r3, #28
 8005cc6:	613b      	str	r3, [r7, #16]
        break;
 8005cc8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d111      	bne.n	8005cf4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6898      	ldr	r0, [r3, #8]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	f000 fe67 	bl	80069bc <HAL_DMA_Start_IT>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]
 8005cf2:	e010      	b.n	8005d16 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68d8      	ldr	r0, [r3, #12]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	f000 fe55 	bl	80069bc <HAL_DMA_Start_IT>
 8005d12:	4603      	mov	r3, r0
 8005d14:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2201      	movs	r2, #1
 8005d30:	409a      	lsls	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e005      	b.n	8005d48 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f043 0204 	orr.w	r2, r3, #4
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	080061dd 	.word	0x080061dd
 8005d58:	080061ff 	.word	0x080061ff
 8005d5c:	0800621b 	.word	0x0800621b
 8005d60:	08006299 	.word	0x08006299
 8005d64:	080062bb 	.word	0x080062bb
 8005d68:	080062d7 	.word	0x080062d7

08005d6c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e03e      	b.n	8005dfe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6819      	ldr	r1, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43da      	mvns	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2201      	movs	r2, #1
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43da      	mvns	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	400a      	ands	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10d      	bne.n	8005ddc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f863 	bl	8006e90 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e00c      	b.n	8005df6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 f855 	bl	8006e90 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005df4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01d      	beq.n	8005e64 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d018      	beq.n	8005e64 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2204      	movs	r2, #4
 8005e36:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f043 0201 	orr.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f86f 	bl	8005f42 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01d      	beq.n	8005eaa <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d018      	beq.n	8005eaa <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f043 0202 	orr.w	r2, r3, #2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f9ed 	bl	8006284 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e015      	b.n	8005efa <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e004      	b.n	8005ef0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	3314      	adds	r3, #20
 8005eee:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_DAC_ConfigChannel+0x1e>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e12a      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	795b      	ldrb	r3, [r3, #5]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_DAC_ConfigChannel+0x2e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e124      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x278>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d17a      	bne.n	8006090 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f9a:	f7fe f88b 	bl	80040b4 <HAL_GetTick>
 8005f9e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d13d      	bne.n	8006022 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fa6:	e018      	b.n	8005fda <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fa8:	f7fe f884 	bl	80040b4 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d911      	bls.n	8005fda <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fbc:	4b86      	ldr	r3, [pc, #536]	; (80061d8 <HAL_DAC_ConfigChannel+0x280>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f043 0208 	orr.w	r2, r3, #8
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2203      	movs	r2, #3
 8005fd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0fa      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe0:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <HAL_DAC_ConfigChannel+0x280>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1df      	bne.n	8005fa8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	6992      	ldr	r2, [r2, #24]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ff2:	e020      	b.n	8006036 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ff4:	f7fe f85e 	bl	80040b4 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d90f      	bls.n	8006022 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	2b00      	cmp	r3, #0
 800600a:	da0a      	bge.n	8006022 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f043 0208 	orr.w	r2, r3, #8
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2203      	movs	r2, #3
 800601c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e0d6      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	2b00      	cmp	r3, #0
 800602a:	dbe3      	blt.n	8005ff4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	6992      	ldr	r2, [r2, #24]
 8006034:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006046:	fa01 f303 	lsl.w	r3, r1, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	ea02 0103 	and.w	r1, r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f003 0310 	and.w	r3, r3, #16
 800605a:	409a      	lsls	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	21ff      	movs	r1, #255	; 0xff
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	43db      	mvns	r3, r3
 8006078:	ea02 0103 	and.w	r1, r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	409a      	lsls	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d11d      	bne.n	80060d4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	221f      	movs	r2, #31
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2207      	movs	r2, #7
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d102      	bne.n	80060fe <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	e00f      	b.n	800611e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d102      	bne.n	800610c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006106:	2301      	movs	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e008      	b.n	800611e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006114:	2301      	movs	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
 8006118:	e001      	b.n	800611e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4313      	orrs	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6819      	ldr	r1, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43da      	mvns	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	400a      	ands	r2, r1
 8006164:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	4013      	ands	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4313      	orrs	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6819      	ldr	r1, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	22c0      	movs	r2, #192	; 0xc0
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	400a      	ands	r2, r1
 80061be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20008000 	.word	0x20008000

080061dc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff fe8b 	bl	8005f06 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	711a      	strb	r2, [r3, #4]
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f7ff fe84 	bl	8005f1a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f043 0204 	orr.w	r2, r3, #4
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fe7a 	bl	8005f2e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	711a      	strb	r2, [r3, #4]
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff ffce 	bl	8006248 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	711a      	strb	r2, [r3, #4]
}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff ffc7 	bl	800625c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f043 0204 	orr.w	r2, r3, #4
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff ffbd 	bl	8006270 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	711a      	strb	r2, [r3, #4]
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800630c:	f7fd fed2 	bl	80040b4 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e316      	b.n	800694a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a66      	ldr	r2, [pc, #408]	; (80064bc <HAL_DMA_Init+0x1b8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d04a      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a65      	ldr	r2, [pc, #404]	; (80064c0 <HAL_DMA_Init+0x1bc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d045      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a63      	ldr	r2, [pc, #396]	; (80064c4 <HAL_DMA_Init+0x1c0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d040      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a62      	ldr	r2, [pc, #392]	; (80064c8 <HAL_DMA_Init+0x1c4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d03b      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a60      	ldr	r2, [pc, #384]	; (80064cc <HAL_DMA_Init+0x1c8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d036      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a5f      	ldr	r2, [pc, #380]	; (80064d0 <HAL_DMA_Init+0x1cc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d031      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5d      	ldr	r2, [pc, #372]	; (80064d4 <HAL_DMA_Init+0x1d0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d02c      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a5c      	ldr	r2, [pc, #368]	; (80064d8 <HAL_DMA_Init+0x1d4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d027      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a5a      	ldr	r2, [pc, #360]	; (80064dc <HAL_DMA_Init+0x1d8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d022      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a59      	ldr	r2, [pc, #356]	; (80064e0 <HAL_DMA_Init+0x1dc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01d      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a57      	ldr	r2, [pc, #348]	; (80064e4 <HAL_DMA_Init+0x1e0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d018      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a56      	ldr	r2, [pc, #344]	; (80064e8 <HAL_DMA_Init+0x1e4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a54      	ldr	r2, [pc, #336]	; (80064ec <HAL_DMA_Init+0x1e8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a53      	ldr	r2, [pc, #332]	; (80064f0 <HAL_DMA_Init+0x1ec>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a51      	ldr	r2, [pc, #324]	; (80064f4 <HAL_DMA_Init+0x1f0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_DMA_Init+0xb8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a50      	ldr	r2, [pc, #320]	; (80064f8 <HAL_DMA_Init+0x1f4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_DMA_Init+0xbc>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <HAL_DMA_Init+0xbe>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 813b 	beq.w	800663e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a37      	ldr	r2, [pc, #220]	; (80064bc <HAL_DMA_Init+0x1b8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d04a      	beq.n	8006478 <HAL_DMA_Init+0x174>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a36      	ldr	r2, [pc, #216]	; (80064c0 <HAL_DMA_Init+0x1bc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d045      	beq.n	8006478 <HAL_DMA_Init+0x174>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a34      	ldr	r2, [pc, #208]	; (80064c4 <HAL_DMA_Init+0x1c0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d040      	beq.n	8006478 <HAL_DMA_Init+0x174>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a33      	ldr	r2, [pc, #204]	; (80064c8 <HAL_DMA_Init+0x1c4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d03b      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a31      	ldr	r2, [pc, #196]	; (80064cc <HAL_DMA_Init+0x1c8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d036      	beq.n	8006478 <HAL_DMA_Init+0x174>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a30      	ldr	r2, [pc, #192]	; (80064d0 <HAL_DMA_Init+0x1cc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d031      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2e      	ldr	r2, [pc, #184]	; (80064d4 <HAL_DMA_Init+0x1d0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d02c      	beq.n	8006478 <HAL_DMA_Init+0x174>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2d      	ldr	r2, [pc, #180]	; (80064d8 <HAL_DMA_Init+0x1d4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d027      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2b      	ldr	r2, [pc, #172]	; (80064dc <HAL_DMA_Init+0x1d8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d022      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <HAL_DMA_Init+0x1dc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d01d      	beq.n	8006478 <HAL_DMA_Init+0x174>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <HAL_DMA_Init+0x1e0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d018      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <HAL_DMA_Init+0x1e4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a25      	ldr	r2, [pc, #148]	; (80064ec <HAL_DMA_Init+0x1e8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00e      	beq.n	8006478 <HAL_DMA_Init+0x174>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a24      	ldr	r2, [pc, #144]	; (80064f0 <HAL_DMA_Init+0x1ec>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_DMA_Init+0x174>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <HAL_DMA_Init+0x1f0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_DMA_Init+0x174>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <HAL_DMA_Init+0x1f4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d108      	bne.n	800648a <HAL_DMA_Init+0x186>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e007      	b.n	800649a <HAL_DMA_Init+0x196>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800649a:	e02f      	b.n	80064fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800649c:	f7fd fe0a 	bl	80040b4 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	d928      	bls.n	80064fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2203      	movs	r2, #3
 80064b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e246      	b.n	800694a <HAL_DMA_Init+0x646>
 80064bc:	40020010 	.word	0x40020010
 80064c0:	40020028 	.word	0x40020028
 80064c4:	40020040 	.word	0x40020040
 80064c8:	40020058 	.word	0x40020058
 80064cc:	40020070 	.word	0x40020070
 80064d0:	40020088 	.word	0x40020088
 80064d4:	400200a0 	.word	0x400200a0
 80064d8:	400200b8 	.word	0x400200b8
 80064dc:	40020410 	.word	0x40020410
 80064e0:	40020428 	.word	0x40020428
 80064e4:	40020440 	.word	0x40020440
 80064e8:	40020458 	.word	0x40020458
 80064ec:	40020470 	.word	0x40020470
 80064f0:	40020488 	.word	0x40020488
 80064f4:	400204a0 	.word	0x400204a0
 80064f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1c8      	bne.n	800649c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4b83      	ldr	r3, [pc, #524]	; (8006724 <HAL_DMA_Init+0x420>)
 8006516:	4013      	ands	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006522:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800652e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b04      	cmp	r3, #4
 800654e:	d107      	bne.n	8006560 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4313      	orrs	r3, r2
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006560:	4b71      	ldr	r3, [pc, #452]	; (8006728 <HAL_DMA_Init+0x424>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b71      	ldr	r3, [pc, #452]	; (800672c <HAL_DMA_Init+0x428>)
 8006566:	4013      	ands	r3, r2
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656c:	d328      	bcc.n	80065c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b28      	cmp	r3, #40	; 0x28
 8006574:	d903      	bls.n	800657e <HAL_DMA_Init+0x27a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b2e      	cmp	r3, #46	; 0x2e
 800657c:	d917      	bls.n	80065ae <HAL_DMA_Init+0x2aa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b3e      	cmp	r3, #62	; 0x3e
 8006584:	d903      	bls.n	800658e <HAL_DMA_Init+0x28a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b42      	cmp	r3, #66	; 0x42
 800658c:	d90f      	bls.n	80065ae <HAL_DMA_Init+0x2aa>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b46      	cmp	r3, #70	; 0x46
 8006594:	d903      	bls.n	800659e <HAL_DMA_Init+0x29a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b48      	cmp	r3, #72	; 0x48
 800659c:	d907      	bls.n	80065ae <HAL_DMA_Init+0x2aa>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b4e      	cmp	r3, #78	; 0x4e
 80065a4:	d905      	bls.n	80065b2 <HAL_DMA_Init+0x2ae>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b52      	cmp	r3, #82	; 0x52
 80065ac:	d801      	bhi.n	80065b2 <HAL_DMA_Init+0x2ae>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <HAL_DMA_Init+0x2b0>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d117      	bne.n	800661a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00e      	beq.n	800661a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 fb3f 	bl	8008c80 <DMA_CheckFifoParam>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2240      	movs	r2, #64	; 0x40
 800660c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e197      	b.n	800694a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f002 fa7a 	bl	8008b1c <DMA_CalcBaseAndBitshift>
 8006628:	4603      	mov	r3, r0
 800662a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	223f      	movs	r2, #63	; 0x3f
 8006636:	409a      	lsls	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	e0cd      	b.n	80067da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a3b      	ldr	r2, [pc, #236]	; (8006730 <HAL_DMA_Init+0x42c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_DMA_Init+0x38a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a39      	ldr	r2, [pc, #228]	; (8006734 <HAL_DMA_Init+0x430>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <HAL_DMA_Init+0x38a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a38      	ldr	r2, [pc, #224]	; (8006738 <HAL_DMA_Init+0x434>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_DMA_Init+0x38a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a36      	ldr	r2, [pc, #216]	; (800673c <HAL_DMA_Init+0x438>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_DMA_Init+0x38a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a35      	ldr	r2, [pc, #212]	; (8006740 <HAL_DMA_Init+0x43c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_DMA_Init+0x38a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a33      	ldr	r2, [pc, #204]	; (8006744 <HAL_DMA_Init+0x440>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_DMA_Init+0x38a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a32      	ldr	r2, [pc, #200]	; (8006748 <HAL_DMA_Init+0x444>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_DMA_Init+0x38a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a30      	ldr	r2, [pc, #192]	; (800674c <HAL_DMA_Init+0x448>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_DMA_Init+0x38e>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_DMA_Init+0x390>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8097 	beq.w	80067c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a24      	ldr	r2, [pc, #144]	; (8006730 <HAL_DMA_Init+0x42c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d021      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a22      	ldr	r2, [pc, #136]	; (8006734 <HAL_DMA_Init+0x430>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01c      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a21      	ldr	r2, [pc, #132]	; (8006738 <HAL_DMA_Init+0x434>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d017      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1f      	ldr	r2, [pc, #124]	; (800673c <HAL_DMA_Init+0x438>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d012      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <HAL_DMA_Init+0x43c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00d      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_DMA_Init+0x440>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d008      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1b      	ldr	r2, [pc, #108]	; (8006748 <HAL_DMA_Init+0x444>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <HAL_DMA_Init+0x3e4>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_DMA_Init+0x448>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4b12      	ldr	r3, [pc, #72]	; (8006750 <HAL_DMA_Init+0x44c>)
 8006706:	4013      	ands	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d020      	beq.n	8006754 <HAL_DMA_Init+0x450>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d102      	bne.n	8006720 <HAL_DMA_Init+0x41c>
 800671a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800671e:	e01a      	b.n	8006756 <HAL_DMA_Init+0x452>
 8006720:	2300      	movs	r3, #0
 8006722:	e018      	b.n	8006756 <HAL_DMA_Init+0x452>
 8006724:	fe10803f 	.word	0xfe10803f
 8006728:	5c001000 	.word	0x5c001000
 800672c:	ffff0000 	.word	0xffff0000
 8006730:	58025408 	.word	0x58025408
 8006734:	5802541c 	.word	0x5802541c
 8006738:	58025430 	.word	0x58025430
 800673c:	58025444 	.word	0x58025444
 8006740:	58025458 	.word	0x58025458
 8006744:	5802546c 	.word	0x5802546c
 8006748:	58025480 	.word	0x58025480
 800674c:	58025494 	.word	0x58025494
 8006750:	fffe000f 	.word	0xfffe000f
 8006754:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	68d2      	ldr	r2, [r2, #12]
 800675a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800675c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800676c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800677c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006784:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	4b6e      	ldr	r3, [pc, #440]	; (8006954 <HAL_DMA_Init+0x650>)
 800679c:	4413      	add	r3, r2
 800679e:	4a6e      	ldr	r2, [pc, #440]	; (8006958 <HAL_DMA_Init+0x654>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	009a      	lsls	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 f9b5 	bl	8008b1c <DMA_CalcBaseAndBitshift>
 80067b2:	4603      	mov	r3, r0
 80067b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2201      	movs	r2, #1
 80067c0:	409a      	lsls	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	e008      	b.n	80067da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2203      	movs	r2, #3
 80067d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e0b7      	b.n	800694a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a5f      	ldr	r2, [pc, #380]	; (800695c <HAL_DMA_Init+0x658>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d072      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a5d      	ldr	r2, [pc, #372]	; (8006960 <HAL_DMA_Init+0x65c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d06d      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5c      	ldr	r2, [pc, #368]	; (8006964 <HAL_DMA_Init+0x660>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d068      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5a      	ldr	r2, [pc, #360]	; (8006968 <HAL_DMA_Init+0x664>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d063      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a59      	ldr	r2, [pc, #356]	; (800696c <HAL_DMA_Init+0x668>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d05e      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a57      	ldr	r2, [pc, #348]	; (8006970 <HAL_DMA_Init+0x66c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d059      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a56      	ldr	r2, [pc, #344]	; (8006974 <HAL_DMA_Init+0x670>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d054      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a54      	ldr	r2, [pc, #336]	; (8006978 <HAL_DMA_Init+0x674>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d04f      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a53      	ldr	r2, [pc, #332]	; (800697c <HAL_DMA_Init+0x678>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d04a      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a51      	ldr	r2, [pc, #324]	; (8006980 <HAL_DMA_Init+0x67c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d045      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a50      	ldr	r2, [pc, #320]	; (8006984 <HAL_DMA_Init+0x680>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d040      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a4e      	ldr	r2, [pc, #312]	; (8006988 <HAL_DMA_Init+0x684>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d03b      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a4d      	ldr	r2, [pc, #308]	; (800698c <HAL_DMA_Init+0x688>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d036      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4b      	ldr	r2, [pc, #300]	; (8006990 <HAL_DMA_Init+0x68c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d031      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a4a      	ldr	r2, [pc, #296]	; (8006994 <HAL_DMA_Init+0x690>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d02c      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a48      	ldr	r2, [pc, #288]	; (8006998 <HAL_DMA_Init+0x694>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d027      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a47      	ldr	r2, [pc, #284]	; (800699c <HAL_DMA_Init+0x698>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d022      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a45      	ldr	r2, [pc, #276]	; (80069a0 <HAL_DMA_Init+0x69c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01d      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a44      	ldr	r2, [pc, #272]	; (80069a4 <HAL_DMA_Init+0x6a0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a42      	ldr	r2, [pc, #264]	; (80069a8 <HAL_DMA_Init+0x6a4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a41      	ldr	r2, [pc, #260]	; (80069ac <HAL_DMA_Init+0x6a8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a3f      	ldr	r2, [pc, #252]	; (80069b0 <HAL_DMA_Init+0x6ac>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3e      	ldr	r2, [pc, #248]	; (80069b4 <HAL_DMA_Init+0x6b0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_DMA_Init+0x5c6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <HAL_DMA_Init+0x6b4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d101      	bne.n	80068ce <HAL_DMA_Init+0x5ca>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <HAL_DMA_Init+0x5cc>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d032      	beq.n	800693a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f002 fa4f 	bl	8008d78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b80      	cmp	r3, #128	; 0x80
 80068e0:	d102      	bne.n	80068e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d010      	beq.n	8006928 <HAL_DMA_Init+0x624>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b08      	cmp	r3, #8
 800690c:	d80c      	bhi.n	8006928 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f002 facc 	bl	8008eac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e008      	b.n	800693a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	a7fdabf8 	.word	0xa7fdabf8
 8006958:	cccccccd 	.word	0xcccccccd
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	58025408 	.word	0x58025408
 80069a0:	5802541c 	.word	0x5802541c
 80069a4:	58025430 	.word	0x58025430
 80069a8:	58025444 	.word	0x58025444
 80069ac:	58025458 	.word	0x58025458
 80069b0:	5802546c 	.word	0x5802546c
 80069b4:	58025480 	.word	0x58025480
 80069b8:	58025494 	.word	0x58025494

080069bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e226      	b.n	8006e26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_DMA_Start_IT+0x2a>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e21f      	b.n	8006e26 <HAL_DMA_Start_IT+0x46a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f040 820a 	bne.w	8006e10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a68      	ldr	r2, [pc, #416]	; (8006bb0 <HAL_DMA_Start_IT+0x1f4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d04a      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a66      	ldr	r2, [pc, #408]	; (8006bb4 <HAL_DMA_Start_IT+0x1f8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d045      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a65      	ldr	r2, [pc, #404]	; (8006bb8 <HAL_DMA_Start_IT+0x1fc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d040      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a63      	ldr	r2, [pc, #396]	; (8006bbc <HAL_DMA_Start_IT+0x200>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03b      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a62      	ldr	r2, [pc, #392]	; (8006bc0 <HAL_DMA_Start_IT+0x204>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d036      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a60      	ldr	r2, [pc, #384]	; (8006bc4 <HAL_DMA_Start_IT+0x208>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a5f      	ldr	r2, [pc, #380]	; (8006bc8 <HAL_DMA_Start_IT+0x20c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d02c      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a5d      	ldr	r2, [pc, #372]	; (8006bcc <HAL_DMA_Start_IT+0x210>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d027      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a5c      	ldr	r2, [pc, #368]	; (8006bd0 <HAL_DMA_Start_IT+0x214>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a5a      	ldr	r2, [pc, #360]	; (8006bd4 <HAL_DMA_Start_IT+0x218>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01d      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a59      	ldr	r2, [pc, #356]	; (8006bd8 <HAL_DMA_Start_IT+0x21c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a57      	ldr	r2, [pc, #348]	; (8006bdc <HAL_DMA_Start_IT+0x220>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a56      	ldr	r2, [pc, #344]	; (8006be0 <HAL_DMA_Start_IT+0x224>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a54      	ldr	r2, [pc, #336]	; (8006be4 <HAL_DMA_Start_IT+0x228>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a53      	ldr	r2, [pc, #332]	; (8006be8 <HAL_DMA_Start_IT+0x22c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_DMA_Start_IT+0xee>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a51      	ldr	r2, [pc, #324]	; (8006bec <HAL_DMA_Start_IT+0x230>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d108      	bne.n	8006abc <HAL_DMA_Start_IT+0x100>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0201 	bic.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e007      	b.n	8006acc <HAL_DMA_Start_IT+0x110>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0201 	bic.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 fe76 	bl	80087c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a34      	ldr	r2, [pc, #208]	; (8006bb0 <HAL_DMA_Start_IT+0x1f4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d04a      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a33      	ldr	r2, [pc, #204]	; (8006bb4 <HAL_DMA_Start_IT+0x1f8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d045      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a31      	ldr	r2, [pc, #196]	; (8006bb8 <HAL_DMA_Start_IT+0x1fc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d040      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a30      	ldr	r2, [pc, #192]	; (8006bbc <HAL_DMA_Start_IT+0x200>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d03b      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a2e      	ldr	r2, [pc, #184]	; (8006bc0 <HAL_DMA_Start_IT+0x204>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d036      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <HAL_DMA_Start_IT+0x208>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d031      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <HAL_DMA_Start_IT+0x20c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d02c      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2a      	ldr	r2, [pc, #168]	; (8006bcc <HAL_DMA_Start_IT+0x210>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d027      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <HAL_DMA_Start_IT+0x214>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d022      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a27      	ldr	r2, [pc, #156]	; (8006bd4 <HAL_DMA_Start_IT+0x218>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d01d      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a25      	ldr	r2, [pc, #148]	; (8006bd8 <HAL_DMA_Start_IT+0x21c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a24      	ldr	r2, [pc, #144]	; (8006bdc <HAL_DMA_Start_IT+0x220>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a22      	ldr	r2, [pc, #136]	; (8006be0 <HAL_DMA_Start_IT+0x224>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <HAL_DMA_Start_IT+0x228>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <HAL_DMA_Start_IT+0x22c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_DMA_Start_IT+0x1bc>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <HAL_DMA_Start_IT+0x230>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d101      	bne.n	8006b7c <HAL_DMA_Start_IT+0x1c0>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <HAL_DMA_Start_IT+0x1c2>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d036      	beq.n	8006bf0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f023 021e 	bic.w	r2, r3, #30
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0216 	orr.w	r2, r2, #22
 8006b94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d03e      	beq.n	8006c1c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0208 	orr.w	r2, r2, #8
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e035      	b.n	8006c1c <HAL_DMA_Start_IT+0x260>
 8006bb0:	40020010 	.word	0x40020010
 8006bb4:	40020028 	.word	0x40020028
 8006bb8:	40020040 	.word	0x40020040
 8006bbc:	40020058 	.word	0x40020058
 8006bc0:	40020070 	.word	0x40020070
 8006bc4:	40020088 	.word	0x40020088
 8006bc8:	400200a0 	.word	0x400200a0
 8006bcc:	400200b8 	.word	0x400200b8
 8006bd0:	40020410 	.word	0x40020410
 8006bd4:	40020428 	.word	0x40020428
 8006bd8:	40020440 	.word	0x40020440
 8006bdc:	40020458 	.word	0x40020458
 8006be0:	40020470 	.word	0x40020470
 8006be4:	40020488 	.word	0x40020488
 8006be8:	400204a0 	.word	0x400204a0
 8006bec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f023 020e 	bic.w	r2, r3, #14
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 020a 	orr.w	r2, r2, #10
 8006c02:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d007      	beq.n	8006c1c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0204 	orr.w	r2, r2, #4
 8006c1a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a83      	ldr	r2, [pc, #524]	; (8006e30 <HAL_DMA_Start_IT+0x474>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d072      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a82      	ldr	r2, [pc, #520]	; (8006e34 <HAL_DMA_Start_IT+0x478>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d06d      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a80      	ldr	r2, [pc, #512]	; (8006e38 <HAL_DMA_Start_IT+0x47c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d068      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7f      	ldr	r2, [pc, #508]	; (8006e3c <HAL_DMA_Start_IT+0x480>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d063      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a7d      	ldr	r2, [pc, #500]	; (8006e40 <HAL_DMA_Start_IT+0x484>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d05e      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7c      	ldr	r2, [pc, #496]	; (8006e44 <HAL_DMA_Start_IT+0x488>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d059      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7a      	ldr	r2, [pc, #488]	; (8006e48 <HAL_DMA_Start_IT+0x48c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d054      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a79      	ldr	r2, [pc, #484]	; (8006e4c <HAL_DMA_Start_IT+0x490>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04f      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a77      	ldr	r2, [pc, #476]	; (8006e50 <HAL_DMA_Start_IT+0x494>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d04a      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a76      	ldr	r2, [pc, #472]	; (8006e54 <HAL_DMA_Start_IT+0x498>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d045      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a74      	ldr	r2, [pc, #464]	; (8006e58 <HAL_DMA_Start_IT+0x49c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d040      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a73      	ldr	r2, [pc, #460]	; (8006e5c <HAL_DMA_Start_IT+0x4a0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d03b      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a71      	ldr	r2, [pc, #452]	; (8006e60 <HAL_DMA_Start_IT+0x4a4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d036      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a70      	ldr	r2, [pc, #448]	; (8006e64 <HAL_DMA_Start_IT+0x4a8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d031      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a6e      	ldr	r2, [pc, #440]	; (8006e68 <HAL_DMA_Start_IT+0x4ac>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d02c      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6d      	ldr	r2, [pc, #436]	; (8006e6c <HAL_DMA_Start_IT+0x4b0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d027      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6b      	ldr	r2, [pc, #428]	; (8006e70 <HAL_DMA_Start_IT+0x4b4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d022      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6a      	ldr	r2, [pc, #424]	; (8006e74 <HAL_DMA_Start_IT+0x4b8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d01d      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a68      	ldr	r2, [pc, #416]	; (8006e78 <HAL_DMA_Start_IT+0x4bc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d018      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a67      	ldr	r2, [pc, #412]	; (8006e7c <HAL_DMA_Start_IT+0x4c0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a65      	ldr	r2, [pc, #404]	; (8006e80 <HAL_DMA_Start_IT+0x4c4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00e      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a64      	ldr	r2, [pc, #400]	; (8006e84 <HAL_DMA_Start_IT+0x4c8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a62      	ldr	r2, [pc, #392]	; (8006e88 <HAL_DMA_Start_IT+0x4cc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_DMA_Start_IT+0x350>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a61      	ldr	r2, [pc, #388]	; (8006e8c <HAL_DMA_Start_IT+0x4d0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d101      	bne.n	8006d10 <HAL_DMA_Start_IT+0x354>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <HAL_DMA_Start_IT+0x356>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01a      	beq.n	8006d4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d007      	beq.n	8006d34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <HAL_DMA_Start_IT+0x474>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d04a      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a36      	ldr	r2, [pc, #216]	; (8006e34 <HAL_DMA_Start_IT+0x478>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d045      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a34      	ldr	r2, [pc, #208]	; (8006e38 <HAL_DMA_Start_IT+0x47c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d040      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a33      	ldr	r2, [pc, #204]	; (8006e3c <HAL_DMA_Start_IT+0x480>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d03b      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a31      	ldr	r2, [pc, #196]	; (8006e40 <HAL_DMA_Start_IT+0x484>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d036      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <HAL_DMA_Start_IT+0x488>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d031      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <HAL_DMA_Start_IT+0x48c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02c      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2d      	ldr	r2, [pc, #180]	; (8006e4c <HAL_DMA_Start_IT+0x490>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d027      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <HAL_DMA_Start_IT+0x494>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d022      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <HAL_DMA_Start_IT+0x498>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01d      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <HAL_DMA_Start_IT+0x49c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a27      	ldr	r2, [pc, #156]	; (8006e5c <HAL_DMA_Start_IT+0x4a0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a25      	ldr	r2, [pc, #148]	; (8006e60 <HAL_DMA_Start_IT+0x4a4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a24      	ldr	r2, [pc, #144]	; (8006e64 <HAL_DMA_Start_IT+0x4a8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <HAL_DMA_Start_IT+0x4ac>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_DMA_Start_IT+0x430>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <HAL_DMA_Start_IT+0x4b0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <HAL_DMA_Start_IT+0x442>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e012      	b.n	8006e24 <HAL_DMA_Start_IT+0x468>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e009      	b.n	8006e24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40020010 	.word	0x40020010
 8006e34:	40020028 	.word	0x40020028
 8006e38:	40020040 	.word	0x40020040
 8006e3c:	40020058 	.word	0x40020058
 8006e40:	40020070 	.word	0x40020070
 8006e44:	40020088 	.word	0x40020088
 8006e48:	400200a0 	.word	0x400200a0
 8006e4c:	400200b8 	.word	0x400200b8
 8006e50:	40020410 	.word	0x40020410
 8006e54:	40020428 	.word	0x40020428
 8006e58:	40020440 	.word	0x40020440
 8006e5c:	40020458 	.word	0x40020458
 8006e60:	40020470 	.word	0x40020470
 8006e64:	40020488 	.word	0x40020488
 8006e68:	400204a0 	.word	0x400204a0
 8006e6c:	400204b8 	.word	0x400204b8
 8006e70:	58025408 	.word	0x58025408
 8006e74:	5802541c 	.word	0x5802541c
 8006e78:	58025430 	.word	0x58025430
 8006e7c:	58025444 	.word	0x58025444
 8006e80:	58025458 	.word	0x58025458
 8006e84:	5802546c 	.word	0x5802546c
 8006e88:	58025480 	.word	0x58025480
 8006e8c:	58025494 	.word	0x58025494

08006e90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e98:	f7fd f90c 	bl	80040b4 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e2dc      	b.n	8007462 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d008      	beq.n	8006ec6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e2cd      	b.n	8007462 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a76      	ldr	r2, [pc, #472]	; (80070a4 <HAL_DMA_Abort+0x214>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d04a      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a74      	ldr	r2, [pc, #464]	; (80070a8 <HAL_DMA_Abort+0x218>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d045      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a73      	ldr	r2, [pc, #460]	; (80070ac <HAL_DMA_Abort+0x21c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d040      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a71      	ldr	r2, [pc, #452]	; (80070b0 <HAL_DMA_Abort+0x220>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d03b      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a70      	ldr	r2, [pc, #448]	; (80070b4 <HAL_DMA_Abort+0x224>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d036      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a6e      	ldr	r2, [pc, #440]	; (80070b8 <HAL_DMA_Abort+0x228>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d031      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a6d      	ldr	r2, [pc, #436]	; (80070bc <HAL_DMA_Abort+0x22c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d02c      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6b      	ldr	r2, [pc, #428]	; (80070c0 <HAL_DMA_Abort+0x230>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d027      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a6a      	ldr	r2, [pc, #424]	; (80070c4 <HAL_DMA_Abort+0x234>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d022      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <HAL_DMA_Abort+0x238>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01d      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a67      	ldr	r2, [pc, #412]	; (80070cc <HAL_DMA_Abort+0x23c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d018      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a65      	ldr	r2, [pc, #404]	; (80070d0 <HAL_DMA_Abort+0x240>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a64      	ldr	r2, [pc, #400]	; (80070d4 <HAL_DMA_Abort+0x244>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00e      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a62      	ldr	r2, [pc, #392]	; (80070d8 <HAL_DMA_Abort+0x248>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d009      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a61      	ldr	r2, [pc, #388]	; (80070dc <HAL_DMA_Abort+0x24c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_DMA_Abort+0xd6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5f      	ldr	r2, [pc, #380]	; (80070e0 <HAL_DMA_Abort+0x250>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <HAL_DMA_Abort+0xda>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <HAL_DMA_Abort+0xdc>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d013      	beq.n	8006f98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 021e 	bic.w	r2, r2, #30
 8006f7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e00a      	b.n	8006fae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 020e 	bic.w	r2, r2, #14
 8006fa6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a3c      	ldr	r2, [pc, #240]	; (80070a4 <HAL_DMA_Abort+0x214>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d072      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a3a      	ldr	r2, [pc, #232]	; (80070a8 <HAL_DMA_Abort+0x218>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d06d      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a39      	ldr	r2, [pc, #228]	; (80070ac <HAL_DMA_Abort+0x21c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d068      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a37      	ldr	r2, [pc, #220]	; (80070b0 <HAL_DMA_Abort+0x220>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d063      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a36      	ldr	r2, [pc, #216]	; (80070b4 <HAL_DMA_Abort+0x224>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d05e      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a34      	ldr	r2, [pc, #208]	; (80070b8 <HAL_DMA_Abort+0x228>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d059      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a33      	ldr	r2, [pc, #204]	; (80070bc <HAL_DMA_Abort+0x22c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d054      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a31      	ldr	r2, [pc, #196]	; (80070c0 <HAL_DMA_Abort+0x230>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d04f      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a30      	ldr	r2, [pc, #192]	; (80070c4 <HAL_DMA_Abort+0x234>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d04a      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2e      	ldr	r2, [pc, #184]	; (80070c8 <HAL_DMA_Abort+0x238>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d045      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2d      	ldr	r2, [pc, #180]	; (80070cc <HAL_DMA_Abort+0x23c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d040      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2b      	ldr	r2, [pc, #172]	; (80070d0 <HAL_DMA_Abort+0x240>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d03b      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <HAL_DMA_Abort+0x244>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d036      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a28      	ldr	r2, [pc, #160]	; (80070d8 <HAL_DMA_Abort+0x248>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d031      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a27      	ldr	r2, [pc, #156]	; (80070dc <HAL_DMA_Abort+0x24c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d02c      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a25      	ldr	r2, [pc, #148]	; (80070e0 <HAL_DMA_Abort+0x250>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d027      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a24      	ldr	r2, [pc, #144]	; (80070e4 <HAL_DMA_Abort+0x254>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d022      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a22      	ldr	r2, [pc, #136]	; (80070e8 <HAL_DMA_Abort+0x258>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01d      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a21      	ldr	r2, [pc, #132]	; (80070ec <HAL_DMA_Abort+0x25c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d018      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <HAL_DMA_Abort+0x260>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1e      	ldr	r2, [pc, #120]	; (80070f4 <HAL_DMA_Abort+0x264>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_DMA_Abort+0x268>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <HAL_DMA_Abort+0x26c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_DMA_Abort+0x20e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_DMA_Abort+0x270>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d132      	bne.n	8007104 <HAL_DMA_Abort+0x274>
 800709e:	2301      	movs	r3, #1
 80070a0:	e031      	b.n	8007106 <HAL_DMA_Abort+0x276>
 80070a2:	bf00      	nop
 80070a4:	40020010 	.word	0x40020010
 80070a8:	40020028 	.word	0x40020028
 80070ac:	40020040 	.word	0x40020040
 80070b0:	40020058 	.word	0x40020058
 80070b4:	40020070 	.word	0x40020070
 80070b8:	40020088 	.word	0x40020088
 80070bc:	400200a0 	.word	0x400200a0
 80070c0:	400200b8 	.word	0x400200b8
 80070c4:	40020410 	.word	0x40020410
 80070c8:	40020428 	.word	0x40020428
 80070cc:	40020440 	.word	0x40020440
 80070d0:	40020458 	.word	0x40020458
 80070d4:	40020470 	.word	0x40020470
 80070d8:	40020488 	.word	0x40020488
 80070dc:	400204a0 	.word	0x400204a0
 80070e0:	400204b8 	.word	0x400204b8
 80070e4:	58025408 	.word	0x58025408
 80070e8:	5802541c 	.word	0x5802541c
 80070ec:	58025430 	.word	0x58025430
 80070f0:	58025444 	.word	0x58025444
 80070f4:	58025458 	.word	0x58025458
 80070f8:	5802546c 	.word	0x5802546c
 80070fc:	58025480 	.word	0x58025480
 8007100:	58025494 	.word	0x58025494
 8007104:	2300      	movs	r3, #0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007118:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a6d      	ldr	r2, [pc, #436]	; (80072d4 <HAL_DMA_Abort+0x444>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d04a      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a6b      	ldr	r2, [pc, #428]	; (80072d8 <HAL_DMA_Abort+0x448>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d045      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a6a      	ldr	r2, [pc, #424]	; (80072dc <HAL_DMA_Abort+0x44c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d040      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a68      	ldr	r2, [pc, #416]	; (80072e0 <HAL_DMA_Abort+0x450>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d03b      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a67      	ldr	r2, [pc, #412]	; (80072e4 <HAL_DMA_Abort+0x454>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d036      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a65      	ldr	r2, [pc, #404]	; (80072e8 <HAL_DMA_Abort+0x458>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d031      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a64      	ldr	r2, [pc, #400]	; (80072ec <HAL_DMA_Abort+0x45c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d02c      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a62      	ldr	r2, [pc, #392]	; (80072f0 <HAL_DMA_Abort+0x460>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d027      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a61      	ldr	r2, [pc, #388]	; (80072f4 <HAL_DMA_Abort+0x464>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d022      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5f      	ldr	r2, [pc, #380]	; (80072f8 <HAL_DMA_Abort+0x468>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01d      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a5e      	ldr	r2, [pc, #376]	; (80072fc <HAL_DMA_Abort+0x46c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <HAL_DMA_Abort+0x470>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a5b      	ldr	r2, [pc, #364]	; (8007304 <HAL_DMA_Abort+0x474>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00e      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a59      	ldr	r2, [pc, #356]	; (8007308 <HAL_DMA_Abort+0x478>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d009      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a58      	ldr	r2, [pc, #352]	; (800730c <HAL_DMA_Abort+0x47c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_DMA_Abort+0x32a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a56      	ldr	r2, [pc, #344]	; (8007310 <HAL_DMA_Abort+0x480>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <HAL_DMA_Abort+0x33c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e007      	b.n	80071dc <HAL_DMA_Abort+0x34c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071dc:	e013      	b.n	8007206 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071de:	f7fc ff69 	bl	80040b4 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d90c      	bls.n	8007206 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2203      	movs	r2, #3
 80071f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e12d      	b.n	8007462 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e5      	bne.n	80071de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2f      	ldr	r2, [pc, #188]	; (80072d4 <HAL_DMA_Abort+0x444>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d04a      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a2d      	ldr	r2, [pc, #180]	; (80072d8 <HAL_DMA_Abort+0x448>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d045      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <HAL_DMA_Abort+0x44c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d040      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <HAL_DMA_Abort+0x450>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d03b      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a29      	ldr	r2, [pc, #164]	; (80072e4 <HAL_DMA_Abort+0x454>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d036      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a27      	ldr	r2, [pc, #156]	; (80072e8 <HAL_DMA_Abort+0x458>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d031      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a26      	ldr	r2, [pc, #152]	; (80072ec <HAL_DMA_Abort+0x45c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d02c      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <HAL_DMA_Abort+0x460>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d027      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <HAL_DMA_Abort+0x464>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d022      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <HAL_DMA_Abort+0x468>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d01d      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a20      	ldr	r2, [pc, #128]	; (80072fc <HAL_DMA_Abort+0x46c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d018      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <HAL_DMA_Abort+0x470>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_DMA_Abort+0x474>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <HAL_DMA_Abort+0x478>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1a      	ldr	r2, [pc, #104]	; (800730c <HAL_DMA_Abort+0x47c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_DMA_Abort+0x422>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a18      	ldr	r2, [pc, #96]	; (8007310 <HAL_DMA_Abort+0x480>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d101      	bne.n	80072b6 <HAL_DMA_Abort+0x426>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <HAL_DMA_Abort+0x428>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02b      	beq.n	8007314 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	223f      	movs	r2, #63	; 0x3f
 80072cc:	409a      	lsls	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	609a      	str	r2, [r3, #8]
 80072d2:	e02a      	b.n	800732a <HAL_DMA_Abort+0x49a>
 80072d4:	40020010 	.word	0x40020010
 80072d8:	40020028 	.word	0x40020028
 80072dc:	40020040 	.word	0x40020040
 80072e0:	40020058 	.word	0x40020058
 80072e4:	40020070 	.word	0x40020070
 80072e8:	40020088 	.word	0x40020088
 80072ec:	400200a0 	.word	0x400200a0
 80072f0:	400200b8 	.word	0x400200b8
 80072f4:	40020410 	.word	0x40020410
 80072f8:	40020428 	.word	0x40020428
 80072fc:	40020440 	.word	0x40020440
 8007300:	40020458 	.word	0x40020458
 8007304:	40020470 	.word	0x40020470
 8007308:	40020488 	.word	0x40020488
 800730c:	400204a0 	.word	0x400204a0
 8007310:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007318:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2201      	movs	r2, #1
 8007324:	409a      	lsls	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a4f      	ldr	r2, [pc, #316]	; (800746c <HAL_DMA_Abort+0x5dc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d072      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a4d      	ldr	r2, [pc, #308]	; (8007470 <HAL_DMA_Abort+0x5e0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d06d      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4c      	ldr	r2, [pc, #304]	; (8007474 <HAL_DMA_Abort+0x5e4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d068      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a4a      	ldr	r2, [pc, #296]	; (8007478 <HAL_DMA_Abort+0x5e8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d063      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a49      	ldr	r2, [pc, #292]	; (800747c <HAL_DMA_Abort+0x5ec>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d05e      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a47      	ldr	r2, [pc, #284]	; (8007480 <HAL_DMA_Abort+0x5f0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d059      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a46      	ldr	r2, [pc, #280]	; (8007484 <HAL_DMA_Abort+0x5f4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d054      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a44      	ldr	r2, [pc, #272]	; (8007488 <HAL_DMA_Abort+0x5f8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d04f      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a43      	ldr	r2, [pc, #268]	; (800748c <HAL_DMA_Abort+0x5fc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d04a      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a41      	ldr	r2, [pc, #260]	; (8007490 <HAL_DMA_Abort+0x600>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d045      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a40      	ldr	r2, [pc, #256]	; (8007494 <HAL_DMA_Abort+0x604>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d040      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a3e      	ldr	r2, [pc, #248]	; (8007498 <HAL_DMA_Abort+0x608>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d03b      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a3d      	ldr	r2, [pc, #244]	; (800749c <HAL_DMA_Abort+0x60c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d036      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a3b      	ldr	r2, [pc, #236]	; (80074a0 <HAL_DMA_Abort+0x610>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3a      	ldr	r2, [pc, #232]	; (80074a4 <HAL_DMA_Abort+0x614>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d02c      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a38      	ldr	r2, [pc, #224]	; (80074a8 <HAL_DMA_Abort+0x618>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d027      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a37      	ldr	r2, [pc, #220]	; (80074ac <HAL_DMA_Abort+0x61c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a35      	ldr	r2, [pc, #212]	; (80074b0 <HAL_DMA_Abort+0x620>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a34      	ldr	r2, [pc, #208]	; (80074b4 <HAL_DMA_Abort+0x624>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a32      	ldr	r2, [pc, #200]	; (80074b8 <HAL_DMA_Abort+0x628>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a31      	ldr	r2, [pc, #196]	; (80074bc <HAL_DMA_Abort+0x62c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2f      	ldr	r2, [pc, #188]	; (80074c0 <HAL_DMA_Abort+0x630>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2e      	ldr	r2, [pc, #184]	; (80074c4 <HAL_DMA_Abort+0x634>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_DMA_Abort+0x58a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a2c      	ldr	r2, [pc, #176]	; (80074c8 <HAL_DMA_Abort+0x638>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d101      	bne.n	800741e <HAL_DMA_Abort+0x58e>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <HAL_DMA_Abort+0x590>
 800741e:	2300      	movs	r3, #0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d015      	beq.n	8007450 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800742c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007444:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800744e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	40020010 	.word	0x40020010
 8007470:	40020028 	.word	0x40020028
 8007474:	40020040 	.word	0x40020040
 8007478:	40020058 	.word	0x40020058
 800747c:	40020070 	.word	0x40020070
 8007480:	40020088 	.word	0x40020088
 8007484:	400200a0 	.word	0x400200a0
 8007488:	400200b8 	.word	0x400200b8
 800748c:	40020410 	.word	0x40020410
 8007490:	40020428 	.word	0x40020428
 8007494:	40020440 	.word	0x40020440
 8007498:	40020458 	.word	0x40020458
 800749c:	40020470 	.word	0x40020470
 80074a0:	40020488 	.word	0x40020488
 80074a4:	400204a0 	.word	0x400204a0
 80074a8:	400204b8 	.word	0x400204b8
 80074ac:	58025408 	.word	0x58025408
 80074b0:	5802541c 	.word	0x5802541c
 80074b4:	58025430 	.word	0x58025430
 80074b8:	58025444 	.word	0x58025444
 80074bc:	58025458 	.word	0x58025458
 80074c0:	5802546c 	.word	0x5802546c
 80074c4:	58025480 	.word	0x58025480
 80074c8:	58025494 	.word	0x58025494

080074cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e237      	b.n	800794e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d004      	beq.n	80074f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2280      	movs	r2, #128	; 0x80
 80074ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e22c      	b.n	800794e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a5c      	ldr	r2, [pc, #368]	; (800766c <HAL_DMA_Abort_IT+0x1a0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d04a      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5b      	ldr	r2, [pc, #364]	; (8007670 <HAL_DMA_Abort_IT+0x1a4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d045      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a59      	ldr	r2, [pc, #356]	; (8007674 <HAL_DMA_Abort_IT+0x1a8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d040      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a58      	ldr	r2, [pc, #352]	; (8007678 <HAL_DMA_Abort_IT+0x1ac>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d03b      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a56      	ldr	r2, [pc, #344]	; (800767c <HAL_DMA_Abort_IT+0x1b0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d036      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a55      	ldr	r2, [pc, #340]	; (8007680 <HAL_DMA_Abort_IT+0x1b4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d031      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a53      	ldr	r2, [pc, #332]	; (8007684 <HAL_DMA_Abort_IT+0x1b8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d02c      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a52      	ldr	r2, [pc, #328]	; (8007688 <HAL_DMA_Abort_IT+0x1bc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d027      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a50      	ldr	r2, [pc, #320]	; (800768c <HAL_DMA_Abort_IT+0x1c0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d022      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a4f      	ldr	r2, [pc, #316]	; (8007690 <HAL_DMA_Abort_IT+0x1c4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01d      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a4d      	ldr	r2, [pc, #308]	; (8007694 <HAL_DMA_Abort_IT+0x1c8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d018      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a4c      	ldr	r2, [pc, #304]	; (8007698 <HAL_DMA_Abort_IT+0x1cc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a4a      	ldr	r2, [pc, #296]	; (800769c <HAL_DMA_Abort_IT+0x1d0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a49      	ldr	r2, [pc, #292]	; (80076a0 <HAL_DMA_Abort_IT+0x1d4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d009      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a47      	ldr	r2, [pc, #284]	; (80076a4 <HAL_DMA_Abort_IT+0x1d8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_DMA_Abort_IT+0xc8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a46      	ldr	r2, [pc, #280]	; (80076a8 <HAL_DMA_Abort_IT+0x1dc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d101      	bne.n	8007598 <HAL_DMA_Abort_IT+0xcc>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <HAL_DMA_Abort_IT+0xce>
 8007598:	2300      	movs	r3, #0
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 8086 	beq.w	80076ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2204      	movs	r2, #4
 80075a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a2f      	ldr	r2, [pc, #188]	; (800766c <HAL_DMA_Abort_IT+0x1a0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d04a      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2e      	ldr	r2, [pc, #184]	; (8007670 <HAL_DMA_Abort_IT+0x1a4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d045      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <HAL_DMA_Abort_IT+0x1a8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d040      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2b      	ldr	r2, [pc, #172]	; (8007678 <HAL_DMA_Abort_IT+0x1ac>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d03b      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a29      	ldr	r2, [pc, #164]	; (800767c <HAL_DMA_Abort_IT+0x1b0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d036      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a28      	ldr	r2, [pc, #160]	; (8007680 <HAL_DMA_Abort_IT+0x1b4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d031      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a26      	ldr	r2, [pc, #152]	; (8007684 <HAL_DMA_Abort_IT+0x1b8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d02c      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a25      	ldr	r2, [pc, #148]	; (8007688 <HAL_DMA_Abort_IT+0x1bc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d027      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a23      	ldr	r2, [pc, #140]	; (800768c <HAL_DMA_Abort_IT+0x1c0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a22      	ldr	r2, [pc, #136]	; (8007690 <HAL_DMA_Abort_IT+0x1c4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d01d      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <HAL_DMA_Abort_IT+0x1c8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1f      	ldr	r2, [pc, #124]	; (8007698 <HAL_DMA_Abort_IT+0x1cc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1d      	ldr	r2, [pc, #116]	; (800769c <HAL_DMA_Abort_IT+0x1d0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <HAL_DMA_Abort_IT+0x1d4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <HAL_DMA_Abort_IT+0x1d8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_DMA_Abort_IT+0x17c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <HAL_DMA_Abort_IT+0x1dc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <HAL_DMA_Abort_IT+0x18e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0201 	bic.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e178      	b.n	800794c <HAL_DMA_Abort_IT+0x480>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e16f      	b.n	800794c <HAL_DMA_Abort_IT+0x480>
 800766c:	40020010 	.word	0x40020010
 8007670:	40020028 	.word	0x40020028
 8007674:	40020040 	.word	0x40020040
 8007678:	40020058 	.word	0x40020058
 800767c:	40020070 	.word	0x40020070
 8007680:	40020088 	.word	0x40020088
 8007684:	400200a0 	.word	0x400200a0
 8007688:	400200b8 	.word	0x400200b8
 800768c:	40020410 	.word	0x40020410
 8007690:	40020428 	.word	0x40020428
 8007694:	40020440 	.word	0x40020440
 8007698:	40020458 	.word	0x40020458
 800769c:	40020470 	.word	0x40020470
 80076a0:	40020488 	.word	0x40020488
 80076a4:	400204a0 	.word	0x400204a0
 80076a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 020e 	bic.w	r2, r2, #14
 80076ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a6c      	ldr	r2, [pc, #432]	; (8007874 <HAL_DMA_Abort_IT+0x3a8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d04a      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a6b      	ldr	r2, [pc, #428]	; (8007878 <HAL_DMA_Abort_IT+0x3ac>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d045      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a69      	ldr	r2, [pc, #420]	; (800787c <HAL_DMA_Abort_IT+0x3b0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d040      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a68      	ldr	r2, [pc, #416]	; (8007880 <HAL_DMA_Abort_IT+0x3b4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d03b      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a66      	ldr	r2, [pc, #408]	; (8007884 <HAL_DMA_Abort_IT+0x3b8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d036      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a65      	ldr	r2, [pc, #404]	; (8007888 <HAL_DMA_Abort_IT+0x3bc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d031      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a63      	ldr	r2, [pc, #396]	; (800788c <HAL_DMA_Abort_IT+0x3c0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d02c      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a62      	ldr	r2, [pc, #392]	; (8007890 <HAL_DMA_Abort_IT+0x3c4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d027      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a60      	ldr	r2, [pc, #384]	; (8007894 <HAL_DMA_Abort_IT+0x3c8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d022      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a5f      	ldr	r2, [pc, #380]	; (8007898 <HAL_DMA_Abort_IT+0x3cc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d01d      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a5d      	ldr	r2, [pc, #372]	; (800789c <HAL_DMA_Abort_IT+0x3d0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d018      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a5c      	ldr	r2, [pc, #368]	; (80078a0 <HAL_DMA_Abort_IT+0x3d4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d013      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a5a      	ldr	r2, [pc, #360]	; (80078a4 <HAL_DMA_Abort_IT+0x3d8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00e      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a59      	ldr	r2, [pc, #356]	; (80078a8 <HAL_DMA_Abort_IT+0x3dc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d009      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a57      	ldr	r2, [pc, #348]	; (80078ac <HAL_DMA_Abort_IT+0x3e0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d004      	beq.n	800775c <HAL_DMA_Abort_IT+0x290>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a56      	ldr	r2, [pc, #344]	; (80078b0 <HAL_DMA_Abort_IT+0x3e4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d108      	bne.n	800776e <HAL_DMA_Abort_IT+0x2a2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e007      	b.n	800777e <HAL_DMA_Abort_IT+0x2b2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a3c      	ldr	r2, [pc, #240]	; (8007874 <HAL_DMA_Abort_IT+0x3a8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d072      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a3a      	ldr	r2, [pc, #232]	; (8007878 <HAL_DMA_Abort_IT+0x3ac>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d06d      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a39      	ldr	r2, [pc, #228]	; (800787c <HAL_DMA_Abort_IT+0x3b0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d068      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a37      	ldr	r2, [pc, #220]	; (8007880 <HAL_DMA_Abort_IT+0x3b4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d063      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a36      	ldr	r2, [pc, #216]	; (8007884 <HAL_DMA_Abort_IT+0x3b8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d05e      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a34      	ldr	r2, [pc, #208]	; (8007888 <HAL_DMA_Abort_IT+0x3bc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d059      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a33      	ldr	r2, [pc, #204]	; (800788c <HAL_DMA_Abort_IT+0x3c0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d054      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a31      	ldr	r2, [pc, #196]	; (8007890 <HAL_DMA_Abort_IT+0x3c4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d04f      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a30      	ldr	r2, [pc, #192]	; (8007894 <HAL_DMA_Abort_IT+0x3c8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d04a      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <HAL_DMA_Abort_IT+0x3cc>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d045      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2d      	ldr	r2, [pc, #180]	; (800789c <HAL_DMA_Abort_IT+0x3d0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d040      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2b      	ldr	r2, [pc, #172]	; (80078a0 <HAL_DMA_Abort_IT+0x3d4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d03b      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2a      	ldr	r2, [pc, #168]	; (80078a4 <HAL_DMA_Abort_IT+0x3d8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d036      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <HAL_DMA_Abort_IT+0x3dc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d031      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a27      	ldr	r2, [pc, #156]	; (80078ac <HAL_DMA_Abort_IT+0x3e0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d02c      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <HAL_DMA_Abort_IT+0x3e4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d027      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <HAL_DMA_Abort_IT+0x3e8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d022      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <HAL_DMA_Abort_IT+0x3ec>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01d      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_DMA_Abort_IT+0x3f0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d018      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <HAL_DMA_Abort_IT+0x3f4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <HAL_DMA_Abort_IT+0x3f8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1c      	ldr	r2, [pc, #112]	; (80078c8 <HAL_DMA_Abort_IT+0x3fc>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <HAL_DMA_Abort_IT+0x400>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_DMA_Abort_IT+0x3a2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <HAL_DMA_Abort_IT+0x404>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d132      	bne.n	80078d4 <HAL_DMA_Abort_IT+0x408>
 800786e:	2301      	movs	r3, #1
 8007870:	e031      	b.n	80078d6 <HAL_DMA_Abort_IT+0x40a>
 8007872:	bf00      	nop
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c
 80078bc:	58025430 	.word	0x58025430
 80078c0:	58025444 	.word	0x58025444
 80078c4:	58025458 	.word	0x58025458
 80078c8:	5802546c 	.word	0x5802546c
 80078cc:	58025480 	.word	0x58025480
 80078d0:	58025494 	.word	0x58025494
 80078d4:	2300      	movs	r3, #0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d028      	beq.n	800792c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	2201      	movs	r2, #1
 80078fa:	409a      	lsls	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007908:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00c      	beq.n	800792c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007920:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800792a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop

08007958 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007964:	4b67      	ldr	r3, [pc, #412]	; (8007b04 <HAL_DMA_IRQHandler+0x1ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a67      	ldr	r2, [pc, #412]	; (8007b08 <HAL_DMA_IRQHandler+0x1b0>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0a9b      	lsrs	r3, r3, #10
 8007970:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a5f      	ldr	r2, [pc, #380]	; (8007b0c <HAL_DMA_IRQHandler+0x1b4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d04a      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <HAL_DMA_IRQHandler+0x1b8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d045      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a5c      	ldr	r2, [pc, #368]	; (8007b14 <HAL_DMA_IRQHandler+0x1bc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d040      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5a      	ldr	r2, [pc, #360]	; (8007b18 <HAL_DMA_IRQHandler+0x1c0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d03b      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a59      	ldr	r2, [pc, #356]	; (8007b1c <HAL_DMA_IRQHandler+0x1c4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d036      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <HAL_DMA_IRQHandler+0x1c8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d031      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a56      	ldr	r2, [pc, #344]	; (8007b24 <HAL_DMA_IRQHandler+0x1cc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d02c      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a54      	ldr	r2, [pc, #336]	; (8007b28 <HAL_DMA_IRQHandler+0x1d0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d027      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a53      	ldr	r2, [pc, #332]	; (8007b2c <HAL_DMA_IRQHandler+0x1d4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d022      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a51      	ldr	r2, [pc, #324]	; (8007b30 <HAL_DMA_IRQHandler+0x1d8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01d      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a50      	ldr	r2, [pc, #320]	; (8007b34 <HAL_DMA_IRQHandler+0x1dc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d018      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a4e      	ldr	r2, [pc, #312]	; (8007b38 <HAL_DMA_IRQHandler+0x1e0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a4d      	ldr	r2, [pc, #308]	; (8007b3c <HAL_DMA_IRQHandler+0x1e4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00e      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a4b      	ldr	r2, [pc, #300]	; (8007b40 <HAL_DMA_IRQHandler+0x1e8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d009      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a4a      	ldr	r2, [pc, #296]	; (8007b44 <HAL_DMA_IRQHandler+0x1ec>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d004      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xd2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a48      	ldr	r2, [pc, #288]	; (8007b48 <HAL_DMA_IRQHandler+0x1f0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d101      	bne.n	8007a2e <HAL_DMA_IRQHandler+0xd6>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_DMA_IRQHandler+0xd8>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 842b 	beq.w	800828c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2208      	movs	r2, #8
 8007a40:	409a      	lsls	r2, r3
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80a2 	beq.w	8007b90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a2e      	ldr	r2, [pc, #184]	; (8007b0c <HAL_DMA_IRQHandler+0x1b4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d04a      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <HAL_DMA_IRQHandler+0x1b8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d045      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <HAL_DMA_IRQHandler+0x1bc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d040      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <HAL_DMA_IRQHandler+0x1c0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d03b      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <HAL_DMA_IRQHandler+0x1c4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d036      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <HAL_DMA_IRQHandler+0x1c8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d031      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a25      	ldr	r2, [pc, #148]	; (8007b24 <HAL_DMA_IRQHandler+0x1cc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d02c      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a24      	ldr	r2, [pc, #144]	; (8007b28 <HAL_DMA_IRQHandler+0x1d0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d027      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a22      	ldr	r2, [pc, #136]	; (8007b2c <HAL_DMA_IRQHandler+0x1d4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d022      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	; (8007b30 <HAL_DMA_IRQHandler+0x1d8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d01d      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <HAL_DMA_IRQHandler+0x1dc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d018      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <HAL_DMA_IRQHandler+0x1e0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <HAL_DMA_IRQHandler+0x1e4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00e      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <HAL_DMA_IRQHandler+0x1e8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d009      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <HAL_DMA_IRQHandler+0x1ec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d004      	beq.n	8007aec <HAL_DMA_IRQHandler+0x194>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <HAL_DMA_IRQHandler+0x1f0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d12f      	bne.n	8007b4c <HAL_DMA_IRQHandler+0x1f4>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf14      	ite	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	2300      	moveq	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e02e      	b.n	8007b60 <HAL_DMA_IRQHandler+0x208>
 8007b02:	bf00      	nop
 8007b04:	24000084 	.word	0x24000084
 8007b08:	1b4e81b5 	.word	0x1b4e81b5
 8007b0c:	40020010 	.word	0x40020010
 8007b10:	40020028 	.word	0x40020028
 8007b14:	40020040 	.word	0x40020040
 8007b18:	40020058 	.word	0x40020058
 8007b1c:	40020070 	.word	0x40020070
 8007b20:	40020088 	.word	0x40020088
 8007b24:	400200a0 	.word	0x400200a0
 8007b28:	400200b8 	.word	0x400200b8
 8007b2c:	40020410 	.word	0x40020410
 8007b30:	40020428 	.word	0x40020428
 8007b34:	40020440 	.word	0x40020440
 8007b38:	40020458 	.word	0x40020458
 8007b3c:	40020470 	.word	0x40020470
 8007b40:	40020488 	.word	0x40020488
 8007b44:	400204a0 	.word	0x400204a0
 8007b48:	400204b8 	.word	0x400204b8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bf14      	ite	ne
 8007b5a:	2301      	movne	r3, #1
 8007b5c:	2300      	moveq	r3, #0
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d015      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0204 	bic.w	r2, r2, #4
 8007b72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	409a      	lsls	r2, r3
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	f043 0201 	orr.w	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b94:	f003 031f 	and.w	r3, r3, #31
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d06e      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a69      	ldr	r2, [pc, #420]	; (8007d50 <HAL_DMA_IRQHandler+0x3f8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d04a      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a67      	ldr	r2, [pc, #412]	; (8007d54 <HAL_DMA_IRQHandler+0x3fc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d045      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a66      	ldr	r2, [pc, #408]	; (8007d58 <HAL_DMA_IRQHandler+0x400>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d040      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a64      	ldr	r2, [pc, #400]	; (8007d5c <HAL_DMA_IRQHandler+0x404>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d03b      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a63      	ldr	r2, [pc, #396]	; (8007d60 <HAL_DMA_IRQHandler+0x408>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d036      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a61      	ldr	r2, [pc, #388]	; (8007d64 <HAL_DMA_IRQHandler+0x40c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d031      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a60      	ldr	r2, [pc, #384]	; (8007d68 <HAL_DMA_IRQHandler+0x410>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d02c      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a5e      	ldr	r2, [pc, #376]	; (8007d6c <HAL_DMA_IRQHandler+0x414>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d027      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a5d      	ldr	r2, [pc, #372]	; (8007d70 <HAL_DMA_IRQHandler+0x418>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d022      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a5b      	ldr	r2, [pc, #364]	; (8007d74 <HAL_DMA_IRQHandler+0x41c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01d      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a5a      	ldr	r2, [pc, #360]	; (8007d78 <HAL_DMA_IRQHandler+0x420>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d018      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a58      	ldr	r2, [pc, #352]	; (8007d7c <HAL_DMA_IRQHandler+0x424>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a57      	ldr	r2, [pc, #348]	; (8007d80 <HAL_DMA_IRQHandler+0x428>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00e      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a55      	ldr	r2, [pc, #340]	; (8007d84 <HAL_DMA_IRQHandler+0x42c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d009      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a54      	ldr	r2, [pc, #336]	; (8007d88 <HAL_DMA_IRQHandler+0x430>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d004      	beq.n	8007c46 <HAL_DMA_IRQHandler+0x2ee>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a52      	ldr	r2, [pc, #328]	; (8007d8c <HAL_DMA_IRQHandler+0x434>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d10a      	bne.n	8007c5c <HAL_DMA_IRQHandler+0x304>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bf14      	ite	ne
 8007c54:	2301      	movne	r3, #1
 8007c56:	2300      	moveq	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	e003      	b.n	8007c64 <HAL_DMA_IRQHandler+0x30c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2201      	movs	r2, #1
 8007c72:	409a      	lsls	r2, r3
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	f043 0202 	orr.w	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 808f 	beq.w	8007db8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2c      	ldr	r2, [pc, #176]	; (8007d50 <HAL_DMA_IRQHandler+0x3f8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d04a      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a2a      	ldr	r2, [pc, #168]	; (8007d54 <HAL_DMA_IRQHandler+0x3fc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d045      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a29      	ldr	r2, [pc, #164]	; (8007d58 <HAL_DMA_IRQHandler+0x400>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d040      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a27      	ldr	r2, [pc, #156]	; (8007d5c <HAL_DMA_IRQHandler+0x404>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d03b      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a26      	ldr	r2, [pc, #152]	; (8007d60 <HAL_DMA_IRQHandler+0x408>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d036      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a24      	ldr	r2, [pc, #144]	; (8007d64 <HAL_DMA_IRQHandler+0x40c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d031      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <HAL_DMA_IRQHandler+0x410>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d02c      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a21      	ldr	r2, [pc, #132]	; (8007d6c <HAL_DMA_IRQHandler+0x414>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d027      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <HAL_DMA_IRQHandler+0x418>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d022      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	; (8007d74 <HAL_DMA_IRQHandler+0x41c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d01d      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_DMA_IRQHandler+0x420>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d018      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <HAL_DMA_IRQHandler+0x424>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d013      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <HAL_DMA_IRQHandler+0x428>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00e      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_DMA_IRQHandler+0x42c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_DMA_IRQHandler+0x430>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x3e2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <HAL_DMA_IRQHandler+0x434>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d12a      	bne.n	8007d90 <HAL_DMA_IRQHandler+0x438>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf14      	ite	ne
 8007d48:	2301      	movne	r3, #1
 8007d4a:	2300      	moveq	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e023      	b.n	8007d98 <HAL_DMA_IRQHandler+0x440>
 8007d50:	40020010 	.word	0x40020010
 8007d54:	40020028 	.word	0x40020028
 8007d58:	40020040 	.word	0x40020040
 8007d5c:	40020058 	.word	0x40020058
 8007d60:	40020070 	.word	0x40020070
 8007d64:	40020088 	.word	0x40020088
 8007d68:	400200a0 	.word	0x400200a0
 8007d6c:	400200b8 	.word	0x400200b8
 8007d70:	40020410 	.word	0x40020410
 8007d74:	40020428 	.word	0x40020428
 8007d78:	40020440 	.word	0x40020440
 8007d7c:	40020458 	.word	0x40020458
 8007d80:	40020470 	.word	0x40020470
 8007d84:	40020488 	.word	0x40020488
 8007d88:	400204a0 	.word	0x400204a0
 8007d8c:	400204b8 	.word	0x400204b8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2300      	movs	r3, #0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da0:	f003 031f 	and.w	r3, r3, #31
 8007da4:	2204      	movs	r2, #4
 8007da6:	409a      	lsls	r2, r3
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	f043 0204 	orr.w	r2, r3, #4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80a6 	beq.w	8007f1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a85      	ldr	r2, [pc, #532]	; (8007fe8 <HAL_DMA_IRQHandler+0x690>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d04a      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a83      	ldr	r2, [pc, #524]	; (8007fec <HAL_DMA_IRQHandler+0x694>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d045      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a82      	ldr	r2, [pc, #520]	; (8007ff0 <HAL_DMA_IRQHandler+0x698>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d040      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a80      	ldr	r2, [pc, #512]	; (8007ff4 <HAL_DMA_IRQHandler+0x69c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d03b      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a7f      	ldr	r2, [pc, #508]	; (8007ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d036      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7d      	ldr	r2, [pc, #500]	; (8007ffc <HAL_DMA_IRQHandler+0x6a4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d031      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a7c      	ldr	r2, [pc, #496]	; (8008000 <HAL_DMA_IRQHandler+0x6a8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d02c      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a7a      	ldr	r2, [pc, #488]	; (8008004 <HAL_DMA_IRQHandler+0x6ac>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d027      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a79      	ldr	r2, [pc, #484]	; (8008008 <HAL_DMA_IRQHandler+0x6b0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d022      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a77      	ldr	r2, [pc, #476]	; (800800c <HAL_DMA_IRQHandler+0x6b4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d01d      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a76      	ldr	r2, [pc, #472]	; (8008010 <HAL_DMA_IRQHandler+0x6b8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d018      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a74      	ldr	r2, [pc, #464]	; (8008014 <HAL_DMA_IRQHandler+0x6bc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a73      	ldr	r2, [pc, #460]	; (8008018 <HAL_DMA_IRQHandler+0x6c0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00e      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a71      	ldr	r2, [pc, #452]	; (800801c <HAL_DMA_IRQHandler+0x6c4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d009      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a70      	ldr	r2, [pc, #448]	; (8008020 <HAL_DMA_IRQHandler+0x6c8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x516>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6e      	ldr	r2, [pc, #440]	; (8008024 <HAL_DMA_IRQHandler+0x6cc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d10a      	bne.n	8007e84 <HAL_DMA_IRQHandler+0x52c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf14      	ite	ne
 8007e7c:	2301      	movne	r3, #1
 8007e7e:	2300      	moveq	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	e009      	b.n	8007e98 <HAL_DMA_IRQHandler+0x540>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bf14      	ite	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	2300      	moveq	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d03e      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea0:	f003 031f 	and.w	r3, r3, #31
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d108      	bne.n	8007eda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d024      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
 8007ed8:	e01f      	b.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01b      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	e016      	b.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0208 	bic.w	r2, r2, #8
 8007f08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2220      	movs	r2, #32
 8007f24:	409a      	lsls	r2, r3
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8110 	beq.w	8008150 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2c      	ldr	r2, [pc, #176]	; (8007fe8 <HAL_DMA_IRQHandler+0x690>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d04a      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a2b      	ldr	r2, [pc, #172]	; (8007fec <HAL_DMA_IRQHandler+0x694>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d045      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a29      	ldr	r2, [pc, #164]	; (8007ff0 <HAL_DMA_IRQHandler+0x698>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d040      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a28      	ldr	r2, [pc, #160]	; (8007ff4 <HAL_DMA_IRQHandler+0x69c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d03b      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a26      	ldr	r2, [pc, #152]	; (8007ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d036      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a25      	ldr	r2, [pc, #148]	; (8007ffc <HAL_DMA_IRQHandler+0x6a4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d031      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a23      	ldr	r2, [pc, #140]	; (8008000 <HAL_DMA_IRQHandler+0x6a8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02c      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a22      	ldr	r2, [pc, #136]	; (8008004 <HAL_DMA_IRQHandler+0x6ac>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d027      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a20      	ldr	r2, [pc, #128]	; (8008008 <HAL_DMA_IRQHandler+0x6b0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1f      	ldr	r2, [pc, #124]	; (800800c <HAL_DMA_IRQHandler+0x6b4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d01d      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1d      	ldr	r2, [pc, #116]	; (8008010 <HAL_DMA_IRQHandler+0x6b8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <HAL_DMA_IRQHandler+0x6bc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1a      	ldr	r2, [pc, #104]	; (8008018 <HAL_DMA_IRQHandler+0x6c0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a19      	ldr	r2, [pc, #100]	; (800801c <HAL_DMA_IRQHandler+0x6c4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a17      	ldr	r2, [pc, #92]	; (8008020 <HAL_DMA_IRQHandler+0x6c8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x678>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a16      	ldr	r2, [pc, #88]	; (8008024 <HAL_DMA_IRQHandler+0x6cc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d12b      	bne.n	8008028 <HAL_DMA_IRQHandler+0x6d0>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0310 	and.w	r3, r3, #16
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e02a      	b.n	800803c <HAL_DMA_IRQHandler+0x6e4>
 8007fe6:	bf00      	nop
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	bf14      	ite	ne
 8008036:	2301      	movne	r3, #1
 8008038:	2300      	moveq	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8087 	beq.w	8008150 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	2220      	movs	r2, #32
 800804c:	409a      	lsls	r2, r3
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b04      	cmp	r3, #4
 800805c:	d139      	bne.n	80080d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0216 	bic.w	r2, r2, #22
 800806c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800807c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <HAL_DMA_IRQHandler+0x736>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0208 	bic.w	r2, r2, #8
 800809c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	223f      	movs	r2, #63	; 0x3f
 80080a8:	409a      	lsls	r2, r3
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 834a 	beq.w	800875c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
          }
          return;
 80080d0:	e344      	b.n	800875c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d018      	beq.n	8008112 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d108      	bne.n	8008100 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d02c      	beq.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	e027      	b.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d023      	beq.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
 8008110:	e01e      	b.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10f      	bne.n	8008140 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0210 	bic.w	r2, r2, #16
 800812e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 8306 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8088 	beq.w	8008278 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2204      	movs	r2, #4
 800816c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a7a      	ldr	r2, [pc, #488]	; (8008360 <HAL_DMA_IRQHandler+0xa08>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d04a      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a79      	ldr	r2, [pc, #484]	; (8008364 <HAL_DMA_IRQHandler+0xa0c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d045      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a77      	ldr	r2, [pc, #476]	; (8008368 <HAL_DMA_IRQHandler+0xa10>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d040      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a76      	ldr	r2, [pc, #472]	; (800836c <HAL_DMA_IRQHandler+0xa14>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d03b      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a74      	ldr	r2, [pc, #464]	; (8008370 <HAL_DMA_IRQHandler+0xa18>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d036      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a73      	ldr	r2, [pc, #460]	; (8008374 <HAL_DMA_IRQHandler+0xa1c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d031      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a71      	ldr	r2, [pc, #452]	; (8008378 <HAL_DMA_IRQHandler+0xa20>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02c      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a70      	ldr	r2, [pc, #448]	; (800837c <HAL_DMA_IRQHandler+0xa24>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d027      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6e      	ldr	r2, [pc, #440]	; (8008380 <HAL_DMA_IRQHandler+0xa28>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d022      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a6d      	ldr	r2, [pc, #436]	; (8008384 <HAL_DMA_IRQHandler+0xa2c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d01d      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_DMA_IRQHandler+0xa30>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d018      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a6a      	ldr	r2, [pc, #424]	; (800838c <HAL_DMA_IRQHandler+0xa34>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a68      	ldr	r2, [pc, #416]	; (8008390 <HAL_DMA_IRQHandler+0xa38>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00e      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a67      	ldr	r2, [pc, #412]	; (8008394 <HAL_DMA_IRQHandler+0xa3c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a65      	ldr	r2, [pc, #404]	; (8008398 <HAL_DMA_IRQHandler+0xa40>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_DMA_IRQHandler+0x8b8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a64      	ldr	r2, [pc, #400]	; (800839c <HAL_DMA_IRQHandler+0xa44>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d108      	bne.n	8008222 <HAL_DMA_IRQHandler+0x8ca>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0201 	bic.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e007      	b.n	8008232 <HAL_DMA_IRQHandler+0x8da>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	429a      	cmp	r2, r3
 800823c:	d307      	bcc.n	800824e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f2      	bne.n	8008232 <HAL_DMA_IRQHandler+0x8da>
 800824c:	e000      	b.n	8008250 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800824e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d004      	beq.n	8008268 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2203      	movs	r2, #3
 8008262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008266:	e003      	b.n	8008270 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8272 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	e26c      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a43      	ldr	r2, [pc, #268]	; (80083a0 <HAL_DMA_IRQHandler+0xa48>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d022      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a42      	ldr	r2, [pc, #264]	; (80083a4 <HAL_DMA_IRQHandler+0xa4c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d01d      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a40      	ldr	r2, [pc, #256]	; (80083a8 <HAL_DMA_IRQHandler+0xa50>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d018      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a3f      	ldr	r2, [pc, #252]	; (80083ac <HAL_DMA_IRQHandler+0xa54>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d013      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a3d      	ldr	r2, [pc, #244]	; (80083b0 <HAL_DMA_IRQHandler+0xa58>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00e      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <HAL_DMA_IRQHandler+0xa5c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d009      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a3a      	ldr	r2, [pc, #232]	; (80083b8 <HAL_DMA_IRQHandler+0xa60>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_DMA_IRQHandler+0x984>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a39      	ldr	r2, [pc, #228]	; (80083bc <HAL_DMA_IRQHandler+0xa64>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d101      	bne.n	80082e0 <HAL_DMA_IRQHandler+0x988>
 80082dc:	2301      	movs	r3, #1
 80082de:	e000      	b.n	80082e2 <HAL_DMA_IRQHandler+0x98a>
 80082e0:	2300      	movs	r3, #0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 823f 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	2204      	movs	r2, #4
 80082fa:	409a      	lsls	r2, r3
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4013      	ands	r3, r2
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80cd 	beq.w	80084a0 <HAL_DMA_IRQHandler+0xb48>
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80c7 	beq.w	80084a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2204      	movs	r2, #4
 800831c:	409a      	lsls	r2, r3
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d049      	beq.n	80083c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8210 	beq.w	8008760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008348:	e20a      	b.n	8008760 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8206 	beq.w	8008760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800835c:	e200      	b.n	8008760 <HAL_DMA_IRQHandler+0xe08>
 800835e:	bf00      	nop
 8008360:	40020010 	.word	0x40020010
 8008364:	40020028 	.word	0x40020028
 8008368:	40020040 	.word	0x40020040
 800836c:	40020058 	.word	0x40020058
 8008370:	40020070 	.word	0x40020070
 8008374:	40020088 	.word	0x40020088
 8008378:	400200a0 	.word	0x400200a0
 800837c:	400200b8 	.word	0x400200b8
 8008380:	40020410 	.word	0x40020410
 8008384:	40020428 	.word	0x40020428
 8008388:	40020440 	.word	0x40020440
 800838c:	40020458 	.word	0x40020458
 8008390:	40020470 	.word	0x40020470
 8008394:	40020488 	.word	0x40020488
 8008398:	400204a0 	.word	0x400204a0
 800839c:	400204b8 	.word	0x400204b8
 80083a0:	58025408 	.word	0x58025408
 80083a4:	5802541c 	.word	0x5802541c
 80083a8:	58025430 	.word	0x58025430
 80083ac:	58025444 	.word	0x58025444
 80083b0:	58025458 	.word	0x58025458
 80083b4:	5802546c 	.word	0x5802546c
 80083b8:	58025480 	.word	0x58025480
 80083bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d160      	bne.n	800848c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a7f      	ldr	r2, [pc, #508]	; (80085cc <HAL_DMA_IRQHandler+0xc74>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d04a      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a7d      	ldr	r2, [pc, #500]	; (80085d0 <HAL_DMA_IRQHandler+0xc78>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d045      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a7c      	ldr	r2, [pc, #496]	; (80085d4 <HAL_DMA_IRQHandler+0xc7c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d040      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a7a      	ldr	r2, [pc, #488]	; (80085d8 <HAL_DMA_IRQHandler+0xc80>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d03b      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a79      	ldr	r2, [pc, #484]	; (80085dc <HAL_DMA_IRQHandler+0xc84>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d036      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a77      	ldr	r2, [pc, #476]	; (80085e0 <HAL_DMA_IRQHandler+0xc88>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d031      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a76      	ldr	r2, [pc, #472]	; (80085e4 <HAL_DMA_IRQHandler+0xc8c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d02c      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a74      	ldr	r2, [pc, #464]	; (80085e8 <HAL_DMA_IRQHandler+0xc90>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d027      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a73      	ldr	r2, [pc, #460]	; (80085ec <HAL_DMA_IRQHandler+0xc94>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d022      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a71      	ldr	r2, [pc, #452]	; (80085f0 <HAL_DMA_IRQHandler+0xc98>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d01d      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a70      	ldr	r2, [pc, #448]	; (80085f4 <HAL_DMA_IRQHandler+0xc9c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d018      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a6e      	ldr	r2, [pc, #440]	; (80085f8 <HAL_DMA_IRQHandler+0xca0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a6d      	ldr	r2, [pc, #436]	; (80085fc <HAL_DMA_IRQHandler+0xca4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00e      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a6b      	ldr	r2, [pc, #428]	; (8008600 <HAL_DMA_IRQHandler+0xca8>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d009      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6a      	ldr	r2, [pc, #424]	; (8008604 <HAL_DMA_IRQHandler+0xcac>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d004      	beq.n	800846a <HAL_DMA_IRQHandler+0xb12>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a68      	ldr	r2, [pc, #416]	; (8008608 <HAL_DMA_IRQHandler+0xcb0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <HAL_DMA_IRQHandler+0xb24>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0208 	bic.w	r2, r2, #8
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e007      	b.n	800848c <HAL_DMA_IRQHandler+0xb34>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0204 	bic.w	r2, r2, #4
 800848a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8165 	beq.w	8008760 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800849e:	e15f      	b.n	8008760 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2202      	movs	r2, #2
 80084aa:	409a      	lsls	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80c5 	beq.w	8008640 <HAL_DMA_IRQHandler+0xce8>
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80bf 	beq.w	8008640 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2202      	movs	r2, #2
 80084cc:	409a      	lsls	r2, r3
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d018      	beq.n	800850e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 813a 	beq.w	8008764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f8:	e134      	b.n	8008764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8130 	beq.w	8008764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800850c:	e12a      	b.n	8008764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	f040 8089 	bne.w	800862c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2b      	ldr	r2, [pc, #172]	; (80085cc <HAL_DMA_IRQHandler+0xc74>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d04a      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a29      	ldr	r2, [pc, #164]	; (80085d0 <HAL_DMA_IRQHandler+0xc78>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d045      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a28      	ldr	r2, [pc, #160]	; (80085d4 <HAL_DMA_IRQHandler+0xc7c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d040      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a26      	ldr	r2, [pc, #152]	; (80085d8 <HAL_DMA_IRQHandler+0xc80>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d03b      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a25      	ldr	r2, [pc, #148]	; (80085dc <HAL_DMA_IRQHandler+0xc84>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d036      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a23      	ldr	r2, [pc, #140]	; (80085e0 <HAL_DMA_IRQHandler+0xc88>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d031      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a22      	ldr	r2, [pc, #136]	; (80085e4 <HAL_DMA_IRQHandler+0xc8c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d02c      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <HAL_DMA_IRQHandler+0xc90>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d027      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a1f      	ldr	r2, [pc, #124]	; (80085ec <HAL_DMA_IRQHandler+0xc94>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d022      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <HAL_DMA_IRQHandler+0xc98>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d01d      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1c      	ldr	r2, [pc, #112]	; (80085f4 <HAL_DMA_IRQHandler+0xc9c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d018      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1a      	ldr	r2, [pc, #104]	; (80085f8 <HAL_DMA_IRQHandler+0xca0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a19      	ldr	r2, [pc, #100]	; (80085fc <HAL_DMA_IRQHandler+0xca4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00e      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a17      	ldr	r2, [pc, #92]	; (8008600 <HAL_DMA_IRQHandler+0xca8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a16      	ldr	r2, [pc, #88]	; (8008604 <HAL_DMA_IRQHandler+0xcac>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d004      	beq.n	80085ba <HAL_DMA_IRQHandler+0xc62>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a14      	ldr	r2, [pc, #80]	; (8008608 <HAL_DMA_IRQHandler+0xcb0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d128      	bne.n	800860c <HAL_DMA_IRQHandler+0xcb4>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0214 	bic.w	r2, r2, #20
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e027      	b.n	800861c <HAL_DMA_IRQHandler+0xcc4>
 80085cc:	40020010 	.word	0x40020010
 80085d0:	40020028 	.word	0x40020028
 80085d4:	40020040 	.word	0x40020040
 80085d8:	40020058 	.word	0x40020058
 80085dc:	40020070 	.word	0x40020070
 80085e0:	40020088 	.word	0x40020088
 80085e4:	400200a0 	.word	0x400200a0
 80085e8:	400200b8 	.word	0x400200b8
 80085ec:	40020410 	.word	0x40020410
 80085f0:	40020428 	.word	0x40020428
 80085f4:	40020440 	.word	0x40020440
 80085f8:	40020458 	.word	0x40020458
 80085fc:	40020470 	.word	0x40020470
 8008600:	40020488 	.word	0x40020488
 8008604:	400204a0 	.word	0x400204a0
 8008608:	400204b8 	.word	0x400204b8
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 020a 	bic.w	r2, r2, #10
 800861a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8097 	beq.w	8008764 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800863e:	e091      	b.n	8008764 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	2208      	movs	r2, #8
 800864a:	409a      	lsls	r2, r3
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	4013      	ands	r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8088 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8082 	beq.w	8008766 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a41      	ldr	r2, [pc, #260]	; (800876c <HAL_DMA_IRQHandler+0xe14>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d04a      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a3f      	ldr	r2, [pc, #252]	; (8008770 <HAL_DMA_IRQHandler+0xe18>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d045      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a3e      	ldr	r2, [pc, #248]	; (8008774 <HAL_DMA_IRQHandler+0xe1c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d040      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a3c      	ldr	r2, [pc, #240]	; (8008778 <HAL_DMA_IRQHandler+0xe20>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d03b      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a3b      	ldr	r2, [pc, #236]	; (800877c <HAL_DMA_IRQHandler+0xe24>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d036      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a39      	ldr	r2, [pc, #228]	; (8008780 <HAL_DMA_IRQHandler+0xe28>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d031      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a38      	ldr	r2, [pc, #224]	; (8008784 <HAL_DMA_IRQHandler+0xe2c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d02c      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a36      	ldr	r2, [pc, #216]	; (8008788 <HAL_DMA_IRQHandler+0xe30>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d027      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a35      	ldr	r2, [pc, #212]	; (800878c <HAL_DMA_IRQHandler+0xe34>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d022      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a33      	ldr	r2, [pc, #204]	; (8008790 <HAL_DMA_IRQHandler+0xe38>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d01d      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a32      	ldr	r2, [pc, #200]	; (8008794 <HAL_DMA_IRQHandler+0xe3c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d018      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a30      	ldr	r2, [pc, #192]	; (8008798 <HAL_DMA_IRQHandler+0xe40>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a2f      	ldr	r2, [pc, #188]	; (800879c <HAL_DMA_IRQHandler+0xe44>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00e      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a2d      	ldr	r2, [pc, #180]	; (80087a0 <HAL_DMA_IRQHandler+0xe48>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d009      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a2c      	ldr	r2, [pc, #176]	; (80087a4 <HAL_DMA_IRQHandler+0xe4c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d004      	beq.n	8008702 <HAL_DMA_IRQHandler+0xdaa>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <HAL_DMA_IRQHandler+0xe50>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d108      	bne.n	8008714 <HAL_DMA_IRQHandler+0xdbc>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 021c 	bic.w	r2, r2, #28
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e007      	b.n	8008724 <HAL_DMA_IRQHandler+0xdcc>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 020e 	bic.w	r2, r2, #14
 8008722:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2201      	movs	r2, #1
 800872e:	409a      	lsls	r2, r3
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
 800875a:	e004      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800875c:	bf00      	nop
 800875e:	e002      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008760:	bf00      	nop
 8008762:	e000      	b.n	8008766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008764:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008766:	3728      	adds	r7, #40	; 0x28
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40020010 	.word	0x40020010
 8008770:	40020028 	.word	0x40020028
 8008774:	40020040 	.word	0x40020040
 8008778:	40020058 	.word	0x40020058
 800877c:	40020070 	.word	0x40020070
 8008780:	40020088 	.word	0x40020088
 8008784:	400200a0 	.word	0x400200a0
 8008788:	400200b8 	.word	0x400200b8
 800878c:	40020410 	.word	0x40020410
 8008790:	40020428 	.word	0x40020428
 8008794:	40020440 	.word	0x40020440
 8008798:	40020458 	.word	0x40020458
 800879c:	40020470 	.word	0x40020470
 80087a0:	40020488 	.word	0x40020488
 80087a4:	400204a0 	.word	0x400204a0
 80087a8:	400204b8 	.word	0x400204b8

080087ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a7f      	ldr	r2, [pc, #508]	; (80089e0 <DMA_SetConfig+0x21c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d072      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a7d      	ldr	r2, [pc, #500]	; (80089e4 <DMA_SetConfig+0x220>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d06d      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a7c      	ldr	r2, [pc, #496]	; (80089e8 <DMA_SetConfig+0x224>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d068      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a7a      	ldr	r2, [pc, #488]	; (80089ec <DMA_SetConfig+0x228>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d063      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a79      	ldr	r2, [pc, #484]	; (80089f0 <DMA_SetConfig+0x22c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d05e      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a77      	ldr	r2, [pc, #476]	; (80089f4 <DMA_SetConfig+0x230>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d059      	beq.n	80088ce <DMA_SetConfig+0x10a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a76      	ldr	r2, [pc, #472]	; (80089f8 <DMA_SetConfig+0x234>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d054      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a74      	ldr	r2, [pc, #464]	; (80089fc <DMA_SetConfig+0x238>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d04f      	beq.n	80088ce <DMA_SetConfig+0x10a>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a73      	ldr	r2, [pc, #460]	; (8008a00 <DMA_SetConfig+0x23c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d04a      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a71      	ldr	r2, [pc, #452]	; (8008a04 <DMA_SetConfig+0x240>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d045      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a70      	ldr	r2, [pc, #448]	; (8008a08 <DMA_SetConfig+0x244>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d040      	beq.n	80088ce <DMA_SetConfig+0x10a>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a6e      	ldr	r2, [pc, #440]	; (8008a0c <DMA_SetConfig+0x248>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d03b      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a6d      	ldr	r2, [pc, #436]	; (8008a10 <DMA_SetConfig+0x24c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d036      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a6b      	ldr	r2, [pc, #428]	; (8008a14 <DMA_SetConfig+0x250>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d031      	beq.n	80088ce <DMA_SetConfig+0x10a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a6a      	ldr	r2, [pc, #424]	; (8008a18 <DMA_SetConfig+0x254>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d02c      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a68      	ldr	r2, [pc, #416]	; (8008a1c <DMA_SetConfig+0x258>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d027      	beq.n	80088ce <DMA_SetConfig+0x10a>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a67      	ldr	r2, [pc, #412]	; (8008a20 <DMA_SetConfig+0x25c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d022      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a65      	ldr	r2, [pc, #404]	; (8008a24 <DMA_SetConfig+0x260>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01d      	beq.n	80088ce <DMA_SetConfig+0x10a>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a64      	ldr	r2, [pc, #400]	; (8008a28 <DMA_SetConfig+0x264>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d018      	beq.n	80088ce <DMA_SetConfig+0x10a>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a62      	ldr	r2, [pc, #392]	; (8008a2c <DMA_SetConfig+0x268>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d013      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a61      	ldr	r2, [pc, #388]	; (8008a30 <DMA_SetConfig+0x26c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00e      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a5f      	ldr	r2, [pc, #380]	; (8008a34 <DMA_SetConfig+0x270>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d009      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a5e      	ldr	r2, [pc, #376]	; (8008a38 <DMA_SetConfig+0x274>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d004      	beq.n	80088ce <DMA_SetConfig+0x10a>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a5c      	ldr	r2, [pc, #368]	; (8008a3c <DMA_SetConfig+0x278>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d101      	bne.n	80088d2 <DMA_SetConfig+0x10e>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <DMA_SetConfig+0x110>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00d      	beq.n	80088f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a39      	ldr	r2, [pc, #228]	; (80089e0 <DMA_SetConfig+0x21c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d04a      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a38      	ldr	r2, [pc, #224]	; (80089e4 <DMA_SetConfig+0x220>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d045      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a36      	ldr	r2, [pc, #216]	; (80089e8 <DMA_SetConfig+0x224>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d040      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a35      	ldr	r2, [pc, #212]	; (80089ec <DMA_SetConfig+0x228>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d03b      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a33      	ldr	r2, [pc, #204]	; (80089f0 <DMA_SetConfig+0x22c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d036      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a32      	ldr	r2, [pc, #200]	; (80089f4 <DMA_SetConfig+0x230>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d031      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a30      	ldr	r2, [pc, #192]	; (80089f8 <DMA_SetConfig+0x234>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d02c      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a2f      	ldr	r2, [pc, #188]	; (80089fc <DMA_SetConfig+0x238>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d027      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a2d      	ldr	r2, [pc, #180]	; (8008a00 <DMA_SetConfig+0x23c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d022      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a2c      	ldr	r2, [pc, #176]	; (8008a04 <DMA_SetConfig+0x240>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d01d      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2a      	ldr	r2, [pc, #168]	; (8008a08 <DMA_SetConfig+0x244>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d018      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <DMA_SetConfig+0x248>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d013      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <DMA_SetConfig+0x24c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00e      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <DMA_SetConfig+0x250>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d009      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a24      	ldr	r2, [pc, #144]	; (8008a18 <DMA_SetConfig+0x254>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <DMA_SetConfig+0x1d0>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a23      	ldr	r2, [pc, #140]	; (8008a1c <DMA_SetConfig+0x258>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d101      	bne.n	8008998 <DMA_SetConfig+0x1d4>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <DMA_SetConfig+0x1d6>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d059      	beq.n	8008a52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	223f      	movs	r2, #63	; 0x3f
 80089a8:	409a      	lsls	r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d138      	bne.n	8008a40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089de:	e086      	b.n	8008aee <DMA_SetConfig+0x32a>
 80089e0:	40020010 	.word	0x40020010
 80089e4:	40020028 	.word	0x40020028
 80089e8:	40020040 	.word	0x40020040
 80089ec:	40020058 	.word	0x40020058
 80089f0:	40020070 	.word	0x40020070
 80089f4:	40020088 	.word	0x40020088
 80089f8:	400200a0 	.word	0x400200a0
 80089fc:	400200b8 	.word	0x400200b8
 8008a00:	40020410 	.word	0x40020410
 8008a04:	40020428 	.word	0x40020428
 8008a08:	40020440 	.word	0x40020440
 8008a0c:	40020458 	.word	0x40020458
 8008a10:	40020470 	.word	0x40020470
 8008a14:	40020488 	.word	0x40020488
 8008a18:	400204a0 	.word	0x400204a0
 8008a1c:	400204b8 	.word	0x400204b8
 8008a20:	58025408 	.word	0x58025408
 8008a24:	5802541c 	.word	0x5802541c
 8008a28:	58025430 	.word	0x58025430
 8008a2c:	58025444 	.word	0x58025444
 8008a30:	58025458 	.word	0x58025458
 8008a34:	5802546c 	.word	0x5802546c
 8008a38:	58025480 	.word	0x58025480
 8008a3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	60da      	str	r2, [r3, #12]
}
 8008a50:	e04d      	b.n	8008aee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a29      	ldr	r2, [pc, #164]	; (8008afc <DMA_SetConfig+0x338>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d022      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a27      	ldr	r2, [pc, #156]	; (8008b00 <DMA_SetConfig+0x33c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d01d      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <DMA_SetConfig+0x340>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d018      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <DMA_SetConfig+0x344>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d013      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a23      	ldr	r2, [pc, #140]	; (8008b0c <DMA_SetConfig+0x348>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00e      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <DMA_SetConfig+0x34c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d009      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a20      	ldr	r2, [pc, #128]	; (8008b14 <DMA_SetConfig+0x350>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <DMA_SetConfig+0x2de>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <DMA_SetConfig+0x354>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d101      	bne.n	8008aa6 <DMA_SetConfig+0x2e2>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e000      	b.n	8008aa8 <DMA_SetConfig+0x2e4>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d020      	beq.n	8008aee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab0:	f003 031f 	and.w	r3, r3, #31
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	409a      	lsls	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b40      	cmp	r3, #64	; 0x40
 8008aca:	d108      	bne.n	8008ade <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	60da      	str	r2, [r3, #12]
}
 8008adc:	e007      	b.n	8008aee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	60da      	str	r2, [r3, #12]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	58025408 	.word	0x58025408
 8008b00:	5802541c 	.word	0x5802541c
 8008b04:	58025430 	.word	0x58025430
 8008b08:	58025444 	.word	0x58025444
 8008b0c:	58025458 	.word	0x58025458
 8008b10:	5802546c 	.word	0x5802546c
 8008b14:	58025480 	.word	0x58025480
 8008b18:	58025494 	.word	0x58025494

08008b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a42      	ldr	r2, [pc, #264]	; (8008c34 <DMA_CalcBaseAndBitshift+0x118>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d04a      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a41      	ldr	r2, [pc, #260]	; (8008c38 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d045      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a3f      	ldr	r2, [pc, #252]	; (8008c3c <DMA_CalcBaseAndBitshift+0x120>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d040      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a3e      	ldr	r2, [pc, #248]	; (8008c40 <DMA_CalcBaseAndBitshift+0x124>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d03b      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a3c      	ldr	r2, [pc, #240]	; (8008c44 <DMA_CalcBaseAndBitshift+0x128>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d036      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3b      	ldr	r2, [pc, #236]	; (8008c48 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d031      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a39      	ldr	r2, [pc, #228]	; (8008c4c <DMA_CalcBaseAndBitshift+0x130>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02c      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a38      	ldr	r2, [pc, #224]	; (8008c50 <DMA_CalcBaseAndBitshift+0x134>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d027      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a36      	ldr	r2, [pc, #216]	; (8008c54 <DMA_CalcBaseAndBitshift+0x138>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d022      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a35      	ldr	r2, [pc, #212]	; (8008c58 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d01d      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a33      	ldr	r2, [pc, #204]	; (8008c5c <DMA_CalcBaseAndBitshift+0x140>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a32      	ldr	r2, [pc, #200]	; (8008c60 <DMA_CalcBaseAndBitshift+0x144>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a30      	ldr	r2, [pc, #192]	; (8008c64 <DMA_CalcBaseAndBitshift+0x148>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a2f      	ldr	r2, [pc, #188]	; (8008c68 <DMA_CalcBaseAndBitshift+0x14c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a2d      	ldr	r2, [pc, #180]	; (8008c6c <DMA_CalcBaseAndBitshift+0x150>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a2c      	ldr	r2, [pc, #176]	; (8008c70 <DMA_CalcBaseAndBitshift+0x154>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d101      	bne.n	8008bc8 <DMA_CalcBaseAndBitshift+0xac>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <DMA_CalcBaseAndBitshift+0xae>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d024      	beq.n	8008c18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	3b10      	subs	r3, #16
 8008bd6:	4a27      	ldr	r2, [pc, #156]	; (8008c74 <DMA_CalcBaseAndBitshift+0x158>)
 8008bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	4a24      	ldr	r2, [pc, #144]	; (8008c78 <DMA_CalcBaseAndBitshift+0x15c>)
 8008be8:	5cd3      	ldrb	r3, [r2, r3]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d908      	bls.n	8008c08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4b1f      	ldr	r3, [pc, #124]	; (8008c7c <DMA_CalcBaseAndBitshift+0x160>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	1d1a      	adds	r2, r3, #4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	659a      	str	r2, [r3, #88]	; 0x58
 8008c06:	e00d      	b.n	8008c24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <DMA_CalcBaseAndBitshift+0x160>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6593      	str	r3, [r2, #88]	; 0x58
 8008c16:	e005      	b.n	8008c24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	40020010 	.word	0x40020010
 8008c38:	40020028 	.word	0x40020028
 8008c3c:	40020040 	.word	0x40020040
 8008c40:	40020058 	.word	0x40020058
 8008c44:	40020070 	.word	0x40020070
 8008c48:	40020088 	.word	0x40020088
 8008c4c:	400200a0 	.word	0x400200a0
 8008c50:	400200b8 	.word	0x400200b8
 8008c54:	40020410 	.word	0x40020410
 8008c58:	40020428 	.word	0x40020428
 8008c5c:	40020440 	.word	0x40020440
 8008c60:	40020458 	.word	0x40020458
 8008c64:	40020470 	.word	0x40020470
 8008c68:	40020488 	.word	0x40020488
 8008c6c:	400204a0 	.word	0x400204a0
 8008c70:	400204b8 	.word	0x400204b8
 8008c74:	aaaaaaab 	.word	0xaaaaaaab
 8008c78:	080170b4 	.word	0x080170b4
 8008c7c:	fffffc00 	.word	0xfffffc00

08008c80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d120      	bne.n	8008cd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d858      	bhi.n	8008d4e <DMA_CheckFifoParam+0xce>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <DMA_CheckFifoParam+0x24>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cc7 	.word	0x08008cc7
 8008cac:	08008cb5 	.word	0x08008cb5
 8008cb0:	08008d4f 	.word	0x08008d4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d048      	beq.n	8008d52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cc4:	e045      	b.n	8008d52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cce:	d142      	bne.n	8008d56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cd4:	e03f      	b.n	8008d56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cde:	d123      	bne.n	8008d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d838      	bhi.n	8008d5a <DMA_CheckFifoParam+0xda>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <DMA_CheckFifoParam+0x70>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d01 	.word	0x08008d01
 8008cf4:	08008d07 	.word	0x08008d07
 8008cf8:	08008d01 	.word	0x08008d01
 8008cfc:	08008d19 	.word	0x08008d19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
        break;
 8008d04:	e030      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d025      	beq.n	8008d5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d16:	e022      	b.n	8008d5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d20:	d11f      	bne.n	8008d62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d26:	e01c      	b.n	8008d62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d902      	bls.n	8008d36 <DMA_CheckFifoParam+0xb6>
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d003      	beq.n	8008d3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d34:	e018      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	73fb      	strb	r3, [r7, #15]
        break;
 8008d3a:	e015      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00e      	beq.n	8008d66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4c:	e00b      	b.n	8008d66 <DMA_CheckFifoParam+0xe6>
        break;
 8008d4e:	bf00      	nop
 8008d50:	e00a      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        break;
 8008d52:	bf00      	nop
 8008d54:	e008      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        break;
 8008d56:	bf00      	nop
 8008d58:	e006      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        break;
 8008d5a:	bf00      	nop
 8008d5c:	e004      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        break;
 8008d5e:	bf00      	nop
 8008d60:	e002      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
        break;
 8008d62:	bf00      	nop
 8008d64:	e000      	b.n	8008d68 <DMA_CheckFifoParam+0xe8>
    break;
 8008d66:	bf00      	nop
    }
  }

  return status;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop

08008d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a38      	ldr	r2, [pc, #224]	; (8008e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d022      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a36      	ldr	r2, [pc, #216]	; (8008e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01d      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a35      	ldr	r2, [pc, #212]	; (8008e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d018      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a33      	ldr	r2, [pc, #204]	; (8008e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d013      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a32      	ldr	r2, [pc, #200]	; (8008e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00e      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a30      	ldr	r2, [pc, #192]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d009      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a2f      	ldr	r2, [pc, #188]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d004      	beq.n	8008dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a2d      	ldr	r2, [pc, #180]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d101      	bne.n	8008dda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e000      	b.n	8008ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01a      	beq.n	8008e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	3b08      	subs	r3, #8
 8008de8:	4a28      	ldr	r2, [pc, #160]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	091b      	lsrs	r3, r3, #4
 8008df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a24      	ldr	r2, [pc, #144]	; (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f003 031f 	and.w	r3, r3, #31
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	409a      	lsls	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e14:	e024      	b.n	8008e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	3b10      	subs	r3, #16
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	091b      	lsrs	r3, r3, #4
 8008e26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	; (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d806      	bhi.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4a1b      	ldr	r2, [pc, #108]	; (8008ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d902      	bls.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4b18      	ldr	r3, [pc, #96]	; (8008ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	461a      	mov	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a16      	ldr	r2, [pc, #88]	; (8008ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	2201      	movs	r2, #1
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	58025408 	.word	0x58025408
 8008e70:	5802541c 	.word	0x5802541c
 8008e74:	58025430 	.word	0x58025430
 8008e78:	58025444 	.word	0x58025444
 8008e7c:	58025458 	.word	0x58025458
 8008e80:	5802546c 	.word	0x5802546c
 8008e84:	58025480 	.word	0x58025480
 8008e88:	58025494 	.word	0x58025494
 8008e8c:	cccccccd 	.word	0xcccccccd
 8008e90:	16009600 	.word	0x16009600
 8008e94:	58025880 	.word	0x58025880
 8008e98:	aaaaaaab 	.word	0xaaaaaaab
 8008e9c:	400204b8 	.word	0x400204b8
 8008ea0:	4002040f 	.word	0x4002040f
 8008ea4:	10008200 	.word	0x10008200
 8008ea8:	40020880 	.word	0x40020880

08008eac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04a      	beq.n	8008f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	d847      	bhi.n	8008f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a25      	ldr	r2, [pc, #148]	; (8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d022      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a24      	ldr	r2, [pc, #144]	; (8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d01d      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d018      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a21      	ldr	r2, [pc, #132]	; (8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1f      	ldr	r2, [pc, #124]	; (8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00e      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d009      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1c      	ldr	r2, [pc, #112]	; (8008f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d004      	beq.n	8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d101      	bne.n	8008f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	4b17      	ldr	r3, [pc, #92]	; (8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f34:	671a      	str	r2, [r3, #112]	; 0x70
 8008f36:	e009      	b.n	8008f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	461a      	mov	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a11      	ldr	r2, [pc, #68]	; (8008f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2201      	movs	r2, #1
 8008f52:	409a      	lsls	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f58:	bf00      	nop
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	58025408 	.word	0x58025408
 8008f68:	5802541c 	.word	0x5802541c
 8008f6c:	58025430 	.word	0x58025430
 8008f70:	58025444 	.word	0x58025444
 8008f74:	58025458 	.word	0x58025458
 8008f78:	5802546c 	.word	0x5802546c
 8008f7c:	58025480 	.word	0x58025480
 8008f80:	58025494 	.word	0x58025494
 8008f84:	1600963f 	.word	0x1600963f
 8008f88:	58025940 	.word	0x58025940
 8008f8c:	1000823f 	.word	0x1000823f
 8008f90:	40020940 	.word	0x40020940

08008f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b089      	sub	sp, #36	; 0x24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fa2:	4b89      	ldr	r3, [pc, #548]	; (80091c8 <HAL_GPIO_Init+0x234>)
 8008fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fa6:	e194      	b.n	80092d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	2101      	movs	r1, #1
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 8186 	beq.w	80092cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f003 0303 	and.w	r3, r3, #3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d005      	beq.n	8008fd8 <HAL_GPIO_Init+0x44>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d130      	bne.n	800903a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	2203      	movs	r2, #3
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	4013      	ands	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800900e:	2201      	movs	r2, #1
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	fa02 f303 	lsl.w	r3, r2, r3
 8009016:	43db      	mvns	r3, r3
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	4013      	ands	r3, r2
 800901c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	091b      	lsrs	r3, r3, #4
 8009024:	f003 0201 	and.w	r2, r3, #1
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	fa02 f303 	lsl.w	r3, r2, r3
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	4313      	orrs	r3, r2
 8009032:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	2b03      	cmp	r3, #3
 8009044:	d017      	beq.n	8009076 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	2203      	movs	r2, #3
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	43db      	mvns	r3, r3
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	4013      	ands	r3, r2
 800905c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	fa02 f303 	lsl.w	r3, r2, r3
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	4313      	orrs	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	2b02      	cmp	r3, #2
 8009080:	d123      	bne.n	80090ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	08da      	lsrs	r2, r3, #3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3208      	adds	r2, #8
 800908a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	220f      	movs	r2, #15
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	43db      	mvns	r3, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	4013      	ands	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	08da      	lsrs	r2, r3, #3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3208      	adds	r2, #8
 80090c4:	69b9      	ldr	r1, [r7, #24]
 80090c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	2203      	movs	r2, #3
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	43db      	mvns	r3, r3
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	4013      	ands	r3, r2
 80090e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f003 0203 	and.w	r2, r3, #3
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	fa02 f303 	lsl.w	r3, r2, r3
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 80e0 	beq.w	80092cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800910c:	4b2f      	ldr	r3, [pc, #188]	; (80091cc <HAL_GPIO_Init+0x238>)
 800910e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009112:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <HAL_GPIO_Init+0x238>)
 8009114:	f043 0302 	orr.w	r3, r3, #2
 8009118:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800911c:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <HAL_GPIO_Init+0x238>)
 800911e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800912a:	4a29      	ldr	r2, [pc, #164]	; (80091d0 <HAL_GPIO_Init+0x23c>)
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	089b      	lsrs	r3, r3, #2
 8009130:	3302      	adds	r3, #2
 8009132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	220f      	movs	r2, #15
 8009142:	fa02 f303 	lsl.w	r3, r2, r3
 8009146:	43db      	mvns	r3, r3
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	4013      	ands	r3, r2
 800914c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a20      	ldr	r2, [pc, #128]	; (80091d4 <HAL_GPIO_Init+0x240>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d052      	beq.n	80091fc <HAL_GPIO_Init+0x268>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a1f      	ldr	r2, [pc, #124]	; (80091d8 <HAL_GPIO_Init+0x244>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d031      	beq.n	80091c2 <HAL_GPIO_Init+0x22e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a1e      	ldr	r2, [pc, #120]	; (80091dc <HAL_GPIO_Init+0x248>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d02b      	beq.n	80091be <HAL_GPIO_Init+0x22a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1d      	ldr	r2, [pc, #116]	; (80091e0 <HAL_GPIO_Init+0x24c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d025      	beq.n	80091ba <HAL_GPIO_Init+0x226>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1c      	ldr	r2, [pc, #112]	; (80091e4 <HAL_GPIO_Init+0x250>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d01f      	beq.n	80091b6 <HAL_GPIO_Init+0x222>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <HAL_GPIO_Init+0x254>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d019      	beq.n	80091b2 <HAL_GPIO_Init+0x21e>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1a      	ldr	r2, [pc, #104]	; (80091ec <HAL_GPIO_Init+0x258>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d013      	beq.n	80091ae <HAL_GPIO_Init+0x21a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a19      	ldr	r2, [pc, #100]	; (80091f0 <HAL_GPIO_Init+0x25c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00d      	beq.n	80091aa <HAL_GPIO_Init+0x216>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a18      	ldr	r2, [pc, #96]	; (80091f4 <HAL_GPIO_Init+0x260>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d007      	beq.n	80091a6 <HAL_GPIO_Init+0x212>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a17      	ldr	r2, [pc, #92]	; (80091f8 <HAL_GPIO_Init+0x264>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d101      	bne.n	80091a2 <HAL_GPIO_Init+0x20e>
 800919e:	2309      	movs	r3, #9
 80091a0:	e02d      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091a2:	230a      	movs	r3, #10
 80091a4:	e02b      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091a6:	2308      	movs	r3, #8
 80091a8:	e029      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091aa:	2307      	movs	r3, #7
 80091ac:	e027      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091ae:	2306      	movs	r3, #6
 80091b0:	e025      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091b2:	2305      	movs	r3, #5
 80091b4:	e023      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091b6:	2304      	movs	r3, #4
 80091b8:	e021      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091ba:	2303      	movs	r3, #3
 80091bc:	e01f      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091be:	2302      	movs	r3, #2
 80091c0:	e01d      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e01b      	b.n	80091fe <HAL_GPIO_Init+0x26a>
 80091c6:	bf00      	nop
 80091c8:	58000080 	.word	0x58000080
 80091cc:	58024400 	.word	0x58024400
 80091d0:	58000400 	.word	0x58000400
 80091d4:	58020000 	.word	0x58020000
 80091d8:	58020400 	.word	0x58020400
 80091dc:	58020800 	.word	0x58020800
 80091e0:	58020c00 	.word	0x58020c00
 80091e4:	58021000 	.word	0x58021000
 80091e8:	58021400 	.word	0x58021400
 80091ec:	58021800 	.word	0x58021800
 80091f0:	58021c00 	.word	0x58021c00
 80091f4:	58022000 	.word	0x58022000
 80091f8:	58022400 	.word	0x58022400
 80091fc:	2300      	movs	r3, #0
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	f002 0203 	and.w	r2, r2, #3
 8009204:	0092      	lsls	r2, r2, #2
 8009206:	4093      	lsls	r3, r2
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	4313      	orrs	r3, r2
 800920c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800920e:	4938      	ldr	r1, [pc, #224]	; (80092f0 <HAL_GPIO_Init+0x35c>)
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	089b      	lsrs	r3, r3, #2
 8009214:	3302      	adds	r3, #2
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800921c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	43db      	mvns	r3, r3
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	4013      	ands	r3, r2
 800922c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800924a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	43db      	mvns	r3, r3
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	4013      	ands	r3, r2
 800925a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	43db      	mvns	r3, r3
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	4013      	ands	r3, r2
 8009286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	43db      	mvns	r3, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	4013      	ands	r3, r2
 80092b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	3301      	adds	r3, #1
 80092d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f47f ae63 	bne.w	8008fa8 <HAL_GPIO_Init+0x14>
  }
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	3724      	adds	r7, #36	; 0x24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	58000400 	.word	0x58000400

080092f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	887b      	ldrh	r3, [r7, #2]
 8009306:	4013      	ands	r3, r2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800930c:	2301      	movs	r3, #1
 800930e:	73fb      	strb	r3, [r7, #15]
 8009310:	e001      	b.n	8009316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	807b      	strh	r3, [r7, #2]
 8009330:	4613      	mov	r3, r2
 8009332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009334:	787b      	ldrb	r3, [r7, #1]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800933a:	887a      	ldrh	r2, [r7, #2]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009340:	e003      	b.n	800934a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	041a      	lsls	r2, r3, #16
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	619a      	str	r2, [r3, #24]
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
	...

08009358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e08b      	b.n	8009482 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7f8 f818 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2224      	movs	r2, #36	; 0x24
 8009388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0201 	bic.w	r2, r2, #1
 800939a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d107      	bne.n	80093d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093ce:	609a      	str	r2, [r3, #8]
 80093d0:	e006      	b.n	80093e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80093de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d108      	bne.n	80093fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093f6:	605a      	str	r2, [r3, #4]
 80093f8:	e007      	b.n	800940a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6859      	ldr	r1, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	4b1d      	ldr	r3, [pc, #116]	; (800948c <HAL_I2C_Init+0x134>)
 8009416:	430b      	orrs	r3, r1
 8009418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691a      	ldr	r2, [r3, #16]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	69d9      	ldr	r1, [r3, #28]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1a      	ldr	r2, [r3, #32]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f042 0201 	orr.w	r2, r2, #1
 8009462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	02008000 	.word	0x02008000

08009490 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	461a      	mov	r2, r3
 800949c:	460b      	mov	r3, r1
 800949e:	817b      	strh	r3, [r7, #10]
 80094a0:	4613      	mov	r3, r2
 80094a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	f040 80fd 	bne.w	80096ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d101      	bne.n	80094c0 <HAL_I2C_Master_Transmit+0x30>
 80094bc:	2302      	movs	r3, #2
 80094be:	e0f6      	b.n	80096ae <HAL_I2C_Master_Transmit+0x21e>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094c8:	f7fa fdf4 	bl	80040b4 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	2319      	movs	r3, #25
 80094d4:	2201      	movs	r2, #1
 80094d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fa0a 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e0e1      	b.n	80096ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2221      	movs	r2, #33	; 0x21
 80094ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2210      	movs	r2, #16
 80094f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	893a      	ldrh	r2, [r7, #8]
 800950a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009516:	b29b      	uxth	r3, r3
 8009518:	2bff      	cmp	r3, #255	; 0xff
 800951a:	d906      	bls.n	800952a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	22ff      	movs	r2, #255	; 0xff
 8009520:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e007      	b.n	800953a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009538:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d024      	beq.n	800958c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	781a      	ldrb	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800955c:	b29b      	uxth	r3, r3
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956a:	3b01      	subs	r3, #1
 800956c:	b29a      	uxth	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009576:	b2db      	uxtb	r3, r3
 8009578:	3301      	adds	r3, #1
 800957a:	b2da      	uxtb	r2, r3
 800957c:	8979      	ldrh	r1, [r7, #10]
 800957e:	4b4e      	ldr	r3, [pc, #312]	; (80096b8 <HAL_I2C_Master_Transmit+0x228>)
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fc05 	bl	8009d94 <I2C_TransferConfig>
 800958a:	e066      	b.n	800965a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009590:	b2da      	uxtb	r2, r3
 8009592:	8979      	ldrh	r1, [r7, #10]
 8009594:	4b48      	ldr	r3, [pc, #288]	; (80096b8 <HAL_I2C_Master_Transmit+0x228>)
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fbfa 	bl	8009d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80095a0:	e05b      	b.n	800965a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	6a39      	ldr	r1, [r7, #32]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 f9fd 	bl	80099a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e07b      	b.n	80096ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d034      	beq.n	800965a <HAL_I2C_Master_Transmit+0x1ca>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d130      	bne.n	800965a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2200      	movs	r2, #0
 8009600:	2180      	movs	r1, #128	; 0x80
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 f976 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e04d      	b.n	80096ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	2bff      	cmp	r3, #255	; 0xff
 800961a:	d90e      	bls.n	800963a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	22ff      	movs	r2, #255	; 0xff
 8009620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009626:	b2da      	uxtb	r2, r3
 8009628:	8979      	ldrh	r1, [r7, #10]
 800962a:	2300      	movs	r3, #0
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fbae 	bl	8009d94 <I2C_TransferConfig>
 8009638:	e00f      	b.n	800965a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	b2da      	uxtb	r2, r3
 800964a:	8979      	ldrh	r1, [r7, #10]
 800964c:	2300      	movs	r3, #0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 fb9d 	bl	8009d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800965e:	b29b      	uxth	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d19e      	bne.n	80095a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	6a39      	ldr	r1, [r7, #32]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f9e3 	bl	8009a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e01a      	b.n	80096ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2220      	movs	r2, #32
 800967e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6859      	ldr	r1, [r3, #4]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <HAL_I2C_Master_Transmit+0x22c>)
 800968c:	400b      	ands	r3, r1
 800968e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2220      	movs	r2, #32
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	e000      	b.n	80096ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80096ac:	2302      	movs	r3, #2
  }
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	80002000 	.word	0x80002000
 80096bc:	fe00e800 	.word	0xfe00e800

080096c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	607a      	str	r2, [r7, #4]
 80096ca:	461a      	mov	r2, r3
 80096cc:	460b      	mov	r3, r1
 80096ce:	817b      	strh	r3, [r7, #10]
 80096d0:	4613      	mov	r3, r2
 80096d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b20      	cmp	r3, #32
 80096de:	f040 80db 	bne.w	8009898 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <HAL_I2C_Master_Receive+0x30>
 80096ec:	2302      	movs	r3, #2
 80096ee:	e0d4      	b.n	800989a <HAL_I2C_Master_Receive+0x1da>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096f8:	f7fa fcdc 	bl	80040b4 <HAL_GetTick>
 80096fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	2319      	movs	r3, #25
 8009704:	2201      	movs	r2, #1
 8009706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f8f2 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e0bf      	b.n	800989a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2222      	movs	r2, #34	; 0x22
 800971e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2210      	movs	r2, #16
 8009726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	893a      	ldrh	r2, [r7, #8]
 800973a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009746:	b29b      	uxth	r3, r3
 8009748:	2bff      	cmp	r3, #255	; 0xff
 800974a:	d90e      	bls.n	800976a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	22ff      	movs	r2, #255	; 0xff
 8009750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009756:	b2da      	uxtb	r2, r3
 8009758:	8979      	ldrh	r1, [r7, #10]
 800975a:	4b52      	ldr	r3, [pc, #328]	; (80098a4 <HAL_I2C_Master_Receive+0x1e4>)
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fb16 	bl	8009d94 <I2C_TransferConfig>
 8009768:	e06d      	b.n	8009846 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976e:	b29a      	uxth	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009778:	b2da      	uxtb	r2, r3
 800977a:	8979      	ldrh	r1, [r7, #10]
 800977c:	4b49      	ldr	r3, [pc, #292]	; (80098a4 <HAL_I2C_Master_Receive+0x1e4>)
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 fb05 	bl	8009d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800978a:	e05c      	b.n	8009846 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	6a39      	ldr	r1, [r7, #32]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 f993 	bl	8009abc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e07c      	b.n	800989a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097bc:	3b01      	subs	r3, #1
 80097be:	b29a      	uxth	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d034      	beq.n	8009846 <HAL_I2C_Master_Receive+0x186>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d130      	bne.n	8009846 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2200      	movs	r2, #0
 80097ec:	2180      	movs	r1, #128	; 0x80
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 f880 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e04d      	b.n	800989a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009802:	b29b      	uxth	r3, r3
 8009804:	2bff      	cmp	r3, #255	; 0xff
 8009806:	d90e      	bls.n	8009826 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	22ff      	movs	r2, #255	; 0xff
 800980c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009812:	b2da      	uxtb	r2, r3
 8009814:	8979      	ldrh	r1, [r7, #10]
 8009816:	2300      	movs	r3, #0
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fab8 	bl	8009d94 <I2C_TransferConfig>
 8009824:	e00f      	b.n	8009846 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982a:	b29a      	uxth	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009834:	b2da      	uxtb	r2, r3
 8009836:	8979      	ldrh	r1, [r7, #10]
 8009838:	2300      	movs	r3, #0
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 faa7 	bl	8009d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d19d      	bne.n	800978c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	6a39      	ldr	r1, [r7, #32]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f8ed 	bl	8009a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e01a      	b.n	800989a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2220      	movs	r2, #32
 800986a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6859      	ldr	r1, [r3, #4]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <HAL_I2C_Master_Receive+0x1e8>)
 8009878:	400b      	ands	r3, r1
 800987a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	e000      	b.n	800989a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009898:	2302      	movs	r3, #2
  }
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	80002400 	.word	0x80002400
 80098a8:	fe00e800 	.word	0xfe00e800

080098ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d103      	bne.n	80098ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d007      	beq.n	80098e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	619a      	str	r2, [r3, #24]
  }
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009904:	e03b      	b.n	800997e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009906:	69ba      	ldr	r2, [r7, #24]
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f962 	bl	8009bd4 <I2C_IsErrorOccurred>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e041      	b.n	800999e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009920:	d02d      	beq.n	800997e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009922:	f7fa fbc7 	bl	80040b4 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d302      	bcc.n	8009938 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d122      	bne.n	800997e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4013      	ands	r3, r2
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	429a      	cmp	r2, r3
 8009946:	bf0c      	ite	eq
 8009948:	2301      	moveq	r3, #1
 800994a:	2300      	movne	r3, #0
 800994c:	b2db      	uxtb	r3, r3
 800994e:	461a      	mov	r2, r3
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	429a      	cmp	r2, r3
 8009954:	d113      	bne.n	800997e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995a:	f043 0220 	orr.w	r2, r3, #32
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2220      	movs	r2, #32
 8009966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e00f      	b.n	800999e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	699a      	ldr	r2, [r3, #24]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4013      	ands	r3, r2
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	429a      	cmp	r2, r3
 800998c:	bf0c      	ite	eq
 800998e:	2301      	moveq	r3, #1
 8009990:	2300      	movne	r3, #0
 8009992:	b2db      	uxtb	r3, r3
 8009994:	461a      	mov	r2, r3
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	429a      	cmp	r2, r3
 800999a:	d0b4      	beq.n	8009906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099b2:	e033      	b.n	8009a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f90b 	bl	8009bd4 <I2C_IsErrorOccurred>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e031      	b.n	8009a2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ce:	d025      	beq.n	8009a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d0:	f7fa fb70 	bl	80040b4 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d302      	bcc.n	80099e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d11a      	bne.n	8009a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	f003 0302 	and.w	r3, r3, #2
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d013      	beq.n	8009a1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f8:	f043 0220 	orr.w	r2, r3, #32
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e007      	b.n	8009a2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d1c4      	bne.n	80099b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a40:	e02f      	b.n	8009aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f8c4 	bl	8009bd4 <I2C_IsErrorOccurred>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e02d      	b.n	8009ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a56:	f7fa fb2d 	bl	80040b4 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d302      	bcc.n	8009a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11a      	bne.n	8009aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d013      	beq.n	8009aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	f043 0220 	orr.w	r2, r3, #32
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e007      	b.n	8009ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d1c8      	bne.n	8009a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009acc:	e071      	b.n	8009bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f87e 	bl	8009bd4 <I2C_IsErrorOccurred>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	f003 0320 	and.w	r3, r3, #32
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d13b      	bne.n	8009b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d138      	bne.n	8009b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d105      	bne.n	8009b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	f003 0310 	and.w	r3, r3, #16
 8009b1a:	2b10      	cmp	r3, #16
 8009b1c:	d121      	bne.n	8009b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2210      	movs	r2, #16
 8009b24:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2220      	movs	r2, #32
 8009b32:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6859      	ldr	r1, [r3, #4]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	4b24      	ldr	r3, [pc, #144]	; (8009bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009b40:	400b      	ands	r3, r1
 8009b42:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	75fb      	strb	r3, [r7, #23]
 8009b60:	e002      	b.n	8009b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009b68:	f7fa faa4 	bl	80040b4 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d302      	bcc.n	8009b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d119      	bne.n	8009bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d116      	bne.n	8009bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d00f      	beq.n	8009bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b96:	f043 0220 	orr.w	r2, r3, #32
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d002      	beq.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d083      	beq.n	8009ace <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	fe00e800 	.word	0xfe00e800

08009bd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08a      	sub	sp, #40	; 0x28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d068      	beq.n	8009cd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2210      	movs	r2, #16
 8009c06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c08:	e049      	b.n	8009c9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c10:	d045      	beq.n	8009c9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c12:	f7fa fa4f 	bl	80040b4 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d302      	bcc.n	8009c28 <I2C_IsErrorOccurred+0x54>
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d13a      	bne.n	8009c9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c4a:	d121      	bne.n	8009c90 <I2C_IsErrorOccurred+0xbc>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c52:	d01d      	beq.n	8009c90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c54:	7cfb      	ldrb	r3, [r7, #19]
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d01a      	beq.n	8009c90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c6a:	f7fa fa23 	bl	80040b4 <HAL_GetTick>
 8009c6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c70:	e00e      	b.n	8009c90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c72:	f7fa fa1f 	bl	80040b4 <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b19      	cmp	r3, #25
 8009c7e:	d907      	bls.n	8009c90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	f043 0320 	orr.w	r3, r3, #32
 8009c86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c8e:	e006      	b.n	8009c9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d1e9      	bne.n	8009c72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f003 0320 	and.w	r3, r3, #32
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d003      	beq.n	8009cb4 <I2C_IsErrorOccurred+0xe0>
 8009cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0aa      	beq.n	8009c0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	f043 0304 	orr.w	r3, r3, #4
 8009cca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	f043 0308 	orr.w	r3, r3, #8
 8009d0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00b      	beq.n	8009d40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	f043 0302 	orr.w	r3, r3, #2
 8009d2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01c      	beq.n	8009d82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff fdaf 	bl	80098ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6859      	ldr	r1, [r3, #4]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <I2C_IsErrorOccurred+0x1bc>)
 8009d5a:	400b      	ands	r3, r1
 8009d5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3728      	adds	r7, #40	; 0x28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	fe00e800 	.word	0xfe00e800

08009d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	607b      	str	r3, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	817b      	strh	r3, [r7, #10]
 8009da2:	4613      	mov	r3, r2
 8009da4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009da6:	897b      	ldrh	r3, [r7, #10]
 8009da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dac:	7a7b      	ldrb	r3, [r7, #9]
 8009dae:	041b      	lsls	r3, r3, #16
 8009db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009db4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	0d5b      	lsrs	r3, r3, #21
 8009dce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009dd2:	4b08      	ldr	r3, [pc, #32]	; (8009df4 <I2C_TransferConfig+0x60>)
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	43db      	mvns	r3, r3
 8009dd8:	ea02 0103 	and.w	r1, r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009de6:	bf00      	nop
 8009de8:	371c      	adds	r7, #28
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	03ff63ff 	.word	0x03ff63ff

08009df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d138      	bne.n	8009e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e032      	b.n	8009e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2224      	movs	r2, #36	; 0x24
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 0201 	bic.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6819      	ldr	r1, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0201 	orr.w	r2, r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	e000      	b.n	8009e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e80:	2302      	movs	r3, #2
  }
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d139      	bne.n	8009f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e033      	b.n	8009f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2224      	movs	r2, #36	; 0x24
 8009ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f022 0201 	bic.w	r2, r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f042 0201 	orr.w	r2, r2, #1
 8009f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	e000      	b.n	8009f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f18:	2302      	movs	r3, #2
  }
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
	...

08009f28 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f30:	4b0d      	ldr	r3, [pc, #52]	; (8009f68 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f36:	4a0c      	ldr	r2, [pc, #48]	; (8009f68 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f38:	f043 0302 	orr.w	r3, r3, #2
 8009f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f40:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009f4e:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	4906      	ldr	r1, [pc, #24]	; (8009f6c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	604b      	str	r3, [r1, #4]
}
 8009f5a:	bf00      	nop
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
 8009f6c:	58000400 	.word	0x58000400

08009f70 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009f7c:	4b18      	ldr	r3, [pc, #96]	; (8009fe0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f023 0201 	bic.w	r2, r3, #1
 8009f84:	4916      	ldr	r1, [pc, #88]	; (8009fe0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009f8c:	4b14      	ldr	r3, [pc, #80]	; (8009fe0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	4a13      	ldr	r2, [pc, #76]	; (8009fe0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f92:	f023 0305 	bic.w	r3, r3, #5
 8009f96:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009f98:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	4a10      	ldr	r2, [pc, #64]	; (8009fe0 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f9e:	f023 0302 	bic.w	r3, r3, #2
 8009fa2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	; (8009fe4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009faa:	f043 0304 	orr.w	r3, r3, #4
 8009fae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fb0:	f3bf 8f4f 	dsb	sy
}
 8009fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fb6:	f3bf 8f6f 	isb	sy
}
 8009fba:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d101      	bne.n	8009fc6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009fc2:	bf30      	wfi
 8009fc4:	e000      	b.n	8009fc8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009fc6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fc8:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	4a05      	ldr	r2, [pc, #20]	; (8009fe4 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fce:	f023 0304 	bic.w	r3, r3, #4
 8009fd2:	6113      	str	r3, [r2, #16]
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	58024800 	.word	0x58024800
 8009fe4:	e000ed00 	.word	0xe000ed00

08009fe8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <HAL_PWREx_ConfigSupply+0x70>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d00a      	beq.n	800a012 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ffc:	4b16      	ldr	r3, [pc, #88]	; (800a058 <HAL_PWREx_ConfigSupply+0x70>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	429a      	cmp	r2, r3
 800a008:	d001      	beq.n	800a00e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e01f      	b.n	800a04e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	e01d      	b.n	800a04e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a012:	4b11      	ldr	r3, [pc, #68]	; (800a058 <HAL_PWREx_ConfigSupply+0x70>)
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	f023 0207 	bic.w	r2, r3, #7
 800a01a:	490f      	ldr	r1, [pc, #60]	; (800a058 <HAL_PWREx_ConfigSupply+0x70>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a022:	f7fa f847 	bl	80040b4 <HAL_GetTick>
 800a026:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a028:	e009      	b.n	800a03e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a02a:	f7fa f843 	bl	80040b4 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a038:	d901      	bls.n	800a03e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e007      	b.n	800a04e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a03e:	4b06      	ldr	r3, [pc, #24]	; (800a058 <HAL_PWREx_ConfigSupply+0x70>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a04a:	d1ee      	bne.n	800a02a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	58024800 	.word	0x58024800

0800a05c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08c      	sub	sp, #48	; 0x30
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	f000 bc48 	b.w	800a900 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 8088 	beq.w	800a18e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a07e:	4b99      	ldr	r3, [pc, #612]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a088:	4b96      	ldr	r3, [pc, #600]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	2b10      	cmp	r3, #16
 800a092:	d007      	beq.n	800a0a4 <HAL_RCC_OscConfig+0x48>
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	2b18      	cmp	r3, #24
 800a098:	d111      	bne.n	800a0be <HAL_RCC_OscConfig+0x62>
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d10c      	bne.n	800a0be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0a4:	4b8f      	ldr	r3, [pc, #572]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d06d      	beq.n	800a18c <HAL_RCC_OscConfig+0x130>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d169      	bne.n	800a18c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f000 bc21 	b.w	800a900 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0c6:	d106      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x7a>
 800a0c8:	4b86      	ldr	r3, [pc, #536]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a85      	ldr	r2, [pc, #532]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	e02e      	b.n	800a134 <HAL_RCC_OscConfig+0xd8>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10c      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x9c>
 800a0de:	4b81      	ldr	r3, [pc, #516]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a80      	ldr	r2, [pc, #512]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	4b7e      	ldr	r3, [pc, #504]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a7d      	ldr	r2, [pc, #500]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a0f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	e01d      	b.n	800a134 <HAL_RCC_OscConfig+0xd8>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a100:	d10c      	bne.n	800a11c <HAL_RCC_OscConfig+0xc0>
 800a102:	4b78      	ldr	r3, [pc, #480]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a77      	ldr	r2, [pc, #476]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	4b75      	ldr	r3, [pc, #468]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a74      	ldr	r2, [pc, #464]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	e00b      	b.n	800a134 <HAL_RCC_OscConfig+0xd8>
 800a11c:	4b71      	ldr	r3, [pc, #452]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a70      	ldr	r2, [pc, #448]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	4b6e      	ldr	r3, [pc, #440]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a6d      	ldr	r2, [pc, #436]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a12e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d013      	beq.n	800a164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a13c:	f7f9 ffba 	bl	80040b4 <HAL_GetTick>
 800a140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a142:	e008      	b.n	800a156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a144:	f7f9 ffb6 	bl	80040b4 <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b64      	cmp	r3, #100	; 0x64
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e3d4      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a156:	4b63      	ldr	r3, [pc, #396]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0f0      	beq.n	800a144 <HAL_RCC_OscConfig+0xe8>
 800a162:	e014      	b.n	800a18e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a164:	f7f9 ffa6 	bl	80040b4 <HAL_GetTick>
 800a168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a16a:	e008      	b.n	800a17e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a16c:	f7f9 ffa2 	bl	80040b4 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b64      	cmp	r3, #100	; 0x64
 800a178:	d901      	bls.n	800a17e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e3c0      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a17e:	4b59      	ldr	r3, [pc, #356]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1f0      	bne.n	800a16c <HAL_RCC_OscConfig+0x110>
 800a18a:	e000      	b.n	800a18e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a18c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 80ca 	beq.w	800a330 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a19c:	4b51      	ldr	r3, [pc, #324]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1a6:	4b4f      	ldr	r3, [pc, #316]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <HAL_RCC_OscConfig+0x166>
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	2b18      	cmp	r3, #24
 800a1b6:	d156      	bne.n	800a266 <HAL_RCC_OscConfig+0x20a>
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d151      	bne.n	800a266 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1c2:	4b48      	ldr	r3, [pc, #288]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <HAL_RCC_OscConfig+0x17e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e392      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1da:	4b42      	ldr	r3, [pc, #264]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f023 0219 	bic.w	r2, r3, #25
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	493f      	ldr	r1, [pc, #252]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ec:	f7f9 ff62 	bl	80040b4 <HAL_GetTick>
 800a1f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1f4:	f7f9 ff5e 	bl	80040b4 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e37c      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a206:	4b37      	ldr	r3, [pc, #220]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0304 	and.w	r3, r3, #4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0f0      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a212:	f7f9 ff5b 	bl	80040cc <HAL_GetREVID>
 800a216:	4603      	mov	r3, r0
 800a218:	f241 0203 	movw	r2, #4099	; 0x1003
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d817      	bhi.n	800a250 <HAL_RCC_OscConfig+0x1f4>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b40      	cmp	r3, #64	; 0x40
 800a226:	d108      	bne.n	800a23a <HAL_RCC_OscConfig+0x1de>
 800a228:	4b2e      	ldr	r3, [pc, #184]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a230:	4a2c      	ldr	r2, [pc, #176]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a236:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a238:	e07a      	b.n	800a330 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a23a:	4b2a      	ldr	r3, [pc, #168]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	031b      	lsls	r3, r3, #12
 800a248:	4926      	ldr	r1, [pc, #152]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a24a:	4313      	orrs	r3, r2
 800a24c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a24e:	e06f      	b.n	800a330 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a250:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	061b      	lsls	r3, r3, #24
 800a25e:	4921      	ldr	r1, [pc, #132]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a260:	4313      	orrs	r3, r2
 800a262:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a264:	e064      	b.n	800a330 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d047      	beq.n	800a2fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a26e:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f023 0219 	bic.w	r2, r3, #25
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	491a      	ldr	r1, [pc, #104]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a280:	f7f9 ff18 	bl	80040b4 <HAL_GetTick>
 800a284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a286:	e008      	b.n	800a29a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a288:	f7f9 ff14 	bl	80040b4 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b02      	cmp	r3, #2
 800a294:	d901      	bls.n	800a29a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e332      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a29a:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0f0      	beq.n	800a288 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2a6:	f7f9 ff11 	bl	80040cc <HAL_GetREVID>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d819      	bhi.n	800a2e8 <HAL_RCC_OscConfig+0x28c>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b40      	cmp	r3, #64	; 0x40
 800a2ba:	d108      	bne.n	800a2ce <HAL_RCC_OscConfig+0x272>
 800a2bc:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2c4:	4a07      	ldr	r2, [pc, #28]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a2c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ca:	6053      	str	r3, [r2, #4]
 800a2cc:	e030      	b.n	800a330 <HAL_RCC_OscConfig+0x2d4>
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	031b      	lsls	r3, r3, #12
 800a2dc:	4901      	ldr	r1, [pc, #4]	; (800a2e4 <HAL_RCC_OscConfig+0x288>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	604b      	str	r3, [r1, #4]
 800a2e2:	e025      	b.n	800a330 <HAL_RCC_OscConfig+0x2d4>
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	4b9a      	ldr	r3, [pc, #616]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	061b      	lsls	r3, r3, #24
 800a2f6:	4997      	ldr	r1, [pc, #604]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	604b      	str	r3, [r1, #4]
 800a2fc:	e018      	b.n	800a330 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2fe:	4b95      	ldr	r3, [pc, #596]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a94      	ldr	r2, [pc, #592]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a30a:	f7f9 fed3 	bl	80040b4 <HAL_GetTick>
 800a30e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a310:	e008      	b.n	800a324 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a312:	f7f9 fecf 	bl	80040b4 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d901      	bls.n	800a324 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e2ed      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a324:	4b8b      	ldr	r3, [pc, #556]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1f0      	bne.n	800a312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80a9 	beq.w	800a490 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a33e:	4b85      	ldr	r3, [pc, #532]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a346:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a348:	4b82      	ldr	r3, [pc, #520]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b08      	cmp	r3, #8
 800a352:	d007      	beq.n	800a364 <HAL_RCC_OscConfig+0x308>
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2b18      	cmp	r3, #24
 800a358:	d13a      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x374>
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f003 0303 	and.w	r3, r3, #3
 800a360:	2b01      	cmp	r3, #1
 800a362:	d135      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a364:	4b7b      	ldr	r3, [pc, #492]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <HAL_RCC_OscConfig+0x320>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	2b80      	cmp	r3, #128	; 0x80
 800a376:	d001      	beq.n	800a37c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e2c1      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a37c:	f7f9 fea6 	bl	80040cc <HAL_GetREVID>
 800a380:	4603      	mov	r3, r0
 800a382:	f241 0203 	movw	r2, #4099	; 0x1003
 800a386:	4293      	cmp	r3, r2
 800a388:	d817      	bhi.n	800a3ba <HAL_RCC_OscConfig+0x35e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	2b20      	cmp	r3, #32
 800a390:	d108      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x348>
 800a392:	4b70      	ldr	r3, [pc, #448]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a39a:	4a6e      	ldr	r2, [pc, #440]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a39c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3a2:	e075      	b.n	800a490 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3a4:	4b6b      	ldr	r3, [pc, #428]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	069b      	lsls	r3, r3, #26
 800a3b2:	4968      	ldr	r1, [pc, #416]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3b8:	e06a      	b.n	800a490 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3ba:	4b66      	ldr	r3, [pc, #408]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	061b      	lsls	r3, r3, #24
 800a3c8:	4962      	ldr	r1, [pc, #392]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3ce:	e05f      	b.n	800a490 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d042      	beq.n	800a45e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3d8:	4b5e      	ldr	r3, [pc, #376]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a5d      	ldr	r2, [pc, #372]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e4:	f7f9 fe66 	bl	80040b4 <HAL_GetTick>
 800a3e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3ea:	e008      	b.n	800a3fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3ec:	f7f9 fe62 	bl	80040b4 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e280      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3fe:	4b55      	ldr	r3, [pc, #340]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0f0      	beq.n	800a3ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a40a:	f7f9 fe5f 	bl	80040cc <HAL_GetREVID>
 800a40e:	4603      	mov	r3, r0
 800a410:	f241 0203 	movw	r2, #4099	; 0x1003
 800a414:	4293      	cmp	r3, r2
 800a416:	d817      	bhi.n	800a448 <HAL_RCC_OscConfig+0x3ec>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	d108      	bne.n	800a432 <HAL_RCC_OscConfig+0x3d6>
 800a420:	4b4c      	ldr	r3, [pc, #304]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a428:	4a4a      	ldr	r2, [pc, #296]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a42a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a42e:	6053      	str	r3, [r2, #4]
 800a430:	e02e      	b.n	800a490 <HAL_RCC_OscConfig+0x434>
 800a432:	4b48      	ldr	r3, [pc, #288]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	069b      	lsls	r3, r3, #26
 800a440:	4944      	ldr	r1, [pc, #272]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a442:	4313      	orrs	r3, r2
 800a444:	604b      	str	r3, [r1, #4]
 800a446:	e023      	b.n	800a490 <HAL_RCC_OscConfig+0x434>
 800a448:	4b42      	ldr	r3, [pc, #264]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	061b      	lsls	r3, r3, #24
 800a456:	493f      	ldr	r1, [pc, #252]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a458:	4313      	orrs	r3, r2
 800a45a:	60cb      	str	r3, [r1, #12]
 800a45c:	e018      	b.n	800a490 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a45e:	4b3d      	ldr	r3, [pc, #244]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a3c      	ldr	r2, [pc, #240]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46a:	f7f9 fe23 	bl	80040b4 <HAL_GetTick>
 800a46e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a470:	e008      	b.n	800a484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a472:	f7f9 fe1f 	bl	80040b4 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d901      	bls.n	800a484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e23d      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a484:	4b33      	ldr	r3, [pc, #204]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1f0      	bne.n	800a472 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d036      	beq.n	800a50a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d019      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4a4:	4b2b      	ldr	r3, [pc, #172]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4a8:	4a2a      	ldr	r2, [pc, #168]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4b0:	f7f9 fe00 	bl	80040b4 <HAL_GetTick>
 800a4b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4b6:	e008      	b.n	800a4ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4b8:	f7f9 fdfc 	bl	80040b4 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e21a      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0f0      	beq.n	800a4b8 <HAL_RCC_OscConfig+0x45c>
 800a4d6:	e018      	b.n	800a50a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4d8:	4b1e      	ldr	r3, [pc, #120]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4dc:	4a1d      	ldr	r2, [pc, #116]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a4de:	f023 0301 	bic.w	r3, r3, #1
 800a4e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4e4:	f7f9 fde6 	bl	80040b4 <HAL_GetTick>
 800a4e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4ea:	e008      	b.n	800a4fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4ec:	f7f9 fde2 	bl	80040b4 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d901      	bls.n	800a4fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e200      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4fe:	4b15      	ldr	r3, [pc, #84]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1f0      	bne.n	800a4ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b00      	cmp	r3, #0
 800a514:	d039      	beq.n	800a58a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d01c      	beq.n	800a558 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a0c      	ldr	r2, [pc, #48]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a528:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a52a:	f7f9 fdc3 	bl	80040b4 <HAL_GetTick>
 800a52e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a530:	e008      	b.n	800a544 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a532:	f7f9 fdbf 	bl	80040b4 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d901      	bls.n	800a544 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e1dd      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a544:	4b03      	ldr	r3, [pc, #12]	; (800a554 <HAL_RCC_OscConfig+0x4f8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0f0      	beq.n	800a532 <HAL_RCC_OscConfig+0x4d6>
 800a550:	e01b      	b.n	800a58a <HAL_RCC_OscConfig+0x52e>
 800a552:	bf00      	nop
 800a554:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a558:	4b9b      	ldr	r3, [pc, #620]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a9a      	ldr	r2, [pc, #616]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a55e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a562:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a564:	f7f9 fda6 	bl	80040b4 <HAL_GetTick>
 800a568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a56a:	e008      	b.n	800a57e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a56c:	f7f9 fda2 	bl	80040b4 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	2b02      	cmp	r3, #2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e1c0      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a57e:	4b92      	ldr	r3, [pc, #584]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f0      	bne.n	800a56c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 8081 	beq.w	800a69a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a598:	4b8c      	ldr	r3, [pc, #560]	; (800a7cc <HAL_RCC_OscConfig+0x770>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a8b      	ldr	r2, [pc, #556]	; (800a7cc <HAL_RCC_OscConfig+0x770>)
 800a59e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5a4:	f7f9 fd86 	bl	80040b4 <HAL_GetTick>
 800a5a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5aa:	e008      	b.n	800a5be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5ac:	f7f9 fd82 	bl	80040b4 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b64      	cmp	r3, #100	; 0x64
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e1a0      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5be:	4b83      	ldr	r3, [pc, #524]	; (800a7cc <HAL_RCC_OscConfig+0x770>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0f0      	beq.n	800a5ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d106      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x584>
 800a5d2:	4b7d      	ldr	r3, [pc, #500]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d6:	4a7c      	ldr	r2, [pc, #496]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a5d8:	f043 0301 	orr.w	r3, r3, #1
 800a5dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a5de:	e02d      	b.n	800a63c <HAL_RCC_OscConfig+0x5e0>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10c      	bne.n	800a602 <HAL_RCC_OscConfig+0x5a6>
 800a5e8:	4b77      	ldr	r3, [pc, #476]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ec:	4a76      	ldr	r2, [pc, #472]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f4:	4b74      	ldr	r3, [pc, #464]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f8:	4a73      	ldr	r2, [pc, #460]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a5fa:	f023 0304 	bic.w	r3, r3, #4
 800a5fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a600:	e01c      	b.n	800a63c <HAL_RCC_OscConfig+0x5e0>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	2b05      	cmp	r3, #5
 800a608:	d10c      	bne.n	800a624 <HAL_RCC_OscConfig+0x5c8>
 800a60a:	4b6f      	ldr	r3, [pc, #444]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	4a6e      	ldr	r2, [pc, #440]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a610:	f043 0304 	orr.w	r3, r3, #4
 800a614:	6713      	str	r3, [r2, #112]	; 0x70
 800a616:	4b6c      	ldr	r3, [pc, #432]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61a:	4a6b      	ldr	r2, [pc, #428]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a61c:	f043 0301 	orr.w	r3, r3, #1
 800a620:	6713      	str	r3, [r2, #112]	; 0x70
 800a622:	e00b      	b.n	800a63c <HAL_RCC_OscConfig+0x5e0>
 800a624:	4b68      	ldr	r3, [pc, #416]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a628:	4a67      	ldr	r2, [pc, #412]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a62a:	f023 0301 	bic.w	r3, r3, #1
 800a62e:	6713      	str	r3, [r2, #112]	; 0x70
 800a630:	4b65      	ldr	r3, [pc, #404]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a634:	4a64      	ldr	r2, [pc, #400]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a636:	f023 0304 	bic.w	r3, r3, #4
 800a63a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d015      	beq.n	800a670 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a644:	f7f9 fd36 	bl	80040b4 <HAL_GetTick>
 800a648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a64a:	e00a      	b.n	800a662 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a64c:	f7f9 fd32 	bl	80040b4 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	f241 3288 	movw	r2, #5000	; 0x1388
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e14e      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a662:	4b59      	ldr	r3, [pc, #356]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0ee      	beq.n	800a64c <HAL_RCC_OscConfig+0x5f0>
 800a66e:	e014      	b.n	800a69a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a670:	f7f9 fd20 	bl	80040b4 <HAL_GetTick>
 800a674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a676:	e00a      	b.n	800a68e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a678:	f7f9 fd1c 	bl	80040b4 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	f241 3288 	movw	r2, #5000	; 0x1388
 800a686:	4293      	cmp	r3, r2
 800a688:	d901      	bls.n	800a68e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e138      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a68e:	4b4e      	ldr	r3, [pc, #312]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1ee      	bne.n	800a678 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 812d 	beq.w	800a8fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a6a4:	4b48      	ldr	r3, [pc, #288]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ac:	2b18      	cmp	r3, #24
 800a6ae:	f000 80bd 	beq.w	800a82c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	f040 809e 	bne.w	800a7f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6bc:	4b42      	ldr	r3, [pc, #264]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a41      	ldr	r2, [pc, #260]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a6c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c8:	f7f9 fcf4 	bl	80040b4 <HAL_GetTick>
 800a6cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d0:	f7f9 fcf0 	bl	80040b4 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e10e      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6e2:	4b39      	ldr	r3, [pc, #228]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f0      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6ee:	4b36      	ldr	r3, [pc, #216]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a6f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6f2:	4b37      	ldr	r3, [pc, #220]	; (800a7d0 <HAL_RCC_OscConfig+0x774>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6fe:	0112      	lsls	r2, r2, #4
 800a700:	430a      	orrs	r2, r1
 800a702:	4931      	ldr	r1, [pc, #196]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a704:	4313      	orrs	r3, r2
 800a706:	628b      	str	r3, [r1, #40]	; 0x28
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	3b01      	subs	r3, #1
 800a70e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a716:	3b01      	subs	r3, #1
 800a718:	025b      	lsls	r3, r3, #9
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	431a      	orrs	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a722:	3b01      	subs	r3, #1
 800a724:	041b      	lsls	r3, r3, #16
 800a726:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a72a:	431a      	orrs	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a730:	3b01      	subs	r3, #1
 800a732:	061b      	lsls	r3, r3, #24
 800a734:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a738:	4923      	ldr	r1, [pc, #140]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a73e:	4b22      	ldr	r3, [pc, #136]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	4a21      	ldr	r2, [pc, #132]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a744:	f023 0301 	bic.w	r3, r3, #1
 800a748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a74a:	4b1f      	ldr	r3, [pc, #124]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a74c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a74e:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <HAL_RCC_OscConfig+0x778>)
 800a750:	4013      	ands	r3, r2
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a756:	00d2      	lsls	r2, r2, #3
 800a758:	491b      	ldr	r1, [pc, #108]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a75e:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	f023 020c 	bic.w	r2, r3, #12
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	4917      	ldr	r1, [pc, #92]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a770:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	f023 0202 	bic.w	r2, r3, #2
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77c:	4912      	ldr	r1, [pc, #72]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a782:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	4a10      	ldr	r2, [pc, #64]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a78c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a78e:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	4a0d      	ldr	r2, [pc, #52]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a79a:	4b0b      	ldr	r3, [pc, #44]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	4a0a      	ldr	r2, [pc, #40]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a7a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a7a6:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a07      	ldr	r2, [pc, #28]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	f043 0301 	orr.w	r3, r3, #1
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7b2:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a04      	ldr	r2, [pc, #16]	; (800a7c8 <HAL_RCC_OscConfig+0x76c>)
 800a7b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7be:	f7f9 fc79 	bl	80040b4 <HAL_GetTick>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7c4:	e011      	b.n	800a7ea <HAL_RCC_OscConfig+0x78e>
 800a7c6:	bf00      	nop
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	58024800 	.word	0x58024800
 800a7d0:	fffffc0c 	.word	0xfffffc0c
 800a7d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7d8:	f7f9 fc6c 	bl	80040b4 <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d901      	bls.n	800a7ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e08a      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7ea:	4b47      	ldr	r3, [pc, #284]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0f0      	beq.n	800a7d8 <HAL_RCC_OscConfig+0x77c>
 800a7f6:	e082      	b.n	800a8fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7f8:	4b43      	ldr	r3, [pc, #268]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a42      	ldr	r2, [pc, #264]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a7fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a804:	f7f9 fc56 	bl	80040b4 <HAL_GetTick>
 800a808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a80a:	e008      	b.n	800a81e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a80c:	f7f9 fc52 	bl	80040b4 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d901      	bls.n	800a81e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e070      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a81e:	4b3a      	ldr	r3, [pc, #232]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1f0      	bne.n	800a80c <HAL_RCC_OscConfig+0x7b0>
 800a82a:	e068      	b.n	800a8fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a82c:	4b36      	ldr	r3, [pc, #216]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a830:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a832:	4b35      	ldr	r3, [pc, #212]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d031      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f003 0203 	and.w	r2, r3, #3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d12a      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	091b      	lsrs	r3, r3, #4
 800a852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d122      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a868:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d11a      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	0a5b      	lsrs	r3, r3, #9
 800a872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d111      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	0c1b      	lsrs	r3, r3, #16
 800a884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a88e:	429a      	cmp	r2, r3
 800a890:	d108      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	0e1b      	lsrs	r3, r3, #24
 800a896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d001      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e02b      	b.n	800a900 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8a8:	4b17      	ldr	r3, [pc, #92]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ac:	08db      	lsrs	r3, r3, #3
 800a8ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d01f      	beq.n	800a8fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c2:	4a11      	ldr	r2, [pc, #68]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8ca:	f7f9 fbf3 	bl	80040b4 <HAL_GetTick>
 800a8ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8d0:	bf00      	nop
 800a8d2:	f7f9 fbef 	bl	80040b4 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d0f9      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8de:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8e2:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <HAL_RCC_OscConfig+0x8b0>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8ea:	00d2      	lsls	r2, r2, #3
 800a8ec:	4906      	ldr	r1, [pc, #24]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f6:	4a04      	ldr	r2, [pc, #16]	; (800a908 <HAL_RCC_OscConfig+0x8ac>)
 800a8f8:	f043 0301 	orr.w	r3, r3, #1
 800a8fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3730      	adds	r7, #48	; 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	58024400 	.word	0x58024400
 800a90c:	ffff0007 	.word	0xffff0007

0800a910 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e19c      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a924:	4b8a      	ldr	r3, [pc, #552]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 030f 	and.w	r3, r3, #15
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d910      	bls.n	800a954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a932:	4b87      	ldr	r3, [pc, #540]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f023 020f 	bic.w	r2, r3, #15
 800a93a:	4985      	ldr	r1, [pc, #532]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	4313      	orrs	r3, r2
 800a940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a942:	4b83      	ldr	r3, [pc, #524]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d001      	beq.n	800a954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e184      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d010      	beq.n	800a982 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	691a      	ldr	r2, [r3, #16]
 800a964:	4b7b      	ldr	r3, [pc, #492]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d908      	bls.n	800a982 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a970:	4b78      	ldr	r3, [pc, #480]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	4975      	ldr	r1, [pc, #468]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0308 	and.w	r3, r3, #8
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d010      	beq.n	800a9b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	695a      	ldr	r2, [r3, #20]
 800a992:	4b70      	ldr	r3, [pc, #448]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d908      	bls.n	800a9b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a99e:	4b6d      	ldr	r3, [pc, #436]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	496a      	ldr	r1, [pc, #424]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0310 	and.w	r3, r3, #16
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d010      	beq.n	800a9de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699a      	ldr	r2, [r3, #24]
 800a9c0:	4b64      	ldr	r3, [pc, #400]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d908      	bls.n	800a9de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9cc:	4b61      	ldr	r3, [pc, #388]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	699b      	ldr	r3, [r3, #24]
 800a9d8:	495e      	ldr	r1, [pc, #376]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d010      	beq.n	800aa0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	69da      	ldr	r2, [r3, #28]
 800a9ee:	4b59      	ldr	r3, [pc, #356]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d908      	bls.n	800aa0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9fa:	4b56      	ldr	r3, [pc, #344]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	4953      	ldr	r1, [pc, #332]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d010      	beq.n	800aa3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	4b4d      	ldr	r3, [pc, #308]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	f003 030f 	and.w	r3, r3, #15
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d908      	bls.n	800aa3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa28:	4b4a      	ldr	r3, [pc, #296]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	f023 020f 	bic.w	r2, r3, #15
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	4947      	ldr	r1, [pc, #284]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d055      	beq.n	800aaf2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa46:	4b43      	ldr	r3, [pc, #268]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	4940      	ldr	r1, [pc, #256]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d107      	bne.n	800aa70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa60:	4b3c      	ldr	r3, [pc, #240]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d121      	bne.n	800aab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e0f6      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d107      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa78:	4b36      	ldr	r3, [pc, #216]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d115      	bne.n	800aab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e0ea      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d107      	bne.n	800aaa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa90:	4b30      	ldr	r3, [pc, #192]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d109      	bne.n	800aab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e0de      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaa0:	4b2c      	ldr	r3, [pc, #176]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0d6      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aab0:	4b28      	ldr	r3, [pc, #160]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f023 0207 	bic.w	r2, r3, #7
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4925      	ldr	r1, [pc, #148]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aac2:	f7f9 faf7 	bl	80040b4 <HAL_GetTick>
 800aac6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aac8:	e00a      	b.n	800aae0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaca:	f7f9 faf3 	bl	80040b4 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad8:	4293      	cmp	r3, r2
 800aada:	d901      	bls.n	800aae0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e0be      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aae0:	4b1c      	ldr	r3, [pc, #112]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d1eb      	bne.n	800aaca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d010      	beq.n	800ab20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68da      	ldr	r2, [r3, #12]
 800ab02:	4b14      	ldr	r3, [pc, #80]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	f003 030f 	and.w	r3, r3, #15
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d208      	bcs.n	800ab20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab0e:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	f023 020f 	bic.w	r2, r3, #15
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	490e      	ldr	r1, [pc, #56]	; (800ab54 <HAL_RCC_ClockConfig+0x244>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 030f 	and.w	r3, r3, #15
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d214      	bcs.n	800ab58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab2e:	4b08      	ldr	r3, [pc, #32]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f023 020f 	bic.w	r2, r3, #15
 800ab36:	4906      	ldr	r1, [pc, #24]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab3e:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <HAL_RCC_ClockConfig+0x240>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d005      	beq.n	800ab58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e086      	b.n	800ac5e <HAL_RCC_ClockConfig+0x34e>
 800ab50:	52002000 	.word	0x52002000
 800ab54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d010      	beq.n	800ab86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	4b3f      	ldr	r3, [pc, #252]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d208      	bcs.n	800ab86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab74:	4b3c      	ldr	r3, [pc, #240]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	4939      	ldr	r1, [pc, #228]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0308 	and.w	r3, r3, #8
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d010      	beq.n	800abb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	695a      	ldr	r2, [r3, #20]
 800ab96:	4b34      	ldr	r3, [pc, #208]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d208      	bcs.n	800abb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aba2:	4b31      	ldr	r3, [pc, #196]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	492e      	ldr	r1, [pc, #184]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800abb0:	4313      	orrs	r3, r2
 800abb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0310 	and.w	r3, r3, #16
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d010      	beq.n	800abe2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699a      	ldr	r2, [r3, #24]
 800abc4:	4b28      	ldr	r3, [pc, #160]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abcc:	429a      	cmp	r2, r3
 800abce:	d208      	bcs.n	800abe2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abd0:	4b25      	ldr	r3, [pc, #148]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	4922      	ldr	r1, [pc, #136]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800abde:	4313      	orrs	r3, r2
 800abe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0320 	and.w	r3, r3, #32
 800abea:	2b00      	cmp	r3, #0
 800abec:	d010      	beq.n	800ac10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69da      	ldr	r2, [r3, #28]
 800abf2:	4b1d      	ldr	r3, [pc, #116]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d208      	bcs.n	800ac10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	4917      	ldr	r1, [pc, #92]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac10:	f000 f834 	bl	800ac7c <HAL_RCC_GetSysClockFreq>
 800ac14:	4602      	mov	r2, r0
 800ac16:	4b14      	ldr	r3, [pc, #80]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	0a1b      	lsrs	r3, r3, #8
 800ac1c:	f003 030f 	and.w	r3, r3, #15
 800ac20:	4912      	ldr	r1, [pc, #72]	; (800ac6c <HAL_RCC_ClockConfig+0x35c>)
 800ac22:	5ccb      	ldrb	r3, [r1, r3]
 800ac24:	f003 031f 	and.w	r3, r3, #31
 800ac28:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac2e:	4b0e      	ldr	r3, [pc, #56]	; (800ac68 <HAL_RCC_ClockConfig+0x358>)
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	f003 030f 	and.w	r3, r3, #15
 800ac36:	4a0d      	ldr	r2, [pc, #52]	; (800ac6c <HAL_RCC_ClockConfig+0x35c>)
 800ac38:	5cd3      	ldrb	r3, [r2, r3]
 800ac3a:	f003 031f 	and.w	r3, r3, #31
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	fa22 f303 	lsr.w	r3, r2, r3
 800ac44:	4a0a      	ldr	r2, [pc, #40]	; (800ac70 <HAL_RCC_ClockConfig+0x360>)
 800ac46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac48:	4a0a      	ldr	r2, [pc, #40]	; (800ac74 <HAL_RCC_ClockConfig+0x364>)
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac4e:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <HAL_RCC_ClockConfig+0x368>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7f8 f83c 	bl	8002cd0 <HAL_InitTick>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	58024400 	.word	0x58024400
 800ac6c:	080170a4 	.word	0x080170a4
 800ac70:	24000088 	.word	0x24000088
 800ac74:	24000084 	.word	0x24000084
 800ac78:	2400008c 	.word	0x2400008c

0800ac7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b089      	sub	sp, #36	; 0x24
 800ac80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac82:	4bb3      	ldr	r3, [pc, #716]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac8a:	2b18      	cmp	r3, #24
 800ac8c:	f200 8155 	bhi.w	800af3a <HAL_RCC_GetSysClockFreq+0x2be>
 800ac90:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800acfd 	.word	0x0800acfd
 800ac9c:	0800af3b 	.word	0x0800af3b
 800aca0:	0800af3b 	.word	0x0800af3b
 800aca4:	0800af3b 	.word	0x0800af3b
 800aca8:	0800af3b 	.word	0x0800af3b
 800acac:	0800af3b 	.word	0x0800af3b
 800acb0:	0800af3b 	.word	0x0800af3b
 800acb4:	0800af3b 	.word	0x0800af3b
 800acb8:	0800ad23 	.word	0x0800ad23
 800acbc:	0800af3b 	.word	0x0800af3b
 800acc0:	0800af3b 	.word	0x0800af3b
 800acc4:	0800af3b 	.word	0x0800af3b
 800acc8:	0800af3b 	.word	0x0800af3b
 800accc:	0800af3b 	.word	0x0800af3b
 800acd0:	0800af3b 	.word	0x0800af3b
 800acd4:	0800af3b 	.word	0x0800af3b
 800acd8:	0800ad29 	.word	0x0800ad29
 800acdc:	0800af3b 	.word	0x0800af3b
 800ace0:	0800af3b 	.word	0x0800af3b
 800ace4:	0800af3b 	.word	0x0800af3b
 800ace8:	0800af3b 	.word	0x0800af3b
 800acec:	0800af3b 	.word	0x0800af3b
 800acf0:	0800af3b 	.word	0x0800af3b
 800acf4:	0800af3b 	.word	0x0800af3b
 800acf8:	0800ad2f 	.word	0x0800ad2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acfc:	4b94      	ldr	r3, [pc, #592]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad08:	4b91      	ldr	r3, [pc, #580]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	08db      	lsrs	r3, r3, #3
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	4a90      	ldr	r2, [pc, #576]	; (800af54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad14:	fa22 f303 	lsr.w	r3, r2, r3
 800ad18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad1a:	e111      	b.n	800af40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad1c:	4b8d      	ldr	r3, [pc, #564]	; (800af54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad1e:	61bb      	str	r3, [r7, #24]
      break;
 800ad20:	e10e      	b.n	800af40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad22:	4b8d      	ldr	r3, [pc, #564]	; (800af58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad24:	61bb      	str	r3, [r7, #24]
      break;
 800ad26:	e10b      	b.n	800af40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad28:	4b8c      	ldr	r3, [pc, #560]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad2a:	61bb      	str	r3, [r7, #24]
      break;
 800ad2c:	e108      	b.n	800af40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad2e:	4b88      	ldr	r3, [pc, #544]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad38:	4b85      	ldr	r3, [pc, #532]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3c:	091b      	lsrs	r3, r3, #4
 800ad3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad44:	4b82      	ldr	r3, [pc, #520]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad4e:	4b80      	ldr	r3, [pc, #512]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad52:	08db      	lsrs	r3, r3, #3
 800ad54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	fb02 f303 	mul.w	r3, r2, r3
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 80e1 	beq.w	800af34 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	f000 8083 	beq.w	800ae80 <HAL_RCC_GetSysClockFreq+0x204>
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	f200 80a1 	bhi.w	800aec4 <HAL_RCC_GetSysClockFreq+0x248>
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <HAL_RCC_GetSysClockFreq+0x114>
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d056      	beq.n	800ae3c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad8e:	e099      	b.n	800aec4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad90:	4b6f      	ldr	r3, [pc, #444]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0320 	and.w	r3, r3, #32
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d02d      	beq.n	800adf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad9c:	4b6c      	ldr	r3, [pc, #432]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	08db      	lsrs	r3, r3, #3
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	4a6b      	ldr	r2, [pc, #428]	; (800af54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ada8:	fa22 f303 	lsr.w	r3, r2, r3
 800adac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	ee07 3a90 	vmov	s15, r3
 800adb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc6:	4b62      	ldr	r3, [pc, #392]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add6:	ed97 6a02 	vldr	s12, [r7, #8]
 800adda:	eddf 5a61 	vldr	s11, [pc, #388]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800adf6:	e087      	b.n	800af08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eddf 6a58 	vldr	s13, [pc, #352]	; 800af64 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0a:	4b51      	ldr	r3, [pc, #324]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae3a:	e065      	b.n	800af08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	eddf 6a48 	vldr	s13, [pc, #288]	; 800af68 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4e:	4b40      	ldr	r3, [pc, #256]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae7e:	e043      	b.n	800af08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800af6c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae92:	4b2f      	ldr	r3, [pc, #188]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aea6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aeaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aec2:	e021      	b.n	800af08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	eddf 6a26 	vldr	s13, [pc, #152]	; 800af68 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed6:	4b1e      	ldr	r3, [pc, #120]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aede:	ee07 3a90 	vmov	s15, r3
 800aee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aeee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aefa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af08:	4b11      	ldr	r3, [pc, #68]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0c:	0a5b      	lsrs	r3, r3, #9
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	3301      	adds	r3, #1
 800af14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af20:	edd7 6a07 	vldr	s13, [r7, #28]
 800af24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af2c:	ee17 3a90 	vmov	r3, s15
 800af30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af32:	e005      	b.n	800af40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	61bb      	str	r3, [r7, #24]
      break;
 800af38:	e002      	b.n	800af40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800af3a:	4b07      	ldr	r3, [pc, #28]	; (800af58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af3c:	61bb      	str	r3, [r7, #24]
      break;
 800af3e:	bf00      	nop
  }

  return sysclockfreq;
 800af40:	69bb      	ldr	r3, [r7, #24]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3724      	adds	r7, #36	; 0x24
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	58024400 	.word	0x58024400
 800af54:	03d09000 	.word	0x03d09000
 800af58:	003d0900 	.word	0x003d0900
 800af5c:	017d7840 	.word	0x017d7840
 800af60:	46000000 	.word	0x46000000
 800af64:	4c742400 	.word	0x4c742400
 800af68:	4a742400 	.word	0x4a742400
 800af6c:	4bbebc20 	.word	0x4bbebc20

0800af70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800af76:	f7ff fe81 	bl	800ac7c <HAL_RCC_GetSysClockFreq>
 800af7a:	4602      	mov	r2, r0
 800af7c:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <HAL_RCC_GetHCLKFreq+0x50>)
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	0a1b      	lsrs	r3, r3, #8
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	490f      	ldr	r1, [pc, #60]	; (800afc4 <HAL_RCC_GetHCLKFreq+0x54>)
 800af88:	5ccb      	ldrb	r3, [r1, r3]
 800af8a:	f003 031f 	and.w	r3, r3, #31
 800af8e:	fa22 f303 	lsr.w	r3, r2, r3
 800af92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af94:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <HAL_RCC_GetHCLKFreq+0x50>)
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	4a09      	ldr	r2, [pc, #36]	; (800afc4 <HAL_RCC_GetHCLKFreq+0x54>)
 800af9e:	5cd3      	ldrb	r3, [r2, r3]
 800afa0:	f003 031f 	and.w	r3, r3, #31
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	fa22 f303 	lsr.w	r3, r2, r3
 800afaa:	4a07      	ldr	r2, [pc, #28]	; (800afc8 <HAL_RCC_GetHCLKFreq+0x58>)
 800afac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afae:	4a07      	ldr	r2, [pc, #28]	; (800afcc <HAL_RCC_GetHCLKFreq+0x5c>)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <HAL_RCC_GetHCLKFreq+0x58>)
 800afb6:	681b      	ldr	r3, [r3, #0]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	58024400 	.word	0x58024400
 800afc4:	080170a4 	.word	0x080170a4
 800afc8:	24000088 	.word	0x24000088
 800afcc:	24000084 	.word	0x24000084

0800afd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800afd4:	f7ff ffcc 	bl	800af70 <HAL_RCC_GetHCLKFreq>
 800afd8:	4602      	mov	r2, r0
 800afda:	4b06      	ldr	r3, [pc, #24]	; (800aff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	091b      	lsrs	r3, r3, #4
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	4904      	ldr	r1, [pc, #16]	; (800aff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800afe6:	5ccb      	ldrb	r3, [r1, r3]
 800afe8:	f003 031f 	and.w	r3, r3, #31
 800afec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	58024400 	.word	0x58024400
 800aff8:	080170a4 	.word	0x080170a4

0800affc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b000:	f7ff ffb6 	bl	800af70 <HAL_RCC_GetHCLKFreq>
 800b004:	4602      	mov	r2, r0
 800b006:	4b06      	ldr	r3, [pc, #24]	; (800b020 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	0a1b      	lsrs	r3, r3, #8
 800b00c:	f003 0307 	and.w	r3, r3, #7
 800b010:	4904      	ldr	r1, [pc, #16]	; (800b024 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b012:	5ccb      	ldrb	r3, [r1, r3]
 800b014:	f003 031f 	and.w	r3, r3, #31
 800b018:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	58024400 	.word	0x58024400
 800b024:	080170a4 	.word	0x080170a4

0800b028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	223f      	movs	r2, #63	; 0x3f
 800b036:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b038:	4b1a      	ldr	r3, [pc, #104]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	f003 0207 	and.w	r2, r3, #7
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b044:	4b17      	ldr	r3, [pc, #92]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b050:	4b14      	ldr	r3, [pc, #80]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	f003 020f 	and.w	r2, r3, #15
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b05c:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b068:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b074:	4b0b      	ldr	r3, [pc, #44]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b080:	4b08      	ldr	r3, [pc, #32]	; (800b0a4 <HAL_RCC_GetClockConfig+0x7c>)
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b08c:	4b06      	ldr	r3, [pc, #24]	; (800b0a8 <HAL_RCC_GetClockConfig+0x80>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	601a      	str	r2, [r3, #0]
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	52002000 	.word	0x52002000

0800b0ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0b0:	b0ca      	sub	sp, #296	; 0x128
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	ea54 0305 	orrs.w	r3, r4, r5
 800b0d6:	d049      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0e2:	d02f      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b0e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0e8:	d828      	bhi.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0ee:	d01a      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b0f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0f4:	d822      	bhi.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b0fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0fe:	d007      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b100:	e01c      	b.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b102:	4bb8      	ldr	r3, [pc, #736]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b106:	4ab7      	ldr	r2, [pc, #732]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b10c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b10e:	e01a      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b114:	3308      	adds	r3, #8
 800b116:	2102      	movs	r1, #2
 800b118:	4618      	mov	r0, r3
 800b11a:	f002 fb61 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b11e:	4603      	mov	r3, r0
 800b120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b124:	e00f      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12a:	3328      	adds	r3, #40	; 0x28
 800b12c:	2102      	movs	r1, #2
 800b12e:	4618      	mov	r0, r3
 800b130:	f002 fc08 	bl	800d944 <RCCEx_PLL3_Config>
 800b134:	4603      	mov	r3, r0
 800b136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b13a:	e004      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b142:	e000      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b144:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b14e:	4ba5      	ldr	r3, [pc, #660]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b152:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b15c:	4aa1      	ldr	r2, [pc, #644]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b15e:	430b      	orrs	r3, r1
 800b160:	6513      	str	r3, [r2, #80]	; 0x50
 800b162:	e003      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b178:	f04f 0900 	mov.w	r9, #0
 800b17c:	ea58 0309 	orrs.w	r3, r8, r9
 800b180:	d047      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d82a      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b18c:	a201      	add	r2, pc, #4	; (adr r2, 800b194 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b192:	bf00      	nop
 800b194:	0800b1a9 	.word	0x0800b1a9
 800b198:	0800b1b7 	.word	0x0800b1b7
 800b19c:	0800b1cd 	.word	0x0800b1cd
 800b1a0:	0800b1eb 	.word	0x0800b1eb
 800b1a4:	0800b1eb 	.word	0x0800b1eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a8:	4b8e      	ldr	r3, [pc, #568]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	4a8d      	ldr	r2, [pc, #564]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1b4:	e01a      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f002 fb0e 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ca:	e00f      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d0:	3328      	adds	r3, #40	; 0x28
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f002 fbb5 	bl	800d944 <RCCEx_PLL3_Config>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1e0:	e004      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1e8:	e000      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b1ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10a      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b1f4:	4b7b      	ldr	r3, [pc, #492]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f8:	f023 0107 	bic.w	r1, r3, #7
 800b1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b202:	4a78      	ldr	r2, [pc, #480]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b204:	430b      	orrs	r3, r1
 800b206:	6513      	str	r3, [r2, #80]	; 0x50
 800b208:	e003      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b20e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b21e:	f04f 0b00 	mov.w	fp, #0
 800b222:	ea5a 030b 	orrs.w	r3, sl, fp
 800b226:	d04c      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b232:	d030      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b238:	d829      	bhi.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b23a:	2bc0      	cmp	r3, #192	; 0xc0
 800b23c:	d02d      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b23e:	2bc0      	cmp	r3, #192	; 0xc0
 800b240:	d825      	bhi.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b242:	2b80      	cmp	r3, #128	; 0x80
 800b244:	d018      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b246:	2b80      	cmp	r3, #128	; 0x80
 800b248:	d821      	bhi.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b24e:	2b40      	cmp	r3, #64	; 0x40
 800b250:	d007      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b252:	e01c      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b254:	4b63      	ldr	r3, [pc, #396]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	4a62      	ldr	r2, [pc, #392]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b25e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b260:	e01c      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b266:	3308      	adds	r3, #8
 800b268:	2100      	movs	r1, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f002 fab8 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b276:	e011      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27c:	3328      	adds	r3, #40	; 0x28
 800b27e:	2100      	movs	r1, #0
 800b280:	4618      	mov	r0, r3
 800b282:	f002 fb5f 	bl	800d944 <RCCEx_PLL3_Config>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b28c:	e006      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b294:	e002      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b296:	bf00      	nop
 800b298:	e000      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b29c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10a      	bne.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b2a4:	4b4f      	ldr	r3, [pc, #316]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2b2:	4a4c      	ldr	r2, [pc, #304]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b2b8:	e003      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b2dc:	460b      	mov	r3, r1
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	d053      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2ee:	d035      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b2f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2f4:	d82e      	bhi.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b2f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2fa:	d031      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b2fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b300:	d828      	bhi.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b306:	d01a      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b30c:	d822      	bhi.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b316:	d007      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b318:	e01c      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b31a:	4b32      	ldr	r3, [pc, #200]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31e:	4a31      	ldr	r2, [pc, #196]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b326:	e01c      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32c:	3308      	adds	r3, #8
 800b32e:	2100      	movs	r1, #0
 800b330:	4618      	mov	r0, r3
 800b332:	f002 fa55 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b336:	4603      	mov	r3, r0
 800b338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b33c:	e011      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b342:	3328      	adds	r3, #40	; 0x28
 800b344:	2100      	movs	r1, #0
 800b346:	4618      	mov	r0, r3
 800b348:	f002 fafc 	bl	800d944 <RCCEx_PLL3_Config>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b352:	e006      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b35a:	e002      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b35c:	bf00      	nop
 800b35e:	e000      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b360:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10b      	bne.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b36a:	4b1e      	ldr	r3, [pc, #120]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b376:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b37a:	4a1a      	ldr	r2, [pc, #104]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b37c:	430b      	orrs	r3, r1
 800b37e:	6593      	str	r3, [r2, #88]	; 0x58
 800b380:	e003      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b396:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b39a:	2300      	movs	r3, #0
 800b39c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	d056      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3b6:	d038      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b3b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3bc:	d831      	bhi.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3c2:	d034      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b3c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3c8:	d82b      	bhi.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ce:	d01d      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b3d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3d4:	d825      	bhi.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d006      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b3da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3de:	d00a      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b3e0:	e01f      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3e2:	bf00      	nop
 800b3e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e8:	4ba2      	ldr	r3, [pc, #648]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	4aa1      	ldr	r2, [pc, #644]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3f4:	e01c      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	4618      	mov	r0, r3
 800b400:	f002 f9ee 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b404:	4603      	mov	r3, r0
 800b406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b40a:	e011      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b410:	3328      	adds	r3, #40	; 0x28
 800b412:	2100      	movs	r1, #0
 800b414:	4618      	mov	r0, r3
 800b416:	f002 fa95 	bl	800d944 <RCCEx_PLL3_Config>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b420:	e006      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b428:	e002      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b42a:	bf00      	nop
 800b42c:	e000      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b42e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10b      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b438:	4b8e      	ldr	r3, [pc, #568]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b444:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b448:	4a8a      	ldr	r2, [pc, #552]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b44a:	430b      	orrs	r3, r1
 800b44c:	6593      	str	r3, [r2, #88]	; 0x58
 800b44e:	e003      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b468:	2300      	movs	r3, #0
 800b46a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b46e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b472:	460b      	mov	r3, r1
 800b474:	4313      	orrs	r3, r2
 800b476:	d03a      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b47e:	2b30      	cmp	r3, #48	; 0x30
 800b480:	d01f      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b482:	2b30      	cmp	r3, #48	; 0x30
 800b484:	d819      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b486:	2b20      	cmp	r3, #32
 800b488:	d00c      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b48a:	2b20      	cmp	r3, #32
 800b48c:	d815      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d019      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b492:	2b10      	cmp	r3, #16
 800b494:	d111      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b496:	4b77      	ldr	r3, [pc, #476]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	4a76      	ldr	r2, [pc, #472]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b49c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4a2:	e011      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f002 f997 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4b8:	e006      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4c0:	e002      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4c2:	bf00      	nop
 800b4c4:	e000      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4d0:	4b68      	ldr	r3, [pc, #416]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4de:	4a65      	ldr	r2, [pc, #404]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4e4:	e003      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b4fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b4fe:	2300      	movs	r3, #0
 800b500:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b504:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b508:	460b      	mov	r3, r1
 800b50a:	4313      	orrs	r3, r2
 800b50c:	d051      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b518:	d035      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b51a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b51e:	d82e      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b520:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b524:	d031      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b52a:	d828      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b530:	d01a      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b536:	d822      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d003      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b53c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b540:	d007      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b542:	e01c      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b544:	4b4b      	ldr	r3, [pc, #300]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b548:	4a4a      	ldr	r2, [pc, #296]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b54a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b54e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b550:	e01c      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b556:	3308      	adds	r3, #8
 800b558:	2100      	movs	r1, #0
 800b55a:	4618      	mov	r0, r3
 800b55c:	f002 f940 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b566:	e011      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56c:	3328      	adds	r3, #40	; 0x28
 800b56e:	2100      	movs	r1, #0
 800b570:	4618      	mov	r0, r3
 800b572:	f002 f9e7 	bl	800d944 <RCCEx_PLL3_Config>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b57c:	e006      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b584:	e002      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b586:	bf00      	nop
 800b588:	e000      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b58c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b594:	4b37      	ldr	r3, [pc, #220]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b598:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a2:	4a34      	ldr	r2, [pc, #208]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	6513      	str	r3, [r2, #80]	; 0x50
 800b5a8:	e003      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b5be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b5c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	d056      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5dc:	d033      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b5de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5e2:	d82c      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5e8:	d02f      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b5ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5ee:	d826      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5f4:	d02b      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b5f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5fa:	d820      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b600:	d012      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b606:	d81a      	bhi.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d022      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b610:	d115      	bne.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b616:	3308      	adds	r3, #8
 800b618:	2101      	movs	r1, #1
 800b61a:	4618      	mov	r0, r3
 800b61c:	f002 f8e0 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b626:	e015      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62c:	3328      	adds	r3, #40	; 0x28
 800b62e:	2101      	movs	r1, #1
 800b630:	4618      	mov	r0, r3
 800b632:	f002 f987 	bl	800d944 <RCCEx_PLL3_Config>
 800b636:	4603      	mov	r3, r0
 800b638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b63c:	e00a      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b644:	e006      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b646:	bf00      	nop
 800b648:	e004      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b64a:	bf00      	nop
 800b64c:	e002      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b652:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10d      	bne.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b660:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b66a:	4a02      	ldr	r2, [pc, #8]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b66c:	430b      	orrs	r3, r1
 800b66e:	6513      	str	r3, [r2, #80]	; 0x50
 800b670:	e006      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b672:	bf00      	nop
 800b674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b67c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b68c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b690:	2300      	movs	r3, #0
 800b692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b696:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4313      	orrs	r3, r2
 800b69e:	d055      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6ac:	d033      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b6ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b2:	d82c      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b8:	d02f      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6be:	d826      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6c4:	d02b      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b6c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6ca:	d820      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d0:	d012      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b6d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d6:	d81a      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d022      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b6dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6e0:	d115      	bne.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f002 f878 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b6f6:	e015      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fc:	3328      	adds	r3, #40	; 0x28
 800b6fe:	2101      	movs	r1, #1
 800b700:	4618      	mov	r0, r3
 800b702:	f002 f91f 	bl	800d944 <RCCEx_PLL3_Config>
 800b706:	4603      	mov	r3, r0
 800b708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b70c:	e00a      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b714:	e006      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b716:	bf00      	nop
 800b718:	e004      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b71a:	bf00      	nop
 800b71c:	e002      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b71e:	bf00      	nop
 800b720:	e000      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b722:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10b      	bne.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b72c:	4ba3      	ldr	r3, [pc, #652]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b730:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b73c:	4a9f      	ldr	r2, [pc, #636]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b73e:	430b      	orrs	r3, r1
 800b740:	6593      	str	r3, [r2, #88]	; 0x58
 800b742:	e003      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b75c:	2300      	movs	r3, #0
 800b75e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b766:	460b      	mov	r3, r1
 800b768:	4313      	orrs	r3, r2
 800b76a:	d037      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b776:	d00e      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b77c:	d816      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d018      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b786:	d111      	bne.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b788:	4b8c      	ldr	r3, [pc, #560]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	4a8b      	ldr	r2, [pc, #556]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b78e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b794:	e00f      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79a:	3308      	adds	r3, #8
 800b79c:	2101      	movs	r1, #1
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f002 f81e 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7aa:	e004      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7b2:	e000      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7be:	4b7f      	ldr	r3, [pc, #508]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7cc:	4a7b      	ldr	r2, [pc, #492]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	6513      	str	r3, [r2, #80]	; 0x50
 800b7d2:	e003      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b7f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	d039      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b802:	2b03      	cmp	r3, #3
 800b804:	d81c      	bhi.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b806:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80c:	0800b849 	.word	0x0800b849
 800b810:	0800b81d 	.word	0x0800b81d
 800b814:	0800b82b 	.word	0x0800b82b
 800b818:	0800b849 	.word	0x0800b849
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b81c:	4b67      	ldr	r3, [pc, #412]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	4a66      	ldr	r2, [pc, #408]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b828:	e00f      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82e:	3308      	adds	r3, #8
 800b830:	2102      	movs	r1, #2
 800b832:	4618      	mov	r0, r3
 800b834:	f001 ffd4 	bl	800d7e0 <RCCEx_PLL2_Config>
 800b838:	4603      	mov	r3, r0
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b83e:	e004      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b846:	e000      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b852:	4b5a      	ldr	r3, [pc, #360]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b856:	f023 0103 	bic.w	r1, r3, #3
 800b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b860:	4a56      	ldr	r2, [pc, #344]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b862:	430b      	orrs	r3, r1
 800b864:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b866:	e003      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b86c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b87c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b880:	2300      	movs	r3, #0
 800b882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b886:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b88a:	460b      	mov	r3, r1
 800b88c:	4313      	orrs	r3, r2
 800b88e:	f000 809f 	beq.w	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b892:	4b4b      	ldr	r3, [pc, #300]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a4a      	ldr	r2, [pc, #296]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b89c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b89e:	f7f8 fc09 	bl	80040b4 <HAL_GetTick>
 800b8a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8a6:	e00b      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8a8:	f7f8 fc04 	bl	80040b4 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	2b64      	cmp	r3, #100	; 0x64
 800b8b6:	d903      	bls.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8be:	e005      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8c0:	4b3f      	ldr	r3, [pc, #252]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0ed      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d179      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8d4:	4b39      	ldr	r3, [pc, #228]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8e0:	4053      	eors	r3, r2
 800b8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d015      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8ea:	4b34      	ldr	r3, [pc, #208]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8f6:	4b31      	ldr	r3, [pc, #196]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fa:	4a30      	ldr	r2, [pc, #192]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b900:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b902:	4b2e      	ldr	r3, [pc, #184]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b906:	4a2d      	ldr	r2, [pc, #180]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b90c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b90e:	4a2b      	ldr	r2, [pc, #172]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b914:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b922:	d118      	bne.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b924:	f7f8 fbc6 	bl	80040b4 <HAL_GetTick>
 800b928:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b92c:	e00d      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b92e:	f7f8 fbc1 	bl	80040b4 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b938:	1ad2      	subs	r2, r2, r3
 800b93a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b93e:	429a      	cmp	r2, r3
 800b940:	d903      	bls.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b948:	e005      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b94a:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	2b00      	cmp	r3, #0
 800b954:	d0eb      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d129      	bne.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b96a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b96e:	d10e      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b970:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b980:	091a      	lsrs	r2, r3, #4
 800b982:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b984:	4013      	ands	r3, r2
 800b986:	4a0d      	ldr	r2, [pc, #52]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b988:	430b      	orrs	r3, r1
 800b98a:	6113      	str	r3, [r2, #16]
 800b98c:	e005      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b98e:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b998:	6113      	str	r3, [r2, #16]
 800b99a:	4b08      	ldr	r3, [pc, #32]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b99c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9aa:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b9b0:	e00e      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b9ba:	e009      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	58024800 	.word	0x58024800
 800b9c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f002 0301 	and.w	r3, r2, #1
 800b9dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	f000 8089 	beq.w	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f8:	2b28      	cmp	r3, #40	; 0x28
 800b9fa:	d86b      	bhi.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba02:	bf00      	nop
 800ba04:	0800badd 	.word	0x0800badd
 800ba08:	0800bad5 	.word	0x0800bad5
 800ba0c:	0800bad5 	.word	0x0800bad5
 800ba10:	0800bad5 	.word	0x0800bad5
 800ba14:	0800bad5 	.word	0x0800bad5
 800ba18:	0800bad5 	.word	0x0800bad5
 800ba1c:	0800bad5 	.word	0x0800bad5
 800ba20:	0800bad5 	.word	0x0800bad5
 800ba24:	0800baa9 	.word	0x0800baa9
 800ba28:	0800bad5 	.word	0x0800bad5
 800ba2c:	0800bad5 	.word	0x0800bad5
 800ba30:	0800bad5 	.word	0x0800bad5
 800ba34:	0800bad5 	.word	0x0800bad5
 800ba38:	0800bad5 	.word	0x0800bad5
 800ba3c:	0800bad5 	.word	0x0800bad5
 800ba40:	0800bad5 	.word	0x0800bad5
 800ba44:	0800babf 	.word	0x0800babf
 800ba48:	0800bad5 	.word	0x0800bad5
 800ba4c:	0800bad5 	.word	0x0800bad5
 800ba50:	0800bad5 	.word	0x0800bad5
 800ba54:	0800bad5 	.word	0x0800bad5
 800ba58:	0800bad5 	.word	0x0800bad5
 800ba5c:	0800bad5 	.word	0x0800bad5
 800ba60:	0800bad5 	.word	0x0800bad5
 800ba64:	0800badd 	.word	0x0800badd
 800ba68:	0800bad5 	.word	0x0800bad5
 800ba6c:	0800bad5 	.word	0x0800bad5
 800ba70:	0800bad5 	.word	0x0800bad5
 800ba74:	0800bad5 	.word	0x0800bad5
 800ba78:	0800bad5 	.word	0x0800bad5
 800ba7c:	0800bad5 	.word	0x0800bad5
 800ba80:	0800bad5 	.word	0x0800bad5
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	0800bad5 	.word	0x0800bad5
 800ba8c:	0800bad5 	.word	0x0800bad5
 800ba90:	0800bad5 	.word	0x0800bad5
 800ba94:	0800bad5 	.word	0x0800bad5
 800ba98:	0800bad5 	.word	0x0800bad5
 800ba9c:	0800bad5 	.word	0x0800bad5
 800baa0:	0800bad5 	.word	0x0800bad5
 800baa4:	0800badd 	.word	0x0800badd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baac:	3308      	adds	r3, #8
 800baae:	2101      	movs	r1, #1
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 fe95 	bl	800d7e0 <RCCEx_PLL2_Config>
 800bab6:	4603      	mov	r3, r0
 800bab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800babc:	e00f      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800babe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac2:	3328      	adds	r3, #40	; 0x28
 800bac4:	2101      	movs	r1, #1
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 ff3c 	bl	800d944 <RCCEx_PLL3_Config>
 800bacc:	4603      	mov	r3, r0
 800bace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bad2:	e004      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bada:	e000      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800badc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10a      	bne.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bae6:	4bbf      	ldr	r3, [pc, #764]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800baee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baf4:	4abb      	ldr	r2, [pc, #748]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baf6:	430b      	orrs	r3, r1
 800baf8:	6553      	str	r3, [r2, #84]	; 0x54
 800bafa:	e003      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bafc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f002 0302 	and.w	r3, r2, #2
 800bb10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb14:	2300      	movs	r3, #0
 800bb16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4313      	orrs	r3, r2
 800bb22:	d041      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb2a:	2b05      	cmp	r3, #5
 800bb2c:	d824      	bhi.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb2e:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bb81 	.word	0x0800bb81
 800bb38:	0800bb4d 	.word	0x0800bb4d
 800bb3c:	0800bb63 	.word	0x0800bb63
 800bb40:	0800bb81 	.word	0x0800bb81
 800bb44:	0800bb81 	.word	0x0800bb81
 800bb48:	0800bb81 	.word	0x0800bb81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb50:	3308      	adds	r3, #8
 800bb52:	2101      	movs	r1, #1
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 fe43 	bl	800d7e0 <RCCEx_PLL2_Config>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb60:	e00f      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb66:	3328      	adds	r3, #40	; 0x28
 800bb68:	2101      	movs	r1, #1
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f001 feea 	bl	800d944 <RCCEx_PLL3_Config>
 800bb70:	4603      	mov	r3, r0
 800bb72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb76:	e004      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb7e:	e000      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10a      	bne.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb8a:	4b96      	ldr	r3, [pc, #600]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8e:	f023 0107 	bic.w	r1, r3, #7
 800bb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb98:	4a92      	ldr	r2, [pc, #584]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	6553      	str	r3, [r2, #84]	; 0x54
 800bb9e:	e003      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f002 0304 	and.w	r3, r2, #4
 800bbb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	d044      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbd0:	2b05      	cmp	r3, #5
 800bbd2:	d825      	bhi.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bbd4:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbda:	bf00      	nop
 800bbdc:	0800bc29 	.word	0x0800bc29
 800bbe0:	0800bbf5 	.word	0x0800bbf5
 800bbe4:	0800bc0b 	.word	0x0800bc0b
 800bbe8:	0800bc29 	.word	0x0800bc29
 800bbec:	0800bc29 	.word	0x0800bc29
 800bbf0:	0800bc29 	.word	0x0800bc29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 fdef 	bl	800d7e0 <RCCEx_PLL2_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc08:	e00f      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	3328      	adds	r3, #40	; 0x28
 800bc10:	2101      	movs	r1, #1
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 fe96 	bl	800d944 <RCCEx_PLL3_Config>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc1e:	e004      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc26:	e000      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10b      	bne.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc32:	4b6c      	ldr	r3, [pc, #432]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc36:	f023 0107 	bic.w	r1, r3, #7
 800bc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc42:	4a68      	ldr	r2, [pc, #416]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc44:	430b      	orrs	r3, r1
 800bc46:	6593      	str	r3, [r2, #88]	; 0x58
 800bc48:	e003      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f002 0320 	and.w	r3, r2, #32
 800bc5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc62:	2300      	movs	r3, #0
 800bc64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	d055      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc7e:	d033      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc84:	d82c      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8a:	d02f      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc90:	d826      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc96:	d02b      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bc98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc9c:	d820      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca2:	d012      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca8:	d81a      	bhi.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d022      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bcae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcb2:	d115      	bne.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2100      	movs	r1, #0
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fd8f 	bl	800d7e0 <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcc8:	e015      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	3328      	adds	r3, #40	; 0x28
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 fe36 	bl	800d944 <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcde:	e00a      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bce6:	e006      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce8:	bf00      	nop
 800bcea:	e004      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcec:	bf00      	nop
 800bcee:	e002      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcf0:	bf00      	nop
 800bcf2:	e000      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10b      	bne.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcfe:	4b39      	ldr	r3, [pc, #228]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd0e:	4a35      	ldr	r2, [pc, #212]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd10:	430b      	orrs	r3, r1
 800bd12:	6553      	str	r3, [r2, #84]	; 0x54
 800bd14:	e003      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	d058      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd4a:	d033      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bd4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd50:	d82c      	bhi.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d02f      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bd58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd5c:	d826      	bhi.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd62:	d02b      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bd64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd68:	d820      	bhi.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd6e:	d012      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bd70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd74:	d81a      	bhi.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d022      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bd7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7e:	d115      	bne.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd84:	3308      	adds	r3, #8
 800bd86:	2100      	movs	r1, #0
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fd29 	bl	800d7e0 <RCCEx_PLL2_Config>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd94:	e015      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9a:	3328      	adds	r3, #40	; 0x28
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 fdd0 	bl	800d944 <RCCEx_PLL3_Config>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bdaa:	e00a      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdb2:	e006      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb4:	bf00      	nop
 800bdb6:	e004      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb8:	bf00      	nop
 800bdba:	e002      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdbc:	bf00      	nop
 800bdbe:	e000      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10e      	bne.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdca:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdda:	4a02      	ldr	r2, [pc, #8]	; (800bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bddc:	430b      	orrs	r3, r1
 800bdde:	6593      	str	r3, [r2, #88]	; 0x58
 800bde0:	e006      	b.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bde2:	bf00      	nop
 800bde4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bdfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be00:	2300      	movs	r3, #0
 800be02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be0a:	460b      	mov	r3, r1
 800be0c:	4313      	orrs	r3, r2
 800be0e:	d055      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be1c:	d033      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be22:	d82c      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be28:	d02f      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2e:	d826      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be34:	d02b      	beq.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be3a:	d820      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be40:	d012      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800be42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be46:	d81a      	bhi.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d022      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800be4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be50:	d115      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be56:	3308      	adds	r3, #8
 800be58:	2100      	movs	r1, #0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 fcc0 	bl	800d7e0 <RCCEx_PLL2_Config>
 800be60:	4603      	mov	r3, r0
 800be62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be66:	e015      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6c:	3328      	adds	r3, #40	; 0x28
 800be6e:	2102      	movs	r1, #2
 800be70:	4618      	mov	r0, r3
 800be72:	f001 fd67 	bl	800d944 <RCCEx_PLL3_Config>
 800be76:	4603      	mov	r3, r0
 800be78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be7c:	e00a      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be84:	e006      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be86:	bf00      	nop
 800be88:	e004      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be8a:	bf00      	nop
 800be8c:	e002      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be8e:	bf00      	nop
 800be90:	e000      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be9c:	4ba1      	ldr	r3, [pc, #644]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bea0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beac:	4a9d      	ldr	r2, [pc, #628]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beae:	430b      	orrs	r3, r1
 800beb0:	6593      	str	r3, [r2, #88]	; 0x58
 800beb2:	e003      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f002 0308 	and.w	r3, r2, #8
 800bec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800becc:	2300      	movs	r3, #0
 800bece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bed2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bed6:	460b      	mov	r3, r1
 800bed8:	4313      	orrs	r3, r2
 800beda:	d01e      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee8:	d10c      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800beea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beee:	3328      	adds	r3, #40	; 0x28
 800bef0:	2102      	movs	r1, #2
 800bef2:	4618      	mov	r0, r3
 800bef4:	f001 fd26 	bl	800d944 <RCCEx_PLL3_Config>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf04:	4b87      	ldr	r3, [pc, #540]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf14:	4a83      	ldr	r2, [pc, #524]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf16:	430b      	orrs	r3, r1
 800bf18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f002 0310 	and.w	r3, r2, #16
 800bf26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf34:	460b      	mov	r3, r1
 800bf36:	4313      	orrs	r3, r2
 800bf38:	d01e      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf46:	d10c      	bne.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4c:	3328      	adds	r3, #40	; 0x28
 800bf4e:	2102      	movs	r1, #2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f001 fcf7 	bl	800d944 <RCCEx_PLL3_Config>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf62:	4b70      	ldr	r3, [pc, #448]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf72:	4a6c      	ldr	r2, [pc, #432]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf74:	430b      	orrs	r3, r1
 800bf76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf92:	460b      	mov	r3, r1
 800bf94:	4313      	orrs	r3, r2
 800bf96:	d03e      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfa4:	d022      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfaa:	d81b      	bhi.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb4:	d00b      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bfb6:	e015      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 fc0d 	bl	800d7e0 <RCCEx_PLL2_Config>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfcc:	e00f      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd2:	3328      	adds	r3, #40	; 0x28
 800bfd4:	2102      	movs	r1, #2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 fcb4 	bl	800d944 <RCCEx_PLL3_Config>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfe2:	e004      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfea:	e000      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bfec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10b      	bne.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bff6:	4b4b      	ldr	r3, [pc, #300]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c006:	4a47      	ldr	r2, [pc, #284]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c008:	430b      	orrs	r3, r1
 800c00a:	6593      	str	r3, [r2, #88]	; 0x58
 800c00c:	e003      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c022:	67bb      	str	r3, [r7, #120]	; 0x78
 800c024:	2300      	movs	r3, #0
 800c026:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c028:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c02c:	460b      	mov	r3, r1
 800c02e:	4313      	orrs	r3, r2
 800c030:	d03b      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c03a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c03e:	d01f      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c044:	d818      	bhi.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c04a:	d003      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c04c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c050:	d007      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c052:	e011      	b.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c054:	4b33      	ldr	r3, [pc, #204]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	4a32      	ldr	r2, [pc, #200]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c05e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c060:	e00f      	b.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c066:	3328      	adds	r3, #40	; 0x28
 800c068:	2101      	movs	r1, #1
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 fc6a 	bl	800d944 <RCCEx_PLL3_Config>
 800c070:	4603      	mov	r3, r0
 800c072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c076:	e004      	b.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c07e:	e000      	b.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c080:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10b      	bne.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c08a:	4b26      	ldr	r3, [pc, #152]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09a:	4a22      	ldr	r2, [pc, #136]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c09c:	430b      	orrs	r3, r1
 800c09e:	6553      	str	r3, [r2, #84]	; 0x54
 800c0a0:	e003      	b.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c0b6:	673b      	str	r3, [r7, #112]	; 0x70
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	677b      	str	r3, [r7, #116]	; 0x74
 800c0bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	d034      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0d4:	d007      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c0d6:	e011      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0d8:	4b12      	ldr	r3, [pc, #72]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0dc:	4a11      	ldr	r2, [pc, #68]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0e4:	e00e      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	2102      	movs	r1, #2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f001 fb76 	bl	800d7e0 <RCCEx_PLL2_Config>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0fa:	e003      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c102:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10d      	bne.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c10c:	4b05      	ldr	r3, [pc, #20]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c11a:	4a02      	ldr	r2, [pc, #8]	; (800c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c11c:	430b      	orrs	r3, r1
 800c11e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c120:	e006      	b.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c122:	bf00      	nop
 800c124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c12c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c13c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c13e:	2300      	movs	r3, #0
 800c140:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c142:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c146:	460b      	mov	r3, r1
 800c148:	4313      	orrs	r3, r2
 800c14a:	d00c      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c150:	3328      	adds	r3, #40	; 0x28
 800c152:	2102      	movs	r1, #2
 800c154:	4618      	mov	r0, r3
 800c156:	f001 fbf5 	bl	800d944 <RCCEx_PLL3_Config>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c172:	663b      	str	r3, [r7, #96]	; 0x60
 800c174:	2300      	movs	r3, #0
 800c176:	667b      	str	r3, [r7, #100]	; 0x64
 800c178:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c17c:	460b      	mov	r3, r1
 800c17e:	4313      	orrs	r3, r2
 800c180:	d038      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c18a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c18e:	d018      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c194:	d811      	bhi.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c19a:	d014      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c19c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a0:	d80b      	bhi.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d011      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1aa:	d106      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1ac:	4bc3      	ldr	r3, [pc, #780]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4ac2      	ldr	r2, [pc, #776]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c1b8:	e008      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1c0:	e004      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1c2:	bf00      	nop
 800c1c4:	e002      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1c6:	bf00      	nop
 800c1c8:	e000      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10b      	bne.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1d4:	4bb9      	ldr	r3, [pc, #740]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1e4:	4ab5      	ldr	r2, [pc, #724]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e6:	430b      	orrs	r3, r1
 800c1e8:	6553      	str	r3, [r2, #84]	; 0x54
 800c1ea:	e003      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c200:	65bb      	str	r3, [r7, #88]	; 0x58
 800c202:	2300      	movs	r3, #0
 800c204:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c206:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c20a:	460b      	mov	r3, r1
 800c20c:	4313      	orrs	r3, r2
 800c20e:	d009      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c210:	4baa      	ldr	r3, [pc, #680]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c214:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c21e:	4aa7      	ldr	r2, [pc, #668]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c220:	430b      	orrs	r3, r1
 800c222:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c230:	653b      	str	r3, [r7, #80]	; 0x50
 800c232:	2300      	movs	r3, #0
 800c234:	657b      	str	r3, [r7, #84]	; 0x54
 800c236:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c23a:	460b      	mov	r3, r1
 800c23c:	4313      	orrs	r3, r2
 800c23e:	d00a      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c240:	4b9e      	ldr	r3, [pc, #632]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c250:	4a9a      	ldr	r2, [pc, #616]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c252:	430b      	orrs	r3, r1
 800c254:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c262:	64bb      	str	r3, [r7, #72]	; 0x48
 800c264:	2300      	movs	r3, #0
 800c266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c268:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c26c:	460b      	mov	r3, r1
 800c26e:	4313      	orrs	r3, r2
 800c270:	d009      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c272:	4b92      	ldr	r3, [pc, #584]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c276:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c280:	4a8e      	ldr	r2, [pc, #568]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c282:	430b      	orrs	r3, r1
 800c284:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c292:	643b      	str	r3, [r7, #64]	; 0x40
 800c294:	2300      	movs	r3, #0
 800c296:	647b      	str	r3, [r7, #68]	; 0x44
 800c298:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c29c:	460b      	mov	r3, r1
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	d00e      	beq.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2a2:	4b86      	ldr	r3, [pc, #536]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	4a85      	ldr	r2, [pc, #532]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2ac:	6113      	str	r3, [r2, #16]
 800c2ae:	4b83      	ldr	r3, [pc, #524]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b0:	6919      	ldr	r1, [r3, #16]
 800c2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c2ba:	4a80      	ldr	r2, [pc, #512]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	d009      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2dc:	4b77      	ldr	r3, [pc, #476]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ea:	4a74      	ldr	r2, [pc, #464]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ec:	430b      	orrs	r3, r1
 800c2ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c2fc:	633b      	str	r3, [r7, #48]	; 0x30
 800c2fe:	2300      	movs	r3, #0
 800c300:	637b      	str	r3, [r7, #52]	; 0x34
 800c302:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c306:	460b      	mov	r3, r1
 800c308:	4313      	orrs	r3, r2
 800c30a:	d00a      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c30c:	4b6b      	ldr	r3, [pc, #428]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c310:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c31c:	4a67      	ldr	r2, [pc, #412]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c31e:	430b      	orrs	r3, r1
 800c320:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	2100      	movs	r1, #0
 800c32c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c334:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c338:	460b      	mov	r3, r1
 800c33a:	4313      	orrs	r3, r2
 800c33c:	d011      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c342:	3308      	adds	r3, #8
 800c344:	2100      	movs	r1, #0
 800c346:	4618      	mov	r0, r3
 800c348:	f001 fa4a 	bl	800d7e0 <RCCEx_PLL2_Config>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c35e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	2100      	movs	r1, #0
 800c36c:	6239      	str	r1, [r7, #32]
 800c36e:	f003 0302 	and.w	r3, r3, #2
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
 800c374:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c378:	460b      	mov	r3, r1
 800c37a:	4313      	orrs	r3, r2
 800c37c:	d011      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c382:	3308      	adds	r3, #8
 800c384:	2101      	movs	r1, #1
 800c386:	4618      	mov	r0, r3
 800c388:	f001 fa2a 	bl	800d7e0 <RCCEx_PLL2_Config>
 800c38c:	4603      	mov	r3, r0
 800c38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c39a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c39e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	61b9      	str	r1, [r7, #24]
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	61fb      	str	r3, [r7, #28]
 800c3b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d011      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	2102      	movs	r1, #2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f001 fa0a 	bl	800d7e0 <RCCEx_PLL2_Config>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	6139      	str	r1, [r7, #16]
 800c3ee:	f003 0308 	and.w	r3, r3, #8
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	d011      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c402:	3328      	adds	r3, #40	; 0x28
 800c404:	2100      	movs	r1, #0
 800c406:	4618      	mov	r0, r3
 800c408:	f001 fa9c 	bl	800d944 <RCCEx_PLL3_Config>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	2100      	movs	r1, #0
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	f003 0310 	and.w	r3, r3, #16
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c438:	460b      	mov	r3, r1
 800c43a:	4313      	orrs	r3, r2
 800c43c:	d011      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c442:	3328      	adds	r3, #40	; 0x28
 800c444:	2101      	movs	r1, #1
 800c446:	4618      	mov	r0, r3
 800c448:	f001 fa7c 	bl	800d944 <RCCEx_PLL3_Config>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c45e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	2100      	movs	r1, #0
 800c46c:	6039      	str	r1, [r7, #0]
 800c46e:	f003 0320 	and.w	r3, r3, #32
 800c472:	607b      	str	r3, [r7, #4]
 800c474:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c478:	460b      	mov	r3, r1
 800c47a:	4313      	orrs	r3, r2
 800c47c:	d011      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c482:	3328      	adds	r3, #40	; 0x28
 800c484:	2102      	movs	r1, #2
 800c486:	4618      	mov	r0, r3
 800c488:	f001 fa5c 	bl	800d944 <RCCEx_PLL3_Config>
 800c48c:	4603      	mov	r3, r0
 800c48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c49a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c49e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c4a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e000      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4bc:	58024400 	.word	0x58024400

0800c4c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b090      	sub	sp, #64	; 0x40
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c4d2:	430b      	orrs	r3, r1
 800c4d4:	f040 8094 	bne.w	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c4d8:	4b9e      	ldr	r3, [pc, #632]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4dc:	f003 0307 	and.w	r3, r3, #7
 800c4e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	f200 8087 	bhi.w	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c4ea:	a201      	add	r2, pc, #4	; (adr r2, 800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f0:	0800c505 	.word	0x0800c505
 800c4f4:	0800c52d 	.word	0x0800c52d
 800c4f8:	0800c555 	.word	0x0800c555
 800c4fc:	0800c5f1 	.word	0x0800c5f1
 800c500:	0800c57d 	.word	0x0800c57d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c504:	4b93      	ldr	r3, [pc, #588]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c50c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c510:	d108      	bne.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c516:	4618      	mov	r0, r3
 800c518:	f001 f810 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c520:	f000 bd45 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c528:	f000 bd41 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c52c:	4b89      	ldr	r3, [pc, #548]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c538:	d108      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c53a:	f107 0318 	add.w	r3, r7, #24
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 fd54 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c548:	f000 bd31 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c550:	f000 bd2d 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c554:	4b7f      	ldr	r3, [pc, #508]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c560:	d108      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c562:	f107 030c 	add.w	r3, r7, #12
 800c566:	4618      	mov	r0, r3
 800c568:	f000 fe94 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c570:	f000 bd1d 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c578:	f000 bd19 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c57c:	4b75      	ldr	r3, [pc, #468]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c584:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c586:	4b73      	ldr	r3, [pc, #460]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0304 	and.w	r3, r3, #4
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d10c      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c598:	4b6e      	ldr	r3, [pc, #440]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	08db      	lsrs	r3, r3, #3
 800c59e:	f003 0303 	and.w	r3, r3, #3
 800c5a2:	4a6d      	ldr	r2, [pc, #436]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5aa:	e01f      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5ac:	4b69      	ldr	r3, [pc, #420]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b8:	d106      	bne.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5c0:	d102      	bne.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5c2:	4b66      	ldr	r3, [pc, #408]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c6:	e011      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5c8:	4b62      	ldr	r3, [pc, #392]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d4:	d106      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5dc:	d102      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5de:	4b60      	ldr	r3, [pc, #384]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e2:	e003      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5e8:	f000 bce1 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5ec:	f000 bcdf 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5f0:	4b5c      	ldr	r3, [pc, #368]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f4:	f000 bcdb 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fc:	f000 bcd7 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c604:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c608:	430b      	orrs	r3, r1
 800c60a:	f040 80ad 	bne.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c60e:	4b51      	ldr	r3, [pc, #324]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c612:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c616:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61e:	d056      	beq.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c626:	f200 8090 	bhi.w	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	2bc0      	cmp	r3, #192	; 0xc0
 800c62e:	f000 8088 	beq.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	2bc0      	cmp	r3, #192	; 0xc0
 800c636:	f200 8088 	bhi.w	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	2b80      	cmp	r3, #128	; 0x80
 800c63e:	d032      	beq.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	2b80      	cmp	r3, #128	; 0x80
 800c644:	f200 8081 	bhi.w	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	2b40      	cmp	r3, #64	; 0x40
 800c652:	d014      	beq.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c654:	e079      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c656:	4b3f      	ldr	r3, [pc, #252]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c65e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c662:	d108      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 ff67 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c672:	f000 bc9c 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67a:	f000 bc98 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c67e:	4b35      	ldr	r3, [pc, #212]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c68a:	d108      	bne.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c68c:	f107 0318 	add.w	r3, r7, #24
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fcab 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69a:	f000 bc88 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a2:	f000 bc84 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6a6:	4b2b      	ldr	r3, [pc, #172]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b2:	d108      	bne.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6b4:	f107 030c 	add.w	r3, r7, #12
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 fdeb 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c2:	f000 bc74 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ca:	f000 bc70 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6ce:	4b21      	ldr	r3, [pc, #132]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6d8:	4b1e      	ldr	r3, [pc, #120]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b04      	cmp	r3, #4
 800c6e2:	d10c      	bne.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d109      	bne.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6ea:	4b1a      	ldr	r3, [pc, #104]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	08db      	lsrs	r3, r3, #3
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	4a18      	ldr	r2, [pc, #96]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fc:	e01f      	b.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6fe:	4b15      	ldr	r3, [pc, #84]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c70a:	d106      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c712:	d102      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c714:	4b11      	ldr	r3, [pc, #68]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c718:	e011      	b.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c71a:	4b0e      	ldr	r3, [pc, #56]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c726:	d106      	bne.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c72e:	d102      	bne.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c730:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c734:	e003      	b.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c73a:	f000 bc38 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c73e:	f000 bc36 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c742:	4b08      	ldr	r3, [pc, #32]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c746:	f000 bc32 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74e:	f000 bc2e 	b.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c752:	bf00      	nop
 800c754:	58024400 	.word	0x58024400
 800c758:	03d09000 	.word	0x03d09000
 800c75c:	003d0900 	.word	0x003d0900
 800c760:	017d7840 	.word	0x017d7840
 800c764:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c76c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c770:	430b      	orrs	r3, r1
 800c772:	f040 809c 	bne.w	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c776:	4b9e      	ldr	r3, [pc, #632]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c77a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c77e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c786:	d054      	beq.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c78e:	f200 808b 	bhi.w	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c798:	f000 8083 	beq.w	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7a2:	f200 8081 	bhi.w	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ac:	d02f      	beq.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7b4:	d878      	bhi.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d004      	beq.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7c2:	d012      	beq.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7c4:	e070      	b.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7c6:	4b8a      	ldr	r3, [pc, #552]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7d2:	d107      	bne.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 feaf 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e2:	e3e4      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e8:	e3e1      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7ea:	4b81      	ldr	r3, [pc, #516]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7f6:	d107      	bne.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f8:	f107 0318 	add.w	r3, r7, #24
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fbf5 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c806:	e3d2      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80c:	e3cf      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c80e:	4b78      	ldr	r3, [pc, #480]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c81a:	d107      	bne.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c81c:	f107 030c 	add.w	r3, r7, #12
 800c820:	4618      	mov	r0, r3
 800c822:	f000 fd37 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c82a:	e3c0      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c830:	e3bd      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c832:	4b6f      	ldr	r3, [pc, #444]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c83a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c83c:	4b6c      	ldr	r3, [pc, #432]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b04      	cmp	r3, #4
 800c846:	d10c      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d109      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c84e:	4b68      	ldr	r3, [pc, #416]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	08db      	lsrs	r3, r3, #3
 800c854:	f003 0303 	and.w	r3, r3, #3
 800c858:	4a66      	ldr	r2, [pc, #408]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c85a:	fa22 f303 	lsr.w	r3, r2, r3
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c860:	e01e      	b.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c862:	4b63      	ldr	r3, [pc, #396]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c86e:	d106      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c876:	d102      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c878:	4b5f      	ldr	r3, [pc, #380]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c87c:	e010      	b.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c87e:	4b5c      	ldr	r3, [pc, #368]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c88a:	d106      	bne.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c892:	d102      	bne.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c894:	4b59      	ldr	r3, [pc, #356]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c898:	e002      	b.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c89e:	e386      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8a0:	e385      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8a2:	4b57      	ldr	r3, [pc, #348]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a6:	e382      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ac:	e37f      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c8ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	f040 80a7 	bne.w	800ca0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8bc:	4b4c      	ldr	r3, [pc, #304]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8cc:	d055      	beq.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8d4:	f200 8096 	bhi.w	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8de:	f000 8084 	beq.w	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8e8:	f200 808c 	bhi.w	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8f2:	d030      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8fa:	f200 8083 	bhi.w	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c90a:	d012      	beq.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c90c:	e07a      	b.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c90e:	4b38      	ldr	r3, [pc, #224]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c91a:	d107      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c91c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c920:	4618      	mov	r0, r3
 800c922:	f000 fe0b 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92a:	e340      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c930:	e33d      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c932:	4b2f      	ldr	r3, [pc, #188]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c93e:	d107      	bne.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c940:	f107 0318 	add.w	r3, r7, #24
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fb51 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c94e:	e32e      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c954:	e32b      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c956:	4b26      	ldr	r3, [pc, #152]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c962:	d107      	bne.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c964:	f107 030c 	add.w	r3, r7, #12
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fc93 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c972:	e31c      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c978:	e319      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c97a:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c97e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c982:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c984:	4b1a      	ldr	r3, [pc, #104]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0304 	and.w	r3, r3, #4
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d10c      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c992:	2b00      	cmp	r3, #0
 800c994:	d109      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c996:	4b16      	ldr	r3, [pc, #88]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	08db      	lsrs	r3, r3, #3
 800c99c:	f003 0303 	and.w	r3, r3, #3
 800c9a0:	4a14      	ldr	r2, [pc, #80]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a8:	e01e      	b.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9aa:	4b11      	ldr	r3, [pc, #68]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b6:	d106      	bne.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9be:	d102      	bne.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9c0:	4b0d      	ldr	r3, [pc, #52]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9c4:	e010      	b.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9c6:	4b0a      	ldr	r3, [pc, #40]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9d2:	d106      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9da:	d102      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9dc:	4b07      	ldr	r3, [pc, #28]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9e0:	e002      	b.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9e6:	e2e2      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9e8:	e2e1      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9ea:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ee:	e2de      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9f0:	58024400 	.word	0x58024400
 800c9f4:	03d09000 	.word	0x03d09000
 800c9f8:	003d0900 	.word	0x003d0900
 800c9fc:	017d7840 	.word	0x017d7840
 800ca00:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca08:	e2d1      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca0e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca12:	430b      	orrs	r3, r1
 800ca14:	f040 809c 	bne.w	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca18:	4b93      	ldr	r3, [pc, #588]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca28:	d054      	beq.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca30:	f200 808b 	bhi.w	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca3a:	f000 8083 	beq.w	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca44:	f200 8081 	bhi.w	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4e:	d02f      	beq.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca56:	d878      	bhi.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d004      	beq.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca64:	d012      	beq.n	800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ca66:	e070      	b.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca68:	4b7f      	ldr	r3, [pc, #508]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca74:	d107      	bne.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 fd5e 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca84:	e293      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca8a:	e290      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca8c:	4b76      	ldr	r3, [pc, #472]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca98:	d107      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca9a:	f107 0318 	add.w	r3, r7, #24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 faa4 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa8:	e281      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caae:	e27e      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cab0:	4b6d      	ldr	r3, [pc, #436]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cabc:	d107      	bne.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cabe:	f107 030c 	add.w	r3, r7, #12
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fbe6 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cacc:	e26f      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad2:	e26c      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cad4:	4b64      	ldr	r3, [pc, #400]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cadc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cade:	4b62      	ldr	r3, [pc, #392]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0304 	and.w	r3, r3, #4
 800cae6:	2b04      	cmp	r3, #4
 800cae8:	d10c      	bne.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800caea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caec:	2b00      	cmp	r3, #0
 800caee:	d109      	bne.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caf0:	4b5d      	ldr	r3, [pc, #372]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	08db      	lsrs	r3, r3, #3
 800caf6:	f003 0303 	and.w	r3, r3, #3
 800cafa:	4a5c      	ldr	r2, [pc, #368]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cafc:	fa22 f303 	lsr.w	r3, r2, r3
 800cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb02:	e01e      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb04:	4b58      	ldr	r3, [pc, #352]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb10:	d106      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb18:	d102      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb1a:	4b55      	ldr	r3, [pc, #340]	; (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb1e:	e010      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb20:	4b51      	ldr	r3, [pc, #324]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb2c:	d106      	bne.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb34:	d102      	bne.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb36:	4b4f      	ldr	r3, [pc, #316]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb3a:	e002      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb40:	e235      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb42:	e234      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb44:	4b4c      	ldr	r3, [pc, #304]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb48:	e231      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4e:	e22e      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb54:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	f040 808f 	bne.w	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb5e:	4b42      	ldr	r3, [pc, #264]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb62:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb66:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb6e:	d06b      	beq.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb76:	d874      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb7e:	d056      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb86:	d86c      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb8e:	d03b      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb96:	d864      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb9e:	d021      	beq.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cba6:	d85c      	bhi.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d004      	beq.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb4:	d004      	beq.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cbb6:	e054      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cbb8:	f7fe fa0a 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 800cbbc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbbe:	e1f6      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbc0:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbcc:	d107      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbce:	f107 0318 	add.w	r3, r7, #24
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fa0a 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbdc:	e1e7      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe2:	e1e4      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe4:	4b20      	ldr	r3, [pc, #128]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf0:	d107      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf2:	f107 030c 	add.w	r3, r7, #12
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fb4c 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc00:	e1d5      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc06:	e1d2      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc08:	4b17      	ldr	r3, [pc, #92]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	d109      	bne.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc14:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	08db      	lsrs	r3, r3, #3
 800cc1a:	f003 0303 	and.w	r3, r3, #3
 800cc1e:	4a13      	ldr	r2, [pc, #76]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc20:	fa22 f303 	lsr.w	r3, r2, r3
 800cc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc26:	e1c2      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc2c:	e1bf      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc2e:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc3a:	d102      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cc3c:	4b0c      	ldr	r3, [pc, #48]	; (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc40:	e1b5      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc46:	e1b2      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc48:	4b07      	ldr	r3, [pc, #28]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc54:	d102      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cc56:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc5a:	e1a8      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc60:	e1a5      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc66:	e1a2      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc68:	58024400 	.word	0x58024400
 800cc6c:	03d09000 	.word	0x03d09000
 800cc70:	003d0900 	.word	0x003d0900
 800cc74:	017d7840 	.word	0x017d7840
 800cc78:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc80:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc84:	430b      	orrs	r3, r1
 800cc86:	d173      	bne.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc88:	4b9c      	ldr	r3, [pc, #624]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc98:	d02f      	beq.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cca0:	d863      	bhi.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d004      	beq.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccae:	d012      	beq.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ccb0:	e05b      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccb2:	4b92      	ldr	r3, [pc, #584]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccbe:	d107      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccc0:	f107 0318 	add.w	r3, r7, #24
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f991 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccce:	e16e      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd4:	e16b      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccd6:	4b89      	ldr	r3, [pc, #548]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cce2:	d107      	bne.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cce4:	f107 030c 	add.w	r3, r7, #12
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fad3 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf2:	e15c      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf8:	e159      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccfa:	4b80      	ldr	r3, [pc, #512]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd04:	4b7d      	ldr	r3, [pc, #500]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0304 	and.w	r3, r3, #4
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d10c      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d109      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd16:	4b79      	ldr	r3, [pc, #484]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	08db      	lsrs	r3, r3, #3
 800cd1c:	f003 0303 	and.w	r3, r3, #3
 800cd20:	4a77      	ldr	r2, [pc, #476]	; (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd22:	fa22 f303 	lsr.w	r3, r2, r3
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd28:	e01e      	b.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd2a:	4b74      	ldr	r3, [pc, #464]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd36:	d106      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd3e:	d102      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd40:	4b70      	ldr	r3, [pc, #448]	; (800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd44:	e010      	b.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd46:	4b6d      	ldr	r3, [pc, #436]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd52:	d106      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5a:	d102      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd5c:	4b6a      	ldr	r3, [pc, #424]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd60:	e002      	b.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd66:	e122      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd68:	e121      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd6e:	e11e      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd74:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	d133      	bne.n	800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd7c:	4b5f      	ldr	r3, [pc, #380]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd84:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd92:	d012      	beq.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cd94:	e023      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd96:	4b59      	ldr	r3, [pc, #356]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cda2:	d107      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cda4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fbc7 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb2:	e0fc      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e0f9      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdba:	4b50      	ldr	r3, [pc, #320]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdc6:	d107      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc8:	f107 0318 	add.w	r3, r7, #24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 f90d 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdd6:	e0ea      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cddc:	e0e7      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde2:	e0e4      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cde4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cdec:	430b      	orrs	r3, r1
 800cdee:	f040 808d 	bne.w	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdf2:	4b42      	ldr	r3, [pc, #264]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cdfa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce02:	d06b      	beq.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce0a:	d874      	bhi.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce12:	d056      	beq.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce1a:	d86c      	bhi.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce22:	d03b      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce2a:	d864      	bhi.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce32:	d021      	beq.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce3a:	d85c      	bhi.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d004      	beq.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce48:	d004      	beq.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ce4a:	e054      	b.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce4c:	f000 f8b8 	bl	800cfc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce52:	e0ac      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce54:	4b29      	ldr	r3, [pc, #164]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce60:	d107      	bne.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce62:	f107 0318 	add.w	r3, r7, #24
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 f8c0 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce70:	e09d      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce76:	e09a      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce78:	4b20      	ldr	r3, [pc, #128]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce84:	d107      	bne.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce86:	f107 030c 	add.w	r3, r7, #12
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 fa02 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce94:	e08b      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9a:	e088      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce9c:	4b17      	ldr	r3, [pc, #92]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b04      	cmp	r3, #4
 800cea6:	d109      	bne.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cea8:	4b14      	ldr	r3, [pc, #80]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	08db      	lsrs	r3, r3, #3
 800ceae:	f003 0303 	and.w	r3, r3, #3
 800ceb2:	4a13      	ldr	r2, [pc, #76]	; (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ceb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceba:	e078      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec0:	e075      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cec2:	4b0e      	ldr	r3, [pc, #56]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cece:	d102      	bne.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ced0:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced4:	e06b      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceda:	e068      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cee8:	d102      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ceea:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceee:	e05e      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef4:	e05b      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefa:	e058      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cefc:	58024400 	.word	0x58024400
 800cf00:	03d09000 	.word	0x03d09000
 800cf04:	003d0900 	.word	0x003d0900
 800cf08:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf10:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf14:	430b      	orrs	r3, r1
 800cf16:	d148      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf18:	4b27      	ldr	r3, [pc, #156]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf28:	d02a      	beq.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf30:	d838      	bhi.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d004      	beq.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf3e:	d00d      	beq.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cf40:	e030      	b.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf42:	4b1d      	ldr	r3, [pc, #116]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf4e:	d102      	bne.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cf50:	4b1a      	ldr	r3, [pc, #104]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf54:	e02b      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e028      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf5c:	4b16      	ldr	r3, [pc, #88]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf68:	d107      	bne.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 fae4 	bl	800d53c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf78:	e019      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7e:	e016      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf80:	4b0d      	ldr	r3, [pc, #52]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf8c:	d107      	bne.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf8e:	f107 0318 	add.w	r3, r7, #24
 800cf92:	4618      	mov	r0, r3
 800cf94:	f000 f82a 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf9c:	e007      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa2:	e004      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa8:	e001      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3740      	adds	r7, #64	; 0x40
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	58024400 	.word	0x58024400
 800cfbc:	017d7840 	.word	0x017d7840

0800cfc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfc4:	f7fd ffd4 	bl	800af70 <HAL_RCC_GetHCLKFreq>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	4b06      	ldr	r3, [pc, #24]	; (800cfe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	091b      	lsrs	r3, r3, #4
 800cfd0:	f003 0307 	and.w	r3, r3, #7
 800cfd4:	4904      	ldr	r1, [pc, #16]	; (800cfe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfd6:	5ccb      	ldrb	r3, [r1, r3]
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	58024400 	.word	0x58024400
 800cfe8:	080170a4 	.word	0x080170a4

0800cfec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b089      	sub	sp, #36	; 0x24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cff4:	4ba1      	ldr	r3, [pc, #644]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff8:	f003 0303 	and.w	r3, r3, #3
 800cffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cffe:	4b9f      	ldr	r3, [pc, #636]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d002:	0b1b      	lsrs	r3, r3, #12
 800d004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d00a:	4b9c      	ldr	r3, [pc, #624]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00e:	091b      	lsrs	r3, r3, #4
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d016:	4b99      	ldr	r3, [pc, #612]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	08db      	lsrs	r3, r3, #3
 800d01c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	fb02 f303 	mul.w	r3, r2, r3
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8111 	beq.w	800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	f000 8083 	beq.w	800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	2b02      	cmp	r3, #2
 800d046:	f200 80a1 	bhi.w	800d18c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d003      	beq.n	800d058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d056      	beq.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d056:	e099      	b.n	800d18c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d058:	4b88      	ldr	r3, [pc, #544]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f003 0320 	and.w	r3, r3, #32
 800d060:	2b00      	cmp	r3, #0
 800d062:	d02d      	beq.n	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d064:	4b85      	ldr	r3, [pc, #532]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	08db      	lsrs	r3, r3, #3
 800d06a:	f003 0303 	and.w	r3, r3, #3
 800d06e:	4a84      	ldr	r2, [pc, #528]	; (800d280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d070:	fa22 f303 	lsr.w	r3, r2, r3
 800d074:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	ee07 3a90 	vmov	s15, r3
 800d07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d08e:	4b7b      	ldr	r3, [pc, #492]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0be:	e087      	b.n	800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d2:	4b6a      	ldr	r3, [pc, #424]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d102:	e065      	b.n	800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d116:	4b59      	ldr	r3, [pc, #356]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11e:	ee07 3a90 	vmov	s15, r3
 800d122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d126:	ed97 6a03 	vldr	s12, [r7, #12]
 800d12a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d146:	e043      	b.n	800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d15a:	4b48      	ldr	r3, [pc, #288]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d162:	ee07 3a90 	vmov	s15, r3
 800d166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d16a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d16e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d17a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d18a:	e021      	b.n	800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d19e:	4b37      	ldr	r3, [pc, #220]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a6:	ee07 3a90 	vmov	s15, r3
 800d1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1d0:	4b2a      	ldr	r3, [pc, #168]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d4:	0a5b      	lsrs	r3, r3, #9
 800d1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1da:	ee07 3a90 	vmov	s15, r3
 800d1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1f6:	ee17 2a90 	vmov	r2, s15
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d1fe:	4b1f      	ldr	r3, [pc, #124]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d202:	0c1b      	lsrs	r3, r3, #16
 800d204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d208:	ee07 3a90 	vmov	s15, r3
 800d20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d214:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d218:	edd7 6a07 	vldr	s13, [r7, #28]
 800d21c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d224:	ee17 2a90 	vmov	r2, s15
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d22c:	4b13      	ldr	r3, [pc, #76]	; (800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d230:	0e1b      	lsrs	r3, r3, #24
 800d232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d23e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d242:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d246:	edd7 6a07 	vldr	s13, [r7, #28]
 800d24a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d24e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d252:	ee17 2a90 	vmov	r2, s15
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d25a:	e008      	b.n	800d26e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	609a      	str	r2, [r3, #8]
}
 800d26e:	bf00      	nop
 800d270:	3724      	adds	r7, #36	; 0x24
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop
 800d27c:	58024400 	.word	0x58024400
 800d280:	03d09000 	.word	0x03d09000
 800d284:	46000000 	.word	0x46000000
 800d288:	4c742400 	.word	0x4c742400
 800d28c:	4a742400 	.word	0x4a742400
 800d290:	4bbebc20 	.word	0x4bbebc20

0800d294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d294:	b480      	push	{r7}
 800d296:	b089      	sub	sp, #36	; 0x24
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d29c:	4ba1      	ldr	r3, [pc, #644]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a0:	f003 0303 	and.w	r3, r3, #3
 800d2a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d2a6:	4b9f      	ldr	r3, [pc, #636]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2aa:	0d1b      	lsrs	r3, r3, #20
 800d2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2b2:	4b9c      	ldr	r3, [pc, #624]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b6:	0a1b      	lsrs	r3, r3, #8
 800d2b8:	f003 0301 	and.w	r3, r3, #1
 800d2bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2be:	4b99      	ldr	r3, [pc, #612]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c2:	08db      	lsrs	r3, r3, #3
 800d2c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	fb02 f303 	mul.w	r3, r2, r3
 800d2ce:	ee07 3a90 	vmov	s15, r3
 800d2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 8111 	beq.w	800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	f000 8083 	beq.w	800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	2b02      	cmp	r3, #2
 800d2ee:	f200 80a1 	bhi.w	800d434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d003      	beq.n	800d300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d056      	beq.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d2fe:	e099      	b.n	800d434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d300:	4b88      	ldr	r3, [pc, #544]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d02d      	beq.n	800d368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d30c:	4b85      	ldr	r3, [pc, #532]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	08db      	lsrs	r3, r3, #3
 800d312:	f003 0303 	and.w	r3, r3, #3
 800d316:	4a84      	ldr	r2, [pc, #528]	; (800d528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d318:	fa22 f303 	lsr.w	r3, r2, r3
 800d31c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	ee07 3a90 	vmov	s15, r3
 800d324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	ee07 3a90 	vmov	s15, r3
 800d32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d336:	4b7b      	ldr	r3, [pc, #492]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d346:	ed97 6a03 	vldr	s12, [r7, #12]
 800d34a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d362:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d366:	e087      	b.n	800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d37a:	4b6a      	ldr	r3, [pc, #424]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d38a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d38e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3aa:	e065      	b.n	800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	ee07 3a90 	vmov	s15, r3
 800d3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3be:	4b59      	ldr	r3, [pc, #356]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3c6:	ee07 3a90 	vmov	s15, r3
 800d3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ee:	e043      	b.n	800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	ee07 3a90 	vmov	s15, r3
 800d3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d402:	4b48      	ldr	r3, [pc, #288]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40a:	ee07 3a90 	vmov	s15, r3
 800d40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d412:	ed97 6a03 	vldr	s12, [r7, #12]
 800d416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d432:	e021      	b.n	800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d446:	4b37      	ldr	r3, [pc, #220]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44e:	ee07 3a90 	vmov	s15, r3
 800d452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d456:	ed97 6a03 	vldr	s12, [r7, #12]
 800d45a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d478:	4b2a      	ldr	r3, [pc, #168]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47c:	0a5b      	lsrs	r3, r3, #9
 800d47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d48a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d48e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d492:	edd7 6a07 	vldr	s13, [r7, #28]
 800d496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d49e:	ee17 2a90 	vmov	r2, s15
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d4a6:	4b1f      	ldr	r3, [pc, #124]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4aa:	0c1b      	lsrs	r3, r3, #16
 800d4ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b0:	ee07 3a90 	vmov	s15, r3
 800d4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4cc:	ee17 2a90 	vmov	r2, s15
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4d4:	4b13      	ldr	r3, [pc, #76]	; (800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d8:	0e1b      	lsrs	r3, r3, #24
 800d4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4de:	ee07 3a90 	vmov	s15, r3
 800d4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4fa:	ee17 2a90 	vmov	r2, s15
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d502:	e008      	b.n	800d516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	609a      	str	r2, [r3, #8]
}
 800d516:	bf00      	nop
 800d518:	3724      	adds	r7, #36	; 0x24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	58024400 	.word	0x58024400
 800d528:	03d09000 	.word	0x03d09000
 800d52c:	46000000 	.word	0x46000000
 800d530:	4c742400 	.word	0x4c742400
 800d534:	4a742400 	.word	0x4a742400
 800d538:	4bbebc20 	.word	0x4bbebc20

0800d53c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b089      	sub	sp, #36	; 0x24
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d544:	4ba0      	ldr	r3, [pc, #640]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d548:	f003 0303 	and.w	r3, r3, #3
 800d54c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d54e:	4b9e      	ldr	r3, [pc, #632]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d552:	091b      	lsrs	r3, r3, #4
 800d554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d558:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d55a:	4b9b      	ldr	r3, [pc, #620]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d564:	4b98      	ldr	r3, [pc, #608]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d568:	08db      	lsrs	r3, r3, #3
 800d56a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	fb02 f303 	mul.w	r3, r2, r3
 800d574:	ee07 3a90 	vmov	s15, r3
 800d578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d57c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f000 8111 	beq.w	800d7aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	f000 8083 	beq.w	800d696 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2b02      	cmp	r3, #2
 800d594:	f200 80a1 	bhi.w	800d6da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d003      	beq.n	800d5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d056      	beq.n	800d652 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d5a4:	e099      	b.n	800d6da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5a6:	4b88      	ldr	r3, [pc, #544]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0320 	and.w	r3, r3, #32
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d02d      	beq.n	800d60e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5b2:	4b85      	ldr	r3, [pc, #532]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	08db      	lsrs	r3, r3, #3
 800d5b8:	f003 0303 	and.w	r3, r3, #3
 800d5bc:	4a83      	ldr	r2, [pc, #524]	; (800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5be:	fa22 f303 	lsr.w	r3, r2, r3
 800d5c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	ee07 3a90 	vmov	s15, r3
 800d5d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5dc:	4b7a      	ldr	r3, [pc, #488]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e4:	ee07 3a90 	vmov	s15, r3
 800d5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d608:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d60c:	e087      	b.n	800d71e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d618:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d61c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d620:	4b69      	ldr	r3, [pc, #420]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d628:	ee07 3a90 	vmov	s15, r3
 800d62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d630:	ed97 6a03 	vldr	s12, [r7, #12]
 800d634:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d63c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d64c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d650:	e065      	b.n	800d71e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	ee07 3a90 	vmov	s15, r3
 800d658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d664:	4b58      	ldr	r3, [pc, #352]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d66c:	ee07 3a90 	vmov	s15, r3
 800d670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d674:	ed97 6a03 	vldr	s12, [r7, #12]
 800d678:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d67c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d690:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d694:	e043      	b.n	800d71e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	ee07 3a90 	vmov	s15, r3
 800d69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d6a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6a8:	4b47      	ldr	r3, [pc, #284]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b0:	ee07 3a90 	vmov	s15, r3
 800d6b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6d8:	e021      	b.n	800d71e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	ee07 3a90 	vmov	s15, r3
 800d6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ec:	4b36      	ldr	r3, [pc, #216]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f4:	ee07 3a90 	vmov	s15, r3
 800d6f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d700:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d70c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d714:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d718:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d71c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d71e:	4b2a      	ldr	r3, [pc, #168]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d722:	0a5b      	lsrs	r3, r3, #9
 800d724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d728:	ee07 3a90 	vmov	s15, r3
 800d72c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d734:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d738:	edd7 6a07 	vldr	s13, [r7, #28]
 800d73c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d744:	ee17 2a90 	vmov	r2, s15
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d74c:	4b1e      	ldr	r3, [pc, #120]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d750:	0c1b      	lsrs	r3, r3, #16
 800d752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d756:	ee07 3a90 	vmov	s15, r3
 800d75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d75e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d762:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d766:	edd7 6a07 	vldr	s13, [r7, #28]
 800d76a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d76e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d772:	ee17 2a90 	vmov	r2, s15
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d77a:	4b13      	ldr	r3, [pc, #76]	; (800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77e:	0e1b      	lsrs	r3, r3, #24
 800d780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d784:	ee07 3a90 	vmov	s15, r3
 800d788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d78c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d790:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d794:	edd7 6a07 	vldr	s13, [r7, #28]
 800d798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d79c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a0:	ee17 2a90 	vmov	r2, s15
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d7a8:	e008      	b.n	800d7bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	609a      	str	r2, [r3, #8]
}
 800d7bc:	bf00      	nop
 800d7be:	3724      	adds	r7, #36	; 0x24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	58024400 	.word	0x58024400
 800d7cc:	03d09000 	.word	0x03d09000
 800d7d0:	46000000 	.word	0x46000000
 800d7d4:	4c742400 	.word	0x4c742400
 800d7d8:	4a742400 	.word	0x4a742400
 800d7dc:	4bbebc20 	.word	0x4bbebc20

0800d7e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7ee:	4b53      	ldr	r3, [pc, #332]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f2:	f003 0303 	and.w	r3, r3, #3
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d101      	bne.n	800d7fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e099      	b.n	800d932 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7fe:	4b4f      	ldr	r3, [pc, #316]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a4e      	ldr	r2, [pc, #312]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d804:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d80a:	f7f6 fc53 	bl	80040b4 <HAL_GetTick>
 800d80e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d810:	e008      	b.n	800d824 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d812:	f7f6 fc4f 	bl	80040b4 <HAL_GetTick>
 800d816:	4602      	mov	r2, r0
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d901      	bls.n	800d824 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e086      	b.n	800d932 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d824:	4b45      	ldr	r3, [pc, #276]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1f0      	bne.n	800d812 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d830:	4b42      	ldr	r3, [pc, #264]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d834:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	031b      	lsls	r3, r3, #12
 800d83e:	493f      	ldr	r1, [pc, #252]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d840:	4313      	orrs	r3, r2
 800d842:	628b      	str	r3, [r1, #40]	; 0x28
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	3b01      	subs	r3, #1
 800d84a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	3b01      	subs	r3, #1
 800d854:	025b      	lsls	r3, r3, #9
 800d856:	b29b      	uxth	r3, r3
 800d858:	431a      	orrs	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	3b01      	subs	r3, #1
 800d860:	041b      	lsls	r3, r3, #16
 800d862:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d866:	431a      	orrs	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	061b      	lsls	r3, r3, #24
 800d870:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d874:	4931      	ldr	r1, [pc, #196]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d876:	4313      	orrs	r3, r2
 800d878:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d87a:	4b30      	ldr	r3, [pc, #192]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	695b      	ldr	r3, [r3, #20]
 800d886:	492d      	ldr	r1, [pc, #180]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d888:	4313      	orrs	r3, r2
 800d88a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d88c:	4b2b      	ldr	r3, [pc, #172]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	f023 0220 	bic.w	r2, r3, #32
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	4928      	ldr	r1, [pc, #160]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d89a:	4313      	orrs	r3, r2
 800d89c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d89e:	4b27      	ldr	r3, [pc, #156]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a2:	4a26      	ldr	r2, [pc, #152]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8a4:	f023 0310 	bic.w	r3, r3, #16
 800d8a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8aa:	4b24      	ldr	r3, [pc, #144]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ae:	4b24      	ldr	r3, [pc, #144]	; (800d940 <RCCEx_PLL2_Config+0x160>)
 800d8b0:	4013      	ands	r3, r2
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	69d2      	ldr	r2, [r2, #28]
 800d8b6:	00d2      	lsls	r2, r2, #3
 800d8b8:	4920      	ldr	r1, [pc, #128]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8be:	4b1f      	ldr	r3, [pc, #124]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c2:	4a1e      	ldr	r2, [pc, #120]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8c4:	f043 0310 	orr.w	r3, r3, #16
 800d8c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d106      	bne.n	800d8de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8d0:	4b1a      	ldr	r3, [pc, #104]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d4:	4a19      	ldr	r2, [pc, #100]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8dc:	e00f      	b.n	800d8fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d106      	bne.n	800d8f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8e4:	4b15      	ldr	r3, [pc, #84]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e8:	4a14      	ldr	r2, [pc, #80]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8f0:	e005      	b.n	800d8fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8f2:	4b12      	ldr	r3, [pc, #72]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f6:	4a11      	ldr	r2, [pc, #68]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d8f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4a0e      	ldr	r2, [pc, #56]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d90a:	f7f6 fbd3 	bl	80040b4 <HAL_GetTick>
 800d90e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d910:	e008      	b.n	800d924 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d912:	f7f6 fbcf 	bl	80040b4 <HAL_GetTick>
 800d916:	4602      	mov	r2, r0
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d901      	bls.n	800d924 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d920:	2303      	movs	r3, #3
 800d922:	e006      	b.n	800d932 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d924:	4b05      	ldr	r3, [pc, #20]	; (800d93c <RCCEx_PLL2_Config+0x15c>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0f0      	beq.n	800d912 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d930:	7bfb      	ldrb	r3, [r7, #15]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	58024400 	.word	0x58024400
 800d940:	ffff0007 	.word	0xffff0007

0800d944 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d952:	4b53      	ldr	r3, [pc, #332]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d956:	f003 0303 	and.w	r3, r3, #3
 800d95a:	2b03      	cmp	r3, #3
 800d95c:	d101      	bne.n	800d962 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	e099      	b.n	800da96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d962:	4b4f      	ldr	r3, [pc, #316]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a4e      	ldr	r2, [pc, #312]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d96c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d96e:	f7f6 fba1 	bl	80040b4 <HAL_GetTick>
 800d972:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d974:	e008      	b.n	800d988 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d976:	f7f6 fb9d 	bl	80040b4 <HAL_GetTick>
 800d97a:	4602      	mov	r2, r0
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	2b02      	cmp	r3, #2
 800d982:	d901      	bls.n	800d988 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d984:	2303      	movs	r3, #3
 800d986:	e086      	b.n	800da96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d988:	4b45      	ldr	r3, [pc, #276]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1f0      	bne.n	800d976 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d994:	4b42      	ldr	r3, [pc, #264]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d998:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	051b      	lsls	r3, r3, #20
 800d9a2:	493f      	ldr	r1, [pc, #252]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	628b      	str	r3, [r1, #40]	; 0x28
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	025b      	lsls	r3, r3, #9
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	041b      	lsls	r3, r3, #16
 800d9c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	061b      	lsls	r3, r3, #24
 800d9d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9d8:	4931      	ldr	r1, [pc, #196]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9de:	4b30      	ldr	r3, [pc, #192]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	492d      	ldr	r1, [pc, #180]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9f0:	4b2b      	ldr	r3, [pc, #172]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	4928      	ldr	r1, [pc, #160]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800d9fe:	4313      	orrs	r3, r2
 800da00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da02:	4b27      	ldr	r3, [pc, #156]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da06:	4a26      	ldr	r2, [pc, #152]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da0e:	4b24      	ldr	r3, [pc, #144]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da12:	4b24      	ldr	r3, [pc, #144]	; (800daa4 <RCCEx_PLL3_Config+0x160>)
 800da14:	4013      	ands	r3, r2
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	69d2      	ldr	r2, [r2, #28]
 800da1a:	00d2      	lsls	r2, r2, #3
 800da1c:	4920      	ldr	r1, [pc, #128]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da22:	4b1f      	ldr	r3, [pc, #124]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	4a1e      	ldr	r2, [pc, #120]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d106      	bne.n	800da42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da34:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da38:	4a19      	ldr	r2, [pc, #100]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da40:	e00f      	b.n	800da62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d106      	bne.n	800da56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da48:	4b15      	ldr	r3, [pc, #84]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	4a14      	ldr	r2, [pc, #80]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da54:	e005      	b.n	800da62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da56:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5a:	4a11      	ldr	r2, [pc, #68]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da62:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a0e      	ldr	r2, [pc, #56]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da6e:	f7f6 fb21 	bl	80040b4 <HAL_GetTick>
 800da72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da74:	e008      	b.n	800da88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da76:	f7f6 fb1d 	bl	80040b4 <HAL_GetTick>
 800da7a:	4602      	mov	r2, r0
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	2b02      	cmp	r3, #2
 800da82:	d901      	bls.n	800da88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da84:	2303      	movs	r3, #3
 800da86:	e006      	b.n	800da96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da88:	4b05      	ldr	r3, [pc, #20]	; (800daa0 <RCCEx_PLL3_Config+0x15c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0f0      	beq.n	800da76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da94:	7bfb      	ldrb	r3, [r7, #15]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	58024400 	.word	0x58024400
 800daa4:	ffff0007 	.word	0xffff0007

0800daa8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d071      	beq.n	800db9e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d106      	bne.n	800dad4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7f4 fdbe 	bl	8002650 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2202      	movs	r2, #2
 800dad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	f003 0310 	and.w	r3, r3, #16
 800dae6:	2b10      	cmp	r3, #16
 800dae8:	d050      	beq.n	800db8c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	22ca      	movs	r2, #202	; 0xca
 800daf0:	625a      	str	r2, [r3, #36]	; 0x24
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2253      	movs	r2, #83	; 0x53
 800daf8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fa4a 	bl	800df94 <RTC_EnterInitMode>
 800db00:	4603      	mov	r3, r0
 800db02:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d124      	bne.n	800db54 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	6899      	ldr	r1, [r3, #8]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	4b24      	ldr	r3, [pc, #144]	; (800dba8 <HAL_RTC_Init+0x100>)
 800db16:	400b      	ands	r3, r1
 800db18:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6899      	ldr	r1, [r3, #8]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	431a      	orrs	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	699b      	ldr	r3, [r3, #24]
 800db2e:	431a      	orrs	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	430a      	orrs	r2, r1
 800db36:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	0419      	lsls	r1, r3, #16
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68da      	ldr	r2, [r3, #12]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 fa56 	bl	800dffc <RTC_ExitInitMode>
 800db50:	4603      	mov	r3, r0
 800db52:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d113      	bne.n	800db82 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f022 0203 	bic.w	r2, r2, #3
 800db68:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	69da      	ldr	r2, [r3, #28]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	431a      	orrs	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	430a      	orrs	r2, r1
 800db80:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	22ff      	movs	r2, #255	; 0xff
 800db88:	625a      	str	r2, [r3, #36]	; 0x24
 800db8a:	e001      	b.n	800db90 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800db90:	7bfb      	ldrb	r3, [r7, #15]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	ff8fffbf 	.word	0xff8fffbf

0800dbac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbac:	b590      	push	{r4, r7, lr}
 800dbae:	b087      	sub	sp, #28
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d101      	bne.n	800dbc6 <HAL_RTC_SetTime+0x1a>
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	e089      	b.n	800dcda <HAL_RTC_SetTime+0x12e>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2202      	movs	r2, #2
 800dbd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	22ca      	movs	r2, #202	; 0xca
 800dbdc:	625a      	str	r2, [r3, #36]	; 0x24
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2253      	movs	r2, #83	; 0x53
 800dbe4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f9d4 	bl	800df94 <RTC_EnterInitMode>
 800dbec:	4603      	mov	r3, r0
 800dbee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbf0:	7cfb      	ldrb	r3, [r7, #19]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d161      	bne.n	800dcba <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d126      	bne.n	800dc4a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d102      	bne.n	800dc10 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 fa2f 	bl	800e078 <RTC_ByteToBcd2>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	785b      	ldrb	r3, [r3, #1]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 fa28 	bl	800e078 <RTC_ByteToBcd2>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc2c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	789b      	ldrb	r3, [r3, #2]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fa20 	bl	800e078 <RTC_ByteToBcd2>
 800dc38:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc3a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	78db      	ldrb	r3, [r3, #3]
 800dc42:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc44:	4313      	orrs	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	e018      	b.n	800dc7c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	785b      	ldrb	r3, [r3, #1]
 800dc68:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc6a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc70:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	78db      	ldrb	r3, [r3, #3]
 800dc76:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	6979      	ldr	r1, [r7, #20]
 800dc82:	4b18      	ldr	r3, [pc, #96]	; (800dce4 <HAL_RTC_SetTime+0x138>)
 800dc84:	400b      	ands	r3, r1
 800dc86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	689a      	ldr	r2, [r3, #8]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dc96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6899      	ldr	r1, [r3, #8]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	68da      	ldr	r2, [r3, #12]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	431a      	orrs	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	430a      	orrs	r2, r1
 800dcae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 f9a3 	bl	800dffc <RTC_ExitInitMode>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	22ff      	movs	r2, #255	; 0xff
 800dcc0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dcc2:	7cfb      	ldrb	r3, [r7, #19]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d103      	bne.n	800dcd0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2201      	movs	r2, #1
 800dccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dcd8:	7cfb      	ldrb	r3, [r7, #19]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd90      	pop	{r4, r7, pc}
 800dce2:	bf00      	nop
 800dce4:	007f7f7f 	.word	0x007f7f7f

0800dce8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b086      	sub	sp, #24
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4b22      	ldr	r3, [pc, #136]	; (800dd9c <HAL_RTC_GetTime+0xb4>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	0c1b      	lsrs	r3, r3, #16
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	0a1b      	lsrs	r3, r3, #8
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	0d9b      	lsrs	r3, r3, #22
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	f003 0301 	and.w	r3, r3, #1
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d11a      	bne.n	800dd92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 f9a9 	bl	800e0b8 <RTC_Bcd2ToByte>
 800dd66:	4603      	mov	r3, r0
 800dd68:	461a      	mov	r2, r3
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	785b      	ldrb	r3, [r3, #1]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f000 f9a0 	bl	800e0b8 <RTC_Bcd2ToByte>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	789b      	ldrb	r3, [r3, #2]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f000 f997 	bl	800e0b8 <RTC_Bcd2ToByte>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	007f7f7f 	.word	0x007f7f7f

0800dda0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d101      	bne.n	800ddba <HAL_RTC_SetDate+0x1a>
 800ddb6:	2302      	movs	r3, #2
 800ddb8:	e073      	b.n	800dea2 <HAL_RTC_SetDate+0x102>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10e      	bne.n	800ddee <HAL_RTC_SetDate+0x4e>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	f003 0310 	and.w	r3, r3, #16
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d008      	beq.n	800ddee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	f023 0310 	bic.w	r3, r3, #16
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	330a      	adds	r3, #10
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d11c      	bne.n	800de2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	78db      	ldrb	r3, [r3, #3]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 f93d 	bl	800e078 <RTC_ByteToBcd2>
 800ddfe:	4603      	mov	r3, r0
 800de00:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	4618      	mov	r0, r3
 800de08:	f000 f936 	bl	800e078 <RTC_ByteToBcd2>
 800de0c:	4603      	mov	r3, r0
 800de0e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de10:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	789b      	ldrb	r3, [r3, #2]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 f92e 	bl	800e078 <RTC_ByteToBcd2>
 800de1c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de1e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de28:	4313      	orrs	r3, r2
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	e00e      	b.n	800de4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	78db      	ldrb	r3, [r3, #3]
 800de32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	785b      	ldrb	r3, [r3, #1]
 800de38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de48:	4313      	orrs	r3, r2
 800de4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	22ca      	movs	r2, #202	; 0xca
 800de52:	625a      	str	r2, [r3, #36]	; 0x24
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2253      	movs	r2, #83	; 0x53
 800de5a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f000 f899 	bl	800df94 <RTC_EnterInitMode>
 800de62:	4603      	mov	r3, r0
 800de64:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de66:	7cfb      	ldrb	r3, [r7, #19]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10a      	bne.n	800de82 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	6979      	ldr	r1, [r7, #20]
 800de72:	4b0e      	ldr	r3, [pc, #56]	; (800deac <HAL_RTC_SetDate+0x10c>)
 800de74:	400b      	ands	r3, r1
 800de76:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 f8bf 	bl	800dffc <RTC_ExitInitMode>
 800de7e:	4603      	mov	r3, r0
 800de80:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	22ff      	movs	r2, #255	; 0xff
 800de88:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de8a:	7cfb      	ldrb	r3, [r7, #19]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d103      	bne.n	800de98 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dea0:	7cfb      	ldrb	r3, [r7, #19]


}
 800dea2:	4618      	mov	r0, r3
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd90      	pop	{r4, r7, pc}
 800deaa:	bf00      	nop
 800deac:	00ffff3f 	.word	0x00ffff3f

0800deb0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	4b21      	ldr	r3, [pc, #132]	; (800df48 <HAL_RTC_GetDate+0x98>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	0c1b      	lsrs	r3, r3, #16
 800decc:	b2da      	uxtb	r2, r3
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	0a1b      	lsrs	r3, r3, #8
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	f003 031f 	and.w	r3, r3, #31
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800deea:	b2da      	uxtb	r2, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	0b5b      	lsrs	r3, r3, #13
 800def4:	b2db      	uxtb	r3, r3
 800def6:	f003 0307 	and.w	r3, r3, #7
 800defa:	b2da      	uxtb	r2, r3
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d11a      	bne.n	800df3c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	78db      	ldrb	r3, [r3, #3]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f8d4 	bl	800e0b8 <RTC_Bcd2ToByte>
 800df10:	4603      	mov	r3, r0
 800df12:	461a      	mov	r2, r3
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	785b      	ldrb	r3, [r3, #1]
 800df1c:	4618      	mov	r0, r3
 800df1e:	f000 f8cb 	bl	800e0b8 <RTC_Bcd2ToByte>
 800df22:	4603      	mov	r3, r0
 800df24:	461a      	mov	r2, r3
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	789b      	ldrb	r3, [r3, #2]
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 f8c2 	bl	800e0b8 <RTC_Bcd2ToByte>
 800df34:	4603      	mov	r3, r0
 800df36:	461a      	mov	r2, r3
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	00ffff3f 	.word	0x00ffff3f

0800df4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a0d      	ldr	r2, [pc, #52]	; (800df90 <HAL_RTC_WaitForSynchro+0x44>)
 800df5a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800df5c:	f7f6 f8aa 	bl	80040b4 <HAL_GetTick>
 800df60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df62:	e009      	b.n	800df78 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df64:	f7f6 f8a6 	bl	80040b4 <HAL_GetTick>
 800df68:	4602      	mov	r2, r0
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df72:	d901      	bls.n	800df78 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800df74:	2303      	movs	r3, #3
 800df76:	e007      	b.n	800df88 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	f003 0320 	and.w	r3, r3, #32
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0ee      	beq.n	800df64 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	0003ff5f 	.word	0x0003ff5f

0800df94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d120      	bne.n	800dff0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfb6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dfb8:	f7f6 f87c 	bl	80040b4 <HAL_GetTick>
 800dfbc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfbe:	e00d      	b.n	800dfdc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfc0:	f7f6 f878 	bl	80040b4 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfce:	d905      	bls.n	800dfdc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2203      	movs	r2, #3
 800dfd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d102      	bne.n	800dff0 <RTC_EnterInitMode+0x5c>
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d1e7      	bne.n	800dfc0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
	...

0800dffc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e008:	4b1a      	ldr	r3, [pc, #104]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	4a19      	ldr	r2, [pc, #100]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e00e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e012:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e014:	4b17      	ldr	r3, [pc, #92]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	f003 0320 	and.w	r3, r3, #32
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10c      	bne.n	800e03a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff ff93 	bl	800df4c <HAL_RTC_WaitForSynchro>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d01e      	beq.n	800e06a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2203      	movs	r2, #3
 800e030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	73fb      	strb	r3, [r7, #15]
 800e038:	e017      	b.n	800e06a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e03a:	4b0e      	ldr	r3, [pc, #56]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	4a0d      	ldr	r2, [pc, #52]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e040:	f023 0320 	bic.w	r3, r3, #32
 800e044:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff ff80 	bl	800df4c <HAL_RTC_WaitForSynchro>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d005      	beq.n	800e05e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2203      	movs	r2, #3
 800e056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e05a:	2303      	movs	r3, #3
 800e05c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e05e:	4b05      	ldr	r3, [pc, #20]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	4a04      	ldr	r2, [pc, #16]	; (800e074 <RTC_ExitInitMode+0x78>)
 800e064:	f043 0320 	orr.w	r3, r3, #32
 800e068:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	58004000 	.word	0x58004000

0800e078 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e078:	b480      	push	{r7}
 800e07a:	b085      	sub	sp, #20
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e082:	2300      	movs	r3, #0
 800e084:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e086:	79fb      	ldrb	r3, [r7, #7]
 800e088:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e08a:	e005      	b.n	800e098 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	3301      	adds	r3, #1
 800e090:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e092:	7afb      	ldrb	r3, [r7, #11]
 800e094:	3b0a      	subs	r3, #10
 800e096:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e098:	7afb      	ldrb	r3, [r7, #11]
 800e09a:	2b09      	cmp	r3, #9
 800e09c:	d8f6      	bhi.n	800e08c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	011b      	lsls	r3, r3, #4
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	b2db      	uxtb	r3, r3
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	4603      	mov	r3, r0
 800e0c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	091b      	lsrs	r3, r3, #4
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	0092      	lsls	r2, r2, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e0d2:	79fb      	ldrb	r3, [r7, #7]
 800e0d4:	f003 030f 	and.w	r3, r3, #15
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
 800e0dc:	4413      	add	r3, r2
 800e0de:	b2db      	uxtb	r3, r3
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d101      	bne.n	800e0fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e10f      	b.n	800e31e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a87      	ldr	r2, [pc, #540]	; (800e328 <HAL_SPI_Init+0x23c>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d00f      	beq.n	800e12e <HAL_SPI_Init+0x42>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a86      	ldr	r2, [pc, #536]	; (800e32c <HAL_SPI_Init+0x240>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d00a      	beq.n	800e12e <HAL_SPI_Init+0x42>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a84      	ldr	r2, [pc, #528]	; (800e330 <HAL_SPI_Init+0x244>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d005      	beq.n	800e12e <HAL_SPI_Init+0x42>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	2b0f      	cmp	r3, #15
 800e128:	d901      	bls.n	800e12e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e0f7      	b.n	800e31e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fc12 	bl	800e958 <SPI_GetPacketSize>
 800e134:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a7b      	ldr	r2, [pc, #492]	; (800e328 <HAL_SPI_Init+0x23c>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d00c      	beq.n	800e15a <HAL_SPI_Init+0x6e>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a79      	ldr	r2, [pc, #484]	; (800e32c <HAL_SPI_Init+0x240>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d007      	beq.n	800e15a <HAL_SPI_Init+0x6e>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a78      	ldr	r2, [pc, #480]	; (800e330 <HAL_SPI_Init+0x244>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d002      	beq.n	800e15a <HAL_SPI_Init+0x6e>
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b08      	cmp	r3, #8
 800e158:	d811      	bhi.n	800e17e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e15e:	4a72      	ldr	r2, [pc, #456]	; (800e328 <HAL_SPI_Init+0x23c>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d009      	beq.n	800e178 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a70      	ldr	r2, [pc, #448]	; (800e32c <HAL_SPI_Init+0x240>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d004      	beq.n	800e178 <HAL_SPI_Init+0x8c>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a6f      	ldr	r2, [pc, #444]	; (800e330 <HAL_SPI_Init+0x244>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d104      	bne.n	800e182 <HAL_SPI_Init+0x96>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2b10      	cmp	r3, #16
 800e17c:	d901      	bls.n	800e182 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e0cd      	b.n	800e31e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d106      	bne.n	800e19c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7f4 fcc6 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f022 0201 	bic.w	r2, r2, #1
 800e1b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e1be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1c8:	d119      	bne.n	800e1fe <HAL_SPI_Init+0x112>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1d2:	d103      	bne.n	800e1dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d008      	beq.n	800e1ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10c      	bne.n	800e1fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1ec:	d107      	bne.n	800e1fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00f      	beq.n	800e22a <HAL_SPI_Init+0x13e>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	2b06      	cmp	r3, #6
 800e210:	d90b      	bls.n	800e22a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	430a      	orrs	r2, r1
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	e007      	b.n	800e23a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e238:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	69da      	ldr	r2, [r3, #28]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e242:	431a      	orrs	r2, r3
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	431a      	orrs	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e24c:	ea42 0103 	orr.w	r1, r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	68da      	ldr	r2, [r3, #12]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	430a      	orrs	r2, r1
 800e25a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e264:	431a      	orrs	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	431a      	orrs	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	431a      	orrs	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	431a      	orrs	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	695b      	ldr	r3, [r3, #20]
 800e27c:	431a      	orrs	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	431a      	orrs	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e28e:	431a      	orrs	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	431a      	orrs	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e29a:	ea42 0103 	orr.w	r1, r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	430a      	orrs	r2, r1
 800e2a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d113      	bne.n	800e2da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f022 0201 	bic.w	r2, r2, #1
 800e2e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00a      	beq.n	800e30c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	430a      	orrs	r2, r1
 800e30a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	40013000 	.word	0x40013000
 800e32c:	40003800 	.word	0x40003800
 800e330:	40003c00 	.word	0x40003c00

0800e334 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b088      	sub	sp, #32
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	603b      	str	r3, [r7, #0]
 800e340:	4613      	mov	r3, r2
 800e342:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e348:	095b      	lsrs	r3, r3, #5
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	3301      	adds	r3, #1
 800e34e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3330      	adds	r3, #48	; 0x30
 800e356:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e358:	f7f5 feac 	bl	80040b4 <HAL_GetTick>
 800e35c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b01      	cmp	r3, #1
 800e368:	d001      	beq.n	800e36e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e36a:	2302      	movs	r3, #2
 800e36c:	e250      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <HAL_SPI_Receive+0x46>
 800e374:	88fb      	ldrh	r3, [r7, #6]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d101      	bne.n	800e37e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e37a:	2301      	movs	r3, #1
 800e37c:	e248      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e384:	2b01      	cmp	r3, #1
 800e386:	d101      	bne.n	800e38c <HAL_SPI_Receive+0x58>
 800e388:	2302      	movs	r3, #2
 800e38a:	e241      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2204      	movs	r2, #4
 800e398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	88fa      	ldrh	r2, [r7, #6]
 800e3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e3e4:	d108      	bne.n	800e3f8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	e009      	b.n	800e40c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e40a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	4b95      	ldr	r3, [pc, #596]	; (800e668 <HAL_SPI_Receive+0x334>)
 800e414:	4013      	ands	r3, r2
 800e416:	88f9      	ldrh	r1, [r7, #6]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	6812      	ldr	r2, [r2, #0]
 800e41c:	430b      	orrs	r3, r1
 800e41e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f042 0201 	orr.w	r2, r2, #1
 800e42e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e438:	d107      	bne.n	800e44a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e448:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	2b0f      	cmp	r3, #15
 800e450:	d96c      	bls.n	800e52c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e452:	e064      	b.n	800e51e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	f003 0301 	and.w	r3, r3, #1
 800e466:	2b01      	cmp	r3, #1
 800e468:	d114      	bne.n	800e494 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e472:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e474:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e47a:	1d1a      	adds	r2, r3, #4
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e486:	b29b      	uxth	r3, r3
 800e488:	3b01      	subs	r3, #1
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e492:	e044      	b.n	800e51e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	8bfa      	ldrh	r2, [r7, #30]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d919      	bls.n	800e4d6 <HAL_SPI_Receive+0x1a2>
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d014      	beq.n	800e4d6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4b6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4bc:	1d1a      	adds	r2, r3, #4
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4d4:	e023      	b.n	800e51e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4d6:	f7f5 fded 	bl	80040b4 <HAL_GetTick>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d803      	bhi.n	800e4ee <HAL_SPI_Receive+0x1ba>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ec:	d102      	bne.n	800e4f4 <HAL_SPI_Receive+0x1c0>
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d114      	bne.n	800e51e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f000 f98f 	bl	800e818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2201      	movs	r2, #1
 800e50e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e51a:	2303      	movs	r3, #3
 800e51c:	e178      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e524:	b29b      	uxth	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d194      	bne.n	800e454 <HAL_SPI_Receive+0x120>
 800e52a:	e15e      	b.n	800e7ea <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	2b07      	cmp	r3, #7
 800e532:	f240 8153 	bls.w	800e7dc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e536:	e08f      	b.n	800e658 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d114      	bne.n	800e578 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	8812      	ldrh	r2, [r2, #0]
 800e556:	b292      	uxth	r2, r2
 800e558:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55e:	1c9a      	adds	r2, r3, #2
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b01      	subs	r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e576:	e06f      	b.n	800e658 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e57e:	b29b      	uxth	r3, r3
 800e580:	8bfa      	ldrh	r2, [r7, #30]
 800e582:	429a      	cmp	r2, r3
 800e584:	d924      	bls.n	800e5d0 <HAL_SPI_Receive+0x29c>
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d01f      	beq.n	800e5d0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e594:	69ba      	ldr	r2, [r7, #24]
 800e596:	8812      	ldrh	r2, [r2, #0]
 800e598:	b292      	uxth	r2, r2
 800e59a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a0:	1c9a      	adds	r2, r3, #2
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5aa:	69ba      	ldr	r2, [r7, #24]
 800e5ac:	8812      	ldrh	r2, [r2, #0]
 800e5ae:	b292      	uxth	r2, r2
 800e5b0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5b6:	1c9a      	adds	r2, r3, #2
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	3b02      	subs	r3, #2
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5ce:	e043      	b.n	800e658 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d119      	bne.n	800e610 <HAL_SPI_Receive+0x2dc>
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d014      	beq.n	800e610 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ea:	69ba      	ldr	r2, [r7, #24]
 800e5ec:	8812      	ldrh	r2, [r2, #0]
 800e5ee:	b292      	uxth	r2, r2
 800e5f0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f6:	1c9a      	adds	r2, r3, #2
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e602:	b29b      	uxth	r3, r3
 800e604:	3b01      	subs	r3, #1
 800e606:	b29a      	uxth	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e60e:	e023      	b.n	800e658 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e610:	f7f5 fd50 	bl	80040b4 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d803      	bhi.n	800e628 <HAL_SPI_Receive+0x2f4>
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e626:	d102      	bne.n	800e62e <HAL_SPI_Receive+0x2fa>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d114      	bne.n	800e658 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f000 f8f2 	bl	800e818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e63a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e654:	2303      	movs	r3, #3
 800e656:	e0db      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e65e:	b29b      	uxth	r3, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	f47f af69 	bne.w	800e538 <HAL_SPI_Receive+0x204>
 800e666:	e0c0      	b.n	800e7ea <HAL_SPI_Receive+0x4b6>
 800e668:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d117      	bne.n	800e6b2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e68e:	7812      	ldrb	r2, [r2, #0]
 800e690:	b2d2      	uxtb	r2, r2
 800e692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6b0:	e094      	b.n	800e7dc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	8bfa      	ldrh	r2, [r7, #30]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d946      	bls.n	800e74e <HAL_SPI_Receive+0x41a>
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d041      	beq.n	800e74e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6d6:	7812      	ldrb	r2, [r2, #0]
 800e6d8:	b2d2      	uxtb	r2, r2
 800e6da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f2:	7812      	ldrb	r2, [r2, #0]
 800e6f4:	b2d2      	uxtb	r2, r2
 800e6f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e70e:	7812      	ldrb	r2, [r2, #0]
 800e710:	b2d2      	uxtb	r2, r2
 800e712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e72a:	7812      	ldrb	r2, [r2, #0]
 800e72c:	b2d2      	uxtb	r2, r2
 800e72e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e734:	1c5a      	adds	r2, r3, #1
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e740:	b29b      	uxth	r3, r3
 800e742:	3b04      	subs	r3, #4
 800e744:	b29a      	uxth	r2, r3
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e74c:	e046      	b.n	800e7dc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e754:	b29b      	uxth	r3, r3
 800e756:	2b03      	cmp	r3, #3
 800e758:	d81c      	bhi.n	800e794 <HAL_SPI_Receive+0x460>
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e760:	2b00      	cmp	r3, #0
 800e762:	d017      	beq.n	800e794 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e770:	7812      	ldrb	r2, [r2, #0]
 800e772:	b2d2      	uxtb	r2, r2
 800e774:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e786:	b29b      	uxth	r3, r3
 800e788:	3b01      	subs	r3, #1
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e792:	e023      	b.n	800e7dc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e794:	f7f5 fc8e 	bl	80040b4 <HAL_GetTick>
 800e798:	4602      	mov	r2, r0
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d803      	bhi.n	800e7ac <HAL_SPI_Receive+0x478>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7aa:	d102      	bne.n	800e7b2 <HAL_SPI_Receive+0x47e>
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d114      	bne.n	800e7dc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f000 f830 	bl	800e818 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7d8:	2303      	movs	r3, #3
 800e7da:	e019      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f47f af41 	bne.w	800e66c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f000 f814 	bl	800e818 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e000      	b.n	800e810 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e80e:	2300      	movs	r3, #0
  }
}
 800e810:	4618      	mov	r0, r3
 800e812:	3720      	adds	r7, #32
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	699a      	ldr	r2, [r3, #24]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f042 0208 	orr.w	r2, r2, #8
 800e836:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f042 0210 	orr.w	r2, r2, #16
 800e846:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f022 0201 	bic.w	r2, r2, #1
 800e856:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6919      	ldr	r1, [r3, #16]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	4b3c      	ldr	r3, [pc, #240]	; (800e954 <SPI_CloseTransfer+0x13c>)
 800e864:	400b      	ands	r3, r1
 800e866:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689a      	ldr	r2, [r3, #8]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e876:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b04      	cmp	r3, #4
 800e882:	d014      	beq.n	800e8ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f003 0320 	and.w	r3, r3, #32
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00f      	beq.n	800e8ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e894:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	699a      	ldr	r2, [r3, #24]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f042 0220 	orr.w	r2, r2, #32
 800e8ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d014      	beq.n	800e8e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00f      	beq.n	800e8e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ca:	f043 0204 	orr.w	r2, r3, #4
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	699a      	ldr	r2, [r3, #24]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00f      	beq.n	800e90e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8f4:	f043 0201 	orr.w	r2, r3, #1
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	699a      	ldr	r2, [r3, #24]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e90c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00f      	beq.n	800e938 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e91e:	f043 0208 	orr.w	r2, r3, #8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e936:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e948:	bf00      	nop
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	fffffc90 	.word	0xfffffc90

0800e958 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e964:	095b      	lsrs	r3, r3, #5
 800e966:	3301      	adds	r3, #1
 800e968:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	3301      	adds	r3, #1
 800e970:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	3307      	adds	r3, #7
 800e976:	08db      	lsrs	r3, r3, #3
 800e978:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e982:	4618      	mov	r0, r3
 800e984:	3714      	adds	r7, #20
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d101      	bne.n	800e9a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e049      	b.n	800ea34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d106      	bne.n	800e9ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7f4 fd55 	bl	8003464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2202      	movs	r2, #2
 800e9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	f000 fe7d 	bl	800f6cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d001      	beq.n	800ea54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	e054      	b.n	800eafe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2202      	movs	r2, #2
 800ea58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68da      	ldr	r2, [r3, #12]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f042 0201 	orr.w	r2, r2, #1
 800ea6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a26      	ldr	r2, [pc, #152]	; (800eb0c <HAL_TIM_Base_Start_IT+0xd0>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d022      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea7e:	d01d      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a22      	ldr	r2, [pc, #136]	; (800eb10 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d018      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a21      	ldr	r2, [pc, #132]	; (800eb14 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d013      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a1f      	ldr	r2, [pc, #124]	; (800eb18 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d00e      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a1e      	ldr	r2, [pc, #120]	; (800eb1c <HAL_TIM_Base_Start_IT+0xe0>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d009      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a1c      	ldr	r2, [pc, #112]	; (800eb20 <HAL_TIM_Base_Start_IT+0xe4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d004      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x80>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a1b      	ldr	r2, [pc, #108]	; (800eb24 <HAL_TIM_Base_Start_IT+0xe8>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d115      	bne.n	800eae8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	689a      	ldr	r2, [r3, #8]
 800eac2:	4b19      	ldr	r3, [pc, #100]	; (800eb28 <HAL_TIM_Base_Start_IT+0xec>)
 800eac4:	4013      	ands	r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2b06      	cmp	r3, #6
 800eacc:	d015      	beq.n	800eafa <HAL_TIM_Base_Start_IT+0xbe>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ead4:	d011      	beq.n	800eafa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f042 0201 	orr.w	r2, r2, #1
 800eae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eae6:	e008      	b.n	800eafa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f042 0201 	orr.w	r2, r2, #1
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	e000      	b.n	800eafc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eafa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop
 800eb0c:	40010000 	.word	0x40010000
 800eb10:	40000400 	.word	0x40000400
 800eb14:	40000800 	.word	0x40000800
 800eb18:	40000c00 	.word	0x40000c00
 800eb1c:	40010400 	.word	0x40010400
 800eb20:	40001800 	.word	0x40001800
 800eb24:	40014000 	.word	0x40014000
 800eb28:	00010007 	.word	0x00010007

0800eb2c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb36:	2300      	movs	r3, #0
 800eb38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d109      	bne.n	800eb54 <HAL_TIM_OC_Start_IT+0x28>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	bf14      	ite	ne
 800eb4c:	2301      	movne	r3, #1
 800eb4e:	2300      	moveq	r3, #0
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	e03c      	b.n	800ebce <HAL_TIM_OC_Start_IT+0xa2>
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	2b04      	cmp	r3, #4
 800eb58:	d109      	bne.n	800eb6e <HAL_TIM_OC_Start_IT+0x42>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	bf14      	ite	ne
 800eb66:	2301      	movne	r3, #1
 800eb68:	2300      	moveq	r3, #0
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	e02f      	b.n	800ebce <HAL_TIM_OC_Start_IT+0xa2>
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d109      	bne.n	800eb88 <HAL_TIM_OC_Start_IT+0x5c>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	bf14      	ite	ne
 800eb80:	2301      	movne	r3, #1
 800eb82:	2300      	moveq	r3, #0
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	e022      	b.n	800ebce <HAL_TIM_OC_Start_IT+0xa2>
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	2b0c      	cmp	r3, #12
 800eb8c:	d109      	bne.n	800eba2 <HAL_TIM_OC_Start_IT+0x76>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	bf14      	ite	ne
 800eb9a:	2301      	movne	r3, #1
 800eb9c:	2300      	moveq	r3, #0
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	e015      	b.n	800ebce <HAL_TIM_OC_Start_IT+0xa2>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b10      	cmp	r3, #16
 800eba6:	d109      	bne.n	800ebbc <HAL_TIM_OC_Start_IT+0x90>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	bf14      	ite	ne
 800ebb4:	2301      	movne	r3, #1
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	e008      	b.n	800ebce <HAL_TIM_OC_Start_IT+0xa2>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	bf14      	ite	ne
 800ebc8:	2301      	movne	r3, #1
 800ebca:	2300      	moveq	r3, #0
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e0ec      	b.n	800edb0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d104      	bne.n	800ebe6 <HAL_TIM_OC_Start_IT+0xba>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2202      	movs	r2, #2
 800ebe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebe4:	e023      	b.n	800ec2e <HAL_TIM_OC_Start_IT+0x102>
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d104      	bne.n	800ebf6 <HAL_TIM_OC_Start_IT+0xca>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebf4:	e01b      	b.n	800ec2e <HAL_TIM_OC_Start_IT+0x102>
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2b08      	cmp	r3, #8
 800ebfa:	d104      	bne.n	800ec06 <HAL_TIM_OC_Start_IT+0xda>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2202      	movs	r2, #2
 800ec00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec04:	e013      	b.n	800ec2e <HAL_TIM_OC_Start_IT+0x102>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	2b0c      	cmp	r3, #12
 800ec0a:	d104      	bne.n	800ec16 <HAL_TIM_OC_Start_IT+0xea>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2202      	movs	r2, #2
 800ec10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec14:	e00b      	b.n	800ec2e <HAL_TIM_OC_Start_IT+0x102>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b10      	cmp	r3, #16
 800ec1a:	d104      	bne.n	800ec26 <HAL_TIM_OC_Start_IT+0xfa>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2202      	movs	r2, #2
 800ec20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec24:	e003      	b.n	800ec2e <HAL_TIM_OC_Start_IT+0x102>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2202      	movs	r2, #2
 800ec2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	2b0c      	cmp	r3, #12
 800ec32:	d841      	bhi.n	800ecb8 <HAL_TIM_OC_Start_IT+0x18c>
 800ec34:	a201      	add	r2, pc, #4	; (adr r2, 800ec3c <HAL_TIM_OC_Start_IT+0x110>)
 800ec36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3a:	bf00      	nop
 800ec3c:	0800ec71 	.word	0x0800ec71
 800ec40:	0800ecb9 	.word	0x0800ecb9
 800ec44:	0800ecb9 	.word	0x0800ecb9
 800ec48:	0800ecb9 	.word	0x0800ecb9
 800ec4c:	0800ec83 	.word	0x0800ec83
 800ec50:	0800ecb9 	.word	0x0800ecb9
 800ec54:	0800ecb9 	.word	0x0800ecb9
 800ec58:	0800ecb9 	.word	0x0800ecb9
 800ec5c:	0800ec95 	.word	0x0800ec95
 800ec60:	0800ecb9 	.word	0x0800ecb9
 800ec64:	0800ecb9 	.word	0x0800ecb9
 800ec68:	0800ecb9 	.word	0x0800ecb9
 800ec6c:	0800eca7 	.word	0x0800eca7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	68da      	ldr	r2, [r3, #12]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f042 0202 	orr.w	r2, r2, #2
 800ec7e:	60da      	str	r2, [r3, #12]
      break;
 800ec80:	e01d      	b.n	800ecbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68da      	ldr	r2, [r3, #12]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f042 0204 	orr.w	r2, r2, #4
 800ec90:	60da      	str	r2, [r3, #12]
      break;
 800ec92:	e014      	b.n	800ecbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	68da      	ldr	r2, [r3, #12]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f042 0208 	orr.w	r2, r2, #8
 800eca2:	60da      	str	r2, [r3, #12]
      break;
 800eca4:	e00b      	b.n	800ecbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	68da      	ldr	r2, [r3, #12]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f042 0210 	orr.w	r2, r2, #16
 800ecb4:	60da      	str	r2, [r3, #12]
      break;
 800ecb6:	e002      	b.n	800ecbe <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	73fb      	strb	r3, [r7, #15]
      break;
 800ecbc:	bf00      	nop
  }

  if (status == HAL_OK)
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d174      	bne.n	800edae <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	6839      	ldr	r1, [r7, #0]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f001 f917 	bl	800ff00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a38      	ldr	r2, [pc, #224]	; (800edb8 <HAL_TIM_OC_Start_IT+0x28c>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d013      	beq.n	800ed04 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a36      	ldr	r2, [pc, #216]	; (800edbc <HAL_TIM_OC_Start_IT+0x290>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d00e      	beq.n	800ed04 <HAL_TIM_OC_Start_IT+0x1d8>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a35      	ldr	r2, [pc, #212]	; (800edc0 <HAL_TIM_OC_Start_IT+0x294>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d009      	beq.n	800ed04 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a33      	ldr	r2, [pc, #204]	; (800edc4 <HAL_TIM_OC_Start_IT+0x298>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d004      	beq.n	800ed04 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a32      	ldr	r2, [pc, #200]	; (800edc8 <HAL_TIM_OC_Start_IT+0x29c>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d101      	bne.n	800ed08 <HAL_TIM_OC_Start_IT+0x1dc>
 800ed04:	2301      	movs	r3, #1
 800ed06:	e000      	b.n	800ed0a <HAL_TIM_OC_Start_IT+0x1de>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d007      	beq.n	800ed1e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a25      	ldr	r2, [pc, #148]	; (800edb8 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d022      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed30:	d01d      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a25      	ldr	r2, [pc, #148]	; (800edcc <HAL_TIM_OC_Start_IT+0x2a0>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d018      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a23      	ldr	r2, [pc, #140]	; (800edd0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d013      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a22      	ldr	r2, [pc, #136]	; (800edd4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d00e      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a19      	ldr	r2, [pc, #100]	; (800edbc <HAL_TIM_OC_Start_IT+0x290>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d009      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4a1e      	ldr	r2, [pc, #120]	; (800edd8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d004      	beq.n	800ed6e <HAL_TIM_OC_Start_IT+0x242>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a15      	ldr	r2, [pc, #84]	; (800edc0 <HAL_TIM_OC_Start_IT+0x294>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d115      	bne.n	800ed9a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	689a      	ldr	r2, [r3, #8]
 800ed74:	4b19      	ldr	r3, [pc, #100]	; (800eddc <HAL_TIM_OC_Start_IT+0x2b0>)
 800ed76:	4013      	ands	r3, r2
 800ed78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2b06      	cmp	r3, #6
 800ed7e:	d015      	beq.n	800edac <HAL_TIM_OC_Start_IT+0x280>
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed86:	d011      	beq.n	800edac <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f042 0201 	orr.w	r2, r2, #1
 800ed96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed98:	e008      	b.n	800edac <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f042 0201 	orr.w	r2, r2, #1
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	e000      	b.n	800edae <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800edae:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3710      	adds	r7, #16
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	40010000 	.word	0x40010000
 800edbc:	40010400 	.word	0x40010400
 800edc0:	40014000 	.word	0x40014000
 800edc4:	40014400 	.word	0x40014400
 800edc8:	40014800 	.word	0x40014800
 800edcc:	40000400 	.word	0x40000400
 800edd0:	40000800 	.word	0x40000800
 800edd4:	40000c00 	.word	0x40000c00
 800edd8:	40001800 	.word	0x40001800
 800eddc:	00010007 	.word	0x00010007

0800ede0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	2b0c      	cmp	r3, #12
 800edf2:	d841      	bhi.n	800ee78 <HAL_TIM_OC_Stop_IT+0x98>
 800edf4:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <HAL_TIM_OC_Stop_IT+0x1c>)
 800edf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfa:	bf00      	nop
 800edfc:	0800ee31 	.word	0x0800ee31
 800ee00:	0800ee79 	.word	0x0800ee79
 800ee04:	0800ee79 	.word	0x0800ee79
 800ee08:	0800ee79 	.word	0x0800ee79
 800ee0c:	0800ee43 	.word	0x0800ee43
 800ee10:	0800ee79 	.word	0x0800ee79
 800ee14:	0800ee79 	.word	0x0800ee79
 800ee18:	0800ee79 	.word	0x0800ee79
 800ee1c:	0800ee55 	.word	0x0800ee55
 800ee20:	0800ee79 	.word	0x0800ee79
 800ee24:	0800ee79 	.word	0x0800ee79
 800ee28:	0800ee79 	.word	0x0800ee79
 800ee2c:	0800ee67 	.word	0x0800ee67
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68da      	ldr	r2, [r3, #12]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f022 0202 	bic.w	r2, r2, #2
 800ee3e:	60da      	str	r2, [r3, #12]
      break;
 800ee40:	e01d      	b.n	800ee7e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68da      	ldr	r2, [r3, #12]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f022 0204 	bic.w	r2, r2, #4
 800ee50:	60da      	str	r2, [r3, #12]
      break;
 800ee52:	e014      	b.n	800ee7e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68da      	ldr	r2, [r3, #12]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f022 0208 	bic.w	r2, r2, #8
 800ee62:	60da      	str	r2, [r3, #12]
      break;
 800ee64:	e00b      	b.n	800ee7e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68da      	ldr	r2, [r3, #12]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f022 0210 	bic.w	r2, r2, #16
 800ee74:	60da      	str	r2, [r3, #12]
      break;
 800ee76:	e002      	b.n	800ee7e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee7c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f040 8081 	bne.w	800ef88 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	6839      	ldr	r1, [r7, #0]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f001 f836 	bl	800ff00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a3e      	ldr	r2, [pc, #248]	; (800ef94 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d013      	beq.n	800eec6 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a3d      	ldr	r2, [pc, #244]	; (800ef98 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d00e      	beq.n	800eec6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a3b      	ldr	r2, [pc, #236]	; (800ef9c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d009      	beq.n	800eec6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a3a      	ldr	r2, [pc, #232]	; (800efa0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d004      	beq.n	800eec6 <HAL_TIM_OC_Stop_IT+0xe6>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a38      	ldr	r2, [pc, #224]	; (800efa4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d101      	bne.n	800eeca <HAL_TIM_OC_Stop_IT+0xea>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e000      	b.n	800eecc <HAL_TIM_OC_Stop_IT+0xec>
 800eeca:	2300      	movs	r3, #0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d017      	beq.n	800ef00 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	6a1a      	ldr	r2, [r3, #32]
 800eed6:	f241 1311 	movw	r3, #4369	; 0x1111
 800eeda:	4013      	ands	r3, r2
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10f      	bne.n	800ef00 <HAL_TIM_OC_Stop_IT+0x120>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6a1a      	ldr	r2, [r3, #32]
 800eee6:	f240 4344 	movw	r3, #1092	; 0x444
 800eeea:	4013      	ands	r3, r2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d107      	bne.n	800ef00 <HAL_TIM_OC_Stop_IT+0x120>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eefe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6a1a      	ldr	r2, [r3, #32]
 800ef06:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10f      	bne.n	800ef30 <HAL_TIM_OC_Stop_IT+0x150>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6a1a      	ldr	r2, [r3, #32]
 800ef16:	f240 4344 	movw	r3, #1092	; 0x444
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d107      	bne.n	800ef30 <HAL_TIM_OC_Stop_IT+0x150>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f022 0201 	bic.w	r2, r2, #1
 800ef2e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d104      	bne.n	800ef40 <HAL_TIM_OC_Stop_IT+0x160>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef3e:	e023      	b.n	800ef88 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b04      	cmp	r3, #4
 800ef44:	d104      	bne.n	800ef50 <HAL_TIM_OC_Stop_IT+0x170>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef4e:	e01b      	b.n	800ef88 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	2b08      	cmp	r3, #8
 800ef54:	d104      	bne.n	800ef60 <HAL_TIM_OC_Stop_IT+0x180>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef5e:	e013      	b.n	800ef88 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2b0c      	cmp	r3, #12
 800ef64:	d104      	bne.n	800ef70 <HAL_TIM_OC_Stop_IT+0x190>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef6e:	e00b      	b.n	800ef88 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2b10      	cmp	r3, #16
 800ef74:	d104      	bne.n	800ef80 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef7e:	e003      	b.n	800ef88 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2201      	movs	r2, #1
 800ef84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	40010000 	.word	0x40010000
 800ef98:	40010400 	.word	0x40010400
 800ef9c:	40014000 	.word	0x40014000
 800efa0:	40014400 	.word	0x40014400
 800efa4:	40014800 	.word	0x40014800

0800efa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d101      	bne.n	800efba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	e049      	b.n	800f04e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d106      	bne.n	800efd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 f841 	bl	800f056 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2202      	movs	r2, #2
 800efd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	3304      	adds	r3, #4
 800efe4:	4619      	mov	r1, r3
 800efe6:	4610      	mov	r0, r2
 800efe8:	f000 fb70 	bl	800f6cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f056:	b480      	push	{r7}
 800f058:	b083      	sub	sp, #12
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f05e:	bf00      	nop
 800f060:	370c      	adds	r7, #12
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b084      	sub	sp, #16
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	f003 0302 	and.w	r3, r3, #2
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d020      	beq.n	800f0ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f003 0302 	and.w	r3, r3, #2
 800f092:	2b00      	cmp	r3, #0
 800f094:	d01b      	beq.n	800f0ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f06f 0202 	mvn.w	r2, #2
 800f09e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	699b      	ldr	r3, [r3, #24]
 800f0ac:	f003 0303 	and.w	r3, r3, #3
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d003      	beq.n	800f0bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 faeb 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f0ba:	e005      	b.n	800f0c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7f2 f9f9 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 faee 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	f003 0304 	and.w	r3, r3, #4
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d020      	beq.n	800f11a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f003 0304 	and.w	r3, r3, #4
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d01b      	beq.n	800f11a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f06f 0204 	mvn.w	r2, #4
 800f0ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2202      	movs	r2, #2
 800f0f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d003      	beq.n	800f108 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 fac5 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f106:	e005      	b.n	800f114 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7f2 f9d3 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 fac8 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	f003 0308 	and.w	r3, r3, #8
 800f120:	2b00      	cmp	r3, #0
 800f122:	d020      	beq.n	800f166 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f003 0308 	and.w	r3, r3, #8
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d01b      	beq.n	800f166 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f06f 0208 	mvn.w	r2, #8
 800f136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2204      	movs	r2, #4
 800f13c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	69db      	ldr	r3, [r3, #28]
 800f144:	f003 0303 	and.w	r3, r3, #3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 fa9f 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f152:	e005      	b.n	800f160 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7f2 f9ad 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 faa2 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	f003 0310 	and.w	r3, r3, #16
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d020      	beq.n	800f1b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f003 0310 	and.w	r3, r3, #16
 800f176:	2b00      	cmp	r3, #0
 800f178:	d01b      	beq.n	800f1b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f06f 0210 	mvn.w	r2, #16
 800f182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2208      	movs	r2, #8
 800f188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69db      	ldr	r3, [r3, #28]
 800f190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f194:	2b00      	cmp	r3, #0
 800f196:	d003      	beq.n	800f1a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fa79 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f19e:	e005      	b.n	800f1ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7f2 f987 	bl	80014b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fa7c 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	f003 0301 	and.w	r3, r3, #1
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00c      	beq.n	800f1d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d007      	beq.n	800f1d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f06f 0201 	mvn.w	r2, #1
 800f1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7f2 ffd5 	bl	8002180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d104      	bne.n	800f1ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00c      	beq.n	800f204 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 ffba 	bl	8010178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00c      	beq.n	800f228 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 ffb2 	bl	801018c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00c      	beq.n	800f24c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d007      	beq.n	800f24c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fa36 	bl	800f6b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	f003 0320 	and.w	r3, r3, #32
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00c      	beq.n	800f270 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f003 0320 	and.w	r3, r3, #32
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d007      	beq.n	800f270 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f06f 0220 	mvn.w	r2, #32
 800f268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 ff7a 	bl	8010164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f270:	bf00      	nop
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f284:	2300      	movs	r3, #0
 800f286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d101      	bne.n	800f296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f292:	2302      	movs	r3, #2
 800f294:	e0ff      	b.n	800f496 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2201      	movs	r2, #1
 800f29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b14      	cmp	r3, #20
 800f2a2:	f200 80f0 	bhi.w	800f486 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f2a6:	a201      	add	r2, pc, #4	; (adr r2, 800f2ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ac:	0800f301 	.word	0x0800f301
 800f2b0:	0800f487 	.word	0x0800f487
 800f2b4:	0800f487 	.word	0x0800f487
 800f2b8:	0800f487 	.word	0x0800f487
 800f2bc:	0800f341 	.word	0x0800f341
 800f2c0:	0800f487 	.word	0x0800f487
 800f2c4:	0800f487 	.word	0x0800f487
 800f2c8:	0800f487 	.word	0x0800f487
 800f2cc:	0800f383 	.word	0x0800f383
 800f2d0:	0800f487 	.word	0x0800f487
 800f2d4:	0800f487 	.word	0x0800f487
 800f2d8:	0800f487 	.word	0x0800f487
 800f2dc:	0800f3c3 	.word	0x0800f3c3
 800f2e0:	0800f487 	.word	0x0800f487
 800f2e4:	0800f487 	.word	0x0800f487
 800f2e8:	0800f487 	.word	0x0800f487
 800f2ec:	0800f405 	.word	0x0800f405
 800f2f0:	0800f487 	.word	0x0800f487
 800f2f4:	0800f487 	.word	0x0800f487
 800f2f8:	0800f487 	.word	0x0800f487
 800f2fc:	0800f445 	.word	0x0800f445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68b9      	ldr	r1, [r7, #8]
 800f306:	4618      	mov	r0, r3
 800f308:	f000 fa86 	bl	800f818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	699a      	ldr	r2, [r3, #24]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f042 0208 	orr.w	r2, r2, #8
 800f31a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	699a      	ldr	r2, [r3, #24]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f022 0204 	bic.w	r2, r2, #4
 800f32a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6999      	ldr	r1, [r3, #24]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	691a      	ldr	r2, [r3, #16]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	430a      	orrs	r2, r1
 800f33c:	619a      	str	r2, [r3, #24]
      break;
 800f33e:	e0a5      	b.n	800f48c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	4618      	mov	r0, r3
 800f348:	f000 faf6 	bl	800f938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	699a      	ldr	r2, [r3, #24]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f35a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	699a      	ldr	r2, [r3, #24]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f36a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	6999      	ldr	r1, [r3, #24]
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	691b      	ldr	r3, [r3, #16]
 800f376:	021a      	lsls	r2, r3, #8
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	430a      	orrs	r2, r1
 800f37e:	619a      	str	r2, [r3, #24]
      break;
 800f380:	e084      	b.n	800f48c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	68b9      	ldr	r1, [r7, #8]
 800f388:	4618      	mov	r0, r3
 800f38a:	f000 fb5f 	bl	800fa4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	69da      	ldr	r2, [r3, #28]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f042 0208 	orr.w	r2, r2, #8
 800f39c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	69da      	ldr	r2, [r3, #28]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f022 0204 	bic.w	r2, r2, #4
 800f3ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	69d9      	ldr	r1, [r3, #28]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	691a      	ldr	r2, [r3, #16]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	430a      	orrs	r2, r1
 800f3be:	61da      	str	r2, [r3, #28]
      break;
 800f3c0:	e064      	b.n	800f48c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 fbc7 	bl	800fb5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	69da      	ldr	r2, [r3, #28]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69da      	ldr	r2, [r3, #28]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69d9      	ldr	r1, [r3, #28]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	691b      	ldr	r3, [r3, #16]
 800f3f8:	021a      	lsls	r2, r3, #8
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	61da      	str	r2, [r3, #28]
      break;
 800f402:	e043      	b.n	800f48c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68b9      	ldr	r1, [r7, #8]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 fc10 	bl	800fc30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f042 0208 	orr.w	r2, r2, #8
 800f41e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f022 0204 	bic.w	r2, r2, #4
 800f42e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	691a      	ldr	r2, [r3, #16]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	430a      	orrs	r2, r1
 800f440:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f442:	e023      	b.n	800f48c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	68b9      	ldr	r1, [r7, #8]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 fc54 	bl	800fcf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f45e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f46e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	691b      	ldr	r3, [r3, #16]
 800f47a:	021a      	lsls	r2, r3, #8
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	430a      	orrs	r2, r1
 800f482:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f484:	e002      	b.n	800f48c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	75fb      	strb	r3, [r7, #23]
      break;
 800f48a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2200      	movs	r2, #0
 800f490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f494:	7dfb      	ldrb	r3, [r7, #23]
}
 800f496:	4618      	mov	r0, r3
 800f498:	3718      	adds	r7, #24
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop

0800f4a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d101      	bne.n	800f4bc <HAL_TIM_ConfigClockSource+0x1c>
 800f4b8:	2302      	movs	r3, #2
 800f4ba:	e0dc      	b.n	800f676 <HAL_TIM_ConfigClockSource+0x1d6>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	4b6a      	ldr	r3, [pc, #424]	; (800f680 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f4d8:	4013      	ands	r3, r2
 800f4da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a64      	ldr	r2, [pc, #400]	; (800f684 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	f000 80a9 	beq.w	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f4f8:	4a62      	ldr	r2, [pc, #392]	; (800f684 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	f200 80ae 	bhi.w	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f500:	4a61      	ldr	r2, [pc, #388]	; (800f688 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f502:	4293      	cmp	r3, r2
 800f504:	f000 80a1 	beq.w	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f508:	4a5f      	ldr	r2, [pc, #380]	; (800f688 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	f200 80a6 	bhi.w	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f510:	4a5e      	ldr	r2, [pc, #376]	; (800f68c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f512:	4293      	cmp	r3, r2
 800f514:	f000 8099 	beq.w	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f518:	4a5c      	ldr	r2, [pc, #368]	; (800f68c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	f200 809e 	bhi.w	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f520:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f524:	f000 8091 	beq.w	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f528:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f52c:	f200 8096 	bhi.w	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f534:	f000 8089 	beq.w	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f53c:	f200 808e 	bhi.w	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f544:	d03e      	beq.n	800f5c4 <HAL_TIM_ConfigClockSource+0x124>
 800f546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f54a:	f200 8087 	bhi.w	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f552:	f000 8086 	beq.w	800f662 <HAL_TIM_ConfigClockSource+0x1c2>
 800f556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f55a:	d87f      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f55c:	2b70      	cmp	r3, #112	; 0x70
 800f55e:	d01a      	beq.n	800f596 <HAL_TIM_ConfigClockSource+0xf6>
 800f560:	2b70      	cmp	r3, #112	; 0x70
 800f562:	d87b      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f564:	2b60      	cmp	r3, #96	; 0x60
 800f566:	d050      	beq.n	800f60a <HAL_TIM_ConfigClockSource+0x16a>
 800f568:	2b60      	cmp	r3, #96	; 0x60
 800f56a:	d877      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f56c:	2b50      	cmp	r3, #80	; 0x50
 800f56e:	d03c      	beq.n	800f5ea <HAL_TIM_ConfigClockSource+0x14a>
 800f570:	2b50      	cmp	r3, #80	; 0x50
 800f572:	d873      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f574:	2b40      	cmp	r3, #64	; 0x40
 800f576:	d058      	beq.n	800f62a <HAL_TIM_ConfigClockSource+0x18a>
 800f578:	2b40      	cmp	r3, #64	; 0x40
 800f57a:	d86f      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f57c:	2b30      	cmp	r3, #48	; 0x30
 800f57e:	d064      	beq.n	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f580:	2b30      	cmp	r3, #48	; 0x30
 800f582:	d86b      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f584:	2b20      	cmp	r3, #32
 800f586:	d060      	beq.n	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f588:	2b20      	cmp	r3, #32
 800f58a:	d867      	bhi.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d05c      	beq.n	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f590:	2b10      	cmp	r3, #16
 800f592:	d05a      	beq.n	800f64a <HAL_TIM_ConfigClockSource+0x1aa>
 800f594:	e062      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6818      	ldr	r0, [r3, #0]
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	6899      	ldr	r1, [r3, #8]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	f000 fc8b 	bl	800fec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	609a      	str	r2, [r3, #8]
      break;
 800f5c2:	e04f      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	6899      	ldr	r1, [r3, #8]
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	685a      	ldr	r2, [r3, #4]
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	f000 fc74 	bl	800fec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	689a      	ldr	r2, [r3, #8]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5e6:	609a      	str	r2, [r3, #8]
      break;
 800f5e8:	e03c      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6818      	ldr	r0, [r3, #0]
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	6859      	ldr	r1, [r3, #4]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	f000 fbe4 	bl	800fdc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2150      	movs	r1, #80	; 0x50
 800f602:	4618      	mov	r0, r3
 800f604:	f000 fc3e 	bl	800fe84 <TIM_ITRx_SetConfig>
      break;
 800f608:	e02c      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6818      	ldr	r0, [r3, #0]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	6859      	ldr	r1, [r3, #4]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	461a      	mov	r2, r3
 800f618:	f000 fc03 	bl	800fe22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2160      	movs	r1, #96	; 0x60
 800f622:	4618      	mov	r0, r3
 800f624:	f000 fc2e 	bl	800fe84 <TIM_ITRx_SetConfig>
      break;
 800f628:	e01c      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	6859      	ldr	r1, [r3, #4]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	461a      	mov	r2, r3
 800f638:	f000 fbc4 	bl	800fdc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2140      	movs	r1, #64	; 0x40
 800f642:	4618      	mov	r0, r3
 800f644:	f000 fc1e 	bl	800fe84 <TIM_ITRx_SetConfig>
      break;
 800f648:	e00c      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4619      	mov	r1, r3
 800f654:	4610      	mov	r0, r2
 800f656:	f000 fc15 	bl	800fe84 <TIM_ITRx_SetConfig>
      break;
 800f65a:	e003      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	73fb      	strb	r3, [r7, #15]
      break;
 800f660:	e000      	b.n	800f664 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2201      	movs	r2, #1
 800f668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f674:	7bfb      	ldrb	r3, [r7, #15]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	ffceff88 	.word	0xffceff88
 800f684:	00100040 	.word	0x00100040
 800f688:	00100030 	.word	0x00100030
 800f68c:	00100020 	.word	0x00100020

0800f690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a46      	ldr	r2, [pc, #280]	; (800f7f8 <TIM_Base_SetConfig+0x12c>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d013      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ea:	d00f      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a43      	ldr	r2, [pc, #268]	; (800f7fc <TIM_Base_SetConfig+0x130>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d00b      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a42      	ldr	r2, [pc, #264]	; (800f800 <TIM_Base_SetConfig+0x134>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d007      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a41      	ldr	r2, [pc, #260]	; (800f804 <TIM_Base_SetConfig+0x138>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d003      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a40      	ldr	r2, [pc, #256]	; (800f808 <TIM_Base_SetConfig+0x13c>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d108      	bne.n	800f71e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4a35      	ldr	r2, [pc, #212]	; (800f7f8 <TIM_Base_SetConfig+0x12c>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d01f      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f72c:	d01b      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a32      	ldr	r2, [pc, #200]	; (800f7fc <TIM_Base_SetConfig+0x130>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d017      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a31      	ldr	r2, [pc, #196]	; (800f800 <TIM_Base_SetConfig+0x134>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d013      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a30      	ldr	r2, [pc, #192]	; (800f804 <TIM_Base_SetConfig+0x138>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d00f      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a2f      	ldr	r2, [pc, #188]	; (800f808 <TIM_Base_SetConfig+0x13c>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d00b      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a2e      	ldr	r2, [pc, #184]	; (800f80c <TIM_Base_SetConfig+0x140>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d007      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a2d      	ldr	r2, [pc, #180]	; (800f810 <TIM_Base_SetConfig+0x144>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d003      	beq.n	800f766 <TIM_Base_SetConfig+0x9a>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4a2c      	ldr	r2, [pc, #176]	; (800f814 <TIM_Base_SetConfig+0x148>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d108      	bne.n	800f778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f76c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	4313      	orrs	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	695b      	ldr	r3, [r3, #20]
 800f782:	4313      	orrs	r3, r2
 800f784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	68fa      	ldr	r2, [r7, #12]
 800f78a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689a      	ldr	r2, [r3, #8]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a16      	ldr	r2, [pc, #88]	; (800f7f8 <TIM_Base_SetConfig+0x12c>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d00f      	beq.n	800f7c4 <TIM_Base_SetConfig+0xf8>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a18      	ldr	r2, [pc, #96]	; (800f808 <TIM_Base_SetConfig+0x13c>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d00b      	beq.n	800f7c4 <TIM_Base_SetConfig+0xf8>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a17      	ldr	r2, [pc, #92]	; (800f80c <TIM_Base_SetConfig+0x140>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d007      	beq.n	800f7c4 <TIM_Base_SetConfig+0xf8>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a16      	ldr	r2, [pc, #88]	; (800f810 <TIM_Base_SetConfig+0x144>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d003      	beq.n	800f7c4 <TIM_Base_SetConfig+0xf8>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a15      	ldr	r2, [pc, #84]	; (800f814 <TIM_Base_SetConfig+0x148>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d103      	bne.n	800f7cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	691a      	ldr	r2, [r3, #16]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d105      	bne.n	800f7ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	f023 0201 	bic.w	r2, r3, #1
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	611a      	str	r2, [r3, #16]
  }
}
 800f7ea:	bf00      	nop
 800f7ec:	3714      	adds	r7, #20
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop
 800f7f8:	40010000 	.word	0x40010000
 800f7fc:	40000400 	.word	0x40000400
 800f800:	40000800 	.word	0x40000800
 800f804:	40000c00 	.word	0x40000c00
 800f808:	40010400 	.word	0x40010400
 800f80c:	40014000 	.word	0x40014000
 800f810:	40014400 	.word	0x40014400
 800f814:	40014800 	.word	0x40014800

0800f818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f818:	b480      	push	{r7}
 800f81a:	b087      	sub	sp, #28
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a1b      	ldr	r3, [r3, #32]
 800f82c:	f023 0201 	bic.w	r2, r3, #1
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	4b37      	ldr	r3, [pc, #220]	; (800f920 <TIM_OC1_SetConfig+0x108>)
 800f844:	4013      	ands	r3, r2
 800f846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f023 0303 	bic.w	r3, r3, #3
 800f84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	4313      	orrs	r3, r2
 800f858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f023 0302 	bic.w	r3, r3, #2
 800f860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	4313      	orrs	r3, r2
 800f86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a2d      	ldr	r2, [pc, #180]	; (800f924 <TIM_OC1_SetConfig+0x10c>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d00f      	beq.n	800f894 <TIM_OC1_SetConfig+0x7c>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a2c      	ldr	r2, [pc, #176]	; (800f928 <TIM_OC1_SetConfig+0x110>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d00b      	beq.n	800f894 <TIM_OC1_SetConfig+0x7c>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a2b      	ldr	r2, [pc, #172]	; (800f92c <TIM_OC1_SetConfig+0x114>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d007      	beq.n	800f894 <TIM_OC1_SetConfig+0x7c>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a2a      	ldr	r2, [pc, #168]	; (800f930 <TIM_OC1_SetConfig+0x118>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d003      	beq.n	800f894 <TIM_OC1_SetConfig+0x7c>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a29      	ldr	r2, [pc, #164]	; (800f934 <TIM_OC1_SetConfig+0x11c>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d10c      	bne.n	800f8ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f023 0308 	bic.w	r3, r3, #8
 800f89a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	697a      	ldr	r2, [r7, #20]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f023 0304 	bic.w	r3, r3, #4
 800f8ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a1c      	ldr	r2, [pc, #112]	; (800f924 <TIM_OC1_SetConfig+0x10c>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d00f      	beq.n	800f8d6 <TIM_OC1_SetConfig+0xbe>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a1b      	ldr	r2, [pc, #108]	; (800f928 <TIM_OC1_SetConfig+0x110>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d00b      	beq.n	800f8d6 <TIM_OC1_SetConfig+0xbe>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a1a      	ldr	r2, [pc, #104]	; (800f92c <TIM_OC1_SetConfig+0x114>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d007      	beq.n	800f8d6 <TIM_OC1_SetConfig+0xbe>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a19      	ldr	r2, [pc, #100]	; (800f930 <TIM_OC1_SetConfig+0x118>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d003      	beq.n	800f8d6 <TIM_OC1_SetConfig+0xbe>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a18      	ldr	r2, [pc, #96]	; (800f934 <TIM_OC1_SetConfig+0x11c>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d111      	bne.n	800f8fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	693a      	ldr	r2, [r7, #16]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	699b      	ldr	r3, [r3, #24]
 800f8f4:	693a      	ldr	r2, [r7, #16]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	693a      	ldr	r2, [r7, #16]
 800f8fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	685a      	ldr	r2, [r3, #4]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	621a      	str	r2, [r3, #32]
}
 800f914:	bf00      	nop
 800f916:	371c      	adds	r7, #28
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	fffeff8f 	.word	0xfffeff8f
 800f924:	40010000 	.word	0x40010000
 800f928:	40010400 	.word	0x40010400
 800f92c:	40014000 	.word	0x40014000
 800f930:	40014400 	.word	0x40014400
 800f934:	40014800 	.word	0x40014800

0800f938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f938:	b480      	push	{r7}
 800f93a:	b087      	sub	sp, #28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6a1b      	ldr	r3, [r3, #32]
 800f94c:	f023 0210 	bic.w	r2, r3, #16
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	699b      	ldr	r3, [r3, #24]
 800f95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	4b34      	ldr	r3, [pc, #208]	; (800fa34 <TIM_OC2_SetConfig+0xfc>)
 800f964:	4013      	ands	r3, r2
 800f966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f96e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	021b      	lsls	r3, r3, #8
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	4313      	orrs	r3, r2
 800f97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	f023 0320 	bic.w	r3, r3, #32
 800f982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	011b      	lsls	r3, r3, #4
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	4313      	orrs	r3, r2
 800f98e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a29      	ldr	r2, [pc, #164]	; (800fa38 <TIM_OC2_SetConfig+0x100>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d003      	beq.n	800f9a0 <TIM_OC2_SetConfig+0x68>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a28      	ldr	r2, [pc, #160]	; (800fa3c <TIM_OC2_SetConfig+0x104>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d10d      	bne.n	800f9bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	011b      	lsls	r3, r3, #4
 800f9ae:	697a      	ldr	r2, [r7, #20]
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a1e      	ldr	r2, [pc, #120]	; (800fa38 <TIM_OC2_SetConfig+0x100>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d00f      	beq.n	800f9e4 <TIM_OC2_SetConfig+0xac>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a1d      	ldr	r2, [pc, #116]	; (800fa3c <TIM_OC2_SetConfig+0x104>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d00b      	beq.n	800f9e4 <TIM_OC2_SetConfig+0xac>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a1c      	ldr	r2, [pc, #112]	; (800fa40 <TIM_OC2_SetConfig+0x108>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d007      	beq.n	800f9e4 <TIM_OC2_SetConfig+0xac>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a1b      	ldr	r2, [pc, #108]	; (800fa44 <TIM_OC2_SetConfig+0x10c>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d003      	beq.n	800f9e4 <TIM_OC2_SetConfig+0xac>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a1a      	ldr	r2, [pc, #104]	; (800fa48 <TIM_OC2_SetConfig+0x110>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d113      	bne.n	800fa0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	693a      	ldr	r2, [r7, #16]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	699b      	ldr	r3, [r3, #24]
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	685a      	ldr	r2, [r3, #4]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	697a      	ldr	r2, [r7, #20]
 800fa24:	621a      	str	r2, [r3, #32]
}
 800fa26:	bf00      	nop
 800fa28:	371c      	adds	r7, #28
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	feff8fff 	.word	0xfeff8fff
 800fa38:	40010000 	.word	0x40010000
 800fa3c:	40010400 	.word	0x40010400
 800fa40:	40014000 	.word	0x40014000
 800fa44:	40014400 	.word	0x40014400
 800fa48:	40014800 	.word	0x40014800

0800fa4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b087      	sub	sp, #28
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6a1b      	ldr	r3, [r3, #32]
 800fa60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	4b33      	ldr	r3, [pc, #204]	; (800fb44 <TIM_OC3_SetConfig+0xf8>)
 800fa78:	4013      	ands	r3, r2
 800fa7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f023 0303 	bic.w	r3, r3, #3
 800fa82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	021b      	lsls	r3, r3, #8
 800fa9c:	697a      	ldr	r2, [r7, #20]
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a28      	ldr	r2, [pc, #160]	; (800fb48 <TIM_OC3_SetConfig+0xfc>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d003      	beq.n	800fab2 <TIM_OC3_SetConfig+0x66>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a27      	ldr	r2, [pc, #156]	; (800fb4c <TIM_OC3_SetConfig+0x100>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d10d      	bne.n	800face <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	021b      	lsls	r3, r3, #8
 800fac0:	697a      	ldr	r2, [r7, #20]
 800fac2:	4313      	orrs	r3, r2
 800fac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800facc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a1d      	ldr	r2, [pc, #116]	; (800fb48 <TIM_OC3_SetConfig+0xfc>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d00f      	beq.n	800faf6 <TIM_OC3_SetConfig+0xaa>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a1c      	ldr	r2, [pc, #112]	; (800fb4c <TIM_OC3_SetConfig+0x100>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d00b      	beq.n	800faf6 <TIM_OC3_SetConfig+0xaa>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a1b      	ldr	r2, [pc, #108]	; (800fb50 <TIM_OC3_SetConfig+0x104>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d007      	beq.n	800faf6 <TIM_OC3_SetConfig+0xaa>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a1a      	ldr	r2, [pc, #104]	; (800fb54 <TIM_OC3_SetConfig+0x108>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d003      	beq.n	800faf6 <TIM_OC3_SetConfig+0xaa>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a19      	ldr	r2, [pc, #100]	; (800fb58 <TIM_OC3_SetConfig+0x10c>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d113      	bne.n	800fb1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fafc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	695b      	ldr	r3, [r3, #20]
 800fb0a:	011b      	lsls	r3, r3, #4
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	011b      	lsls	r3, r3, #4
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	693a      	ldr	r2, [r7, #16]
 800fb22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	68fa      	ldr	r2, [r7, #12]
 800fb28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	697a      	ldr	r2, [r7, #20]
 800fb36:	621a      	str	r2, [r3, #32]
}
 800fb38:	bf00      	nop
 800fb3a:	371c      	adds	r7, #28
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr
 800fb44:	fffeff8f 	.word	0xfffeff8f
 800fb48:	40010000 	.word	0x40010000
 800fb4c:	40010400 	.word	0x40010400
 800fb50:	40014000 	.word	0x40014000
 800fb54:	40014400 	.word	0x40014400
 800fb58:	40014800 	.word	0x40014800

0800fb5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b087      	sub	sp, #28
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a1b      	ldr	r3, [r3, #32]
 800fb70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	69db      	ldr	r3, [r3, #28]
 800fb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	4b24      	ldr	r3, [pc, #144]	; (800fc18 <TIM_OC4_SetConfig+0xbc>)
 800fb88:	4013      	ands	r3, r2
 800fb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	021b      	lsls	r3, r3, #8
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	031b      	lsls	r3, r3, #12
 800fbae:	693a      	ldr	r2, [r7, #16]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4a19      	ldr	r2, [pc, #100]	; (800fc1c <TIM_OC4_SetConfig+0xc0>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00f      	beq.n	800fbdc <TIM_OC4_SetConfig+0x80>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a18      	ldr	r2, [pc, #96]	; (800fc20 <TIM_OC4_SetConfig+0xc4>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d00b      	beq.n	800fbdc <TIM_OC4_SetConfig+0x80>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a17      	ldr	r2, [pc, #92]	; (800fc24 <TIM_OC4_SetConfig+0xc8>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d007      	beq.n	800fbdc <TIM_OC4_SetConfig+0x80>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a16      	ldr	r2, [pc, #88]	; (800fc28 <TIM_OC4_SetConfig+0xcc>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d003      	beq.n	800fbdc <TIM_OC4_SetConfig+0x80>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4a15      	ldr	r2, [pc, #84]	; (800fc2c <TIM_OC4_SetConfig+0xd0>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d109      	bne.n	800fbf0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	695b      	ldr	r3, [r3, #20]
 800fbe8:	019b      	lsls	r3, r3, #6
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	697a      	ldr	r2, [r7, #20]
 800fbf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	685a      	ldr	r2, [r3, #4]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	693a      	ldr	r2, [r7, #16]
 800fc08:	621a      	str	r2, [r3, #32]
}
 800fc0a:	bf00      	nop
 800fc0c:	371c      	adds	r7, #28
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	feff8fff 	.word	0xfeff8fff
 800fc1c:	40010000 	.word	0x40010000
 800fc20:	40010400 	.word	0x40010400
 800fc24:	40014000 	.word	0x40014000
 800fc28:	40014400 	.word	0x40014400
 800fc2c:	40014800 	.word	0x40014800

0800fc30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
 800fc44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	4b21      	ldr	r3, [pc, #132]	; (800fce0 <TIM_OC5_SetConfig+0xb0>)
 800fc5c:	4013      	ands	r3, r2
 800fc5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	4313      	orrs	r3, r2
 800fc68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fc70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	041b      	lsls	r3, r3, #16
 800fc78:	693a      	ldr	r2, [r7, #16]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4a18      	ldr	r2, [pc, #96]	; (800fce4 <TIM_OC5_SetConfig+0xb4>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d00f      	beq.n	800fca6 <TIM_OC5_SetConfig+0x76>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4a17      	ldr	r2, [pc, #92]	; (800fce8 <TIM_OC5_SetConfig+0xb8>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d00b      	beq.n	800fca6 <TIM_OC5_SetConfig+0x76>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a16      	ldr	r2, [pc, #88]	; (800fcec <TIM_OC5_SetConfig+0xbc>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d007      	beq.n	800fca6 <TIM_OC5_SetConfig+0x76>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4a15      	ldr	r2, [pc, #84]	; (800fcf0 <TIM_OC5_SetConfig+0xc0>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d003      	beq.n	800fca6 <TIM_OC5_SetConfig+0x76>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a14      	ldr	r2, [pc, #80]	; (800fcf4 <TIM_OC5_SetConfig+0xc4>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d109      	bne.n	800fcba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	695b      	ldr	r3, [r3, #20]
 800fcb2:	021b      	lsls	r3, r3, #8
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	693a      	ldr	r2, [r7, #16]
 800fcd2:	621a      	str	r2, [r3, #32]
}
 800fcd4:	bf00      	nop
 800fcd6:	371c      	adds	r7, #28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	fffeff8f 	.word	0xfffeff8f
 800fce4:	40010000 	.word	0x40010000
 800fce8:	40010400 	.word	0x40010400
 800fcec:	40014000 	.word	0x40014000
 800fcf0:	40014400 	.word	0x40014400
 800fcf4:	40014800 	.word	0x40014800

0800fcf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b087      	sub	sp, #28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a1b      	ldr	r3, [r3, #32]
 800fd06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	4b22      	ldr	r3, [pc, #136]	; (800fdac <TIM_OC6_SetConfig+0xb4>)
 800fd24:	4013      	ands	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	021b      	lsls	r3, r3, #8
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	051b      	lsls	r3, r3, #20
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a19      	ldr	r2, [pc, #100]	; (800fdb0 <TIM_OC6_SetConfig+0xb8>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d00f      	beq.n	800fd70 <TIM_OC6_SetConfig+0x78>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a18      	ldr	r2, [pc, #96]	; (800fdb4 <TIM_OC6_SetConfig+0xbc>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d00b      	beq.n	800fd70 <TIM_OC6_SetConfig+0x78>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a17      	ldr	r2, [pc, #92]	; (800fdb8 <TIM_OC6_SetConfig+0xc0>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d007      	beq.n	800fd70 <TIM_OC6_SetConfig+0x78>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a16      	ldr	r2, [pc, #88]	; (800fdbc <TIM_OC6_SetConfig+0xc4>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d003      	beq.n	800fd70 <TIM_OC6_SetConfig+0x78>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4a15      	ldr	r2, [pc, #84]	; (800fdc0 <TIM_OC6_SetConfig+0xc8>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d109      	bne.n	800fd84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	695b      	ldr	r3, [r3, #20]
 800fd7c:	029b      	lsls	r3, r3, #10
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	693a      	ldr	r2, [r7, #16]
 800fd9c:	621a      	str	r2, [r3, #32]
}
 800fd9e:	bf00      	nop
 800fda0:	371c      	adds	r7, #28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	feff8fff 	.word	0xfeff8fff
 800fdb0:	40010000 	.word	0x40010000
 800fdb4:	40010400 	.word	0x40010400
 800fdb8:	40014000 	.word	0x40014000
 800fdbc:	40014400 	.word	0x40014400
 800fdc0:	40014800 	.word	0x40014800

0800fdc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6a1b      	ldr	r3, [r3, #32]
 800fdd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	f023 0201 	bic.w	r2, r3, #1
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fdee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	693a      	ldr	r2, [r7, #16]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	f023 030a 	bic.w	r3, r3, #10
 800fe00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe02:	697a      	ldr	r2, [r7, #20]
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	621a      	str	r2, [r3, #32]
}
 800fe16:	bf00      	nop
 800fe18:	371c      	adds	r7, #28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr

0800fe22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe22:	b480      	push	{r7}
 800fe24:	b087      	sub	sp, #28
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	60f8      	str	r0, [r7, #12]
 800fe2a:	60b9      	str	r1, [r7, #8]
 800fe2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	6a1b      	ldr	r3, [r3, #32]
 800fe38:	f023 0210 	bic.w	r2, r3, #16
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	699b      	ldr	r3, [r3, #24]
 800fe44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	031b      	lsls	r3, r3, #12
 800fe52:	693a      	ldr	r2, [r7, #16]
 800fe54:	4313      	orrs	r3, r2
 800fe56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	697a      	ldr	r2, [r7, #20]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	621a      	str	r2, [r3, #32]
}
 800fe76:	bf00      	nop
 800fe78:	371c      	adds	r7, #28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
	...

0800fe84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	4b09      	ldr	r3, [pc, #36]	; (800febc <TIM_ITRx_SetConfig+0x38>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe9c:	683a      	ldr	r2, [r7, #0]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	4313      	orrs	r3, r2
 800fea2:	f043 0307 	orr.w	r3, r3, #7
 800fea6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	609a      	str	r2, [r3, #8]
}
 800feae:	bf00      	nop
 800feb0:	3714      	adds	r7, #20
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	ffcfff8f 	.word	0xffcfff8f

0800fec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b087      	sub	sp, #28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	021a      	lsls	r2, r3, #8
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	431a      	orrs	r2, r3
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	4313      	orrs	r3, r2
 800fee8:	697a      	ldr	r2, [r7, #20]
 800feea:	4313      	orrs	r3, r2
 800feec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	697a      	ldr	r2, [r7, #20]
 800fef2:	609a      	str	r2, [r3, #8]
}
 800fef4:	bf00      	nop
 800fef6:	371c      	adds	r7, #28
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b087      	sub	sp, #28
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	60b9      	str	r1, [r7, #8]
 800ff0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	f003 031f 	and.w	r3, r3, #31
 800ff12:	2201      	movs	r2, #1
 800ff14:	fa02 f303 	lsl.w	r3, r2, r3
 800ff18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6a1a      	ldr	r2, [r3, #32]
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	43db      	mvns	r3, r3
 800ff22:	401a      	ands	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6a1a      	ldr	r2, [r3, #32]
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	f003 031f 	and.w	r3, r3, #31
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	fa01 f303 	lsl.w	r3, r1, r3
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	621a      	str	r2, [r3, #32]
}
 800ff3e:	bf00      	nop
 800ff40:	371c      	adds	r7, #28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
	...

0800ff4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d101      	bne.n	800ff64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff60:	2302      	movs	r3, #2
 800ff62:	e06d      	b.n	8010040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2202      	movs	r2, #2
 800ff70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a30      	ldr	r2, [pc, #192]	; (801004c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d004      	beq.n	800ff98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a2f      	ldr	r2, [pc, #188]	; (8010050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d108      	bne.n	800ffaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ff9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a20      	ldr	r2, [pc, #128]	; (801004c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d022      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffd6:	d01d      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a1d      	ldr	r2, [pc, #116]	; (8010054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d018      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a1c      	ldr	r2, [pc, #112]	; (8010058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d013      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a1a      	ldr	r2, [pc, #104]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d00e      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a15      	ldr	r2, [pc, #84]	; (8010050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d009      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a16      	ldr	r2, [pc, #88]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d004      	beq.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a15      	ldr	r2, [pc, #84]	; (8010064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d10c      	bne.n	801002e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801001a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	4313      	orrs	r3, r2
 8010024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2201      	movs	r2, #1
 8010032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	40010000 	.word	0x40010000
 8010050:	40010400 	.word	0x40010400
 8010054:	40000400 	.word	0x40000400
 8010058:	40000800 	.word	0x40000800
 801005c:	40000c00 	.word	0x40000c00
 8010060:	40001800 	.word	0x40001800
 8010064:	40014000 	.word	0x40014000

08010068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010068:	b480      	push	{r7}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010072:	2300      	movs	r3, #0
 8010074:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801007c:	2b01      	cmp	r3, #1
 801007e:	d101      	bne.n	8010084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010080:	2302      	movs	r3, #2
 8010082:	e065      	b.n	8010150 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	4313      	orrs	r3, r2
 8010098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4313      	orrs	r3, r2
 80100c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	4313      	orrs	r3, r2
 80100d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	695b      	ldr	r3, [r3, #20]
 80100dc:	4313      	orrs	r3, r2
 80100de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ea:	4313      	orrs	r3, r2
 80100ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	699b      	ldr	r3, [r3, #24]
 80100f8:	041b      	lsls	r3, r3, #16
 80100fa:	4313      	orrs	r3, r2
 80100fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4a16      	ldr	r2, [pc, #88]	; (801015c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d004      	beq.n	8010112 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a14      	ldr	r2, [pc, #80]	; (8010160 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d115      	bne.n	801013e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011c:	051b      	lsls	r3, r3, #20
 801011e:	4313      	orrs	r3, r2
 8010120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	69db      	ldr	r3, [r3, #28]
 801012c:	4313      	orrs	r3, r2
 801012e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	6a1b      	ldr	r3, [r3, #32]
 801013a:	4313      	orrs	r3, r2
 801013c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801014e:	2300      	movs	r3, #0
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr
 801015c:	40010000 	.word	0x40010000
 8010160:	40010400 	.word	0x40010400

08010164 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801016c:	bf00      	nop
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010180:	bf00      	nop
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010194:	bf00      	nop
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d101      	bne.n	80101b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101ae:	2301      	movs	r3, #1
 80101b0:	e042      	b.n	8010238 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d106      	bne.n	80101ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7f3 fbf7 	bl	80039b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2224      	movs	r2, #36	; 0x24
 80101ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f022 0201 	bic.w	r2, r2, #1
 80101e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d002      	beq.n	80101f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f001 fbc2 	bl	8011974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 fe57 	bl	8010ea4 <UART_SetConfig>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d101      	bne.n	8010200 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80101fc:	2301      	movs	r3, #1
 80101fe:	e01b      	b.n	8010238 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	685a      	ldr	r2, [r3, #4]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801020e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	689a      	ldr	r2, [r3, #8]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801021e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f042 0201 	orr.w	r2, r2, #1
 801022e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f001 fc41 	bl	8011ab8 <UART_CheckIdleState>
 8010236:	4603      	mov	r3, r0
}
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b08a      	sub	sp, #40	; 0x28
 8010244:	af02      	add	r7, sp, #8
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	603b      	str	r3, [r7, #0]
 801024c:	4613      	mov	r3, r2
 801024e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010256:	2b20      	cmp	r3, #32
 8010258:	d17b      	bne.n	8010352 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d002      	beq.n	8010266 <HAL_UART_Transmit+0x26>
 8010260:	88fb      	ldrh	r3, [r7, #6]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010266:	2301      	movs	r3, #1
 8010268:	e074      	b.n	8010354 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2200      	movs	r2, #0
 801026e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2221      	movs	r2, #33	; 0x21
 8010276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801027a:	f7f3 ff1b 	bl	80040b4 <HAL_GetTick>
 801027e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	88fa      	ldrh	r2, [r7, #6]
 8010284:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	88fa      	ldrh	r2, [r7, #6]
 801028c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010298:	d108      	bne.n	80102ac <HAL_UART_Transmit+0x6c>
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d104      	bne.n	80102ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80102a2:	2300      	movs	r3, #0
 80102a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	61bb      	str	r3, [r7, #24]
 80102aa:	e003      	b.n	80102b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102b0:	2300      	movs	r3, #0
 80102b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102b4:	e030      	b.n	8010318 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2200      	movs	r2, #0
 80102be:	2180      	movs	r1, #128	; 0x80
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f001 fca3 	bl	8011c0c <UART_WaitOnFlagUntilTimeout>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d005      	beq.n	80102d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2220      	movs	r2, #32
 80102d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80102d4:	2303      	movs	r3, #3
 80102d6:	e03d      	b.n	8010354 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10b      	bne.n	80102f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	3302      	adds	r3, #2
 80102f2:	61bb      	str	r3, [r7, #24]
 80102f4:	e007      	b.n	8010306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	781a      	ldrb	r2, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	3301      	adds	r3, #1
 8010304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801030c:	b29b      	uxth	r3, r3
 801030e:	3b01      	subs	r3, #1
 8010310:	b29a      	uxth	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801031e:	b29b      	uxth	r3, r3
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1c8      	bne.n	80102b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	2200      	movs	r2, #0
 801032c:	2140      	movs	r1, #64	; 0x40
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f001 fc6c 	bl	8011c0c <UART_WaitOnFlagUntilTimeout>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d005      	beq.n	8010346 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2220      	movs	r2, #32
 801033e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010342:	2303      	movs	r3, #3
 8010344:	e006      	b.n	8010354 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2220      	movs	r2, #32
 801034a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	e000      	b.n	8010354 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010352:	2302      	movs	r3, #2
  }
}
 8010354:	4618      	mov	r0, r3
 8010356:	3720      	adds	r7, #32
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b08a      	sub	sp, #40	; 0x28
 8010360:	af02      	add	r7, sp, #8
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	603b      	str	r3, [r7, #0]
 8010368:	4613      	mov	r3, r2
 801036a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010372:	2b20      	cmp	r3, #32
 8010374:	f040 80b5 	bne.w	80104e2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d002      	beq.n	8010384 <HAL_UART_Receive+0x28>
 801037e:	88fb      	ldrh	r3, [r7, #6]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d101      	bne.n	8010388 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010384:	2301      	movs	r3, #1
 8010386:	e0ad      	b.n	80104e4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2200      	movs	r2, #0
 801038c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2222      	movs	r2, #34	; 0x22
 8010394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801039e:	f7f3 fe89 	bl	80040b4 <HAL_GetTick>
 80103a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	88fa      	ldrh	r2, [r7, #6]
 80103a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	88fa      	ldrh	r2, [r7, #6]
 80103b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103bc:	d10e      	bne.n	80103dc <HAL_UART_Receive+0x80>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <HAL_UART_Receive+0x76>
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80103cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103d0:	e02d      	b.n	801042e <HAL_UART_Receive+0xd2>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	22ff      	movs	r2, #255	; 0xff
 80103d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103da:	e028      	b.n	801042e <HAL_UART_Receive+0xd2>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10d      	bne.n	8010400 <HAL_UART_Receive+0xa4>
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d104      	bne.n	80103f6 <HAL_UART_Receive+0x9a>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	22ff      	movs	r2, #255	; 0xff
 80103f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103f4:	e01b      	b.n	801042e <HAL_UART_Receive+0xd2>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	227f      	movs	r2, #127	; 0x7f
 80103fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103fe:	e016      	b.n	801042e <HAL_UART_Receive+0xd2>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010408:	d10d      	bne.n	8010426 <HAL_UART_Receive+0xca>
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d104      	bne.n	801041c <HAL_UART_Receive+0xc0>
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	227f      	movs	r2, #127	; 0x7f
 8010416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801041a:	e008      	b.n	801042e <HAL_UART_Receive+0xd2>
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	223f      	movs	r2, #63	; 0x3f
 8010420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010424:	e003      	b.n	801042e <HAL_UART_Receive+0xd2>
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2200      	movs	r2, #0
 801042a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010434:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801043e:	d108      	bne.n	8010452 <HAL_UART_Receive+0xf6>
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	691b      	ldr	r3, [r3, #16]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d104      	bne.n	8010452 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010448:	2300      	movs	r3, #0
 801044a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	61bb      	str	r3, [r7, #24]
 8010450:	e003      	b.n	801045a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010456:	2300      	movs	r3, #0
 8010458:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801045a:	e036      	b.n	80104ca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2200      	movs	r2, #0
 8010464:	2120      	movs	r1, #32
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f001 fbd0 	bl	8011c0c <UART_WaitOnFlagUntilTimeout>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d005      	beq.n	801047e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2220      	movs	r2, #32
 8010476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801047a:	2303      	movs	r3, #3
 801047c:	e032      	b.n	80104e4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10c      	bne.n	801049e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801048a:	b29a      	uxth	r2, r3
 801048c:	8a7b      	ldrh	r3, [r7, #18]
 801048e:	4013      	ands	r3, r2
 8010490:	b29a      	uxth	r2, r3
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	3302      	adds	r3, #2
 801049a:	61bb      	str	r3, [r7, #24]
 801049c:	e00c      	b.n	80104b8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	8a7b      	ldrh	r3, [r7, #18]
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	4013      	ands	r3, r2
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	3301      	adds	r3, #1
 80104b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104be:	b29b      	uxth	r3, r3
 80104c0:	3b01      	subs	r3, #1
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1c2      	bne.n	801045c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2220      	movs	r2, #32
 80104da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	e000      	b.n	80104e4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80104e2:	2302      	movs	r3, #2
  }
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3720      	adds	r7, #32
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b08a      	sub	sp, #40	; 0x28
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	4613      	mov	r3, r2
 80104f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010500:	2b20      	cmp	r3, #32
 8010502:	d137      	bne.n	8010574 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d002      	beq.n	8010510 <HAL_UART_Receive_IT+0x24>
 801050a:	88fb      	ldrh	r3, [r7, #6]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d101      	bne.n	8010514 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010510:	2301      	movs	r3, #1
 8010512:	e030      	b.n	8010576 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a18      	ldr	r2, [pc, #96]	; (8010580 <HAL_UART_Receive_IT+0x94>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d01f      	beq.n	8010564 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801052e:	2b00      	cmp	r3, #0
 8010530:	d018      	beq.n	8010564 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	e853 3f00 	ldrex	r3, [r3]
 801053e:	613b      	str	r3, [r7, #16]
   return(result);
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010546:	627b      	str	r3, [r7, #36]	; 0x24
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	461a      	mov	r2, r3
 801054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010550:	623b      	str	r3, [r7, #32]
 8010552:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010554:	69f9      	ldr	r1, [r7, #28]
 8010556:	6a3a      	ldr	r2, [r7, #32]
 8010558:	e841 2300 	strex	r3, r2, [r1]
 801055c:	61bb      	str	r3, [r7, #24]
   return(result);
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d1e6      	bne.n	8010532 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010564:	88fb      	ldrh	r3, [r7, #6]
 8010566:	461a      	mov	r2, r3
 8010568:	68b9      	ldr	r1, [r7, #8]
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f001 fbbc 	bl	8011ce8 <UART_Start_Receive_IT>
 8010570:	4603      	mov	r3, r0
 8010572:	e000      	b.n	8010576 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010574:	2302      	movs	r3, #2
  }
}
 8010576:	4618      	mov	r0, r3
 8010578:	3728      	adds	r7, #40	; 0x28
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	58000c00 	.word	0x58000c00

08010584 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b09a      	sub	sp, #104	; 0x68
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010594:	e853 3f00 	ldrex	r3, [r3]
 8010598:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801059a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801059c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105a0:	667b      	str	r3, [r7, #100]	; 0x64
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	461a      	mov	r2, r3
 80105a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105aa:	657b      	str	r3, [r7, #84]	; 0x54
 80105ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105b2:	e841 2300 	strex	r3, r2, [r1]
 80105b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d1e6      	bne.n	801058c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3308      	adds	r3, #8
 80105c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c8:	e853 3f00 	ldrex	r3, [r3]
 80105cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80105ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105d0:	4b46      	ldr	r3, [pc, #280]	; (80106ec <HAL_UART_AbortReceive+0x168>)
 80105d2:	4013      	ands	r3, r2
 80105d4:	663b      	str	r3, [r7, #96]	; 0x60
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	3308      	adds	r3, #8
 80105dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105de:	643a      	str	r2, [r7, #64]	; 0x40
 80105e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105e6:	e841 2300 	strex	r3, r2, [r1]
 80105ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d1e5      	bne.n	80105be <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d118      	bne.n	801062c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010600:	6a3b      	ldr	r3, [r7, #32]
 8010602:	e853 3f00 	ldrex	r3, [r3]
 8010606:	61fb      	str	r3, [r7, #28]
   return(result);
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	f023 0310 	bic.w	r3, r3, #16
 801060e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	461a      	mov	r2, r3
 8010616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801061a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801061e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010620:	e841 2300 	strex	r3, r2, [r1]
 8010624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1e6      	bne.n	80105fa <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010636:	2b40      	cmp	r3, #64	; 0x40
 8010638:	d13b      	bne.n	80106b2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	60bb      	str	r3, [r7, #8]
   return(result);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010650:	65bb      	str	r3, [r7, #88]	; 0x58
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801065a:	61ba      	str	r2, [r7, #24]
 801065c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6979      	ldr	r1, [r7, #20]
 8010660:	69ba      	ldr	r2, [r7, #24]
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	613b      	str	r3, [r7, #16]
   return(result);
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e5      	bne.n	801063a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010674:	2b00      	cmp	r3, #0
 8010676:	d01c      	beq.n	80106b2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801067e:	2200      	movs	r2, #0
 8010680:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010688:	4618      	mov	r0, r3
 801068a:	f7f6 fc01 	bl	8006e90 <HAL_DMA_Abort>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00e      	beq.n	80106b2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801069a:	4618      	mov	r0, r3
 801069c:	f7f8 f886 	bl	80087ac <HAL_DMA_GetError>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b20      	cmp	r3, #32
 80106a4:	d105      	bne.n	80106b2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2210      	movs	r2, #16
 80106aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e017      	b.n	80106e2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	220f      	movs	r2, #15
 80106c0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	699a      	ldr	r2, [r3, #24]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f042 0208 	orr.w	r2, r2, #8
 80106d0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2220      	movs	r2, #32
 80106d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3768      	adds	r7, #104	; 0x68
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	effffffe 	.word	0xeffffffe

080106f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b0ba      	sub	sp, #232	; 0xe8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	69db      	ldr	r3, [r3, #28]
 80106fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801071a:	f640 030f 	movw	r3, #2063	; 0x80f
 801071e:	4013      	ands	r3, r2
 8010720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010728:	2b00      	cmp	r3, #0
 801072a:	d11b      	bne.n	8010764 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801072c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010730:	f003 0320 	and.w	r3, r3, #32
 8010734:	2b00      	cmp	r3, #0
 8010736:	d015      	beq.n	8010764 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073c:	f003 0320 	and.w	r3, r3, #32
 8010740:	2b00      	cmp	r3, #0
 8010742:	d105      	bne.n	8010750 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801074c:	2b00      	cmp	r3, #0
 801074e:	d009      	beq.n	8010764 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 8377 	beq.w	8010e48 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	4798      	blx	r3
      }
      return;
 8010762:	e371      	b.n	8010e48 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 8123 	beq.w	80109b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801076e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010772:	4b8d      	ldr	r3, [pc, #564]	; (80109a8 <HAL_UART_IRQHandler+0x2b8>)
 8010774:	4013      	ands	r3, r2
 8010776:	2b00      	cmp	r3, #0
 8010778:	d106      	bne.n	8010788 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801077a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801077e:	4b8b      	ldr	r3, [pc, #556]	; (80109ac <HAL_UART_IRQHandler+0x2bc>)
 8010780:	4013      	ands	r3, r2
 8010782:	2b00      	cmp	r3, #0
 8010784:	f000 8116 	beq.w	80109b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801078c:	f003 0301 	and.w	r3, r3, #1
 8010790:	2b00      	cmp	r3, #0
 8010792:	d011      	beq.n	80107b8 <HAL_UART_IRQHandler+0xc8>
 8010794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00b      	beq.n	80107b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2201      	movs	r2, #1
 80107a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107ae:	f043 0201 	orr.w	r2, r3, #1
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107bc:	f003 0302 	and.w	r3, r3, #2
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d011      	beq.n	80107e8 <HAL_UART_IRQHandler+0xf8>
 80107c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107c8:	f003 0301 	and.w	r3, r3, #1
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2202      	movs	r2, #2
 80107d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107de:	f043 0204 	orr.w	r2, r3, #4
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107ec:	f003 0304 	and.w	r3, r3, #4
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d011      	beq.n	8010818 <HAL_UART_IRQHandler+0x128>
 80107f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107f8:	f003 0301 	and.w	r3, r3, #1
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00b      	beq.n	8010818 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2204      	movs	r2, #4
 8010806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801080e:	f043 0202 	orr.w	r2, r3, #2
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801081c:	f003 0308 	and.w	r3, r3, #8
 8010820:	2b00      	cmp	r3, #0
 8010822:	d017      	beq.n	8010854 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010828:	f003 0320 	and.w	r3, r3, #32
 801082c:	2b00      	cmp	r3, #0
 801082e:	d105      	bne.n	801083c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010834:	4b5c      	ldr	r3, [pc, #368]	; (80109a8 <HAL_UART_IRQHandler+0x2b8>)
 8010836:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010838:	2b00      	cmp	r3, #0
 801083a:	d00b      	beq.n	8010854 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2208      	movs	r2, #8
 8010842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801084a:	f043 0208 	orr.w	r2, r3, #8
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801085c:	2b00      	cmp	r3, #0
 801085e:	d012      	beq.n	8010886 <HAL_UART_IRQHandler+0x196>
 8010860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00c      	beq.n	8010886 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801087c:	f043 0220 	orr.w	r2, r3, #32
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 82dd 	beq.w	8010e4c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010896:	f003 0320 	and.w	r3, r3, #32
 801089a:	2b00      	cmp	r3, #0
 801089c:	d013      	beq.n	80108c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801089e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108a2:	f003 0320 	and.w	r3, r3, #32
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d105      	bne.n	80108b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80108aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d007      	beq.n	80108c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d003      	beq.n	80108c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108da:	2b40      	cmp	r3, #64	; 0x40
 80108dc:	d005      	beq.n	80108ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80108de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80108e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d054      	beq.n	8010994 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f001 fb1e 	bl	8011f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108fa:	2b40      	cmp	r3, #64	; 0x40
 80108fc:	d146      	bne.n	801098c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3308      	adds	r3, #8
 8010904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801090c:	e853 3f00 	ldrex	r3, [r3]
 8010910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801091c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	3308      	adds	r3, #8
 8010926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801092a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801092e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801093a:	e841 2300 	strex	r3, r2, [r1]
 801093e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d1d9      	bne.n	80108fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010950:	2b00      	cmp	r3, #0
 8010952:	d017      	beq.n	8010984 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801095a:	4a15      	ldr	r2, [pc, #84]	; (80109b0 <HAL_UART_IRQHandler+0x2c0>)
 801095c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010964:	4618      	mov	r0, r3
 8010966:	f7f6 fdb1 	bl	80074cc <HAL_DMA_Abort_IT>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d019      	beq.n	80109a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801097e:	4610      	mov	r0, r2
 8010980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010982:	e00f      	b.n	80109a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 fa77 	bl	8010e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801098a:	e00b      	b.n	80109a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 fa73 	bl	8010e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010992:	e007      	b.n	80109a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fa6f 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2200      	movs	r2, #0
 801099e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80109a2:	e253      	b.n	8010e4c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109a4:	bf00      	nop
    return;
 80109a6:	e251      	b.n	8010e4c <HAL_UART_IRQHandler+0x75c>
 80109a8:	10000001 	.word	0x10000001
 80109ac:	04000120 	.word	0x04000120
 80109b0:	08011ff9 	.word	0x08011ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	f040 81e7 	bne.w	8010d8c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80109be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109c2:	f003 0310 	and.w	r3, r3, #16
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 81e0 	beq.w	8010d8c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80109cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109d0:	f003 0310 	and.w	r3, r3, #16
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 81d9 	beq.w	8010d8c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2210      	movs	r2, #16
 80109e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ec:	2b40      	cmp	r3, #64	; 0x40
 80109ee:	f040 8151 	bne.w	8010c94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a96      	ldr	r2, [pc, #600]	; (8010c54 <HAL_UART_IRQHandler+0x564>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d068      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a93      	ldr	r2, [pc, #588]	; (8010c58 <HAL_UART_IRQHandler+0x568>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d061      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4a91      	ldr	r2, [pc, #580]	; (8010c5c <HAL_UART_IRQHandler+0x56c>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d05a      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a8e      	ldr	r2, [pc, #568]	; (8010c60 <HAL_UART_IRQHandler+0x570>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d053      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4a8c      	ldr	r2, [pc, #560]	; (8010c64 <HAL_UART_IRQHandler+0x574>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d04c      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a89      	ldr	r2, [pc, #548]	; (8010c68 <HAL_UART_IRQHandler+0x578>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d045      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a87      	ldr	r2, [pc, #540]	; (8010c6c <HAL_UART_IRQHandler+0x57c>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d03e      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a84      	ldr	r2, [pc, #528]	; (8010c70 <HAL_UART_IRQHandler+0x580>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d037      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a82      	ldr	r2, [pc, #520]	; (8010c74 <HAL_UART_IRQHandler+0x584>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d030      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a7f      	ldr	r2, [pc, #508]	; (8010c78 <HAL_UART_IRQHandler+0x588>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d029      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a7d      	ldr	r2, [pc, #500]	; (8010c7c <HAL_UART_IRQHandler+0x58c>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d022      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a7a      	ldr	r2, [pc, #488]	; (8010c80 <HAL_UART_IRQHandler+0x590>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d01b      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a78      	ldr	r2, [pc, #480]	; (8010c84 <HAL_UART_IRQHandler+0x594>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d014      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a75      	ldr	r2, [pc, #468]	; (8010c88 <HAL_UART_IRQHandler+0x598>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d00d      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a73      	ldr	r2, [pc, #460]	; (8010c8c <HAL_UART_IRQHandler+0x59c>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d006      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x3e2>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4a70      	ldr	r2, [pc, #448]	; (8010c90 <HAL_UART_IRQHandler+0x5a0>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d106      	bne.n	8010ae0 <HAL_UART_IRQHandler+0x3f0>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	e005      	b.n	8010aec <HAL_UART_IRQHandler+0x3fc>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 81ab 	beq.w	8010e50 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b04:	429a      	cmp	r2, r3
 8010b06:	f080 81a3 	bcs.w	8010e50 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1a:	69db      	ldr	r3, [r3, #28]
 8010b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b20:	f000 8087 	beq.w	8010c32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b30:	e853 3f00 	ldrex	r3, [r3]
 8010b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	461a      	mov	r2, r3
 8010b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b5e:	e841 2300 	strex	r3, r2, [r1]
 8010b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d1da      	bne.n	8010b24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	3308      	adds	r3, #8
 8010b74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b78:	e853 3f00 	ldrex	r3, [r3]
 8010b7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b80:	f023 0301 	bic.w	r3, r3, #1
 8010b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	3308      	adds	r3, #8
 8010b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010b92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010b96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010b9e:	e841 2300 	strex	r3, r2, [r1]
 8010ba2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1e1      	bne.n	8010b6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3308      	adds	r3, #8
 8010bb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bb4:	e853 3f00 	ldrex	r3, [r3]
 8010bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	3308      	adds	r3, #8
 8010bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010bd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010bd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010bd6:	e841 2300 	strex	r3, r2, [r1]
 8010bda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d1e3      	bne.n	8010baa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2220      	movs	r2, #32
 8010be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bf8:	e853 3f00 	ldrex	r3, [r3]
 8010bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c00:	f023 0310 	bic.w	r3, r3, #16
 8010c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c1a:	e841 2300 	strex	r3, r2, [r1]
 8010c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1e4      	bne.n	8010bf0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7f6 f92f 	bl	8006e90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2202      	movs	r2, #2
 8010c36:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f91d 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c52:	e0fd      	b.n	8010e50 <HAL_UART_IRQHandler+0x760>
 8010c54:	40020010 	.word	0x40020010
 8010c58:	40020028 	.word	0x40020028
 8010c5c:	40020040 	.word	0x40020040
 8010c60:	40020058 	.word	0x40020058
 8010c64:	40020070 	.word	0x40020070
 8010c68:	40020088 	.word	0x40020088
 8010c6c:	400200a0 	.word	0x400200a0
 8010c70:	400200b8 	.word	0x400200b8
 8010c74:	40020410 	.word	0x40020410
 8010c78:	40020428 	.word	0x40020428
 8010c7c:	40020440 	.word	0x40020440
 8010c80:	40020458 	.word	0x40020458
 8010c84:	40020470 	.word	0x40020470
 8010c88:	40020488 	.word	0x40020488
 8010c8c:	400204a0 	.word	0x400204a0
 8010c90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	1ad3      	subs	r3, r2, r3
 8010ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	f000 80cf 	beq.w	8010e54 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010cb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 80ca 	beq.w	8010e54 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	e853 3f00 	ldrex	r3, [r3]
 8010ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8010ce4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cea:	e841 2300 	strex	r3, r2, [r1]
 8010cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1e4      	bne.n	8010cc0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	3308      	adds	r3, #8
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d00:	e853 3f00 	ldrex	r3, [r3]
 8010d04:	623b      	str	r3, [r7, #32]
   return(result);
 8010d06:	6a3a      	ldr	r2, [r7, #32]
 8010d08:	4b55      	ldr	r3, [pc, #340]	; (8010e60 <HAL_UART_IRQHandler+0x770>)
 8010d0a:	4013      	ands	r3, r2
 8010d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	3308      	adds	r3, #8
 8010d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8010d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d22:	e841 2300 	strex	r3, r2, [r1]
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1e3      	bne.n	8010cf6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2220      	movs	r2, #32
 8010d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	e853 3f00 	ldrex	r3, [r3]
 8010d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f023 0310 	bic.w	r3, r3, #16
 8010d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d64:	61fb      	str	r3, [r7, #28]
 8010d66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d68:	69b9      	ldr	r1, [r7, #24]
 8010d6a:	69fa      	ldr	r2, [r7, #28]
 8010d6c:	e841 2300 	strex	r3, r2, [r1]
 8010d70:	617b      	str	r3, [r7, #20]
   return(result);
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1e4      	bne.n	8010d42 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f881 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d8a:	e063      	b.n	8010e54 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00e      	beq.n	8010db6 <HAL_UART_IRQHandler+0x6c6>
 8010d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d008      	beq.n	8010db6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f001 fe80 	bl	8012ab4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010db4:	e051      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d014      	beq.n	8010dec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d105      	bne.n	8010dda <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d008      	beq.n	8010dec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d03a      	beq.n	8010e58 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	4798      	blx	r3
    }
    return;
 8010dea:	e035      	b.n	8010e58 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d009      	beq.n	8010e0c <HAL_UART_IRQHandler+0x71c>
 8010df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d003      	beq.n	8010e0c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f001 f90d 	bl	8012024 <UART_EndTransmit_IT>
    return;
 8010e0a:	e026      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d009      	beq.n	8010e2c <HAL_UART_IRQHandler+0x73c>
 8010e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d003      	beq.n	8010e2c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f001 fe59 	bl	8012adc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e2a:	e016      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d010      	beq.n	8010e5a <HAL_UART_IRQHandler+0x76a>
 8010e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	da0c      	bge.n	8010e5a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f001 fe41 	bl	8012ac8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e46:	e008      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
      return;
 8010e48:	bf00      	nop
 8010e4a:	e006      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
    return;
 8010e4c:	bf00      	nop
 8010e4e:	e004      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
      return;
 8010e50:	bf00      	nop
 8010e52:	e002      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
      return;
 8010e54:	bf00      	nop
 8010e56:	e000      	b.n	8010e5a <HAL_UART_IRQHandler+0x76a>
    return;
 8010e58:	bf00      	nop
  }
}
 8010e5a:	37e8      	adds	r7, #232	; 0xe8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	effffffe 	.word	0xeffffffe

08010e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010e6c:	bf00      	nop
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	460b      	mov	r3, r1
 8010e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ea8:	b092      	sub	sp, #72	; 0x48
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	689a      	ldr	r2, [r3, #8]
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	691b      	ldr	r3, [r3, #16]
 8010ebc:	431a      	orrs	r2, r3
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	431a      	orrs	r2, r3
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	69db      	ldr	r3, [r3, #28]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	4bbe      	ldr	r3, [pc, #760]	; (80111cc <UART_SetConfig+0x328>)
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	697a      	ldr	r2, [r7, #20]
 8010ed8:	6812      	ldr	r2, [r2, #0]
 8010eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010edc:	430b      	orrs	r3, r1
 8010ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	68da      	ldr	r2, [r3, #12]
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	430a      	orrs	r2, r1
 8010ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4ab3      	ldr	r2, [pc, #716]	; (80111d0 <UART_SetConfig+0x32c>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d004      	beq.n	8010f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	6a1b      	ldr	r3, [r3, #32]
 8010f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	689a      	ldr	r2, [r3, #8]
 8010f16:	4baf      	ldr	r3, [pc, #700]	; (80111d4 <UART_SetConfig+0x330>)
 8010f18:	4013      	ands	r3, r2
 8010f1a:	697a      	ldr	r2, [r7, #20]
 8010f1c:	6812      	ldr	r2, [r2, #0]
 8010f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f20:	430b      	orrs	r3, r1
 8010f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2a:	f023 010f 	bic.w	r1, r3, #15
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	430a      	orrs	r2, r1
 8010f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4aa6      	ldr	r2, [pc, #664]	; (80111d8 <UART_SetConfig+0x334>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d177      	bne.n	8011034 <UART_SetConfig+0x190>
 8010f44:	4ba5      	ldr	r3, [pc, #660]	; (80111dc <UART_SetConfig+0x338>)
 8010f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f4c:	2b28      	cmp	r3, #40	; 0x28
 8010f4e:	d86d      	bhi.n	801102c <UART_SetConfig+0x188>
 8010f50:	a201      	add	r2, pc, #4	; (adr r2, 8010f58 <UART_SetConfig+0xb4>)
 8010f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f56:	bf00      	nop
 8010f58:	08010ffd 	.word	0x08010ffd
 8010f5c:	0801102d 	.word	0x0801102d
 8010f60:	0801102d 	.word	0x0801102d
 8010f64:	0801102d 	.word	0x0801102d
 8010f68:	0801102d 	.word	0x0801102d
 8010f6c:	0801102d 	.word	0x0801102d
 8010f70:	0801102d 	.word	0x0801102d
 8010f74:	0801102d 	.word	0x0801102d
 8010f78:	08011005 	.word	0x08011005
 8010f7c:	0801102d 	.word	0x0801102d
 8010f80:	0801102d 	.word	0x0801102d
 8010f84:	0801102d 	.word	0x0801102d
 8010f88:	0801102d 	.word	0x0801102d
 8010f8c:	0801102d 	.word	0x0801102d
 8010f90:	0801102d 	.word	0x0801102d
 8010f94:	0801102d 	.word	0x0801102d
 8010f98:	0801100d 	.word	0x0801100d
 8010f9c:	0801102d 	.word	0x0801102d
 8010fa0:	0801102d 	.word	0x0801102d
 8010fa4:	0801102d 	.word	0x0801102d
 8010fa8:	0801102d 	.word	0x0801102d
 8010fac:	0801102d 	.word	0x0801102d
 8010fb0:	0801102d 	.word	0x0801102d
 8010fb4:	0801102d 	.word	0x0801102d
 8010fb8:	08011015 	.word	0x08011015
 8010fbc:	0801102d 	.word	0x0801102d
 8010fc0:	0801102d 	.word	0x0801102d
 8010fc4:	0801102d 	.word	0x0801102d
 8010fc8:	0801102d 	.word	0x0801102d
 8010fcc:	0801102d 	.word	0x0801102d
 8010fd0:	0801102d 	.word	0x0801102d
 8010fd4:	0801102d 	.word	0x0801102d
 8010fd8:	0801101d 	.word	0x0801101d
 8010fdc:	0801102d 	.word	0x0801102d
 8010fe0:	0801102d 	.word	0x0801102d
 8010fe4:	0801102d 	.word	0x0801102d
 8010fe8:	0801102d 	.word	0x0801102d
 8010fec:	0801102d 	.word	0x0801102d
 8010ff0:	0801102d 	.word	0x0801102d
 8010ff4:	0801102d 	.word	0x0801102d
 8010ff8:	08011025 	.word	0x08011025
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e222      	b.n	801144a <UART_SetConfig+0x5a6>
 8011004:	2304      	movs	r3, #4
 8011006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100a:	e21e      	b.n	801144a <UART_SetConfig+0x5a6>
 801100c:	2308      	movs	r3, #8
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011012:	e21a      	b.n	801144a <UART_SetConfig+0x5a6>
 8011014:	2310      	movs	r3, #16
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101a:	e216      	b.n	801144a <UART_SetConfig+0x5a6>
 801101c:	2320      	movs	r3, #32
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011022:	e212      	b.n	801144a <UART_SetConfig+0x5a6>
 8011024:	2340      	movs	r3, #64	; 0x40
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e20e      	b.n	801144a <UART_SetConfig+0x5a6>
 801102c:	2380      	movs	r3, #128	; 0x80
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e20a      	b.n	801144a <UART_SetConfig+0x5a6>
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a69      	ldr	r2, [pc, #420]	; (80111e0 <UART_SetConfig+0x33c>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d130      	bne.n	80110a0 <UART_SetConfig+0x1fc>
 801103e:	4b67      	ldr	r3, [pc, #412]	; (80111dc <UART_SetConfig+0x338>)
 8011040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011042:	f003 0307 	and.w	r3, r3, #7
 8011046:	2b05      	cmp	r3, #5
 8011048:	d826      	bhi.n	8011098 <UART_SetConfig+0x1f4>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <UART_SetConfig+0x1ac>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	08011069 	.word	0x08011069
 8011054:	08011071 	.word	0x08011071
 8011058:	08011079 	.word	0x08011079
 801105c:	08011081 	.word	0x08011081
 8011060:	08011089 	.word	0x08011089
 8011064:	08011091 	.word	0x08011091
 8011068:	2300      	movs	r3, #0
 801106a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106e:	e1ec      	b.n	801144a <UART_SetConfig+0x5a6>
 8011070:	2304      	movs	r3, #4
 8011072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011076:	e1e8      	b.n	801144a <UART_SetConfig+0x5a6>
 8011078:	2308      	movs	r3, #8
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e1e4      	b.n	801144a <UART_SetConfig+0x5a6>
 8011080:	2310      	movs	r3, #16
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e1e0      	b.n	801144a <UART_SetConfig+0x5a6>
 8011088:	2320      	movs	r3, #32
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e1dc      	b.n	801144a <UART_SetConfig+0x5a6>
 8011090:	2340      	movs	r3, #64	; 0x40
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e1d8      	b.n	801144a <UART_SetConfig+0x5a6>
 8011098:	2380      	movs	r3, #128	; 0x80
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e1d4      	b.n	801144a <UART_SetConfig+0x5a6>
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a4f      	ldr	r2, [pc, #316]	; (80111e4 <UART_SetConfig+0x340>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d130      	bne.n	801110c <UART_SetConfig+0x268>
 80110aa:	4b4c      	ldr	r3, [pc, #304]	; (80111dc <UART_SetConfig+0x338>)
 80110ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ae:	f003 0307 	and.w	r3, r3, #7
 80110b2:	2b05      	cmp	r3, #5
 80110b4:	d826      	bhi.n	8011104 <UART_SetConfig+0x260>
 80110b6:	a201      	add	r2, pc, #4	; (adr r2, 80110bc <UART_SetConfig+0x218>)
 80110b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110bc:	080110d5 	.word	0x080110d5
 80110c0:	080110dd 	.word	0x080110dd
 80110c4:	080110e5 	.word	0x080110e5
 80110c8:	080110ed 	.word	0x080110ed
 80110cc:	080110f5 	.word	0x080110f5
 80110d0:	080110fd 	.word	0x080110fd
 80110d4:	2300      	movs	r3, #0
 80110d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110da:	e1b6      	b.n	801144a <UART_SetConfig+0x5a6>
 80110dc:	2304      	movs	r3, #4
 80110de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e2:	e1b2      	b.n	801144a <UART_SetConfig+0x5a6>
 80110e4:	2308      	movs	r3, #8
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ea:	e1ae      	b.n	801144a <UART_SetConfig+0x5a6>
 80110ec:	2310      	movs	r3, #16
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e1aa      	b.n	801144a <UART_SetConfig+0x5a6>
 80110f4:	2320      	movs	r3, #32
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e1a6      	b.n	801144a <UART_SetConfig+0x5a6>
 80110fc:	2340      	movs	r3, #64	; 0x40
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e1a2      	b.n	801144a <UART_SetConfig+0x5a6>
 8011104:	2380      	movs	r3, #128	; 0x80
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e19e      	b.n	801144a <UART_SetConfig+0x5a6>
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	4a35      	ldr	r2, [pc, #212]	; (80111e8 <UART_SetConfig+0x344>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d130      	bne.n	8011178 <UART_SetConfig+0x2d4>
 8011116:	4b31      	ldr	r3, [pc, #196]	; (80111dc <UART_SetConfig+0x338>)
 8011118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801111a:	f003 0307 	and.w	r3, r3, #7
 801111e:	2b05      	cmp	r3, #5
 8011120:	d826      	bhi.n	8011170 <UART_SetConfig+0x2cc>
 8011122:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <UART_SetConfig+0x284>)
 8011124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011128:	08011141 	.word	0x08011141
 801112c:	08011149 	.word	0x08011149
 8011130:	08011151 	.word	0x08011151
 8011134:	08011159 	.word	0x08011159
 8011138:	08011161 	.word	0x08011161
 801113c:	08011169 	.word	0x08011169
 8011140:	2300      	movs	r3, #0
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e180      	b.n	801144a <UART_SetConfig+0x5a6>
 8011148:	2304      	movs	r3, #4
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e17c      	b.n	801144a <UART_SetConfig+0x5a6>
 8011150:	2308      	movs	r3, #8
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e178      	b.n	801144a <UART_SetConfig+0x5a6>
 8011158:	2310      	movs	r3, #16
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e174      	b.n	801144a <UART_SetConfig+0x5a6>
 8011160:	2320      	movs	r3, #32
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e170      	b.n	801144a <UART_SetConfig+0x5a6>
 8011168:	2340      	movs	r3, #64	; 0x40
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e16c      	b.n	801144a <UART_SetConfig+0x5a6>
 8011170:	2380      	movs	r3, #128	; 0x80
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e168      	b.n	801144a <UART_SetConfig+0x5a6>
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a1b      	ldr	r2, [pc, #108]	; (80111ec <UART_SetConfig+0x348>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d142      	bne.n	8011208 <UART_SetConfig+0x364>
 8011182:	4b16      	ldr	r3, [pc, #88]	; (80111dc <UART_SetConfig+0x338>)
 8011184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011186:	f003 0307 	and.w	r3, r3, #7
 801118a:	2b05      	cmp	r3, #5
 801118c:	d838      	bhi.n	8011200 <UART_SetConfig+0x35c>
 801118e:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <UART_SetConfig+0x2f0>)
 8011190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011194:	080111ad 	.word	0x080111ad
 8011198:	080111b5 	.word	0x080111b5
 801119c:	080111bd 	.word	0x080111bd
 80111a0:	080111c5 	.word	0x080111c5
 80111a4:	080111f1 	.word	0x080111f1
 80111a8:	080111f9 	.word	0x080111f9
 80111ac:	2300      	movs	r3, #0
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e14a      	b.n	801144a <UART_SetConfig+0x5a6>
 80111b4:	2304      	movs	r3, #4
 80111b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ba:	e146      	b.n	801144a <UART_SetConfig+0x5a6>
 80111bc:	2308      	movs	r3, #8
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e142      	b.n	801144a <UART_SetConfig+0x5a6>
 80111c4:	2310      	movs	r3, #16
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e13e      	b.n	801144a <UART_SetConfig+0x5a6>
 80111cc:	cfff69f3 	.word	0xcfff69f3
 80111d0:	58000c00 	.word	0x58000c00
 80111d4:	11fff4ff 	.word	0x11fff4ff
 80111d8:	40011000 	.word	0x40011000
 80111dc:	58024400 	.word	0x58024400
 80111e0:	40004400 	.word	0x40004400
 80111e4:	40004800 	.word	0x40004800
 80111e8:	40004c00 	.word	0x40004c00
 80111ec:	40005000 	.word	0x40005000
 80111f0:	2320      	movs	r3, #32
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e128      	b.n	801144a <UART_SetConfig+0x5a6>
 80111f8:	2340      	movs	r3, #64	; 0x40
 80111fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fe:	e124      	b.n	801144a <UART_SetConfig+0x5a6>
 8011200:	2380      	movs	r3, #128	; 0x80
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e120      	b.n	801144a <UART_SetConfig+0x5a6>
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4acb      	ldr	r2, [pc, #812]	; (801153c <UART_SetConfig+0x698>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d176      	bne.n	8011300 <UART_SetConfig+0x45c>
 8011212:	4bcb      	ldr	r3, [pc, #812]	; (8011540 <UART_SetConfig+0x69c>)
 8011214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801121a:	2b28      	cmp	r3, #40	; 0x28
 801121c:	d86c      	bhi.n	80112f8 <UART_SetConfig+0x454>
 801121e:	a201      	add	r2, pc, #4	; (adr r2, 8011224 <UART_SetConfig+0x380>)
 8011220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011224:	080112c9 	.word	0x080112c9
 8011228:	080112f9 	.word	0x080112f9
 801122c:	080112f9 	.word	0x080112f9
 8011230:	080112f9 	.word	0x080112f9
 8011234:	080112f9 	.word	0x080112f9
 8011238:	080112f9 	.word	0x080112f9
 801123c:	080112f9 	.word	0x080112f9
 8011240:	080112f9 	.word	0x080112f9
 8011244:	080112d1 	.word	0x080112d1
 8011248:	080112f9 	.word	0x080112f9
 801124c:	080112f9 	.word	0x080112f9
 8011250:	080112f9 	.word	0x080112f9
 8011254:	080112f9 	.word	0x080112f9
 8011258:	080112f9 	.word	0x080112f9
 801125c:	080112f9 	.word	0x080112f9
 8011260:	080112f9 	.word	0x080112f9
 8011264:	080112d9 	.word	0x080112d9
 8011268:	080112f9 	.word	0x080112f9
 801126c:	080112f9 	.word	0x080112f9
 8011270:	080112f9 	.word	0x080112f9
 8011274:	080112f9 	.word	0x080112f9
 8011278:	080112f9 	.word	0x080112f9
 801127c:	080112f9 	.word	0x080112f9
 8011280:	080112f9 	.word	0x080112f9
 8011284:	080112e1 	.word	0x080112e1
 8011288:	080112f9 	.word	0x080112f9
 801128c:	080112f9 	.word	0x080112f9
 8011290:	080112f9 	.word	0x080112f9
 8011294:	080112f9 	.word	0x080112f9
 8011298:	080112f9 	.word	0x080112f9
 801129c:	080112f9 	.word	0x080112f9
 80112a0:	080112f9 	.word	0x080112f9
 80112a4:	080112e9 	.word	0x080112e9
 80112a8:	080112f9 	.word	0x080112f9
 80112ac:	080112f9 	.word	0x080112f9
 80112b0:	080112f9 	.word	0x080112f9
 80112b4:	080112f9 	.word	0x080112f9
 80112b8:	080112f9 	.word	0x080112f9
 80112bc:	080112f9 	.word	0x080112f9
 80112c0:	080112f9 	.word	0x080112f9
 80112c4:	080112f1 	.word	0x080112f1
 80112c8:	2301      	movs	r3, #1
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e0bc      	b.n	801144a <UART_SetConfig+0x5a6>
 80112d0:	2304      	movs	r3, #4
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e0b8      	b.n	801144a <UART_SetConfig+0x5a6>
 80112d8:	2308      	movs	r3, #8
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e0b4      	b.n	801144a <UART_SetConfig+0x5a6>
 80112e0:	2310      	movs	r3, #16
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e0b0      	b.n	801144a <UART_SetConfig+0x5a6>
 80112e8:	2320      	movs	r3, #32
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e0ac      	b.n	801144a <UART_SetConfig+0x5a6>
 80112f0:	2340      	movs	r3, #64	; 0x40
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e0a8      	b.n	801144a <UART_SetConfig+0x5a6>
 80112f8:	2380      	movs	r3, #128	; 0x80
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e0a4      	b.n	801144a <UART_SetConfig+0x5a6>
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a8f      	ldr	r2, [pc, #572]	; (8011544 <UART_SetConfig+0x6a0>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d130      	bne.n	801136c <UART_SetConfig+0x4c8>
 801130a:	4b8d      	ldr	r3, [pc, #564]	; (8011540 <UART_SetConfig+0x69c>)
 801130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801130e:	f003 0307 	and.w	r3, r3, #7
 8011312:	2b05      	cmp	r3, #5
 8011314:	d826      	bhi.n	8011364 <UART_SetConfig+0x4c0>
 8011316:	a201      	add	r2, pc, #4	; (adr r2, 801131c <UART_SetConfig+0x478>)
 8011318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131c:	08011335 	.word	0x08011335
 8011320:	0801133d 	.word	0x0801133d
 8011324:	08011345 	.word	0x08011345
 8011328:	0801134d 	.word	0x0801134d
 801132c:	08011355 	.word	0x08011355
 8011330:	0801135d 	.word	0x0801135d
 8011334:	2300      	movs	r3, #0
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e086      	b.n	801144a <UART_SetConfig+0x5a6>
 801133c:	2304      	movs	r3, #4
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e082      	b.n	801144a <UART_SetConfig+0x5a6>
 8011344:	2308      	movs	r3, #8
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e07e      	b.n	801144a <UART_SetConfig+0x5a6>
 801134c:	2310      	movs	r3, #16
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e07a      	b.n	801144a <UART_SetConfig+0x5a6>
 8011354:	2320      	movs	r3, #32
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e076      	b.n	801144a <UART_SetConfig+0x5a6>
 801135c:	2340      	movs	r3, #64	; 0x40
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e072      	b.n	801144a <UART_SetConfig+0x5a6>
 8011364:	2380      	movs	r3, #128	; 0x80
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e06e      	b.n	801144a <UART_SetConfig+0x5a6>
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	4a75      	ldr	r2, [pc, #468]	; (8011548 <UART_SetConfig+0x6a4>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d130      	bne.n	80113d8 <UART_SetConfig+0x534>
 8011376:	4b72      	ldr	r3, [pc, #456]	; (8011540 <UART_SetConfig+0x69c>)
 8011378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801137a:	f003 0307 	and.w	r3, r3, #7
 801137e:	2b05      	cmp	r3, #5
 8011380:	d826      	bhi.n	80113d0 <UART_SetConfig+0x52c>
 8011382:	a201      	add	r2, pc, #4	; (adr r2, 8011388 <UART_SetConfig+0x4e4>)
 8011384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011388:	080113a1 	.word	0x080113a1
 801138c:	080113a9 	.word	0x080113a9
 8011390:	080113b1 	.word	0x080113b1
 8011394:	080113b9 	.word	0x080113b9
 8011398:	080113c1 	.word	0x080113c1
 801139c:	080113c9 	.word	0x080113c9
 80113a0:	2300      	movs	r3, #0
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e050      	b.n	801144a <UART_SetConfig+0x5a6>
 80113a8:	2304      	movs	r3, #4
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e04c      	b.n	801144a <UART_SetConfig+0x5a6>
 80113b0:	2308      	movs	r3, #8
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e048      	b.n	801144a <UART_SetConfig+0x5a6>
 80113b8:	2310      	movs	r3, #16
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e044      	b.n	801144a <UART_SetConfig+0x5a6>
 80113c0:	2320      	movs	r3, #32
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e040      	b.n	801144a <UART_SetConfig+0x5a6>
 80113c8:	2340      	movs	r3, #64	; 0x40
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e03c      	b.n	801144a <UART_SetConfig+0x5a6>
 80113d0:	2380      	movs	r3, #128	; 0x80
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e038      	b.n	801144a <UART_SetConfig+0x5a6>
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a5b      	ldr	r2, [pc, #364]	; (801154c <UART_SetConfig+0x6a8>)
 80113de:	4293      	cmp	r3, r2
 80113e0:	d130      	bne.n	8011444 <UART_SetConfig+0x5a0>
 80113e2:	4b57      	ldr	r3, [pc, #348]	; (8011540 <UART_SetConfig+0x69c>)
 80113e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113e6:	f003 0307 	and.w	r3, r3, #7
 80113ea:	2b05      	cmp	r3, #5
 80113ec:	d826      	bhi.n	801143c <UART_SetConfig+0x598>
 80113ee:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <UART_SetConfig+0x550>)
 80113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f4:	0801140d 	.word	0x0801140d
 80113f8:	08011415 	.word	0x08011415
 80113fc:	0801141d 	.word	0x0801141d
 8011400:	08011425 	.word	0x08011425
 8011404:	0801142d 	.word	0x0801142d
 8011408:	08011435 	.word	0x08011435
 801140c:	2302      	movs	r3, #2
 801140e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011412:	e01a      	b.n	801144a <UART_SetConfig+0x5a6>
 8011414:	2304      	movs	r3, #4
 8011416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141a:	e016      	b.n	801144a <UART_SetConfig+0x5a6>
 801141c:	2308      	movs	r3, #8
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e012      	b.n	801144a <UART_SetConfig+0x5a6>
 8011424:	2310      	movs	r3, #16
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e00e      	b.n	801144a <UART_SetConfig+0x5a6>
 801142c:	2320      	movs	r3, #32
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e00a      	b.n	801144a <UART_SetConfig+0x5a6>
 8011434:	2340      	movs	r3, #64	; 0x40
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143a:	e006      	b.n	801144a <UART_SetConfig+0x5a6>
 801143c:	2380      	movs	r3, #128	; 0x80
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	e002      	b.n	801144a <UART_SetConfig+0x5a6>
 8011444:	2380      	movs	r3, #128	; 0x80
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	4a3f      	ldr	r2, [pc, #252]	; (801154c <UART_SetConfig+0x6a8>)
 8011450:	4293      	cmp	r3, r2
 8011452:	f040 80f8 	bne.w	8011646 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011456:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801145a:	2b20      	cmp	r3, #32
 801145c:	dc46      	bgt.n	80114ec <UART_SetConfig+0x648>
 801145e:	2b02      	cmp	r3, #2
 8011460:	f2c0 8082 	blt.w	8011568 <UART_SetConfig+0x6c4>
 8011464:	3b02      	subs	r3, #2
 8011466:	2b1e      	cmp	r3, #30
 8011468:	d87e      	bhi.n	8011568 <UART_SetConfig+0x6c4>
 801146a:	a201      	add	r2, pc, #4	; (adr r2, 8011470 <UART_SetConfig+0x5cc>)
 801146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011470:	080114f3 	.word	0x080114f3
 8011474:	08011569 	.word	0x08011569
 8011478:	080114fb 	.word	0x080114fb
 801147c:	08011569 	.word	0x08011569
 8011480:	08011569 	.word	0x08011569
 8011484:	08011569 	.word	0x08011569
 8011488:	0801150b 	.word	0x0801150b
 801148c:	08011569 	.word	0x08011569
 8011490:	08011569 	.word	0x08011569
 8011494:	08011569 	.word	0x08011569
 8011498:	08011569 	.word	0x08011569
 801149c:	08011569 	.word	0x08011569
 80114a0:	08011569 	.word	0x08011569
 80114a4:	08011569 	.word	0x08011569
 80114a8:	0801151b 	.word	0x0801151b
 80114ac:	08011569 	.word	0x08011569
 80114b0:	08011569 	.word	0x08011569
 80114b4:	08011569 	.word	0x08011569
 80114b8:	08011569 	.word	0x08011569
 80114bc:	08011569 	.word	0x08011569
 80114c0:	08011569 	.word	0x08011569
 80114c4:	08011569 	.word	0x08011569
 80114c8:	08011569 	.word	0x08011569
 80114cc:	08011569 	.word	0x08011569
 80114d0:	08011569 	.word	0x08011569
 80114d4:	08011569 	.word	0x08011569
 80114d8:	08011569 	.word	0x08011569
 80114dc:	08011569 	.word	0x08011569
 80114e0:	08011569 	.word	0x08011569
 80114e4:	08011569 	.word	0x08011569
 80114e8:	0801155b 	.word	0x0801155b
 80114ec:	2b40      	cmp	r3, #64	; 0x40
 80114ee:	d037      	beq.n	8011560 <UART_SetConfig+0x6bc>
 80114f0:	e03a      	b.n	8011568 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80114f2:	f7fb fd65 	bl	800cfc0 <HAL_RCCEx_GetD3PCLK1Freq>
 80114f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114f8:	e03c      	b.n	8011574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fb fd74 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011508:	e034      	b.n	8011574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801150a:	f107 0318 	add.w	r3, r7, #24
 801150e:	4618      	mov	r0, r3
 8011510:	f7fb fec0 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011518:	e02c      	b.n	8011574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801151a:	4b09      	ldr	r3, [pc, #36]	; (8011540 <UART_SetConfig+0x69c>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f003 0320 	and.w	r3, r3, #32
 8011522:	2b00      	cmp	r3, #0
 8011524:	d016      	beq.n	8011554 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011526:	4b06      	ldr	r3, [pc, #24]	; (8011540 <UART_SetConfig+0x69c>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	08db      	lsrs	r3, r3, #3
 801152c:	f003 0303 	and.w	r3, r3, #3
 8011530:	4a07      	ldr	r2, [pc, #28]	; (8011550 <UART_SetConfig+0x6ac>)
 8011532:	fa22 f303 	lsr.w	r3, r2, r3
 8011536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011538:	e01c      	b.n	8011574 <UART_SetConfig+0x6d0>
 801153a:	bf00      	nop
 801153c:	40011400 	.word	0x40011400
 8011540:	58024400 	.word	0x58024400
 8011544:	40007800 	.word	0x40007800
 8011548:	40007c00 	.word	0x40007c00
 801154c:	58000c00 	.word	0x58000c00
 8011550:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011554:	4b9d      	ldr	r3, [pc, #628]	; (80117cc <UART_SetConfig+0x928>)
 8011556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011558:	e00c      	b.n	8011574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801155a:	4b9d      	ldr	r3, [pc, #628]	; (80117d0 <UART_SetConfig+0x92c>)
 801155c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801155e:	e009      	b.n	8011574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011566:	e005      	b.n	8011574 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011568:	2300      	movs	r3, #0
 801156a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801156c:	2301      	movs	r3, #1
 801156e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011572:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011576:	2b00      	cmp	r3, #0
 8011578:	f000 81de 	beq.w	8011938 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011580:	4a94      	ldr	r2, [pc, #592]	; (80117d4 <UART_SetConfig+0x930>)
 8011582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011586:	461a      	mov	r2, r3
 8011588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158a:	fbb3 f3f2 	udiv	r3, r3, r2
 801158e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	685a      	ldr	r2, [r3, #4]
 8011594:	4613      	mov	r3, r2
 8011596:	005b      	lsls	r3, r3, #1
 8011598:	4413      	add	r3, r2
 801159a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801159c:	429a      	cmp	r2, r3
 801159e:	d305      	bcc.n	80115ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d903      	bls.n	80115b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115b2:	e1c1      	b.n	8011938 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115b6:	2200      	movs	r2, #0
 80115b8:	60bb      	str	r3, [r7, #8]
 80115ba:	60fa      	str	r2, [r7, #12]
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c0:	4a84      	ldr	r2, [pc, #528]	; (80117d4 <UART_SetConfig+0x930>)
 80115c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	2200      	movs	r2, #0
 80115ca:	603b      	str	r3, [r7, #0]
 80115cc:	607a      	str	r2, [r7, #4]
 80115ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80115d6:	f7ee fe83 	bl	80002e0 <__aeabi_uldivmod>
 80115da:	4602      	mov	r2, r0
 80115dc:	460b      	mov	r3, r1
 80115de:	4610      	mov	r0, r2
 80115e0:	4619      	mov	r1, r3
 80115e2:	f04f 0200 	mov.w	r2, #0
 80115e6:	f04f 0300 	mov.w	r3, #0
 80115ea:	020b      	lsls	r3, r1, #8
 80115ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80115f0:	0202      	lsls	r2, r0, #8
 80115f2:	6979      	ldr	r1, [r7, #20]
 80115f4:	6849      	ldr	r1, [r1, #4]
 80115f6:	0849      	lsrs	r1, r1, #1
 80115f8:	2000      	movs	r0, #0
 80115fa:	460c      	mov	r4, r1
 80115fc:	4605      	mov	r5, r0
 80115fe:	eb12 0804 	adds.w	r8, r2, r4
 8011602:	eb43 0905 	adc.w	r9, r3, r5
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	469a      	mov	sl, r3
 801160e:	4693      	mov	fp, r2
 8011610:	4652      	mov	r2, sl
 8011612:	465b      	mov	r3, fp
 8011614:	4640      	mov	r0, r8
 8011616:	4649      	mov	r1, r9
 8011618:	f7ee fe62 	bl	80002e0 <__aeabi_uldivmod>
 801161c:	4602      	mov	r2, r0
 801161e:	460b      	mov	r3, r1
 8011620:	4613      	mov	r3, r2
 8011622:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801162a:	d308      	bcc.n	801163e <UART_SetConfig+0x79a>
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011632:	d204      	bcs.n	801163e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801163a:	60da      	str	r2, [r3, #12]
 801163c:	e17c      	b.n	8011938 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801163e:	2301      	movs	r3, #1
 8011640:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011644:	e178      	b.n	8011938 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	69db      	ldr	r3, [r3, #28]
 801164a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801164e:	f040 80c5 	bne.w	80117dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011652:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011656:	2b20      	cmp	r3, #32
 8011658:	dc48      	bgt.n	80116ec <UART_SetConfig+0x848>
 801165a:	2b00      	cmp	r3, #0
 801165c:	db7b      	blt.n	8011756 <UART_SetConfig+0x8b2>
 801165e:	2b20      	cmp	r3, #32
 8011660:	d879      	bhi.n	8011756 <UART_SetConfig+0x8b2>
 8011662:	a201      	add	r2, pc, #4	; (adr r2, 8011668 <UART_SetConfig+0x7c4>)
 8011664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011668:	080116f3 	.word	0x080116f3
 801166c:	080116fb 	.word	0x080116fb
 8011670:	08011757 	.word	0x08011757
 8011674:	08011757 	.word	0x08011757
 8011678:	08011703 	.word	0x08011703
 801167c:	08011757 	.word	0x08011757
 8011680:	08011757 	.word	0x08011757
 8011684:	08011757 	.word	0x08011757
 8011688:	08011713 	.word	0x08011713
 801168c:	08011757 	.word	0x08011757
 8011690:	08011757 	.word	0x08011757
 8011694:	08011757 	.word	0x08011757
 8011698:	08011757 	.word	0x08011757
 801169c:	08011757 	.word	0x08011757
 80116a0:	08011757 	.word	0x08011757
 80116a4:	08011757 	.word	0x08011757
 80116a8:	08011723 	.word	0x08011723
 80116ac:	08011757 	.word	0x08011757
 80116b0:	08011757 	.word	0x08011757
 80116b4:	08011757 	.word	0x08011757
 80116b8:	08011757 	.word	0x08011757
 80116bc:	08011757 	.word	0x08011757
 80116c0:	08011757 	.word	0x08011757
 80116c4:	08011757 	.word	0x08011757
 80116c8:	08011757 	.word	0x08011757
 80116cc:	08011757 	.word	0x08011757
 80116d0:	08011757 	.word	0x08011757
 80116d4:	08011757 	.word	0x08011757
 80116d8:	08011757 	.word	0x08011757
 80116dc:	08011757 	.word	0x08011757
 80116e0:	08011757 	.word	0x08011757
 80116e4:	08011757 	.word	0x08011757
 80116e8:	08011749 	.word	0x08011749
 80116ec:	2b40      	cmp	r3, #64	; 0x40
 80116ee:	d02e      	beq.n	801174e <UART_SetConfig+0x8aa>
 80116f0:	e031      	b.n	8011756 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116f2:	f7f9 fc6d 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 80116f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116f8:	e033      	b.n	8011762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116fa:	f7f9 fc7f 	bl	800affc <HAL_RCC_GetPCLK2Freq>
 80116fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011700:	e02f      	b.n	8011762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011706:	4618      	mov	r0, r3
 8011708:	f7fb fc70 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011710:	e027      	b.n	8011762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011712:	f107 0318 	add.w	r3, r7, #24
 8011716:	4618      	mov	r0, r3
 8011718:	f7fb fdbc 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011720:	e01f      	b.n	8011762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011722:	4b2d      	ldr	r3, [pc, #180]	; (80117d8 <UART_SetConfig+0x934>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f003 0320 	and.w	r3, r3, #32
 801172a:	2b00      	cmp	r3, #0
 801172c:	d009      	beq.n	8011742 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801172e:	4b2a      	ldr	r3, [pc, #168]	; (80117d8 <UART_SetConfig+0x934>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	08db      	lsrs	r3, r3, #3
 8011734:	f003 0303 	and.w	r3, r3, #3
 8011738:	4a24      	ldr	r2, [pc, #144]	; (80117cc <UART_SetConfig+0x928>)
 801173a:	fa22 f303 	lsr.w	r3, r2, r3
 801173e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011740:	e00f      	b.n	8011762 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011742:	4b22      	ldr	r3, [pc, #136]	; (80117cc <UART_SetConfig+0x928>)
 8011744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011746:	e00c      	b.n	8011762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011748:	4b21      	ldr	r3, [pc, #132]	; (80117d0 <UART_SetConfig+0x92c>)
 801174a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801174c:	e009      	b.n	8011762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801174e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011754:	e005      	b.n	8011762 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011756:	2300      	movs	r3, #0
 8011758:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801175a:	2301      	movs	r3, #1
 801175c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 80e7 	beq.w	8011938 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801176e:	4a19      	ldr	r2, [pc, #100]	; (80117d4 <UART_SetConfig+0x930>)
 8011770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011774:	461a      	mov	r2, r3
 8011776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011778:	fbb3 f3f2 	udiv	r3, r3, r2
 801177c:	005a      	lsls	r2, r3, #1
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	085b      	lsrs	r3, r3, #1
 8011784:	441a      	add	r2, r3
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	fbb2 f3f3 	udiv	r3, r2, r3
 801178e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011792:	2b0f      	cmp	r3, #15
 8011794:	d916      	bls.n	80117c4 <UART_SetConfig+0x920>
 8011796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801179c:	d212      	bcs.n	80117c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	f023 030f 	bic.w	r3, r3, #15
 80117a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80117a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117aa:	085b      	lsrs	r3, r3, #1
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	f003 0307 	and.w	r3, r3, #7
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117b6:	4313      	orrs	r3, r2
 80117b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80117c0:	60da      	str	r2, [r3, #12]
 80117c2:	e0b9      	b.n	8011938 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80117c4:	2301      	movs	r3, #1
 80117c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80117ca:	e0b5      	b.n	8011938 <UART_SetConfig+0xa94>
 80117cc:	03d09000 	.word	0x03d09000
 80117d0:	003d0900 	.word	0x003d0900
 80117d4:	080170bc 	.word	0x080170bc
 80117d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80117dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80117e0:	2b20      	cmp	r3, #32
 80117e2:	dc49      	bgt.n	8011878 <UART_SetConfig+0x9d4>
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	db7c      	blt.n	80118e2 <UART_SetConfig+0xa3e>
 80117e8:	2b20      	cmp	r3, #32
 80117ea:	d87a      	bhi.n	80118e2 <UART_SetConfig+0xa3e>
 80117ec:	a201      	add	r2, pc, #4	; (adr r2, 80117f4 <UART_SetConfig+0x950>)
 80117ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f2:	bf00      	nop
 80117f4:	0801187f 	.word	0x0801187f
 80117f8:	08011887 	.word	0x08011887
 80117fc:	080118e3 	.word	0x080118e3
 8011800:	080118e3 	.word	0x080118e3
 8011804:	0801188f 	.word	0x0801188f
 8011808:	080118e3 	.word	0x080118e3
 801180c:	080118e3 	.word	0x080118e3
 8011810:	080118e3 	.word	0x080118e3
 8011814:	0801189f 	.word	0x0801189f
 8011818:	080118e3 	.word	0x080118e3
 801181c:	080118e3 	.word	0x080118e3
 8011820:	080118e3 	.word	0x080118e3
 8011824:	080118e3 	.word	0x080118e3
 8011828:	080118e3 	.word	0x080118e3
 801182c:	080118e3 	.word	0x080118e3
 8011830:	080118e3 	.word	0x080118e3
 8011834:	080118af 	.word	0x080118af
 8011838:	080118e3 	.word	0x080118e3
 801183c:	080118e3 	.word	0x080118e3
 8011840:	080118e3 	.word	0x080118e3
 8011844:	080118e3 	.word	0x080118e3
 8011848:	080118e3 	.word	0x080118e3
 801184c:	080118e3 	.word	0x080118e3
 8011850:	080118e3 	.word	0x080118e3
 8011854:	080118e3 	.word	0x080118e3
 8011858:	080118e3 	.word	0x080118e3
 801185c:	080118e3 	.word	0x080118e3
 8011860:	080118e3 	.word	0x080118e3
 8011864:	080118e3 	.word	0x080118e3
 8011868:	080118e3 	.word	0x080118e3
 801186c:	080118e3 	.word	0x080118e3
 8011870:	080118e3 	.word	0x080118e3
 8011874:	080118d5 	.word	0x080118d5
 8011878:	2b40      	cmp	r3, #64	; 0x40
 801187a:	d02e      	beq.n	80118da <UART_SetConfig+0xa36>
 801187c:	e031      	b.n	80118e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801187e:	f7f9 fba7 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 8011882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011884:	e033      	b.n	80118ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011886:	f7f9 fbb9 	bl	800affc <HAL_RCC_GetPCLK2Freq>
 801188a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801188c:	e02f      	b.n	80118ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011892:	4618      	mov	r0, r3
 8011894:	f7fb fbaa 	bl	800cfec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801189a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801189c:	e027      	b.n	80118ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801189e:	f107 0318 	add.w	r3, r7, #24
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fb fcf6 	bl	800d294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ac:	e01f      	b.n	80118ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118ae:	4b2d      	ldr	r3, [pc, #180]	; (8011964 <UART_SetConfig+0xac0>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	f003 0320 	and.w	r3, r3, #32
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d009      	beq.n	80118ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118ba:	4b2a      	ldr	r3, [pc, #168]	; (8011964 <UART_SetConfig+0xac0>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	08db      	lsrs	r3, r3, #3
 80118c0:	f003 0303 	and.w	r3, r3, #3
 80118c4:	4a28      	ldr	r2, [pc, #160]	; (8011968 <UART_SetConfig+0xac4>)
 80118c6:	fa22 f303 	lsr.w	r3, r2, r3
 80118ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80118cc:	e00f      	b.n	80118ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80118ce:	4b26      	ldr	r3, [pc, #152]	; (8011968 <UART_SetConfig+0xac4>)
 80118d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118d2:	e00c      	b.n	80118ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118d4:	4b25      	ldr	r3, [pc, #148]	; (801196c <UART_SetConfig+0xac8>)
 80118d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118d8:	e009      	b.n	80118ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e0:	e005      	b.n	80118ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80118e2:	2300      	movs	r3, #0
 80118e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118e6:	2301      	movs	r3, #1
 80118e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118ec:	bf00      	nop
    }

    if (pclk != 0U)
 80118ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d021      	beq.n	8011938 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f8:	4a1d      	ldr	r2, [pc, #116]	; (8011970 <UART_SetConfig+0xacc>)
 80118fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118fe:	461a      	mov	r2, r3
 8011900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011902:	fbb3 f2f2 	udiv	r2, r3, r2
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	085b      	lsrs	r3, r3, #1
 801190c:	441a      	add	r2, r3
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	fbb2 f3f3 	udiv	r3, r2, r3
 8011916:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	2b0f      	cmp	r3, #15
 801191c:	d909      	bls.n	8011932 <UART_SetConfig+0xa8e>
 801191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011924:	d205      	bcs.n	8011932 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011928:	b29a      	uxth	r2, r3
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	60da      	str	r2, [r3, #12]
 8011930:	e002      	b.n	8011938 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011932:	2301      	movs	r3, #1
 8011934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2201      	movs	r2, #1
 801193c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	2201      	movs	r2, #1
 8011944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	2200      	movs	r2, #0
 801194c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2200      	movs	r2, #0
 8011952:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011954:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011958:	4618      	mov	r0, r3
 801195a:	3748      	adds	r7, #72	; 0x48
 801195c:	46bd      	mov	sp, r7
 801195e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011962:	bf00      	nop
 8011964:	58024400 	.word	0x58024400
 8011968:	03d09000 	.word	0x03d09000
 801196c:	003d0900 	.word	0x003d0900
 8011970:	080170bc 	.word	0x080170bc

08011974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011980:	f003 0308 	and.w	r3, r3, #8
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00a      	beq.n	801199e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	430a      	orrs	r2, r1
 801199c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00a      	beq.n	80119c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	430a      	orrs	r2, r1
 80119be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c4:	f003 0302 	and.w	r3, r3, #2
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d00a      	beq.n	80119e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	430a      	orrs	r2, r1
 80119e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e6:	f003 0304 	and.w	r3, r3, #4
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d00a      	beq.n	8011a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	430a      	orrs	r2, r1
 8011a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a08:	f003 0310 	and.w	r3, r3, #16
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00a      	beq.n	8011a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	430a      	orrs	r2, r1
 8011a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a2a:	f003 0320 	and.w	r3, r3, #32
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d00a      	beq.n	8011a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	430a      	orrs	r2, r1
 8011a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d01a      	beq.n	8011a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	430a      	orrs	r2, r1
 8011a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a72:	d10a      	bne.n	8011a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	430a      	orrs	r2, r1
 8011a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d00a      	beq.n	8011aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	430a      	orrs	r2, r1
 8011aaa:	605a      	str	r2, [r3, #4]
  }
}
 8011aac:	bf00      	nop
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b098      	sub	sp, #96	; 0x60
 8011abc:	af02      	add	r7, sp, #8
 8011abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ac8:	f7f2 faf4 	bl	80040b4 <HAL_GetTick>
 8011acc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f003 0308 	and.w	r3, r3, #8
 8011ad8:	2b08      	cmp	r3, #8
 8011ada:	d12f      	bne.n	8011b3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f88e 	bl	8011c0c <UART_WaitOnFlagUntilTimeout>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d022      	beq.n	8011b3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	e853 3f00 	ldrex	r3, [r3]
 8011b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	461a      	mov	r2, r3
 8011b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b14:	647b      	str	r3, [r7, #68]	; 0x44
 8011b16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b1c:	e841 2300 	strex	r3, r2, [r1]
 8011b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1e6      	bne.n	8011af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2220      	movs	r2, #32
 8011b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b38:	2303      	movs	r3, #3
 8011b3a:	e063      	b.n	8011c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f003 0304 	and.w	r3, r3, #4
 8011b46:	2b04      	cmp	r3, #4
 8011b48:	d149      	bne.n	8011bde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b52:	2200      	movs	r2, #0
 8011b54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 f857 	bl	8011c0c <UART_WaitOnFlagUntilTimeout>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d03c      	beq.n	8011bde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	e853 3f00 	ldrex	r3, [r3]
 8011b70:	623b      	str	r3, [r7, #32]
   return(result);
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b82:	633b      	str	r3, [r7, #48]	; 0x30
 8011b84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b8a:	e841 2300 	strex	r3, r2, [r1]
 8011b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1e6      	bne.n	8011b64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	3308      	adds	r3, #8
 8011b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	e853 3f00 	ldrex	r3, [r3]
 8011ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f023 0301 	bic.w	r3, r3, #1
 8011bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	3308      	adds	r3, #8
 8011bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bb6:	61fa      	str	r2, [r7, #28]
 8011bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bba:	69b9      	ldr	r1, [r7, #24]
 8011bbc:	69fa      	ldr	r2, [r7, #28]
 8011bbe:	e841 2300 	strex	r3, r2, [r1]
 8011bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d1e5      	bne.n	8011b96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2220      	movs	r2, #32
 8011bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bda:	2303      	movs	r3, #3
 8011bdc:	e012      	b.n	8011c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2220      	movs	r2, #32
 8011be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2220      	movs	r2, #32
 8011bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c02:	2300      	movs	r3, #0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3758      	adds	r7, #88	; 0x58
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	603b      	str	r3, [r7, #0]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c1c:	e04f      	b.n	8011cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c1e:	69bb      	ldr	r3, [r7, #24]
 8011c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c24:	d04b      	beq.n	8011cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c26:	f7f2 fa45 	bl	80040b4 <HAL_GetTick>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	69ba      	ldr	r2, [r7, #24]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d302      	bcc.n	8011c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d101      	bne.n	8011c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c3c:	2303      	movs	r3, #3
 8011c3e:	e04e      	b.n	8011cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f003 0304 	and.w	r3, r3, #4
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d037      	beq.n	8011cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	2b80      	cmp	r3, #128	; 0x80
 8011c52:	d034      	beq.n	8011cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	2b40      	cmp	r3, #64	; 0x40
 8011c58:	d031      	beq.n	8011cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	69db      	ldr	r3, [r3, #28]
 8011c60:	f003 0308 	and.w	r3, r3, #8
 8011c64:	2b08      	cmp	r3, #8
 8011c66:	d110      	bne.n	8011c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2208      	movs	r2, #8
 8011c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 f95b 	bl	8011f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2208      	movs	r2, #8
 8011c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2200      	movs	r2, #0
 8011c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011c86:	2301      	movs	r3, #1
 8011c88:	e029      	b.n	8011cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	69db      	ldr	r3, [r3, #28]
 8011c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c98:	d111      	bne.n	8011cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f000 f941 	bl	8011f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2220      	movs	r2, #32
 8011cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011cba:	2303      	movs	r3, #3
 8011cbc:	e00f      	b.n	8011cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	69da      	ldr	r2, [r3, #28]
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	4013      	ands	r3, r2
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	bf0c      	ite	eq
 8011cce:	2301      	moveq	r3, #1
 8011cd0:	2300      	movne	r3, #0
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	79fb      	ldrb	r3, [r7, #7]
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d0a0      	beq.n	8011c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011cdc:	2300      	movs	r3, #0
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
	...

08011ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b0a3      	sub	sp, #140	; 0x8c
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	68ba      	ldr	r2, [r7, #8]
 8011cfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	88fa      	ldrh	r2, [r7, #6]
 8011d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	88fa      	ldrh	r2, [r7, #6]
 8011d08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d1a:	d10e      	bne.n	8011d3a <UART_Start_Receive_IT+0x52>
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	691b      	ldr	r3, [r3, #16]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d105      	bne.n	8011d30 <UART_Start_Receive_IT+0x48>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d2e:	e02d      	b.n	8011d8c <UART_Start_Receive_IT+0xa4>
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	22ff      	movs	r2, #255	; 0xff
 8011d34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d38:	e028      	b.n	8011d8c <UART_Start_Receive_IT+0xa4>
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	689b      	ldr	r3, [r3, #8]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d10d      	bne.n	8011d5e <UART_Start_Receive_IT+0x76>
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d104      	bne.n	8011d54 <UART_Start_Receive_IT+0x6c>
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	22ff      	movs	r2, #255	; 0xff
 8011d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d52:	e01b      	b.n	8011d8c <UART_Start_Receive_IT+0xa4>
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	227f      	movs	r2, #127	; 0x7f
 8011d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d5c:	e016      	b.n	8011d8c <UART_Start_Receive_IT+0xa4>
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d66:	d10d      	bne.n	8011d84 <UART_Start_Receive_IT+0x9c>
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	691b      	ldr	r3, [r3, #16]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d104      	bne.n	8011d7a <UART_Start_Receive_IT+0x92>
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	227f      	movs	r2, #127	; 0x7f
 8011d74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d78:	e008      	b.n	8011d8c <UART_Start_Receive_IT+0xa4>
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	223f      	movs	r2, #63	; 0x3f
 8011d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d82:	e003      	b.n	8011d8c <UART_Start_Receive_IT+0xa4>
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2222      	movs	r2, #34	; 0x22
 8011d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	3308      	adds	r3, #8
 8011da2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011da6:	e853 3f00 	ldrex	r3, [r3]
 8011daa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dae:	f043 0301 	orr.w	r3, r3, #1
 8011db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	3308      	adds	r3, #8
 8011dbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011dc0:	673a      	str	r2, [r7, #112]	; 0x70
 8011dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011dc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011dc8:	e841 2300 	strex	r3, r2, [r1]
 8011dcc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d1e3      	bne.n	8011d9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ddc:	d14f      	bne.n	8011e7e <UART_Start_Receive_IT+0x196>
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011de4:	88fa      	ldrh	r2, [r7, #6]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d349      	bcc.n	8011e7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011df2:	d107      	bne.n	8011e04 <UART_Start_Receive_IT+0x11c>
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	691b      	ldr	r3, [r3, #16]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d103      	bne.n	8011e04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	4a47      	ldr	r2, [pc, #284]	; (8011f1c <UART_Start_Receive_IT+0x234>)
 8011e00:	675a      	str	r2, [r3, #116]	; 0x74
 8011e02:	e002      	b.n	8011e0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	4a46      	ldr	r2, [pc, #280]	; (8011f20 <UART_Start_Receive_IT+0x238>)
 8011e08:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	691b      	ldr	r3, [r3, #16]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d01a      	beq.n	8011e48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e1a:	e853 3f00 	ldrex	r3, [r3]
 8011e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	461a      	mov	r2, r3
 8011e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e36:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011e3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e3c:	e841 2300 	strex	r3, r2, [r1]
 8011e40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1e4      	bne.n	8011e12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	3308      	adds	r3, #8
 8011e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e52:	e853 3f00 	ldrex	r3, [r3]
 8011e56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	3308      	adds	r3, #8
 8011e66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e68:	64ba      	str	r2, [r7, #72]	; 0x48
 8011e6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e70:	e841 2300 	strex	r3, r2, [r1]
 8011e74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d1e5      	bne.n	8011e48 <UART_Start_Receive_IT+0x160>
 8011e7c:	e046      	b.n	8011f0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e86:	d107      	bne.n	8011e98 <UART_Start_Receive_IT+0x1b0>
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	691b      	ldr	r3, [r3, #16]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d103      	bne.n	8011e98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	4a24      	ldr	r2, [pc, #144]	; (8011f24 <UART_Start_Receive_IT+0x23c>)
 8011e94:	675a      	str	r2, [r3, #116]	; 0x74
 8011e96:	e002      	b.n	8011e9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	4a23      	ldr	r2, [pc, #140]	; (8011f28 <UART_Start_Receive_IT+0x240>)
 8011e9c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d019      	beq.n	8011eda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eae:	e853 3f00 	ldrex	r3, [r3]
 8011eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011eba:	677b      	str	r3, [r7, #116]	; 0x74
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ec6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ecc:	e841 2300 	strex	r3, r2, [r1]
 8011ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1e6      	bne.n	8011ea6 <UART_Start_Receive_IT+0x1be>
 8011ed8:	e018      	b.n	8011f0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	e853 3f00 	ldrex	r3, [r3]
 8011ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	f043 0320 	orr.w	r3, r3, #32
 8011eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ef8:	623b      	str	r3, [r7, #32]
 8011efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011efc:	69f9      	ldr	r1, [r7, #28]
 8011efe:	6a3a      	ldr	r2, [r7, #32]
 8011f00:	e841 2300 	strex	r3, r2, [r1]
 8011f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d1e6      	bne.n	8011eda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	378c      	adds	r7, #140	; 0x8c
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	0801274d 	.word	0x0801274d
 8011f20:	080123ed 	.word	0x080123ed
 8011f24:	08012235 	.word	0x08012235
 8011f28:	0801207d 	.word	0x0801207d

08011f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b095      	sub	sp, #84	; 0x54
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f3c:	e853 3f00 	ldrex	r3, [r3]
 8011f40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	461a      	mov	r2, r3
 8011f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f52:	643b      	str	r3, [r7, #64]	; 0x40
 8011f54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f5a:	e841 2300 	strex	r3, r2, [r1]
 8011f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1e6      	bne.n	8011f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	3308      	adds	r3, #8
 8011f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f6e:	6a3b      	ldr	r3, [r7, #32]
 8011f70:	e853 3f00 	ldrex	r3, [r3]
 8011f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f76:	69fa      	ldr	r2, [r7, #28]
 8011f78:	4b1e      	ldr	r3, [pc, #120]	; (8011ff4 <UART_EndRxTransfer+0xc8>)
 8011f7a:	4013      	ands	r3, r2
 8011f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	3308      	adds	r3, #8
 8011f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f8e:	e841 2300 	strex	r3, r2, [r1]
 8011f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1e5      	bne.n	8011f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d118      	bne.n	8011fd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	e853 3f00 	ldrex	r3, [r3]
 8011fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	f023 0310 	bic.w	r3, r3, #16
 8011fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fc0:	61bb      	str	r3, [r7, #24]
 8011fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc4:	6979      	ldr	r1, [r7, #20]
 8011fc6:	69ba      	ldr	r2, [r7, #24]
 8011fc8:	e841 2300 	strex	r3, r2, [r1]
 8011fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d1e6      	bne.n	8011fa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2220      	movs	r2, #32
 8011fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011fe8:	bf00      	nop
 8011fea:	3754      	adds	r7, #84	; 0x54
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	effffffe 	.word	0xeffffffe

08011ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2200      	movs	r2, #0
 801200a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2200      	movs	r2, #0
 8012012:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f7fe ff2e 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801201c:	bf00      	nop
 801201e:	3710      	adds	r7, #16
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b088      	sub	sp, #32
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	e853 3f00 	ldrex	r3, [r3]
 8012038:	60bb      	str	r3, [r7, #8]
   return(result);
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012040:	61fb      	str	r3, [r7, #28]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	461a      	mov	r2, r3
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	61bb      	str	r3, [r7, #24]
 801204c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801204e:	6979      	ldr	r1, [r7, #20]
 8012050:	69ba      	ldr	r2, [r7, #24]
 8012052:	e841 2300 	strex	r3, r2, [r1]
 8012056:	613b      	str	r3, [r7, #16]
   return(result);
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1e6      	bne.n	801202c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2220      	movs	r2, #32
 8012062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7fe fef9 	bl	8010e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012072:	bf00      	nop
 8012074:	3720      	adds	r7, #32
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
	...

0801207c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b09c      	sub	sp, #112	; 0x70
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801208a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012094:	2b22      	cmp	r3, #34	; 0x22
 8012096:	f040 80be 	bne.w	8012216 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80120a8:	b2d9      	uxtb	r1, r3
 80120aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120b4:	400a      	ands	r2, r1
 80120b6:	b2d2      	uxtb	r2, r2
 80120b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120be:	1c5a      	adds	r2, r3, #1
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	3b01      	subs	r3, #1
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120dc:	b29b      	uxth	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f040 80a1 	bne.w	8012226 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ec:	e853 3f00 	ldrex	r3, [r3]
 80120f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80120f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012102:	65bb      	str	r3, [r7, #88]	; 0x58
 8012104:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801210a:	e841 2300 	strex	r3, r2, [r1]
 801210e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1e6      	bne.n	80120e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	3308      	adds	r3, #8
 801211c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012120:	e853 3f00 	ldrex	r3, [r3]
 8012124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012128:	f023 0301 	bic.w	r3, r3, #1
 801212c:	667b      	str	r3, [r7, #100]	; 0x64
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	3308      	adds	r3, #8
 8012134:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012136:	647a      	str	r2, [r7, #68]	; 0x44
 8012138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801213a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801213c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801213e:	e841 2300 	strex	r3, r2, [r1]
 8012142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1e5      	bne.n	8012116 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2220      	movs	r2, #32
 801214e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	4a33      	ldr	r2, [pc, #204]	; (8012230 <UART_RxISR_8BIT+0x1b4>)
 8012164:	4293      	cmp	r3, r2
 8012166:	d01f      	beq.n	80121a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012172:	2b00      	cmp	r3, #0
 8012174:	d018      	beq.n	80121a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217e:	e853 3f00 	ldrex	r3, [r3]
 8012182:	623b      	str	r3, [r7, #32]
   return(result);
 8012184:	6a3b      	ldr	r3, [r7, #32]
 8012186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801218a:	663b      	str	r3, [r7, #96]	; 0x60
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	461a      	mov	r2, r3
 8012192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012194:	633b      	str	r3, [r7, #48]	; 0x30
 8012196:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801219a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801219c:	e841 2300 	strex	r3, r2, [r1]
 80121a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d1e6      	bne.n	8012176 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d12e      	bne.n	801220e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	e853 3f00 	ldrex	r3, [r3]
 80121c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f023 0310 	bic.w	r3, r3, #16
 80121ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	461a      	mov	r2, r3
 80121d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121d4:	61fb      	str	r3, [r7, #28]
 80121d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d8:	69b9      	ldr	r1, [r7, #24]
 80121da:	69fa      	ldr	r2, [r7, #28]
 80121dc:	e841 2300 	strex	r3, r2, [r1]
 80121e0:	617b      	str	r3, [r7, #20]
   return(result);
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1e6      	bne.n	80121b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	69db      	ldr	r3, [r3, #28]
 80121ee:	f003 0310 	and.w	r3, r3, #16
 80121f2:	2b10      	cmp	r3, #16
 80121f4:	d103      	bne.n	80121fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2210      	movs	r2, #16
 80121fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7fe fe40 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801220c:	e00b      	b.n	8012226 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7ef f996 	bl	8001540 <HAL_UART_RxCpltCallback>
}
 8012214:	e007      	b.n	8012226 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	699a      	ldr	r2, [r3, #24]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	f042 0208 	orr.w	r2, r2, #8
 8012224:	619a      	str	r2, [r3, #24]
}
 8012226:	bf00      	nop
 8012228:	3770      	adds	r7, #112	; 0x70
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	58000c00 	.word	0x58000c00

08012234 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b09c      	sub	sp, #112	; 0x70
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012242:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801224c:	2b22      	cmp	r3, #34	; 0x22
 801224e:	f040 80be 	bne.w	80123ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012258:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012260:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012262:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012266:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801226a:	4013      	ands	r3, r2
 801226c:	b29a      	uxth	r2, r3
 801226e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012270:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012276:	1c9a      	adds	r2, r3, #2
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012282:	b29b      	uxth	r3, r3
 8012284:	3b01      	subs	r3, #1
 8012286:	b29a      	uxth	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012294:	b29b      	uxth	r3, r3
 8012296:	2b00      	cmp	r3, #0
 8012298:	f040 80a1 	bne.w	80123de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122a4:	e853 3f00 	ldrex	r3, [r3]
 80122a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122b0:	667b      	str	r3, [r7, #100]	; 0x64
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	461a      	mov	r2, r3
 80122b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122ba:	657b      	str	r3, [r7, #84]	; 0x54
 80122bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80122c2:	e841 2300 	strex	r3, r2, [r1]
 80122c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d1e6      	bne.n	801229c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	3308      	adds	r3, #8
 80122d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d8:	e853 3f00 	ldrex	r3, [r3]
 80122dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	f023 0301 	bic.w	r3, r3, #1
 80122e4:	663b      	str	r3, [r7, #96]	; 0x60
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3308      	adds	r3, #8
 80122ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122ee:	643a      	str	r2, [r7, #64]	; 0x40
 80122f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122f6:	e841 2300 	strex	r3, r2, [r1]
 80122fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1e5      	bne.n	80122ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2220      	movs	r2, #32
 8012306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2200      	movs	r2, #0
 801230e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2200      	movs	r2, #0
 8012314:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4a33      	ldr	r2, [pc, #204]	; (80123e8 <UART_RxISR_16BIT+0x1b4>)
 801231c:	4293      	cmp	r3, r2
 801231e:	d01f      	beq.n	8012360 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801232a:	2b00      	cmp	r3, #0
 801232c:	d018      	beq.n	8012360 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012334:	6a3b      	ldr	r3, [r7, #32]
 8012336:	e853 3f00 	ldrex	r3, [r3]
 801233a:	61fb      	str	r3, [r7, #28]
   return(result);
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	461a      	mov	r2, r3
 801234a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801234e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012354:	e841 2300 	strex	r3, r2, [r1]
 8012358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	2b00      	cmp	r3, #0
 801235e:	d1e6      	bne.n	801232e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012364:	2b01      	cmp	r3, #1
 8012366:	d12e      	bne.n	80123c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	e853 3f00 	ldrex	r3, [r3]
 801237a:	60bb      	str	r3, [r7, #8]
   return(result);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f023 0310 	bic.w	r3, r3, #16
 8012382:	65bb      	str	r3, [r7, #88]	; 0x58
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	461a      	mov	r2, r3
 801238a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801238c:	61bb      	str	r3, [r7, #24]
 801238e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012390:	6979      	ldr	r1, [r7, #20]
 8012392:	69ba      	ldr	r2, [r7, #24]
 8012394:	e841 2300 	strex	r3, r2, [r1]
 8012398:	613b      	str	r3, [r7, #16]
   return(result);
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1e6      	bne.n	801236e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	69db      	ldr	r3, [r3, #28]
 80123a6:	f003 0310 	and.w	r3, r3, #16
 80123aa:	2b10      	cmp	r3, #16
 80123ac:	d103      	bne.n	80123b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2210      	movs	r2, #16
 80123b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7fe fd64 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123c4:	e00b      	b.n	80123de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ef f8ba 	bl	8001540 <HAL_UART_RxCpltCallback>
}
 80123cc:	e007      	b.n	80123de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	699a      	ldr	r2, [r3, #24]
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	f042 0208 	orr.w	r2, r2, #8
 80123dc:	619a      	str	r2, [r3, #24]
}
 80123de:	bf00      	nop
 80123e0:	3770      	adds	r7, #112	; 0x70
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	58000c00 	.word	0x58000c00

080123ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b0ac      	sub	sp, #176	; 0xb0
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	69db      	ldr	r3, [r3, #28]
 8012404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	689b      	ldr	r3, [r3, #8]
 8012418:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012422:	2b22      	cmp	r3, #34	; 0x22
 8012424:	f040 8180 	bne.w	8012728 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801242e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012432:	e123      	b.n	801267c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801243e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012442:	b2d9      	uxtb	r1, r3
 8012444:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012448:	b2da      	uxtb	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801244e:	400a      	ands	r2, r1
 8012450:	b2d2      	uxtb	r2, r2
 8012452:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012458:	1c5a      	adds	r2, r3, #1
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012464:	b29b      	uxth	r3, r3
 8012466:	3b01      	subs	r3, #1
 8012468:	b29a      	uxth	r2, r3
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	69db      	ldr	r3, [r3, #28]
 8012476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801247a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801247e:	f003 0307 	and.w	r3, r3, #7
 8012482:	2b00      	cmp	r3, #0
 8012484:	d053      	beq.n	801252e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801248a:	f003 0301 	and.w	r3, r3, #1
 801248e:	2b00      	cmp	r3, #0
 8012490:	d011      	beq.n	80124b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801249a:	2b00      	cmp	r3, #0
 801249c:	d00b      	beq.n	80124b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2201      	movs	r2, #1
 80124a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ac:	f043 0201 	orr.w	r2, r3, #1
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124ba:	f003 0302 	and.w	r3, r3, #2
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d011      	beq.n	80124e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80124c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124c6:	f003 0301 	and.w	r3, r3, #1
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00b      	beq.n	80124e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	2202      	movs	r2, #2
 80124d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124dc:	f043 0204 	orr.w	r2, r3, #4
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124ea:	f003 0304 	and.w	r3, r3, #4
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d011      	beq.n	8012516 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80124f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124f6:	f003 0301 	and.w	r3, r3, #1
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d00b      	beq.n	8012516 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2204      	movs	r2, #4
 8012504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801250c:	f043 0202 	orr.w	r2, r3, #2
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801251c:	2b00      	cmp	r3, #0
 801251e:	d006      	beq.n	801252e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f7fe fca9 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012534:	b29b      	uxth	r3, r3
 8012536:	2b00      	cmp	r3, #0
 8012538:	f040 80a0 	bne.w	801267c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012544:	e853 3f00 	ldrex	r3, [r3]
 8012548:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801254a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801254c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	461a      	mov	r2, r3
 801255a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801255e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012560:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012562:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012564:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012566:	e841 2300 	strex	r3, r2, [r1]
 801256a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801256e:	2b00      	cmp	r3, #0
 8012570:	d1e4      	bne.n	801253c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	3308      	adds	r3, #8
 8012578:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801257a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801257c:	e853 3f00 	ldrex	r3, [r3]
 8012580:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012584:	4b6e      	ldr	r3, [pc, #440]	; (8012740 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012586:	4013      	ands	r3, r2
 8012588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	3308      	adds	r3, #8
 8012592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012596:	66ba      	str	r2, [r7, #104]	; 0x68
 8012598:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801259a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801259c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801259e:	e841 2300 	strex	r3, r2, [r1]
 80125a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80125a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1e3      	bne.n	8012572 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2220      	movs	r2, #32
 80125ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2200      	movs	r2, #0
 80125b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2200      	movs	r2, #0
 80125bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4a60      	ldr	r2, [pc, #384]	; (8012744 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d021      	beq.n	801260c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d01a      	beq.n	801260c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125de:	e853 3f00 	ldrex	r3, [r3]
 80125e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80125e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	461a      	mov	r2, r3
 80125f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125f8:	657b      	str	r3, [r7, #84]	; 0x54
 80125fa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012600:	e841 2300 	strex	r3, r2, [r1]
 8012604:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1e4      	bne.n	80125d6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012610:	2b01      	cmp	r3, #1
 8012612:	d130      	bne.n	8012676 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012622:	e853 3f00 	ldrex	r3, [r3]
 8012626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	f023 0310 	bic.w	r3, r3, #16
 801262e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	461a      	mov	r2, r3
 8012638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801263c:	643b      	str	r3, [r7, #64]	; 0x40
 801263e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012644:	e841 2300 	strex	r3, r2, [r1]
 8012648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264c:	2b00      	cmp	r3, #0
 801264e:	d1e4      	bne.n	801261a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	69db      	ldr	r3, [r3, #28]
 8012656:	f003 0310 	and.w	r3, r3, #16
 801265a:	2b10      	cmp	r3, #16
 801265c:	d103      	bne.n	8012666 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2210      	movs	r2, #16
 8012664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801266c:	4619      	mov	r1, r3
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f7fe fc0c 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
 8012674:	e002      	b.n	801267c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ee ff62 	bl	8001540 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801267c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012680:	2b00      	cmp	r3, #0
 8012682:	d006      	beq.n	8012692 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012688:	f003 0320 	and.w	r3, r3, #32
 801268c:	2b00      	cmp	r3, #0
 801268e:	f47f aed1 	bne.w	8012434 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012698:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801269c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d049      	beq.n	8012738 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d242      	bcs.n	8012738 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	3308      	adds	r3, #8
 80126b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ba:	6a3b      	ldr	r3, [r7, #32]
 80126bc:	e853 3f00 	ldrex	r3, [r3]
 80126c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80126c2:	69fb      	ldr	r3, [r7, #28]
 80126c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	3308      	adds	r3, #8
 80126d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80126d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80126d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126de:	e841 2300 	strex	r3, r2, [r1]
 80126e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d1e3      	bne.n	80126b2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4a16      	ldr	r2, [pc, #88]	; (8012748 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80126ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	e853 3f00 	ldrex	r3, [r3]
 80126fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	f043 0320 	orr.w	r3, r3, #32
 8012704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	461a      	mov	r2, r3
 801270e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012712:	61bb      	str	r3, [r7, #24]
 8012714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012716:	6979      	ldr	r1, [r7, #20]
 8012718:	69ba      	ldr	r2, [r7, #24]
 801271a:	e841 2300 	strex	r3, r2, [r1]
 801271e:	613b      	str	r3, [r7, #16]
   return(result);
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d1e4      	bne.n	80126f0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012726:	e007      	b.n	8012738 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	699a      	ldr	r2, [r3, #24]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f042 0208 	orr.w	r2, r2, #8
 8012736:	619a      	str	r2, [r3, #24]
}
 8012738:	bf00      	nop
 801273a:	37b0      	adds	r7, #176	; 0xb0
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	effffffe 	.word	0xeffffffe
 8012744:	58000c00 	.word	0x58000c00
 8012748:	0801207d 	.word	0x0801207d

0801274c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b0ae      	sub	sp, #184	; 0xb8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801275a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	69db      	ldr	r3, [r3, #28]
 8012764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012782:	2b22      	cmp	r3, #34	; 0x22
 8012784:	f040 8184 	bne.w	8012a90 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801278e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012792:	e127      	b.n	80129e4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801279a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80127a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80127aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80127ae:	4013      	ands	r3, r2
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127bc:	1c9a      	adds	r2, r3, #2
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	3b01      	subs	r3, #1
 80127cc:	b29a      	uxth	r2, r3
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	69db      	ldr	r3, [r3, #28]
 80127da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80127de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127e2:	f003 0307 	and.w	r3, r3, #7
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d053      	beq.n	8012892 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80127ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127ee:	f003 0301 	and.w	r3, r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d011      	beq.n	801281a <UART_RxISR_16BIT_FIFOEN+0xce>
 80127f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d00b      	beq.n	801281a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2201      	movs	r2, #1
 8012808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012810:	f043 0201 	orr.w	r2, r3, #1
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801281a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801281e:	f003 0302 	and.w	r3, r3, #2
 8012822:	2b00      	cmp	r3, #0
 8012824:	d011      	beq.n	801284a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801282a:	f003 0301 	and.w	r3, r3, #1
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00b      	beq.n	801284a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2202      	movs	r2, #2
 8012838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012840:	f043 0204 	orr.w	r2, r3, #4
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801284a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801284e:	f003 0304 	and.w	r3, r3, #4
 8012852:	2b00      	cmp	r3, #0
 8012854:	d011      	beq.n	801287a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801285a:	f003 0301 	and.w	r3, r3, #1
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00b      	beq.n	801287a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2204      	movs	r2, #4
 8012868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012870:	f043 0202 	orr.w	r2, r3, #2
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012880:	2b00      	cmp	r3, #0
 8012882:	d006      	beq.n	8012892 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7fe faf7 	bl	8010e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012898:	b29b      	uxth	r3, r3
 801289a:	2b00      	cmp	r3, #0
 801289c:	f040 80a2 	bne.w	80129e4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128a8:	e853 3f00 	ldrex	r3, [r3]
 80128ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	461a      	mov	r2, r3
 80128be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128c6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80128ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128ce:	e841 2300 	strex	r3, r2, [r1]
 80128d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80128d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d1e2      	bne.n	80128a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	3308      	adds	r3, #8
 80128e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128e4:	e853 3f00 	ldrex	r3, [r3]
 80128e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80128ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80128ec:	4b6e      	ldr	r3, [pc, #440]	; (8012aa8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80128ee:	4013      	ands	r3, r2
 80128f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	3308      	adds	r3, #8
 80128fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80128fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012906:	e841 2300 	strex	r3, r2, [r1]
 801290a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801290c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1e3      	bne.n	80128da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2220      	movs	r2, #32
 8012916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2200      	movs	r2, #0
 801291e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4a60      	ldr	r2, [pc, #384]	; (8012aac <UART_RxISR_16BIT_FIFOEN+0x360>)
 801292c:	4293      	cmp	r3, r2
 801292e:	d021      	beq.n	8012974 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801293a:	2b00      	cmp	r3, #0
 801293c:	d01a      	beq.n	8012974 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012946:	e853 3f00 	ldrex	r3, [r3]
 801294a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801294c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801294e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	461a      	mov	r2, r3
 801295c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012960:	65bb      	str	r3, [r7, #88]	; 0x58
 8012962:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012968:	e841 2300 	strex	r3, r2, [r1]
 801296c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801296e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1e4      	bne.n	801293e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012978:	2b01      	cmp	r3, #1
 801297a:	d130      	bne.n	80129de <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2200      	movs	r2, #0
 8012980:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298a:	e853 3f00 	ldrex	r3, [r3]
 801298e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012992:	f023 0310 	bic.w	r3, r3, #16
 8012996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	461a      	mov	r2, r3
 80129a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80129a4:	647b      	str	r3, [r7, #68]	; 0x44
 80129a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129ac:	e841 2300 	strex	r3, r2, [r1]
 80129b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d1e4      	bne.n	8012982 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	69db      	ldr	r3, [r3, #28]
 80129be:	f003 0310 	and.w	r3, r3, #16
 80129c2:	2b10      	cmp	r3, #16
 80129c4:	d103      	bne.n	80129ce <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2210      	movs	r2, #16
 80129cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129d4:	4619      	mov	r1, r3
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f7fe fa58 	bl	8010e8c <HAL_UARTEx_RxEventCallback>
 80129dc:	e002      	b.n	80129e4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7ee fdae 	bl	8001540 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d006      	beq.n	80129fa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80129ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129f0:	f003 0320 	and.w	r3, r3, #32
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f47f aecd 	bne.w	8012794 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a00:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a04:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d049      	beq.n	8012aa0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a12:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d242      	bcs.n	8012aa0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	3308      	adds	r3, #8
 8012a20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	e853 3f00 	ldrex	r3, [r3]
 8012a28:	623b      	str	r3, [r7, #32]
   return(result);
 8012a2a:	6a3b      	ldr	r3, [r7, #32]
 8012a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	3308      	adds	r3, #8
 8012a3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012a3e:	633a      	str	r2, [r7, #48]	; 0x30
 8012a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a46:	e841 2300 	strex	r3, r2, [r1]
 8012a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1e3      	bne.n	8012a1a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	4a16      	ldr	r2, [pc, #88]	; (8012ab0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012a56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	e853 3f00 	ldrex	r3, [r3]
 8012a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f043 0320 	orr.w	r3, r3, #32
 8012a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	461a      	mov	r2, r3
 8012a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a7a:	61fb      	str	r3, [r7, #28]
 8012a7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a7e:	69b9      	ldr	r1, [r7, #24]
 8012a80:	69fa      	ldr	r2, [r7, #28]
 8012a82:	e841 2300 	strex	r3, r2, [r1]
 8012a86:	617b      	str	r3, [r7, #20]
   return(result);
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d1e4      	bne.n	8012a58 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a8e:	e007      	b.n	8012aa0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	699a      	ldr	r2, [r3, #24]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f042 0208 	orr.w	r2, r2, #8
 8012a9e:	619a      	str	r2, [r3, #24]
}
 8012aa0:	bf00      	nop
 8012aa2:	37b8      	adds	r7, #184	; 0xb8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	effffffe 	.word	0xeffffffe
 8012aac:	58000c00 	.word	0x58000c00
 8012ab0:	08012235 	.word	0x08012235

08012ab4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012abc:	bf00      	nop
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012ad0:	bf00      	nop
 8012ad2:	370c      	adds	r7, #12
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr

08012adc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b089      	sub	sp, #36	; 0x24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d101      	bne.n	8012b06 <HAL_UARTEx_EnableStopMode+0x16>
 8012b02:	2302      	movs	r3, #2
 8012b04:	e021      	b.n	8012b4a <HAL_UARTEx_EnableStopMode+0x5a>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2201      	movs	r2, #1
 8012b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	e853 3f00 	ldrex	r3, [r3]
 8012b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	f043 0302 	orr.w	r3, r3, #2
 8012b22:	61fb      	str	r3, [r7, #28]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	461a      	mov	r2, r3
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	61bb      	str	r3, [r7, #24]
 8012b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b30:	6979      	ldr	r1, [r7, #20]
 8012b32:	69ba      	ldr	r2, [r7, #24]
 8012b34:	e841 2300 	strex	r3, r2, [r1]
 8012b38:	613b      	str	r3, [r7, #16]
   return(result);
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d1e6      	bne.n	8012b0e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2200      	movs	r2, #0
 8012b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3724      	adds	r7, #36	; 0x24
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr

08012b56 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b084      	sub	sp, #16
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d101      	bne.n	8012b6c <HAL_UARTEx_EnableFifoMode+0x16>
 8012b68:	2302      	movs	r3, #2
 8012b6a:	e02b      	b.n	8012bc4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2201      	movs	r2, #1
 8012b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2224      	movs	r2, #36	; 0x24
 8012b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	681a      	ldr	r2, [r3, #0]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f022 0201 	bic.w	r2, r2, #1
 8012b92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012b9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012ba2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f8c3 	bl	8012d38 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2220      	movs	r2, #32
 8012bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bc2:	2300      	movs	r3, #0
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bda:	2b01      	cmp	r3, #1
 8012bdc:	d101      	bne.n	8012be2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012bde:	2302      	movs	r3, #2
 8012be0:	e027      	b.n	8012c32 <HAL_UARTEx_DisableFifoMode+0x66>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2201      	movs	r2, #1
 8012be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2224      	movs	r2, #36	; 0x24
 8012bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	681a      	ldr	r2, [r3, #0]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f022 0201 	bic.w	r2, r2, #1
 8012c08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2200      	movs	r2, #0
 8012c16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2220      	movs	r2, #32
 8012c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3714      	adds	r7, #20
 8012c36:	46bd      	mov	sp, r7
 8012c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3c:	4770      	bx	lr

08012c3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c3e:	b580      	push	{r7, lr}
 8012c40:	b084      	sub	sp, #16
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]
 8012c46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	d101      	bne.n	8012c56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c52:	2302      	movs	r3, #2
 8012c54:	e02d      	b.n	8012cb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2224      	movs	r2, #36	; 0x24
 8012c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	681a      	ldr	r2, [r3, #0]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f022 0201 	bic.w	r2, r2, #1
 8012c7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	689b      	ldr	r3, [r3, #8]
 8012c84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	683a      	ldr	r2, [r7, #0]
 8012c8e:	430a      	orrs	r2, r1
 8012c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 f850 	bl	8012d38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2220      	movs	r2, #32
 8012ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3710      	adds	r7, #16
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b084      	sub	sp, #16
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
 8012cc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d101      	bne.n	8012cd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012cce:	2302      	movs	r3, #2
 8012cd0:	e02d      	b.n	8012d2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2224      	movs	r2, #36	; 0x24
 8012cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f022 0201 	bic.w	r2, r2, #1
 8012cf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	683a      	ldr	r2, [r7, #0]
 8012d0a:	430a      	orrs	r2, r1
 8012d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 f812 	bl	8012d38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2220      	movs	r2, #32
 8012d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2200      	movs	r2, #0
 8012d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
	...

08012d38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b085      	sub	sp, #20
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d108      	bne.n	8012d5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2201      	movs	r2, #1
 8012d54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d58:	e031      	b.n	8012dbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d5a:	2310      	movs	r3, #16
 8012d5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d5e:	2310      	movs	r3, #16
 8012d60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	0e5b      	lsrs	r3, r3, #25
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	f003 0307 	and.w	r3, r3, #7
 8012d70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	0f5b      	lsrs	r3, r3, #29
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	f003 0307 	and.w	r3, r3, #7
 8012d80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d82:	7bbb      	ldrb	r3, [r7, #14]
 8012d84:	7b3a      	ldrb	r2, [r7, #12]
 8012d86:	4911      	ldr	r1, [pc, #68]	; (8012dcc <UARTEx_SetNbDataToProcess+0x94>)
 8012d88:	5c8a      	ldrb	r2, [r1, r2]
 8012d8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d8e:	7b3a      	ldrb	r2, [r7, #12]
 8012d90:	490f      	ldr	r1, [pc, #60]	; (8012dd0 <UARTEx_SetNbDataToProcess+0x98>)
 8012d92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d94:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012da0:	7bfb      	ldrb	r3, [r7, #15]
 8012da2:	7b7a      	ldrb	r2, [r7, #13]
 8012da4:	4909      	ldr	r1, [pc, #36]	; (8012dcc <UARTEx_SetNbDataToProcess+0x94>)
 8012da6:	5c8a      	ldrb	r2, [r1, r2]
 8012da8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012dac:	7b7a      	ldrb	r2, [r7, #13]
 8012dae:	4908      	ldr	r1, [pc, #32]	; (8012dd0 <UARTEx_SetNbDataToProcess+0x98>)
 8012db0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012db2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012dbe:	bf00      	nop
 8012dc0:	3714      	adds	r7, #20
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop
 8012dcc:	080170d4 	.word	0x080170d4
 8012dd0:	080170dc 	.word	0x080170dc

08012dd4 <__NVIC_SetPriority>:
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	4603      	mov	r3, r0
 8012ddc:	6039      	str	r1, [r7, #0]
 8012dde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	db0a      	blt.n	8012dfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	b2da      	uxtb	r2, r3
 8012dec:	490c      	ldr	r1, [pc, #48]	; (8012e20 <__NVIC_SetPriority+0x4c>)
 8012dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012df2:	0112      	lsls	r2, r2, #4
 8012df4:	b2d2      	uxtb	r2, r2
 8012df6:	440b      	add	r3, r1
 8012df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012dfc:	e00a      	b.n	8012e14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	b2da      	uxtb	r2, r3
 8012e02:	4908      	ldr	r1, [pc, #32]	; (8012e24 <__NVIC_SetPriority+0x50>)
 8012e04:	88fb      	ldrh	r3, [r7, #6]
 8012e06:	f003 030f 	and.w	r3, r3, #15
 8012e0a:	3b04      	subs	r3, #4
 8012e0c:	0112      	lsls	r2, r2, #4
 8012e0e:	b2d2      	uxtb	r2, r2
 8012e10:	440b      	add	r3, r1
 8012e12:	761a      	strb	r2, [r3, #24]
}
 8012e14:	bf00      	nop
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	e000e100 	.word	0xe000e100
 8012e24:	e000ed00 	.word	0xe000ed00

08012e28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012e2c:	4b05      	ldr	r3, [pc, #20]	; (8012e44 <SysTick_Handler+0x1c>)
 8012e2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012e30:	f002 f958 	bl	80150e4 <xTaskGetSchedulerState>
 8012e34:	4603      	mov	r3, r0
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d001      	beq.n	8012e3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012e3a:	f002 ff75 	bl	8015d28 <xPortSysTickHandler>
  }
}
 8012e3e:	bf00      	nop
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	e000e010 	.word	0xe000e010

08012e48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	f06f 0004 	mvn.w	r0, #4
 8012e52:	f7ff ffbf 	bl	8012dd4 <__NVIC_SetPriority>
#endif
}
 8012e56:	bf00      	nop
 8012e58:	bd80      	pop	{r7, pc}
	...

08012e5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012e5c:	b480      	push	{r7}
 8012e5e:	b083      	sub	sp, #12
 8012e60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e62:	f3ef 8305 	mrs	r3, IPSR
 8012e66:	603b      	str	r3, [r7, #0]
  return(result);
 8012e68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d003      	beq.n	8012e76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012e6e:	f06f 0305 	mvn.w	r3, #5
 8012e72:	607b      	str	r3, [r7, #4]
 8012e74:	e00c      	b.n	8012e90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012e76:	4b0a      	ldr	r3, [pc, #40]	; (8012ea0 <osKernelInitialize+0x44>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d105      	bne.n	8012e8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012e7e:	4b08      	ldr	r3, [pc, #32]	; (8012ea0 <osKernelInitialize+0x44>)
 8012e80:	2201      	movs	r2, #1
 8012e82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	607b      	str	r3, [r7, #4]
 8012e88:	e002      	b.n	8012e90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012e90:	687b      	ldr	r3, [r7, #4]
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop
 8012ea0:	24001dd0 	.word	0x24001dd0

08012ea4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012eaa:	f3ef 8305 	mrs	r3, IPSR
 8012eae:	603b      	str	r3, [r7, #0]
  return(result);
 8012eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d003      	beq.n	8012ebe <osKernelStart+0x1a>
    stat = osErrorISR;
 8012eb6:	f06f 0305 	mvn.w	r3, #5
 8012eba:	607b      	str	r3, [r7, #4]
 8012ebc:	e010      	b.n	8012ee0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012ebe:	4b0b      	ldr	r3, [pc, #44]	; (8012eec <osKernelStart+0x48>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d109      	bne.n	8012eda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012ec6:	f7ff ffbf 	bl	8012e48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012eca:	4b08      	ldr	r3, [pc, #32]	; (8012eec <osKernelStart+0x48>)
 8012ecc:	2202      	movs	r2, #2
 8012ece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012ed0:	f001 fc0c 	bl	80146ec <vTaskStartScheduler>
      stat = osOK;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	607b      	str	r3, [r7, #4]
 8012ed8:	e002      	b.n	8012ee0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ede:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ee0:	687b      	ldr	r3, [r7, #4]
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3708      	adds	r7, #8
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	24001dd0 	.word	0x24001dd0

08012ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b08e      	sub	sp, #56	; 0x38
 8012ef4:	af04      	add	r7, sp, #16
 8012ef6:	60f8      	str	r0, [r7, #12]
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012efc:	2300      	movs	r3, #0
 8012efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f00:	f3ef 8305 	mrs	r3, IPSR
 8012f04:	617b      	str	r3, [r7, #20]
  return(result);
 8012f06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d17e      	bne.n	801300a <osThreadNew+0x11a>
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d07b      	beq.n	801300a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012f12:	2380      	movs	r3, #128	; 0x80
 8012f14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012f16:	2318      	movs	r3, #24
 8012f18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d045      	beq.n	8012fb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d002      	beq.n	8012f38 <osThreadNew+0x48>
        name = attr->name;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	699b      	ldr	r3, [r3, #24]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	699b      	ldr	r3, [r3, #24]
 8012f44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d008      	beq.n	8012f5e <osThreadNew+0x6e>
 8012f4c:	69fb      	ldr	r3, [r7, #28]
 8012f4e:	2b38      	cmp	r3, #56	; 0x38
 8012f50:	d805      	bhi.n	8012f5e <osThreadNew+0x6e>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	f003 0301 	and.w	r3, r3, #1
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d001      	beq.n	8012f62 <osThreadNew+0x72>
        return (NULL);
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e054      	b.n	801300c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	695b      	ldr	r3, [r3, #20]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	695b      	ldr	r3, [r3, #20]
 8012f6e:	089b      	lsrs	r3, r3, #2
 8012f70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	689b      	ldr	r3, [r3, #8]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00e      	beq.n	8012f98 <osThreadNew+0xa8>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	68db      	ldr	r3, [r3, #12]
 8012f7e:	2b5b      	cmp	r3, #91	; 0x5b
 8012f80:	d90a      	bls.n	8012f98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d006      	beq.n	8012f98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d002      	beq.n	8012f98 <osThreadNew+0xa8>
        mem = 1;
 8012f92:	2301      	movs	r3, #1
 8012f94:	61bb      	str	r3, [r7, #24]
 8012f96:	e010      	b.n	8012fba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d10c      	bne.n	8012fba <osThreadNew+0xca>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d108      	bne.n	8012fba <osThreadNew+0xca>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	691b      	ldr	r3, [r3, #16]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d104      	bne.n	8012fba <osThreadNew+0xca>
          mem = 0;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	61bb      	str	r3, [r7, #24]
 8012fb4:	e001      	b.n	8012fba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d110      	bne.n	8012fe2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012fc8:	9202      	str	r2, [sp, #8]
 8012fca:	9301      	str	r3, [sp, #4]
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	6a3a      	ldr	r2, [r7, #32]
 8012fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f001 f9b2 	bl	8014340 <xTaskCreateStatic>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	613b      	str	r3, [r7, #16]
 8012fe0:	e013      	b.n	801300a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d110      	bne.n	801300a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012fe8:	6a3b      	ldr	r3, [r7, #32]
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	f107 0310 	add.w	r3, r7, #16
 8012ff0:	9301      	str	r3, [sp, #4]
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ffa:	68f8      	ldr	r0, [r7, #12]
 8012ffc:	f001 f9fd 	bl	80143fa <xTaskCreate>
 8013000:	4603      	mov	r3, r0
 8013002:	2b01      	cmp	r3, #1
 8013004:	d001      	beq.n	801300a <osThreadNew+0x11a>
            hTask = NULL;
 8013006:	2300      	movs	r3, #0
 8013008:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801300a:	693b      	ldr	r3, [r7, #16]
}
 801300c:	4618      	mov	r0, r3
 801300e:	3728      	adds	r7, #40	; 0x28
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}

08013014 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801301a:	f3ef 8305 	mrs	r3, IPSR
 801301e:	603b      	str	r3, [r7, #0]
  return(result);
 8013020:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013022:	2b00      	cmp	r3, #0
 8013024:	d003      	beq.n	801302e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013026:	f06f 0305 	mvn.w	r3, #5
 801302a:	607b      	str	r3, [r7, #4]
 801302c:	e009      	b.n	8013042 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801302e:	2300      	movs	r3, #0
 8013030:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013032:	4b07      	ldr	r3, [pc, #28]	; (8013050 <osThreadYield+0x3c>)
 8013034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013038:	601a      	str	r2, [r3, #0]
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013042:	687b      	ldr	r3, [r7, #4]
}
 8013044:	4618      	mov	r0, r3
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr
 8013050:	e000ed04 	.word	0xe000ed04

08013054 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801305c:	f3ef 8305 	mrs	r3, IPSR
 8013060:	60bb      	str	r3, [r7, #8]
  return(result);
 8013062:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <osDelay+0x1c>
    stat = osErrorISR;
 8013068:	f06f 0305 	mvn.w	r3, #5
 801306c:	60fb      	str	r3, [r7, #12]
 801306e:	e007      	b.n	8013080 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013070:	2300      	movs	r3, #0
 8013072:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <osDelay+0x2c>
      vTaskDelay(ticks);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f001 fb02 	bl	8014684 <vTaskDelay>
    }
  }

  return (stat);
 8013080:	68fb      	ldr	r3, [r7, #12]
}
 8013082:	4618      	mov	r0, r3
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801308a:	b580      	push	{r7, lr}
 801308c:	b086      	sub	sp, #24
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013092:	2300      	movs	r3, #0
 8013094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013096:	f3ef 8305 	mrs	r3, IPSR
 801309a:	60fb      	str	r3, [r7, #12]
  return(result);
 801309c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d12d      	bne.n	80130fe <osEventFlagsNew+0x74>
    mem = -1;
 80130a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130a6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d015      	beq.n	80130da <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d006      	beq.n	80130c4 <osEventFlagsNew+0x3a>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	68db      	ldr	r3, [r3, #12]
 80130ba:	2b1f      	cmp	r3, #31
 80130bc:	d902      	bls.n	80130c4 <osEventFlagsNew+0x3a>
        mem = 1;
 80130be:	2301      	movs	r3, #1
 80130c0:	613b      	str	r3, [r7, #16]
 80130c2:	e00c      	b.n	80130de <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	689b      	ldr	r3, [r3, #8]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d108      	bne.n	80130de <osEventFlagsNew+0x54>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d104      	bne.n	80130de <osEventFlagsNew+0x54>
          mem = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	613b      	str	r3, [r7, #16]
 80130d8:	e001      	b.n	80130de <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80130da:	2300      	movs	r3, #0
 80130dc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d106      	bne.n	80130f2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	689b      	ldr	r3, [r3, #8]
 80130e8:	4618      	mov	r0, r3
 80130ea:	f000 f91d 	bl	8013328 <xEventGroupCreateStatic>
 80130ee:	6178      	str	r0, [r7, #20]
 80130f0:	e005      	b.n	80130fe <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d102      	bne.n	80130fe <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80130f8:	f000 f94d 	bl	8013396 <xEventGroupCreate>
 80130fc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80130fe:	697b      	ldr	r3, [r7, #20]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d004      	beq.n	8013126 <osEventFlagsSet+0x1e>
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013122:	2b00      	cmp	r3, #0
 8013124:	d003      	beq.n	801312e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013126:	f06f 0303 	mvn.w	r3, #3
 801312a:	617b      	str	r3, [r7, #20]
 801312c:	e028      	b.n	8013180 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801312e:	f3ef 8305 	mrs	r3, IPSR
 8013132:	60fb      	str	r3, [r7, #12]
  return(result);
 8013134:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013136:	2b00      	cmp	r3, #0
 8013138:	d01d      	beq.n	8013176 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801313a:	2300      	movs	r3, #0
 801313c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801313e:	f107 0308 	add.w	r3, r7, #8
 8013142:	461a      	mov	r2, r3
 8013144:	6839      	ldr	r1, [r7, #0]
 8013146:	6938      	ldr	r0, [r7, #16]
 8013148:	f000 fb46 	bl	80137d8 <xEventGroupSetBitsFromISR>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d103      	bne.n	801315a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013152:	f06f 0302 	mvn.w	r3, #2
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	e012      	b.n	8013180 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00d      	beq.n	8013180 <osEventFlagsSet+0x78>
 8013164:	4b09      	ldr	r3, [pc, #36]	; (801318c <osEventFlagsSet+0x84>)
 8013166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801316a:	601a      	str	r2, [r3, #0]
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	f3bf 8f6f 	isb	sy
 8013174:	e004      	b.n	8013180 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013176:	6839      	ldr	r1, [r7, #0]
 8013178:	6938      	ldr	r0, [r7, #16]
 801317a:	f000 fa65 	bl	8013648 <xEventGroupSetBits>
 801317e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013180:	697b      	ldr	r3, [r7, #20]
}
 8013182:	4618      	mov	r0, r3
 8013184:	3718      	adds	r7, #24
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	e000ed04 	.word	0xe000ed04

08013190 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013190:	b580      	push	{r7, lr}
 8013192:	b086      	sub	sp, #24
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <osEventFlagsClear+0x1e>
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d003      	beq.n	80131b6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80131ae:	f06f 0303 	mvn.w	r3, #3
 80131b2:	617b      	str	r3, [r7, #20]
 80131b4:	e019      	b.n	80131ea <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131b6:	f3ef 8305 	mrs	r3, IPSR
 80131ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80131bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d00e      	beq.n	80131e0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80131c2:	6938      	ldr	r0, [r7, #16]
 80131c4:	f000 fa1c 	bl	8013600 <xEventGroupGetBitsFromISR>
 80131c8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80131ca:	6839      	ldr	r1, [r7, #0]
 80131cc:	6938      	ldr	r0, [r7, #16]
 80131ce:	f000 fa03 	bl	80135d8 <xEventGroupClearBitsFromISR>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d108      	bne.n	80131ea <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80131d8:	f06f 0302 	mvn.w	r3, #2
 80131dc:	617b      	str	r3, [r7, #20]
 80131de:	e004      	b.n	80131ea <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80131e0:	6839      	ldr	r1, [r7, #0]
 80131e2:	6938      	ldr	r0, [r7, #16]
 80131e4:	f000 f9c0 	bl	8013568 <xEventGroupClearBits>
 80131e8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80131ea:	697b      	ldr	r3, [r7, #20]
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3718      	adds	r7, #24
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b08c      	sub	sp, #48	; 0x30
 80131f8:	af02      	add	r7, sp, #8
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
 8013200:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d004      	beq.n	8013216 <osEventFlagsWait+0x22>
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013216:	f06f 0303 	mvn.w	r3, #3
 801321a:	61fb      	str	r3, [r7, #28]
 801321c:	e04b      	b.n	80132b6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801321e:	f3ef 8305 	mrs	r3, IPSR
 8013222:	617b      	str	r3, [r7, #20]
  return(result);
 8013224:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013226:	2b00      	cmp	r3, #0
 8013228:	d003      	beq.n	8013232 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801322a:	f06f 0305 	mvn.w	r3, #5
 801322e:	61fb      	str	r3, [r7, #28]
 8013230:	e041      	b.n	80132b6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f003 0301 	and.w	r3, r3, #1
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801323c:	2301      	movs	r3, #1
 801323e:	627b      	str	r3, [r7, #36]	; 0x24
 8013240:	e001      	b.n	8013246 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013242:	2300      	movs	r3, #0
 8013244:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f003 0302 	and.w	r3, r3, #2
 801324c:	2b00      	cmp	r3, #0
 801324e:	d002      	beq.n	8013256 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013250:	2300      	movs	r3, #0
 8013252:	623b      	str	r3, [r7, #32]
 8013254:	e001      	b.n	801325a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013256:	2301      	movs	r3, #1
 8013258:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013260:	6a3a      	ldr	r2, [r7, #32]
 8013262:	68b9      	ldr	r1, [r7, #8]
 8013264:	69b8      	ldr	r0, [r7, #24]
 8013266:	f000 f8b1 	bl	80133cc <xEventGroupWaitBits>
 801326a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f003 0301 	and.w	r3, r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	d010      	beq.n	8013298 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	4013      	ands	r3, r2
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	429a      	cmp	r2, r3
 8013280:	d019      	beq.n	80132b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013288:	f06f 0301 	mvn.w	r3, #1
 801328c:	61fb      	str	r3, [r7, #28]
 801328e:	e012      	b.n	80132b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013290:	f06f 0302 	mvn.w	r3, #2
 8013294:	61fb      	str	r3, [r7, #28]
 8013296:	e00e      	b.n	80132b6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013298:	68ba      	ldr	r2, [r7, #8]
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	4013      	ands	r3, r2
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d109      	bne.n	80132b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d003      	beq.n	80132b0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80132a8:	f06f 0301 	mvn.w	r3, #1
 80132ac:	61fb      	str	r3, [r7, #28]
 80132ae:	e002      	b.n	80132b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80132b0:	f06f 0302 	mvn.w	r3, #2
 80132b4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80132b6:	69fb      	ldr	r3, [r7, #28]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3728      	adds	r7, #40	; 0x28
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80132c0:	b480      	push	{r7}
 80132c2:	b085      	sub	sp, #20
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	4a07      	ldr	r2, [pc, #28]	; (80132ec <vApplicationGetIdleTaskMemory+0x2c>)
 80132d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	4a06      	ldr	r2, [pc, #24]	; (80132f0 <vApplicationGetIdleTaskMemory+0x30>)
 80132d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2280      	movs	r2, #128	; 0x80
 80132dc:	601a      	str	r2, [r3, #0]
}
 80132de:	bf00      	nop
 80132e0:	3714      	adds	r7, #20
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr
 80132ea:	bf00      	nop
 80132ec:	24001dd4 	.word	0x24001dd4
 80132f0:	24001e30 	.word	0x24001e30

080132f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	4a07      	ldr	r2, [pc, #28]	; (8013320 <vApplicationGetTimerTaskMemory+0x2c>)
 8013304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	4a06      	ldr	r2, [pc, #24]	; (8013324 <vApplicationGetTimerTaskMemory+0x30>)
 801330a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013312:	601a      	str	r2, [r3, #0]
}
 8013314:	bf00      	nop
 8013316:	3714      	adds	r7, #20
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	24002030 	.word	0x24002030
 8013324:	2400208c 	.word	0x2400208c

08013328 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d10a      	bne.n	801334c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333a:	f383 8811 	msr	BASEPRI, r3
 801333e:	f3bf 8f6f 	isb	sy
 8013342:	f3bf 8f4f 	dsb	sy
 8013346:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013348:	bf00      	nop
 801334a:	e7fe      	b.n	801334a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801334c:	2320      	movs	r3, #32
 801334e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	2b20      	cmp	r3, #32
 8013354:	d00a      	beq.n	801336c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801335a:	f383 8811 	msr	BASEPRI, r3
 801335e:	f3bf 8f6f 	isb	sy
 8013362:	f3bf 8f4f 	dsb	sy
 8013366:	60fb      	str	r3, [r7, #12]
}
 8013368:	bf00      	nop
 801336a:	e7fe      	b.n	801336a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00a      	beq.n	801338c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	3304      	adds	r3, #4
 8013380:	4618      	mov	r0, r3
 8013382:	f000 fa3d 	bl	8013800 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	2201      	movs	r2, #1
 801338a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801338c:	697b      	ldr	r3, [r7, #20]
	}
 801338e:	4618      	mov	r0, r3
 8013390:	3718      	adds	r7, #24
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013396:	b580      	push	{r7, lr}
 8013398:	b082      	sub	sp, #8
 801339a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801339c:	2020      	movs	r0, #32
 801339e:	f002 fd53 	bl	8015e48 <pvPortMalloc>
 80133a2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d00a      	beq.n	80133c0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2200      	movs	r2, #0
 80133ae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	3304      	adds	r3, #4
 80133b4:	4618      	mov	r0, r3
 80133b6:	f000 fa23 	bl	8013800 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2200      	movs	r2, #0
 80133be:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80133c0:	687b      	ldr	r3, [r7, #4]
	}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
	...

080133cc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b090      	sub	sp, #64	; 0x40
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
 80133d8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80133e2:	2300      	movs	r3, #0
 80133e4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d10a      	bne.n	8013402 <xEventGroupWaitBits+0x36>
	__asm volatile
 80133ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f0:	f383 8811 	msr	BASEPRI, r3
 80133f4:	f3bf 8f6f 	isb	sy
 80133f8:	f3bf 8f4f 	dsb	sy
 80133fc:	623b      	str	r3, [r7, #32]
}
 80133fe:	bf00      	nop
 8013400:	e7fe      	b.n	8013400 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013408:	2b00      	cmp	r3, #0
 801340a:	d00a      	beq.n	8013422 <xEventGroupWaitBits+0x56>
	__asm volatile
 801340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013410:	f383 8811 	msr	BASEPRI, r3
 8013414:	f3bf 8f6f 	isb	sy
 8013418:	f3bf 8f4f 	dsb	sy
 801341c:	61fb      	str	r3, [r7, #28]
}
 801341e:	bf00      	nop
 8013420:	e7fe      	b.n	8013420 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d10a      	bne.n	801343e <xEventGroupWaitBits+0x72>
	__asm volatile
 8013428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342c:	f383 8811 	msr	BASEPRI, r3
 8013430:	f3bf 8f6f 	isb	sy
 8013434:	f3bf 8f4f 	dsb	sy
 8013438:	61bb      	str	r3, [r7, #24]
}
 801343a:	bf00      	nop
 801343c:	e7fe      	b.n	801343c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801343e:	f001 fe51 	bl	80150e4 <xTaskGetSchedulerState>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d102      	bne.n	801344e <xEventGroupWaitBits+0x82>
 8013448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801344a:	2b00      	cmp	r3, #0
 801344c:	d101      	bne.n	8013452 <xEventGroupWaitBits+0x86>
 801344e:	2301      	movs	r3, #1
 8013450:	e000      	b.n	8013454 <xEventGroupWaitBits+0x88>
 8013452:	2300      	movs	r3, #0
 8013454:	2b00      	cmp	r3, #0
 8013456:	d10a      	bne.n	801346e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345c:	f383 8811 	msr	BASEPRI, r3
 8013460:	f3bf 8f6f 	isb	sy
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	617b      	str	r3, [r7, #20]
}
 801346a:	bf00      	nop
 801346c:	e7fe      	b.n	801346c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801346e:	f001 f9a3 	bl	80147b8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013478:	683a      	ldr	r2, [r7, #0]
 801347a:	68b9      	ldr	r1, [r7, #8]
 801347c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801347e:	f000 f988 	bl	8013792 <prvTestWaitCondition>
 8013482:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013486:	2b00      	cmp	r3, #0
 8013488:	d00e      	beq.n	80134a8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801348e:	2300      	movs	r3, #0
 8013490:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d028      	beq.n	80134ea <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801349a:	681a      	ldr	r2, [r3, #0]
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	43db      	mvns	r3, r3
 80134a0:	401a      	ands	r2, r3
 80134a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134a4:	601a      	str	r2, [r3, #0]
 80134a6:	e020      	b.n	80134ea <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80134a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d104      	bne.n	80134b8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80134ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80134b2:	2301      	movs	r3, #1
 80134b4:	633b      	str	r3, [r7, #48]	; 0x30
 80134b6:	e018      	b.n	80134ea <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d003      	beq.n	80134c6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80134be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80134c4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d003      	beq.n	80134d4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80134cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80134d2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80134d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d6:	1d18      	adds	r0, r3, #4
 80134d8:	68ba      	ldr	r2, [r7, #8]
 80134da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134dc:	4313      	orrs	r3, r2
 80134de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134e0:	4619      	mov	r1, r3
 80134e2:	f001 fb77 	bl	8014bd4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80134e6:	2300      	movs	r3, #0
 80134e8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80134ea:	f001 f973 	bl	80147d4 <xTaskResumeAll>
 80134ee:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80134f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d031      	beq.n	801355a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80134f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d107      	bne.n	801350c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80134fc:	4b19      	ldr	r3, [pc, #100]	; (8013564 <xEventGroupWaitBits+0x198>)
 80134fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013502:	601a      	str	r2, [r3, #0]
 8013504:	f3bf 8f4f 	dsb	sy
 8013508:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801350c:	f001 fe76 	bl	80151fc <uxTaskResetEventItemValue>
 8013510:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013518:	2b00      	cmp	r3, #0
 801351a:	d11a      	bne.n	8013552 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801351c:	f002 fb72 	bl	8015c04 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013526:	683a      	ldr	r2, [r7, #0]
 8013528:	68b9      	ldr	r1, [r7, #8]
 801352a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801352c:	f000 f931 	bl	8013792 <prvTestWaitCondition>
 8013530:	4603      	mov	r3, r0
 8013532:	2b00      	cmp	r3, #0
 8013534:	d009      	beq.n	801354a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d006      	beq.n	801354a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	43db      	mvns	r3, r3
 8013544:	401a      	ands	r2, r3
 8013546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013548:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801354a:	2301      	movs	r3, #1
 801354c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801354e:	f002 fb89 	bl	8015c64 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013558:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801355c:	4618      	mov	r0, r3
 801355e:	3740      	adds	r7, #64	; 0x40
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	e000ed04 	.word	0xe000ed04

08013568 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d10a      	bne.n	8013592 <xEventGroupClearBits+0x2a>
	__asm volatile
 801357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013580:	f383 8811 	msr	BASEPRI, r3
 8013584:	f3bf 8f6f 	isb	sy
 8013588:	f3bf 8f4f 	dsb	sy
 801358c:	60fb      	str	r3, [r7, #12]
}
 801358e:	bf00      	nop
 8013590:	e7fe      	b.n	8013590 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00a      	beq.n	80135b2 <xEventGroupClearBits+0x4a>
	__asm volatile
 801359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a0:	f383 8811 	msr	BASEPRI, r3
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	f3bf 8f4f 	dsb	sy
 80135ac:	60bb      	str	r3, [r7, #8]
}
 80135ae:	bf00      	nop
 80135b0:	e7fe      	b.n	80135b0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80135b2:	f002 fb27 	bl	8015c04 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	681a      	ldr	r2, [r3, #0]
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	43db      	mvns	r3, r3
 80135c4:	401a      	ands	r2, r3
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80135ca:	f002 fb4b 	bl	8015c64 <vPortExitCritical>

	return uxReturn;
 80135ce:	693b      	ldr	r3, [r7, #16]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3718      	adds	r7, #24
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80135e2:	2300      	movs	r3, #0
 80135e4:	683a      	ldr	r2, [r7, #0]
 80135e6:	6879      	ldr	r1, [r7, #4]
 80135e8:	4804      	ldr	r0, [pc, #16]	; (80135fc <xEventGroupClearBitsFromISR+0x24>)
 80135ea:	f002 f9c1 	bl	8015970 <xTimerPendFunctionCallFromISR>
 80135ee:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80135f0:	68fb      	ldr	r3, [r7, #12]
	}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	08013779 	.word	0x08013779

08013600 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013600:	b480      	push	{r7}
 8013602:	b089      	sub	sp, #36	; 0x24
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801360c:	f3ef 8211 	mrs	r2, BASEPRI
 8013610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013614:	f383 8811 	msr	BASEPRI, r3
 8013618:	f3bf 8f6f 	isb	sy
 801361c:	f3bf 8f4f 	dsb	sy
 8013620:	60fa      	str	r2, [r7, #12]
 8013622:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013624:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013626:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	617b      	str	r3, [r7, #20]
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013638:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801363a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801363c:	4618      	mov	r0, r3
 801363e:	3724      	adds	r7, #36	; 0x24
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr

08013648 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b08e      	sub	sp, #56	; 0x38
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013652:	2300      	movs	r3, #0
 8013654:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801365a:	2300      	movs	r3, #0
 801365c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10a      	bne.n	801367a <xEventGroupSetBits+0x32>
	__asm volatile
 8013664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013668:	f383 8811 	msr	BASEPRI, r3
 801366c:	f3bf 8f6f 	isb	sy
 8013670:	f3bf 8f4f 	dsb	sy
 8013674:	613b      	str	r3, [r7, #16]
}
 8013676:	bf00      	nop
 8013678:	e7fe      	b.n	8013678 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00a      	beq.n	801369a <xEventGroupSetBits+0x52>
	__asm volatile
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	60fb      	str	r3, [r7, #12]
}
 8013696:	bf00      	nop
 8013698:	e7fe      	b.n	8013698 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369c:	3304      	adds	r3, #4
 801369e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a2:	3308      	adds	r3, #8
 80136a4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80136a6:	f001 f887 	bl	80147b8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80136aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80136b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	431a      	orrs	r2, r3
 80136b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80136bc:	e03c      	b.n	8013738 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80136be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80136c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80136ca:	2300      	movs	r3, #0
 80136cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136d4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80136dc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d108      	bne.n	80136fa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80136e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	69bb      	ldr	r3, [r7, #24]
 80136ee:	4013      	ands	r3, r2
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00b      	beq.n	801370c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80136f4:	2301      	movs	r3, #1
 80136f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136f8:	e008      	b.n	801370c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80136fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	4013      	ands	r3, r2
 8013702:	69ba      	ldr	r2, [r7, #24]
 8013704:	429a      	cmp	r2, r3
 8013706:	d101      	bne.n	801370c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013708:	2301      	movs	r3, #1
 801370a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370e:	2b00      	cmp	r3, #0
 8013710:	d010      	beq.n	8013734 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013718:	2b00      	cmp	r3, #0
 801371a:	d003      	beq.n	8013724 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	4313      	orrs	r3, r2
 8013722:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801372c:	4619      	mov	r1, r3
 801372e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013730:	f001 fb1c 	bl	8014d6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801373a:	6a3b      	ldr	r3, [r7, #32]
 801373c:	429a      	cmp	r2, r3
 801373e:	d1be      	bne.n	80136be <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013746:	43db      	mvns	r3, r3
 8013748:	401a      	ands	r2, r3
 801374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801374e:	f001 f841 	bl	80147d4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013754:	681b      	ldr	r3, [r3, #0]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3738      	adds	r7, #56	; 0x38
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}

0801375e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801375e:	b580      	push	{r7, lr}
 8013760:	b082      	sub	sp, #8
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
 8013766:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013768:	6839      	ldr	r1, [r7, #0]
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7ff ff6c 	bl	8013648 <xEventGroupSetBits>
}
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013782:	6839      	ldr	r1, [r7, #0]
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7ff feef 	bl	8013568 <xEventGroupClearBits>
}
 801378a:	bf00      	nop
 801378c:	3708      	adds	r7, #8
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013792:	b480      	push	{r7}
 8013794:	b087      	sub	sp, #28
 8013796:	af00      	add	r7, sp, #0
 8013798:	60f8      	str	r0, [r7, #12]
 801379a:	60b9      	str	r1, [r7, #8]
 801379c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801379e:	2300      	movs	r3, #0
 80137a0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d107      	bne.n	80137b8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	4013      	ands	r3, r2
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d00a      	beq.n	80137c8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80137b2:	2301      	movs	r3, #1
 80137b4:	617b      	str	r3, [r7, #20]
 80137b6:	e007      	b.n	80137c8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80137b8:	68fa      	ldr	r2, [r7, #12]
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	4013      	ands	r3, r2
 80137be:	68ba      	ldr	r2, [r7, #8]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d101      	bne.n	80137c8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80137c4:	2301      	movs	r3, #1
 80137c6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80137c8:	697b      	ldr	r3, [r7, #20]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	371c      	adds	r7, #28
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
	...

080137d8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b086      	sub	sp, #24
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	68ba      	ldr	r2, [r7, #8]
 80137e8:	68f9      	ldr	r1, [r7, #12]
 80137ea:	4804      	ldr	r0, [pc, #16]	; (80137fc <xEventGroupSetBitsFromISR+0x24>)
 80137ec:	f002 f8c0 	bl	8015970 <xTimerPendFunctionCallFromISR>
 80137f0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80137f2:	697b      	ldr	r3, [r7, #20]
	}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3718      	adds	r7, #24
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	0801375f 	.word	0x0801375f

08013800 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f103 0208 	add.w	r2, r3, #8
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013818:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f103 0208 	add.w	r2, r3, #8
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f103 0208 	add.w	r2, r3, #8
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2200      	movs	r2, #0
 8013832:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013834:	bf00      	nop
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr

08013840 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2200      	movs	r2, #0
 801384c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801384e:	bf00      	nop
 8013850:	370c      	adds	r7, #12
 8013852:	46bd      	mov	sp, r7
 8013854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013858:	4770      	bx	lr

0801385a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801385a:	b480      	push	{r7}
 801385c:	b085      	sub	sp, #20
 801385e:	af00      	add	r7, sp, #0
 8013860:	6078      	str	r0, [r7, #4]
 8013862:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	68fa      	ldr	r2, [r7, #12]
 801386e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	689a      	ldr	r2, [r3, #8]
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	689b      	ldr	r3, [r3, #8]
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	683a      	ldr	r2, [r7, #0]
 8013884:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	1c5a      	adds	r2, r3, #1
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	601a      	str	r2, [r3, #0]
}
 8013896:	bf00      	nop
 8013898:	3714      	adds	r7, #20
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr

080138a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138a2:	b480      	push	{r7}
 80138a4:	b085      	sub	sp, #20
 80138a6:	af00      	add	r7, sp, #0
 80138a8:	6078      	str	r0, [r7, #4]
 80138aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138b8:	d103      	bne.n	80138c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	691b      	ldr	r3, [r3, #16]
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	e00c      	b.n	80138dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3308      	adds	r3, #8
 80138c6:	60fb      	str	r3, [r7, #12]
 80138c8:	e002      	b.n	80138d0 <vListInsert+0x2e>
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	685b      	ldr	r3, [r3, #4]
 80138ce:	60fb      	str	r3, [r7, #12]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d2f6      	bcs.n	80138ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	685a      	ldr	r2, [r3, #4]
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	683a      	ldr	r2, [r7, #0]
 80138ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	683a      	ldr	r2, [r7, #0]
 80138f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	601a      	str	r2, [r3, #0]
}
 8013908:	bf00      	nop
 801390a:	3714      	adds	r7, #20
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr

08013914 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013914:	b480      	push	{r7}
 8013916:	b085      	sub	sp, #20
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	6892      	ldr	r2, [r2, #8]
 801392a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	6852      	ldr	r2, [r2, #4]
 8013934:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	429a      	cmp	r2, r3
 801393e:	d103      	bne.n	8013948 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	689a      	ldr	r2, [r3, #8]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	1e5a      	subs	r2, r3, #1
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
}
 801395c:	4618      	mov	r0, r3
 801395e:	3714      	adds	r7, #20
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr

08013968 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b084      	sub	sp, #16
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d10a      	bne.n	8013992 <xQueueGenericReset+0x2a>
	__asm volatile
 801397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013980:	f383 8811 	msr	BASEPRI, r3
 8013984:	f3bf 8f6f 	isb	sy
 8013988:	f3bf 8f4f 	dsb	sy
 801398c:	60bb      	str	r3, [r7, #8]
}
 801398e:	bf00      	nop
 8013990:	e7fe      	b.n	8013990 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013992:	f002 f937 	bl	8015c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801399e:	68f9      	ldr	r1, [r7, #12]
 80139a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139a2:	fb01 f303 	mul.w	r3, r1, r3
 80139a6:	441a      	add	r2, r3
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2200      	movs	r2, #0
 80139b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139c2:	3b01      	subs	r3, #1
 80139c4:	68f9      	ldr	r1, [r7, #12]
 80139c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139c8:	fb01 f303 	mul.w	r3, r1, r3
 80139cc:	441a      	add	r2, r3
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	22ff      	movs	r2, #255	; 0xff
 80139d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	22ff      	movs	r2, #255	; 0xff
 80139de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d114      	bne.n	8013a12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	691b      	ldr	r3, [r3, #16]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d01a      	beq.n	8013a26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	3310      	adds	r3, #16
 80139f4:	4618      	mov	r0, r3
 80139f6:	f001 f955 	bl	8014ca4 <xTaskRemoveFromEventList>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d012      	beq.n	8013a26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013a00:	4b0c      	ldr	r3, [pc, #48]	; (8013a34 <xQueueGenericReset+0xcc>)
 8013a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a06:	601a      	str	r2, [r3, #0]
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	f3bf 8f6f 	isb	sy
 8013a10:	e009      	b.n	8013a26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	3310      	adds	r3, #16
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7ff fef2 	bl	8013800 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	3324      	adds	r3, #36	; 0x24
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff feed 	bl	8013800 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013a26:	f002 f91d 	bl	8015c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013a2a:	2301      	movs	r3, #1
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3710      	adds	r7, #16
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	e000ed04 	.word	0xe000ed04

08013a38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b08e      	sub	sp, #56	; 0x38
 8013a3c:	af02      	add	r7, sp, #8
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10a      	bne.n	8013a62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a50:	f383 8811 	msr	BASEPRI, r3
 8013a54:	f3bf 8f6f 	isb	sy
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a5e:	bf00      	nop
 8013a60:	e7fe      	b.n	8013a60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d10a      	bne.n	8013a7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6c:	f383 8811 	msr	BASEPRI, r3
 8013a70:	f3bf 8f6f 	isb	sy
 8013a74:	f3bf 8f4f 	dsb	sy
 8013a78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a7a:	bf00      	nop
 8013a7c:	e7fe      	b.n	8013a7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d002      	beq.n	8013a8a <xQueueGenericCreateStatic+0x52>
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d001      	beq.n	8013a8e <xQueueGenericCreateStatic+0x56>
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e000      	b.n	8013a90 <xQueueGenericCreateStatic+0x58>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d10a      	bne.n	8013aaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	623b      	str	r3, [r7, #32]
}
 8013aa6:	bf00      	nop
 8013aa8:	e7fe      	b.n	8013aa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d102      	bne.n	8013ab6 <xQueueGenericCreateStatic+0x7e>
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d101      	bne.n	8013aba <xQueueGenericCreateStatic+0x82>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e000      	b.n	8013abc <xQueueGenericCreateStatic+0x84>
 8013aba:	2300      	movs	r3, #0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d10a      	bne.n	8013ad6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	61fb      	str	r3, [r7, #28]
}
 8013ad2:	bf00      	nop
 8013ad4:	e7fe      	b.n	8013ad4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013ad6:	2350      	movs	r3, #80	; 0x50
 8013ad8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	2b50      	cmp	r3, #80	; 0x50
 8013ade:	d00a      	beq.n	8013af6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	61bb      	str	r3, [r7, #24]
}
 8013af2:	bf00      	nop
 8013af4:	e7fe      	b.n	8013af4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013af6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00d      	beq.n	8013b1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b04:	2201      	movs	r2, #1
 8013b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b10:	9300      	str	r3, [sp, #0]
 8013b12:	4613      	mov	r3, r2
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	68b9      	ldr	r1, [r7, #8]
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f000 f805 	bl	8013b28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013b20:	4618      	mov	r0, r3
 8013b22:	3730      	adds	r7, #48	; 0x30
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b084      	sub	sp, #16
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
 8013b34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d103      	bne.n	8013b44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013b3c:	69bb      	ldr	r3, [r7, #24]
 8013b3e:	69ba      	ldr	r2, [r7, #24]
 8013b40:	601a      	str	r2, [r3, #0]
 8013b42:	e002      	b.n	8013b4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013b4a:	69bb      	ldr	r3, [r7, #24]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	68ba      	ldr	r2, [r7, #8]
 8013b54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013b56:	2101      	movs	r1, #1
 8013b58:	69b8      	ldr	r0, [r7, #24]
 8013b5a:	f7ff ff05 	bl	8013968 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	78fa      	ldrb	r2, [r7, #3]
 8013b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013b66:	bf00      	nop
 8013b68:	3710      	adds	r7, #16
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
	...

08013b70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b08e      	sub	sp, #56	; 0x38
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]
 8013b7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10a      	bne.n	8013ba2 <xQueueGenericSend+0x32>
	__asm volatile
 8013b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b90:	f383 8811 	msr	BASEPRI, r3
 8013b94:	f3bf 8f6f 	isb	sy
 8013b98:	f3bf 8f4f 	dsb	sy
 8013b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013b9e:	bf00      	nop
 8013ba0:	e7fe      	b.n	8013ba0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d103      	bne.n	8013bb0 <xQueueGenericSend+0x40>
 8013ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d101      	bne.n	8013bb4 <xQueueGenericSend+0x44>
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e000      	b.n	8013bb6 <xQueueGenericSend+0x46>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10a      	bne.n	8013bd0 <xQueueGenericSend+0x60>
	__asm volatile
 8013bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013bcc:	bf00      	nop
 8013bce:	e7fe      	b.n	8013bce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d103      	bne.n	8013bde <xQueueGenericSend+0x6e>
 8013bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bda:	2b01      	cmp	r3, #1
 8013bdc:	d101      	bne.n	8013be2 <xQueueGenericSend+0x72>
 8013bde:	2301      	movs	r3, #1
 8013be0:	e000      	b.n	8013be4 <xQueueGenericSend+0x74>
 8013be2:	2300      	movs	r3, #0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d10a      	bne.n	8013bfe <xQueueGenericSend+0x8e>
	__asm volatile
 8013be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bec:	f383 8811 	msr	BASEPRI, r3
 8013bf0:	f3bf 8f6f 	isb	sy
 8013bf4:	f3bf 8f4f 	dsb	sy
 8013bf8:	623b      	str	r3, [r7, #32]
}
 8013bfa:	bf00      	nop
 8013bfc:	e7fe      	b.n	8013bfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013bfe:	f001 fa71 	bl	80150e4 <xTaskGetSchedulerState>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d102      	bne.n	8013c0e <xQueueGenericSend+0x9e>
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d101      	bne.n	8013c12 <xQueueGenericSend+0xa2>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e000      	b.n	8013c14 <xQueueGenericSend+0xa4>
 8013c12:	2300      	movs	r3, #0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d10a      	bne.n	8013c2e <xQueueGenericSend+0xbe>
	__asm volatile
 8013c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1c:	f383 8811 	msr	BASEPRI, r3
 8013c20:	f3bf 8f6f 	isb	sy
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	61fb      	str	r3, [r7, #28]
}
 8013c2a:	bf00      	nop
 8013c2c:	e7fe      	b.n	8013c2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c2e:	f001 ffe9 	bl	8015c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d302      	bcc.n	8013c44 <xQueueGenericSend+0xd4>
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	2b02      	cmp	r3, #2
 8013c42:	d129      	bne.n	8013c98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	68b9      	ldr	r1, [r7, #8]
 8013c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c4a:	f000 fa0b 	bl	8014064 <prvCopyDataToQueue>
 8013c4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d010      	beq.n	8013c7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5a:	3324      	adds	r3, #36	; 0x24
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f001 f821 	bl	8014ca4 <xTaskRemoveFromEventList>
 8013c62:	4603      	mov	r3, r0
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d013      	beq.n	8013c90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013c68:	4b3f      	ldr	r3, [pc, #252]	; (8013d68 <xQueueGenericSend+0x1f8>)
 8013c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c6e:	601a      	str	r2, [r3, #0]
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	f3bf 8f6f 	isb	sy
 8013c78:	e00a      	b.n	8013c90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d007      	beq.n	8013c90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013c80:	4b39      	ldr	r3, [pc, #228]	; (8013d68 <xQueueGenericSend+0x1f8>)
 8013c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c86:	601a      	str	r2, [r3, #0]
 8013c88:	f3bf 8f4f 	dsb	sy
 8013c8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013c90:	f001 ffe8 	bl	8015c64 <vPortExitCritical>
				return pdPASS;
 8013c94:	2301      	movs	r3, #1
 8013c96:	e063      	b.n	8013d60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d103      	bne.n	8013ca6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c9e:	f001 ffe1 	bl	8015c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	e05c      	b.n	8013d60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d106      	bne.n	8013cba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cac:	f107 0314 	add.w	r3, r7, #20
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f001 f8bd 	bl	8014e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cba:	f001 ffd3 	bl	8015c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cbe:	f000 fd7b 	bl	80147b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cc2:	f001 ff9f 	bl	8015c04 <vPortEnterCritical>
 8013cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ccc:	b25b      	sxtb	r3, r3
 8013cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cd2:	d103      	bne.n	8013cdc <xQueueGenericSend+0x16c>
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ce2:	b25b      	sxtb	r3, r3
 8013ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ce8:	d103      	bne.n	8013cf2 <xQueueGenericSend+0x182>
 8013cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cec:	2200      	movs	r2, #0
 8013cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cf2:	f001 ffb7 	bl	8015c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013cf6:	1d3a      	adds	r2, r7, #4
 8013cf8:	f107 0314 	add.w	r3, r7, #20
 8013cfc:	4611      	mov	r1, r2
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f001 f8ac 	bl	8014e5c <xTaskCheckForTimeOut>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d124      	bne.n	8013d54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d0c:	f000 faa2 	bl	8014254 <prvIsQueueFull>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d018      	beq.n	8013d48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d18:	3310      	adds	r3, #16
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	4611      	mov	r1, r2
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 ff34 	bl	8014b8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d26:	f000 fa2d 	bl	8014184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013d2a:	f000 fd53 	bl	80147d4 <xTaskResumeAll>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f47f af7c 	bne.w	8013c2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013d36:	4b0c      	ldr	r3, [pc, #48]	; (8013d68 <xQueueGenericSend+0x1f8>)
 8013d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d3c:	601a      	str	r2, [r3, #0]
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	f3bf 8f6f 	isb	sy
 8013d46:	e772      	b.n	8013c2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d4a:	f000 fa1b 	bl	8014184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d4e:	f000 fd41 	bl	80147d4 <xTaskResumeAll>
 8013d52:	e76c      	b.n	8013c2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d56:	f000 fa15 	bl	8014184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d5a:	f000 fd3b 	bl	80147d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013d5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3738      	adds	r7, #56	; 0x38
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	e000ed04 	.word	0xe000ed04

08013d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b090      	sub	sp, #64	; 0x40
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
 8013d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10a      	bne.n	8013d9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d88:	f383 8811 	msr	BASEPRI, r3
 8013d8c:	f3bf 8f6f 	isb	sy
 8013d90:	f3bf 8f4f 	dsb	sy
 8013d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013d96:	bf00      	nop
 8013d98:	e7fe      	b.n	8013d98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d103      	bne.n	8013da8 <xQueueGenericSendFromISR+0x3c>
 8013da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d101      	bne.n	8013dac <xQueueGenericSendFromISR+0x40>
 8013da8:	2301      	movs	r3, #1
 8013daa:	e000      	b.n	8013dae <xQueueGenericSendFromISR+0x42>
 8013dac:	2300      	movs	r3, #0
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d10a      	bne.n	8013dc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db6:	f383 8811 	msr	BASEPRI, r3
 8013dba:	f3bf 8f6f 	isb	sy
 8013dbe:	f3bf 8f4f 	dsb	sy
 8013dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013dc4:	bf00      	nop
 8013dc6:	e7fe      	b.n	8013dc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d103      	bne.n	8013dd6 <xQueueGenericSendFromISR+0x6a>
 8013dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d101      	bne.n	8013dda <xQueueGenericSendFromISR+0x6e>
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e000      	b.n	8013ddc <xQueueGenericSendFromISR+0x70>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d10a      	bne.n	8013df6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de4:	f383 8811 	msr	BASEPRI, r3
 8013de8:	f3bf 8f6f 	isb	sy
 8013dec:	f3bf 8f4f 	dsb	sy
 8013df0:	623b      	str	r3, [r7, #32]
}
 8013df2:	bf00      	nop
 8013df4:	e7fe      	b.n	8013df4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013df6:	f001 ffe7 	bl	8015dc8 <vPortValidateInterruptPriority>
	__asm volatile
 8013dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8013dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e02:	f383 8811 	msr	BASEPRI, r3
 8013e06:	f3bf 8f6f 	isb	sy
 8013e0a:	f3bf 8f4f 	dsb	sy
 8013e0e:	61fa      	str	r2, [r7, #28]
 8013e10:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013e12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d302      	bcc.n	8013e28 <xQueueGenericSendFromISR+0xbc>
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	2b02      	cmp	r3, #2
 8013e26:	d12f      	bne.n	8013e88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013e38:	683a      	ldr	r2, [r7, #0]
 8013e3a:	68b9      	ldr	r1, [r7, #8]
 8013e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e3e:	f000 f911 	bl	8014064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013e42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e4a:	d112      	bne.n	8013e72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d016      	beq.n	8013e82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e56:	3324      	adds	r3, #36	; 0x24
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f000 ff23 	bl	8014ca4 <xTaskRemoveFromEventList>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00e      	beq.n	8013e82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d00b      	beq.n	8013e82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	601a      	str	r2, [r3, #0]
 8013e70:	e007      	b.n	8013e82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013e72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e76:	3301      	adds	r3, #1
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	b25a      	sxtb	r2, r3
 8013e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013e82:	2301      	movs	r3, #1
 8013e84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013e86:	e001      	b.n	8013e8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	f383 8811 	msr	BASEPRI, r3
}
 8013e96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3740      	adds	r7, #64	; 0x40
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
	...

08013ea4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b08c      	sub	sp, #48	; 0x30
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d10a      	bne.n	8013ed4 <xQueueReceive+0x30>
	__asm volatile
 8013ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec2:	f383 8811 	msr	BASEPRI, r3
 8013ec6:	f3bf 8f6f 	isb	sy
 8013eca:	f3bf 8f4f 	dsb	sy
 8013ece:	623b      	str	r3, [r7, #32]
}
 8013ed0:	bf00      	nop
 8013ed2:	e7fe      	b.n	8013ed2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d103      	bne.n	8013ee2 <xQueueReceive+0x3e>
 8013eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d101      	bne.n	8013ee6 <xQueueReceive+0x42>
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	e000      	b.n	8013ee8 <xQueueReceive+0x44>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d10a      	bne.n	8013f02 <xQueueReceive+0x5e>
	__asm volatile
 8013eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef0:	f383 8811 	msr	BASEPRI, r3
 8013ef4:	f3bf 8f6f 	isb	sy
 8013ef8:	f3bf 8f4f 	dsb	sy
 8013efc:	61fb      	str	r3, [r7, #28]
}
 8013efe:	bf00      	nop
 8013f00:	e7fe      	b.n	8013f00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f02:	f001 f8ef 	bl	80150e4 <xTaskGetSchedulerState>
 8013f06:	4603      	mov	r3, r0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d102      	bne.n	8013f12 <xQueueReceive+0x6e>
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <xQueueReceive+0x72>
 8013f12:	2301      	movs	r3, #1
 8013f14:	e000      	b.n	8013f18 <xQueueReceive+0x74>
 8013f16:	2300      	movs	r3, #0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d10a      	bne.n	8013f32 <xQueueReceive+0x8e>
	__asm volatile
 8013f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f20:	f383 8811 	msr	BASEPRI, r3
 8013f24:	f3bf 8f6f 	isb	sy
 8013f28:	f3bf 8f4f 	dsb	sy
 8013f2c:	61bb      	str	r3, [r7, #24]
}
 8013f2e:	bf00      	nop
 8013f30:	e7fe      	b.n	8013f30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013f32:	f001 fe67 	bl	8015c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d01f      	beq.n	8013f82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013f42:	68b9      	ldr	r1, [r7, #8]
 8013f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f46:	f000 f8f7 	bl	8014138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4c:	1e5a      	subs	r2, r3, #1
 8013f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f54:	691b      	ldr	r3, [r3, #16]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d00f      	beq.n	8013f7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5c:	3310      	adds	r3, #16
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f000 fea0 	bl	8014ca4 <xTaskRemoveFromEventList>
 8013f64:	4603      	mov	r3, r0
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d007      	beq.n	8013f7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013f6a:	4b3d      	ldr	r3, [pc, #244]	; (8014060 <xQueueReceive+0x1bc>)
 8013f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f70:	601a      	str	r2, [r3, #0]
 8013f72:	f3bf 8f4f 	dsb	sy
 8013f76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013f7a:	f001 fe73 	bl	8015c64 <vPortExitCritical>
				return pdPASS;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	e069      	b.n	8014056 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d103      	bne.n	8013f90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f88:	f001 fe6c 	bl	8015c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e062      	b.n	8014056 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d106      	bne.n	8013fa4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f96:	f107 0310 	add.w	r3, r7, #16
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 ff48 	bl	8014e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013fa4:	f001 fe5e 	bl	8015c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013fa8:	f000 fc06 	bl	80147b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013fac:	f001 fe2a 	bl	8015c04 <vPortEnterCritical>
 8013fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013fb6:	b25b      	sxtb	r3, r3
 8013fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fbc:	d103      	bne.n	8013fc6 <xQueueReceive+0x122>
 8013fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fcc:	b25b      	sxtb	r3, r3
 8013fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fd2:	d103      	bne.n	8013fdc <xQueueReceive+0x138>
 8013fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013fdc:	f001 fe42 	bl	8015c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013fe0:	1d3a      	adds	r2, r7, #4
 8013fe2:	f107 0310 	add.w	r3, r7, #16
 8013fe6:	4611      	mov	r1, r2
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f000 ff37 	bl	8014e5c <xTaskCheckForTimeOut>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d123      	bne.n	801403c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ff6:	f000 f917 	bl	8014228 <prvIsQueueEmpty>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d017      	beq.n	8014030 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014002:	3324      	adds	r3, #36	; 0x24
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	4611      	mov	r1, r2
 8014008:	4618      	mov	r0, r3
 801400a:	f000 fdbf 	bl	8014b8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801400e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014010:	f000 f8b8 	bl	8014184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014014:	f000 fbde 	bl	80147d4 <xTaskResumeAll>
 8014018:	4603      	mov	r3, r0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d189      	bne.n	8013f32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801401e:	4b10      	ldr	r3, [pc, #64]	; (8014060 <xQueueReceive+0x1bc>)
 8014020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014024:	601a      	str	r2, [r3, #0]
 8014026:	f3bf 8f4f 	dsb	sy
 801402a:	f3bf 8f6f 	isb	sy
 801402e:	e780      	b.n	8013f32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014032:	f000 f8a7 	bl	8014184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014036:	f000 fbcd 	bl	80147d4 <xTaskResumeAll>
 801403a:	e77a      	b.n	8013f32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801403c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801403e:	f000 f8a1 	bl	8014184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014042:	f000 fbc7 	bl	80147d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014048:	f000 f8ee 	bl	8014228 <prvIsQueueEmpty>
 801404c:	4603      	mov	r3, r0
 801404e:	2b00      	cmp	r3, #0
 8014050:	f43f af6f 	beq.w	8013f32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014056:	4618      	mov	r0, r3
 8014058:	3730      	adds	r7, #48	; 0x30
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}
 801405e:	bf00      	nop
 8014060:	e000ed04 	.word	0xe000ed04

08014064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b086      	sub	sp, #24
 8014068:	af00      	add	r7, sp, #0
 801406a:	60f8      	str	r0, [r7, #12]
 801406c:	60b9      	str	r1, [r7, #8]
 801406e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014070:	2300      	movs	r3, #0
 8014072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10d      	bne.n	801409e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d14d      	bne.n	8014126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	4618      	mov	r0, r3
 8014090:	f001 f846 	bl	8015120 <xTaskPriorityDisinherit>
 8014094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2200      	movs	r2, #0
 801409a:	609a      	str	r2, [r3, #8]
 801409c:	e043      	b.n	8014126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d119      	bne.n	80140d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	6858      	ldr	r0, [r3, #4]
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ac:	461a      	mov	r2, r3
 80140ae:	68b9      	ldr	r1, [r7, #8]
 80140b0:	f002 f8de 	bl	8016270 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	685a      	ldr	r2, [r3, #4]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140bc:	441a      	add	r2, r3
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	685a      	ldr	r2, [r3, #4]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d32b      	bcc.n	8014126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	605a      	str	r2, [r3, #4]
 80140d6:	e026      	b.n	8014126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	68d8      	ldr	r0, [r3, #12]
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140e0:	461a      	mov	r2, r3
 80140e2:	68b9      	ldr	r1, [r7, #8]
 80140e4:	f002 f8c4 	bl	8016270 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	68da      	ldr	r2, [r3, #12]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140f0:	425b      	negs	r3, r3
 80140f2:	441a      	add	r2, r3
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	68da      	ldr	r2, [r3, #12]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	429a      	cmp	r2, r3
 8014102:	d207      	bcs.n	8014114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	689a      	ldr	r2, [r3, #8]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801410c:	425b      	negs	r3, r3
 801410e:	441a      	add	r2, r3
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b02      	cmp	r3, #2
 8014118:	d105      	bne.n	8014126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d002      	beq.n	8014126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	3b01      	subs	r3, #1
 8014124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	1c5a      	adds	r2, r3, #1
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801412e:	697b      	ldr	r3, [r7, #20]
}
 8014130:	4618      	mov	r0, r3
 8014132:	3718      	adds	r7, #24
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014146:	2b00      	cmp	r3, #0
 8014148:	d018      	beq.n	801417c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	68da      	ldr	r2, [r3, #12]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014152:	441a      	add	r2, r3
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	68da      	ldr	r2, [r3, #12]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	429a      	cmp	r2, r3
 8014162:	d303      	bcc.n	801416c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	68d9      	ldr	r1, [r3, #12]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014174:	461a      	mov	r2, r3
 8014176:	6838      	ldr	r0, [r7, #0]
 8014178:	f002 f87a 	bl	8016270 <memcpy>
	}
}
 801417c:	bf00      	nop
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801418c:	f001 fd3a 	bl	8015c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014198:	e011      	b.n	80141be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d012      	beq.n	80141c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	3324      	adds	r3, #36	; 0x24
 80141a6:	4618      	mov	r0, r3
 80141a8:	f000 fd7c 	bl	8014ca4 <xTaskRemoveFromEventList>
 80141ac:	4603      	mov	r3, r0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d001      	beq.n	80141b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80141b2:	f000 feb5 	bl	8014f20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80141b6:	7bfb      	ldrb	r3, [r7, #15]
 80141b8:	3b01      	subs	r3, #1
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80141be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	dce9      	bgt.n	801419a <prvUnlockQueue+0x16>
 80141c6:	e000      	b.n	80141ca <prvUnlockQueue+0x46>
					break;
 80141c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	22ff      	movs	r2, #255	; 0xff
 80141ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80141d2:	f001 fd47 	bl	8015c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80141d6:	f001 fd15 	bl	8015c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80141e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80141e2:	e011      	b.n	8014208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	691b      	ldr	r3, [r3, #16]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d012      	beq.n	8014212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	3310      	adds	r3, #16
 80141f0:	4618      	mov	r0, r3
 80141f2:	f000 fd57 	bl	8014ca4 <xTaskRemoveFromEventList>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d001      	beq.n	8014200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80141fc:	f000 fe90 	bl	8014f20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014200:	7bbb      	ldrb	r3, [r7, #14]
 8014202:	3b01      	subs	r3, #1
 8014204:	b2db      	uxtb	r3, r3
 8014206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801420c:	2b00      	cmp	r3, #0
 801420e:	dce9      	bgt.n	80141e4 <prvUnlockQueue+0x60>
 8014210:	e000      	b.n	8014214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	22ff      	movs	r2, #255	; 0xff
 8014218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801421c:	f001 fd22 	bl	8015c64 <vPortExitCritical>
}
 8014220:	bf00      	nop
 8014222:	3710      	adds	r7, #16
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014230:	f001 fce8 	bl	8015c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014238:	2b00      	cmp	r3, #0
 801423a:	d102      	bne.n	8014242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801423c:	2301      	movs	r3, #1
 801423e:	60fb      	str	r3, [r7, #12]
 8014240:	e001      	b.n	8014246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014242:	2300      	movs	r3, #0
 8014244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014246:	f001 fd0d 	bl	8015c64 <vPortExitCritical>

	return xReturn;
 801424a:	68fb      	ldr	r3, [r7, #12]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3710      	adds	r7, #16
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}

08014254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b084      	sub	sp, #16
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801425c:	f001 fcd2 	bl	8015c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014268:	429a      	cmp	r2, r3
 801426a:	d102      	bne.n	8014272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801426c:	2301      	movs	r3, #1
 801426e:	60fb      	str	r3, [r7, #12]
 8014270:	e001      	b.n	8014276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014272:	2300      	movs	r3, #0
 8014274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014276:	f001 fcf5 	bl	8015c64 <vPortExitCritical>

	return xReturn;
 801427a:	68fb      	ldr	r3, [r7, #12]
}
 801427c:	4618      	mov	r0, r3
 801427e:	3710      	adds	r7, #16
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}

08014284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014284:	b480      	push	{r7}
 8014286:	b085      	sub	sp, #20
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801428e:	2300      	movs	r3, #0
 8014290:	60fb      	str	r3, [r7, #12]
 8014292:	e014      	b.n	80142be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014294:	4a0f      	ldr	r2, [pc, #60]	; (80142d4 <vQueueAddToRegistry+0x50>)
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d10b      	bne.n	80142b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80142a0:	490c      	ldr	r1, [pc, #48]	; (80142d4 <vQueueAddToRegistry+0x50>)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	683a      	ldr	r2, [r7, #0]
 80142a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80142aa:	4a0a      	ldr	r2, [pc, #40]	; (80142d4 <vQueueAddToRegistry+0x50>)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	00db      	lsls	r3, r3, #3
 80142b0:	4413      	add	r3, r2
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80142b6:	e006      	b.n	80142c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	3301      	adds	r3, #1
 80142bc:	60fb      	str	r3, [r7, #12]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2b07      	cmp	r3, #7
 80142c2:	d9e7      	bls.n	8014294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80142c4:	bf00      	nop
 80142c6:	bf00      	nop
 80142c8:	3714      	adds	r7, #20
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop
 80142d4:	2400248c 	.word	0x2400248c

080142d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b086      	sub	sp, #24
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80142e8:	f001 fc8c 	bl	8015c04 <vPortEnterCritical>
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142f2:	b25b      	sxtb	r3, r3
 80142f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142f8:	d103      	bne.n	8014302 <vQueueWaitForMessageRestricted+0x2a>
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	2200      	movs	r2, #0
 80142fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014308:	b25b      	sxtb	r3, r3
 801430a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801430e:	d103      	bne.n	8014318 <vQueueWaitForMessageRestricted+0x40>
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	2200      	movs	r2, #0
 8014314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014318:	f001 fca4 	bl	8015c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014320:	2b00      	cmp	r3, #0
 8014322:	d106      	bne.n	8014332 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	3324      	adds	r3, #36	; 0x24
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	68b9      	ldr	r1, [r7, #8]
 801432c:	4618      	mov	r0, r3
 801432e:	f000 fc8d 	bl	8014c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014332:	6978      	ldr	r0, [r7, #20]
 8014334:	f7ff ff26 	bl	8014184 <prvUnlockQueue>
	}
 8014338:	bf00      	nop
 801433a:	3718      	adds	r7, #24
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014340:	b580      	push	{r7, lr}
 8014342:	b08e      	sub	sp, #56	; 0x38
 8014344:	af04      	add	r7, sp, #16
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	60b9      	str	r1, [r7, #8]
 801434a:	607a      	str	r2, [r7, #4]
 801434c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10a      	bne.n	801436a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014358:	f383 8811 	msr	BASEPRI, r3
 801435c:	f3bf 8f6f 	isb	sy
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	623b      	str	r3, [r7, #32]
}
 8014366:	bf00      	nop
 8014368:	e7fe      	b.n	8014368 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10a      	bne.n	8014386 <xTaskCreateStatic+0x46>
	__asm volatile
 8014370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014374:	f383 8811 	msr	BASEPRI, r3
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	61fb      	str	r3, [r7, #28]
}
 8014382:	bf00      	nop
 8014384:	e7fe      	b.n	8014384 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014386:	235c      	movs	r3, #92	; 0x5c
 8014388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	2b5c      	cmp	r3, #92	; 0x5c
 801438e:	d00a      	beq.n	80143a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8014390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014394:	f383 8811 	msr	BASEPRI, r3
 8014398:	f3bf 8f6f 	isb	sy
 801439c:	f3bf 8f4f 	dsb	sy
 80143a0:	61bb      	str	r3, [r7, #24]
}
 80143a2:	bf00      	nop
 80143a4:	e7fe      	b.n	80143a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80143a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80143a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d01e      	beq.n	80143ec <xTaskCreateStatic+0xac>
 80143ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d01b      	beq.n	80143ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80143b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80143be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c0:	2202      	movs	r2, #2
 80143c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80143c6:	2300      	movs	r3, #0
 80143c8:	9303      	str	r3, [sp, #12]
 80143ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143cc:	9302      	str	r3, [sp, #8]
 80143ce:	f107 0314 	add.w	r3, r7, #20
 80143d2:	9301      	str	r3, [sp, #4]
 80143d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f000 f850 	bl	8014484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80143e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143e6:	f000 f8dd 	bl	80145a4 <prvAddNewTaskToReadyList>
 80143ea:	e001      	b.n	80143f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80143ec:	2300      	movs	r3, #0
 80143ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80143f0:	697b      	ldr	r3, [r7, #20]
	}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3728      	adds	r7, #40	; 0x28
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}

080143fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b08c      	sub	sp, #48	; 0x30
 80143fe:	af04      	add	r7, sp, #16
 8014400:	60f8      	str	r0, [r7, #12]
 8014402:	60b9      	str	r1, [r7, #8]
 8014404:	603b      	str	r3, [r7, #0]
 8014406:	4613      	mov	r3, r2
 8014408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801440a:	88fb      	ldrh	r3, [r7, #6]
 801440c:	009b      	lsls	r3, r3, #2
 801440e:	4618      	mov	r0, r3
 8014410:	f001 fd1a 	bl	8015e48 <pvPortMalloc>
 8014414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d00e      	beq.n	801443a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801441c:	205c      	movs	r0, #92	; 0x5c
 801441e:	f001 fd13 	bl	8015e48 <pvPortMalloc>
 8014422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d003      	beq.n	8014432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	697a      	ldr	r2, [r7, #20]
 801442e:	631a      	str	r2, [r3, #48]	; 0x30
 8014430:	e005      	b.n	801443e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014432:	6978      	ldr	r0, [r7, #20]
 8014434:	f001 fdd4 	bl	8015fe0 <vPortFree>
 8014438:	e001      	b.n	801443e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801443a:	2300      	movs	r3, #0
 801443c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d017      	beq.n	8014474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	2200      	movs	r2, #0
 8014448:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801444c:	88fa      	ldrh	r2, [r7, #6]
 801444e:	2300      	movs	r3, #0
 8014450:	9303      	str	r3, [sp, #12]
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	9302      	str	r3, [sp, #8]
 8014456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014458:	9301      	str	r3, [sp, #4]
 801445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	68b9      	ldr	r1, [r7, #8]
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f000 f80e 	bl	8014484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014468:	69f8      	ldr	r0, [r7, #28]
 801446a:	f000 f89b 	bl	80145a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801446e:	2301      	movs	r3, #1
 8014470:	61bb      	str	r3, [r7, #24]
 8014472:	e002      	b.n	801447a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801447a:	69bb      	ldr	r3, [r7, #24]
	}
 801447c:	4618      	mov	r0, r3
 801447e:	3720      	adds	r7, #32
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}

08014484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b088      	sub	sp, #32
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
 8014490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	461a      	mov	r2, r3
 801449c:	21a5      	movs	r1, #165	; 0xa5
 801449e:	f001 fef5 	bl	801628c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80144a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80144a6:	6879      	ldr	r1, [r7, #4]
 80144a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80144ac:	440b      	add	r3, r1
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	4413      	add	r3, r2
 80144b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	f023 0307 	bic.w	r3, r3, #7
 80144ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	f003 0307 	and.w	r3, r3, #7
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00a      	beq.n	80144dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80144c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ca:	f383 8811 	msr	BASEPRI, r3
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	617b      	str	r3, [r7, #20]
}
 80144d8:	bf00      	nop
 80144da:	e7fe      	b.n	80144da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d01f      	beq.n	8014522 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80144e2:	2300      	movs	r3, #0
 80144e4:	61fb      	str	r3, [r7, #28]
 80144e6:	e012      	b.n	801450e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80144e8:	68ba      	ldr	r2, [r7, #8]
 80144ea:	69fb      	ldr	r3, [r7, #28]
 80144ec:	4413      	add	r3, r2
 80144ee:	7819      	ldrb	r1, [r3, #0]
 80144f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	4413      	add	r3, r2
 80144f6:	3334      	adds	r3, #52	; 0x34
 80144f8:	460a      	mov	r2, r1
 80144fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80144fc:	68ba      	ldr	r2, [r7, #8]
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	4413      	add	r3, r2
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d006      	beq.n	8014516 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	3301      	adds	r3, #1
 801450c:	61fb      	str	r3, [r7, #28]
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	2b0f      	cmp	r3, #15
 8014512:	d9e9      	bls.n	80144e8 <prvInitialiseNewTask+0x64>
 8014514:	e000      	b.n	8014518 <prvInitialiseNewTask+0x94>
			{
				break;
 8014516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451a:	2200      	movs	r2, #0
 801451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014520:	e003      	b.n	801452a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014524:	2200      	movs	r2, #0
 8014526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801452c:	2b37      	cmp	r3, #55	; 0x37
 801452e:	d901      	bls.n	8014534 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014530:	2337      	movs	r3, #55	; 0x37
 8014532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801453c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801453e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014542:	2200      	movs	r2, #0
 8014544:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	3304      	adds	r3, #4
 801454a:	4618      	mov	r0, r3
 801454c:	f7ff f978 	bl	8013840 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014552:	3318      	adds	r3, #24
 8014554:	4618      	mov	r0, r3
 8014556:	f7ff f973 	bl	8013840 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801455e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801456e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014572:	2200      	movs	r2, #0
 8014574:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014578:	2200      	movs	r2, #0
 801457a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801457e:	683a      	ldr	r2, [r7, #0]
 8014580:	68f9      	ldr	r1, [r7, #12]
 8014582:	69b8      	ldr	r0, [r7, #24]
 8014584:	f001 fa14 	bl	80159b0 <pxPortInitialiseStack>
 8014588:	4602      	mov	r2, r0
 801458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801459a:	bf00      	nop
 801459c:	3720      	adds	r7, #32
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
	...

080145a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80145ac:	f001 fb2a 	bl	8015c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80145b0:	4b2d      	ldr	r3, [pc, #180]	; (8014668 <prvAddNewTaskToReadyList+0xc4>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	3301      	adds	r3, #1
 80145b6:	4a2c      	ldr	r2, [pc, #176]	; (8014668 <prvAddNewTaskToReadyList+0xc4>)
 80145b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80145ba:	4b2c      	ldr	r3, [pc, #176]	; (801466c <prvAddNewTaskToReadyList+0xc8>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d109      	bne.n	80145d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80145c2:	4a2a      	ldr	r2, [pc, #168]	; (801466c <prvAddNewTaskToReadyList+0xc8>)
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80145c8:	4b27      	ldr	r3, [pc, #156]	; (8014668 <prvAddNewTaskToReadyList+0xc4>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	d110      	bne.n	80145f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80145d0:	f000 fcca 	bl	8014f68 <prvInitialiseTaskLists>
 80145d4:	e00d      	b.n	80145f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80145d6:	4b26      	ldr	r3, [pc, #152]	; (8014670 <prvAddNewTaskToReadyList+0xcc>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d109      	bne.n	80145f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80145de:	4b23      	ldr	r3, [pc, #140]	; (801466c <prvAddNewTaskToReadyList+0xc8>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d802      	bhi.n	80145f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80145ec:	4a1f      	ldr	r2, [pc, #124]	; (801466c <prvAddNewTaskToReadyList+0xc8>)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80145f2:	4b20      	ldr	r3, [pc, #128]	; (8014674 <prvAddNewTaskToReadyList+0xd0>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	3301      	adds	r3, #1
 80145f8:	4a1e      	ldr	r2, [pc, #120]	; (8014674 <prvAddNewTaskToReadyList+0xd0>)
 80145fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80145fc:	4b1d      	ldr	r3, [pc, #116]	; (8014674 <prvAddNewTaskToReadyList+0xd0>)
 80145fe:	681a      	ldr	r2, [r3, #0]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014608:	4b1b      	ldr	r3, [pc, #108]	; (8014678 <prvAddNewTaskToReadyList+0xd4>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	429a      	cmp	r2, r3
 801460e:	d903      	bls.n	8014618 <prvAddNewTaskToReadyList+0x74>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014614:	4a18      	ldr	r2, [pc, #96]	; (8014678 <prvAddNewTaskToReadyList+0xd4>)
 8014616:	6013      	str	r3, [r2, #0]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801461c:	4613      	mov	r3, r2
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	4413      	add	r3, r2
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	4a15      	ldr	r2, [pc, #84]	; (801467c <prvAddNewTaskToReadyList+0xd8>)
 8014626:	441a      	add	r2, r3
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	3304      	adds	r3, #4
 801462c:	4619      	mov	r1, r3
 801462e:	4610      	mov	r0, r2
 8014630:	f7ff f913 	bl	801385a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014634:	f001 fb16 	bl	8015c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014638:	4b0d      	ldr	r3, [pc, #52]	; (8014670 <prvAddNewTaskToReadyList+0xcc>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00e      	beq.n	801465e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014640:	4b0a      	ldr	r3, [pc, #40]	; (801466c <prvAddNewTaskToReadyList+0xc8>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464a:	429a      	cmp	r2, r3
 801464c:	d207      	bcs.n	801465e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801464e:	4b0c      	ldr	r3, [pc, #48]	; (8014680 <prvAddNewTaskToReadyList+0xdc>)
 8014650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014654:	601a      	str	r2, [r3, #0]
 8014656:	f3bf 8f4f 	dsb	sy
 801465a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801465e:	bf00      	nop
 8014660:	3708      	adds	r7, #8
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop
 8014668:	240029a0 	.word	0x240029a0
 801466c:	240024cc 	.word	0x240024cc
 8014670:	240029ac 	.word	0x240029ac
 8014674:	240029bc 	.word	0x240029bc
 8014678:	240029a8 	.word	0x240029a8
 801467c:	240024d0 	.word	0x240024d0
 8014680:	e000ed04 	.word	0xe000ed04

08014684 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801468c:	2300      	movs	r3, #0
 801468e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d017      	beq.n	80146c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014696:	4b13      	ldr	r3, [pc, #76]	; (80146e4 <vTaskDelay+0x60>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00a      	beq.n	80146b4 <vTaskDelay+0x30>
	__asm volatile
 801469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a2:	f383 8811 	msr	BASEPRI, r3
 80146a6:	f3bf 8f6f 	isb	sy
 80146aa:	f3bf 8f4f 	dsb	sy
 80146ae:	60bb      	str	r3, [r7, #8]
}
 80146b0:	bf00      	nop
 80146b2:	e7fe      	b.n	80146b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80146b4:	f000 f880 	bl	80147b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80146b8:	2100      	movs	r1, #0
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fdb6 	bl	801522c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80146c0:	f000 f888 	bl	80147d4 <xTaskResumeAll>
 80146c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d107      	bne.n	80146dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80146cc:	4b06      	ldr	r3, [pc, #24]	; (80146e8 <vTaskDelay+0x64>)
 80146ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146d2:	601a      	str	r2, [r3, #0]
 80146d4:	f3bf 8f4f 	dsb	sy
 80146d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80146dc:	bf00      	nop
 80146de:	3710      	adds	r7, #16
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	240029c8 	.word	0x240029c8
 80146e8:	e000ed04 	.word	0xe000ed04

080146ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b08a      	sub	sp, #40	; 0x28
 80146f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80146f2:	2300      	movs	r3, #0
 80146f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146f6:	2300      	movs	r3, #0
 80146f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146fa:	463a      	mov	r2, r7
 80146fc:	1d39      	adds	r1, r7, #4
 80146fe:	f107 0308 	add.w	r3, r7, #8
 8014702:	4618      	mov	r0, r3
 8014704:	f7fe fddc 	bl	80132c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014708:	6839      	ldr	r1, [r7, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	68ba      	ldr	r2, [r7, #8]
 801470e:	9202      	str	r2, [sp, #8]
 8014710:	9301      	str	r3, [sp, #4]
 8014712:	2300      	movs	r3, #0
 8014714:	9300      	str	r3, [sp, #0]
 8014716:	2300      	movs	r3, #0
 8014718:	460a      	mov	r2, r1
 801471a:	4921      	ldr	r1, [pc, #132]	; (80147a0 <vTaskStartScheduler+0xb4>)
 801471c:	4821      	ldr	r0, [pc, #132]	; (80147a4 <vTaskStartScheduler+0xb8>)
 801471e:	f7ff fe0f 	bl	8014340 <xTaskCreateStatic>
 8014722:	4603      	mov	r3, r0
 8014724:	4a20      	ldr	r2, [pc, #128]	; (80147a8 <vTaskStartScheduler+0xbc>)
 8014726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014728:	4b1f      	ldr	r3, [pc, #124]	; (80147a8 <vTaskStartScheduler+0xbc>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d002      	beq.n	8014736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014730:	2301      	movs	r3, #1
 8014732:	617b      	str	r3, [r7, #20]
 8014734:	e001      	b.n	801473a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014736:	2300      	movs	r3, #0
 8014738:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	2b01      	cmp	r3, #1
 801473e:	d102      	bne.n	8014746 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014740:	f000 fdc8 	bl	80152d4 <xTimerCreateTimerTask>
 8014744:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	2b01      	cmp	r3, #1
 801474a:	d116      	bne.n	801477a <vTaskStartScheduler+0x8e>
	__asm volatile
 801474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014750:	f383 8811 	msr	BASEPRI, r3
 8014754:	f3bf 8f6f 	isb	sy
 8014758:	f3bf 8f4f 	dsb	sy
 801475c:	613b      	str	r3, [r7, #16]
}
 801475e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014760:	4b12      	ldr	r3, [pc, #72]	; (80147ac <vTaskStartScheduler+0xc0>)
 8014762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014766:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014768:	4b11      	ldr	r3, [pc, #68]	; (80147b0 <vTaskStartScheduler+0xc4>)
 801476a:	2201      	movs	r2, #1
 801476c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801476e:	4b11      	ldr	r3, [pc, #68]	; (80147b4 <vTaskStartScheduler+0xc8>)
 8014770:	2200      	movs	r2, #0
 8014772:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014774:	f001 f9a4 	bl	8015ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014778:	e00e      	b.n	8014798 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014780:	d10a      	bne.n	8014798 <vTaskStartScheduler+0xac>
	__asm volatile
 8014782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014786:	f383 8811 	msr	BASEPRI, r3
 801478a:	f3bf 8f6f 	isb	sy
 801478e:	f3bf 8f4f 	dsb	sy
 8014792:	60fb      	str	r3, [r7, #12]
}
 8014794:	bf00      	nop
 8014796:	e7fe      	b.n	8014796 <vTaskStartScheduler+0xaa>
}
 8014798:	bf00      	nop
 801479a:	3718      	adds	r7, #24
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	08016f00 	.word	0x08016f00
 80147a4:	08014f39 	.word	0x08014f39
 80147a8:	240029c4 	.word	0x240029c4
 80147ac:	240029c0 	.word	0x240029c0
 80147b0:	240029ac 	.word	0x240029ac
 80147b4:	240029a4 	.word	0x240029a4

080147b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147b8:	b480      	push	{r7}
 80147ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80147bc:	4b04      	ldr	r3, [pc, #16]	; (80147d0 <vTaskSuspendAll+0x18>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	3301      	adds	r3, #1
 80147c2:	4a03      	ldr	r2, [pc, #12]	; (80147d0 <vTaskSuspendAll+0x18>)
 80147c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80147c6:	bf00      	nop
 80147c8:	46bd      	mov	sp, r7
 80147ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ce:	4770      	bx	lr
 80147d0:	240029c8 	.word	0x240029c8

080147d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80147da:	2300      	movs	r3, #0
 80147dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80147de:	2300      	movs	r3, #0
 80147e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80147e2:	4b42      	ldr	r3, [pc, #264]	; (80148ec <xTaskResumeAll+0x118>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d10a      	bne.n	8014800 <xTaskResumeAll+0x2c>
	__asm volatile
 80147ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ee:	f383 8811 	msr	BASEPRI, r3
 80147f2:	f3bf 8f6f 	isb	sy
 80147f6:	f3bf 8f4f 	dsb	sy
 80147fa:	603b      	str	r3, [r7, #0]
}
 80147fc:	bf00      	nop
 80147fe:	e7fe      	b.n	80147fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014800:	f001 fa00 	bl	8015c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014804:	4b39      	ldr	r3, [pc, #228]	; (80148ec <xTaskResumeAll+0x118>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	3b01      	subs	r3, #1
 801480a:	4a38      	ldr	r2, [pc, #224]	; (80148ec <xTaskResumeAll+0x118>)
 801480c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801480e:	4b37      	ldr	r3, [pc, #220]	; (80148ec <xTaskResumeAll+0x118>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d162      	bne.n	80148dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014816:	4b36      	ldr	r3, [pc, #216]	; (80148f0 <xTaskResumeAll+0x11c>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d05e      	beq.n	80148dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801481e:	e02f      	b.n	8014880 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014820:	4b34      	ldr	r3, [pc, #208]	; (80148f4 <xTaskResumeAll+0x120>)
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	3318      	adds	r3, #24
 801482c:	4618      	mov	r0, r3
 801482e:	f7ff f871 	bl	8013914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	3304      	adds	r3, #4
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff f86c 	bl	8013914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014840:	4b2d      	ldr	r3, [pc, #180]	; (80148f8 <xTaskResumeAll+0x124>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	429a      	cmp	r2, r3
 8014846:	d903      	bls.n	8014850 <xTaskResumeAll+0x7c>
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801484c:	4a2a      	ldr	r2, [pc, #168]	; (80148f8 <xTaskResumeAll+0x124>)
 801484e:	6013      	str	r3, [r2, #0]
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014854:	4613      	mov	r3, r2
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	4413      	add	r3, r2
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	4a27      	ldr	r2, [pc, #156]	; (80148fc <xTaskResumeAll+0x128>)
 801485e:	441a      	add	r2, r3
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	3304      	adds	r3, #4
 8014864:	4619      	mov	r1, r3
 8014866:	4610      	mov	r0, r2
 8014868:	f7fe fff7 	bl	801385a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014870:	4b23      	ldr	r3, [pc, #140]	; (8014900 <xTaskResumeAll+0x12c>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014876:	429a      	cmp	r2, r3
 8014878:	d302      	bcc.n	8014880 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801487a:	4b22      	ldr	r3, [pc, #136]	; (8014904 <xTaskResumeAll+0x130>)
 801487c:	2201      	movs	r2, #1
 801487e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014880:	4b1c      	ldr	r3, [pc, #112]	; (80148f4 <xTaskResumeAll+0x120>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1cb      	bne.n	8014820 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d001      	beq.n	8014892 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801488e:	f000 fc09 	bl	80150a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014892:	4b1d      	ldr	r3, [pc, #116]	; (8014908 <xTaskResumeAll+0x134>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d010      	beq.n	80148c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801489e:	f000 f847 	bl	8014930 <xTaskIncrementTick>
 80148a2:	4603      	mov	r3, r0
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d002      	beq.n	80148ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80148a8:	4b16      	ldr	r3, [pc, #88]	; (8014904 <xTaskResumeAll+0x130>)
 80148aa:	2201      	movs	r2, #1
 80148ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	3b01      	subs	r3, #1
 80148b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d1f1      	bne.n	801489e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80148ba:	4b13      	ldr	r3, [pc, #76]	; (8014908 <xTaskResumeAll+0x134>)
 80148bc:	2200      	movs	r2, #0
 80148be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148c0:	4b10      	ldr	r3, [pc, #64]	; (8014904 <xTaskResumeAll+0x130>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d009      	beq.n	80148dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148c8:	2301      	movs	r3, #1
 80148ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148cc:	4b0f      	ldr	r3, [pc, #60]	; (801490c <xTaskResumeAll+0x138>)
 80148ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148d2:	601a      	str	r2, [r3, #0]
 80148d4:	f3bf 8f4f 	dsb	sy
 80148d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148dc:	f001 f9c2 	bl	8015c64 <vPortExitCritical>

	return xAlreadyYielded;
 80148e0:	68bb      	ldr	r3, [r7, #8]
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	240029c8 	.word	0x240029c8
 80148f0:	240029a0 	.word	0x240029a0
 80148f4:	24002960 	.word	0x24002960
 80148f8:	240029a8 	.word	0x240029a8
 80148fc:	240024d0 	.word	0x240024d0
 8014900:	240024cc 	.word	0x240024cc
 8014904:	240029b4 	.word	0x240029b4
 8014908:	240029b0 	.word	0x240029b0
 801490c:	e000ed04 	.word	0xe000ed04

08014910 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014910:	b480      	push	{r7}
 8014912:	b083      	sub	sp, #12
 8014914:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014916:	4b05      	ldr	r3, [pc, #20]	; (801492c <xTaskGetTickCount+0x1c>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801491c:	687b      	ldr	r3, [r7, #4]
}
 801491e:	4618      	mov	r0, r3
 8014920:	370c      	adds	r7, #12
 8014922:	46bd      	mov	sp, r7
 8014924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	240029a4 	.word	0x240029a4

08014930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014936:	2300      	movs	r3, #0
 8014938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801493a:	4b53      	ldr	r3, [pc, #332]	; (8014a88 <xTaskIncrementTick+0x158>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	f040 8095 	bne.w	8014a6e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014944:	4b51      	ldr	r3, [pc, #324]	; (8014a8c <xTaskIncrementTick+0x15c>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	3301      	adds	r3, #1
 801494a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801494c:	4a4f      	ldr	r2, [pc, #316]	; (8014a8c <xTaskIncrementTick+0x15c>)
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d120      	bne.n	801499a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014958:	4b4d      	ldr	r3, [pc, #308]	; (8014a90 <xTaskIncrementTick+0x160>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00a      	beq.n	8014978 <xTaskIncrementTick+0x48>
	__asm volatile
 8014962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014966:	f383 8811 	msr	BASEPRI, r3
 801496a:	f3bf 8f6f 	isb	sy
 801496e:	f3bf 8f4f 	dsb	sy
 8014972:	603b      	str	r3, [r7, #0]
}
 8014974:	bf00      	nop
 8014976:	e7fe      	b.n	8014976 <xTaskIncrementTick+0x46>
 8014978:	4b45      	ldr	r3, [pc, #276]	; (8014a90 <xTaskIncrementTick+0x160>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	60fb      	str	r3, [r7, #12]
 801497e:	4b45      	ldr	r3, [pc, #276]	; (8014a94 <xTaskIncrementTick+0x164>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4a43      	ldr	r2, [pc, #268]	; (8014a90 <xTaskIncrementTick+0x160>)
 8014984:	6013      	str	r3, [r2, #0]
 8014986:	4a43      	ldr	r2, [pc, #268]	; (8014a94 <xTaskIncrementTick+0x164>)
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	6013      	str	r3, [r2, #0]
 801498c:	4b42      	ldr	r3, [pc, #264]	; (8014a98 <xTaskIncrementTick+0x168>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	3301      	adds	r3, #1
 8014992:	4a41      	ldr	r2, [pc, #260]	; (8014a98 <xTaskIncrementTick+0x168>)
 8014994:	6013      	str	r3, [r2, #0]
 8014996:	f000 fb85 	bl	80150a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801499a:	4b40      	ldr	r3, [pc, #256]	; (8014a9c <xTaskIncrementTick+0x16c>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	693a      	ldr	r2, [r7, #16]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d349      	bcc.n	8014a38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149a4:	4b3a      	ldr	r3, [pc, #232]	; (8014a90 <xTaskIncrementTick+0x160>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d104      	bne.n	80149b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149ae:	4b3b      	ldr	r3, [pc, #236]	; (8014a9c <xTaskIncrementTick+0x16c>)
 80149b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149b4:	601a      	str	r2, [r3, #0]
					break;
 80149b6:	e03f      	b.n	8014a38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149b8:	4b35      	ldr	r3, [pc, #212]	; (8014a90 <xTaskIncrementTick+0x160>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80149c8:	693a      	ldr	r2, [r7, #16]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d203      	bcs.n	80149d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149d0:	4a32      	ldr	r2, [pc, #200]	; (8014a9c <xTaskIncrementTick+0x16c>)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149d6:	e02f      	b.n	8014a38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	3304      	adds	r3, #4
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fe ff99 	bl	8013914 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d004      	beq.n	80149f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	3318      	adds	r3, #24
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7fe ff90 	bl	8013914 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149f8:	4b29      	ldr	r3, [pc, #164]	; (8014aa0 <xTaskIncrementTick+0x170>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d903      	bls.n	8014a08 <xTaskIncrementTick+0xd8>
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	4a26      	ldr	r2, [pc, #152]	; (8014aa0 <xTaskIncrementTick+0x170>)
 8014a06:	6013      	str	r3, [r2, #0]
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	4413      	add	r3, r2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	4a23      	ldr	r2, [pc, #140]	; (8014aa4 <xTaskIncrementTick+0x174>)
 8014a16:	441a      	add	r2, r3
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	3304      	adds	r3, #4
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	4610      	mov	r0, r2
 8014a20:	f7fe ff1b 	bl	801385a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a28:	4b1f      	ldr	r3, [pc, #124]	; (8014aa8 <xTaskIncrementTick+0x178>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d3b8      	bcc.n	80149a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a32:	2301      	movs	r3, #1
 8014a34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a36:	e7b5      	b.n	80149a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a38:	4b1b      	ldr	r3, [pc, #108]	; (8014aa8 <xTaskIncrementTick+0x178>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a3e:	4919      	ldr	r1, [pc, #100]	; (8014aa4 <xTaskIncrementTick+0x174>)
 8014a40:	4613      	mov	r3, r2
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	4413      	add	r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	440b      	add	r3, r1
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d901      	bls.n	8014a54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014a50:	2301      	movs	r3, #1
 8014a52:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014a54:	4b15      	ldr	r3, [pc, #84]	; (8014aac <xTaskIncrementTick+0x17c>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d101      	bne.n	8014a60 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014a5c:	f7ec f97c 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a60:	4b13      	ldr	r3, [pc, #76]	; (8014ab0 <xTaskIncrementTick+0x180>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d009      	beq.n	8014a7c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	617b      	str	r3, [r7, #20]
 8014a6c:	e006      	b.n	8014a7c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a6e:	4b0f      	ldr	r3, [pc, #60]	; (8014aac <xTaskIncrementTick+0x17c>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	3301      	adds	r3, #1
 8014a74:	4a0d      	ldr	r2, [pc, #52]	; (8014aac <xTaskIncrementTick+0x17c>)
 8014a76:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014a78:	f7ec f96e 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014a7c:	697b      	ldr	r3, [r7, #20]
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3718      	adds	r7, #24
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	240029c8 	.word	0x240029c8
 8014a8c:	240029a4 	.word	0x240029a4
 8014a90:	24002958 	.word	0x24002958
 8014a94:	2400295c 	.word	0x2400295c
 8014a98:	240029b8 	.word	0x240029b8
 8014a9c:	240029c0 	.word	0x240029c0
 8014aa0:	240029a8 	.word	0x240029a8
 8014aa4:	240024d0 	.word	0x240024d0
 8014aa8:	240024cc 	.word	0x240024cc
 8014aac:	240029b0 	.word	0x240029b0
 8014ab0:	240029b4 	.word	0x240029b4

08014ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014aba:	4b2f      	ldr	r3, [pc, #188]	; (8014b78 <vTaskSwitchContext+0xc4>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d003      	beq.n	8014aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ac2:	4b2e      	ldr	r3, [pc, #184]	; (8014b7c <vTaskSwitchContext+0xc8>)
 8014ac4:	2201      	movs	r2, #1
 8014ac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ac8:	e052      	b.n	8014b70 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8014aca:	4b2c      	ldr	r3, [pc, #176]	; (8014b7c <vTaskSwitchContext+0xc8>)
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014ad0:	4b2b      	ldr	r3, [pc, #172]	; (8014b80 <vTaskSwitchContext+0xcc>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	4b2a      	ldr	r3, [pc, #168]	; (8014b80 <vTaskSwitchContext+0xcc>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d808      	bhi.n	8014af2 <vTaskSwitchContext+0x3e>
 8014ae0:	4b27      	ldr	r3, [pc, #156]	; (8014b80 <vTaskSwitchContext+0xcc>)
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	4b26      	ldr	r3, [pc, #152]	; (8014b80 <vTaskSwitchContext+0xcc>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	3334      	adds	r3, #52	; 0x34
 8014aea:	4619      	mov	r1, r3
 8014aec:	4610      	mov	r0, r2
 8014aee:	f7ec f941 	bl	8000d74 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014af2:	4b24      	ldr	r3, [pc, #144]	; (8014b84 <vTaskSwitchContext+0xd0>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	60fb      	str	r3, [r7, #12]
 8014af8:	e010      	b.n	8014b1c <vTaskSwitchContext+0x68>
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d10a      	bne.n	8014b16 <vTaskSwitchContext+0x62>
	__asm volatile
 8014b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b04:	f383 8811 	msr	BASEPRI, r3
 8014b08:	f3bf 8f6f 	isb	sy
 8014b0c:	f3bf 8f4f 	dsb	sy
 8014b10:	607b      	str	r3, [r7, #4]
}
 8014b12:	bf00      	nop
 8014b14:	e7fe      	b.n	8014b14 <vTaskSwitchContext+0x60>
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	3b01      	subs	r3, #1
 8014b1a:	60fb      	str	r3, [r7, #12]
 8014b1c:	491a      	ldr	r1, [pc, #104]	; (8014b88 <vTaskSwitchContext+0xd4>)
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	4613      	mov	r3, r2
 8014b22:	009b      	lsls	r3, r3, #2
 8014b24:	4413      	add	r3, r2
 8014b26:	009b      	lsls	r3, r3, #2
 8014b28:	440b      	add	r3, r1
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d0e4      	beq.n	8014afa <vTaskSwitchContext+0x46>
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	4613      	mov	r3, r2
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	4413      	add	r3, r2
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	4a13      	ldr	r2, [pc, #76]	; (8014b88 <vTaskSwitchContext+0xd4>)
 8014b3c:	4413      	add	r3, r2
 8014b3e:	60bb      	str	r3, [r7, #8]
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	685a      	ldr	r2, [r3, #4]
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	605a      	str	r2, [r3, #4]
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	685a      	ldr	r2, [r3, #4]
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	3308      	adds	r3, #8
 8014b52:	429a      	cmp	r2, r3
 8014b54:	d104      	bne.n	8014b60 <vTaskSwitchContext+0xac>
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	685a      	ldr	r2, [r3, #4]
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	605a      	str	r2, [r3, #4]
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	4a06      	ldr	r2, [pc, #24]	; (8014b80 <vTaskSwitchContext+0xcc>)
 8014b68:	6013      	str	r3, [r2, #0]
 8014b6a:	4a06      	ldr	r2, [pc, #24]	; (8014b84 <vTaskSwitchContext+0xd0>)
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	6013      	str	r3, [r2, #0]
}
 8014b70:	bf00      	nop
 8014b72:	3710      	adds	r7, #16
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	240029c8 	.word	0x240029c8
 8014b7c:	240029b4 	.word	0x240029b4
 8014b80:	240024cc 	.word	0x240024cc
 8014b84:	240029a8 	.word	0x240029a8
 8014b88:	240024d0 	.word	0x240024d0

08014b8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d10a      	bne.n	8014bb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba0:	f383 8811 	msr	BASEPRI, r3
 8014ba4:	f3bf 8f6f 	isb	sy
 8014ba8:	f3bf 8f4f 	dsb	sy
 8014bac:	60fb      	str	r3, [r7, #12]
}
 8014bae:	bf00      	nop
 8014bb0:	e7fe      	b.n	8014bb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bb2:	4b07      	ldr	r3, [pc, #28]	; (8014bd0 <vTaskPlaceOnEventList+0x44>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	3318      	adds	r3, #24
 8014bb8:	4619      	mov	r1, r3
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f7fe fe71 	bl	80138a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bc0:	2101      	movs	r1, #1
 8014bc2:	6838      	ldr	r0, [r7, #0]
 8014bc4:	f000 fb32 	bl	801522c <prvAddCurrentTaskToDelayedList>
}
 8014bc8:	bf00      	nop
 8014bca:	3710      	adds	r7, #16
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	240024cc 	.word	0x240024cc

08014bd4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b086      	sub	sp, #24
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d10a      	bne.n	8014bfc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	617b      	str	r3, [r7, #20]
}
 8014bf8:	bf00      	nop
 8014bfa:	e7fe      	b.n	8014bfa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014bfc:	4b11      	ldr	r3, [pc, #68]	; (8014c44 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10a      	bne.n	8014c1a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c08:	f383 8811 	msr	BASEPRI, r3
 8014c0c:	f3bf 8f6f 	isb	sy
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	613b      	str	r3, [r7, #16]
}
 8014c16:	bf00      	nop
 8014c18:	e7fe      	b.n	8014c18 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014c1a:	4b0b      	ldr	r3, [pc, #44]	; (8014c48 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	68ba      	ldr	r2, [r7, #8]
 8014c20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014c24:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c26:	4b08      	ldr	r3, [pc, #32]	; (8014c48 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	3318      	adds	r3, #24
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	f7fe fe13 	bl	801385a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c34:	2101      	movs	r1, #1
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 faf8 	bl	801522c <prvAddCurrentTaskToDelayedList>
}
 8014c3c:	bf00      	nop
 8014c3e:	3718      	adds	r7, #24
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	240029c8 	.word	0x240029c8
 8014c48:	240024cc 	.word	0x240024cc

08014c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b086      	sub	sp, #24
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d10a      	bne.n	8014c74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c62:	f383 8811 	msr	BASEPRI, r3
 8014c66:	f3bf 8f6f 	isb	sy
 8014c6a:	f3bf 8f4f 	dsb	sy
 8014c6e:	617b      	str	r3, [r7, #20]
}
 8014c70:	bf00      	nop
 8014c72:	e7fe      	b.n	8014c72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c74:	4b0a      	ldr	r3, [pc, #40]	; (8014ca0 <vTaskPlaceOnEventListRestricted+0x54>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	3318      	adds	r3, #24
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	f7fe fdec 	bl	801385a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d002      	beq.n	8014c8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014c8e:	6879      	ldr	r1, [r7, #4]
 8014c90:	68b8      	ldr	r0, [r7, #8]
 8014c92:	f000 facb 	bl	801522c <prvAddCurrentTaskToDelayedList>
	}
 8014c96:	bf00      	nop
 8014c98:	3718      	adds	r7, #24
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	240024cc 	.word	0x240024cc

08014ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b086      	sub	sp, #24
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d10a      	bne.n	8014cd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cbe:	f383 8811 	msr	BASEPRI, r3
 8014cc2:	f3bf 8f6f 	isb	sy
 8014cc6:	f3bf 8f4f 	dsb	sy
 8014cca:	60fb      	str	r3, [r7, #12]
}
 8014ccc:	bf00      	nop
 8014cce:	e7fe      	b.n	8014cce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	3318      	adds	r3, #24
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7fe fe1d 	bl	8013914 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cda:	4b1e      	ldr	r3, [pc, #120]	; (8014d54 <xTaskRemoveFromEventList+0xb0>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d11d      	bne.n	8014d1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	3304      	adds	r3, #4
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fe fe14 	bl	8013914 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cf0:	4b19      	ldr	r3, [pc, #100]	; (8014d58 <xTaskRemoveFromEventList+0xb4>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d903      	bls.n	8014d00 <xTaskRemoveFromEventList+0x5c>
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cfc:	4a16      	ldr	r2, [pc, #88]	; (8014d58 <xTaskRemoveFromEventList+0xb4>)
 8014cfe:	6013      	str	r3, [r2, #0]
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d04:	4613      	mov	r3, r2
 8014d06:	009b      	lsls	r3, r3, #2
 8014d08:	4413      	add	r3, r2
 8014d0a:	009b      	lsls	r3, r3, #2
 8014d0c:	4a13      	ldr	r2, [pc, #76]	; (8014d5c <xTaskRemoveFromEventList+0xb8>)
 8014d0e:	441a      	add	r2, r3
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	3304      	adds	r3, #4
 8014d14:	4619      	mov	r1, r3
 8014d16:	4610      	mov	r0, r2
 8014d18:	f7fe fd9f 	bl	801385a <vListInsertEnd>
 8014d1c:	e005      	b.n	8014d2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	3318      	adds	r3, #24
 8014d22:	4619      	mov	r1, r3
 8014d24:	480e      	ldr	r0, [pc, #56]	; (8014d60 <xTaskRemoveFromEventList+0xbc>)
 8014d26:	f7fe fd98 	bl	801385a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d2e:	4b0d      	ldr	r3, [pc, #52]	; (8014d64 <xTaskRemoveFromEventList+0xc0>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d905      	bls.n	8014d44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d3c:	4b0a      	ldr	r3, [pc, #40]	; (8014d68 <xTaskRemoveFromEventList+0xc4>)
 8014d3e:	2201      	movs	r2, #1
 8014d40:	601a      	str	r2, [r3, #0]
 8014d42:	e001      	b.n	8014d48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014d44:	2300      	movs	r3, #0
 8014d46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d48:	697b      	ldr	r3, [r7, #20]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3718      	adds	r7, #24
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	240029c8 	.word	0x240029c8
 8014d58:	240029a8 	.word	0x240029a8
 8014d5c:	240024d0 	.word	0x240024d0
 8014d60:	24002960 	.word	0x24002960
 8014d64:	240024cc 	.word	0x240024cc
 8014d68:	240029b4 	.word	0x240029b4

08014d6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b086      	sub	sp, #24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014d76:	4b29      	ldr	r3, [pc, #164]	; (8014e1c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d10a      	bne.n	8014d94 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d82:	f383 8811 	msr	BASEPRI, r3
 8014d86:	f3bf 8f6f 	isb	sy
 8014d8a:	f3bf 8f4f 	dsb	sy
 8014d8e:	613b      	str	r3, [r7, #16]
}
 8014d90:	bf00      	nop
 8014d92:	e7fe      	b.n	8014d92 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d10a      	bne.n	8014dc0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dae:	f383 8811 	msr	BASEPRI, r3
 8014db2:	f3bf 8f6f 	isb	sy
 8014db6:	f3bf 8f4f 	dsb	sy
 8014dba:	60fb      	str	r3, [r7, #12]
}
 8014dbc:	bf00      	nop
 8014dbe:	e7fe      	b.n	8014dbe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f7fe fda7 	bl	8013914 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	3304      	adds	r3, #4
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fe fda2 	bl	8013914 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dd4:	4b12      	ldr	r3, [pc, #72]	; (8014e20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d903      	bls.n	8014de4 <vTaskRemoveFromUnorderedEventList+0x78>
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014de0:	4a0f      	ldr	r2, [pc, #60]	; (8014e20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014de2:	6013      	str	r3, [r2, #0]
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014de8:	4613      	mov	r3, r2
 8014dea:	009b      	lsls	r3, r3, #2
 8014dec:	4413      	add	r3, r2
 8014dee:	009b      	lsls	r3, r3, #2
 8014df0:	4a0c      	ldr	r2, [pc, #48]	; (8014e24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014df2:	441a      	add	r2, r3
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	3304      	adds	r3, #4
 8014df8:	4619      	mov	r1, r3
 8014dfa:	4610      	mov	r0, r2
 8014dfc:	f7fe fd2d 	bl	801385a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e04:	4b08      	ldr	r3, [pc, #32]	; (8014e28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	d902      	bls.n	8014e14 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014e0e:	4b07      	ldr	r3, [pc, #28]	; (8014e2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014e10:	2201      	movs	r2, #1
 8014e12:	601a      	str	r2, [r3, #0]
	}
}
 8014e14:	bf00      	nop
 8014e16:	3718      	adds	r7, #24
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}
 8014e1c:	240029c8 	.word	0x240029c8
 8014e20:	240029a8 	.word	0x240029a8
 8014e24:	240024d0 	.word	0x240024d0
 8014e28:	240024cc 	.word	0x240024cc
 8014e2c:	240029b4 	.word	0x240029b4

08014e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014e38:	4b06      	ldr	r3, [pc, #24]	; (8014e54 <vTaskInternalSetTimeOutState+0x24>)
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e40:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <vTaskInternalSetTimeOutState+0x28>)
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	605a      	str	r2, [r3, #4]
}
 8014e48:	bf00      	nop
 8014e4a:	370c      	adds	r7, #12
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr
 8014e54:	240029b8 	.word	0x240029b8
 8014e58:	240029a4 	.word	0x240029a4

08014e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b088      	sub	sp, #32
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d10a      	bne.n	8014e82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e70:	f383 8811 	msr	BASEPRI, r3
 8014e74:	f3bf 8f6f 	isb	sy
 8014e78:	f3bf 8f4f 	dsb	sy
 8014e7c:	613b      	str	r3, [r7, #16]
}
 8014e7e:	bf00      	nop
 8014e80:	e7fe      	b.n	8014e80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d10a      	bne.n	8014e9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8c:	f383 8811 	msr	BASEPRI, r3
 8014e90:	f3bf 8f6f 	isb	sy
 8014e94:	f3bf 8f4f 	dsb	sy
 8014e98:	60fb      	str	r3, [r7, #12]
}
 8014e9a:	bf00      	nop
 8014e9c:	e7fe      	b.n	8014e9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014e9e:	f000 feb1 	bl	8015c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014ea2:	4b1d      	ldr	r3, [pc, #116]	; (8014f18 <xTaskCheckForTimeOut+0xbc>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	69ba      	ldr	r2, [r7, #24]
 8014eae:	1ad3      	subs	r3, r2, r3
 8014eb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014eba:	d102      	bne.n	8014ec2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	61fb      	str	r3, [r7, #28]
 8014ec0:	e023      	b.n	8014f0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	4b15      	ldr	r3, [pc, #84]	; (8014f1c <xTaskCheckForTimeOut+0xc0>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d007      	beq.n	8014ede <xTaskCheckForTimeOut+0x82>
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	69ba      	ldr	r2, [r7, #24]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d302      	bcc.n	8014ede <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014ed8:	2301      	movs	r3, #1
 8014eda:	61fb      	str	r3, [r7, #28]
 8014edc:	e015      	b.n	8014f0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	697a      	ldr	r2, [r7, #20]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d20b      	bcs.n	8014f00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	1ad2      	subs	r2, r2, r3
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7ff ff9b 	bl	8014e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014efa:	2300      	movs	r3, #0
 8014efc:	61fb      	str	r3, [r7, #28]
 8014efe:	e004      	b.n	8014f0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	2200      	movs	r2, #0
 8014f04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014f06:	2301      	movs	r3, #1
 8014f08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014f0a:	f000 feab 	bl	8015c64 <vPortExitCritical>

	return xReturn;
 8014f0e:	69fb      	ldr	r3, [r7, #28]
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	3720      	adds	r7, #32
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	240029a4 	.word	0x240029a4
 8014f1c:	240029b8 	.word	0x240029b8

08014f20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014f20:	b480      	push	{r7}
 8014f22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f24:	4b03      	ldr	r3, [pc, #12]	; (8014f34 <vTaskMissedYield+0x14>)
 8014f26:	2201      	movs	r2, #1
 8014f28:	601a      	str	r2, [r3, #0]
}
 8014f2a:	bf00      	nop
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f32:	4770      	bx	lr
 8014f34:	240029b4 	.word	0x240029b4

08014f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014f40:	f000 f852 	bl	8014fe8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014f44:	4b06      	ldr	r3, [pc, #24]	; (8014f60 <prvIdleTask+0x28>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d9f9      	bls.n	8014f40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014f4c:	4b05      	ldr	r3, [pc, #20]	; (8014f64 <prvIdleTask+0x2c>)
 8014f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f52:	601a      	str	r2, [r3, #0]
 8014f54:	f3bf 8f4f 	dsb	sy
 8014f58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014f5c:	e7f0      	b.n	8014f40 <prvIdleTask+0x8>
 8014f5e:	bf00      	nop
 8014f60:	240024d0 	.word	0x240024d0
 8014f64:	e000ed04 	.word	0xe000ed04

08014f68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f6e:	2300      	movs	r3, #0
 8014f70:	607b      	str	r3, [r7, #4]
 8014f72:	e00c      	b.n	8014f8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	4613      	mov	r3, r2
 8014f78:	009b      	lsls	r3, r3, #2
 8014f7a:	4413      	add	r3, r2
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	4a12      	ldr	r2, [pc, #72]	; (8014fc8 <prvInitialiseTaskLists+0x60>)
 8014f80:	4413      	add	r3, r2
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7fe fc3c 	bl	8013800 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	607b      	str	r3, [r7, #4]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b37      	cmp	r3, #55	; 0x37
 8014f92:	d9ef      	bls.n	8014f74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f94:	480d      	ldr	r0, [pc, #52]	; (8014fcc <prvInitialiseTaskLists+0x64>)
 8014f96:	f7fe fc33 	bl	8013800 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f9a:	480d      	ldr	r0, [pc, #52]	; (8014fd0 <prvInitialiseTaskLists+0x68>)
 8014f9c:	f7fe fc30 	bl	8013800 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014fa0:	480c      	ldr	r0, [pc, #48]	; (8014fd4 <prvInitialiseTaskLists+0x6c>)
 8014fa2:	f7fe fc2d 	bl	8013800 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014fa6:	480c      	ldr	r0, [pc, #48]	; (8014fd8 <prvInitialiseTaskLists+0x70>)
 8014fa8:	f7fe fc2a 	bl	8013800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014fac:	480b      	ldr	r0, [pc, #44]	; (8014fdc <prvInitialiseTaskLists+0x74>)
 8014fae:	f7fe fc27 	bl	8013800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014fb2:	4b0b      	ldr	r3, [pc, #44]	; (8014fe0 <prvInitialiseTaskLists+0x78>)
 8014fb4:	4a05      	ldr	r2, [pc, #20]	; (8014fcc <prvInitialiseTaskLists+0x64>)
 8014fb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014fb8:	4b0a      	ldr	r3, [pc, #40]	; (8014fe4 <prvInitialiseTaskLists+0x7c>)
 8014fba:	4a05      	ldr	r2, [pc, #20]	; (8014fd0 <prvInitialiseTaskLists+0x68>)
 8014fbc:	601a      	str	r2, [r3, #0]
}
 8014fbe:	bf00      	nop
 8014fc0:	3708      	adds	r7, #8
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	240024d0 	.word	0x240024d0
 8014fcc:	24002930 	.word	0x24002930
 8014fd0:	24002944 	.word	0x24002944
 8014fd4:	24002960 	.word	0x24002960
 8014fd8:	24002974 	.word	0x24002974
 8014fdc:	2400298c 	.word	0x2400298c
 8014fe0:	24002958 	.word	0x24002958
 8014fe4:	2400295c 	.word	0x2400295c

08014fe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fee:	e019      	b.n	8015024 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014ff0:	f000 fe08 	bl	8015c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ff4:	4b10      	ldr	r3, [pc, #64]	; (8015038 <prvCheckTasksWaitingTermination+0x50>)
 8014ff6:	68db      	ldr	r3, [r3, #12]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	3304      	adds	r3, #4
 8015000:	4618      	mov	r0, r3
 8015002:	f7fe fc87 	bl	8013914 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015006:	4b0d      	ldr	r3, [pc, #52]	; (801503c <prvCheckTasksWaitingTermination+0x54>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	3b01      	subs	r3, #1
 801500c:	4a0b      	ldr	r2, [pc, #44]	; (801503c <prvCheckTasksWaitingTermination+0x54>)
 801500e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015010:	4b0b      	ldr	r3, [pc, #44]	; (8015040 <prvCheckTasksWaitingTermination+0x58>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	3b01      	subs	r3, #1
 8015016:	4a0a      	ldr	r2, [pc, #40]	; (8015040 <prvCheckTasksWaitingTermination+0x58>)
 8015018:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801501a:	f000 fe23 	bl	8015c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 f810 	bl	8015044 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015024:	4b06      	ldr	r3, [pc, #24]	; (8015040 <prvCheckTasksWaitingTermination+0x58>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d1e1      	bne.n	8014ff0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801502c:	bf00      	nop
 801502e:	bf00      	nop
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	24002974 	.word	0x24002974
 801503c:	240029a0 	.word	0x240029a0
 8015040:	24002988 	.word	0x24002988

08015044 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015052:	2b00      	cmp	r3, #0
 8015054:	d108      	bne.n	8015068 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801505a:	4618      	mov	r0, r3
 801505c:	f000 ffc0 	bl	8015fe0 <vPortFree>
				vPortFree( pxTCB );
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f000 ffbd 	bl	8015fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015066:	e018      	b.n	801509a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801506e:	2b01      	cmp	r3, #1
 8015070:	d103      	bne.n	801507a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 ffb4 	bl	8015fe0 <vPortFree>
	}
 8015078:	e00f      	b.n	801509a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015080:	2b02      	cmp	r3, #2
 8015082:	d00a      	beq.n	801509a <prvDeleteTCB+0x56>
	__asm volatile
 8015084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015088:	f383 8811 	msr	BASEPRI, r3
 801508c:	f3bf 8f6f 	isb	sy
 8015090:	f3bf 8f4f 	dsb	sy
 8015094:	60fb      	str	r3, [r7, #12]
}
 8015096:	bf00      	nop
 8015098:	e7fe      	b.n	8015098 <prvDeleteTCB+0x54>
	}
 801509a:	bf00      	nop
 801509c:	3710      	adds	r7, #16
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
	...

080150a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80150a4:	b480      	push	{r7}
 80150a6:	b083      	sub	sp, #12
 80150a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80150aa:	4b0c      	ldr	r3, [pc, #48]	; (80150dc <prvResetNextTaskUnblockTime+0x38>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d104      	bne.n	80150be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80150b4:	4b0a      	ldr	r3, [pc, #40]	; (80150e0 <prvResetNextTaskUnblockTime+0x3c>)
 80150b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80150bc:	e008      	b.n	80150d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150be:	4b07      	ldr	r3, [pc, #28]	; (80150dc <prvResetNextTaskUnblockTime+0x38>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	68db      	ldr	r3, [r3, #12]
 80150c4:	68db      	ldr	r3, [r3, #12]
 80150c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	685b      	ldr	r3, [r3, #4]
 80150cc:	4a04      	ldr	r2, [pc, #16]	; (80150e0 <prvResetNextTaskUnblockTime+0x3c>)
 80150ce:	6013      	str	r3, [r2, #0]
}
 80150d0:	bf00      	nop
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr
 80150dc:	24002958 	.word	0x24002958
 80150e0:	240029c0 	.word	0x240029c0

080150e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80150e4:	b480      	push	{r7}
 80150e6:	b083      	sub	sp, #12
 80150e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80150ea:	4b0b      	ldr	r3, [pc, #44]	; (8015118 <xTaskGetSchedulerState+0x34>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d102      	bne.n	80150f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80150f2:	2301      	movs	r3, #1
 80150f4:	607b      	str	r3, [r7, #4]
 80150f6:	e008      	b.n	801510a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150f8:	4b08      	ldr	r3, [pc, #32]	; (801511c <xTaskGetSchedulerState+0x38>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d102      	bne.n	8015106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015100:	2302      	movs	r3, #2
 8015102:	607b      	str	r3, [r7, #4]
 8015104:	e001      	b.n	801510a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015106:	2300      	movs	r3, #0
 8015108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801510a:	687b      	ldr	r3, [r7, #4]
	}
 801510c:	4618      	mov	r0, r3
 801510e:	370c      	adds	r7, #12
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr
 8015118:	240029ac 	.word	0x240029ac
 801511c:	240029c8 	.word	0x240029c8

08015120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015120:	b580      	push	{r7, lr}
 8015122:	b086      	sub	sp, #24
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801512c:	2300      	movs	r3, #0
 801512e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d056      	beq.n	80151e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015136:	4b2e      	ldr	r3, [pc, #184]	; (80151f0 <xTaskPriorityDisinherit+0xd0>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	693a      	ldr	r2, [r7, #16]
 801513c:	429a      	cmp	r2, r3
 801513e:	d00a      	beq.n	8015156 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	60fb      	str	r3, [r7, #12]
}
 8015152:	bf00      	nop
 8015154:	e7fe      	b.n	8015154 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801515a:	2b00      	cmp	r3, #0
 801515c:	d10a      	bne.n	8015174 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015162:	f383 8811 	msr	BASEPRI, r3
 8015166:	f3bf 8f6f 	isb	sy
 801516a:	f3bf 8f4f 	dsb	sy
 801516e:	60bb      	str	r3, [r7, #8]
}
 8015170:	bf00      	nop
 8015172:	e7fe      	b.n	8015172 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015178:	1e5a      	subs	r2, r3, #1
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015186:	429a      	cmp	r2, r3
 8015188:	d02c      	beq.n	80151e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801518e:	2b00      	cmp	r3, #0
 8015190:	d128      	bne.n	80151e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	3304      	adds	r3, #4
 8015196:	4618      	mov	r0, r3
 8015198:	f7fe fbbc 	bl	8013914 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b4:	4b0f      	ldr	r3, [pc, #60]	; (80151f4 <xTaskPriorityDisinherit+0xd4>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d903      	bls.n	80151c4 <xTaskPriorityDisinherit+0xa4>
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c0:	4a0c      	ldr	r2, [pc, #48]	; (80151f4 <xTaskPriorityDisinherit+0xd4>)
 80151c2:	6013      	str	r3, [r2, #0]
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151c8:	4613      	mov	r3, r2
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	4a09      	ldr	r2, [pc, #36]	; (80151f8 <xTaskPriorityDisinherit+0xd8>)
 80151d2:	441a      	add	r2, r3
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	3304      	adds	r3, #4
 80151d8:	4619      	mov	r1, r3
 80151da:	4610      	mov	r0, r2
 80151dc:	f7fe fb3d 	bl	801385a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80151e0:	2301      	movs	r3, #1
 80151e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80151e4:	697b      	ldr	r3, [r7, #20]
	}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3718      	adds	r7, #24
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	240024cc 	.word	0x240024cc
 80151f4:	240029a8 	.word	0x240029a8
 80151f8:	240024d0 	.word	0x240024d0

080151fc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80151fc:	b480      	push	{r7}
 80151fe:	b083      	sub	sp, #12
 8015200:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015202:	4b09      	ldr	r3, [pc, #36]	; (8015228 <uxTaskResetEventItemValue+0x2c>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	699b      	ldr	r3, [r3, #24]
 8015208:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801520a:	4b07      	ldr	r3, [pc, #28]	; (8015228 <uxTaskResetEventItemValue+0x2c>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015210:	4b05      	ldr	r3, [pc, #20]	; (8015228 <uxTaskResetEventItemValue+0x2c>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015218:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801521a:	687b      	ldr	r3, [r7, #4]
}
 801521c:	4618      	mov	r0, r3
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr
 8015228:	240024cc 	.word	0x240024cc

0801522c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b084      	sub	sp, #16
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015236:	4b21      	ldr	r3, [pc, #132]	; (80152bc <prvAddCurrentTaskToDelayedList+0x90>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801523c:	4b20      	ldr	r3, [pc, #128]	; (80152c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	3304      	adds	r3, #4
 8015242:	4618      	mov	r0, r3
 8015244:	f7fe fb66 	bl	8013914 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801524e:	d10a      	bne.n	8015266 <prvAddCurrentTaskToDelayedList+0x3a>
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d007      	beq.n	8015266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015256:	4b1a      	ldr	r3, [pc, #104]	; (80152c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	3304      	adds	r3, #4
 801525c:	4619      	mov	r1, r3
 801525e:	4819      	ldr	r0, [pc, #100]	; (80152c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8015260:	f7fe fafb 	bl	801385a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015264:	e026      	b.n	80152b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015266:	68fa      	ldr	r2, [r7, #12]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	4413      	add	r3, r2
 801526c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801526e:	4b14      	ldr	r3, [pc, #80]	; (80152c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	68ba      	ldr	r2, [r7, #8]
 8015274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015276:	68ba      	ldr	r2, [r7, #8]
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	429a      	cmp	r2, r3
 801527c:	d209      	bcs.n	8015292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801527e:	4b12      	ldr	r3, [pc, #72]	; (80152c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	4b0f      	ldr	r3, [pc, #60]	; (80152c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	3304      	adds	r3, #4
 8015288:	4619      	mov	r1, r3
 801528a:	4610      	mov	r0, r2
 801528c:	f7fe fb09 	bl	80138a2 <vListInsert>
}
 8015290:	e010      	b.n	80152b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015292:	4b0e      	ldr	r3, [pc, #56]	; (80152cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	4b0a      	ldr	r3, [pc, #40]	; (80152c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	3304      	adds	r3, #4
 801529c:	4619      	mov	r1, r3
 801529e:	4610      	mov	r0, r2
 80152a0:	f7fe faff 	bl	80138a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80152a4:	4b0a      	ldr	r3, [pc, #40]	; (80152d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	68ba      	ldr	r2, [r7, #8]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d202      	bcs.n	80152b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80152ae:	4a08      	ldr	r2, [pc, #32]	; (80152d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	6013      	str	r3, [r2, #0]
}
 80152b4:	bf00      	nop
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	240029a4 	.word	0x240029a4
 80152c0:	240024cc 	.word	0x240024cc
 80152c4:	2400298c 	.word	0x2400298c
 80152c8:	2400295c 	.word	0x2400295c
 80152cc:	24002958 	.word	0x24002958
 80152d0:	240029c0 	.word	0x240029c0

080152d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b08a      	sub	sp, #40	; 0x28
 80152d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80152da:	2300      	movs	r3, #0
 80152dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80152de:	f000 fb07 	bl	80158f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80152e2:	4b1c      	ldr	r3, [pc, #112]	; (8015354 <xTimerCreateTimerTask+0x80>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d021      	beq.n	801532e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80152ea:	2300      	movs	r3, #0
 80152ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80152ee:	2300      	movs	r3, #0
 80152f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80152f2:	1d3a      	adds	r2, r7, #4
 80152f4:	f107 0108 	add.w	r1, r7, #8
 80152f8:	f107 030c 	add.w	r3, r7, #12
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7fd fff9 	bl	80132f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015302:	6879      	ldr	r1, [r7, #4]
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	9202      	str	r2, [sp, #8]
 801530a:	9301      	str	r3, [sp, #4]
 801530c:	2302      	movs	r3, #2
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	2300      	movs	r3, #0
 8015312:	460a      	mov	r2, r1
 8015314:	4910      	ldr	r1, [pc, #64]	; (8015358 <xTimerCreateTimerTask+0x84>)
 8015316:	4811      	ldr	r0, [pc, #68]	; (801535c <xTimerCreateTimerTask+0x88>)
 8015318:	f7ff f812 	bl	8014340 <xTaskCreateStatic>
 801531c:	4603      	mov	r3, r0
 801531e:	4a10      	ldr	r2, [pc, #64]	; (8015360 <xTimerCreateTimerTask+0x8c>)
 8015320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015322:	4b0f      	ldr	r3, [pc, #60]	; (8015360 <xTimerCreateTimerTask+0x8c>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d001      	beq.n	801532e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801532a:	2301      	movs	r3, #1
 801532c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d10a      	bne.n	801534a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015338:	f383 8811 	msr	BASEPRI, r3
 801533c:	f3bf 8f6f 	isb	sy
 8015340:	f3bf 8f4f 	dsb	sy
 8015344:	613b      	str	r3, [r7, #16]
}
 8015346:	bf00      	nop
 8015348:	e7fe      	b.n	8015348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801534a:	697b      	ldr	r3, [r7, #20]
}
 801534c:	4618      	mov	r0, r3
 801534e:	3718      	adds	r7, #24
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	240029fc 	.word	0x240029fc
 8015358:	08016f08 	.word	0x08016f08
 801535c:	08015499 	.word	0x08015499
 8015360:	24002a00 	.word	0x24002a00

08015364 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b08a      	sub	sp, #40	; 0x28
 8015368:	af00      	add	r7, sp, #0
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
 8015370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015372:	2300      	movs	r3, #0
 8015374:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d10a      	bne.n	8015392 <xTimerGenericCommand+0x2e>
	__asm volatile
 801537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015380:	f383 8811 	msr	BASEPRI, r3
 8015384:	f3bf 8f6f 	isb	sy
 8015388:	f3bf 8f4f 	dsb	sy
 801538c:	623b      	str	r3, [r7, #32]
}
 801538e:	bf00      	nop
 8015390:	e7fe      	b.n	8015390 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015392:	4b1a      	ldr	r3, [pc, #104]	; (80153fc <xTimerGenericCommand+0x98>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d02a      	beq.n	80153f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	2b05      	cmp	r3, #5
 80153aa:	dc18      	bgt.n	80153de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80153ac:	f7ff fe9a 	bl	80150e4 <xTaskGetSchedulerState>
 80153b0:	4603      	mov	r3, r0
 80153b2:	2b02      	cmp	r3, #2
 80153b4:	d109      	bne.n	80153ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80153b6:	4b11      	ldr	r3, [pc, #68]	; (80153fc <xTimerGenericCommand+0x98>)
 80153b8:	6818      	ldr	r0, [r3, #0]
 80153ba:	f107 0110 	add.w	r1, r7, #16
 80153be:	2300      	movs	r3, #0
 80153c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153c2:	f7fe fbd5 	bl	8013b70 <xQueueGenericSend>
 80153c6:	6278      	str	r0, [r7, #36]	; 0x24
 80153c8:	e012      	b.n	80153f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80153ca:	4b0c      	ldr	r3, [pc, #48]	; (80153fc <xTimerGenericCommand+0x98>)
 80153cc:	6818      	ldr	r0, [r3, #0]
 80153ce:	f107 0110 	add.w	r1, r7, #16
 80153d2:	2300      	movs	r3, #0
 80153d4:	2200      	movs	r2, #0
 80153d6:	f7fe fbcb 	bl	8013b70 <xQueueGenericSend>
 80153da:	6278      	str	r0, [r7, #36]	; 0x24
 80153dc:	e008      	b.n	80153f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80153de:	4b07      	ldr	r3, [pc, #28]	; (80153fc <xTimerGenericCommand+0x98>)
 80153e0:	6818      	ldr	r0, [r3, #0]
 80153e2:	f107 0110 	add.w	r1, r7, #16
 80153e6:	2300      	movs	r3, #0
 80153e8:	683a      	ldr	r2, [r7, #0]
 80153ea:	f7fe fcbf 	bl	8013d6c <xQueueGenericSendFromISR>
 80153ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80153f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3728      	adds	r7, #40	; 0x28
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	240029fc 	.word	0x240029fc

08015400 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b088      	sub	sp, #32
 8015404:	af02      	add	r7, sp, #8
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801540a:	4b22      	ldr	r3, [pc, #136]	; (8015494 <prvProcessExpiredTimer+0x94>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	68db      	ldr	r3, [r3, #12]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	3304      	adds	r3, #4
 8015418:	4618      	mov	r0, r3
 801541a:	f7fe fa7b 	bl	8013914 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015424:	f003 0304 	and.w	r3, r3, #4
 8015428:	2b00      	cmp	r3, #0
 801542a:	d022      	beq.n	8015472 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	699a      	ldr	r2, [r3, #24]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	18d1      	adds	r1, r2, r3
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	683a      	ldr	r2, [r7, #0]
 8015438:	6978      	ldr	r0, [r7, #20]
 801543a:	f000 f8d1 	bl	80155e0 <prvInsertTimerInActiveList>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d01f      	beq.n	8015484 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015444:	2300      	movs	r3, #0
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	2300      	movs	r3, #0
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	2100      	movs	r1, #0
 801544e:	6978      	ldr	r0, [r7, #20]
 8015450:	f7ff ff88 	bl	8015364 <xTimerGenericCommand>
 8015454:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d113      	bne.n	8015484 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015460:	f383 8811 	msr	BASEPRI, r3
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	f3bf 8f4f 	dsb	sy
 801546c:	60fb      	str	r3, [r7, #12]
}
 801546e:	bf00      	nop
 8015470:	e7fe      	b.n	8015470 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015478:	f023 0301 	bic.w	r3, r3, #1
 801547c:	b2da      	uxtb	r2, r3
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	6a1b      	ldr	r3, [r3, #32]
 8015488:	6978      	ldr	r0, [r7, #20]
 801548a:	4798      	blx	r3
}
 801548c:	bf00      	nop
 801548e:	3718      	adds	r7, #24
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	240029f4 	.word	0x240029f4

08015498 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80154a0:	f107 0308 	add.w	r3, r7, #8
 80154a4:	4618      	mov	r0, r3
 80154a6:	f000 f857 	bl	8015558 <prvGetNextExpireTime>
 80154aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	4619      	mov	r1, r3
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f000 f803 	bl	80154bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80154b6:	f000 f8d5 	bl	8015664 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80154ba:	e7f1      	b.n	80154a0 <prvTimerTask+0x8>

080154bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80154c6:	f7ff f977 	bl	80147b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80154ca:	f107 0308 	add.w	r3, r7, #8
 80154ce:	4618      	mov	r0, r3
 80154d0:	f000 f866 	bl	80155a0 <prvSampleTimeNow>
 80154d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d130      	bne.n	801553e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d10a      	bne.n	80154f8 <prvProcessTimerOrBlockTask+0x3c>
 80154e2:	687a      	ldr	r2, [r7, #4]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d806      	bhi.n	80154f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80154ea:	f7ff f973 	bl	80147d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80154ee:	68f9      	ldr	r1, [r7, #12]
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f7ff ff85 	bl	8015400 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80154f6:	e024      	b.n	8015542 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d008      	beq.n	8015510 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80154fe:	4b13      	ldr	r3, [pc, #76]	; (801554c <prvProcessTimerOrBlockTask+0x90>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d101      	bne.n	801550c <prvProcessTimerOrBlockTask+0x50>
 8015508:	2301      	movs	r3, #1
 801550a:	e000      	b.n	801550e <prvProcessTimerOrBlockTask+0x52>
 801550c:	2300      	movs	r3, #0
 801550e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015510:	4b0f      	ldr	r3, [pc, #60]	; (8015550 <prvProcessTimerOrBlockTask+0x94>)
 8015512:	6818      	ldr	r0, [r3, #0]
 8015514:	687a      	ldr	r2, [r7, #4]
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	1ad3      	subs	r3, r2, r3
 801551a:	683a      	ldr	r2, [r7, #0]
 801551c:	4619      	mov	r1, r3
 801551e:	f7fe fedb 	bl	80142d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015522:	f7ff f957 	bl	80147d4 <xTaskResumeAll>
 8015526:	4603      	mov	r3, r0
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10a      	bne.n	8015542 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801552c:	4b09      	ldr	r3, [pc, #36]	; (8015554 <prvProcessTimerOrBlockTask+0x98>)
 801552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015532:	601a      	str	r2, [r3, #0]
 8015534:	f3bf 8f4f 	dsb	sy
 8015538:	f3bf 8f6f 	isb	sy
}
 801553c:	e001      	b.n	8015542 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801553e:	f7ff f949 	bl	80147d4 <xTaskResumeAll>
}
 8015542:	bf00      	nop
 8015544:	3710      	adds	r7, #16
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	240029f8 	.word	0x240029f8
 8015550:	240029fc 	.word	0x240029fc
 8015554:	e000ed04 	.word	0xe000ed04

08015558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015558:	b480      	push	{r7}
 801555a:	b085      	sub	sp, #20
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015560:	4b0e      	ldr	r3, [pc, #56]	; (801559c <prvGetNextExpireTime+0x44>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d101      	bne.n	801556e <prvGetNextExpireTime+0x16>
 801556a:	2201      	movs	r2, #1
 801556c:	e000      	b.n	8015570 <prvGetNextExpireTime+0x18>
 801556e:	2200      	movs	r2, #0
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d105      	bne.n	8015588 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801557c:	4b07      	ldr	r3, [pc, #28]	; (801559c <prvGetNextExpireTime+0x44>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	68db      	ldr	r3, [r3, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	60fb      	str	r3, [r7, #12]
 8015586:	e001      	b.n	801558c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015588:	2300      	movs	r3, #0
 801558a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801558c:	68fb      	ldr	r3, [r7, #12]
}
 801558e:	4618      	mov	r0, r3
 8015590:	3714      	adds	r7, #20
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	240029f4 	.word	0x240029f4

080155a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b084      	sub	sp, #16
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80155a8:	f7ff f9b2 	bl	8014910 <xTaskGetTickCount>
 80155ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80155ae:	4b0b      	ldr	r3, [pc, #44]	; (80155dc <prvSampleTimeNow+0x3c>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d205      	bcs.n	80155c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80155b8:	f000 f936 	bl	8015828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2201      	movs	r2, #1
 80155c0:	601a      	str	r2, [r3, #0]
 80155c2:	e002      	b.n	80155ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2200      	movs	r2, #0
 80155c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80155ca:	4a04      	ldr	r2, [pc, #16]	; (80155dc <prvSampleTimeNow+0x3c>)
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80155d0:	68fb      	ldr	r3, [r7, #12]
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	24002a04 	.word	0x24002a04

080155e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
 80155ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80155ee:	2300      	movs	r3, #0
 80155f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	68ba      	ldr	r2, [r7, #8]
 80155f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80155fe:	68ba      	ldr	r2, [r7, #8]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	429a      	cmp	r2, r3
 8015604:	d812      	bhi.n	801562c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	1ad2      	subs	r2, r2, r3
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	699b      	ldr	r3, [r3, #24]
 8015610:	429a      	cmp	r2, r3
 8015612:	d302      	bcc.n	801561a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015614:	2301      	movs	r3, #1
 8015616:	617b      	str	r3, [r7, #20]
 8015618:	e01b      	b.n	8015652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801561a:	4b10      	ldr	r3, [pc, #64]	; (801565c <prvInsertTimerInActiveList+0x7c>)
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	3304      	adds	r3, #4
 8015622:	4619      	mov	r1, r3
 8015624:	4610      	mov	r0, r2
 8015626:	f7fe f93c 	bl	80138a2 <vListInsert>
 801562a:	e012      	b.n	8015652 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	429a      	cmp	r2, r3
 8015632:	d206      	bcs.n	8015642 <prvInsertTimerInActiveList+0x62>
 8015634:	68ba      	ldr	r2, [r7, #8]
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	429a      	cmp	r2, r3
 801563a:	d302      	bcc.n	8015642 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801563c:	2301      	movs	r3, #1
 801563e:	617b      	str	r3, [r7, #20]
 8015640:	e007      	b.n	8015652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015642:	4b07      	ldr	r3, [pc, #28]	; (8015660 <prvInsertTimerInActiveList+0x80>)
 8015644:	681a      	ldr	r2, [r3, #0]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	3304      	adds	r3, #4
 801564a:	4619      	mov	r1, r3
 801564c:	4610      	mov	r0, r2
 801564e:	f7fe f928 	bl	80138a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015652:	697b      	ldr	r3, [r7, #20]
}
 8015654:	4618      	mov	r0, r3
 8015656:	3718      	adds	r7, #24
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	240029f8 	.word	0x240029f8
 8015660:	240029f4 	.word	0x240029f4

08015664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b08e      	sub	sp, #56	; 0x38
 8015668:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801566a:	e0ca      	b.n	8015802 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2b00      	cmp	r3, #0
 8015670:	da18      	bge.n	80156a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015672:	1d3b      	adds	r3, r7, #4
 8015674:	3304      	adds	r3, #4
 8015676:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567a:	2b00      	cmp	r3, #0
 801567c:	d10a      	bne.n	8015694 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015682:	f383 8811 	msr	BASEPRI, r3
 8015686:	f3bf 8f6f 	isb	sy
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	61fb      	str	r3, [r7, #28]
}
 8015690:	bf00      	nop
 8015692:	e7fe      	b.n	8015692 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801569a:	6850      	ldr	r0, [r2, #4]
 801569c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801569e:	6892      	ldr	r2, [r2, #8]
 80156a0:	4611      	mov	r1, r2
 80156a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	f2c0 80aa 	blt.w	8015800 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80156b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b2:	695b      	ldr	r3, [r3, #20]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d004      	beq.n	80156c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80156b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ba:	3304      	adds	r3, #4
 80156bc:	4618      	mov	r0, r3
 80156be:	f7fe f929 	bl	8013914 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80156c2:	463b      	mov	r3, r7
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7ff ff6b 	bl	80155a0 <prvSampleTimeNow>
 80156ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b09      	cmp	r3, #9
 80156d0:	f200 8097 	bhi.w	8015802 <prvProcessReceivedCommands+0x19e>
 80156d4:	a201      	add	r2, pc, #4	; (adr r2, 80156dc <prvProcessReceivedCommands+0x78>)
 80156d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156da:	bf00      	nop
 80156dc:	08015705 	.word	0x08015705
 80156e0:	08015705 	.word	0x08015705
 80156e4:	08015705 	.word	0x08015705
 80156e8:	08015779 	.word	0x08015779
 80156ec:	0801578d 	.word	0x0801578d
 80156f0:	080157d7 	.word	0x080157d7
 80156f4:	08015705 	.word	0x08015705
 80156f8:	08015705 	.word	0x08015705
 80156fc:	08015779 	.word	0x08015779
 8015700:	0801578d 	.word	0x0801578d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801570a:	f043 0301 	orr.w	r3, r3, #1
 801570e:	b2da      	uxtb	r2, r3
 8015710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015716:	68ba      	ldr	r2, [r7, #8]
 8015718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571a:	699b      	ldr	r3, [r3, #24]
 801571c:	18d1      	adds	r1, r2, r3
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015724:	f7ff ff5c 	bl	80155e0 <prvInsertTimerInActiveList>
 8015728:	4603      	mov	r3, r0
 801572a:	2b00      	cmp	r3, #0
 801572c:	d069      	beq.n	8015802 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015730:	6a1b      	ldr	r3, [r3, #32]
 8015732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015734:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801573c:	f003 0304 	and.w	r3, r3, #4
 8015740:	2b00      	cmp	r3, #0
 8015742:	d05e      	beq.n	8015802 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015744:	68ba      	ldr	r2, [r7, #8]
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	699b      	ldr	r3, [r3, #24]
 801574a:	441a      	add	r2, r3
 801574c:	2300      	movs	r3, #0
 801574e:	9300      	str	r3, [sp, #0]
 8015750:	2300      	movs	r3, #0
 8015752:	2100      	movs	r1, #0
 8015754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015756:	f7ff fe05 	bl	8015364 <xTimerGenericCommand>
 801575a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801575c:	6a3b      	ldr	r3, [r7, #32]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d14f      	bne.n	8015802 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015766:	f383 8811 	msr	BASEPRI, r3
 801576a:	f3bf 8f6f 	isb	sy
 801576e:	f3bf 8f4f 	dsb	sy
 8015772:	61bb      	str	r3, [r7, #24]
}
 8015774:	bf00      	nop
 8015776:	e7fe      	b.n	8015776 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801577e:	f023 0301 	bic.w	r3, r3, #1
 8015782:	b2da      	uxtb	r2, r3
 8015784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801578a:	e03a      	b.n	8015802 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801578e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015792:	f043 0301 	orr.w	r3, r3, #1
 8015796:	b2da      	uxtb	r2, r3
 8015798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801579e:	68ba      	ldr	r2, [r7, #8]
 80157a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80157a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a6:	699b      	ldr	r3, [r3, #24]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d10a      	bne.n	80157c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80157ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157b0:	f383 8811 	msr	BASEPRI, r3
 80157b4:	f3bf 8f6f 	isb	sy
 80157b8:	f3bf 8f4f 	dsb	sy
 80157bc:	617b      	str	r3, [r7, #20]
}
 80157be:	bf00      	nop
 80157c0:	e7fe      	b.n	80157c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80157c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c4:	699a      	ldr	r2, [r3, #24]
 80157c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c8:	18d1      	adds	r1, r2, r3
 80157ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157d0:	f7ff ff06 	bl	80155e0 <prvInsertTimerInActiveList>
					break;
 80157d4:	e015      	b.n	8015802 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80157d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157dc:	f003 0302 	and.w	r3, r3, #2
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d103      	bne.n	80157ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80157e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157e6:	f000 fbfb 	bl	8015fe0 <vPortFree>
 80157ea:	e00a      	b.n	8015802 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157f2:	f023 0301 	bic.w	r3, r3, #1
 80157f6:	b2da      	uxtb	r2, r3
 80157f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80157fe:	e000      	b.n	8015802 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015802:	4b08      	ldr	r3, [pc, #32]	; (8015824 <prvProcessReceivedCommands+0x1c0>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	1d39      	adds	r1, r7, #4
 8015808:	2200      	movs	r2, #0
 801580a:	4618      	mov	r0, r3
 801580c:	f7fe fb4a 	bl	8013ea4 <xQueueReceive>
 8015810:	4603      	mov	r3, r0
 8015812:	2b00      	cmp	r3, #0
 8015814:	f47f af2a 	bne.w	801566c <prvProcessReceivedCommands+0x8>
	}
}
 8015818:	bf00      	nop
 801581a:	bf00      	nop
 801581c:	3730      	adds	r7, #48	; 0x30
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	240029fc 	.word	0x240029fc

08015828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b088      	sub	sp, #32
 801582c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801582e:	e048      	b.n	80158c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015830:	4b2d      	ldr	r3, [pc, #180]	; (80158e8 <prvSwitchTimerLists+0xc0>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801583a:	4b2b      	ldr	r3, [pc, #172]	; (80158e8 <prvSwitchTimerLists+0xc0>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	68db      	ldr	r3, [r3, #12]
 8015842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	3304      	adds	r3, #4
 8015848:	4618      	mov	r0, r3
 801584a:	f7fe f863 	bl	8013914 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6a1b      	ldr	r3, [r3, #32]
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801585c:	f003 0304 	and.w	r3, r3, #4
 8015860:	2b00      	cmp	r3, #0
 8015862:	d02e      	beq.n	80158c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	699b      	ldr	r3, [r3, #24]
 8015868:	693a      	ldr	r2, [r7, #16]
 801586a:	4413      	add	r3, r2
 801586c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	429a      	cmp	r2, r3
 8015874:	d90e      	bls.n	8015894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	68ba      	ldr	r2, [r7, #8]
 801587a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015882:	4b19      	ldr	r3, [pc, #100]	; (80158e8 <prvSwitchTimerLists+0xc0>)
 8015884:	681a      	ldr	r2, [r3, #0]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	3304      	adds	r3, #4
 801588a:	4619      	mov	r1, r3
 801588c:	4610      	mov	r0, r2
 801588e:	f7fe f808 	bl	80138a2 <vListInsert>
 8015892:	e016      	b.n	80158c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015894:	2300      	movs	r3, #0
 8015896:	9300      	str	r3, [sp, #0]
 8015898:	2300      	movs	r3, #0
 801589a:	693a      	ldr	r2, [r7, #16]
 801589c:	2100      	movs	r1, #0
 801589e:	68f8      	ldr	r0, [r7, #12]
 80158a0:	f7ff fd60 	bl	8015364 <xTimerGenericCommand>
 80158a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d10a      	bne.n	80158c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80158ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b0:	f383 8811 	msr	BASEPRI, r3
 80158b4:	f3bf 8f6f 	isb	sy
 80158b8:	f3bf 8f4f 	dsb	sy
 80158bc:	603b      	str	r3, [r7, #0]
}
 80158be:	bf00      	nop
 80158c0:	e7fe      	b.n	80158c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80158c2:	4b09      	ldr	r3, [pc, #36]	; (80158e8 <prvSwitchTimerLists+0xc0>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d1b1      	bne.n	8015830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <prvSwitchTimerLists+0xc0>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80158d2:	4b06      	ldr	r3, [pc, #24]	; (80158ec <prvSwitchTimerLists+0xc4>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4a04      	ldr	r2, [pc, #16]	; (80158e8 <prvSwitchTimerLists+0xc0>)
 80158d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80158da:	4a04      	ldr	r2, [pc, #16]	; (80158ec <prvSwitchTimerLists+0xc4>)
 80158dc:	697b      	ldr	r3, [r7, #20]
 80158de:	6013      	str	r3, [r2, #0]
}
 80158e0:	bf00      	nop
 80158e2:	3718      	adds	r7, #24
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	240029f4 	.word	0x240029f4
 80158ec:	240029f8 	.word	0x240029f8

080158f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80158f6:	f000 f985 	bl	8015c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80158fa:	4b15      	ldr	r3, [pc, #84]	; (8015950 <prvCheckForValidListAndQueue+0x60>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d120      	bne.n	8015944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015902:	4814      	ldr	r0, [pc, #80]	; (8015954 <prvCheckForValidListAndQueue+0x64>)
 8015904:	f7fd ff7c 	bl	8013800 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015908:	4813      	ldr	r0, [pc, #76]	; (8015958 <prvCheckForValidListAndQueue+0x68>)
 801590a:	f7fd ff79 	bl	8013800 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801590e:	4b13      	ldr	r3, [pc, #76]	; (801595c <prvCheckForValidListAndQueue+0x6c>)
 8015910:	4a10      	ldr	r2, [pc, #64]	; (8015954 <prvCheckForValidListAndQueue+0x64>)
 8015912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015914:	4b12      	ldr	r3, [pc, #72]	; (8015960 <prvCheckForValidListAndQueue+0x70>)
 8015916:	4a10      	ldr	r2, [pc, #64]	; (8015958 <prvCheckForValidListAndQueue+0x68>)
 8015918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801591a:	2300      	movs	r3, #0
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	4b11      	ldr	r3, [pc, #68]	; (8015964 <prvCheckForValidListAndQueue+0x74>)
 8015920:	4a11      	ldr	r2, [pc, #68]	; (8015968 <prvCheckForValidListAndQueue+0x78>)
 8015922:	2110      	movs	r1, #16
 8015924:	200a      	movs	r0, #10
 8015926:	f7fe f887 	bl	8013a38 <xQueueGenericCreateStatic>
 801592a:	4603      	mov	r3, r0
 801592c:	4a08      	ldr	r2, [pc, #32]	; (8015950 <prvCheckForValidListAndQueue+0x60>)
 801592e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015930:	4b07      	ldr	r3, [pc, #28]	; (8015950 <prvCheckForValidListAndQueue+0x60>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d005      	beq.n	8015944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015938:	4b05      	ldr	r3, [pc, #20]	; (8015950 <prvCheckForValidListAndQueue+0x60>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	490b      	ldr	r1, [pc, #44]	; (801596c <prvCheckForValidListAndQueue+0x7c>)
 801593e:	4618      	mov	r0, r3
 8015940:	f7fe fca0 	bl	8014284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015944:	f000 f98e 	bl	8015c64 <vPortExitCritical>
}
 8015948:	bf00      	nop
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	240029fc 	.word	0x240029fc
 8015954:	240029cc 	.word	0x240029cc
 8015958:	240029e0 	.word	0x240029e0
 801595c:	240029f4 	.word	0x240029f4
 8015960:	240029f8 	.word	0x240029f8
 8015964:	24002aa8 	.word	0x24002aa8
 8015968:	24002a08 	.word	0x24002a08
 801596c:	08016f10 	.word	0x08016f10

08015970 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015970:	b580      	push	{r7, lr}
 8015972:	b08a      	sub	sp, #40	; 0x28
 8015974:	af00      	add	r7, sp, #0
 8015976:	60f8      	str	r0, [r7, #12]
 8015978:	60b9      	str	r1, [r7, #8]
 801597a:	607a      	str	r2, [r7, #4]
 801597c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801597e:	f06f 0301 	mvn.w	r3, #1
 8015982:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015990:	4b06      	ldr	r3, [pc, #24]	; (80159ac <xTimerPendFunctionCallFromISR+0x3c>)
 8015992:	6818      	ldr	r0, [r3, #0]
 8015994:	f107 0114 	add.w	r1, r7, #20
 8015998:	2300      	movs	r3, #0
 801599a:	683a      	ldr	r2, [r7, #0]
 801599c:	f7fe f9e6 	bl	8013d6c <xQueueGenericSendFromISR>
 80159a0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3728      	adds	r7, #40	; 0x28
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	240029fc 	.word	0x240029fc

080159b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80159b0:	b480      	push	{r7}
 80159b2:	b085      	sub	sp, #20
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	3b04      	subs	r3, #4
 80159c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80159c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	3b04      	subs	r3, #4
 80159ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	f023 0201 	bic.w	r2, r3, #1
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	3b04      	subs	r3, #4
 80159de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80159e0:	4a0c      	ldr	r2, [pc, #48]	; (8015a14 <pxPortInitialiseStack+0x64>)
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	3b14      	subs	r3, #20
 80159ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80159ec:	687a      	ldr	r2, [r7, #4]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	3b04      	subs	r3, #4
 80159f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	f06f 0202 	mvn.w	r2, #2
 80159fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	3b20      	subs	r3, #32
 8015a04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a06:	68fb      	ldr	r3, [r7, #12]
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3714      	adds	r7, #20
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr
 8015a14:	08015a19 	.word	0x08015a19

08015a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a22:	4b12      	ldr	r3, [pc, #72]	; (8015a6c <prvTaskExitError+0x54>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a2a:	d00a      	beq.n	8015a42 <prvTaskExitError+0x2a>
	__asm volatile
 8015a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a30:	f383 8811 	msr	BASEPRI, r3
 8015a34:	f3bf 8f6f 	isb	sy
 8015a38:	f3bf 8f4f 	dsb	sy
 8015a3c:	60fb      	str	r3, [r7, #12]
}
 8015a3e:	bf00      	nop
 8015a40:	e7fe      	b.n	8015a40 <prvTaskExitError+0x28>
	__asm volatile
 8015a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a46:	f383 8811 	msr	BASEPRI, r3
 8015a4a:	f3bf 8f6f 	isb	sy
 8015a4e:	f3bf 8f4f 	dsb	sy
 8015a52:	60bb      	str	r3, [r7, #8]
}
 8015a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015a56:	bf00      	nop
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d0fc      	beq.n	8015a58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015a5e:	bf00      	nop
 8015a60:	bf00      	nop
 8015a62:	3714      	adds	r7, #20
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr
 8015a6c:	24000094 	.word	0x24000094

08015a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015a70:	4b07      	ldr	r3, [pc, #28]	; (8015a90 <pxCurrentTCBConst2>)
 8015a72:	6819      	ldr	r1, [r3, #0]
 8015a74:	6808      	ldr	r0, [r1, #0]
 8015a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a7a:	f380 8809 	msr	PSP, r0
 8015a7e:	f3bf 8f6f 	isb	sy
 8015a82:	f04f 0000 	mov.w	r0, #0
 8015a86:	f380 8811 	msr	BASEPRI, r0
 8015a8a:	4770      	bx	lr
 8015a8c:	f3af 8000 	nop.w

08015a90 <pxCurrentTCBConst2>:
 8015a90:	240024cc 	.word	0x240024cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015a94:	bf00      	nop
 8015a96:	bf00      	nop

08015a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015a98:	4808      	ldr	r0, [pc, #32]	; (8015abc <prvPortStartFirstTask+0x24>)
 8015a9a:	6800      	ldr	r0, [r0, #0]
 8015a9c:	6800      	ldr	r0, [r0, #0]
 8015a9e:	f380 8808 	msr	MSP, r0
 8015aa2:	f04f 0000 	mov.w	r0, #0
 8015aa6:	f380 8814 	msr	CONTROL, r0
 8015aaa:	b662      	cpsie	i
 8015aac:	b661      	cpsie	f
 8015aae:	f3bf 8f4f 	dsb	sy
 8015ab2:	f3bf 8f6f 	isb	sy
 8015ab6:	df00      	svc	0
 8015ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015aba:	bf00      	nop
 8015abc:	e000ed08 	.word	0xe000ed08

08015ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b086      	sub	sp, #24
 8015ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015ac6:	4b46      	ldr	r3, [pc, #280]	; (8015be0 <xPortStartScheduler+0x120>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a46      	ldr	r2, [pc, #280]	; (8015be4 <xPortStartScheduler+0x124>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d10a      	bne.n	8015ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8015ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad4:	f383 8811 	msr	BASEPRI, r3
 8015ad8:	f3bf 8f6f 	isb	sy
 8015adc:	f3bf 8f4f 	dsb	sy
 8015ae0:	613b      	str	r3, [r7, #16]
}
 8015ae2:	bf00      	nop
 8015ae4:	e7fe      	b.n	8015ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015ae6:	4b3e      	ldr	r3, [pc, #248]	; (8015be0 <xPortStartScheduler+0x120>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	4a3f      	ldr	r2, [pc, #252]	; (8015be8 <xPortStartScheduler+0x128>)
 8015aec:	4293      	cmp	r3, r2
 8015aee:	d10a      	bne.n	8015b06 <xPortStartScheduler+0x46>
	__asm volatile
 8015af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	60fb      	str	r3, [r7, #12]
}
 8015b02:	bf00      	nop
 8015b04:	e7fe      	b.n	8015b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b06:	4b39      	ldr	r3, [pc, #228]	; (8015bec <xPortStartScheduler+0x12c>)
 8015b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	22ff      	movs	r2, #255	; 0xff
 8015b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b20:	78fb      	ldrb	r3, [r7, #3]
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b28:	b2da      	uxtb	r2, r3
 8015b2a:	4b31      	ldr	r3, [pc, #196]	; (8015bf0 <xPortStartScheduler+0x130>)
 8015b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b2e:	4b31      	ldr	r3, [pc, #196]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b30:	2207      	movs	r2, #7
 8015b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b34:	e009      	b.n	8015b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015b36:	4b2f      	ldr	r3, [pc, #188]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	3b01      	subs	r3, #1
 8015b3c:	4a2d      	ldr	r2, [pc, #180]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015b40:	78fb      	ldrb	r3, [r7, #3]
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	b2db      	uxtb	r3, r3
 8015b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b4a:	78fb      	ldrb	r3, [r7, #3]
 8015b4c:	b2db      	uxtb	r3, r3
 8015b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b52:	2b80      	cmp	r3, #128	; 0x80
 8015b54:	d0ef      	beq.n	8015b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015b56:	4b27      	ldr	r3, [pc, #156]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	f1c3 0307 	rsb	r3, r3, #7
 8015b5e:	2b04      	cmp	r3, #4
 8015b60:	d00a      	beq.n	8015b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8015b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b66:	f383 8811 	msr	BASEPRI, r3
 8015b6a:	f3bf 8f6f 	isb	sy
 8015b6e:	f3bf 8f4f 	dsb	sy
 8015b72:	60bb      	str	r3, [r7, #8]
}
 8015b74:	bf00      	nop
 8015b76:	e7fe      	b.n	8015b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015b78:	4b1e      	ldr	r3, [pc, #120]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	021b      	lsls	r3, r3, #8
 8015b7e:	4a1d      	ldr	r2, [pc, #116]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015b82:	4b1c      	ldr	r3, [pc, #112]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015b8a:	4a1a      	ldr	r2, [pc, #104]	; (8015bf4 <xPortStartScheduler+0x134>)
 8015b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015b96:	4b18      	ldr	r3, [pc, #96]	; (8015bf8 <xPortStartScheduler+0x138>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4a17      	ldr	r2, [pc, #92]	; (8015bf8 <xPortStartScheduler+0x138>)
 8015b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ba2:	4b15      	ldr	r3, [pc, #84]	; (8015bf8 <xPortStartScheduler+0x138>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	4a14      	ldr	r2, [pc, #80]	; (8015bf8 <xPortStartScheduler+0x138>)
 8015ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015bae:	f000 f8dd 	bl	8015d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015bb2:	4b12      	ldr	r3, [pc, #72]	; (8015bfc <xPortStartScheduler+0x13c>)
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015bb8:	f000 f8fc 	bl	8015db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015bbc:	4b10      	ldr	r3, [pc, #64]	; (8015c00 <xPortStartScheduler+0x140>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4a0f      	ldr	r2, [pc, #60]	; (8015c00 <xPortStartScheduler+0x140>)
 8015bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015bc8:	f7ff ff66 	bl	8015a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015bcc:	f7fe ff72 	bl	8014ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8015bd0:	f7ff ff22 	bl	8015a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015bd4:	2300      	movs	r3, #0
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3718      	adds	r7, #24
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	e000ed00 	.word	0xe000ed00
 8015be4:	410fc271 	.word	0x410fc271
 8015be8:	410fc270 	.word	0x410fc270
 8015bec:	e000e400 	.word	0xe000e400
 8015bf0:	24002af8 	.word	0x24002af8
 8015bf4:	24002afc 	.word	0x24002afc
 8015bf8:	e000ed20 	.word	0xe000ed20
 8015bfc:	24000094 	.word	0x24000094
 8015c00:	e000ef34 	.word	0xe000ef34

08015c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c04:	b480      	push	{r7}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
	__asm volatile
 8015c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c0e:	f383 8811 	msr	BASEPRI, r3
 8015c12:	f3bf 8f6f 	isb	sy
 8015c16:	f3bf 8f4f 	dsb	sy
 8015c1a:	607b      	str	r3, [r7, #4]
}
 8015c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c1e:	4b0f      	ldr	r3, [pc, #60]	; (8015c5c <vPortEnterCritical+0x58>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	3301      	adds	r3, #1
 8015c24:	4a0d      	ldr	r2, [pc, #52]	; (8015c5c <vPortEnterCritical+0x58>)
 8015c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c28:	4b0c      	ldr	r3, [pc, #48]	; (8015c5c <vPortEnterCritical+0x58>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d10f      	bne.n	8015c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c30:	4b0b      	ldr	r3, [pc, #44]	; (8015c60 <vPortEnterCritical+0x5c>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	b2db      	uxtb	r3, r3
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d00a      	beq.n	8015c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8015c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c3e:	f383 8811 	msr	BASEPRI, r3
 8015c42:	f3bf 8f6f 	isb	sy
 8015c46:	f3bf 8f4f 	dsb	sy
 8015c4a:	603b      	str	r3, [r7, #0]
}
 8015c4c:	bf00      	nop
 8015c4e:	e7fe      	b.n	8015c4e <vPortEnterCritical+0x4a>
	}
}
 8015c50:	bf00      	nop
 8015c52:	370c      	adds	r7, #12
 8015c54:	46bd      	mov	sp, r7
 8015c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5a:	4770      	bx	lr
 8015c5c:	24000094 	.word	0x24000094
 8015c60:	e000ed04 	.word	0xe000ed04

08015c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015c64:	b480      	push	{r7}
 8015c66:	b083      	sub	sp, #12
 8015c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015c6a:	4b12      	ldr	r3, [pc, #72]	; (8015cb4 <vPortExitCritical+0x50>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d10a      	bne.n	8015c88 <vPortExitCritical+0x24>
	__asm volatile
 8015c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c76:	f383 8811 	msr	BASEPRI, r3
 8015c7a:	f3bf 8f6f 	isb	sy
 8015c7e:	f3bf 8f4f 	dsb	sy
 8015c82:	607b      	str	r3, [r7, #4]
}
 8015c84:	bf00      	nop
 8015c86:	e7fe      	b.n	8015c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015c88:	4b0a      	ldr	r3, [pc, #40]	; (8015cb4 <vPortExitCritical+0x50>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	4a09      	ldr	r2, [pc, #36]	; (8015cb4 <vPortExitCritical+0x50>)
 8015c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015c92:	4b08      	ldr	r3, [pc, #32]	; (8015cb4 <vPortExitCritical+0x50>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d105      	bne.n	8015ca6 <vPortExitCritical+0x42>
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	f383 8811 	msr	BASEPRI, r3
}
 8015ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015ca6:	bf00      	nop
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	24000094 	.word	0x24000094
	...

08015cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015cc0:	f3ef 8009 	mrs	r0, PSP
 8015cc4:	f3bf 8f6f 	isb	sy
 8015cc8:	4b15      	ldr	r3, [pc, #84]	; (8015d20 <pxCurrentTCBConst>)
 8015cca:	681a      	ldr	r2, [r3, #0]
 8015ccc:	f01e 0f10 	tst.w	lr, #16
 8015cd0:	bf08      	it	eq
 8015cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cda:	6010      	str	r0, [r2, #0]
 8015cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015ce4:	f380 8811 	msr	BASEPRI, r0
 8015ce8:	f3bf 8f4f 	dsb	sy
 8015cec:	f3bf 8f6f 	isb	sy
 8015cf0:	f7fe fee0 	bl	8014ab4 <vTaskSwitchContext>
 8015cf4:	f04f 0000 	mov.w	r0, #0
 8015cf8:	f380 8811 	msr	BASEPRI, r0
 8015cfc:	bc09      	pop	{r0, r3}
 8015cfe:	6819      	ldr	r1, [r3, #0]
 8015d00:	6808      	ldr	r0, [r1, #0]
 8015d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d06:	f01e 0f10 	tst.w	lr, #16
 8015d0a:	bf08      	it	eq
 8015d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d10:	f380 8809 	msr	PSP, r0
 8015d14:	f3bf 8f6f 	isb	sy
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop
 8015d1c:	f3af 8000 	nop.w

08015d20 <pxCurrentTCBConst>:
 8015d20:	240024cc 	.word	0x240024cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d24:	bf00      	nop
 8015d26:	bf00      	nop

08015d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d32:	f383 8811 	msr	BASEPRI, r3
 8015d36:	f3bf 8f6f 	isb	sy
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	607b      	str	r3, [r7, #4]
}
 8015d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015d42:	f7fe fdf5 	bl	8014930 <xTaskIncrementTick>
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d003      	beq.n	8015d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015d4c:	4b06      	ldr	r3, [pc, #24]	; (8015d68 <xPortSysTickHandler+0x40>)
 8015d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d52:	601a      	str	r2, [r3, #0]
 8015d54:	2300      	movs	r3, #0
 8015d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	f383 8811 	msr	BASEPRI, r3
}
 8015d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015d60:	bf00      	nop
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	e000ed04 	.word	0xe000ed04

08015d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015d70:	4b0b      	ldr	r3, [pc, #44]	; (8015da0 <vPortSetupTimerInterrupt+0x34>)
 8015d72:	2200      	movs	r2, #0
 8015d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015d76:	4b0b      	ldr	r3, [pc, #44]	; (8015da4 <vPortSetupTimerInterrupt+0x38>)
 8015d78:	2200      	movs	r2, #0
 8015d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015d7c:	4b0a      	ldr	r3, [pc, #40]	; (8015da8 <vPortSetupTimerInterrupt+0x3c>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	4a0a      	ldr	r2, [pc, #40]	; (8015dac <vPortSetupTimerInterrupt+0x40>)
 8015d82:	fba2 2303 	umull	r2, r3, r2, r3
 8015d86:	099b      	lsrs	r3, r3, #6
 8015d88:	4a09      	ldr	r2, [pc, #36]	; (8015db0 <vPortSetupTimerInterrupt+0x44>)
 8015d8a:	3b01      	subs	r3, #1
 8015d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015d8e:	4b04      	ldr	r3, [pc, #16]	; (8015da0 <vPortSetupTimerInterrupt+0x34>)
 8015d90:	2207      	movs	r2, #7
 8015d92:	601a      	str	r2, [r3, #0]
}
 8015d94:	bf00      	nop
 8015d96:	46bd      	mov	sp, r7
 8015d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9c:	4770      	bx	lr
 8015d9e:	bf00      	nop
 8015da0:	e000e010 	.word	0xe000e010
 8015da4:	e000e018 	.word	0xe000e018
 8015da8:	24000084 	.word	0x24000084
 8015dac:	10624dd3 	.word	0x10624dd3
 8015db0:	e000e014 	.word	0xe000e014

08015db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015dc4 <vPortEnableVFP+0x10>
 8015db8:	6801      	ldr	r1, [r0, #0]
 8015dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015dbe:	6001      	str	r1, [r0, #0]
 8015dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015dc2:	bf00      	nop
 8015dc4:	e000ed88 	.word	0xe000ed88

08015dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015dc8:	b480      	push	{r7}
 8015dca:	b085      	sub	sp, #20
 8015dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015dce:	f3ef 8305 	mrs	r3, IPSR
 8015dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	2b0f      	cmp	r3, #15
 8015dd8:	d914      	bls.n	8015e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015dda:	4a17      	ldr	r2, [pc, #92]	; (8015e38 <vPortValidateInterruptPriority+0x70>)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	4413      	add	r3, r2
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015de4:	4b15      	ldr	r3, [pc, #84]	; (8015e3c <vPortValidateInterruptPriority+0x74>)
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	7afa      	ldrb	r2, [r7, #11]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d20a      	bcs.n	8015e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df2:	f383 8811 	msr	BASEPRI, r3
 8015df6:	f3bf 8f6f 	isb	sy
 8015dfa:	f3bf 8f4f 	dsb	sy
 8015dfe:	607b      	str	r3, [r7, #4]
}
 8015e00:	bf00      	nop
 8015e02:	e7fe      	b.n	8015e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e04:	4b0e      	ldr	r3, [pc, #56]	; (8015e40 <vPortValidateInterruptPriority+0x78>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e0c:	4b0d      	ldr	r3, [pc, #52]	; (8015e44 <vPortValidateInterruptPriority+0x7c>)
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d90a      	bls.n	8015e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e18:	f383 8811 	msr	BASEPRI, r3
 8015e1c:	f3bf 8f6f 	isb	sy
 8015e20:	f3bf 8f4f 	dsb	sy
 8015e24:	603b      	str	r3, [r7, #0]
}
 8015e26:	bf00      	nop
 8015e28:	e7fe      	b.n	8015e28 <vPortValidateInterruptPriority+0x60>
	}
 8015e2a:	bf00      	nop
 8015e2c:	3714      	adds	r7, #20
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e34:	4770      	bx	lr
 8015e36:	bf00      	nop
 8015e38:	e000e3f0 	.word	0xe000e3f0
 8015e3c:	24002af8 	.word	0x24002af8
 8015e40:	e000ed0c 	.word	0xe000ed0c
 8015e44:	24002afc 	.word	0x24002afc

08015e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b08a      	sub	sp, #40	; 0x28
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e50:	2300      	movs	r3, #0
 8015e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e54:	f7fe fcb0 	bl	80147b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e58:	4b5b      	ldr	r3, [pc, #364]	; (8015fc8 <pvPortMalloc+0x180>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d101      	bne.n	8015e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e60:	f000 f920 	bl	80160a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e64:	4b59      	ldr	r3, [pc, #356]	; (8015fcc <pvPortMalloc+0x184>)
 8015e66:	681a      	ldr	r2, [r3, #0]
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	4013      	ands	r3, r2
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f040 8093 	bne.w	8015f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d01d      	beq.n	8015eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015e78:	2208      	movs	r2, #8
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	4413      	add	r3, r2
 8015e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f003 0307 	and.w	r3, r3, #7
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d014      	beq.n	8015eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f023 0307 	bic.w	r3, r3, #7
 8015e90:	3308      	adds	r3, #8
 8015e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f003 0307 	and.w	r3, r3, #7
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d00a      	beq.n	8015eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8015e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ea2:	f383 8811 	msr	BASEPRI, r3
 8015ea6:	f3bf 8f6f 	isb	sy
 8015eaa:	f3bf 8f4f 	dsb	sy
 8015eae:	617b      	str	r3, [r7, #20]
}
 8015eb0:	bf00      	nop
 8015eb2:	e7fe      	b.n	8015eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d06e      	beq.n	8015f98 <pvPortMalloc+0x150>
 8015eba:	4b45      	ldr	r3, [pc, #276]	; (8015fd0 <pvPortMalloc+0x188>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	687a      	ldr	r2, [r7, #4]
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d869      	bhi.n	8015f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015ec4:	4b43      	ldr	r3, [pc, #268]	; (8015fd4 <pvPortMalloc+0x18c>)
 8015ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015ec8:	4b42      	ldr	r3, [pc, #264]	; (8015fd4 <pvPortMalloc+0x18c>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ece:	e004      	b.n	8015eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	d903      	bls.n	8015eec <pvPortMalloc+0xa4>
 8015ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d1f1      	bne.n	8015ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015eec:	4b36      	ldr	r3, [pc, #216]	; (8015fc8 <pvPortMalloc+0x180>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d050      	beq.n	8015f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ef6:	6a3b      	ldr	r3, [r7, #32]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	2208      	movs	r2, #8
 8015efc:	4413      	add	r3, r2
 8015efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	6a3b      	ldr	r3, [r7, #32]
 8015f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0a:	685a      	ldr	r2, [r3, #4]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	1ad2      	subs	r2, r2, r3
 8015f10:	2308      	movs	r3, #8
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	429a      	cmp	r2, r3
 8015f16:	d91f      	bls.n	8015f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f20:	69bb      	ldr	r3, [r7, #24]
 8015f22:	f003 0307 	and.w	r3, r3, #7
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d00a      	beq.n	8015f40 <pvPortMalloc+0xf8>
	__asm volatile
 8015f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f2e:	f383 8811 	msr	BASEPRI, r3
 8015f32:	f3bf 8f6f 	isb	sy
 8015f36:	f3bf 8f4f 	dsb	sy
 8015f3a:	613b      	str	r3, [r7, #16]
}
 8015f3c:	bf00      	nop
 8015f3e:	e7fe      	b.n	8015f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f42:	685a      	ldr	r2, [r3, #4]
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	1ad2      	subs	r2, r2, r3
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f52:	69b8      	ldr	r0, [r7, #24]
 8015f54:	f000 f908 	bl	8016168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f58:	4b1d      	ldr	r3, [pc, #116]	; (8015fd0 <pvPortMalloc+0x188>)
 8015f5a:	681a      	ldr	r2, [r3, #0]
 8015f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	1ad3      	subs	r3, r2, r3
 8015f62:	4a1b      	ldr	r2, [pc, #108]	; (8015fd0 <pvPortMalloc+0x188>)
 8015f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f66:	4b1a      	ldr	r3, [pc, #104]	; (8015fd0 <pvPortMalloc+0x188>)
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	4b1b      	ldr	r3, [pc, #108]	; (8015fd8 <pvPortMalloc+0x190>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d203      	bcs.n	8015f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f72:	4b17      	ldr	r3, [pc, #92]	; (8015fd0 <pvPortMalloc+0x188>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	4a18      	ldr	r2, [pc, #96]	; (8015fd8 <pvPortMalloc+0x190>)
 8015f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f7c:	685a      	ldr	r2, [r3, #4]
 8015f7e:	4b13      	ldr	r3, [pc, #76]	; (8015fcc <pvPortMalloc+0x184>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	431a      	orrs	r2, r3
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f8e:	4b13      	ldr	r3, [pc, #76]	; (8015fdc <pvPortMalloc+0x194>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	3301      	adds	r3, #1
 8015f94:	4a11      	ldr	r2, [pc, #68]	; (8015fdc <pvPortMalloc+0x194>)
 8015f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f98:	f7fe fc1c 	bl	80147d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	f003 0307 	and.w	r3, r3, #7
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d00a      	beq.n	8015fbc <pvPortMalloc+0x174>
	__asm volatile
 8015fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015faa:	f383 8811 	msr	BASEPRI, r3
 8015fae:	f3bf 8f6f 	isb	sy
 8015fb2:	f3bf 8f4f 	dsb	sy
 8015fb6:	60fb      	str	r3, [r7, #12]
}
 8015fb8:	bf00      	nop
 8015fba:	e7fe      	b.n	8015fba <pvPortMalloc+0x172>
	return pvReturn;
 8015fbc:	69fb      	ldr	r3, [r7, #28]
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3728      	adds	r7, #40	; 0x28
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}
 8015fc6:	bf00      	nop
 8015fc8:	24006708 	.word	0x24006708
 8015fcc:	2400671c 	.word	0x2400671c
 8015fd0:	2400670c 	.word	0x2400670c
 8015fd4:	24006700 	.word	0x24006700
 8015fd8:	24006710 	.word	0x24006710
 8015fdc:	24006714 	.word	0x24006714

08015fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b086      	sub	sp, #24
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d04d      	beq.n	801608e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015ff2:	2308      	movs	r3, #8
 8015ff4:	425b      	negs	r3, r3
 8015ff6:	697a      	ldr	r2, [r7, #20]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	685a      	ldr	r2, [r3, #4]
 8016004:	4b24      	ldr	r3, [pc, #144]	; (8016098 <vPortFree+0xb8>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	4013      	ands	r3, r2
 801600a:	2b00      	cmp	r3, #0
 801600c:	d10a      	bne.n	8016024 <vPortFree+0x44>
	__asm volatile
 801600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016012:	f383 8811 	msr	BASEPRI, r3
 8016016:	f3bf 8f6f 	isb	sy
 801601a:	f3bf 8f4f 	dsb	sy
 801601e:	60fb      	str	r3, [r7, #12]
}
 8016020:	bf00      	nop
 8016022:	e7fe      	b.n	8016022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d00a      	beq.n	8016042 <vPortFree+0x62>
	__asm volatile
 801602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016030:	f383 8811 	msr	BASEPRI, r3
 8016034:	f3bf 8f6f 	isb	sy
 8016038:	f3bf 8f4f 	dsb	sy
 801603c:	60bb      	str	r3, [r7, #8]
}
 801603e:	bf00      	nop
 8016040:	e7fe      	b.n	8016040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	685a      	ldr	r2, [r3, #4]
 8016046:	4b14      	ldr	r3, [pc, #80]	; (8016098 <vPortFree+0xb8>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	4013      	ands	r3, r2
 801604c:	2b00      	cmp	r3, #0
 801604e:	d01e      	beq.n	801608e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d11a      	bne.n	801608e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	685a      	ldr	r2, [r3, #4]
 801605c:	4b0e      	ldr	r3, [pc, #56]	; (8016098 <vPortFree+0xb8>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	43db      	mvns	r3, r3
 8016062:	401a      	ands	r2, r3
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016068:	f7fe fba6 	bl	80147b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	685a      	ldr	r2, [r3, #4]
 8016070:	4b0a      	ldr	r3, [pc, #40]	; (801609c <vPortFree+0xbc>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4413      	add	r3, r2
 8016076:	4a09      	ldr	r2, [pc, #36]	; (801609c <vPortFree+0xbc>)
 8016078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801607a:	6938      	ldr	r0, [r7, #16]
 801607c:	f000 f874 	bl	8016168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016080:	4b07      	ldr	r3, [pc, #28]	; (80160a0 <vPortFree+0xc0>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	3301      	adds	r3, #1
 8016086:	4a06      	ldr	r2, [pc, #24]	; (80160a0 <vPortFree+0xc0>)
 8016088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801608a:	f7fe fba3 	bl	80147d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801608e:	bf00      	nop
 8016090:	3718      	adds	r7, #24
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}
 8016096:	bf00      	nop
 8016098:	2400671c 	.word	0x2400671c
 801609c:	2400670c 	.word	0x2400670c
 80160a0:	24006718 	.word	0x24006718

080160a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80160a4:	b480      	push	{r7}
 80160a6:	b085      	sub	sp, #20
 80160a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80160aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80160ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80160b0:	4b27      	ldr	r3, [pc, #156]	; (8016150 <prvHeapInit+0xac>)
 80160b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f003 0307 	and.w	r3, r3, #7
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d00c      	beq.n	80160d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	3307      	adds	r3, #7
 80160c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	f023 0307 	bic.w	r3, r3, #7
 80160ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80160cc:	68ba      	ldr	r2, [r7, #8]
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	1ad3      	subs	r3, r2, r3
 80160d2:	4a1f      	ldr	r2, [pc, #124]	; (8016150 <prvHeapInit+0xac>)
 80160d4:	4413      	add	r3, r2
 80160d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80160dc:	4a1d      	ldr	r2, [pc, #116]	; (8016154 <prvHeapInit+0xb0>)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80160e2:	4b1c      	ldr	r3, [pc, #112]	; (8016154 <prvHeapInit+0xb0>)
 80160e4:	2200      	movs	r2, #0
 80160e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	68ba      	ldr	r2, [r7, #8]
 80160ec:	4413      	add	r3, r2
 80160ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80160f0:	2208      	movs	r2, #8
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	1a9b      	subs	r3, r3, r2
 80160f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	f023 0307 	bic.w	r3, r3, #7
 80160fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	4a15      	ldr	r2, [pc, #84]	; (8016158 <prvHeapInit+0xb4>)
 8016104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016106:	4b14      	ldr	r3, [pc, #80]	; (8016158 <prvHeapInit+0xb4>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	2200      	movs	r2, #0
 801610c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801610e:	4b12      	ldr	r3, [pc, #72]	; (8016158 <prvHeapInit+0xb4>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	2200      	movs	r2, #0
 8016114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	68fa      	ldr	r2, [r7, #12]
 801611e:	1ad2      	subs	r2, r2, r3
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016124:	4b0c      	ldr	r3, [pc, #48]	; (8016158 <prvHeapInit+0xb4>)
 8016126:	681a      	ldr	r2, [r3, #0]
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	4a0a      	ldr	r2, [pc, #40]	; (801615c <prvHeapInit+0xb8>)
 8016132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	4a09      	ldr	r2, [pc, #36]	; (8016160 <prvHeapInit+0xbc>)
 801613a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801613c:	4b09      	ldr	r3, [pc, #36]	; (8016164 <prvHeapInit+0xc0>)
 801613e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016142:	601a      	str	r2, [r3, #0]
}
 8016144:	bf00      	nop
 8016146:	3714      	adds	r7, #20
 8016148:	46bd      	mov	sp, r7
 801614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614e:	4770      	bx	lr
 8016150:	24002b00 	.word	0x24002b00
 8016154:	24006700 	.word	0x24006700
 8016158:	24006708 	.word	0x24006708
 801615c:	24006710 	.word	0x24006710
 8016160:	2400670c 	.word	0x2400670c
 8016164:	2400671c 	.word	0x2400671c

08016168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016168:	b480      	push	{r7}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016170:	4b28      	ldr	r3, [pc, #160]	; (8016214 <prvInsertBlockIntoFreeList+0xac>)
 8016172:	60fb      	str	r3, [r7, #12]
 8016174:	e002      	b.n	801617c <prvInsertBlockIntoFreeList+0x14>
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	60fb      	str	r3, [r7, #12]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	429a      	cmp	r2, r3
 8016184:	d8f7      	bhi.n	8016176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	68ba      	ldr	r2, [r7, #8]
 8016190:	4413      	add	r3, r2
 8016192:	687a      	ldr	r2, [r7, #4]
 8016194:	429a      	cmp	r2, r3
 8016196:	d108      	bne.n	80161aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	685a      	ldr	r2, [r3, #4]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	441a      	add	r2, r3
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	68ba      	ldr	r2, [r7, #8]
 80161b4:	441a      	add	r2, r3
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	d118      	bne.n	80161f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681a      	ldr	r2, [r3, #0]
 80161c2:	4b15      	ldr	r3, [pc, #84]	; (8016218 <prvInsertBlockIntoFreeList+0xb0>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d00d      	beq.n	80161e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	685a      	ldr	r2, [r3, #4]
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	441a      	add	r2, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	681a      	ldr	r2, [r3, #0]
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	601a      	str	r2, [r3, #0]
 80161e4:	e008      	b.n	80161f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161e6:	4b0c      	ldr	r3, [pc, #48]	; (8016218 <prvInsertBlockIntoFreeList+0xb0>)
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	601a      	str	r2, [r3, #0]
 80161ee:	e003      	b.n	80161f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161f8:	68fa      	ldr	r2, [r7, #12]
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d002      	beq.n	8016206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016206:	bf00      	nop
 8016208:	3714      	adds	r7, #20
 801620a:	46bd      	mov	sp, r7
 801620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016210:	4770      	bx	lr
 8016212:	bf00      	nop
 8016214:	24006700 	.word	0x24006700
 8016218:	24006708 	.word	0x24006708

0801621c <__errno>:
 801621c:	4b01      	ldr	r3, [pc, #4]	; (8016224 <__errno+0x8>)
 801621e:	6818      	ldr	r0, [r3, #0]
 8016220:	4770      	bx	lr
 8016222:	bf00      	nop
 8016224:	24000098 	.word	0x24000098

08016228 <__libc_init_array>:
 8016228:	b570      	push	{r4, r5, r6, lr}
 801622a:	4d0d      	ldr	r5, [pc, #52]	; (8016260 <__libc_init_array+0x38>)
 801622c:	4c0d      	ldr	r4, [pc, #52]	; (8016264 <__libc_init_array+0x3c>)
 801622e:	1b64      	subs	r4, r4, r5
 8016230:	10a4      	asrs	r4, r4, #2
 8016232:	2600      	movs	r6, #0
 8016234:	42a6      	cmp	r6, r4
 8016236:	d109      	bne.n	801624c <__libc_init_array+0x24>
 8016238:	4d0b      	ldr	r5, [pc, #44]	; (8016268 <__libc_init_array+0x40>)
 801623a:	4c0c      	ldr	r4, [pc, #48]	; (801626c <__libc_init_array+0x44>)
 801623c:	f000 fd2c 	bl	8016c98 <_init>
 8016240:	1b64      	subs	r4, r4, r5
 8016242:	10a4      	asrs	r4, r4, #2
 8016244:	2600      	movs	r6, #0
 8016246:	42a6      	cmp	r6, r4
 8016248:	d105      	bne.n	8016256 <__libc_init_array+0x2e>
 801624a:	bd70      	pop	{r4, r5, r6, pc}
 801624c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016250:	4798      	blx	r3
 8016252:	3601      	adds	r6, #1
 8016254:	e7ee      	b.n	8016234 <__libc_init_array+0xc>
 8016256:	f855 3b04 	ldr.w	r3, [r5], #4
 801625a:	4798      	blx	r3
 801625c:	3601      	adds	r6, #1
 801625e:	e7f2      	b.n	8016246 <__libc_init_array+0x1e>
 8016260:	08017150 	.word	0x08017150
 8016264:	08017150 	.word	0x08017150
 8016268:	08017150 	.word	0x08017150
 801626c:	08017154 	.word	0x08017154

08016270 <memcpy>:
 8016270:	440a      	add	r2, r1
 8016272:	4291      	cmp	r1, r2
 8016274:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016278:	d100      	bne.n	801627c <memcpy+0xc>
 801627a:	4770      	bx	lr
 801627c:	b510      	push	{r4, lr}
 801627e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016286:	4291      	cmp	r1, r2
 8016288:	d1f9      	bne.n	801627e <memcpy+0xe>
 801628a:	bd10      	pop	{r4, pc}

0801628c <memset>:
 801628c:	4402      	add	r2, r0
 801628e:	4603      	mov	r3, r0
 8016290:	4293      	cmp	r3, r2
 8016292:	d100      	bne.n	8016296 <memset+0xa>
 8016294:	4770      	bx	lr
 8016296:	f803 1b01 	strb.w	r1, [r3], #1
 801629a:	e7f9      	b.n	8016290 <memset+0x4>

0801629c <_puts_r>:
 801629c:	b570      	push	{r4, r5, r6, lr}
 801629e:	460e      	mov	r6, r1
 80162a0:	4605      	mov	r5, r0
 80162a2:	b118      	cbz	r0, 80162ac <_puts_r+0x10>
 80162a4:	6983      	ldr	r3, [r0, #24]
 80162a6:	b90b      	cbnz	r3, 80162ac <_puts_r+0x10>
 80162a8:	f000 fa48 	bl	801673c <__sinit>
 80162ac:	69ab      	ldr	r3, [r5, #24]
 80162ae:	68ac      	ldr	r4, [r5, #8]
 80162b0:	b913      	cbnz	r3, 80162b8 <_puts_r+0x1c>
 80162b2:	4628      	mov	r0, r5
 80162b4:	f000 fa42 	bl	801673c <__sinit>
 80162b8:	4b2c      	ldr	r3, [pc, #176]	; (801636c <_puts_r+0xd0>)
 80162ba:	429c      	cmp	r4, r3
 80162bc:	d120      	bne.n	8016300 <_puts_r+0x64>
 80162be:	686c      	ldr	r4, [r5, #4]
 80162c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162c2:	07db      	lsls	r3, r3, #31
 80162c4:	d405      	bmi.n	80162d2 <_puts_r+0x36>
 80162c6:	89a3      	ldrh	r3, [r4, #12]
 80162c8:	0598      	lsls	r0, r3, #22
 80162ca:	d402      	bmi.n	80162d2 <_puts_r+0x36>
 80162cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162ce:	f000 fad3 	bl	8016878 <__retarget_lock_acquire_recursive>
 80162d2:	89a3      	ldrh	r3, [r4, #12]
 80162d4:	0719      	lsls	r1, r3, #28
 80162d6:	d51d      	bpl.n	8016314 <_puts_r+0x78>
 80162d8:	6923      	ldr	r3, [r4, #16]
 80162da:	b1db      	cbz	r3, 8016314 <_puts_r+0x78>
 80162dc:	3e01      	subs	r6, #1
 80162de:	68a3      	ldr	r3, [r4, #8]
 80162e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80162e4:	3b01      	subs	r3, #1
 80162e6:	60a3      	str	r3, [r4, #8]
 80162e8:	bb39      	cbnz	r1, 801633a <_puts_r+0x9e>
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	da38      	bge.n	8016360 <_puts_r+0xc4>
 80162ee:	4622      	mov	r2, r4
 80162f0:	210a      	movs	r1, #10
 80162f2:	4628      	mov	r0, r5
 80162f4:	f000 f848 	bl	8016388 <__swbuf_r>
 80162f8:	3001      	adds	r0, #1
 80162fa:	d011      	beq.n	8016320 <_puts_r+0x84>
 80162fc:	250a      	movs	r5, #10
 80162fe:	e011      	b.n	8016324 <_puts_r+0x88>
 8016300:	4b1b      	ldr	r3, [pc, #108]	; (8016370 <_puts_r+0xd4>)
 8016302:	429c      	cmp	r4, r3
 8016304:	d101      	bne.n	801630a <_puts_r+0x6e>
 8016306:	68ac      	ldr	r4, [r5, #8]
 8016308:	e7da      	b.n	80162c0 <_puts_r+0x24>
 801630a:	4b1a      	ldr	r3, [pc, #104]	; (8016374 <_puts_r+0xd8>)
 801630c:	429c      	cmp	r4, r3
 801630e:	bf08      	it	eq
 8016310:	68ec      	ldreq	r4, [r5, #12]
 8016312:	e7d5      	b.n	80162c0 <_puts_r+0x24>
 8016314:	4621      	mov	r1, r4
 8016316:	4628      	mov	r0, r5
 8016318:	f000 f888 	bl	801642c <__swsetup_r>
 801631c:	2800      	cmp	r0, #0
 801631e:	d0dd      	beq.n	80162dc <_puts_r+0x40>
 8016320:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016326:	07da      	lsls	r2, r3, #31
 8016328:	d405      	bmi.n	8016336 <_puts_r+0x9a>
 801632a:	89a3      	ldrh	r3, [r4, #12]
 801632c:	059b      	lsls	r3, r3, #22
 801632e:	d402      	bmi.n	8016336 <_puts_r+0x9a>
 8016330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016332:	f000 faa2 	bl	801687a <__retarget_lock_release_recursive>
 8016336:	4628      	mov	r0, r5
 8016338:	bd70      	pop	{r4, r5, r6, pc}
 801633a:	2b00      	cmp	r3, #0
 801633c:	da04      	bge.n	8016348 <_puts_r+0xac>
 801633e:	69a2      	ldr	r2, [r4, #24]
 8016340:	429a      	cmp	r2, r3
 8016342:	dc06      	bgt.n	8016352 <_puts_r+0xb6>
 8016344:	290a      	cmp	r1, #10
 8016346:	d004      	beq.n	8016352 <_puts_r+0xb6>
 8016348:	6823      	ldr	r3, [r4, #0]
 801634a:	1c5a      	adds	r2, r3, #1
 801634c:	6022      	str	r2, [r4, #0]
 801634e:	7019      	strb	r1, [r3, #0]
 8016350:	e7c5      	b.n	80162de <_puts_r+0x42>
 8016352:	4622      	mov	r2, r4
 8016354:	4628      	mov	r0, r5
 8016356:	f000 f817 	bl	8016388 <__swbuf_r>
 801635a:	3001      	adds	r0, #1
 801635c:	d1bf      	bne.n	80162de <_puts_r+0x42>
 801635e:	e7df      	b.n	8016320 <_puts_r+0x84>
 8016360:	6823      	ldr	r3, [r4, #0]
 8016362:	250a      	movs	r5, #10
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	6022      	str	r2, [r4, #0]
 8016368:	701d      	strb	r5, [r3, #0]
 801636a:	e7db      	b.n	8016324 <_puts_r+0x88>
 801636c:	08017108 	.word	0x08017108
 8016370:	08017128 	.word	0x08017128
 8016374:	080170e8 	.word	0x080170e8

08016378 <puts>:
 8016378:	4b02      	ldr	r3, [pc, #8]	; (8016384 <puts+0xc>)
 801637a:	4601      	mov	r1, r0
 801637c:	6818      	ldr	r0, [r3, #0]
 801637e:	f7ff bf8d 	b.w	801629c <_puts_r>
 8016382:	bf00      	nop
 8016384:	24000098 	.word	0x24000098

08016388 <__swbuf_r>:
 8016388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638a:	460e      	mov	r6, r1
 801638c:	4614      	mov	r4, r2
 801638e:	4605      	mov	r5, r0
 8016390:	b118      	cbz	r0, 801639a <__swbuf_r+0x12>
 8016392:	6983      	ldr	r3, [r0, #24]
 8016394:	b90b      	cbnz	r3, 801639a <__swbuf_r+0x12>
 8016396:	f000 f9d1 	bl	801673c <__sinit>
 801639a:	4b21      	ldr	r3, [pc, #132]	; (8016420 <__swbuf_r+0x98>)
 801639c:	429c      	cmp	r4, r3
 801639e:	d12b      	bne.n	80163f8 <__swbuf_r+0x70>
 80163a0:	686c      	ldr	r4, [r5, #4]
 80163a2:	69a3      	ldr	r3, [r4, #24]
 80163a4:	60a3      	str	r3, [r4, #8]
 80163a6:	89a3      	ldrh	r3, [r4, #12]
 80163a8:	071a      	lsls	r2, r3, #28
 80163aa:	d52f      	bpl.n	801640c <__swbuf_r+0x84>
 80163ac:	6923      	ldr	r3, [r4, #16]
 80163ae:	b36b      	cbz	r3, 801640c <__swbuf_r+0x84>
 80163b0:	6923      	ldr	r3, [r4, #16]
 80163b2:	6820      	ldr	r0, [r4, #0]
 80163b4:	1ac0      	subs	r0, r0, r3
 80163b6:	6963      	ldr	r3, [r4, #20]
 80163b8:	b2f6      	uxtb	r6, r6
 80163ba:	4283      	cmp	r3, r0
 80163bc:	4637      	mov	r7, r6
 80163be:	dc04      	bgt.n	80163ca <__swbuf_r+0x42>
 80163c0:	4621      	mov	r1, r4
 80163c2:	4628      	mov	r0, r5
 80163c4:	f000 f926 	bl	8016614 <_fflush_r>
 80163c8:	bb30      	cbnz	r0, 8016418 <__swbuf_r+0x90>
 80163ca:	68a3      	ldr	r3, [r4, #8]
 80163cc:	3b01      	subs	r3, #1
 80163ce:	60a3      	str	r3, [r4, #8]
 80163d0:	6823      	ldr	r3, [r4, #0]
 80163d2:	1c5a      	adds	r2, r3, #1
 80163d4:	6022      	str	r2, [r4, #0]
 80163d6:	701e      	strb	r6, [r3, #0]
 80163d8:	6963      	ldr	r3, [r4, #20]
 80163da:	3001      	adds	r0, #1
 80163dc:	4283      	cmp	r3, r0
 80163de:	d004      	beq.n	80163ea <__swbuf_r+0x62>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	07db      	lsls	r3, r3, #31
 80163e4:	d506      	bpl.n	80163f4 <__swbuf_r+0x6c>
 80163e6:	2e0a      	cmp	r6, #10
 80163e8:	d104      	bne.n	80163f4 <__swbuf_r+0x6c>
 80163ea:	4621      	mov	r1, r4
 80163ec:	4628      	mov	r0, r5
 80163ee:	f000 f911 	bl	8016614 <_fflush_r>
 80163f2:	b988      	cbnz	r0, 8016418 <__swbuf_r+0x90>
 80163f4:	4638      	mov	r0, r7
 80163f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163f8:	4b0a      	ldr	r3, [pc, #40]	; (8016424 <__swbuf_r+0x9c>)
 80163fa:	429c      	cmp	r4, r3
 80163fc:	d101      	bne.n	8016402 <__swbuf_r+0x7a>
 80163fe:	68ac      	ldr	r4, [r5, #8]
 8016400:	e7cf      	b.n	80163a2 <__swbuf_r+0x1a>
 8016402:	4b09      	ldr	r3, [pc, #36]	; (8016428 <__swbuf_r+0xa0>)
 8016404:	429c      	cmp	r4, r3
 8016406:	bf08      	it	eq
 8016408:	68ec      	ldreq	r4, [r5, #12]
 801640a:	e7ca      	b.n	80163a2 <__swbuf_r+0x1a>
 801640c:	4621      	mov	r1, r4
 801640e:	4628      	mov	r0, r5
 8016410:	f000 f80c 	bl	801642c <__swsetup_r>
 8016414:	2800      	cmp	r0, #0
 8016416:	d0cb      	beq.n	80163b0 <__swbuf_r+0x28>
 8016418:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801641c:	e7ea      	b.n	80163f4 <__swbuf_r+0x6c>
 801641e:	bf00      	nop
 8016420:	08017108 	.word	0x08017108
 8016424:	08017128 	.word	0x08017128
 8016428:	080170e8 	.word	0x080170e8

0801642c <__swsetup_r>:
 801642c:	4b32      	ldr	r3, [pc, #200]	; (80164f8 <__swsetup_r+0xcc>)
 801642e:	b570      	push	{r4, r5, r6, lr}
 8016430:	681d      	ldr	r5, [r3, #0]
 8016432:	4606      	mov	r6, r0
 8016434:	460c      	mov	r4, r1
 8016436:	b125      	cbz	r5, 8016442 <__swsetup_r+0x16>
 8016438:	69ab      	ldr	r3, [r5, #24]
 801643a:	b913      	cbnz	r3, 8016442 <__swsetup_r+0x16>
 801643c:	4628      	mov	r0, r5
 801643e:	f000 f97d 	bl	801673c <__sinit>
 8016442:	4b2e      	ldr	r3, [pc, #184]	; (80164fc <__swsetup_r+0xd0>)
 8016444:	429c      	cmp	r4, r3
 8016446:	d10f      	bne.n	8016468 <__swsetup_r+0x3c>
 8016448:	686c      	ldr	r4, [r5, #4]
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016450:	0719      	lsls	r1, r3, #28
 8016452:	d42c      	bmi.n	80164ae <__swsetup_r+0x82>
 8016454:	06dd      	lsls	r5, r3, #27
 8016456:	d411      	bmi.n	801647c <__swsetup_r+0x50>
 8016458:	2309      	movs	r3, #9
 801645a:	6033      	str	r3, [r6, #0]
 801645c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016460:	81a3      	strh	r3, [r4, #12]
 8016462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016466:	e03e      	b.n	80164e6 <__swsetup_r+0xba>
 8016468:	4b25      	ldr	r3, [pc, #148]	; (8016500 <__swsetup_r+0xd4>)
 801646a:	429c      	cmp	r4, r3
 801646c:	d101      	bne.n	8016472 <__swsetup_r+0x46>
 801646e:	68ac      	ldr	r4, [r5, #8]
 8016470:	e7eb      	b.n	801644a <__swsetup_r+0x1e>
 8016472:	4b24      	ldr	r3, [pc, #144]	; (8016504 <__swsetup_r+0xd8>)
 8016474:	429c      	cmp	r4, r3
 8016476:	bf08      	it	eq
 8016478:	68ec      	ldreq	r4, [r5, #12]
 801647a:	e7e6      	b.n	801644a <__swsetup_r+0x1e>
 801647c:	0758      	lsls	r0, r3, #29
 801647e:	d512      	bpl.n	80164a6 <__swsetup_r+0x7a>
 8016480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016482:	b141      	cbz	r1, 8016496 <__swsetup_r+0x6a>
 8016484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016488:	4299      	cmp	r1, r3
 801648a:	d002      	beq.n	8016492 <__swsetup_r+0x66>
 801648c:	4630      	mov	r0, r6
 801648e:	f000 fa5b 	bl	8016948 <_free_r>
 8016492:	2300      	movs	r3, #0
 8016494:	6363      	str	r3, [r4, #52]	; 0x34
 8016496:	89a3      	ldrh	r3, [r4, #12]
 8016498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801649c:	81a3      	strh	r3, [r4, #12]
 801649e:	2300      	movs	r3, #0
 80164a0:	6063      	str	r3, [r4, #4]
 80164a2:	6923      	ldr	r3, [r4, #16]
 80164a4:	6023      	str	r3, [r4, #0]
 80164a6:	89a3      	ldrh	r3, [r4, #12]
 80164a8:	f043 0308 	orr.w	r3, r3, #8
 80164ac:	81a3      	strh	r3, [r4, #12]
 80164ae:	6923      	ldr	r3, [r4, #16]
 80164b0:	b94b      	cbnz	r3, 80164c6 <__swsetup_r+0x9a>
 80164b2:	89a3      	ldrh	r3, [r4, #12]
 80164b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164bc:	d003      	beq.n	80164c6 <__swsetup_r+0x9a>
 80164be:	4621      	mov	r1, r4
 80164c0:	4630      	mov	r0, r6
 80164c2:	f000 fa01 	bl	80168c8 <__smakebuf_r>
 80164c6:	89a0      	ldrh	r0, [r4, #12]
 80164c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164cc:	f010 0301 	ands.w	r3, r0, #1
 80164d0:	d00a      	beq.n	80164e8 <__swsetup_r+0xbc>
 80164d2:	2300      	movs	r3, #0
 80164d4:	60a3      	str	r3, [r4, #8]
 80164d6:	6963      	ldr	r3, [r4, #20]
 80164d8:	425b      	negs	r3, r3
 80164da:	61a3      	str	r3, [r4, #24]
 80164dc:	6923      	ldr	r3, [r4, #16]
 80164de:	b943      	cbnz	r3, 80164f2 <__swsetup_r+0xc6>
 80164e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80164e4:	d1ba      	bne.n	801645c <__swsetup_r+0x30>
 80164e6:	bd70      	pop	{r4, r5, r6, pc}
 80164e8:	0781      	lsls	r1, r0, #30
 80164ea:	bf58      	it	pl
 80164ec:	6963      	ldrpl	r3, [r4, #20]
 80164ee:	60a3      	str	r3, [r4, #8]
 80164f0:	e7f4      	b.n	80164dc <__swsetup_r+0xb0>
 80164f2:	2000      	movs	r0, #0
 80164f4:	e7f7      	b.n	80164e6 <__swsetup_r+0xba>
 80164f6:	bf00      	nop
 80164f8:	24000098 	.word	0x24000098
 80164fc:	08017108 	.word	0x08017108
 8016500:	08017128 	.word	0x08017128
 8016504:	080170e8 	.word	0x080170e8

08016508 <__sflush_r>:
 8016508:	898a      	ldrh	r2, [r1, #12]
 801650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801650e:	4605      	mov	r5, r0
 8016510:	0710      	lsls	r0, r2, #28
 8016512:	460c      	mov	r4, r1
 8016514:	d458      	bmi.n	80165c8 <__sflush_r+0xc0>
 8016516:	684b      	ldr	r3, [r1, #4]
 8016518:	2b00      	cmp	r3, #0
 801651a:	dc05      	bgt.n	8016528 <__sflush_r+0x20>
 801651c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801651e:	2b00      	cmp	r3, #0
 8016520:	dc02      	bgt.n	8016528 <__sflush_r+0x20>
 8016522:	2000      	movs	r0, #0
 8016524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801652a:	2e00      	cmp	r6, #0
 801652c:	d0f9      	beq.n	8016522 <__sflush_r+0x1a>
 801652e:	2300      	movs	r3, #0
 8016530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016534:	682f      	ldr	r7, [r5, #0]
 8016536:	602b      	str	r3, [r5, #0]
 8016538:	d032      	beq.n	80165a0 <__sflush_r+0x98>
 801653a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	075a      	lsls	r2, r3, #29
 8016540:	d505      	bpl.n	801654e <__sflush_r+0x46>
 8016542:	6863      	ldr	r3, [r4, #4]
 8016544:	1ac0      	subs	r0, r0, r3
 8016546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016548:	b10b      	cbz	r3, 801654e <__sflush_r+0x46>
 801654a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801654c:	1ac0      	subs	r0, r0, r3
 801654e:	2300      	movs	r3, #0
 8016550:	4602      	mov	r2, r0
 8016552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016554:	6a21      	ldr	r1, [r4, #32]
 8016556:	4628      	mov	r0, r5
 8016558:	47b0      	blx	r6
 801655a:	1c43      	adds	r3, r0, #1
 801655c:	89a3      	ldrh	r3, [r4, #12]
 801655e:	d106      	bne.n	801656e <__sflush_r+0x66>
 8016560:	6829      	ldr	r1, [r5, #0]
 8016562:	291d      	cmp	r1, #29
 8016564:	d82c      	bhi.n	80165c0 <__sflush_r+0xb8>
 8016566:	4a2a      	ldr	r2, [pc, #168]	; (8016610 <__sflush_r+0x108>)
 8016568:	40ca      	lsrs	r2, r1
 801656a:	07d6      	lsls	r6, r2, #31
 801656c:	d528      	bpl.n	80165c0 <__sflush_r+0xb8>
 801656e:	2200      	movs	r2, #0
 8016570:	6062      	str	r2, [r4, #4]
 8016572:	04d9      	lsls	r1, r3, #19
 8016574:	6922      	ldr	r2, [r4, #16]
 8016576:	6022      	str	r2, [r4, #0]
 8016578:	d504      	bpl.n	8016584 <__sflush_r+0x7c>
 801657a:	1c42      	adds	r2, r0, #1
 801657c:	d101      	bne.n	8016582 <__sflush_r+0x7a>
 801657e:	682b      	ldr	r3, [r5, #0]
 8016580:	b903      	cbnz	r3, 8016584 <__sflush_r+0x7c>
 8016582:	6560      	str	r0, [r4, #84]	; 0x54
 8016584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016586:	602f      	str	r7, [r5, #0]
 8016588:	2900      	cmp	r1, #0
 801658a:	d0ca      	beq.n	8016522 <__sflush_r+0x1a>
 801658c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016590:	4299      	cmp	r1, r3
 8016592:	d002      	beq.n	801659a <__sflush_r+0x92>
 8016594:	4628      	mov	r0, r5
 8016596:	f000 f9d7 	bl	8016948 <_free_r>
 801659a:	2000      	movs	r0, #0
 801659c:	6360      	str	r0, [r4, #52]	; 0x34
 801659e:	e7c1      	b.n	8016524 <__sflush_r+0x1c>
 80165a0:	6a21      	ldr	r1, [r4, #32]
 80165a2:	2301      	movs	r3, #1
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b0      	blx	r6
 80165a8:	1c41      	adds	r1, r0, #1
 80165aa:	d1c7      	bne.n	801653c <__sflush_r+0x34>
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d0c4      	beq.n	801653c <__sflush_r+0x34>
 80165b2:	2b1d      	cmp	r3, #29
 80165b4:	d001      	beq.n	80165ba <__sflush_r+0xb2>
 80165b6:	2b16      	cmp	r3, #22
 80165b8:	d101      	bne.n	80165be <__sflush_r+0xb6>
 80165ba:	602f      	str	r7, [r5, #0]
 80165bc:	e7b1      	b.n	8016522 <__sflush_r+0x1a>
 80165be:	89a3      	ldrh	r3, [r4, #12]
 80165c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165c4:	81a3      	strh	r3, [r4, #12]
 80165c6:	e7ad      	b.n	8016524 <__sflush_r+0x1c>
 80165c8:	690f      	ldr	r7, [r1, #16]
 80165ca:	2f00      	cmp	r7, #0
 80165cc:	d0a9      	beq.n	8016522 <__sflush_r+0x1a>
 80165ce:	0793      	lsls	r3, r2, #30
 80165d0:	680e      	ldr	r6, [r1, #0]
 80165d2:	bf08      	it	eq
 80165d4:	694b      	ldreq	r3, [r1, #20]
 80165d6:	600f      	str	r7, [r1, #0]
 80165d8:	bf18      	it	ne
 80165da:	2300      	movne	r3, #0
 80165dc:	eba6 0807 	sub.w	r8, r6, r7
 80165e0:	608b      	str	r3, [r1, #8]
 80165e2:	f1b8 0f00 	cmp.w	r8, #0
 80165e6:	dd9c      	ble.n	8016522 <__sflush_r+0x1a>
 80165e8:	6a21      	ldr	r1, [r4, #32]
 80165ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80165ec:	4643      	mov	r3, r8
 80165ee:	463a      	mov	r2, r7
 80165f0:	4628      	mov	r0, r5
 80165f2:	47b0      	blx	r6
 80165f4:	2800      	cmp	r0, #0
 80165f6:	dc06      	bgt.n	8016606 <__sflush_r+0xfe>
 80165f8:	89a3      	ldrh	r3, [r4, #12]
 80165fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165fe:	81a3      	strh	r3, [r4, #12]
 8016600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016604:	e78e      	b.n	8016524 <__sflush_r+0x1c>
 8016606:	4407      	add	r7, r0
 8016608:	eba8 0800 	sub.w	r8, r8, r0
 801660c:	e7e9      	b.n	80165e2 <__sflush_r+0xda>
 801660e:	bf00      	nop
 8016610:	20400001 	.word	0x20400001

08016614 <_fflush_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	690b      	ldr	r3, [r1, #16]
 8016618:	4605      	mov	r5, r0
 801661a:	460c      	mov	r4, r1
 801661c:	b913      	cbnz	r3, 8016624 <_fflush_r+0x10>
 801661e:	2500      	movs	r5, #0
 8016620:	4628      	mov	r0, r5
 8016622:	bd38      	pop	{r3, r4, r5, pc}
 8016624:	b118      	cbz	r0, 801662e <_fflush_r+0x1a>
 8016626:	6983      	ldr	r3, [r0, #24]
 8016628:	b90b      	cbnz	r3, 801662e <_fflush_r+0x1a>
 801662a:	f000 f887 	bl	801673c <__sinit>
 801662e:	4b14      	ldr	r3, [pc, #80]	; (8016680 <_fflush_r+0x6c>)
 8016630:	429c      	cmp	r4, r3
 8016632:	d11b      	bne.n	801666c <_fflush_r+0x58>
 8016634:	686c      	ldr	r4, [r5, #4]
 8016636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d0ef      	beq.n	801661e <_fflush_r+0xa>
 801663e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016640:	07d0      	lsls	r0, r2, #31
 8016642:	d404      	bmi.n	801664e <_fflush_r+0x3a>
 8016644:	0599      	lsls	r1, r3, #22
 8016646:	d402      	bmi.n	801664e <_fflush_r+0x3a>
 8016648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801664a:	f000 f915 	bl	8016878 <__retarget_lock_acquire_recursive>
 801664e:	4628      	mov	r0, r5
 8016650:	4621      	mov	r1, r4
 8016652:	f7ff ff59 	bl	8016508 <__sflush_r>
 8016656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016658:	07da      	lsls	r2, r3, #31
 801665a:	4605      	mov	r5, r0
 801665c:	d4e0      	bmi.n	8016620 <_fflush_r+0xc>
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	059b      	lsls	r3, r3, #22
 8016662:	d4dd      	bmi.n	8016620 <_fflush_r+0xc>
 8016664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016666:	f000 f908 	bl	801687a <__retarget_lock_release_recursive>
 801666a:	e7d9      	b.n	8016620 <_fflush_r+0xc>
 801666c:	4b05      	ldr	r3, [pc, #20]	; (8016684 <_fflush_r+0x70>)
 801666e:	429c      	cmp	r4, r3
 8016670:	d101      	bne.n	8016676 <_fflush_r+0x62>
 8016672:	68ac      	ldr	r4, [r5, #8]
 8016674:	e7df      	b.n	8016636 <_fflush_r+0x22>
 8016676:	4b04      	ldr	r3, [pc, #16]	; (8016688 <_fflush_r+0x74>)
 8016678:	429c      	cmp	r4, r3
 801667a:	bf08      	it	eq
 801667c:	68ec      	ldreq	r4, [r5, #12]
 801667e:	e7da      	b.n	8016636 <_fflush_r+0x22>
 8016680:	08017108 	.word	0x08017108
 8016684:	08017128 	.word	0x08017128
 8016688:	080170e8 	.word	0x080170e8

0801668c <std>:
 801668c:	2300      	movs	r3, #0
 801668e:	b510      	push	{r4, lr}
 8016690:	4604      	mov	r4, r0
 8016692:	e9c0 3300 	strd	r3, r3, [r0]
 8016696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801669a:	6083      	str	r3, [r0, #8]
 801669c:	8181      	strh	r1, [r0, #12]
 801669e:	6643      	str	r3, [r0, #100]	; 0x64
 80166a0:	81c2      	strh	r2, [r0, #14]
 80166a2:	6183      	str	r3, [r0, #24]
 80166a4:	4619      	mov	r1, r3
 80166a6:	2208      	movs	r2, #8
 80166a8:	305c      	adds	r0, #92	; 0x5c
 80166aa:	f7ff fdef 	bl	801628c <memset>
 80166ae:	4b05      	ldr	r3, [pc, #20]	; (80166c4 <std+0x38>)
 80166b0:	6263      	str	r3, [r4, #36]	; 0x24
 80166b2:	4b05      	ldr	r3, [pc, #20]	; (80166c8 <std+0x3c>)
 80166b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80166b6:	4b05      	ldr	r3, [pc, #20]	; (80166cc <std+0x40>)
 80166b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166ba:	4b05      	ldr	r3, [pc, #20]	; (80166d0 <std+0x44>)
 80166bc:	6224      	str	r4, [r4, #32]
 80166be:	6323      	str	r3, [r4, #48]	; 0x30
 80166c0:	bd10      	pop	{r4, pc}
 80166c2:	bf00      	nop
 80166c4:	08016b29 	.word	0x08016b29
 80166c8:	08016b4b 	.word	0x08016b4b
 80166cc:	08016b83 	.word	0x08016b83
 80166d0:	08016ba7 	.word	0x08016ba7

080166d4 <_cleanup_r>:
 80166d4:	4901      	ldr	r1, [pc, #4]	; (80166dc <_cleanup_r+0x8>)
 80166d6:	f000 b8af 	b.w	8016838 <_fwalk_reent>
 80166da:	bf00      	nop
 80166dc:	08016615 	.word	0x08016615

080166e0 <__sfmoreglue>:
 80166e0:	b570      	push	{r4, r5, r6, lr}
 80166e2:	2268      	movs	r2, #104	; 0x68
 80166e4:	1e4d      	subs	r5, r1, #1
 80166e6:	4355      	muls	r5, r2
 80166e8:	460e      	mov	r6, r1
 80166ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80166ee:	f000 f997 	bl	8016a20 <_malloc_r>
 80166f2:	4604      	mov	r4, r0
 80166f4:	b140      	cbz	r0, 8016708 <__sfmoreglue+0x28>
 80166f6:	2100      	movs	r1, #0
 80166f8:	e9c0 1600 	strd	r1, r6, [r0]
 80166fc:	300c      	adds	r0, #12
 80166fe:	60a0      	str	r0, [r4, #8]
 8016700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016704:	f7ff fdc2 	bl	801628c <memset>
 8016708:	4620      	mov	r0, r4
 801670a:	bd70      	pop	{r4, r5, r6, pc}

0801670c <__sfp_lock_acquire>:
 801670c:	4801      	ldr	r0, [pc, #4]	; (8016714 <__sfp_lock_acquire+0x8>)
 801670e:	f000 b8b3 	b.w	8016878 <__retarget_lock_acquire_recursive>
 8016712:	bf00      	nop
 8016714:	24006721 	.word	0x24006721

08016718 <__sfp_lock_release>:
 8016718:	4801      	ldr	r0, [pc, #4]	; (8016720 <__sfp_lock_release+0x8>)
 801671a:	f000 b8ae 	b.w	801687a <__retarget_lock_release_recursive>
 801671e:	bf00      	nop
 8016720:	24006721 	.word	0x24006721

08016724 <__sinit_lock_acquire>:
 8016724:	4801      	ldr	r0, [pc, #4]	; (801672c <__sinit_lock_acquire+0x8>)
 8016726:	f000 b8a7 	b.w	8016878 <__retarget_lock_acquire_recursive>
 801672a:	bf00      	nop
 801672c:	24006722 	.word	0x24006722

08016730 <__sinit_lock_release>:
 8016730:	4801      	ldr	r0, [pc, #4]	; (8016738 <__sinit_lock_release+0x8>)
 8016732:	f000 b8a2 	b.w	801687a <__retarget_lock_release_recursive>
 8016736:	bf00      	nop
 8016738:	24006722 	.word	0x24006722

0801673c <__sinit>:
 801673c:	b510      	push	{r4, lr}
 801673e:	4604      	mov	r4, r0
 8016740:	f7ff fff0 	bl	8016724 <__sinit_lock_acquire>
 8016744:	69a3      	ldr	r3, [r4, #24]
 8016746:	b11b      	cbz	r3, 8016750 <__sinit+0x14>
 8016748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801674c:	f7ff bff0 	b.w	8016730 <__sinit_lock_release>
 8016750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016754:	6523      	str	r3, [r4, #80]	; 0x50
 8016756:	4b13      	ldr	r3, [pc, #76]	; (80167a4 <__sinit+0x68>)
 8016758:	4a13      	ldr	r2, [pc, #76]	; (80167a8 <__sinit+0x6c>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	62a2      	str	r2, [r4, #40]	; 0x28
 801675e:	42a3      	cmp	r3, r4
 8016760:	bf04      	itt	eq
 8016762:	2301      	moveq	r3, #1
 8016764:	61a3      	streq	r3, [r4, #24]
 8016766:	4620      	mov	r0, r4
 8016768:	f000 f820 	bl	80167ac <__sfp>
 801676c:	6060      	str	r0, [r4, #4]
 801676e:	4620      	mov	r0, r4
 8016770:	f000 f81c 	bl	80167ac <__sfp>
 8016774:	60a0      	str	r0, [r4, #8]
 8016776:	4620      	mov	r0, r4
 8016778:	f000 f818 	bl	80167ac <__sfp>
 801677c:	2200      	movs	r2, #0
 801677e:	60e0      	str	r0, [r4, #12]
 8016780:	2104      	movs	r1, #4
 8016782:	6860      	ldr	r0, [r4, #4]
 8016784:	f7ff ff82 	bl	801668c <std>
 8016788:	68a0      	ldr	r0, [r4, #8]
 801678a:	2201      	movs	r2, #1
 801678c:	2109      	movs	r1, #9
 801678e:	f7ff ff7d 	bl	801668c <std>
 8016792:	68e0      	ldr	r0, [r4, #12]
 8016794:	2202      	movs	r2, #2
 8016796:	2112      	movs	r1, #18
 8016798:	f7ff ff78 	bl	801668c <std>
 801679c:	2301      	movs	r3, #1
 801679e:	61a3      	str	r3, [r4, #24]
 80167a0:	e7d2      	b.n	8016748 <__sinit+0xc>
 80167a2:	bf00      	nop
 80167a4:	080170e4 	.word	0x080170e4
 80167a8:	080166d5 	.word	0x080166d5

080167ac <__sfp>:
 80167ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ae:	4607      	mov	r7, r0
 80167b0:	f7ff ffac 	bl	801670c <__sfp_lock_acquire>
 80167b4:	4b1e      	ldr	r3, [pc, #120]	; (8016830 <__sfp+0x84>)
 80167b6:	681e      	ldr	r6, [r3, #0]
 80167b8:	69b3      	ldr	r3, [r6, #24]
 80167ba:	b913      	cbnz	r3, 80167c2 <__sfp+0x16>
 80167bc:	4630      	mov	r0, r6
 80167be:	f7ff ffbd 	bl	801673c <__sinit>
 80167c2:	3648      	adds	r6, #72	; 0x48
 80167c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167c8:	3b01      	subs	r3, #1
 80167ca:	d503      	bpl.n	80167d4 <__sfp+0x28>
 80167cc:	6833      	ldr	r3, [r6, #0]
 80167ce:	b30b      	cbz	r3, 8016814 <__sfp+0x68>
 80167d0:	6836      	ldr	r6, [r6, #0]
 80167d2:	e7f7      	b.n	80167c4 <__sfp+0x18>
 80167d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167d8:	b9d5      	cbnz	r5, 8016810 <__sfp+0x64>
 80167da:	4b16      	ldr	r3, [pc, #88]	; (8016834 <__sfp+0x88>)
 80167dc:	60e3      	str	r3, [r4, #12]
 80167de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80167e2:	6665      	str	r5, [r4, #100]	; 0x64
 80167e4:	f000 f847 	bl	8016876 <__retarget_lock_init_recursive>
 80167e8:	f7ff ff96 	bl	8016718 <__sfp_lock_release>
 80167ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80167f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80167f4:	6025      	str	r5, [r4, #0]
 80167f6:	61a5      	str	r5, [r4, #24]
 80167f8:	2208      	movs	r2, #8
 80167fa:	4629      	mov	r1, r5
 80167fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016800:	f7ff fd44 	bl	801628c <memset>
 8016804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801680c:	4620      	mov	r0, r4
 801680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016810:	3468      	adds	r4, #104	; 0x68
 8016812:	e7d9      	b.n	80167c8 <__sfp+0x1c>
 8016814:	2104      	movs	r1, #4
 8016816:	4638      	mov	r0, r7
 8016818:	f7ff ff62 	bl	80166e0 <__sfmoreglue>
 801681c:	4604      	mov	r4, r0
 801681e:	6030      	str	r0, [r6, #0]
 8016820:	2800      	cmp	r0, #0
 8016822:	d1d5      	bne.n	80167d0 <__sfp+0x24>
 8016824:	f7ff ff78 	bl	8016718 <__sfp_lock_release>
 8016828:	230c      	movs	r3, #12
 801682a:	603b      	str	r3, [r7, #0]
 801682c:	e7ee      	b.n	801680c <__sfp+0x60>
 801682e:	bf00      	nop
 8016830:	080170e4 	.word	0x080170e4
 8016834:	ffff0001 	.word	0xffff0001

08016838 <_fwalk_reent>:
 8016838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801683c:	4606      	mov	r6, r0
 801683e:	4688      	mov	r8, r1
 8016840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016844:	2700      	movs	r7, #0
 8016846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801684a:	f1b9 0901 	subs.w	r9, r9, #1
 801684e:	d505      	bpl.n	801685c <_fwalk_reent+0x24>
 8016850:	6824      	ldr	r4, [r4, #0]
 8016852:	2c00      	cmp	r4, #0
 8016854:	d1f7      	bne.n	8016846 <_fwalk_reent+0xe>
 8016856:	4638      	mov	r0, r7
 8016858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801685c:	89ab      	ldrh	r3, [r5, #12]
 801685e:	2b01      	cmp	r3, #1
 8016860:	d907      	bls.n	8016872 <_fwalk_reent+0x3a>
 8016862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016866:	3301      	adds	r3, #1
 8016868:	d003      	beq.n	8016872 <_fwalk_reent+0x3a>
 801686a:	4629      	mov	r1, r5
 801686c:	4630      	mov	r0, r6
 801686e:	47c0      	blx	r8
 8016870:	4307      	orrs	r7, r0
 8016872:	3568      	adds	r5, #104	; 0x68
 8016874:	e7e9      	b.n	801684a <_fwalk_reent+0x12>

08016876 <__retarget_lock_init_recursive>:
 8016876:	4770      	bx	lr

08016878 <__retarget_lock_acquire_recursive>:
 8016878:	4770      	bx	lr

0801687a <__retarget_lock_release_recursive>:
 801687a:	4770      	bx	lr

0801687c <__swhatbuf_r>:
 801687c:	b570      	push	{r4, r5, r6, lr}
 801687e:	460e      	mov	r6, r1
 8016880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016884:	2900      	cmp	r1, #0
 8016886:	b096      	sub	sp, #88	; 0x58
 8016888:	4614      	mov	r4, r2
 801688a:	461d      	mov	r5, r3
 801688c:	da08      	bge.n	80168a0 <__swhatbuf_r+0x24>
 801688e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016892:	2200      	movs	r2, #0
 8016894:	602a      	str	r2, [r5, #0]
 8016896:	061a      	lsls	r2, r3, #24
 8016898:	d410      	bmi.n	80168bc <__swhatbuf_r+0x40>
 801689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801689e:	e00e      	b.n	80168be <__swhatbuf_r+0x42>
 80168a0:	466a      	mov	r2, sp
 80168a2:	f000 f9a7 	bl	8016bf4 <_fstat_r>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	dbf1      	blt.n	801688e <__swhatbuf_r+0x12>
 80168aa:	9a01      	ldr	r2, [sp, #4]
 80168ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80168b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80168b4:	425a      	negs	r2, r3
 80168b6:	415a      	adcs	r2, r3
 80168b8:	602a      	str	r2, [r5, #0]
 80168ba:	e7ee      	b.n	801689a <__swhatbuf_r+0x1e>
 80168bc:	2340      	movs	r3, #64	; 0x40
 80168be:	2000      	movs	r0, #0
 80168c0:	6023      	str	r3, [r4, #0]
 80168c2:	b016      	add	sp, #88	; 0x58
 80168c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080168c8 <__smakebuf_r>:
 80168c8:	898b      	ldrh	r3, [r1, #12]
 80168ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168cc:	079d      	lsls	r5, r3, #30
 80168ce:	4606      	mov	r6, r0
 80168d0:	460c      	mov	r4, r1
 80168d2:	d507      	bpl.n	80168e4 <__smakebuf_r+0x1c>
 80168d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168d8:	6023      	str	r3, [r4, #0]
 80168da:	6123      	str	r3, [r4, #16]
 80168dc:	2301      	movs	r3, #1
 80168de:	6163      	str	r3, [r4, #20]
 80168e0:	b002      	add	sp, #8
 80168e2:	bd70      	pop	{r4, r5, r6, pc}
 80168e4:	ab01      	add	r3, sp, #4
 80168e6:	466a      	mov	r2, sp
 80168e8:	f7ff ffc8 	bl	801687c <__swhatbuf_r>
 80168ec:	9900      	ldr	r1, [sp, #0]
 80168ee:	4605      	mov	r5, r0
 80168f0:	4630      	mov	r0, r6
 80168f2:	f000 f895 	bl	8016a20 <_malloc_r>
 80168f6:	b948      	cbnz	r0, 801690c <__smakebuf_r+0x44>
 80168f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168fc:	059a      	lsls	r2, r3, #22
 80168fe:	d4ef      	bmi.n	80168e0 <__smakebuf_r+0x18>
 8016900:	f023 0303 	bic.w	r3, r3, #3
 8016904:	f043 0302 	orr.w	r3, r3, #2
 8016908:	81a3      	strh	r3, [r4, #12]
 801690a:	e7e3      	b.n	80168d4 <__smakebuf_r+0xc>
 801690c:	4b0d      	ldr	r3, [pc, #52]	; (8016944 <__smakebuf_r+0x7c>)
 801690e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016910:	89a3      	ldrh	r3, [r4, #12]
 8016912:	6020      	str	r0, [r4, #0]
 8016914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016918:	81a3      	strh	r3, [r4, #12]
 801691a:	9b00      	ldr	r3, [sp, #0]
 801691c:	6163      	str	r3, [r4, #20]
 801691e:	9b01      	ldr	r3, [sp, #4]
 8016920:	6120      	str	r0, [r4, #16]
 8016922:	b15b      	cbz	r3, 801693c <__smakebuf_r+0x74>
 8016924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016928:	4630      	mov	r0, r6
 801692a:	f000 f975 	bl	8016c18 <_isatty_r>
 801692e:	b128      	cbz	r0, 801693c <__smakebuf_r+0x74>
 8016930:	89a3      	ldrh	r3, [r4, #12]
 8016932:	f023 0303 	bic.w	r3, r3, #3
 8016936:	f043 0301 	orr.w	r3, r3, #1
 801693a:	81a3      	strh	r3, [r4, #12]
 801693c:	89a0      	ldrh	r0, [r4, #12]
 801693e:	4305      	orrs	r5, r0
 8016940:	81a5      	strh	r5, [r4, #12]
 8016942:	e7cd      	b.n	80168e0 <__smakebuf_r+0x18>
 8016944:	080166d5 	.word	0x080166d5

08016948 <_free_r>:
 8016948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801694a:	2900      	cmp	r1, #0
 801694c:	d044      	beq.n	80169d8 <_free_r+0x90>
 801694e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016952:	9001      	str	r0, [sp, #4]
 8016954:	2b00      	cmp	r3, #0
 8016956:	f1a1 0404 	sub.w	r4, r1, #4
 801695a:	bfb8      	it	lt
 801695c:	18e4      	addlt	r4, r4, r3
 801695e:	f000 f97d 	bl	8016c5c <__malloc_lock>
 8016962:	4a1e      	ldr	r2, [pc, #120]	; (80169dc <_free_r+0x94>)
 8016964:	9801      	ldr	r0, [sp, #4]
 8016966:	6813      	ldr	r3, [r2, #0]
 8016968:	b933      	cbnz	r3, 8016978 <_free_r+0x30>
 801696a:	6063      	str	r3, [r4, #4]
 801696c:	6014      	str	r4, [r2, #0]
 801696e:	b003      	add	sp, #12
 8016970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016974:	f000 b978 	b.w	8016c68 <__malloc_unlock>
 8016978:	42a3      	cmp	r3, r4
 801697a:	d908      	bls.n	801698e <_free_r+0x46>
 801697c:	6825      	ldr	r5, [r4, #0]
 801697e:	1961      	adds	r1, r4, r5
 8016980:	428b      	cmp	r3, r1
 8016982:	bf01      	itttt	eq
 8016984:	6819      	ldreq	r1, [r3, #0]
 8016986:	685b      	ldreq	r3, [r3, #4]
 8016988:	1949      	addeq	r1, r1, r5
 801698a:	6021      	streq	r1, [r4, #0]
 801698c:	e7ed      	b.n	801696a <_free_r+0x22>
 801698e:	461a      	mov	r2, r3
 8016990:	685b      	ldr	r3, [r3, #4]
 8016992:	b10b      	cbz	r3, 8016998 <_free_r+0x50>
 8016994:	42a3      	cmp	r3, r4
 8016996:	d9fa      	bls.n	801698e <_free_r+0x46>
 8016998:	6811      	ldr	r1, [r2, #0]
 801699a:	1855      	adds	r5, r2, r1
 801699c:	42a5      	cmp	r5, r4
 801699e:	d10b      	bne.n	80169b8 <_free_r+0x70>
 80169a0:	6824      	ldr	r4, [r4, #0]
 80169a2:	4421      	add	r1, r4
 80169a4:	1854      	adds	r4, r2, r1
 80169a6:	42a3      	cmp	r3, r4
 80169a8:	6011      	str	r1, [r2, #0]
 80169aa:	d1e0      	bne.n	801696e <_free_r+0x26>
 80169ac:	681c      	ldr	r4, [r3, #0]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	6053      	str	r3, [r2, #4]
 80169b2:	4421      	add	r1, r4
 80169b4:	6011      	str	r1, [r2, #0]
 80169b6:	e7da      	b.n	801696e <_free_r+0x26>
 80169b8:	d902      	bls.n	80169c0 <_free_r+0x78>
 80169ba:	230c      	movs	r3, #12
 80169bc:	6003      	str	r3, [r0, #0]
 80169be:	e7d6      	b.n	801696e <_free_r+0x26>
 80169c0:	6825      	ldr	r5, [r4, #0]
 80169c2:	1961      	adds	r1, r4, r5
 80169c4:	428b      	cmp	r3, r1
 80169c6:	bf04      	itt	eq
 80169c8:	6819      	ldreq	r1, [r3, #0]
 80169ca:	685b      	ldreq	r3, [r3, #4]
 80169cc:	6063      	str	r3, [r4, #4]
 80169ce:	bf04      	itt	eq
 80169d0:	1949      	addeq	r1, r1, r5
 80169d2:	6021      	streq	r1, [r4, #0]
 80169d4:	6054      	str	r4, [r2, #4]
 80169d6:	e7ca      	b.n	801696e <_free_r+0x26>
 80169d8:	b003      	add	sp, #12
 80169da:	bd30      	pop	{r4, r5, pc}
 80169dc:	24006724 	.word	0x24006724

080169e0 <sbrk_aligned>:
 80169e0:	b570      	push	{r4, r5, r6, lr}
 80169e2:	4e0e      	ldr	r6, [pc, #56]	; (8016a1c <sbrk_aligned+0x3c>)
 80169e4:	460c      	mov	r4, r1
 80169e6:	6831      	ldr	r1, [r6, #0]
 80169e8:	4605      	mov	r5, r0
 80169ea:	b911      	cbnz	r1, 80169f2 <sbrk_aligned+0x12>
 80169ec:	f000 f88c 	bl	8016b08 <_sbrk_r>
 80169f0:	6030      	str	r0, [r6, #0]
 80169f2:	4621      	mov	r1, r4
 80169f4:	4628      	mov	r0, r5
 80169f6:	f000 f887 	bl	8016b08 <_sbrk_r>
 80169fa:	1c43      	adds	r3, r0, #1
 80169fc:	d00a      	beq.n	8016a14 <sbrk_aligned+0x34>
 80169fe:	1cc4      	adds	r4, r0, #3
 8016a00:	f024 0403 	bic.w	r4, r4, #3
 8016a04:	42a0      	cmp	r0, r4
 8016a06:	d007      	beq.n	8016a18 <sbrk_aligned+0x38>
 8016a08:	1a21      	subs	r1, r4, r0
 8016a0a:	4628      	mov	r0, r5
 8016a0c:	f000 f87c 	bl	8016b08 <_sbrk_r>
 8016a10:	3001      	adds	r0, #1
 8016a12:	d101      	bne.n	8016a18 <sbrk_aligned+0x38>
 8016a14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016a18:	4620      	mov	r0, r4
 8016a1a:	bd70      	pop	{r4, r5, r6, pc}
 8016a1c:	24006728 	.word	0x24006728

08016a20 <_malloc_r>:
 8016a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a24:	1ccd      	adds	r5, r1, #3
 8016a26:	f025 0503 	bic.w	r5, r5, #3
 8016a2a:	3508      	adds	r5, #8
 8016a2c:	2d0c      	cmp	r5, #12
 8016a2e:	bf38      	it	cc
 8016a30:	250c      	movcc	r5, #12
 8016a32:	2d00      	cmp	r5, #0
 8016a34:	4607      	mov	r7, r0
 8016a36:	db01      	blt.n	8016a3c <_malloc_r+0x1c>
 8016a38:	42a9      	cmp	r1, r5
 8016a3a:	d905      	bls.n	8016a48 <_malloc_r+0x28>
 8016a3c:	230c      	movs	r3, #12
 8016a3e:	603b      	str	r3, [r7, #0]
 8016a40:	2600      	movs	r6, #0
 8016a42:	4630      	mov	r0, r6
 8016a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a48:	4e2e      	ldr	r6, [pc, #184]	; (8016b04 <_malloc_r+0xe4>)
 8016a4a:	f000 f907 	bl	8016c5c <__malloc_lock>
 8016a4e:	6833      	ldr	r3, [r6, #0]
 8016a50:	461c      	mov	r4, r3
 8016a52:	bb34      	cbnz	r4, 8016aa2 <_malloc_r+0x82>
 8016a54:	4629      	mov	r1, r5
 8016a56:	4638      	mov	r0, r7
 8016a58:	f7ff ffc2 	bl	80169e0 <sbrk_aligned>
 8016a5c:	1c43      	adds	r3, r0, #1
 8016a5e:	4604      	mov	r4, r0
 8016a60:	d14d      	bne.n	8016afe <_malloc_r+0xde>
 8016a62:	6834      	ldr	r4, [r6, #0]
 8016a64:	4626      	mov	r6, r4
 8016a66:	2e00      	cmp	r6, #0
 8016a68:	d140      	bne.n	8016aec <_malloc_r+0xcc>
 8016a6a:	6823      	ldr	r3, [r4, #0]
 8016a6c:	4631      	mov	r1, r6
 8016a6e:	4638      	mov	r0, r7
 8016a70:	eb04 0803 	add.w	r8, r4, r3
 8016a74:	f000 f848 	bl	8016b08 <_sbrk_r>
 8016a78:	4580      	cmp	r8, r0
 8016a7a:	d13a      	bne.n	8016af2 <_malloc_r+0xd2>
 8016a7c:	6821      	ldr	r1, [r4, #0]
 8016a7e:	3503      	adds	r5, #3
 8016a80:	1a6d      	subs	r5, r5, r1
 8016a82:	f025 0503 	bic.w	r5, r5, #3
 8016a86:	3508      	adds	r5, #8
 8016a88:	2d0c      	cmp	r5, #12
 8016a8a:	bf38      	it	cc
 8016a8c:	250c      	movcc	r5, #12
 8016a8e:	4629      	mov	r1, r5
 8016a90:	4638      	mov	r0, r7
 8016a92:	f7ff ffa5 	bl	80169e0 <sbrk_aligned>
 8016a96:	3001      	adds	r0, #1
 8016a98:	d02b      	beq.n	8016af2 <_malloc_r+0xd2>
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	442b      	add	r3, r5
 8016a9e:	6023      	str	r3, [r4, #0]
 8016aa0:	e00e      	b.n	8016ac0 <_malloc_r+0xa0>
 8016aa2:	6822      	ldr	r2, [r4, #0]
 8016aa4:	1b52      	subs	r2, r2, r5
 8016aa6:	d41e      	bmi.n	8016ae6 <_malloc_r+0xc6>
 8016aa8:	2a0b      	cmp	r2, #11
 8016aaa:	d916      	bls.n	8016ada <_malloc_r+0xba>
 8016aac:	1961      	adds	r1, r4, r5
 8016aae:	42a3      	cmp	r3, r4
 8016ab0:	6025      	str	r5, [r4, #0]
 8016ab2:	bf18      	it	ne
 8016ab4:	6059      	strne	r1, [r3, #4]
 8016ab6:	6863      	ldr	r3, [r4, #4]
 8016ab8:	bf08      	it	eq
 8016aba:	6031      	streq	r1, [r6, #0]
 8016abc:	5162      	str	r2, [r4, r5]
 8016abe:	604b      	str	r3, [r1, #4]
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f104 060b 	add.w	r6, r4, #11
 8016ac6:	f000 f8cf 	bl	8016c68 <__malloc_unlock>
 8016aca:	f026 0607 	bic.w	r6, r6, #7
 8016ace:	1d23      	adds	r3, r4, #4
 8016ad0:	1af2      	subs	r2, r6, r3
 8016ad2:	d0b6      	beq.n	8016a42 <_malloc_r+0x22>
 8016ad4:	1b9b      	subs	r3, r3, r6
 8016ad6:	50a3      	str	r3, [r4, r2]
 8016ad8:	e7b3      	b.n	8016a42 <_malloc_r+0x22>
 8016ada:	6862      	ldr	r2, [r4, #4]
 8016adc:	42a3      	cmp	r3, r4
 8016ade:	bf0c      	ite	eq
 8016ae0:	6032      	streq	r2, [r6, #0]
 8016ae2:	605a      	strne	r2, [r3, #4]
 8016ae4:	e7ec      	b.n	8016ac0 <_malloc_r+0xa0>
 8016ae6:	4623      	mov	r3, r4
 8016ae8:	6864      	ldr	r4, [r4, #4]
 8016aea:	e7b2      	b.n	8016a52 <_malloc_r+0x32>
 8016aec:	4634      	mov	r4, r6
 8016aee:	6876      	ldr	r6, [r6, #4]
 8016af0:	e7b9      	b.n	8016a66 <_malloc_r+0x46>
 8016af2:	230c      	movs	r3, #12
 8016af4:	603b      	str	r3, [r7, #0]
 8016af6:	4638      	mov	r0, r7
 8016af8:	f000 f8b6 	bl	8016c68 <__malloc_unlock>
 8016afc:	e7a1      	b.n	8016a42 <_malloc_r+0x22>
 8016afe:	6025      	str	r5, [r4, #0]
 8016b00:	e7de      	b.n	8016ac0 <_malloc_r+0xa0>
 8016b02:	bf00      	nop
 8016b04:	24006724 	.word	0x24006724

08016b08 <_sbrk_r>:
 8016b08:	b538      	push	{r3, r4, r5, lr}
 8016b0a:	4d06      	ldr	r5, [pc, #24]	; (8016b24 <_sbrk_r+0x1c>)
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	4604      	mov	r4, r0
 8016b10:	4608      	mov	r0, r1
 8016b12:	602b      	str	r3, [r5, #0]
 8016b14:	f7ec fa76 	bl	8003004 <_sbrk>
 8016b18:	1c43      	adds	r3, r0, #1
 8016b1a:	d102      	bne.n	8016b22 <_sbrk_r+0x1a>
 8016b1c:	682b      	ldr	r3, [r5, #0]
 8016b1e:	b103      	cbz	r3, 8016b22 <_sbrk_r+0x1a>
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	bd38      	pop	{r3, r4, r5, pc}
 8016b24:	2400672c 	.word	0x2400672c

08016b28 <__sread>:
 8016b28:	b510      	push	{r4, lr}
 8016b2a:	460c      	mov	r4, r1
 8016b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b30:	f000 f8a0 	bl	8016c74 <_read_r>
 8016b34:	2800      	cmp	r0, #0
 8016b36:	bfab      	itete	ge
 8016b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8016b3c:	181b      	addge	r3, r3, r0
 8016b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b42:	bfac      	ite	ge
 8016b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b46:	81a3      	strhlt	r3, [r4, #12]
 8016b48:	bd10      	pop	{r4, pc}

08016b4a <__swrite>:
 8016b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b4e:	461f      	mov	r7, r3
 8016b50:	898b      	ldrh	r3, [r1, #12]
 8016b52:	05db      	lsls	r3, r3, #23
 8016b54:	4605      	mov	r5, r0
 8016b56:	460c      	mov	r4, r1
 8016b58:	4616      	mov	r6, r2
 8016b5a:	d505      	bpl.n	8016b68 <__swrite+0x1e>
 8016b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b60:	2302      	movs	r3, #2
 8016b62:	2200      	movs	r2, #0
 8016b64:	f000 f868 	bl	8016c38 <_lseek_r>
 8016b68:	89a3      	ldrh	r3, [r4, #12]
 8016b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b72:	81a3      	strh	r3, [r4, #12]
 8016b74:	4632      	mov	r2, r6
 8016b76:	463b      	mov	r3, r7
 8016b78:	4628      	mov	r0, r5
 8016b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b7e:	f000 b817 	b.w	8016bb0 <_write_r>

08016b82 <__sseek>:
 8016b82:	b510      	push	{r4, lr}
 8016b84:	460c      	mov	r4, r1
 8016b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b8a:	f000 f855 	bl	8016c38 <_lseek_r>
 8016b8e:	1c43      	adds	r3, r0, #1
 8016b90:	89a3      	ldrh	r3, [r4, #12]
 8016b92:	bf15      	itete	ne
 8016b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b9e:	81a3      	strheq	r3, [r4, #12]
 8016ba0:	bf18      	it	ne
 8016ba2:	81a3      	strhne	r3, [r4, #12]
 8016ba4:	bd10      	pop	{r4, pc}

08016ba6 <__sclose>:
 8016ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016baa:	f000 b813 	b.w	8016bd4 <_close_r>
	...

08016bb0 <_write_r>:
 8016bb0:	b538      	push	{r3, r4, r5, lr}
 8016bb2:	4d07      	ldr	r5, [pc, #28]	; (8016bd0 <_write_r+0x20>)
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	4608      	mov	r0, r1
 8016bb8:	4611      	mov	r1, r2
 8016bba:	2200      	movs	r2, #0
 8016bbc:	602a      	str	r2, [r5, #0]
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	f7ec f9cf 	bl	8002f62 <_write>
 8016bc4:	1c43      	adds	r3, r0, #1
 8016bc6:	d102      	bne.n	8016bce <_write_r+0x1e>
 8016bc8:	682b      	ldr	r3, [r5, #0]
 8016bca:	b103      	cbz	r3, 8016bce <_write_r+0x1e>
 8016bcc:	6023      	str	r3, [r4, #0]
 8016bce:	bd38      	pop	{r3, r4, r5, pc}
 8016bd0:	2400672c 	.word	0x2400672c

08016bd4 <_close_r>:
 8016bd4:	b538      	push	{r3, r4, r5, lr}
 8016bd6:	4d06      	ldr	r5, [pc, #24]	; (8016bf0 <_close_r+0x1c>)
 8016bd8:	2300      	movs	r3, #0
 8016bda:	4604      	mov	r4, r0
 8016bdc:	4608      	mov	r0, r1
 8016bde:	602b      	str	r3, [r5, #0]
 8016be0:	f7ec f9db 	bl	8002f9a <_close>
 8016be4:	1c43      	adds	r3, r0, #1
 8016be6:	d102      	bne.n	8016bee <_close_r+0x1a>
 8016be8:	682b      	ldr	r3, [r5, #0]
 8016bea:	b103      	cbz	r3, 8016bee <_close_r+0x1a>
 8016bec:	6023      	str	r3, [r4, #0]
 8016bee:	bd38      	pop	{r3, r4, r5, pc}
 8016bf0:	2400672c 	.word	0x2400672c

08016bf4 <_fstat_r>:
 8016bf4:	b538      	push	{r3, r4, r5, lr}
 8016bf6:	4d07      	ldr	r5, [pc, #28]	; (8016c14 <_fstat_r+0x20>)
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	4604      	mov	r4, r0
 8016bfc:	4608      	mov	r0, r1
 8016bfe:	4611      	mov	r1, r2
 8016c00:	602b      	str	r3, [r5, #0]
 8016c02:	f7ec f9d6 	bl	8002fb2 <_fstat>
 8016c06:	1c43      	adds	r3, r0, #1
 8016c08:	d102      	bne.n	8016c10 <_fstat_r+0x1c>
 8016c0a:	682b      	ldr	r3, [r5, #0]
 8016c0c:	b103      	cbz	r3, 8016c10 <_fstat_r+0x1c>
 8016c0e:	6023      	str	r3, [r4, #0]
 8016c10:	bd38      	pop	{r3, r4, r5, pc}
 8016c12:	bf00      	nop
 8016c14:	2400672c 	.word	0x2400672c

08016c18 <_isatty_r>:
 8016c18:	b538      	push	{r3, r4, r5, lr}
 8016c1a:	4d06      	ldr	r5, [pc, #24]	; (8016c34 <_isatty_r+0x1c>)
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	4604      	mov	r4, r0
 8016c20:	4608      	mov	r0, r1
 8016c22:	602b      	str	r3, [r5, #0]
 8016c24:	f7ec f9d5 	bl	8002fd2 <_isatty>
 8016c28:	1c43      	adds	r3, r0, #1
 8016c2a:	d102      	bne.n	8016c32 <_isatty_r+0x1a>
 8016c2c:	682b      	ldr	r3, [r5, #0]
 8016c2e:	b103      	cbz	r3, 8016c32 <_isatty_r+0x1a>
 8016c30:	6023      	str	r3, [r4, #0]
 8016c32:	bd38      	pop	{r3, r4, r5, pc}
 8016c34:	2400672c 	.word	0x2400672c

08016c38 <_lseek_r>:
 8016c38:	b538      	push	{r3, r4, r5, lr}
 8016c3a:	4d07      	ldr	r5, [pc, #28]	; (8016c58 <_lseek_r+0x20>)
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	4608      	mov	r0, r1
 8016c40:	4611      	mov	r1, r2
 8016c42:	2200      	movs	r2, #0
 8016c44:	602a      	str	r2, [r5, #0]
 8016c46:	461a      	mov	r2, r3
 8016c48:	f7ec f9ce 	bl	8002fe8 <_lseek>
 8016c4c:	1c43      	adds	r3, r0, #1
 8016c4e:	d102      	bne.n	8016c56 <_lseek_r+0x1e>
 8016c50:	682b      	ldr	r3, [r5, #0]
 8016c52:	b103      	cbz	r3, 8016c56 <_lseek_r+0x1e>
 8016c54:	6023      	str	r3, [r4, #0]
 8016c56:	bd38      	pop	{r3, r4, r5, pc}
 8016c58:	2400672c 	.word	0x2400672c

08016c5c <__malloc_lock>:
 8016c5c:	4801      	ldr	r0, [pc, #4]	; (8016c64 <__malloc_lock+0x8>)
 8016c5e:	f7ff be0b 	b.w	8016878 <__retarget_lock_acquire_recursive>
 8016c62:	bf00      	nop
 8016c64:	24006720 	.word	0x24006720

08016c68 <__malloc_unlock>:
 8016c68:	4801      	ldr	r0, [pc, #4]	; (8016c70 <__malloc_unlock+0x8>)
 8016c6a:	f7ff be06 	b.w	801687a <__retarget_lock_release_recursive>
 8016c6e:	bf00      	nop
 8016c70:	24006720 	.word	0x24006720

08016c74 <_read_r>:
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4d07      	ldr	r5, [pc, #28]	; (8016c94 <_read_r+0x20>)
 8016c78:	4604      	mov	r4, r0
 8016c7a:	4608      	mov	r0, r1
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	2200      	movs	r2, #0
 8016c80:	602a      	str	r2, [r5, #0]
 8016c82:	461a      	mov	r2, r3
 8016c84:	f7ec f950 	bl	8002f28 <_read>
 8016c88:	1c43      	adds	r3, r0, #1
 8016c8a:	d102      	bne.n	8016c92 <_read_r+0x1e>
 8016c8c:	682b      	ldr	r3, [r5, #0]
 8016c8e:	b103      	cbz	r3, 8016c92 <_read_r+0x1e>
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	bd38      	pop	{r3, r4, r5, pc}
 8016c94:	2400672c 	.word	0x2400672c

08016c98 <_init>:
 8016c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c9a:	bf00      	nop
 8016c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c9e:	bc08      	pop	{r3}
 8016ca0:	469e      	mov	lr, r3
 8016ca2:	4770      	bx	lr

08016ca4 <_fini>:
 8016ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ca6:	bf00      	nop
 8016ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016caa:	bc08      	pop	{r3}
 8016cac:	469e      	mov	lr, r3
 8016cae:	4770      	bx	lr
