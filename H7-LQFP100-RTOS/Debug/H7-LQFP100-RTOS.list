
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08017770  08017770  00027770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017c08  08017c08  00027c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017c10  08017c10  00027c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017c14  08017c14  00027c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017c18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  08017d20  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  08017d20  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033c0e  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f4  00000000  00000000  00063d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002788  00000000  00000000  00069438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002570  00000000  00000000  0006bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032550  00000000  00000000  000ae236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b90  00000000  00000000  000e0786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00275316  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b10c  00000000  00000000  00275368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017758 	.word	0x08017758

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017758 	.word	0x08017758

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c4c 	.word	0x24000c4c

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 ffa8 	bl	801356c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 ff9d 	bl	801356c <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 ff92 	bl	801356c <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 ff87 	bl	801356c <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fcc9 	bl	8016ff8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c6c 	.word	0x24000c6c
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080177f8 	.word	0x080177f8

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f ffdf 	bl	8010658 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 845d 	bhi.w	8000f62 <HAL_UART_RxCpltCallback+0x8da>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cfd 	.word	0x08000cfd
 80006dc:	08000d3b 	.word	0x08000d3b
 80006e0:	08000e31 	.word	0x08000e31
 80006e4:	08000e83 	.word	0x08000e83
 80006e8:	08000ee5 	.word	0x08000ee5
 80006ec:	08000f0d 	.word	0x08000f0d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d13 	.word	0x08000d13
 8000720:	08000d51 	.word	0x08000d51
 8000724:	08000e47 	.word	0x08000e47
 8000728:	08000ebd 	.word	0x08000ebd
 800072c:	08000f63 	.word	0x08000f63
 8000730:	08000f63 	.word	0x08000f63
 8000734:	08000f63 	.word	0x08000f63
 8000738:	08000f63 	.word	0x08000f63
 800073c:	08000f63 	.word	0x08000f63
 8000740:	08000f63 	.word	0x08000f63
 8000744:	08000f63 	.word	0x08000f63
 8000748:	08000f63 	.word	0x08000f63
 800074c:	08000f63 	.word	0x08000f63
 8000750:	08000f63 	.word	0x08000f63
 8000754:	08000f63 	.word	0x08000f63
 8000758:	08000f63 	.word	0x08000f63
 800075c:	08000f63 	.word	0x08000f63
 8000760:	08000f63 	.word	0x08000f63
 8000764:	08000f63 	.word	0x08000f63
 8000768:	08000f63 	.word	0x08000f63
 800076c:	08000f63 	.word	0x08000f63
 8000770:	08000f63 	.word	0x08000f63
 8000774:	08000f63 	.word	0x08000f63
 8000778:	08000f63 	.word	0x08000f63
 800077c:	08000f63 	.word	0x08000f63
 8000780:	08000f63 	.word	0x08000f63
 8000784:	08000f63 	.word	0x08000f63
 8000788:	08000f63 	.word	0x08000f63
 800078c:	08000f63 	.word	0x08000f63
 8000790:	08000f63 	.word	0x08000f63
 8000794:	08000f63 	.word	0x08000f63
 8000798:	08000f63 	.word	0x08000f63
 800079c:	08000f63 	.word	0x08000f63
 80007a0:	08000f63 	.word	0x08000f63
 80007a4:	08000f63 	.word	0x08000f63
 80007a8:	08000f63 	.word	0x08000f63
 80007ac:	08000f63 	.word	0x08000f63
 80007b0:	08000f63 	.word	0x08000f63
 80007b4:	08000f63 	.word	0x08000f63
 80007b8:	08000f63 	.word	0x08000f63
 80007bc:	08000f63 	.word	0x08000f63
 80007c0:	08000f63 	.word	0x08000f63
 80007c4:	08000f63 	.word	0x08000f63
 80007c8:	08000f63 	.word	0x08000f63
 80007cc:	08000f63 	.word	0x08000f63
 80007d0:	08000f63 	.word	0x08000f63
 80007d4:	08000f63 	.word	0x08000f63
 80007d8:	08000f63 	.word	0x08000f63
 80007dc:	08000f63 	.word	0x08000f63
 80007e0:	08000f63 	.word	0x08000f63
 80007e4:	08000f63 	.word	0x08000f63
 80007e8:	08000f63 	.word	0x08000f63
 80007ec:	08000f63 	.word	0x08000f63
 80007f0:	08000f63 	.word	0x08000f63
 80007f4:	08000f63 	.word	0x08000f63
 80007f8:	08000f63 	.word	0x08000f63
 80007fc:	08000f63 	.word	0x08000f63
 8000800:	08000f63 	.word	0x08000f63
 8000804:	08000f63 	.word	0x08000f63
 8000808:	08000f63 	.word	0x08000f63
 800080c:	08000f63 	.word	0x08000f63
 8000810:	08000f63 	.word	0x08000f63
 8000814:	08000f63 	.word	0x08000f63
 8000818:	08000f63 	.word	0x08000f63
 800081c:	08000f63 	.word	0x08000f63
 8000820:	08000f63 	.word	0x08000f63
 8000824:	08000f63 	.word	0x08000f63
 8000828:	08000f63 	.word	0x08000f63
 800082c:	08000f63 	.word	0x08000f63
 8000830:	08000f63 	.word	0x08000f63
 8000834:	08000f63 	.word	0x08000f63
 8000838:	08000f63 	.word	0x08000f63
 800083c:	08000f63 	.word	0x08000f63
 8000840:	08000f63 	.word	0x08000f63
 8000844:	08000f63 	.word	0x08000f63
 8000848:	08000f63 	.word	0x08000f63
 800084c:	08000f63 	.word	0x08000f63
 8000850:	08000f63 	.word	0x08000f63
 8000854:	08000f63 	.word	0x08000f63
 8000858:	08000f63 	.word	0x08000f63
 800085c:	08000f63 	.word	0x08000f63
 8000860:	08000f63 	.word	0x08000f63
 8000864:	08000f63 	.word	0x08000f63
 8000868:	08000f63 	.word	0x08000f63
 800086c:	08000f63 	.word	0x08000f63
 8000870:	08000f63 	.word	0x08000f63
 8000874:	08000f63 	.word	0x08000f63
 8000878:	08000f63 	.word	0x08000f63
 800087c:	08000f63 	.word	0x08000f63
 8000880:	08000f63 	.word	0x08000f63
 8000884:	08000f63 	.word	0x08000f63
 8000888:	08000f63 	.word	0x08000f63
 800088c:	08000f63 	.word	0x08000f63
 8000890:	08000f63 	.word	0x08000f63
 8000894:	08000f63 	.word	0x08000f63
 8000898:	08000f63 	.word	0x08000f63
 800089c:	08000f63 	.word	0x08000f63
 80008a0:	08000f63 	.word	0x08000f63
 80008a4:	08000f63 	.word	0x08000f63
 80008a8:	08000f63 	.word	0x08000f63
 80008ac:	08000f63 	.word	0x08000f63
 80008b0:	08000f63 	.word	0x08000f63
 80008b4:	08000f63 	.word	0x08000f63
 80008b8:	08000f63 	.word	0x08000f63
 80008bc:	08000f63 	.word	0x08000f63
 80008c0:	08000f63 	.word	0x08000f63
 80008c4:	08000f63 	.word	0x08000f63
 80008c8:	08000f63 	.word	0x08000f63
 80008cc:	08000f63 	.word	0x08000f63
 80008d0:	08000f63 	.word	0x08000f63
 80008d4:	08000f63 	.word	0x08000f63
 80008d8:	08000f63 	.word	0x08000f63
 80008dc:	08000f63 	.word	0x08000f63
 80008e0:	08000f63 	.word	0x08000f63
 80008e4:	08000f63 	.word	0x08000f63
 80008e8:	08000f63 	.word	0x08000f63
 80008ec:	08000f63 	.word	0x08000f63
 80008f0:	08000f63 	.word	0x08000f63
 80008f4:	08000f63 	.word	0x08000f63
 80008f8:	08000f63 	.word	0x08000f63
 80008fc:	08000f63 	.word	0x08000f63
 8000900:	08000f63 	.word	0x08000f63
 8000904:	08000f63 	.word	0x08000f63
 8000908:	08000f63 	.word	0x08000f63
 800090c:	08000f63 	.word	0x08000f63
 8000910:	08000f63 	.word	0x08000f63
 8000914:	08000f63 	.word	0x08000f63
 8000918:	08000f63 	.word	0x08000f63
 800091c:	08000f63 	.word	0x08000f63
 8000920:	08000f63 	.word	0x08000f63
 8000924:	08000f63 	.word	0x08000f63
 8000928:	08000f63 	.word	0x08000f63
 800092c:	08000f63 	.word	0x08000f63
 8000930:	08000f63 	.word	0x08000f63
 8000934:	08000f63 	.word	0x08000f63
 8000938:	08000f63 	.word	0x08000f63
 800093c:	08000f63 	.word	0x08000f63
 8000940:	08000f63 	.word	0x08000f63
 8000944:	08000f63 	.word	0x08000f63
 8000948:	08000f63 	.word	0x08000f63
 800094c:	08000f63 	.word	0x08000f63
 8000950:	08000f63 	.word	0x08000f63
 8000954:	08000f63 	.word	0x08000f63
 8000958:	08000f63 	.word	0x08000f63
 800095c:	08000f63 	.word	0x08000f63
 8000960:	08000f63 	.word	0x08000f63
 8000964:	08000f63 	.word	0x08000f63
 8000968:	08000f63 	.word	0x08000f63
 800096c:	08000f45 	.word	0x08000f45
 8000970:	08000f63 	.word	0x08000f63
 8000974:	08000f63 	.word	0x08000f63
 8000978:	08000f63 	.word	0x08000f63
 800097c:	08000f63 	.word	0x08000f63
 8000980:	08000f63 	.word	0x08000f63
 8000984:	08000f63 	.word	0x08000f63
 8000988:	08000f63 	.word	0x08000f63
 800098c:	08000f63 	.word	0x08000f63
 8000990:	08000f63 	.word	0x08000f63
 8000994:	08000f63 	.word	0x08000f63
 8000998:	08000f63 	.word	0x08000f63
 800099c:	08000f63 	.word	0x08000f63
 80009a0:	08000f63 	.word	0x08000f63
 80009a4:	08000f63 	.word	0x08000f63
 80009a8:	08000f63 	.word	0x08000f63
 80009ac:	08000f4b 	.word	0x08000f4b
 80009b0:	08000f63 	.word	0x08000f63
 80009b4:	08000f63 	.word	0x08000f63
 80009b8:	08000f63 	.word	0x08000f63
 80009bc:	08000f63 	.word	0x08000f63
 80009c0:	08000f63 	.word	0x08000f63
 80009c4:	08000f63 	.word	0x08000f63
 80009c8:	08000f63 	.word	0x08000f63
 80009cc:	08000f63 	.word	0x08000f63
 80009d0:	08000f63 	.word	0x08000f63
 80009d4:	08000f63 	.word	0x08000f63
 80009d8:	08000f63 	.word	0x08000f63
 80009dc:	08000f63 	.word	0x08000f63
 80009e0:	08000f63 	.word	0x08000f63
 80009e4:	08000f63 	.word	0x08000f63
 80009e8:	08000f63 	.word	0x08000f63
 80009ec:	08000f57 	.word	0x08000f57
 80009f0:	08000f33 	.word	0x08000f33
 80009f4:	08000f63 	.word	0x08000f63
 80009f8:	08000f63 	.word	0x08000f63
 80009fc:	08000f63 	.word	0x08000f63
 8000a00:	08000f63 	.word	0x08000f63
 8000a04:	08000f63 	.word	0x08000f63
 8000a08:	08000f63 	.word	0x08000f63
 8000a0c:	08000f63 	.word	0x08000f63
 8000a10:	08000f63 	.word	0x08000f63
 8000a14:	08000f63 	.word	0x08000f63
 8000a18:	08000f63 	.word	0x08000f63
 8000a1c:	08000f63 	.word	0x08000f63
 8000a20:	08000f63 	.word	0x08000f63
 8000a24:	08000f63 	.word	0x08000f63
 8000a28:	08000f63 	.word	0x08000f63
 8000a2c:	08000f63 	.word	0x08000f63
 8000a30:	08000f21 	.word	0x08000f21
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 fadf 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fd25 	bl	8009490 <HAL_GPIO_WritePin>
		break;
 8000a46:	e297      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 fad5 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fd1b 	bl	8009490 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e28d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
 8000a5c:	24000c70 	.word	0x24000c70
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017810 	.word	0x08017810
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	08017818 	.word	0x08017818
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48c1      	ldr	r0, [pc, #772]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a72:	f016 fac1 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fd07 	bl	8009490 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbf      	ldr	r3, [pc, #764]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e276      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48be      	ldr	r0, [pc, #760]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000a8c:	f016 fab4 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bba      	ldr	r3, [pc, #744]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fcfa 	bl	8009490 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb7      	ldr	r3, [pc, #732]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fcf4 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb7      	ldr	r3, [pc, #732]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fced 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fce6 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bb0      	ldr	r3, [pc, #704]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fcdf 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fcd9 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fcd3 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba7      	ldr	r3, [pc, #668]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fccc 	bl	8009490 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4ba1      	ldr	r3, [pc, #644]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4ba2      	ldr	r3, [pc, #648]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e223      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489e      	ldr	r0, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b32:	f016 fa61 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fca6 	bl	8009490 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e215      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4898      	ldr	r0, [pc, #608]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b4e:	f016 fa53 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fc98 	bl	8009490 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e207      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	4892      	ldr	r0, [pc, #584]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b6a:	f016 fa45 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fc8b 	bl	8009490 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1fa      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488d      	ldr	r0, [pc, #564]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000b84:	f016 fa38 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fc7e 	bl	8009490 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1ed      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000b9e:	f016 fa2b 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fc71 	bl	8009490 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1e0      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	4882      	ldr	r0, [pc, #520]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000bb8:	f016 fa1e 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fc64 	bl	8009490 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1d3      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bd2:	f016 fa11 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fc56 	bl	8009490 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1c5      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000bee:	f016 fa03 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fc48 	bl	8009490 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e1b7      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c0a:	f016 f9f5 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fc3a 	bl	8009490 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e1a9      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	486a      	ldr	r0, [pc, #424]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c26:	f016 f9e7 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fc2c 	bl	8009490 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e19b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4864      	ldr	r0, [pc, #400]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c42:	f016 f9d9 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fc1e 	bl	8009490 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e18d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000c5e:	f016 f9cb 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fc10 	bl	8009490 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e17f      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4858      	ldr	r0, [pc, #352]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000c7a:	f016 f9bd 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fc03 	bl	8009490 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e172      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4853      	ldr	r0, [pc, #332]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000c94:	f016 f9b0 	bl	8016ff8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fbf6 	bl	8009490 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e165      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f016 f9a3 	bl	8016ff8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cbe:	f005 f84b 	bl	8005d58 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e159      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000cc6:	f016 f997 	bl	8016ff8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f005 f903 	bl	8005ed8 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e151      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd6:	f016 f98f 	bl	8016ff8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cde:	f00d ffdb 	bl	800ec98 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f012 fc3f 	bl	801356c <osEventFlagsSet>
		ERPA_ON = 1;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		break;
 8000cfa:	e13d      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000cfe:	f016 f97b 	bl	8016ff8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d02:	210c      	movs	r1, #12
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000d06:	f00e f921 	bl	800ef4c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
		break;
 8000d10:	e132      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d12:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d14:	f016 f970 	bl	8016ff8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	483d      	ldr	r0, [pc, #244]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d1c:	f00d ffbc 	bl	800ec98 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 fc20 	bl	801356c <osEventFlagsSet>
		PMT_ON = 1;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
		break;
 8000d38:	e11e      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d3c:	f016 f95c 	bl	8016ff8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d44:	f00e f902 	bl	800ef4c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		break;
 8000d4e:	e113      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d52:	f016 f951 	bl	8016ff8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <HAL_UART_RxCpltCallback+0x79c>)
 8000d5a:	f00d ff9d 	bl	800ec98 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f012 fc01 	bl	801356c <osEventFlagsSet>
		HK_ON = 1;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_UART_RxCpltCallback+0x7a4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
		break;
 8000d76:	e0ff      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
 8000d78:	08017824 	.word	0x08017824
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24000c24 	.word	0x24000c24
 8000d84:	08017830 	.word	0x08017830
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	24000c25 	.word	0x24000c25
 8000d90:	24000c26 	.word	0x24000c26
 8000d94:	24000c27 	.word	0x24000c27
 8000d98:	24000c28 	.word	0x24000c28
 8000d9c:	24000c29 	.word	0x24000c29
 8000da0:	24000c2a 	.word	0x24000c2a
 8000da4:	24000c2b 	.word	0x24000c2b
 8000da8:	24000c2c 	.word	0x24000c2c
 8000dac:	0801783c 	.word	0x0801783c
 8000db0:	08017848 	.word	0x08017848
 8000db4:	08017858 	.word	0x08017858
 8000db8:	08017864 	.word	0x08017864
 8000dbc:	08017870 	.word	0x08017870
 8000dc0:	0801787c 	.word	0x0801787c
 8000dc4:	0801788c 	.word	0x0801788c
 8000dc8:	08017898 	.word	0x08017898
 8000dcc:	080178a4 	.word	0x080178a4
 8000dd0:	080178b0 	.word	0x080178b0
 8000dd4:	080178bc 	.word	0x080178bc
 8000dd8:	080178cc 	.word	0x080178cc
 8000ddc:	080178dc 	.word	0x080178dc
 8000de0:	080178e8 	.word	0x080178e8
 8000de4:	080178f8 	.word	0x080178f8
 8000de8:	24000010 	.word	0x24000010
 8000dec:	240002f4 	.word	0x240002f4
 8000df0:	08017908 	.word	0x08017908
 8000df4:	08017918 	.word	0x08017918
 8000df8:	24000554 	.word	0x24000554
 8000dfc:	24000c6c 	.word	0x24000c6c
 8000e00:	24000c67 	.word	0x24000c67
 8000e04:	24000c60 	.word	0x24000c60
 8000e08:	08017920 	.word	0x08017920
 8000e0c:	0801792c 	.word	0x0801792c
 8000e10:	24000508 	.word	0x24000508
 8000e14:	24000c66 	.word	0x24000c66
 8000e18:	24000c5c 	.word	0x24000c5c
 8000e1c:	08017934 	.word	0x08017934
 8000e20:	0801793c 	.word	0x0801793c
 8000e24:	240005a0 	.word	0x240005a0
 8000e28:	24000c68 	.word	0x24000c68
 8000e2c:	24000c64 	.word	0x24000c64
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e30:	4853      	ldr	r0, [pc, #332]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e32:	f016 f8e1 	bl	8016ff8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	4852      	ldr	r0, [pc, #328]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e3a:	f00e f887 	bl	800ef4c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000e3e:	4b52      	ldr	r3, [pc, #328]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e098      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e46:	4851      	ldr	r0, [pc, #324]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000e48:	f016 f8d6 	bl	8016ff8 <puts>
		if (step < 17) {
 8000e4c:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	f200 808a 	bhi.w	8000f6a <HAL_UART_RxCpltCallback+0x8e2>
			step += 2;
 8000e56:	4b4e      	ldr	r3, [pc, #312]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	4849      	ldr	r0, [pc, #292]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000e74:	f005 f8d3 	bl	800601e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4847      	ldr	r0, [pc, #284]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000e7c:	f004 ff14 	bl	8005ca8 <HAL_DAC_Start>
		}
		break;
 8000e80:	e073      	b.n	8000f6a <HAL_UART_RxCpltCallback+0x8e2>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e82:	4846      	ldr	r0, [pc, #280]	; (8000f9c <HAL_UART_RxCpltCallback+0x914>)
 8000e84:	f016 f8b8 	bl	8016ff8 <puts>
		if (step > 3) {
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d96e      	bls.n	8000f6e <HAL_UART_RxCpltCallback+0x8e6>
			step -= 2;
 8000e90:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3b02      	subs	r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	483a      	ldr	r0, [pc, #232]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000eae:	f005 f8b6 	bl	800601e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4838      	ldr	r0, [pc, #224]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000eb6:	f004 fef7 	bl	8005ca8 <HAL_DAC_Start>
		}
		break;
 8000eba:	e058      	b.n	8000f6e <HAL_UART_RxCpltCallback+0x8e6>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ebc:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <HAL_UART_RxCpltCallback+0x918>)
 8000ebe:	f016 f89b 	bl	8016ff8 <puts>
		if (cadence <= 50000) {
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d851      	bhi.n	8000f72 <HAL_UART_RxCpltCallback+0x8ea>
			cadence *= 2;
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ed6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee2:	e046      	b.n	8000f72 <HAL_UART_RxCpltCallback+0x8ea>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ee4:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <HAL_UART_RxCpltCallback+0x920>)
 8000ee6:	f016 f887 	bl	8016ff8 <puts>
		if (cadence >= 6250) {
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d93f      	bls.n	8000f76 <HAL_UART_RxCpltCallback+0x8ee>
			cadence /= 2;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000efe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000f0a:	e034      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x8ee>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000f0c:	4827      	ldr	r0, [pc, #156]	; (8000fac <HAL_UART_RxCpltCallback+0x924>)
 8000f0e:	f016 f873 	bl	8016ff8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_UART_RxCpltCallback+0x928>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2116      	movs	r1, #22
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 fb27 	bl	801356c <osEventFlagsSet>
		break;
 8000f1e:	e02b      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f20:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <HAL_UART_RxCpltCallback+0x92c>)
 8000f22:	f016 f869 	bl	8016ff8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_UART_RxCpltCallback+0x930>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f014 f8c4 	bl	80150b8 <xTaskResumeFromISR>
		break;
 8000f30:	e022      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f32:	4822      	ldr	r0, [pc, #136]	; (8000fbc <HAL_UART_RxCpltCallback+0x934>)
 8000f34:	f016 f860 	bl	8016ff8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_UART_RxCpltCallback+0x938>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f014 f8bb 	bl	80150b8 <xTaskResumeFromISR>
		break;
 8000f42:	e019      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xAF: {
		sync();
 8000f44:	f001 fa4c 	bl	80023e0 <sync>
		break;
 8000f48:	e016      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xBF: {
		xTaskResumeFromISR(Flight_taskHandle);
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_UART_RxCpltCallback+0x93c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f014 f8b2 	bl	80150b8 <xTaskResumeFromISR>
		break;
 8000f54:	e010      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	case 0xCF: {
		xTaskResumeFromISR(UnFlight_taskHandle);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_UART_RxCpltCallback+0x940>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f014 f8ac 	bl	80150b8 <xTaskResumeFromISR>
		break;
 8000f60:	e00a      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
	}
	default: {
		printf("Unknown Command\n");
 8000f62:	481a      	ldr	r0, [pc, #104]	; (8000fcc <HAL_UART_RxCpltCallback+0x944>)
 8000f64:	f016 f848 	bl	8016ff8 <puts>
		break;
 8000f68:	e006      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f6a:	bf00      	nop
 8000f6c:	e004      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f6e:	bf00      	nop
 8000f70:	e002      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f72:	bf00      	nop
 8000f74:	e000      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x8f0>
		break;
 8000f76:	bf00      	nop
	}
	}
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08017944 	.word	0x08017944
 8000f84:	240005a0 	.word	0x240005a0
 8000f88:	24000c68 	.word	0x24000c68
 8000f8c:	0801794c 	.word	0x0801794c
 8000f90:	2400000c 	.word	0x2400000c
 8000f94:	24000010 	.word	0x24000010
 8000f98:	240002f4 	.word	0x240002f4
 8000f9c:	08017954 	.word	0x08017954
 8000fa0:	08017960 	.word	0x08017960
 8000fa4:	24000008 	.word	0x24000008
 8000fa8:	0801796c 	.word	0x0801796c
 8000fac:	08017978 	.word	0x08017978
 8000fb0:	24000c6c 	.word	0x24000c6c
 8000fb4:	08017988 	.word	0x08017988
 8000fb8:	24000750 	.word	0x24000750
 8000fbc:	08017994 	.word	0x08017994
 8000fc0:	240009b0 	.word	0x240009b0
 8000fc4:	24000c1c 	.word	0x24000c1c
 8000fc8:	24000c20 	.word	0x24000c20
 8000fcc:	080179a0 	.word	0x080179a0

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f003 f8d4 	bl	8004180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f8c8 	bl	800116c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fdc:	f000 f946 	bl	800126c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 ff0a 	bl	8001df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f000 fed0 	bl	8001d88 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fe8:	f000 fdca 	bl	8001b80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fec:	f000 fe64 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ff0:	f000 fb52 	bl	8001698 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ff4:	f000 fc48 	bl	8001888 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ff8:	f000 fd4c 	bl	8001a94 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ffc:	f000 fc9c 	bl	8001938 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001000:	f000 fa86 	bl	8001510 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001004:	f000 f962 	bl	80012cc <MX_ADC1_Init>
  MX_DAC1_Init();
 8001008:	f000 fb14 	bl	8001634 <MX_DAC1_Init>
  MX_SPI1_Init();
 800100c:	f000 fbe4 	bl	80017d8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001010:	f000 fb84 	bl	800171c <MX_RTC_Init>
  MX_TIM4_Init();
 8001014:	f000 fe02 	bl	8001c1c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f012 f930 	bl	801327c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 800101c:	2200      	movs	r2, #0
 800101e:	2108      	movs	r1, #8
 8001020:	2080      	movs	r0, #128	; 0x80
 8001022:	f012 fba0 	bl	8013766 <osMessageQueueNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <main+0x118>)
 800102a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <main+0x11c>)
 800102e:	2100      	movs	r1, #0
 8001030:	482f      	ldr	r0, [pc, #188]	; (80010f0 <main+0x120>)
 8001032:	f012 f96d 	bl	8013310 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <main+0x124>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <main+0x128>)
 800103e:	2100      	movs	r1, #0
 8001040:	482e      	ldr	r0, [pc, #184]	; (80010fc <main+0x12c>)
 8001042:	f012 f965 	bl	8013310 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <main+0x130>)
 800104a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 800104c:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <main+0x134>)
 800104e:	2100      	movs	r1, #0
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <main+0x138>)
 8001052:	f012 f95d 	bl	8013310 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a2c      	ldr	r2, [pc, #176]	; (800110c <main+0x13c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 800105c:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <main+0x140>)
 800105e:	2100      	movs	r1, #0
 8001060:	482c      	ldr	r0, [pc, #176]	; (8001114 <main+0x144>)
 8001062:	f012 f955 	bl	8013310 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <main+0x148>)
 800106a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 800106c:	4a2b      	ldr	r2, [pc, #172]	; (800111c <main+0x14c>)
 800106e:	2100      	movs	r1, #0
 8001070:	482b      	ldr	r0, [pc, #172]	; (8001120 <main+0x150>)
 8001072:	f012 f94d 	bl	8013310 <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <main+0x154>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <main+0x158>)
 800107e:	2100      	movs	r1, #0
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <main+0x15c>)
 8001082:	f012 f945 	bl	8013310 <osThreadNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <main+0x160>)
 800108a:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 800108c:	4a29      	ldr	r2, [pc, #164]	; (8001134 <main+0x164>)
 800108e:	2100      	movs	r1, #0
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <main+0x168>)
 8001092:	f012 f93d 	bl	8013310 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <main+0x16c>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <main+0x170>)
 800109e:	2100      	movs	r1, #0
 80010a0:	4828      	ldr	r0, [pc, #160]	; (8001144 <main+0x174>)
 80010a2:	f012 f935 	bl	8013310 <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <main+0x178>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* creation of Flight_task */
  Flight_taskHandle = osThreadNew(Flight_init, NULL, &Flight_task_attributes);
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <main+0x17c>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4827      	ldr	r0, [pc, #156]	; (8001150 <main+0x180>)
 80010b2:	f012 f92d 	bl	8013310 <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <main+0x184>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of UnFlight_task */
  UnFlight_taskHandle = osThreadNew(UnFlight_init, NULL, &UnFlight_task_attributes);
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <main+0x188>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4826      	ldr	r0, [pc, #152]	; (800115c <main+0x18c>)
 80010c2:	f012 f925 	bl	8013310 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a25      	ldr	r2, [pc, #148]	; (8001160 <main+0x190>)
 80010ca:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f012 fa0d 	bl	80134ec <osEventFlagsNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <main+0x194>)
 80010d6:	6013      	str	r3, [r2, #0]
	system_setup();
 80010d8:	f001 f9ec 	bl	80024b4 <system_setup>
	printf("Starting kernal...\n");
 80010dc:	4822      	ldr	r0, [pc, #136]	; (8001168 <main+0x198>)
 80010de:	f015 ff8b 	bl	8016ff8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e2:	f012 f8ef 	bl	80132c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010e6:	e7fe      	b.n	80010e6 <main+0x116>
 80010e8:	24000c50 	.word	0x24000c50
 80010ec:	080179fc 	.word	0x080179fc
 80010f0:	08002c79 	.word	0x08002c79
 80010f4:	24000744 	.word	0x24000744
 80010f8:	08017a20 	.word	0x08017a20
 80010fc:	08002cbd 	.word	0x08002cbd
 8001100:	24000748 	.word	0x24000748
 8001104:	08017a44 	.word	0x08017a44
 8001108:	08002cfd 	.word	0x08002cfd
 800110c:	2400074c 	.word	0x2400074c
 8001110:	08017a68 	.word	0x08017a68
 8001114:	08002d41 	.word	0x08002d41
 8001118:	24000750 	.word	0x24000750
 800111c:	08017a8c 	.word	0x08017a8c
 8001120:	08002de9 	.word	0x08002de9
 8001124:	240009b0 	.word	0x240009b0
 8001128:	08017ab0 	.word	0x08017ab0
 800112c:	08002e91 	.word	0x08002e91
 8001130:	24000c10 	.word	0x24000c10
 8001134:	08017ad4 	.word	0x08017ad4
 8001138:	08002f49 	.word	0x08002f49
 800113c:	24000c14 	.word	0x24000c14
 8001140:	08017af8 	.word	0x08017af8
 8001144:	08003041 	.word	0x08003041
 8001148:	24000c18 	.word	0x24000c18
 800114c:	08017b1c 	.word	0x08017b1c
 8001150:	0800307d 	.word	0x0800307d
 8001154:	24000c1c 	.word	0x24000c1c
 8001158:	08017b40 	.word	0x08017b40
 800115c:	080031d9 	.word	0x080031d9
 8001160:	24000c20 	.word	0x24000c20
 8001164:	24000c6c 	.word	0x24000c6c
 8001168:	080179b0 	.word	0x080179b0

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09c      	sub	sp, #112	; 0x70
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	224c      	movs	r2, #76	; 0x4c
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f015 fde6 	bl	8016d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f015 fde0 	bl	8016d4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800118c:	2002      	movs	r0, #2
 800118e:	f008 ffe1 	bl	800a154 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <SystemClock_Config+0xf8>)
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <SystemClock_Config+0xf8>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <SystemClock_Config+0xf8>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <SystemClock_Config+0xfc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b4:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <SystemClock_Config+0xfc>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <SystemClock_Config+0xfc>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011c8:	bf00      	nop
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <SystemClock_Config+0xfc>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d6:	d1f8      	bne.n	80011ca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011d8:	2303      	movs	r3, #3
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80011e2:	2309      	movs	r3, #9
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	2302      	movs	r3, #2
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011f6:	2320      	movs	r3, #32
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fe:	2304      	movs	r3, #4
 8001200:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001206:	2308      	movs	r3, #8
 8001208:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800120a:	2300      	movs	r3, #0
 800120c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4618      	mov	r0, r3
 8001218:	f008 ffd6 	bl	800a1c8 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001222:	f002 f86b 	bl	80032fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	233f      	movs	r3, #63	; 0x3f
 8001228:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2303      	movs	r3, #3
 800122c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f009 fc16 	bl	800aa7c <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001256:	f002 f851 	bl	80032fc <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3770      	adds	r7, #112	; 0x70
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	58000400 	.word	0x58000400
 8001268:	58024800 	.word	0x58024800

0800126c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0b0      	sub	sp, #192	; 0xc0
 8001270:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	22c0      	movs	r2, #192	; 0xc0
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f015 fd67 	bl	8016d4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800127e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800128e:	2320      	movs	r3, #32
 8001290:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001292:	2308      	movs	r3, #8
 8001294:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 ffb0 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012be:	f002 f81d 	bl	80032fc <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	37c0      	adds	r7, #192	; 0xc0
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f0:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <MX_ADC1_Init+0x210>)
 80012f2:	4a7b      	ldr	r2, [pc, #492]	; (80014e0 <MX_ADC1_Init+0x214>)
 80012f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012f6:	4b79      	ldr	r3, [pc, #484]	; (80014dc <MX_ADC1_Init+0x210>)
 80012f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <MX_ADC1_Init+0x210>)
 8001300:	2208      	movs	r2, #8
 8001302:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001304:	4b75      	ldr	r3, [pc, #468]	; (80014dc <MX_ADC1_Init+0x210>)
 8001306:	2201      	movs	r2, #1
 8001308:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130a:	4b74      	ldr	r3, [pc, #464]	; (80014dc <MX_ADC1_Init+0x210>)
 800130c:	2204      	movs	r2, #4
 800130e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001310:	4b72      	ldr	r3, [pc, #456]	; (80014dc <MX_ADC1_Init+0x210>)
 8001312:	2200      	movs	r2, #0
 8001314:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001316:	4b71      	ldr	r3, [pc, #452]	; (80014dc <MX_ADC1_Init+0x210>)
 8001318:	2201      	movs	r2, #1
 800131a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800131c:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <MX_ADC1_Init+0x210>)
 800131e:	220b      	movs	r2, #11
 8001320:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001322:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <MX_ADC1_Init+0x210>)
 8001324:	2200      	movs	r2, #0
 8001326:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001328:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <MX_ADC1_Init+0x210>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132e:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <MX_ADC1_Init+0x210>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001334:	4b69      	ldr	r3, [pc, #420]	; (80014dc <MX_ADC1_Init+0x210>)
 8001336:	2203      	movs	r2, #3
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800133a:	4b68      	ldr	r3, [pc, #416]	; (80014dc <MX_ADC1_Init+0x210>)
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001342:	4b66      	ldr	r3, [pc, #408]	; (80014dc <MX_ADC1_Init+0x210>)
 8001344:	2200      	movs	r2, #0
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <MX_ADC1_Init+0x210>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	4862      	ldr	r0, [pc, #392]	; (80014dc <MX_ADC1_Init+0x210>)
 8001352:	f003 f9a1 	bl	8004698 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800135c:	f001 ffce 	bl	80032fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	485c      	ldr	r0, [pc, #368]	; (80014dc <MX_ADC1_Init+0x210>)
 800136c:	f004 fabc 	bl	80058e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001376:	f001 ffc1 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <MX_ADC1_Init+0x218>)
 800137c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137e:	2306      	movs	r3, #6
 8001380:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001382:	2307      	movs	r3, #7
 8001384:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001386:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800138a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138c:	2304      	movs	r3, #4
 800138e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	484f      	ldr	r0, [pc, #316]	; (80014dc <MX_ADC1_Init+0x210>)
 800139e:	f003 fbff 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013a8:	f001 ffa8 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ac:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <MX_ADC1_Init+0x21c>)
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b0:	230c      	movs	r3, #12
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4848      	ldr	r0, [pc, #288]	; (80014dc <MX_ADC1_Init+0x210>)
 80013ba:	f003 fbf1 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80013c4:	f001 ff9a 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <MX_ADC1_Init+0x220>)
 80013ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013cc:	2312      	movs	r3, #18
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4841      	ldr	r0, [pc, #260]	; (80014dc <MX_ADC1_Init+0x210>)
 80013d6:	f003 fbe3 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013e0:	f001 ff8c 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <MX_ADC1_Init+0x224>)
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013e8:	2318      	movs	r3, #24
 80013ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	483a      	ldr	r0, [pc, #232]	; (80014dc <MX_ADC1_Init+0x210>)
 80013f2:	f003 fbd5 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013fc:	f001 ff7e 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <MX_ADC1_Init+0x228>)
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4833      	ldr	r0, [pc, #204]	; (80014dc <MX_ADC1_Init+0x210>)
 8001410:	f003 fbc6 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800141a:	f001 ff6f 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <MX_ADC1_Init+0x22c>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001422:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	482b      	ldr	r0, [pc, #172]	; (80014dc <MX_ADC1_Init+0x210>)
 800142e:	f003 fbb7 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001438:	f001 ff60 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_ADC1_Init+0x230>)
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001440:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001444:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4824      	ldr	r0, [pc, #144]	; (80014dc <MX_ADC1_Init+0x210>)
 800144c:	f003 fba8 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001456:	f001 ff51 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_ADC1_Init+0x234>)
 800145c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800145e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	481c      	ldr	r0, [pc, #112]	; (80014dc <MX_ADC1_Init+0x210>)
 800146a:	f003 fb99 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001474:	f001 ff42 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_ADC1_Init+0x238>)
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800147c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001480:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4815      	ldr	r0, [pc, #84]	; (80014dc <MX_ADC1_Init+0x210>)
 8001488:	f003 fb8a 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001492:	f001 ff33 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_ADC1_Init+0x23c>)
 8001498:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800149a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_ADC1_Init+0x210>)
 80014a6:	f003 fb7b 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80014b0:	f001 ff24 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_ADC1_Init+0x240>)
 80014b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80014b8:	f240 2306 	movw	r3, #518	; 0x206
 80014bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_ADC1_Init+0x210>)
 80014c4:	f003 fb6c 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014ce:	f001 ff15 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2400013c 	.word	0x2400013c
 80014e0:	40022000 	.word	0x40022000
 80014e4:	0c900008 	.word	0x0c900008
 80014e8:	10c00010 	.word	0x10c00010
 80014ec:	14f00020 	.word	0x14f00020
 80014f0:	1d500080 	.word	0x1d500080
 80014f4:	21800100 	.word	0x21800100
 80014f8:	25b00200 	.word	0x25b00200
 80014fc:	2a000400 	.word	0x2a000400
 8001500:	2e300800 	.word	0x2e300800
 8001504:	3ac04000 	.word	0x3ac04000
 8001508:	3ef08000 	.word	0x3ef08000
 800150c:	47520000 	.word	0x47520000

08001510 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <MX_ADC3_Init+0x110>)
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <MX_ADC3_Init+0x114>)
 800152c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_ADC3_Init+0x110>)
 8001530:	2208      	movs	r2, #8
 8001532:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <MX_ADC3_Init+0x110>)
 8001536:	2201      	movs	r2, #1
 8001538:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <MX_ADC3_Init+0x110>)
 800153c:	2204      	movs	r2, #4
 800153e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <MX_ADC3_Init+0x110>)
 8001542:	2200      	movs	r2, #0
 8001544:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <MX_ADC3_Init+0x110>)
 8001548:	2201      	movs	r2, #1
 800154a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <MX_ADC3_Init+0x110>)
 800154e:	2204      	movs	r2, #4
 8001550:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <MX_ADC3_Init+0x110>)
 8001554:	2200      	movs	r2, #0
 8001556:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <MX_ADC3_Init+0x110>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_ADC3_Init+0x110>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <MX_ADC3_Init+0x110>)
 8001566:	2203      	movs	r2, #3
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_ADC3_Init+0x110>)
 800156c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_ADC3_Init+0x110>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_ADC3_Init+0x110>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001580:	4827      	ldr	r0, [pc, #156]	; (8001620 <MX_ADC3_Init+0x110>)
 8001582:	f003 f889 	bl	8004698 <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800158c:	f001 feb6 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <MX_ADC3_Init+0x118>)
 8001592:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001594:	2306      	movs	r3, #6
 8001596:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001598:	2307      	movs	r3, #7
 800159a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a2:	2304      	movs	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	481b      	ldr	r0, [pc, #108]	; (8001620 <MX_ADC3_Init+0x110>)
 80015b4:	f003 faf4 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015be:	f001 fe9d 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_ADC3_Init+0x11c>)
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015c6:	230c      	movs	r3, #12
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MX_ADC3_Init+0x110>)
 80015d0:	f003 fae6 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015da:	f001 fe8f 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015de:	2301      	movs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e2:	2312      	movs	r3, #18
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_ADC3_Init+0x110>)
 80015ec:	f003 fad8 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015f6:	f001 fe81 	bl	80032fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MX_ADC3_Init+0x120>)
 80015fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015fe:	2318      	movs	r3, #24
 8001600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_ADC3_Init+0x110>)
 8001608:	f003 faca 	bl	8004ba0 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001612:	f001 fe73 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	240001a0 	.word	0x240001a0
 8001624:	58026000 	.word	0x58026000
 8001628:	cb840000 	.word	0xcb840000
 800162c:	cfb80000 	.word	0xcfb80000
 8001630:	04300002 	.word	0x04300002

08001634 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2224      	movs	r2, #36	; 0x24
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f015 fb83 	bl	8016d4c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_DAC1_Init+0x5c>)
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_DAC1_Init+0x60>)
 800164a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <MX_DAC1_Init+0x5c>)
 800164e:	f004 fb09 	bl	8005c64 <HAL_DAC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001658:	f001 fe50 	bl	80032fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001660:	230a      	movs	r3, #10
 8001662:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_DAC1_Init+0x5c>)
 8001678:	f004 fd24 	bl	80060c4 <HAL_DAC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001682:	f001 fe3b 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	240002f4 	.word	0x240002f4
 8001694:	40007400 	.word	0x40007400

08001698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_I2C1_Init+0x78>)
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <MX_I2C1_Init+0x7c>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_I2C1_Init+0x78>)
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <MX_I2C1_Init+0x80>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_I2C1_Init+0x78>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_I2C1_Init+0x78>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_I2C1_Init+0x78>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_I2C1_Init+0x78>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_I2C1_Init+0x78>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C1_Init+0x78>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_I2C1_Init+0x78>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d2:	480f      	ldr	r0, [pc, #60]	; (8001710 <MX_I2C1_Init+0x78>)
 80016d4:	f007 fef6 	bl	80094c4 <HAL_I2C_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016de:	f001 fe0d 	bl	80032fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	480a      	ldr	r0, [pc, #40]	; (8001710 <MX_I2C1_Init+0x78>)
 80016e6:	f008 fc3d 	bl	8009f64 <HAL_I2CEx_ConfigAnalogFilter>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016f0:	f001 fe04 	bl	80032fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016f4:	2100      	movs	r1, #0
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <MX_I2C1_Init+0x78>)
 80016f8:	f008 fc7f 	bl	8009ffa <HAL_I2CEx_ConfigDigitalFilter>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001702:	f001 fdfb 	bl	80032fc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001706:	2001      	movs	r0, #1
 8001708:	f008 fcc4 	bl	800a094 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	24000380 	.word	0x24000380
 8001714:	40005400 	.word	0x40005400
 8001718:	0020081f 	.word	0x0020081f

0800171c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001736:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <MX_RTC_Init+0xb8>)
 8001738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_RTC_Init+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001742:	2263      	movs	r2, #99	; 0x63
 8001744:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001748:	f242 720f 	movw	r2, #9999	; 0x270f
 800174c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_RTC_Init+0xb4>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001766:	481a      	ldr	r0, [pc, #104]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001768:	f00c fa54 	bl	800dc14 <HAL_RTC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001772:	f001 fdc3 	bl	80032fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001776:	2300      	movs	r3, #0
 8001778:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800177a:	2300      	movs	r3, #0
 800177c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800177e:	2300      	movs	r3, #0
 8001780:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <MX_RTC_Init+0xb4>)
 8001792:	f00c fac1 	bl	800dd18 <HAL_RTC_SetTime>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800179c:	f001 fdae 	bl	80032fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017a4:	2301      	movs	r3, #1
 80017a6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <MX_RTC_Init+0xb4>)
 80017b8:	f00c fba8 	bl	800df0c <HAL_RTC_SetDate>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80017c2:	f001 fd9b 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	240003d4 	.word	0x240003d4
 80017d4:	58004000 	.word	0x58004000

080017d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <MX_SPI1_Init+0xac>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017f4:	220f      	movs	r2, #15
 80017f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_SPI1_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001806:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800180a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_SPI1_Init+0xa8>)
 800180e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_SPI1_Init+0xa8>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001828:	2200      	movs	r2, #0
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_SPI1_Init+0xa8>)
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_SPI1_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_SPI1_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_SPI1_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_SPI1_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_SPI1_Init+0xa8>)
 800186c:	f00c fcf4 	bl	800e258 <HAL_SPI_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001876:	f001 fd41 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	240003f8 	.word	0x240003f8
 8001884:	40013000 	.word	0x40013000

08001888 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <MX_SPI2_Init+0xa8>)
 800188e:	4a29      	ldr	r2, [pc, #164]	; (8001934 <MX_SPI2_Init+0xac>)
 8001890:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001894:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001898:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MX_SPI2_Init+0xa8>)
 800189c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018a4:	220f      	movs	r2, #15
 80018a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80018c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_SPI2_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001904:	2200      	movs	r2, #0
 8001906:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_SPI2_Init+0xa8>)
 800190a:	2200      	movs	r2, #0
 800190c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001910:	2200      	movs	r2, #0
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_SPI2_Init+0xa8>)
 8001916:	2200      	movs	r2, #0
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_SPI2_Init+0xa8>)
 800191c:	f00c fc9c 	bl	800e258 <HAL_SPI_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001926:	f001 fce9 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	24000480 	.word	0x24000480
 8001934:	40003800 	.word	0x40003800

08001938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b09a      	sub	sp, #104	; 0x68
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	615a      	str	r2, [r3, #20]
 800196a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	222c      	movs	r2, #44	; 0x2c
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f015 f9ea 	bl	8016d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <MX_TIM1_Init+0x154>)
 800197a:	4a45      	ldr	r2, [pc, #276]	; (8001a90 <MX_TIM1_Init+0x158>)
 800197c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800197e:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <MX_TIM1_Init+0x154>)
 8001980:	2231      	movs	r2, #49	; 0x31
 8001982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <MX_TIM1_Init+0x154>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <MX_TIM1_Init+0x154>)
 800198c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001990:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <MX_TIM1_Init+0x154>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001998:	4b3c      	ldr	r3, [pc, #240]	; (8001a8c <MX_TIM1_Init+0x154>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <MX_TIM1_Init+0x154>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019a4:	4839      	ldr	r0, [pc, #228]	; (8001a8c <MX_TIM1_Init+0x154>)
 80019a6:	f00d f8a8 	bl	800eafa <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f001 fca4 	bl	80032fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019be:	4619      	mov	r1, r3
 80019c0:	4832      	ldr	r0, [pc, #200]	; (8001a8c <MX_TIM1_Init+0x154>)
 80019c2:	f00d fe23 	bl	800f60c <HAL_TIM_ConfigClockSource>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019cc:	f001 fc96 	bl	80032fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019d0:	482e      	ldr	r0, [pc, #184]	; (8001a8c <MX_TIM1_Init+0x154>)
 80019d2:	f00d fb9f 	bl	800f114 <HAL_TIM_PWM_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019dc:	f001 fc8e 	bl	80032fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4826      	ldr	r0, [pc, #152]	; (8001a8c <MX_TIM1_Init+0x154>)
 80019f4:	f00e fb60 	bl	80100b8 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019fe:	f001 fc7d 	bl	80032fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a02:	2360      	movs	r3, #96	; 0x60
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001a06:	f240 13df 	movw	r3, #479	; 0x1df
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a24:	2200      	movs	r2, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4818      	ldr	r0, [pc, #96]	; (8001a8c <MX_TIM1_Init+0x154>)
 8001a2a:	f00d fcdb 	bl	800f3e4 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a34:	f001 fc62 	bl	80032fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_TIM1_Init+0x154>)
 8001a6e:	f00e fbb1 	bl	80101d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a78:	f001 fc40 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <MX_TIM1_Init+0x154>)
 8001a7e:	f001 ffed 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 8001a82:	bf00      	nop
 8001a84:	3768      	adds	r7, #104	; 0x68
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	24000508 	.word	0x24000508
 8001a90:	40010000 	.word	0x40010000

08001a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08e      	sub	sp, #56	; 0x38
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001ad0:	2231      	movs	r2, #49	; 0x31
 8001ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001adc:	f640 4234 	movw	r2, #3124	; 0xc34
 8001ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aee:	4823      	ldr	r0, [pc, #140]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001af0:	f00d f803 	bl	800eafa <HAL_TIM_Base_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001afa:	f001 fbff 	bl	80032fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481c      	ldr	r0, [pc, #112]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001b0c:	f00d fd7e 	bl	800f60c <HAL_TIM_ConfigClockSource>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b16:	f001 fbf1 	bl	80032fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b1a:	4818      	ldr	r0, [pc, #96]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001b1c:	f00d fafa 	bl	800f114 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b26:	f001 fbe9 	bl	80032fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4810      	ldr	r0, [pc, #64]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001b3a:	f00e fabd 	bl	80100b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b44:	f001 fbda 	bl	80032fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	; 0x60
 8001b4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001b60:	f00d fc40 	bl	800f3e4 <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b6a:	f001 fbc7 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b6e:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MX_TIM2_Init+0xe8>)
 8001b70:	f001 ff74 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 8001b74:	bf00      	nop
 8001b76:	3738      	adds	r7, #56	; 0x38
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	24000554 	.word	0x24000554

08001b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <MX_TIM3_Init+0x98>)
 8001ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001ba6:	2209      	movs	r2, #9
 8001ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bb2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc4:	4813      	ldr	r0, [pc, #76]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bc6:	f00c ff98 	bl	800eafa <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bd0:	f001 fb94 	bl	80032fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001be2:	f00d fd13 	bl	800f60c <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bec:	f001 fb86 	bl	80032fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bfe:	f00e fa5b 	bl	80100b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f001 fb78 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	240005a0 	.word	0x240005a0
 8001c18:	40000400 	.word	0x40000400

08001c1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <MX_TIM4_Init+0x98>)
 8001c3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c42:	2209      	movs	r2, #9
 8001c44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c4e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c62:	f00c ff4a 	bl	800eafa <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c6c:	f001 fb46 	bl	80032fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c7e:	f00d fcc5 	bl	800f60c <HAL_TIM_ConfigClockSource>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c88:	f001 fb38 	bl	80032fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_TIM4_Init+0x94>)
 8001c9a:	f00e fa0d 	bl	80100b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ca4:	f001 fb2a 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	240005ec 	.word	0x240005ec
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cbe:	4a31      	ldr	r2, [pc, #196]	; (8001d84 <MX_USART1_UART_Init+0xcc>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cc4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d00:	481f      	ldr	r0, [pc, #124]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d02:	f00e fb03 	bl	801030c <HAL_UART_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d0c:	f001 faf6 	bl	80032fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d10:	2100      	movs	r1, #0
 8001d12:	481b      	ldr	r0, [pc, #108]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d14:	f011 f9a3 	bl	801305e <HAL_UARTEx_SetTxFifoThreshold>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d1e:	f001 faed 	bl	80032fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d22:	2100      	movs	r1, #0
 8001d24:	4816      	ldr	r0, [pc, #88]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d26:	f011 f9d8 	bl	80130da <HAL_UARTEx_SetRxFifoThreshold>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d30:	f001 fae4 	bl	80032fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d36:	f011 f959 	bl	8012fec <HAL_UARTEx_DisableFifoMode>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d40:	f001 fadc 	bl	80032fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d4a:	f011 f9c6 	bl	80130da <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001d4e:	480c      	ldr	r0, [pc, #48]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d50:	f011 f911 	bl	8012f76 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d56:	f011 f8db 	bl	8012f10 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d68:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <MX_USART1_UART_Init+0xc8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d78:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	24000638 	.word	0x24000638
 8001d84:	40011000 	.word	0x40011000

08001d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_DMA_Init+0x6c>)
 8001d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <MX_DMA_Init+0x6c>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_DMA_Init+0x6c>)
 8001da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2105      	movs	r1, #5
 8001db0:	200b      	movs	r0, #11
 8001db2:	f003 ff2f 	bl	8005c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001db6:	200b      	movs	r0, #11
 8001db8:	f003 ff46 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2105      	movs	r1, #5
 8001dc0:	200c      	movs	r0, #12
 8001dc2:	f003 ff27 	bl	8005c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dc6:	200c      	movs	r0, #12
 8001dc8:	f003 ff3e 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2105      	movs	r1, #5
 8001dd0:	200d      	movs	r0, #13
 8001dd2:	f003 ff1f 	bl	8005c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001dd6:	200d      	movs	r0, #13
 8001dd8:	f003 ff36 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2105      	movs	r1, #5
 8001de0:	2010      	movs	r0, #16
 8001de2:	f003 ff17 	bl	8005c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001de6:	2010      	movs	r0, #16
 8001de8:	f003 ff2e 	bl	8005c48 <HAL_NVIC_EnableIRQ>

}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	58024400 	.word	0x58024400

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_GPIO_Init+0xe8>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e8c:	4815      	ldr	r0, [pc, #84]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e8e:	f007 faff 	bl	8009490 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2164      	movs	r1, #100	; 0x64
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <MX_GPIO_Init+0xf0>)
 8001e98:	f007 fafa 	bl	8009490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e9c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001ea0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001eb6:	f007 f923 	bl	8009100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001eba:	2364      	movs	r3, #100	; 0x64
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_GPIO_Init+0xf0>)
 8001ed2:	f007 f915 	bl	8009100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020800 	.word	0x58020800
 8001ee8:	58020400 	.word	0x58020400

08001eec <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	b299      	uxth	r1, r3
 8001efe:	f107 0208 	add.w	r2, r7, #8
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4817      	ldr	r0, [pc, #92]	; (8001f68 <poll_i2c_sensor+0x7c>)
 8001f0c:	f007 fb76 	bl	80095fc <HAL_I2C_Master_Transmit>
 8001f10:	4603      	mov	r3, r0
 8001f12:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001f1a:	4814      	ldr	r0, [pc, #80]	; (8001f6c <poll_i2c_sensor+0x80>)
 8001f1c:	f015 f86c 	bl	8016ff8 <puts>
 8001f20:	e01c      	b.n	8001f5c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	b299      	uxth	r1, r3
 8001f26:	f107 0208 	add.w	r2, r7, #8
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2302      	movs	r3, #2
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <poll_i2c_sensor+0x7c>)
 8001f34:	f007 fc7a 	bl	800982c <HAL_I2C_Master_Receive>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001f42:	480b      	ldr	r0, [pc, #44]	; (8001f70 <poll_i2c_sensor+0x84>)
 8001f44:	f015 f858 	bl	8016ff8 <puts>
 8001f48:	e008      	b.n	8001f5c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001f4a:	7a3b      	ldrb	r3, [r7, #8]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001f50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f54:	7a7a      	ldrb	r2, [r7, #9]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	10db      	asrs	r3, r3, #3
 8001f5a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	24000380 	.word	0x24000380
 8001f6c:	080179c4 	.word	0x080179c4
 8001f70:	080179d4 	.word	0x080179d4

08001f74 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f7c:	f107 010c 	add.w	r1, r7, #12
 8001f80:	2301      	movs	r3, #1
 8001f82:	2201      	movs	r2, #1
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <receive_pmt_spi+0x44>)
 8001f86:	f00c fa8b 	bl	800e4a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f8e:	7b7b      	ldrb	r3, [r7, #13]
 8001f90:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <receive_pmt_spi+0x44>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <receive_pmt_spi+0x44>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa0:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7bba      	ldrb	r2, [r7, #14]
 8001fa6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3301      	adds	r3, #1
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	701a      	strb	r2, [r3, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	240003f8 	.word	0x240003f8

08001fbc <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001fc4:	f107 010c 	add.w	r1, r7, #12
 8001fc8:	2364      	movs	r3, #100	; 0x64
 8001fca:	2201      	movs	r2, #1
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <receive_erpa_spi+0x44>)
 8001fce:	f00c fa67 	bl	800e4a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <receive_erpa_spi+0x44>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <receive_erpa_spi+0x44>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fe8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7bba      	ldrb	r2, [r7, #14]
 8001fee:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	701a      	strb	r2, [r3, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	24000480 	.word	0x24000480

08002004 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <receive_erpa_adc+0x20>)
 800200e:	885b      	ldrh	r3, [r3, #2]
 8002010:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	89fa      	ldrh	r2, [r7, #14]
 8002016:	801a      	strh	r2, [r3, #0]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	24000cc0 	.word	0x24000cc0

08002028 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002030:	2390      	movs	r3, #144	; 0x90
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff5a 	bl	8001eec <poll_i2c_sensor>
 8002038:	4603      	mov	r3, r0
 800203a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800203c:	2394      	movs	r3, #148	; 0x94
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff54 	bl	8001eec <poll_i2c_sensor>
 8002044:	4603      	mov	r3, r0
 8002046:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002048:	2392      	movs	r3, #146	; 0x92
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff4e 	bl	8001eec <poll_i2c_sensor>
 8002050:	4603      	mov	r3, r0
 8002052:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002054:	2396      	movs	r3, #150	; 0x96
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff48 	bl	8001eec <poll_i2c_sensor>
 800205c:	4603      	mov	r3, r0
 800205e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	89fa      	ldrh	r2, [r7, #14]
 8002064:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3302      	adds	r3, #2
 800206a:	89ba      	ldrh	r2, [r7, #12]
 800206c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	897a      	ldrh	r2, [r7, #10]
 8002074:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3306      	adds	r3, #6
 800207a:	893a      	ldrh	r2, [r7, #8]
 800207c:	801a      	strh	r2, [r3, #0]
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <receive_hk_adc1+0xa0>)
 8002092:	8a9b      	ldrh	r3, [r3, #20]
 8002094:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <receive_hk_adc1+0xa0>)
 8002098:	8a1b      	ldrh	r3, [r3, #16]
 800209a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <receive_hk_adc1+0xa0>)
 800209e:	899b      	ldrh	r3, [r3, #12]
 80020a0:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <receive_hk_adc1+0xa0>)
 80020a4:	8a5b      	ldrh	r3, [r3, #18]
 80020a6:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <receive_hk_adc1+0xa0>)
 80020aa:	889b      	ldrh	r3, [r3, #4]
 80020ac:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <receive_hk_adc1+0xa0>)
 80020b0:	88db      	ldrh	r3, [r3, #6]
 80020b2:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <receive_hk_adc1+0xa0>)
 80020b6:	89db      	ldrh	r3, [r3, #14]
 80020b8:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <receive_hk_adc1+0xa0>)
 80020bc:	891b      	ldrh	r3, [r3, #8]
 80020be:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <receive_hk_adc1+0xa0>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <receive_hk_adc1+0xa0>)
 80020c8:	895b      	ldrh	r3, [r3, #10]
 80020ca:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8bfa      	ldrh	r2, [r7, #30]
 80020d0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	8bba      	ldrh	r2, [r7, #28]
 80020d8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	8b7a      	ldrh	r2, [r7, #26]
 80020e0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3306      	adds	r3, #6
 80020e6:	8b3a      	ldrh	r2, [r7, #24]
 80020e8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3308      	adds	r3, #8
 80020ee:	8afa      	ldrh	r2, [r7, #22]
 80020f0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	330a      	adds	r3, #10
 80020f6:	8aba      	ldrh	r2, [r7, #20]
 80020f8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	330c      	adds	r3, #12
 80020fe:	8a7a      	ldrh	r2, [r7, #18]
 8002100:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	330e      	adds	r3, #14
 8002106:	8a3a      	ldrh	r2, [r7, #16]
 8002108:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3310      	adds	r3, #16
 800210e:	89fa      	ldrh	r2, [r7, #14]
 8002110:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3312      	adds	r3, #18
 8002116:	89ba      	ldrh	r2, [r7, #12]
 8002118:	801a      	strh	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	24000cc0 	.word	0x24000cc0

0800212c <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <receive_hk_adc3+0x4c>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <receive_hk_adc3+0x4c>)
 800213c:	885b      	ldrh	r3, [r3, #2]
 800213e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <receive_hk_adc3+0x4c>)
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <receive_hk_adc3+0x4c>)
 8002148:	88db      	ldrh	r3, [r3, #6]
 800214a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	89fa      	ldrh	r2, [r7, #14]
 8002150:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3302      	adds	r3, #2
 8002156:	89ba      	ldrh	r2, [r7, #12]
 8002158:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	897a      	ldrh	r2, [r7, #10]
 8002160:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3306      	adds	r3, #6
 8002166:	893a      	ldrh	r2, [r7, #8]
 8002168:	801a      	strh	r2, [r3, #0]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	24000ce0 	.word	0x24000ce0

0800217c <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <get_current_step+0xc0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800218e:	4293      	cmp	r3, r2
 8002190:	d04a      	beq.n	8002228 <get_current_step+0xac>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002198:	da48      	bge.n	800222c <get_current_step+0xb0>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d03f      	beq.n	8002224 <get_current_step+0xa8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021aa:	4293      	cmp	r3, r2
 80021ac:	dc3e      	bgt.n	800222c <get_current_step+0xb0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d033      	beq.n	8002220 <get_current_step+0xa4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021be:	da35      	bge.n	800222c <get_current_step+0xb0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d028      	beq.n	800221c <get_current_step+0xa0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021d0:	4293      	cmp	r3, r2
 80021d2:	dc2b      	bgt.n	800222c <get_current_step+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f240 7245 	movw	r2, #1861	; 0x745
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01c      	beq.n	8002218 <get_current_step+0x9c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f240 7245 	movw	r2, #1861	; 0x745
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dc21      	bgt.n	800222c <get_current_step+0xb0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d010      	beq.n	8002214 <get_current_step+0x98>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021f8:	4293      	cmp	r3, r2
 80021fa:	dc17      	bgt.n	800222c <get_current_step+0xb0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <get_current_step+0x90>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002208:	d002      	beq.n	8002210 <get_current_step+0x94>
 800220a:	e00f      	b.n	800222c <get_current_step+0xb0>
	case 0:
		return 0;
 800220c:	2300      	movs	r3, #0
 800220e:	e00e      	b.n	800222e <get_current_step+0xb2>
	case 620:
		return 1;
 8002210:	2301      	movs	r3, #1
 8002212:	e00c      	b.n	800222e <get_current_step+0xb2>
	case 1241:
		return 2;
 8002214:	2302      	movs	r3, #2
 8002216:	e00a      	b.n	800222e <get_current_step+0xb2>
	case 1861:
		return 3;
 8002218:	2303      	movs	r3, #3
 800221a:	e008      	b.n	800222e <get_current_step+0xb2>
	case 2482:
		return 4;
 800221c:	2304      	movs	r3, #4
 800221e:	e006      	b.n	800222e <get_current_step+0xb2>
	case 3103:
		return 5;
 8002220:	2305      	movs	r3, #5
 8002222:	e004      	b.n	800222e <get_current_step+0xb2>
	case 3723:
		return 6;
 8002224:	2306      	movs	r3, #6
 8002226:	e002      	b.n	800222e <get_current_step+0xb2>
	case 4095:
		return 7;
 8002228:	2307      	movs	r3, #7
 800222a:	e000      	b.n	800222e <get_current_step+0xb2>
	default:
		return -1;
 800222c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007400 	.word	0x40007400

08002240 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 8002244:	f000 f8f2 	bl	800242c <send_ACK>

	vTaskSuspendAll();
 8002248:	f013 f80e 	bl	8015268 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800224c:	2101      	movs	r1, #1
 800224e:	2001      	movs	r0, #1
 8002250:	f007 ff44 	bl	800a0dc <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 8002254:	f7fe ff8a 	bl	800116c <SystemClock_Config>
	xTaskResumeAll();
 8002258:	f013 f814 	bl	8015284 <xTaskResumeAll>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <RTC_SetTime>:

void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d051      	beq.n	800231a <RTC_SetTime+0xba>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	22ca      	movs	r2, #202	; 0xca
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2253      	movs	r2, #83	; 0x53
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f00b ff32 	bl	800e100 <RTC_EnterInitMode>
 800229c:	4603      	mov	r3, r0
 800229e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d129      	bne.n	80022fa <RTC_SetTime+0x9a>

		sTime->TimeFormat = 0x00U;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2200      	movs	r2, #0
 80022aa:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b ff97 	bl	800e1e4 <RTC_ByteToBcd2>
 80022b6:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80022b8:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	4618      	mov	r0, r3
 80022c0:	f00b ff90 	bl	800e1e4 <RTC_ByteToBcd2>
 80022c4:	4603      	mov	r3, r0
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	789b      	ldrb	r3, [r3, #2]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00b ff88 	bl	800e1e4 <RTC_ByteToBcd2>
 80022d4:	4603      	mov	r3, r0
 80022d6:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	78db      	ldrb	r3, [r3, #3]
 80022de:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <RTC_SetTime+0xc4>)
 80022ec:	400b      	ands	r3, r1
 80022ee:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f00b ff39 	bl	800e168 <RTC_ExitInitMode>
 80022f6:	4603      	mov	r3, r0
 80022f8:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <RTC_SetTime+0xb0>
		hrtc->State = HAL_RTC_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2020 	strb.w	r2, [r3, #32]
 8002318:	e000      	b.n	800231c <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 800231a:	bf00      	nop

}
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	007f7f7f 	.word	0x007f7f7f

08002328 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	; 0x30
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	785b      	ldrb	r3, [r3, #1]
 8002334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	789b      	ldrb	r3, [r3, #2]
 800233c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	78db      	ldrb	r3, [r3, #3]
 8002344:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	795b      	ldrb	r3, [r3, #5]
 8002354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	799b      	ldrb	r3, [r3, #6]
 800235c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3307      	adds	r3, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3308      	adds	r3, #8
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b21b      	sxth	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b21b      	sxth	r3, r3
 8002376:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8002378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800237c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8002380:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002384:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8002388:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800238c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8002390:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002394:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800239a:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 800239c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80023a0:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80023a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a4:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	2200      	movs	r2, #0
 80023ac:	4619      	mov	r1, r3
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <calibrateRTC+0xb4>)
 80023b0:	f00b fdac 	bl	800df0c <HAL_RTC_SetDate>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80023ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <calibrateRTC+0x9e>
		Error_Handler();
 80023c2:	f000 ff9b 	bl	80032fc <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <calibrateRTC+0xb4>)
 80023d0:	f7ff ff46 	bl	8002260 <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	240003d4 	.word	0x240003d4

080023e0 <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
	send_ACK();
 80023e6:	f000 f821 	bl	800242c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80023ea:	480e      	ldr	r0, [pc, #56]	; (8002424 <sync+0x44>)
 80023ec:	f00e fa00 	bl	80107f0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	2209      	movs	r2, #9
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <sync+0x48>)
 80023f6:	480b      	ldr	r0, [pc, #44]	; (8002424 <sync+0x44>)
 80023f8:	f00e f866 	bl	80104c8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <sync+0x48>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2bff      	cmp	r3, #255	; 0xff
 8002406:	d1f3      	bne.n	80023f0 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <sync+0x48>)
 800240a:	f7ff ff8d 	bl	8002328 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800240e:	2201      	movs	r2, #1
 8002410:	4905      	ldr	r1, [pc, #20]	; (8002428 <sync+0x48>)
 8002412:	4804      	ldr	r0, [pc, #16]	; (8002424 <sync+0x44>)
 8002414:	f00e f920 	bl	8010658 <HAL_UART_Receive_IT>

	send_ACK();
 8002418:	f000 f808 	bl	800242c <send_ACK>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	24000638 	.word	0x24000638
 8002428:	24000c70 	.word	0x24000c70

0800242c <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <send_ACK+0x1c>)
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002436:	2364      	movs	r3, #100	; 0x64
 8002438:	2201      	movs	r2, #1
 800243a:	4903      	ldr	r1, [pc, #12]	; (8002448 <send_ACK+0x1c>)
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <send_ACK+0x20>)
 800243e:	f00d ffb5 	bl	80103ac <HAL_UART_Transmit>
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	24000ce8 	.word	0x24000ce8
 800244c:	24000638 	.word	0x24000638

08002450 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_UART_TxCpltCallback+0x1c>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	24000000 	.word	0x24000000

08002470 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4618      	mov	r0, r3
 8002482:	f014 fc45 	bl	8016d10 <malloc>
 8002486:	4603      	mov	r3, r0
 8002488:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	4618      	mov	r0, r3
 8002492:	f014 fc4d 	bl	8016d30 <memcpy>
	packet.size = size;
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	82bb      	strh	r3, [r7, #20]
	return packet;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	461a      	mov	r2, r3
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80024b8:	2100      	movs	r1, #0
 80024ba:	481d      	ldr	r0, [pc, #116]	; (8002530 <system_setup+0x7c>)
 80024bc:	f00c fbec 	bl	800ec98 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80024c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80024ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d2:	4818      	ldr	r0, [pc, #96]	; (8002534 <system_setup+0x80>)
 80024d4:	f003 f9a4 	bl	8005820 <HAL_ADCEx_Calibration_Start>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80024de:	f000 ff0d 	bl	80032fc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80024e2:	220b      	movs	r2, #11
 80024e4:	4914      	ldr	r1, [pc, #80]	; (8002538 <system_setup+0x84>)
 80024e6:	4813      	ldr	r0, [pc, #76]	; (8002534 <system_setup+0x80>)
 80024e8:	f002 fa78 	bl	80049dc <HAL_ADC_Start_DMA>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80024f2:	f000 ff03 	bl	80032fc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80024f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024fe:	480f      	ldr	r0, [pc, #60]	; (800253c <system_setup+0x88>)
 8002500:	f003 f98e 	bl	8005820 <HAL_ADCEx_Calibration_Start>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800250a:	f000 fef7 	bl	80032fc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800250e:	2204      	movs	r2, #4
 8002510:	490b      	ldr	r1, [pc, #44]	; (8002540 <system_setup+0x8c>)
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <system_setup+0x88>)
 8002514:	f002 fa62 	bl	80049dc <HAL_ADC_Start_DMA>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800251e:	f000 feed 	bl	80032fc <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002522:	2201      	movs	r2, #1
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <system_setup+0x90>)
 8002526:	4808      	ldr	r0, [pc, #32]	; (8002548 <system_setup+0x94>)
 8002528:	f00e f896 	bl	8010658 <HAL_UART_Receive_IT>
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	240005ec 	.word	0x240005ec
 8002534:	2400013c 	.word	0x2400013c
 8002538:	24000cc0 	.word	0x24000cc0
 800253c:	240001a0 	.word	0x240001a0
 8002540:	24000ce0 	.word	0x24000ce0
 8002544:	24000c70 	.word	0x24000c70
 8002548:	24000638 	.word	0x24000638

0800254c <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <get_uptime+0x88>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <get_uptime+0x8c>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <get_uptime+0x88>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	429a      	cmp	r2, r3
 800256c:	d005      	beq.n	800257a <get_uptime+0x2e>
		ms = uptime_millis;
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <get_uptime+0x88>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <get_uptime+0x8c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002580:	fb03 f202 	mul.w	r2, r3, r2
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <get_uptime+0x8c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	3301      	adds	r3, #1
 800258a:	4914      	ldr	r1, [pc, #80]	; (80025dc <get_uptime+0x90>)
 800258c:	fba1 1303 	umull	r1, r3, r1, r3
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	6939      	ldr	r1, [r7, #16]
 8002594:	fbb1 f3f3 	udiv	r3, r1, r3
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	0e1b      	lsrs	r3, r3, #24
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	0c1a      	lsrs	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3301      	adds	r3, #1
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0a1a      	lsrs	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3302      	adds	r3, #2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3303      	adds	r3, #3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	24000c4c 	.word	0x24000c4c
 80025d8:	e000e010 	.word	0xe000e010
 80025dc:	10624dd3 	.word	0x10624dd3

080025e0 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	2200      	movs	r2, #0
 80025ee:	4619      	mov	r1, r3
 80025f0:	4821      	ldr	r0, [pc, #132]	; (8002678 <getTimestamp+0x98>)
 80025f2:	f00b fc2f 	bl	800de54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	481e      	ldr	r0, [pc, #120]	; (8002678 <getTimestamp+0x98>)
 8002600:	f00b fd0c 	bl	800e01c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2264      	movs	r2, #100	; 0x64
 8002608:	fb03 f202 	mul.w	r2, r3, r2
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <getTimestamp+0x9c>)
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	7b7a      	ldrb	r2, [r7, #13]
 800261e:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3302      	adds	r3, #2
 8002624:	7bba      	ldrb	r2, [r7, #14]
 8002626:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3303      	adds	r3, #3
 800262c:	7c3a      	ldrb	r2, [r7, #16]
 800262e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	7c7a      	ldrb	r2, [r7, #17]
 8002636:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3305      	adds	r3, #5
 800263c:	7cba      	ldrb	r2, [r7, #18]
 800263e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	0e1a      	lsrs	r2, r3, #24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3306      	adds	r3, #6
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	0c1a      	lsrs	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3307      	adds	r3, #7
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	0a1a      	lsrs	r2, r3, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3308      	adds	r3, #8
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3309      	adds	r3, #9
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	240003d4 	.word	0x240003d4
 800267c:	000f4240 	.word	0x000f4240

08002680 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002686:	bf00      	nop
 8002688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268c:	4833      	ldr	r0, [pc, #204]	; (800275c <sample_pmt+0xdc>)
 800268e:	f006 fee7 	bl	8009460 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f7      	bne.n	8002688 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002698:	200a      	movs	r0, #10
 800269a:	f014 fb39 	bl	8016d10 <malloc>
 800269e:	4603      	mov	r3, r0
 80026a0:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80026a2:	2002      	movs	r0, #2
 80026a4:	f014 fb34 	bl	8016d10 <malloc>
 80026a8:	4603      	mov	r3, r0
 80026aa:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80026ac:	2004      	movs	r0, #4
 80026ae:	f014 fb2f 	bl	8016d10 <malloc>
 80026b2:	4603      	mov	r3, r0
 80026b4:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff ff48 	bl	800254c <get_uptime>

	receive_pmt_spi(pmt_spi);
 80026bc:	6938      	ldr	r0, [r7, #16]
 80026be:	f7ff fc59 	bl	8001f74 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	22bb      	movs	r2, #187	; 0xbb
 80026c6:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	22bb      	movs	r2, #187	; 0xbb
 80026ce:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80026d0:	4b23      	ldr	r3, [pc, #140]	; (8002760 <sample_pmt+0xe0>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3302      	adds	r3, #2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <sample_pmt+0xe0>)
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3303      	adds	r3, #3
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3304      	adds	r3, #4
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3305      	adds	r3, #5
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	7852      	ldrb	r2, [r2, #1]
 80026fe:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3306      	adds	r3, #6
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3307      	adds	r3, #7
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	7852      	ldrb	r2, [r2, #1]
 8002712:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3308      	adds	r3, #8
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	7892      	ldrb	r2, [r2, #2]
 800271c:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3309      	adds	r3, #9
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	78d2      	ldrb	r2, [r2, #3]
 8002726:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	220a      	movs	r2, #10
 800272c:	6979      	ldr	r1, [r7, #20]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fe9e 	bl	8002470 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <sample_pmt+0xe4>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	1d39      	adds	r1, r7, #4
 800273a:	2300      	movs	r3, #0
 800273c:	2200      	movs	r2, #0
 800273e:	f011 f885 	bl	801384c <osMessageQueuePut>
	free(buffer);
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f014 faec 	bl	8016d20 <free>
	free(pmt_spi);
 8002748:	6938      	ldr	r0, [r7, #16]
 800274a:	f014 fae9 	bl	8016d20 <free>
	free(uptime);
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f014 fae6 	bl	8016d20 <free>
}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	58020000 	.word	0x58020000
 8002760:	24000c5c 	.word	0x24000c5c
 8002764:	24000c50 	.word	0x24000c50

08002768 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800276e:	bf00      	nop
 8002770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002774:	4848      	ldr	r0, [pc, #288]	; (8002898 <sample_erpa+0x130>)
 8002776:	f006 fe73 	bl	8009460 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f7      	bne.n	8002770 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002780:	200e      	movs	r0, #14
 8002782:	f014 fac5 	bl	8016d10 <malloc>
 8002786:	4603      	mov	r3, r0
 8002788:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800278a:	2002      	movs	r0, #2
 800278c:	f014 fac0 	bl	8016d10 <malloc>
 8002790:	4603      	mov	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002794:	2002      	movs	r0, #2
 8002796:	f014 fabb 	bl	8016d10 <malloc>
 800279a:	4603      	mov	r3, r0
 800279c:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800279e:	2004      	movs	r0, #4
 80027a0:	f014 fab6 	bl	8016d10 <malloc>
 80027a4:	4603      	mov	r3, r0
 80027a6:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 80027a8:	23ff      	movs	r3, #255	; 0xff
 80027aa:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7ff fecd 	bl	800254c <get_uptime>
	sweep_step = get_current_step();
 80027b2:	f7ff fce3 	bl	800217c <get_current_step>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 80027ba:	69b8      	ldr	r0, [r7, #24]
 80027bc:	f7ff fbfe 	bl	8001fbc <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f7ff fc1f 	bl	8002004 <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	22aa      	movs	r2, #170	; 0xaa
 80027ca:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3301      	adds	r3, #1
 80027d0:	22aa      	movs	r2, #170	; 0xaa
 80027d2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <sample_erpa+0x134>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0c1a      	lsrs	r2, r3, #16
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3302      	adds	r3, #2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <sample_erpa+0x134>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0a1a      	lsrs	r2, r3, #8
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3303      	adds	r3, #3
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <sample_erpa+0x134>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3304      	adds	r3, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3305      	adds	r3, #5
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29a      	uxth	r2, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3306      	adds	r3, #6
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3307      	adds	r3, #7
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3308      	adds	r3, #8
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3309      	adds	r3, #9
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	7852      	ldrb	r2, [r2, #1]
 8002832:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	330a      	adds	r3, #10
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	330b      	adds	r3, #11
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	7852      	ldrb	r2, [r2, #1]
 8002846:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	330c      	adds	r3, #12
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	7892      	ldrb	r2, [r2, #2]
 8002850:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	330d      	adds	r3, #13
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	78d2      	ldrb	r2, [r2, #3]
 800285a:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	220e      	movs	r2, #14
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fe04 	bl	8002470 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <sample_erpa+0x138>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	1d39      	adds	r1, r7, #4
 800286e:	2300      	movs	r3, #0
 8002870:	2200      	movs	r2, #0
 8002872:	f010 ffeb 	bl	801384c <osMessageQueuePut>
	free(buffer);
 8002876:	69f8      	ldr	r0, [r7, #28]
 8002878:	f014 fa52 	bl	8016d20 <free>
	free(erpa_spi);
 800287c:	69b8      	ldr	r0, [r7, #24]
 800287e:	f014 fa4f 	bl	8016d20 <free>
	free(erpa_adc);
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f014 fa4c 	bl	8016d20 <free>
	free(uptime);
 8002888:	6938      	ldr	r0, [r7, #16]
 800288a:	f014 fa49 	bl	8016d20 <free>
}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	58020400 	.word	0x58020400
 800289c:	24000c60 	.word	0x24000c60
 80028a0:	24000c50 	.word	0x24000c50

080028a4 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80028aa:	2032      	movs	r0, #50	; 0x32
 80028ac:	f014 fa30 	bl	8016d10 <malloc>
 80028b0:	4603      	mov	r3, r0
 80028b2:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80028b4:	2008      	movs	r0, #8
 80028b6:	f014 fa2b 	bl	8016d10 <malloc>
 80028ba:	4603      	mov	r3, r0
 80028bc:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80028be:	200a      	movs	r0, #10
 80028c0:	f014 fa26 	bl	8016d10 <malloc>
 80028c4:	4603      	mov	r3, r0
 80028c6:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff fe89 	bl	80025e0 <getTimestamp>

	if (TEMPERATURE_COUNTER > 999) {
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <sample_hk+0x78>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d6:	db25      	blt.n	8002924 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 80028d8:	6938      	ldr	r0, [r7, #16]
 80028da:	f7ff fba5 	bl	8002028 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <sample_hk+0x7c>)
 80028e8:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	3302      	adds	r3, #2
 80028ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <sample_hk+0x7c>)
 80028f6:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	3304      	adds	r3, #4
 80028fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <sample_hk+0x7c>)
 8002904:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	3306      	adds	r3, #6
 800290a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <sample_hk+0x7c>)
 8002912:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002914:	4b01      	ldr	r3, [pc, #4]	; (800291c <sample_hk+0x78>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e01f      	b.n	800295c <sample_hk+0xb8>
 800291c:	24000004 	.word	0x24000004
 8002920:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 8002924:	4b9f      	ldr	r3, [pc, #636]	; (8002ba4 <sample_hk+0x300>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a9e      	ldr	r2, [pc, #632]	; (8002ba4 <sample_hk+0x300>)
 800292c:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800292e:	4b9e      	ldr	r3, [pc, #632]	; (8002ba8 <sample_hk+0x304>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b21a      	sxth	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002938:	4b9b      	ldr	r3, [pc, #620]	; (8002ba8 <sample_hk+0x304>)
 800293a:	885a      	ldrh	r2, [r3, #2]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	3302      	adds	r3, #2
 8002940:	b212      	sxth	r2, r2
 8002942:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002944:	4b98      	ldr	r3, [pc, #608]	; (8002ba8 <sample_hk+0x304>)
 8002946:	889a      	ldrh	r2, [r3, #4]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	3304      	adds	r3, #4
 800294c:	b212      	sxth	r2, r2
 800294e:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002950:	4b95      	ldr	r3, [pc, #596]	; (8002ba8 <sample_hk+0x304>)
 8002952:	88da      	ldrh	r2, [r3, #6]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	3306      	adds	r3, #6
 8002958:	b212      	sxth	r2, r2
 800295a:	801a      	strh	r2, [r3, #0]
	}

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	22cc      	movs	r2, #204	; 0xcc
 8002960:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	22cc      	movs	r2, #204	; 0xcc
 8002968:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800296a:	4b90      	ldr	r3, [pc, #576]	; (8002bac <sample_hk+0x308>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b29a      	uxth	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3302      	adds	r3, #2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800297a:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <sample_hk+0x308>)
 800297c:	881a      	ldrh	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3303      	adds	r3, #3
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002986:	4b8a      	ldr	r3, [pc, #552]	; (8002bb0 <sample_hk+0x30c>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	b29a      	uxth	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3304      	adds	r3, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002996:	4b86      	ldr	r3, [pc, #536]	; (8002bb0 <sample_hk+0x30c>)
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3305      	adds	r3, #5
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 80029a2:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <sample_hk+0x310>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3306      	adds	r3, #6
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 80029b2:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <sample_hk+0x310>)
 80029b4:	881a      	ldrh	r2, [r3, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3307      	adds	r3, #7
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c4:	121a      	asrs	r2, r3, #8
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3308      	adds	r3, #8
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3309      	adds	r3, #9
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	3302      	adds	r3, #2
 80029e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e4:	121a      	asrs	r2, r3, #8
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	330a      	adds	r3, #10
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	3302      	adds	r3, #2
 80029f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	330b      	adds	r3, #11
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3304      	adds	r3, #4
 8002a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a06:	121a      	asrs	r2, r3, #8
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3304      	adds	r3, #4
 8002a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	330d      	adds	r3, #13
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	3306      	adds	r3, #6
 8002a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a28:	121a      	asrs	r2, r3, #8
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	330e      	adds	r3, #14
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3306      	adds	r3, #6
 8002a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	330f      	adds	r3, #15
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <sample_hk+0x314>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3310      	adds	r3, #16
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002a52:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <sample_hk+0x314>)
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3311      	adds	r3, #17
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002a5e:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <sample_hk+0x318>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3312      	adds	r3, #18
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002a6e:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <sample_hk+0x318>)
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3313      	adds	r3, #19
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002a7a:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <sample_hk+0x31c>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3314      	adds	r3, #20
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <sample_hk+0x31c>)
 8002a8c:	881a      	ldrh	r2, [r3, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3315      	adds	r3, #21
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002a96:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <sample_hk+0x320>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3316      	adds	r3, #22
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002aa6:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <sample_hk+0x320>)
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3317      	adds	r3, #23
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002ab2:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <sample_hk+0x324>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3318      	adds	r3, #24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <sample_hk+0x324>)
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3319      	adds	r3, #25
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <sample_hk+0x328>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	331a      	adds	r3, #26
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <sample_hk+0x328>)
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	331b      	adds	r3, #27
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002aea:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <sample_hk+0x32c>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	331c      	adds	r3, #28
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002afa:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <sample_hk+0x32c>)
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	331d      	adds	r3, #29
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002b06:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <sample_hk+0x330>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	331e      	adds	r3, #30
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <sample_hk+0x330>)
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	331f      	adds	r3, #31
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <sample_hk+0x334>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <sample_hk+0x334>)
 8002b34:	881a      	ldrh	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3321      	adds	r3, #33	; 0x21
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <sample_hk+0x338>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3322      	adds	r3, #34	; 0x22
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <sample_hk+0x338>)
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3323      	adds	r3, #35	; 0x23
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <sample_hk+0x33c>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3324      	adds	r3, #36	; 0x24
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <sample_hk+0x33c>)
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3325      	adds	r3, #37	; 0x25
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <sample_hk+0x340>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3326      	adds	r3, #38	; 0x26
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <sample_hk+0x340>)
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3327      	adds	r3, #39	; 0x27
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3328      	adds	r3, #40	; 0x28
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3329      	adds	r3, #41	; 0x29
 8002ba0:	e022      	b.n	8002be8 <sample_hk+0x344>
 8002ba2:	bf00      	nop
 8002ba4:	24000004 	.word	0x24000004
 8002ba8:	24000cec 	.word	0x24000cec
 8002bac:	24000c64 	.word	0x24000c64
 8002bb0:	24000c2e 	.word	0x24000c2e
 8002bb4:	24000c30 	.word	0x24000c30
 8002bb8:	24000c32 	.word	0x24000c32
 8002bbc:	24000c34 	.word	0x24000c34
 8002bc0:	24000c36 	.word	0x24000c36
 8002bc4:	24000c38 	.word	0x24000c38
 8002bc8:	24000c3a 	.word	0x24000c3a
 8002bcc:	24000c3c 	.word	0x24000c3c
 8002bd0:	24000c3e 	.word	0x24000c3e
 8002bd4:	24000c40 	.word	0x24000c40
 8002bd8:	24000c42 	.word	0x24000c42
 8002bdc:	24000c44 	.word	0x24000c44
 8002be0:	24000c46 	.word	0x24000c46
 8002be4:	24000c48 	.word	0x24000c48
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	7852      	ldrb	r2, [r2, #1]
 8002bec:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	332a      	adds	r3, #42	; 0x2a
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	7892      	ldrb	r2, [r2, #2]
 8002bf6:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	332b      	adds	r3, #43	; 0x2b
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	78d2      	ldrb	r2, [r2, #3]
 8002c00:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	332c      	adds	r3, #44	; 0x2c
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	7912      	ldrb	r2, [r2, #4]
 8002c0a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	332d      	adds	r3, #45	; 0x2d
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	7952      	ldrb	r2, [r2, #5]
 8002c14:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	332e      	adds	r3, #46	; 0x2e
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	7992      	ldrb	r2, [r2, #6]
 8002c1e:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	332f      	adds	r3, #47	; 0x2f
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	79d2      	ldrb	r2, [r2, #7]
 8002c28:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3330      	adds	r3, #48	; 0x30
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	7a12      	ldrb	r2, [r2, #8]
 8002c32:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3331      	adds	r3, #49	; 0x31
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	7a52      	ldrb	r2, [r2, #9]
 8002c3c:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	2232      	movs	r2, #50	; 0x32
 8002c42:	6979      	ldr	r1, [r7, #20]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fc13 	bl	8002470 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <sample_hk+0x3d0>)
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	1d39      	adds	r1, r7, #4
 8002c50:	2300      	movs	r3, #0
 8002c52:	2200      	movs	r2, #0
 8002c54:	f010 fdfa 	bl	801384c <osMessageQueuePut>

	free(buffer);
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f014 f861 	bl	8016d20 <free>
	free(hk_i2c);
 8002c5e:	6938      	ldr	r0, [r7, #16]
 8002c60:	f014 f85e 	bl	8016d20 <free>
	free(timestamp);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f014 f85b 	bl	8016d20 <free>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	24000c50 	.word	0x24000c50

08002c78 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <PMT_init+0x38>)
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	f010 fd05 	bl	801369a <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <PMT_init+0x3c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <PMT_init+0x30>
			sample_pmt();
 8002c98:	f7ff fcf2 	bl	8002680 <sample_pmt>
			pmt_seq++;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <PMT_init+0x40>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <PMT_init+0x40>)
 8002ca6:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002ca8:	f010 fbc4 	bl	8013434 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002cac:	e7e8      	b.n	8002c80 <PMT_init+0x8>
 8002cae:	bf00      	nop
 8002cb0:	24000c6c 	.word	0x24000c6c
 8002cb4:	24000c66 	.word	0x24000c66
 8002cb8:	24000c5c 	.word	0x24000c5c

08002cbc <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <ERPA_init+0x34>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2102      	movs	r1, #2
 8002cd0:	f010 fce3 	bl	801369a <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <ERPA_init+0x38>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <ERPA_init+0x2e>
			sample_erpa();
 8002cdc:	f7ff fd44 	bl	8002768 <sample_erpa>
			erpa_seq++;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <ERPA_init+0x3c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <ERPA_init+0x3c>)
 8002ce8:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002cea:	f010 fba3 	bl	8013434 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002cee:	e7e9      	b.n	8002cc4 <ERPA_init+0x8>
 8002cf0:	24000c6c 	.word	0x24000c6c
 8002cf4:	24000c67 	.word	0x24000c67
 8002cf8:	24000c60 	.word	0x24000c60

08002cfc <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HK_init+0x38>)
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2104      	movs	r1, #4
 8002d10:	f010 fcc3 	bl	801369a <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HK_init+0x3c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HK_init+0x30>
			sample_hk();
 8002d1c:	f7ff fdc2 	bl	80028a4 <sample_hk>
			hk_seq++;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HK_init+0x40>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HK_init+0x40>)
 8002d2a:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002d2c:	f010 fb82 	bl	8013434 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d30:	e7e8      	b.n	8002d04 <HK_init+0x8>
 8002d32:	bf00      	nop
 8002d34:	24000c6c 	.word	0x24000c6c
 8002d38:	24000c68 	.word	0x24000c68
 8002d3c:	24000c64 	.word	0x24000c64

08002d40 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <GPIO_on_init+0x9c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f010 fb91 	bl	8013474 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <GPIO_on_init+0xa0>)
 8002d54:	2104      	movs	r1, #4
 8002d56:	2201      	movs	r2, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f006 fb99 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d5e:	2064      	movs	r0, #100	; 0x64
 8002d60:	f010 fba9 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <GPIO_on_init+0xa0>)
 8002d66:	2120      	movs	r1, #32
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f006 fb90 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d70:	2064      	movs	r0, #100	; 0x64
 8002d72:	f010 fba0 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <GPIO_on_init+0xa4>)
 8002d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f006 fb86 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d84:	2064      	movs	r0, #100	; 0x64
 8002d86:	f010 fb96 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <GPIO_on_init+0xa4>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f006 fb7d 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d96:	2064      	movs	r0, #100	; 0x64
 8002d98:	f010 fb8d 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <GPIO_on_init+0xa4>)
 8002d9e:	2140      	movs	r1, #64	; 0x40
 8002da0:	2201      	movs	r2, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f006 fb74 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002da8:	2064      	movs	r0, #100	; 0x64
 8002daa:	f010 fb84 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <GPIO_on_init+0xa4>)
 8002db0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002db4:	2201      	movs	r2, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f006 fb6a 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dbc:	2064      	movs	r0, #100	; 0x64
 8002dbe:	f010 fb7a 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <GPIO_on_init+0xa4>)
 8002dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f006 fb60 	bl	8009490 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <GPIO_on_init+0x9c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f010 fb4d 	bl	8013474 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002dda:	e7ba      	b.n	8002d52 <GPIO_on_init+0x12>
 8002ddc:	24000750 	.word	0x24000750
 8002de0:	58020400 	.word	0x58020400
 8002de4:	58020800 	.word	0x58020800

08002de8 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <GPIO_off_init+0x9c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f010 fb3d 	bl	8013474 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <GPIO_off_init+0xa0>)
 8002dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e00:	2200      	movs	r2, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f006 fb44 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e08:	2064      	movs	r0, #100	; 0x64
 8002e0a:	f010 fb54 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <GPIO_off_init+0xa0>)
 8002e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e14:	2200      	movs	r2, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 fb3a 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e1c:	2064      	movs	r0, #100	; 0x64
 8002e1e:	f010 fb4a 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <GPIO_off_init+0xa0>)
 8002e24:	2140      	movs	r1, #64	; 0x40
 8002e26:	2200      	movs	r2, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f006 fb31 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e2e:	2064      	movs	r0, #100	; 0x64
 8002e30:	f010 fb41 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <GPIO_off_init+0xa0>)
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f006 fb28 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e40:	2064      	movs	r0, #100	; 0x64
 8002e42:	f010 fb38 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <GPIO_off_init+0xa0>)
 8002e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f006 fb1e 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	f010 fb2e 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <GPIO_off_init+0xa4>)
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f006 fb15 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e66:	2064      	movs	r0, #100	; 0x64
 8002e68:	f010 fb25 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <GPIO_off_init+0xa4>)
 8002e6e:	2104      	movs	r1, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f006 fb0c 	bl	8009490 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <GPIO_off_init+0x9c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f010 faf9 	bl	8013474 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002e82:	e7ba      	b.n	8002dfa <GPIO_off_init+0x12>
 8002e84:	240009b0 	.word	0x240009b0
 8002e88:	58020800 	.word	0x58020800
 8002e8c:	58020400 	.word	0x58020400

08002e90 <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <UART_TX_init+0xa4>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4923      	ldr	r1, [pc, #140]	; (8002f38 <UART_TX_init+0xa8>)
 8002eac:	f010 fd2e 	bl	801390c <osMessageQueueGet>
 8002eb0:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d121      	bne.n	8002efc <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <UART_TX_init+0xa8>)
 8002eba:	889b      	ldrh	r3, [r3, #4]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec6:	d219      	bcs.n	8002efc <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <UART_TX_init+0xac>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <UART_TX_init+0xa8>)
 8002ed0:	6811      	ldr	r1, [r2, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <UART_TX_init+0xa8>)
 8002ed4:	8892      	ldrh	r2, [r2, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f013 ff2a 	bl	8016d30 <memcpy>
					free(msg.array);
 8002edc:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <UART_TX_init+0xa8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f013 ff1d 	bl	8016d20 <free>
					total_size += msg.size;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <UART_TX_init+0xa8>)
 8002ee8:	889b      	ldrh	r3, [r3, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d803      	bhi.n	8002f04 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ce      	beq.n	8002ea0 <UART_TX_init+0x10>
 8002f02:	e000      	b.n	8002f06 <UART_TX_init+0x76>
						break;
 8002f04:	bf00      	nop

		if (total_size > 0) {
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <UART_TX_init+0xac>)
 8002f14:	480a      	ldr	r0, [pc, #40]	; (8002f40 <UART_TX_init+0xb0>)
 8002f16:	f00d fbeb 	bl	80106f0 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002f1a:	e001      	b.n	8002f20 <UART_TX_init+0x90>
				osThreadYield();
 8002f1c:	f010 fa8a 	bl	8013434 <osThreadYield>
			while (tx_flag == 0) {
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <UART_TX_init+0xb4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f9      	beq.n	8002f1c <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <UART_TX_init+0xb4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002f2e:	f010 fa81 	bl	8013434 <osThreadYield>
		total_size = 0;
 8002f32:	e7b3      	b.n	8002e9c <UART_TX_init+0xc>
 8002f34:	24000c50 	.word	0x24000c50
 8002f38:	24000c54 	.word	0x24000c54
 8002f3c:	24000cf4 	.word	0x24000cf4
 8002f40:	24000638 	.word	0x24000638
 8002f44:	24000000 	.word	0x24000000

08002f48 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <Voltage_Monitor_init+0xbc>)
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	f010 fb9d 	bl	801369a <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002f60:	2014      	movs	r0, #20
 8002f62:	f013 fed5 	bl	8016d10 <malloc>
 8002f66:	4603      	mov	r3, r0
 8002f68:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002f6a:	2008      	movs	r0, #8
 8002f6c:	f013 fed0 	bl	8016d10 <malloc>
 8002f70:	4603      	mov	r3, r0
 8002f72:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff f887 	bl	8002088 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	f7ff f8d6 	bl	800212c <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	885a      	ldrh	r2, [r3, #2]
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <Voltage_Monitor_init+0xc0>)
 8002f86:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <Voltage_Monitor_init+0xc4>)
 8002f8e:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <Voltage_Monitor_init+0xc8>)
 8002f96:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	885a      	ldrh	r2, [r3, #2]
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <Voltage_Monitor_init+0xcc>)
 8002f9e:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	889a      	ldrh	r2, [r3, #4]
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <Voltage_Monitor_init+0xd0>)
 8002fa6:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	88da      	ldrh	r2, [r3, #6]
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <Voltage_Monitor_init+0xd4>)
 8002fae:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	899a      	ldrh	r2, [r3, #12]
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <Voltage_Monitor_init+0xd8>)
 8002fb6:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88da      	ldrh	r2, [r3, #6]
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <Voltage_Monitor_init+0xdc>)
 8002fbe:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	889a      	ldrh	r2, [r3, #4]
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <Voltage_Monitor_init+0xe0>)
 8002fc6:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	89da      	ldrh	r2, [r3, #14]
 8002fcc:	4b17      	ldr	r3, [pc, #92]	; (800302c <Voltage_Monitor_init+0xe4>)
 8002fce:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8a1a      	ldrh	r2, [r3, #16]
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <Voltage_Monitor_init+0xe8>)
 8002fd6:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	891a      	ldrh	r2, [r3, #8]
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <Voltage_Monitor_init+0xec>)
 8002fde:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	895a      	ldrh	r2, [r3, #10]
 8002fe4:	4b14      	ldr	r3, [pc, #80]	; (8003038 <Voltage_Monitor_init+0xf0>)
 8002fe6:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8a5a      	ldrh	r2, [r3, #18]
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <Voltage_Monitor_init+0xf4>)
 8002fee:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f013 fe95 	bl	8016d20 <free>
		free(hk_adc3);
 8002ff6:	68b8      	ldr	r0, [r7, #8]
 8002ff8:	f013 fe92 	bl	8016d20 <free>

		osThreadYield();
 8002ffc:	f010 fa1a 	bl	8013434 <osThreadYield>
	for (;;) {
 8003000:	e7a6      	b.n	8002f50 <Voltage_Monitor_init+0x8>
 8003002:	bf00      	nop
 8003004:	24000c6c 	.word	0x24000c6c
 8003008:	24000c2e 	.word	0x24000c2e
 800300c:	24000c30 	.word	0x24000c30
 8003010:	24000c32 	.word	0x24000c32
 8003014:	24000c34 	.word	0x24000c34
 8003018:	24000c36 	.word	0x24000c36
 800301c:	24000c38 	.word	0x24000c38
 8003020:	24000c3a 	.word	0x24000c3a
 8003024:	24000c3c 	.word	0x24000c3c
 8003028:	24000c3e 	.word	0x24000c3e
 800302c:	24000c40 	.word	0x24000c40
 8003030:	24000c42 	.word	0x24000c42
 8003034:	24000c44 	.word	0x24000c44
 8003038:	24000c46 	.word	0x24000c46
 800303c:	24000c48 	.word	0x24000c48

08003040 <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <FLAG_init+0x38>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f010 fb03 	bl	8013658 <osEventFlagsGet>
 8003052:	4603      	mov	r3, r0
 8003054:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0316 	and.w	r3, r3, #22
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <FLAG_init+0x38>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2116      	movs	r1, #22
 8003066:	4618      	mov	r0, r3
 8003068:	f010 fac4 	bl	80135f4 <osEventFlagsClear>
			enter_stop();
 800306c:	f7ff f8e8 	bl	8002240 <enter_stop>
		}
		osDelay(1);
 8003070:	2001      	movs	r0, #1
 8003072:	f010 fa20 	bl	80134b6 <osDelay>
	for (;;) {
 8003076:	e7e7      	b.n	8003048 <FLAG_init+0x8>
 8003078:	24000c6c 	.word	0x24000c6c

0800307c <Flight_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Flight_init */
void Flight_init(void *argument)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af02      	add	r7, sp, #8
 8003082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Flight_init */
	osThreadSuspend(Flight_taskHandle);
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <Flight_init+0x12c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f010 f9f3 	bl	8013474 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800308e:	4b47      	ldr	r3, [pc, #284]	; (80031ac <Flight_init+0x130>)
 8003090:	2104      	movs	r1, #4
 8003092:	2201      	movs	r2, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f006 f9fb 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 800309a:	2064      	movs	r0, #100	; 0x64
 800309c:	f010 fa0b 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80030a0:	4b42      	ldr	r3, [pc, #264]	; (80031ac <Flight_init+0x130>)
 80030a2:	2120      	movs	r1, #32
 80030a4:	2201      	movs	r2, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f006 f9f2 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	f010 fa02 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 80030b2:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <Flight_init+0x134>)
 80030b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030b8:	2201      	movs	r2, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f006 f9e8 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 80030c0:	2064      	movs	r0, #100	; 0x64
 80030c2:	f010 f9f8 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <Flight_init+0x134>)
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	2201      	movs	r2, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f006 f9df 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 80030d2:	2064      	movs	r0, #100	; 0x64
 80030d4:	f010 f9ef 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <Flight_init+0x134>)
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	2201      	movs	r2, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f006 f9d6 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 80030e4:	2064      	movs	r0, #100	; 0x64
 80030e6:	f010 f9e6 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <Flight_init+0x134>)
 80030ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f0:	2201      	movs	r2, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f006 f9cc 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	f010 f9dc 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <Flight_init+0x134>)
 8003100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003104:	2201      	movs	r2, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f006 f9c2 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(300);
 800310c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003110:	f010 f9d1 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);// Enable n200v
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <Flight_init+0x134>)
 8003116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800311a:	2201      	movs	r2, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f006 f9b7 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(300);
 8003122:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003126:	f010 f9c6 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);// Enable n800v
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <Flight_init+0x130>)
 800312c:	2140      	movs	r1, #64	; 0x40
 800312e:	2201      	movs	r2, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f006 f9ad 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(300);
 8003136:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800313a:	f010 f9bc 	bl	80134b6 <osDelay>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800313e:	2300      	movs	r3, #0
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2320      	movs	r3, #32
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <Flight_init+0x138>)
 8003146:	2100      	movs	r1, #0
 8003148:	481b      	ldr	r0, [pc, #108]	; (80031b8 <Flight_init+0x13c>)
 800314a:	f002 fe05 	bl	8005d58 <HAL_DAC_Start_DMA>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 800314e:	210c      	movs	r1, #12
 8003150:	481a      	ldr	r0, [pc, #104]	; (80031bc <Flight_init+0x140>)
 8003152:	f00b fda1 	bl	800ec98 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <Flight_init+0x144>)
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <Flight_init+0x148>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f010 fa02 	bl	801356c <osEventFlagsSet>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 8003168:	2100      	movs	r1, #0
 800316a:	4817      	ldr	r0, [pc, #92]	; (80031c8 <Flight_init+0x14c>)
 800316c:	f00b fd94 	bl	800ec98 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <Flight_init+0x150>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <Flight_init+0x148>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f010 f9f5 	bl	801356c <osEventFlagsSet>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);				// HK packet on
 8003182:	2100      	movs	r1, #0
 8003184:	4812      	ldr	r0, [pc, #72]	; (80031d0 <Flight_init+0x154>)
 8003186:	f00b fd87 	bl	800ec98 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <Flight_init+0x158>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <Flight_init+0x148>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2104      	movs	r1, #4
 8003196:	4618      	mov	r0, r3
 8003198:	f010 f9e8 	bl	801356c <osEventFlagsSet>

		osThreadSuspend(Flight_taskHandle);
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <Flight_init+0x12c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f010 f967 	bl	8013474 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80031a6:	e772      	b.n	800308e <Flight_init+0x12>
 80031a8:	24000c1c 	.word	0x24000c1c
 80031ac:	58020400 	.word	0x58020400
 80031b0:	58020800 	.word	0x58020800
 80031b4:	24000010 	.word	0x24000010
 80031b8:	240002f4 	.word	0x240002f4
 80031bc:	24000554 	.word	0x24000554
 80031c0:	24000c67 	.word	0x24000c67
 80031c4:	24000c6c 	.word	0x24000c6c
 80031c8:	24000508 	.word	0x24000508
 80031cc:	24000c66 	.word	0x24000c66
 80031d0:	240005a0 	.word	0x240005a0
 80031d4:	24000c68 	.word	0x24000c68

080031d8 <UnFlight_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UnFlight_init */
void UnFlight_init(void *argument)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UnFlight_init */
	osThreadSuspend(UnFlight_taskHandle);
 80031e0:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <UnFlight_init+0xe8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f010 f945 	bl	8013474 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80031ea:	2100      	movs	r1, #0
 80031ec:	4835      	ldr	r0, [pc, #212]	; (80032c4 <UnFlight_init+0xec>)
 80031ee:	f00b fead 	bl	800ef4c <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80031f2:	2100      	movs	r1, #0
 80031f4:	4834      	ldr	r0, [pc, #208]	; (80032c8 <UnFlight_init+0xf0>)
 80031f6:	f00b fea9 	bl	800ef4c <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80031fa:	210c      	movs	r1, #12
 80031fc:	4833      	ldr	r0, [pc, #204]	; (80032cc <UnFlight_init+0xf4>)
 80031fe:	f00b fea5 	bl	800ef4c <HAL_TIM_OC_Stop_IT>
		osDelay(100);
 8003202:	2064      	movs	r0, #100	; 0x64
 8003204:	f010 f957 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET); // Enable n800v
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <UnFlight_init+0xf8>)
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	2200      	movs	r2, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f006 f93e 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8003214:	2064      	movs	r0, #100	; 0x64
 8003216:	f010 f94e 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET); // Enable n200v
 800321a:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <UnFlight_init+0xfc>)
 800321c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003220:	2200      	movs	r2, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f006 f934 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8003228:	2064      	movs	r0, #100	; 0x64
 800322a:	f010 f944 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v off pc9
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <UnFlight_init+0xfc>)
 8003230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003234:	2200      	movs	r2, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f006 f92a 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 800323c:	2064      	movs	r0, #100	; 0x64
 800323e:	f010 f93a 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v off pc8
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <UnFlight_init+0xfc>)
 8003244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003248:	2200      	movs	r2, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f006 f920 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8003250:	2064      	movs	r0, #100	; 0x64
 8003252:	f010 f930 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 off pc6
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <UnFlight_init+0xfc>)
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	2200      	movs	r2, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f006 f917 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8003262:	2064      	movs	r0, #100	; 0x64
 8003264:	f010 f927 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v off pc7
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <UnFlight_init+0xfc>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	2200      	movs	r2, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f006 f90e 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8003274:	2064      	movs	r0, #100	; 0x64
 8003276:	f010 f91e 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 off pc1
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <UnFlight_init+0xfc>)
 800327c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003280:	2200      	movs	r2, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f006 f904 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 8003288:	2064      	movs	r0, #100	; 0x64
 800328a:	f010 f914 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys off pb5
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <UnFlight_init+0xf8>)
 8003290:	2120      	movs	r1, #32
 8003292:	2200      	movs	r2, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f006 f8fb 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 800329a:	2064      	movs	r0, #100	; 0x64
 800329c:	f010 f90b 	bl	80134b6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <UnFlight_init+0xf8>)
 80032a2:	2104      	movs	r1, #4
 80032a4:	2200      	movs	r2, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f006 f8f2 	bl	8009490 <HAL_GPIO_WritePin>
		osDelay(100);
 80032ac:	2064      	movs	r0, #100	; 0x64
 80032ae:	f010 f902 	bl	80134b6 <osDelay>

		osThreadSuspend(UnFlight_taskHandle);
 80032b2:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <UnFlight_init+0xe8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f010 f8dc 	bl	8013474 <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80032bc:	e795      	b.n	80031ea <UnFlight_init+0x12>
 80032be:	bf00      	nop
 80032c0:	24000c20 	.word	0x24000c20
 80032c4:	240005a0 	.word	0x240005a0
 80032c8:	24000508 	.word	0x24000508
 80032cc:	24000554 	.word	0x24000554
 80032d0:	58020400 	.word	0x58020400
 80032d4:	58020800 	.word	0x58020800

080032d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ea:	f000 ff85 	bl	80041f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40001000 	.word	0x40001000

080032fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003300:	b672      	cpsid	i
}
 8003302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003304:	e7fe      	b.n	8003304 <Error_Handler+0x8>
	...

08003308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_MspInit+0x38>)
 8003310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003314:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_MspInit+0x38>)
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_MspInit+0x38>)
 8003320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800332c:	2200      	movs	r2, #0
 800332e:	210f      	movs	r1, #15
 8003330:	f06f 0001 	mvn.w	r0, #1
 8003334:	f002 fc6e 	bl	8005c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58024400 	.word	0x58024400

08003344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08e      	sub	sp, #56	; 0x38
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7b      	ldr	r2, [pc, #492]	; (8003550 <HAL_ADC_MspInit+0x20c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f040 8091 	bne.w	800348a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003368:	4b7a      	ldr	r3, [pc, #488]	; (8003554 <HAL_ADC_MspInit+0x210>)
 800336a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800336e:	4a79      	ldr	r2, [pc, #484]	; (8003554 <HAL_ADC_MspInit+0x210>)
 8003370:	f043 0320 	orr.w	r3, r3, #32
 8003374:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003378:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_ADC_MspInit+0x210>)
 800337a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_ADC_MspInit+0x210>)
 8003388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338c:	4a71      	ldr	r2, [pc, #452]	; (8003554 <HAL_ADC_MspInit+0x210>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003396:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_ADC_MspInit+0x210>)
 8003398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	4b6b      	ldr	r3, [pc, #428]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033aa:	4a6a      	ldr	r2, [pc, #424]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b4:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	4b64      	ldr	r3, [pc, #400]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80033c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c8:	4a62      	ldr	r2, [pc, #392]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d2:	4b60      	ldr	r3, [pc, #384]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80033d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80033e0:	2333      	movs	r3, #51	; 0x33
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e4:	2303      	movs	r3, #3
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f0:	4619      	mov	r1, r3
 80033f2:	4859      	ldr	r0, [pc, #356]	; (8003558 <HAL_ADC_MspInit+0x214>)
 80033f4:	f005 fe84 	bl	8009100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80033f8:	23ce      	movs	r3, #206	; 0xce
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fc:	2303      	movs	r3, #3
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003408:	4619      	mov	r1, r3
 800340a:	4854      	ldr	r0, [pc, #336]	; (800355c <HAL_ADC_MspInit+0x218>)
 800340c:	f005 fe78 	bl	8009100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003410:	2303      	movs	r3, #3
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003414:	2303      	movs	r3, #3
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003420:	4619      	mov	r1, r3
 8003422:	484f      	ldr	r0, [pc, #316]	; (8003560 <HAL_ADC_MspInit+0x21c>)
 8003424:	f005 fe6c 	bl	8009100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003428:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <HAL_ADC_MspInit+0x220>)
 800342a:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_ADC_MspInit+0x224>)
 800342c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800342e:	4b4d      	ldr	r3, [pc, #308]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003430:	2209      	movs	r2, #9
 8003432:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_ADC_MspInit+0x220>)
 800343c:	2200      	movs	r2, #0
 800343e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003440:	4b48      	ldr	r3, [pc, #288]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003446:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003448:	4b46      	ldr	r3, [pc, #280]	; (8003564 <HAL_ADC_MspInit+0x220>)
 800344a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003450:	4b44      	ldr	r3, [pc, #272]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003456:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003458:	4b42      	ldr	r3, [pc, #264]	; (8003564 <HAL_ADC_MspInit+0x220>)
 800345a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003460:	4b40      	ldr	r3, [pc, #256]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003466:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003468:	2200      	movs	r2, #0
 800346a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800346c:	483d      	ldr	r0, [pc, #244]	; (8003564 <HAL_ADC_MspInit+0x220>)
 800346e:	f002 ffff 	bl	8006470 <HAL_DMA_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003478:	f7ff ff40 	bl	80032fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a39      	ldr	r2, [pc, #228]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
 8003482:	4a38      	ldr	r2, [pc, #224]	; (8003564 <HAL_ADC_MspInit+0x220>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003488:	e05e      	b.n	8003548 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_ADC_MspInit+0x228>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d159      	bne.n	8003548 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003494:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <HAL_ADC_MspInit+0x210>)
 8003496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349a:	4a2e      	ldr	r2, [pc, #184]	; (8003554 <HAL_ADC_MspInit+0x210>)
 800349c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80034a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	4b28      	ldr	r3, [pc, #160]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80034b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_ADC_MspInit+0x210>)
 80034c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80034d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80034d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80034d8:	f000 feba 	bl	8004250 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80034dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80034e0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80034e4:	f000 feb4 	bl	8004250 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 80034ea:	4a22      	ldr	r2, [pc, #136]	; (8003574 <HAL_ADC_MspInit+0x230>)
 80034ec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80034ee:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 80034f0:	2273      	movs	r2, #115	; 0x73
 80034f2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 8003502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003506:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 800350a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003510:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 8003512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003516:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 800351a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800351e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 8003522:	2200      	movs	r2, #0
 8003524:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 8003528:	2200      	movs	r2, #0
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800352c:	4810      	ldr	r0, [pc, #64]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 800352e:	f002 ff9f 	bl	8006470 <HAL_DMA_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003538:	f7ff fee0 	bl	80032fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 8003540:	64da      	str	r2, [r3, #76]	; 0x4c
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_ADC_MspInit+0x22c>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003548:	bf00      	nop
 800354a:	3738      	adds	r7, #56	; 0x38
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40022000 	.word	0x40022000
 8003554:	58024400 	.word	0x58024400
 8003558:	58020800 	.word	0x58020800
 800355c:	58020000 	.word	0x58020000
 8003560:	58020400 	.word	0x58020400
 8003564:	24000204 	.word	0x24000204
 8003568:	40020010 	.word	0x40020010
 800356c:	58026000 	.word	0x58026000
 8003570:	2400027c 	.word	0x2400027c
 8003574:	40020028 	.word	0x40020028

08003578 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a34      	ldr	r2, [pc, #208]	; (8003668 <HAL_DAC_MspInit+0xf0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d161      	bne.n	800365e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800359a:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_DAC_MspInit+0xf4>)
 800359c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a0:	4a32      	ldr	r2, [pc, #200]	; (800366c <HAL_DAC_MspInit+0xf4>)
 80035a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_DAC_MspInit+0xf4>)
 80035ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <HAL_DAC_MspInit+0xf4>)
 80035ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035be:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_DAC_MspInit+0xf4>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_DAC_MspInit+0xf4>)
 80035ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035d6:	2310      	movs	r3, #16
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035da:	2303      	movs	r3, #3
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	f107 0314 	add.w	r3, r7, #20
 80035e6:	4619      	mov	r1, r3
 80035e8:	4821      	ldr	r0, [pc, #132]	; (8003670 <HAL_DAC_MspInit+0xf8>)
 80035ea:	f005 fd89 	bl	8009100 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 80035f0:	4a21      	ldr	r2, [pc, #132]	; (8003678 <HAL_DAC_MspInit+0x100>)
 80035f2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 80035f6:	2243      	movs	r2, #67	; 0x43
 80035f8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003614:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003618:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800361c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003624:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 800362e:	2200      	movs	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003632:	4810      	ldr	r0, [pc, #64]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003634:	f002 ff1c 	bl	8006470 <HAL_DMA_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800363e:	f7ff fe5d 	bl	80032fc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_DAC_MspInit+0xfc>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2105      	movs	r1, #5
 8003652:	2036      	movs	r0, #54	; 0x36
 8003654:	f002 fade 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003658:	2036      	movs	r0, #54	; 0x36
 800365a:	f002 faf5 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	; 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40007400 	.word	0x40007400
 800366c:	58024400 	.word	0x58024400
 8003670:	58020000 	.word	0x58020000
 8003674:	24000308 	.word	0x24000308
 8003678:	40020088 	.word	0x40020088

0800367c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0ba      	sub	sp, #232	; 0xe8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	22c0      	movs	r2, #192	; 0xc0
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f013 fb55 	bl	8016d4c <memset>
  if(hi2c->Instance==I2C1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a27      	ldr	r2, [pc, #156]	; (8003744 <HAL_I2C_MspInit+0xc8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d146      	bne.n	800373a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036ac:	f04f 0208 	mov.w	r2, #8
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	4618      	mov	r0, r3
 80036c4:	f007 fda8 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80036ce:	f7ff fe15 	bl	80032fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_I2C_MspInit+0xcc>)
 80036d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_I2C_MspInit+0xcc>)
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e2:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_I2C_MspInit+0xcc>)
 80036e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f8:	2312      	movs	r3, #18
 80036fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800370a:	2304      	movs	r3, #4
 800370c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003710:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003714:	4619      	mov	r1, r3
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <HAL_I2C_MspInit+0xd0>)
 8003718:	f005 fcf2 	bl	8009100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_I2C_MspInit+0xcc>)
 800371e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_I2C_MspInit+0xcc>)
 8003724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003728:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_I2C_MspInit+0xcc>)
 800372e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800373a:	bf00      	nop
 800373c:	37e8      	adds	r7, #232	; 0xe8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40005400 	.word	0x40005400
 8003748:	58024400 	.word	0x58024400
 800374c:	58020400 	.word	0x58020400

08003750 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0b2      	sub	sp, #200	; 0xc8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	22c0      	movs	r2, #192	; 0xc0
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f013 faf3 	bl	8016d4c <memset>
  if(hrtc->Instance==RTC)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <HAL_RTC_MspInit+0x5c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d118      	bne.n	80037a2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003770:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <HAL_RTC_MspInit+0x60>)
 800377e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003782:	f107 0308 	add.w	r3, r7, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f007 fd46 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003792:	f7ff fdb3 	bl	80032fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_RTC_MspInit+0x64>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <HAL_RTC_MspInit+0x64>)
 800379c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80037a2:	bf00      	nop
 80037a4:	37c8      	adds	r7, #200	; 0xc8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	58004000 	.word	0x58004000
 80037b0:	00019300 	.word	0x00019300
 80037b4:	58024400 	.word	0x58024400

080037b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0bc      	sub	sp, #240	; 0xf0
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037d0:	f107 0318 	add.w	r3, r7, #24
 80037d4:	22c0      	movs	r2, #192	; 0xc0
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f013 fab7 	bl	8016d4c <memset>
  if(hspi->Instance==SPI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <HAL_SPI_MspInit+0x15c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d145      	bne.n	8003874 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80037e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f8:	f107 0318 	add.w	r3, r7, #24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f007 fd0b 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003808:	f7ff fd78 	bl	80032fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800380c:	4b42      	ldr	r3, [pc, #264]	; (8003918 <HAL_SPI_MspInit+0x160>)
 800380e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003812:	4a41      	ldr	r2, [pc, #260]	; (8003918 <HAL_SPI_MspInit+0x160>)
 8003814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003818:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_SPI_MspInit+0x160>)
 800381e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_SPI_MspInit+0x160>)
 800382c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003830:	4a39      	ldr	r2, [pc, #228]	; (8003918 <HAL_SPI_MspInit+0x160>)
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_SPI_MspInit+0x160>)
 800383c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003848:	2318      	movs	r3, #24
 800384a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003860:	2305      	movs	r3, #5
 8003862:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003866:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800386a:	4619      	mov	r1, r3
 800386c:	482b      	ldr	r0, [pc, #172]	; (800391c <HAL_SPI_MspInit+0x164>)
 800386e:	f005 fc47 	bl	8009100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003872:	e04a      	b.n	800390a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_SPI_MspInit+0x168>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d145      	bne.n	800390a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800387e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800388a:	2300      	movs	r3, #0
 800388c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388e:	f107 0318 	add.w	r3, r7, #24
 8003892:	4618      	mov	r0, r3
 8003894:	f007 fcc0 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800389e:	f7ff fd2d 	bl	80032fc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_SPI_MspInit+0x160>)
 80038a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_SPI_MspInit+0x160>)
 80038aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038b2:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_SPI_MspInit+0x160>)
 80038b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_SPI_MspInit+0x160>)
 80038c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_SPI_MspInit+0x160>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_SPI_MspInit+0x160>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80038de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80038e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038f8:	2305      	movs	r3, #5
 80038fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <HAL_SPI_MspInit+0x164>)
 8003906:	f005 fbfb 	bl	8009100 <HAL_GPIO_Init>
}
 800390a:	bf00      	nop
 800390c:	37f0      	adds	r7, #240	; 0xf0
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40013000 	.word	0x40013000
 8003918:	58024400 	.word	0x58024400
 800391c:	58020400 	.word	0x58020400
 8003920:	40003800 	.word	0x40003800

08003924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <HAL_TIM_Base_MspInit+0x128>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12f      	bne.n	8003996 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 8003938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800393c:	4a44      	ldr	r2, [pc, #272]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003946:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 8003948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2105      	movs	r1, #5
 8003958:	2018      	movs	r0, #24
 800395a:	f002 f95b 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800395e:	2018      	movs	r0, #24
 8003960:	f002 f972 	bl	8005c48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	2105      	movs	r1, #5
 8003968:	2019      	movs	r0, #25
 800396a:	f002 f953 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800396e:	2019      	movs	r0, #25
 8003970:	f002 f96a 	bl	8005c48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	2105      	movs	r1, #5
 8003978:	201a      	movs	r0, #26
 800397a:	f002 f94b 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800397e:	201a      	movs	r0, #26
 8003980:	f002 f962 	bl	8005c48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	2105      	movs	r1, #5
 8003988:	201b      	movs	r0, #27
 800398a:	f002 f943 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800398e:	201b      	movs	r0, #27
 8003990:	f002 f95a 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003994:	e055      	b.n	8003a42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d117      	bne.n	80039d0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a0:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 80039a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 80039b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	2105      	movs	r1, #5
 80039c2:	201c      	movs	r0, #28
 80039c4:	f002 f926 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039c8:	201c      	movs	r0, #28
 80039ca:	f002 f93d 	bl	8005c48 <HAL_NVIC_EnableIRQ>
}
 80039ce:	e038      	b.n	8003a42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <HAL_TIM_Base_MspInit+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d117      	bne.n	8003a0a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 80039dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039ea:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 80039ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2105      	movs	r1, #5
 80039fc:	201d      	movs	r0, #29
 80039fe:	f002 f909 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a02:	201d      	movs	r0, #29
 8003a04:	f002 f920 	bl	8005c48 <HAL_NVIC_EnableIRQ>
}
 8003a08:	e01b      	b.n	8003a42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <HAL_TIM_Base_MspInit+0x134>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d116      	bne.n	8003a42 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 8003a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1a:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_TIM_Base_MspInit+0x12c>)
 8003a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2105      	movs	r1, #5
 8003a36:	201e      	movs	r0, #30
 8003a38:	f002 f8ec 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a3c:	201e      	movs	r0, #30
 8003a3e:	f002 f903 	bl	8005c48 <HAL_NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	58024400 	.word	0x58024400
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800

08003a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_TIM_MspPostInit+0xb8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d120      	bne.n	8003ac0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_TIM_MspPostInit+0xbc>)
 8003a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <HAL_TIM_MspPostInit+0xbc>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_TIM_MspPostInit+0xbc>)
 8003a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4818      	ldr	r0, [pc, #96]	; (8003b1c <HAL_TIM_MspPostInit+0xc0>)
 8003aba:	f005 fb21 	bl	8009100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003abe:	e024      	b.n	8003b0a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d11f      	bne.n	8003b0a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_TIM_MspPostInit+0xbc>)
 8003acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad0:	4a11      	ldr	r2, [pc, #68]	; (8003b18 <HAL_TIM_MspPostInit+0xbc>)
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <HAL_TIM_MspPostInit+0xbc>)
 8003adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	2302      	movs	r3, #2
 8003af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003afa:	2301      	movs	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afe:	f107 0314 	add.w	r3, r7, #20
 8003b02:	4619      	mov	r1, r3
 8003b04:	4806      	ldr	r0, [pc, #24]	; (8003b20 <HAL_TIM_MspPostInit+0xc4>)
 8003b06:	f005 fafb 	bl	8009100 <HAL_GPIO_Init>
}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	58020000 	.word	0x58020000
 8003b20:	58020400 	.word	0x58020400

08003b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b0ba      	sub	sp, #232	; 0xe8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b3c:	f107 0310 	add.w	r3, r7, #16
 8003b40:	22c0      	movs	r2, #192	; 0xc0
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f013 f901 	bl	8016d4c <memset>
  if(huart->Instance==USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	; (8003c54 <HAL_UART_MspInit+0x130>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d17b      	bne.n	8003c4c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b54:	f04f 0201 	mov.w	r2, #1
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003b60:	2318      	movs	r3, #24
 8003b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b66:	f107 0310 	add.w	r3, r7, #16
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f007 fb54 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003b76:	f7ff fbc1 	bl	80032fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_UART_MspInit+0x134>)
 8003b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b80:	4a35      	ldr	r2, [pc, #212]	; (8003c58 <HAL_UART_MspInit+0x134>)
 8003b82:	f043 0310 	orr.w	r3, r3, #16
 8003b86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_UART_MspInit+0x134>)
 8003b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_UART_MspInit+0x134>)
 8003b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9e:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <HAL_UART_MspInit+0x134>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_UART_MspInit+0x134>)
 8003baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bd0:	2307      	movs	r3, #7
 8003bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	481f      	ldr	r0, [pc, #124]	; (8003c5c <HAL_UART_MspInit+0x138>)
 8003bde:	f005 fa8f 	bl	8009100 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003be4:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_UART_MspInit+0x140>)
 8003be6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003bea:	222a      	movs	r2, #42	; 0x2a
 8003bec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003bf0:	2240      	movs	r2, #64	; 0x40
 8003bf2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c1a:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c20:	480f      	ldr	r0, [pc, #60]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c22:	f002 fc25 	bl	8006470 <HAL_DMA_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003c2c:	f7ff fb66 	bl	80032fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c34:	67da      	str	r2, [r3, #124]	; 0x7c
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <HAL_UART_MspInit+0x13c>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2105      	movs	r1, #5
 8003c40:	2025      	movs	r0, #37	; 0x25
 8003c42:	f001 ffe7 	bl	8005c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c46:	2025      	movs	r0, #37	; 0x25
 8003c48:	f001 fffe 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c4c:	bf00      	nop
 8003c4e:	37e8      	adds	r7, #232	; 0xe8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40011000 	.word	0x40011000
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	58020000 	.word	0x58020000
 8003c60:	240006cc 	.word	0x240006cc
 8003c64:	40020040 	.word	0x40020040

08003c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b090      	sub	sp, #64	; 0x40
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	d827      	bhi.n	8003cc6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003c76:	2200      	movs	r2, #0
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	2036      	movs	r0, #54	; 0x36
 8003c7c:	f001 ffca 	bl	8005c14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c80:	2036      	movs	r0, #54	; 0x36
 8003c82:	f001 ffe1 	bl	8005c48 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <HAL_InitTick+0xc4>)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c8c:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_InitTick+0xc8>)
 8003c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c92:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <HAL_InitTick+0xc8>)
 8003c94:	f043 0310 	orr.w	r3, r3, #16
 8003c98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_InitTick+0xc8>)
 8003c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003caa:	f107 0210 	add.w	r2, r7, #16
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f007 fa6d 	bl	800b194 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_InitTick+0x6a>
 8003cc4:	e001      	b.n	8003cca <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e02b      	b.n	8003d22 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003cca:	f007 fa37 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 8003cce:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003cd0:	e004      	b.n	8003cdc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cd2:	f007 fa33 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_InitTick+0xcc>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_InitTick+0xd0>)
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <HAL_InitTick+0xd4>)
 8003cee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_InitTick+0xd0>)
 8003cf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cf6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cf8:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <HAL_InitTick+0xd0>)
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <HAL_InitTick+0xd0>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_InitTick+0xd0>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d0a:	480b      	ldr	r0, [pc, #44]	; (8003d38 <HAL_InitTick+0xd0>)
 8003d0c:	f00a fef5 	bl	800eafa <HAL_TIM_Base_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003d16:	4808      	ldr	r0, [pc, #32]	; (8003d38 <HAL_InitTick+0xd0>)
 8003d18:	f00a ff46 	bl	800eba8 <HAL_TIM_Base_Start_IT>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	e000      	b.n	8003d22 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3740      	adds	r7, #64	; 0x40
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	24000098 	.word	0x24000098
 8003d30:	58024400 	.word	0x58024400
 8003d34:	431bde83 	.word	0x431bde83
 8003d38:	240010dc 	.word	0x240010dc
 8003d3c:	40001000 	.word	0x40001000

08003d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003d44:	e7fe      	b.n	8003d44 <NMI_Handler+0x4>

08003d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d4a:	e7fe      	b.n	8003d4a <HardFault_Handler+0x4>

08003d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <MemManage_Handler+0x4>

08003d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d56:	e7fe      	b.n	8003d56 <BusFault_Handler+0x4>

08003d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d5c:	e7fe      	b.n	8003d5c <UsageFault_Handler+0x4>

08003d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <DMA1_Stream0_IRQHandler+0x10>)
 8003d72:	f003 fea7 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000204 	.word	0x24000204

08003d80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <DMA1_Stream1_IRQHandler+0x10>)
 8003d86:	f003 fe9d 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2400027c 	.word	0x2400027c

08003d94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <DMA1_Stream2_IRQHandler+0x10>)
 8003d9a:	f003 fe93 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	240006cc 	.word	0x240006cc

08003da8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <DMA1_Stream5_IRQHandler+0x10>)
 8003dae:	f003 fe89 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	24000308 	.word	0x24000308

08003dbc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <TIM1_BRK_IRQHandler+0x10>)
 8003dc2:	f00b fa08 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	24000508 	.word	0x24000508

08003dd0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <TIM1_UP_IRQHandler+0x10>)
 8003dd6:	f00b f9fe 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	24000508 	.word	0x24000508

08003de4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003dea:	f00b f9f4 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	24000508 	.word	0x24000508

08003df8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <TIM1_CC_IRQHandler+0x10>)
 8003dfe:	f00b f9ea 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	24000508 	.word	0x24000508

08003e0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <TIM2_IRQHandler+0x10>)
 8003e12:	f00b f9e0 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	24000554 	.word	0x24000554

08003e20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <TIM3_IRQHandler+0x10>)
 8003e26:	f00b f9d6 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	240005a0 	.word	0x240005a0

08003e34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <TIM4_IRQHandler+0x10>)
 8003e3a:	f00b f9cc 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	240005ec 	.word	0x240005ec

08003e48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <USART1_IRQHandler+0x10>)
 8003e4e:	f00c fd85 	bl	801095c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	24000638 	.word	0x24000638

08003e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <TIM6_DAC_IRQHandler+0x20>)
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003e6a:	4804      	ldr	r0, [pc, #16]	; (8003e7c <TIM6_DAC_IRQHandler+0x20>)
 8003e6c:	f002 f881 	bl	8005f72 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003e70:	4803      	ldr	r0, [pc, #12]	; (8003e80 <TIM6_DAC_IRQHandler+0x24>)
 8003e72:	f00b f9b0 	bl	800f1d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	240002f4 	.word	0x240002f4
 8003e80:	240010dc 	.word	0x240010dc

08003e84 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <ITM_SendChar+0x48>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <ITM_SendChar+0x48>)
 8003e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e98:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <ITM_SendChar+0x4c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <ITM_SendChar+0x4c>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003ea6:	bf00      	nop
 8003ea8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f8      	beq.n	8003ea8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003eb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	6013      	str	r3, [r2, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000edfc 	.word	0xe000edfc
 8003ed0:	e0000e00 	.word	0xe0000e00

08003ed4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e00a      	b.n	8003efc <_read+0x28>
		*ptr++ = __io_getchar();
 8003ee6:	f3af 8000 	nop.w
 8003eea:	4601      	mov	r1, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	60ba      	str	r2, [r7, #8]
 8003ef2:	b2ca      	uxtb	r2, r1
 8003ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	dbf0      	blt.n	8003ee6 <_read+0x12>
	}

	return len;
 8003f04:	687b      	ldr	r3, [r7, #4]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e009      	b.n	8003f34 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	60ba      	str	r2, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ffab 	bl	8003e84 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	dbf1      	blt.n	8003f20 <_write+0x12>
	}
	return len;
 8003f3c:	687b      	ldr	r3, [r7, #4]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <_close>:

int _close(int file) {
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <_fstat>:

int _fstat(int file, struct stat *st) {
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <_isatty>:

int _isatty(int file) {
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <_sbrk+0x64>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <_sbrk+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <_sbrk+0x64>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <_sbrk+0x40>
		errno = ENOMEM;
 8003fe0:	f012 fe6c 	bl	8016cbc <__errno>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fee:	e009      	b.n	8004004 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <_sbrk+0x64>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4a05      	ldr	r2, [pc, #20]	; (8004014 <_sbrk+0x64>)
 8004000:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	24080000 	.word	0x24080000
 8004010:	00000400 	.word	0x00000400
 8004014:	24001128 	.word	0x24001128
 8004018:	24005a90 	.word	0x24005a90

0800401c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004020:	4b37      	ldr	r3, [pc, #220]	; (8004100 <SystemInit+0xe4>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	4a36      	ldr	r2, [pc, #216]	; (8004100 <SystemInit+0xe4>)
 8004028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800402c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004030:	4b34      	ldr	r3, [pc, #208]	; (8004104 <SystemInit+0xe8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	2b06      	cmp	r3, #6
 800403a:	d807      	bhi.n	800404c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <SystemInit+0xe8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <SystemInit+0xe8>)
 8004046:	f043 0307 	orr.w	r3, r3, #7
 800404a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800404c:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <SystemInit+0xec>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <SystemInit+0xec>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <SystemInit+0xec>)
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <SystemInit+0xec>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4929      	ldr	r1, [pc, #164]	; (8004108 <SystemInit+0xec>)
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <SystemInit+0xf0>)
 8004066:	4013      	ands	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <SystemInit+0xe8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004076:	4b23      	ldr	r3, [pc, #140]	; (8004104 <SystemInit+0xe8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 030f 	bic.w	r3, r3, #15
 800407e:	4a21      	ldr	r2, [pc, #132]	; (8004104 <SystemInit+0xe8>)
 8004080:	f043 0307 	orr.w	r3, r3, #7
 8004084:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <SystemInit+0xec>)
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800408c:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <SystemInit+0xec>)
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <SystemInit+0xec>)
 8004094:	2200      	movs	r2, #0
 8004096:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <SystemInit+0xec>)
 800409a:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <SystemInit+0xf4>)
 800409c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <SystemInit+0xec>)
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <SystemInit+0xf8>)
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <SystemInit+0xec>)
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <SystemInit+0xfc>)
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <SystemInit+0xec>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <SystemInit+0xec>)
 80040b2:	4a19      	ldr	r2, [pc, #100]	; (8004118 <SystemInit+0xfc>)
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <SystemInit+0xec>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <SystemInit+0xec>)
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <SystemInit+0xfc>)
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <SystemInit+0xec>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <SystemInit+0xec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a0e      	ldr	r2, [pc, #56]	; (8004108 <SystemInit+0xec>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <SystemInit+0xec>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <SystemInit+0x100>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b10      	ldr	r3, [pc, #64]	; (8004120 <SystemInit+0x104>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d202      	bcs.n	80040ee <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80040e8:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <SystemInit+0x108>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <SystemInit+0x10c>)
 80040f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80040f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00
 8004104:	52002000 	.word	0x52002000
 8004108:	58024400 	.word	0x58024400
 800410c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004110:	02020200 	.word	0x02020200
 8004114:	01ff0000 	.word	0x01ff0000
 8004118:	01010280 	.word	0x01010280
 800411c:	5c001000 	.word	0x5c001000
 8004120:	ffff0000 	.word	0xffff0000
 8004124:	51008108 	.word	0x51008108
 8004128:	52004000 	.word	0x52004000

0800412c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800412c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004130:	f7ff ff74 	bl	800401c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004134:	480c      	ldr	r0, [pc, #48]	; (8004168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004136:	490d      	ldr	r1, [pc, #52]	; (800416c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800413c:	e002      	b.n	8004144 <LoopCopyDataInit>

0800413e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004142:	3304      	adds	r3, #4

08004144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004148:	d3f9      	bcc.n	800413e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800414c:	4c0a      	ldr	r4, [pc, #40]	; (8004178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004150:	e001      	b.n	8004156 <LoopFillZerobss>

08004152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004154:	3204      	adds	r2, #4

08004156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004158:	d3fb      	bcc.n	8004152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800415a:	f012 fdb5 	bl	8016cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800415e:	f7fc ff37 	bl	8000fd0 <main>
  bx  lr
 8004162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004164:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800416c:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8004170:	08017c18 	.word	0x08017c18
  ldr r2, =_sbss
 8004174:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004178:	24005a90 	.word	0x24005a90

0800417c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC3_IRQHandler>
	...

08004180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004186:	2003      	movs	r0, #3
 8004188:	f001 fd39 	bl	8005bfe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800418c:	f006 fe2c 	bl	800ade8 <HAL_RCC_GetSysClockFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_Init+0x68>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	4913      	ldr	r1, [pc, #76]	; (80041ec <HAL_Init+0x6c>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_Init+0x68>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <HAL_Init+0x6c>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <HAL_Init+0x70>)
 80041c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <HAL_Init+0x74>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041ca:	2005      	movs	r0, #5
 80041cc:	f7ff fd4c 	bl	8003c68 <HAL_InitTick>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e002      	b.n	80041e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041da:	f7ff f895 	bl	8003308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	58024400 	.word	0x58024400
 80041ec:	08017b64 	.word	0x08017b64
 80041f0:	24000094 	.word	0x24000094
 80041f4:	24000090 	.word	0x24000090

080041f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_IncTick+0x20>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_IncTick+0x24>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4413      	add	r3, r2
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <HAL_IncTick+0x24>)
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2400009c 	.word	0x2400009c
 800421c:	2400112c 	.word	0x2400112c

08004220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return uwTick;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_GetTick+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	2400112c 	.word	0x2400112c

08004238 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <HAL_GetREVID+0x14>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0c1b      	lsrs	r3, r3, #16
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	5c001000 	.word	0x5c001000

08004250 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	58000400 	.word	0x58000400

0800427c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3360      	adds	r3, #96	; 0x60
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	431a      	orrs	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	611a      	str	r2, [r3, #16]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3360      	adds	r3, #96	; 0x60
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	431a      	orrs	r2, r3
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	601a      	str	r2, [r3, #0]
  }
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3330      	adds	r3, #48	; 0x30
 80043c2:	461a      	mov	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	4413      	add	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	211f      	movs	r1, #31
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	401a      	ands	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	f003 011f 	and.w	r1, r3, #31
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	431a      	orrs	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f023 0203 	bic.w	r2, r3, #3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3314      	adds	r3, #20
 8004440:	461a      	mov	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0e5b      	lsrs	r3, r3, #25
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	4413      	add	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0d1b      	lsrs	r3, r3, #20
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2107      	movs	r1, #7
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	401a      	ands	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	0d1b      	lsrs	r3, r3, #20
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0318 	and.w	r3, r3, #24
 80044aa:	4908      	ldr	r1, [pc, #32]	; (80044cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80044ac:	40d9      	lsrs	r1, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	400b      	ands	r3, r1
 80044b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	000fffff 	.word	0x000fffff

080044d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 031f 	and.w	r3, r3, #31
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <LL_ADC_DisableDeepPowerDown+0x20>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6093      	str	r3, [r2, #8]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	5fffffc0 	.word	0x5fffffc0

08004510 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004524:	d101      	bne.n	800452a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <LL_ADC_EnableInternalRegulator+0x24>)
 8004546:	4013      	ands	r3, r2
 8004548:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	6fffffc0 	.word	0x6fffffc0

08004560 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004574:	d101      	bne.n	800457a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <LL_ADC_Enable+0x24>)
 8004596:	4013      	ands	r3, r2
 8004598:	f043 0201 	orr.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	7fffffc0 	.word	0x7fffffc0

080045b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <LL_ADC_Disable+0x24>)
 80045be:	4013      	ands	r3, r2
 80045c0:	f043 0202 	orr.w	r2, r3, #2
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	7fffffc0 	.word	0x7fffffc0

080045d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <LL_ADC_IsEnabled+0x18>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <LL_ADC_IsEnabled+0x1a>
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d101      	bne.n	8004616 <LL_ADC_IsDisableOngoing+0x18>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <LL_ADC_IsDisableOngoing+0x1a>
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <LL_ADC_REG_StartConversion+0x24>)
 8004632:	4013      	ands	r3, r2
 8004634:	f043 0204 	orr.w	r2, r3, #4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	7fffffc0 	.word	0x7fffffc0

0800464c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d101      	bne.n	8004664 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b08      	cmp	r3, #8
 8004684:	d101      	bne.n	800468a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e18f      	b.n	80049d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fe fe3f 	bl	8003344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff19 	bl	8004510 <LL_ADC_IsDeepPowerDownEnabled>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff feff 	bl	80044ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ff34 	bl	8004560 <LL_ADC_IsInternalRegulatorEnabled>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d114      	bne.n	8004728 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff18 	bl	8004538 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004708:	4b87      	ldr	r3, [pc, #540]	; (8004928 <HAL_ADC_Init+0x290>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_ADC_Init+0x294>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	3301      	adds	r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800471a:	e002      	b.n	8004722 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3b01      	subs	r3, #1
 8004720:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f9      	bne.n	800471c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff17 	bl	8004560 <LL_ADC_IsInternalRegulatorEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10d      	bne.n	8004754 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff77 	bl	800464c <LL_ADC_REG_IsConversionOngoing>
 800475e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 8129 	bne.w	80049c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 8125 	bne.w	80049c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800477e:	f043 0202 	orr.w	r2, r3, #2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff24 	bl	80045d8 <LL_ADC_IsEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d136      	bne.n	8004804 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_ADC_Init+0x298>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_ADC_Init+0x112>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a63      	ldr	r2, [pc, #396]	; (8004934 <HAL_ADC_Init+0x29c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10e      	bne.n	80047c8 <HAL_ADC_Init+0x130>
 80047aa:	4861      	ldr	r0, [pc, #388]	; (8004930 <HAL_ADC_Init+0x298>)
 80047ac:	f7ff ff14 	bl	80045d8 <LL_ADC_IsEnabled>
 80047b0:	4604      	mov	r4, r0
 80047b2:	4860      	ldr	r0, [pc, #384]	; (8004934 <HAL_ADC_Init+0x29c>)
 80047b4:	f7ff ff10 	bl	80045d8 <LL_ADC_IsEnabled>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4323      	orrs	r3, r4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e008      	b.n	80047da <HAL_ADC_Init+0x142>
 80047c8:	485b      	ldr	r0, [pc, #364]	; (8004938 <HAL_ADC_Init+0x2a0>)
 80047ca:	f7ff ff05 	bl	80045d8 <LL_ADC_IsEnabled>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a53      	ldr	r2, [pc, #332]	; (8004930 <HAL_ADC_Init+0x298>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_ADC_Init+0x15a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a51      	ldr	r2, [pc, #324]	; (8004934 <HAL_ADC_Init+0x29c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_Init+0x15e>
 80047f2:	4a52      	ldr	r2, [pc, #328]	; (800493c <HAL_ADC_Init+0x2a4>)
 80047f4:	e000      	b.n	80047f8 <HAL_ADC_Init+0x160>
 80047f6:	4a52      	ldr	r2, [pc, #328]	; (8004940 <HAL_ADC_Init+0x2a8>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7ff fd3c 	bl	800427c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004804:	f7ff fd18 	bl	8004238 <HAL_GetREVID>
 8004808:	4603      	mov	r3, r0
 800480a:	f241 0203 	movw	r2, #4099	; 0x1003
 800480e:	4293      	cmp	r3, r2
 8004810:	d914      	bls.n	800483c <HAL_ADC_Init+0x1a4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b10      	cmp	r3, #16
 8004818:	d110      	bne.n	800483c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7d5b      	ldrb	r3, [r3, #21]
 800481e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004824:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800482a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7f1b      	ldrb	r3, [r3, #28]
 8004830:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004832:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004834:	f043 030c 	orr.w	r3, r3, #12
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e00d      	b.n	8004858 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7d5b      	ldrb	r3, [r3, #21]
 8004840:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004846:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800484c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7f1b      	ldrb	r3, [r3, #28]
 8004852:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	7f1b      	ldrb	r3, [r3, #28]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d106      	bne.n	800486e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	3b01      	subs	r3, #1
 8004866:	045b      	lsls	r3, r3, #17
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <HAL_ADC_Init+0x2ac>)
 8004892:	4013      	ands	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	430b      	orrs	r3, r1
 800489c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fed2 	bl	800464c <LL_ADC_REG_IsConversionOngoing>
 80048a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fedf 	bl	8004672 <LL_ADC_INJ_IsConversionOngoing>
 80048b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d15f      	bne.n	800497c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d15c      	bne.n	800497c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	7d1b      	ldrb	r3, [r3, #20]
 80048c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <HAL_ADC_Init+0x2b0>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	69b9      	ldr	r1, [r7, #24]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d130      	bne.n	8004950 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <HAL_ADC_Init+0x2b4>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004902:	3a01      	subs	r2, #1
 8004904:	0411      	lsls	r1, r2, #16
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800490a:	4311      	orrs	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004910:	4311      	orrs	r1, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004916:	430a      	orrs	r2, r1
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	611a      	str	r2, [r3, #16]
 8004924:	e01c      	b.n	8004960 <HAL_ADC_Init+0x2c8>
 8004926:	bf00      	nop
 8004928:	24000090 	.word	0x24000090
 800492c:	053e2d63 	.word	0x053e2d63
 8004930:	40022000 	.word	0x40022000
 8004934:	40022100 	.word	0x40022100
 8004938:	58026000 	.word	0x58026000
 800493c:	40022300 	.word	0x40022300
 8004940:	58026300 	.word	0x58026300
 8004944:	fff0c003 	.word	0xfff0c003
 8004948:	ffffbffc 	.word	0xffffbffc
 800494c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fdec 	bl	8005554 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10c      	bne.n	800499e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f023 010f 	bic.w	r1, r3, #15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
 800499c:	e007      	b.n	80049ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 020f 	bic.w	r2, r2, #15
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
 80049be:	e007      	b.n	80049d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	f043 0210 	orr.w	r2, r3, #16
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3724      	adds	r7, #36	; 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}
 80049da:	bf00      	nop

080049dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a55      	ldr	r2, [pc, #340]	; (8004b44 <HAL_ADC_Start_DMA+0x168>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_ADC_Start_DMA+0x20>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a54      	ldr	r2, [pc, #336]	; (8004b48 <HAL_ADC_Start_DMA+0x16c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_Start_DMA+0x24>
 80049fc:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <HAL_ADC_Start_DMA+0x170>)
 80049fe:	e000      	b.n	8004a02 <HAL_ADC_Start_DMA+0x26>
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_ADC_Start_DMA+0x174>)
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fd64 	bl	80044d0 <LL_ADC_GetMultimode>
 8004a08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fe1c 	bl	800464c <LL_ADC_REG_IsConversionOngoing>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 808c 	bne.w	8004b34 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_Start_DMA+0x4e>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e087      	b.n	8004b3a <HAL_ADC_Start_DMA+0x15e>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d002      	beq.n	8004a44 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b09      	cmp	r3, #9
 8004a42:	d170      	bne.n	8004b26 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fc07 	bl	8005258 <ADC_Enable>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d163      	bne.n	8004b1c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a58:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <HAL_ADC_Start_DMA+0x178>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <HAL_ADC_Start_DMA+0x16c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d002      	beq.n	8004a74 <HAL_ADC_Start_DMA+0x98>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	e000      	b.n	8004a76 <HAL_ADC_Start_DMA+0x9a>
 8004a74:	4b33      	ldr	r3, [pc, #204]	; (8004b44 <HAL_ADC_Start_DMA+0x168>)
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d002      	beq.n	8004a84 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f023 0206 	bic.w	r2, r3, #6
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8004aa8:	e002      	b.n	8004ab0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <HAL_ADC_Start_DMA+0x17c>)
 8004ab6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <HAL_ADC_Start_DMA+0x180>)
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <HAL_ADC_Start_DMA+0x184>)
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	221c      	movs	r2, #28
 8004ace:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0210 	orr.w	r2, r2, #16
 8004ae6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7ff fc89 	bl	800440a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3340      	adds	r3, #64	; 0x40
 8004b02:	4619      	mov	r1, r3
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f002 f80e 	bl	8006b28 <HAL_DMA_Start_IT>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff fd85 	bl	8004624 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b1a:	e00d      	b.n	8004b38 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004b24:	e008      	b.n	8004b38 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b32:	e001      	b.n	8004b38 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
 8004b36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40022000 	.word	0x40022000
 8004b48:	40022100 	.word	0x40022100
 8004b4c:	40022300 	.word	0x40022300
 8004b50:	58026300 	.word	0x58026300
 8004b54:	fffff0fe 	.word	0xfffff0fe
 8004b58:	0800542b 	.word	0x0800542b
 8004b5c:	08005503 	.word	0x08005503
 8004b60:	0800551f 	.word	0x0800551f

08004b64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b0a1      	sub	sp, #132	; 0x84
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <HAL_ADC_ConfigChannel+0x1b0>)
 8004bba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x2a>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e32e      	b.n	8005228 <HAL_ADC_ConfigChannel+0x688>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fd38 	bl	800464c <LL_ADC_REG_IsConversionOngoing>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 8313 	bne.w	800520a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db2c      	blt.n	8004c46 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d108      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x6a>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	2201      	movs	r2, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	e016      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x98>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c1a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004c22:	2320      	movs	r3, #32
 8004c24:	e003      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c28:	fab3 f383 	clz	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2201      	movs	r2, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	69d1      	ldr	r1, [r2, #28]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	430b      	orrs	r3, r1
 8004c44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7ff fbad 	bl	80043b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fcf5 	bl	800464c <LL_ADC_REG_IsConversionOngoing>
 8004c62:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fd02 	bl	8004672 <LL_ADC_INJ_IsConversionOngoing>
 8004c6e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 80b8 	bne.w	8004de8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 80b4 	bne.w	8004de8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6819      	ldr	r1, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f7ff fbcf 	bl	8004430 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_ADC_ConfigChannel+0x1b4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x118>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	e01d      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x154>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x13e>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	e00a      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x154>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d02c      	beq.n	8004d58 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6919      	ldr	r1, [r3, #16]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d0c:	f7ff faea 	bl	80042e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6919      	ldr	r1, [r3, #16]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	7e5b      	ldrb	r3, [r3, #25]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d102      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x186>
 8004d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d24:	e000      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x188>
 8004d26:	2300      	movs	r3, #0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f7ff fb14 	bl	8004356 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6919      	ldr	r1, [r3, #16]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	7e1b      	ldrb	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x1a4>
 8004d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d42:	e000      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x1a6>
 8004d44:	2300      	movs	r3, #0
 8004d46:	461a      	mov	r2, r3
 8004d48:	f7ff faec 	bl	8004324 <LL_ADC_SetDataRightShift>
 8004d4c:	e04c      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x248>
 8004d4e:	bf00      	nop
 8004d50:	47ff0000 	.word	0x47ff0000
 8004d54:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	069b      	lsls	r3, r3, #26
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d107      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	069b      	lsls	r3, r3, #26
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d107      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d9e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	069b      	lsls	r3, r3, #26
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d107      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dc2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	069b      	lsls	r3, r3, #26
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d107      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004de6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fbf3 	bl	80045d8 <LL_ADC_IsEnabled>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f040 8211 	bne.w	800521c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f7ff fb3e 	bl	8004488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4aa1      	ldr	r2, [pc, #644]	; (8005098 <HAL_ADC_ConfigChannel+0x4f8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f040 812e 	bne.w	8005074 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x2a0>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	0e9b      	lsrs	r3, r3, #26
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	bf94      	ite	ls
 8004e38:	2301      	movls	r3, #1
 8004e3a:	2300      	movhi	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e019      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x2d4>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	e003      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2b09      	cmp	r3, #9
 8004e6c:	bf94      	ite	ls
 8004e6e:	2301      	movls	r3, #1
 8004e70:	2300      	movhi	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d079      	beq.n	8004f6c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d107      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x2f4>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0e9b      	lsrs	r3, r3, #26
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	069b      	lsls	r3, r3, #26
 8004e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e92:	e015      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x320>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004eac:	2320      	movs	r3, #32
 8004eae:	e003      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	069b      	lsls	r3, r3, #26
 8004ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x340>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	0e9b      	lsrs	r3, r3, #26
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2101      	movs	r1, #1
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	e017      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x370>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004ef8:	2320      	movs	r3, #32
 8004efa:	e003      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x396>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0e9b      	lsrs	r3, r3, #26
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 021f 	and.w	r2, r3, #31
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	051b      	lsls	r3, r3, #20
 8004f34:	e018      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x3c8>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e003      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	e07e      	b.n	800506a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x3e8>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	0e9b      	lsrs	r3, r3, #26
 8004f7e:	3301      	adds	r3, #1
 8004f80:	069b      	lsls	r3, r3, #26
 8004f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f86:	e015      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x414>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	fa93 f3a3 	rbit	r3, r3
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e003      	b.n	8004fac <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x434>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	0e9b      	lsrs	r3, r3, #26
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	e017      	b.n	8005004 <HAL_ADC_ConfigChannel+0x464>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	61bb      	str	r3, [r7, #24]
  return result;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	ea42 0103 	orr.w	r1, r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x490>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0e9b      	lsrs	r3, r3, #26
 800501a:	3301      	adds	r3, #1
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	3b1e      	subs	r3, #30
 8005028:	051b      	lsls	r3, r3, #20
 800502a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800502e:	e01b      	b.n	8005068 <HAL_ADC_ConfigChannel+0x4c8>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	60fb      	str	r3, [r7, #12]
  return result;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e003      	b.n	8005054 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3301      	adds	r3, #1
 8005056:	f003 021f 	and.w	r2, r3, #31
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	3b1e      	subs	r3, #30
 8005062:	051b      	lsls	r3, r3, #20
 8005064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005068:	430b      	orrs	r3, r1
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	6892      	ldr	r2, [r2, #8]
 800506e:	4619      	mov	r1, r3
 8005070:	f7ff f9de 	bl	8004430 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f280 80cf 	bge.w	800521c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a06      	ldr	r2, [pc, #24]	; (800509c <HAL_ADC_ConfigChannel+0x4fc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_ADC_ConfigChannel+0x4f2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_ADC_ConfigChannel+0x500>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10a      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x508>
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <HAL_ADC_ConfigChannel+0x504>)
 8005094:	e009      	b.n	80050aa <HAL_ADC_ConfigChannel+0x50a>
 8005096:	bf00      	nop
 8005098:	47ff0000 	.word	0x47ff0000
 800509c:	40022000 	.word	0x40022000
 80050a0:	40022100 	.word	0x40022100
 80050a4:	40022300 	.word	0x40022300
 80050a8:	4b61      	ldr	r3, [pc, #388]	; (8005230 <HAL_ADC_ConfigChannel+0x690>)
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f90c 	bl	80042c8 <LL_ADC_GetCommonPathInternalCh>
 80050b0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5f      	ldr	r2, [pc, #380]	; (8005234 <HAL_ADC_ConfigChannel+0x694>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_ADC_ConfigChannel+0x526>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5d      	ldr	r2, [pc, #372]	; (8005238 <HAL_ADC_ConfigChannel+0x698>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10e      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x544>
 80050c6:	485b      	ldr	r0, [pc, #364]	; (8005234 <HAL_ADC_ConfigChannel+0x694>)
 80050c8:	f7ff fa86 	bl	80045d8 <LL_ADC_IsEnabled>
 80050cc:	4604      	mov	r4, r0
 80050ce:	485a      	ldr	r0, [pc, #360]	; (8005238 <HAL_ADC_ConfigChannel+0x698>)
 80050d0:	f7ff fa82 	bl	80045d8 <LL_ADC_IsEnabled>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4323      	orrs	r3, r4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e008      	b.n	80050f6 <HAL_ADC_ConfigChannel+0x556>
 80050e4:	4855      	ldr	r0, [pc, #340]	; (800523c <HAL_ADC_ConfigChannel+0x69c>)
 80050e6:	f7ff fa77 	bl	80045d8 <LL_ADC_IsEnabled>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d07d      	beq.n	80051f6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a50      	ldr	r2, [pc, #320]	; (8005240 <HAL_ADC_ConfigChannel+0x6a0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d130      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x5c6>
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d12b      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a4a      	ldr	r2, [pc, #296]	; (800523c <HAL_ADC_ConfigChannel+0x69c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	f040 8081 	bne.w	800521c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a45      	ldr	r2, [pc, #276]	; (8005234 <HAL_ADC_ConfigChannel+0x694>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_ADC_ConfigChannel+0x58e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a43      	ldr	r2, [pc, #268]	; (8005238 <HAL_ADC_ConfigChannel+0x698>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x592>
 800512e:	4a45      	ldr	r2, [pc, #276]	; (8005244 <HAL_ADC_ConfigChannel+0x6a4>)
 8005130:	e000      	b.n	8005134 <HAL_ADC_ConfigChannel+0x594>
 8005132:	4a3f      	ldr	r2, [pc, #252]	; (8005230 <HAL_ADC_ConfigChannel+0x690>)
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f7ff f8b0 	bl	80042a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <HAL_ADC_ConfigChannel+0x6a8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	4a40      	ldr	r2, [pc, #256]	; (800524c <HAL_ADC_ConfigChannel+0x6ac>)
 800514a:	fba2 2303 	umull	r2, r3, r2, r3
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	3301      	adds	r3, #1
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005156:	e002      	b.n	800515e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	3b01      	subs	r3, #1
 800515c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f9      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005164:	e05a      	b.n	800521c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a39      	ldr	r2, [pc, #228]	; (8005250 <HAL_ADC_ConfigChannel+0x6b0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d11e      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x60e>
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d119      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2f      	ldr	r2, [pc, #188]	; (800523c <HAL_ADC_ConfigChannel+0x69c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d14b      	bne.n	800521c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2a      	ldr	r2, [pc, #168]	; (8005234 <HAL_ADC_ConfigChannel+0x694>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_ADC_ConfigChannel+0x5f8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a29      	ldr	r2, [pc, #164]	; (8005238 <HAL_ADC_ConfigChannel+0x698>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d101      	bne.n	800519c <HAL_ADC_ConfigChannel+0x5fc>
 8005198:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <HAL_ADC_ConfigChannel+0x6a4>)
 800519a:	e000      	b.n	800519e <HAL_ADC_ConfigChannel+0x5fe>
 800519c:	4a24      	ldr	r2, [pc, #144]	; (8005230 <HAL_ADC_ConfigChannel+0x690>)
 800519e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7ff f87b 	bl	80042a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051ac:	e036      	b.n	800521c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a28      	ldr	r2, [pc, #160]	; (8005254 <HAL_ADC_ConfigChannel+0x6b4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d131      	bne.n	800521c <HAL_ADC_ConfigChannel+0x67c>
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d12c      	bne.n	800521c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1d      	ldr	r2, [pc, #116]	; (800523c <HAL_ADC_ConfigChannel+0x69c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d127      	bne.n	800521c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_ADC_ConfigChannel+0x694>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_ADC_ConfigChannel+0x640>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_ADC_ConfigChannel+0x698>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d101      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x644>
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <HAL_ADC_ConfigChannel+0x6a4>)
 80051e2:	e000      	b.n	80051e6 <HAL_ADC_ConfigChannel+0x646>
 80051e4:	4a12      	ldr	r2, [pc, #72]	; (8005230 <HAL_ADC_ConfigChannel+0x690>)
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7ff f857 	bl	80042a2 <LL_ADC_SetCommonPathInternalCh>
 80051f4:	e012      	b.n	800521c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005208:	e008      	b.n	800521c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005224:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005228:	4618      	mov	r0, r3
 800522a:	3784      	adds	r7, #132	; 0x84
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}
 8005230:	58026300 	.word	0x58026300
 8005234:	40022000 	.word	0x40022000
 8005238:	40022100 	.word	0x40022100
 800523c:	58026000 	.word	0x58026000
 8005240:	cb840000 	.word	0xcb840000
 8005244:	40022300 	.word	0x40022300
 8005248:	24000090 	.word	0x24000090
 800524c:	053e2d63 	.word	0x053e2d63
 8005250:	c7520000 	.word	0xc7520000
 8005254:	cfb80000 	.word	0xcfb80000

08005258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff f9b7 	bl	80045d8 <LL_ADC_IsEnabled>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d16e      	bne.n	800534e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	4b38      	ldr	r3, [pc, #224]	; (8005358 <ADC_Enable+0x100>)
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f043 0210 	orr.w	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e05a      	b.n	8005350 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff f972 	bl	8004588 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052a4:	f7fe ffbc 	bl	8004220 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <ADC_Enable+0x104>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <ADC_Enable+0x66>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a29      	ldr	r2, [pc, #164]	; (8005360 <ADC_Enable+0x108>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <ADC_Enable+0x6a>
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <ADC_Enable+0x10c>)
 80052c0:	e000      	b.n	80052c4 <ADC_Enable+0x6c>
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <ADC_Enable+0x110>)
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f903 	bl	80044d0 <LL_ADC_GetMultimode>
 80052ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <ADC_Enable+0x108>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d002      	beq.n	80052dc <ADC_Enable+0x84>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	e000      	b.n	80052de <ADC_Enable+0x86>
 80052dc:	4b1f      	ldr	r3, [pc, #124]	; (800535c <ADC_Enable+0x104>)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02c      	beq.n	8005340 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d130      	bne.n	800534e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ec:	e028      	b.n	8005340 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff f970 	bl	80045d8 <LL_ADC_IsEnabled>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f940 	bl	8004588 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005308:	f7fe ff8a 	bl	8004220 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d914      	bls.n	8005340 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b01      	cmp	r3, #1
 8005322:	d00d      	beq.n	8005340 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f043 0201 	orr.w	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e007      	b.n	8005350 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b01      	cmp	r3, #1
 800534c:	d1cf      	bne.n	80052ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	8000003f 	.word	0x8000003f
 800535c:	40022000 	.word	0x40022000
 8005360:	40022100 	.word	0x40022100
 8005364:	40022300 	.word	0x40022300
 8005368:	58026300 	.word	0x58026300

0800536c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff f940 	bl	80045fe <LL_ADC_IsDisableOngoing>
 800537e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff f927 	bl	80045d8 <LL_ADC_IsEnabled>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d047      	beq.n	8005420 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d144      	bne.n	8005420 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030d 	and.w	r3, r3, #13
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d10c      	bne.n	80053be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff f901 	bl	80045b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2203      	movs	r2, #3
 80053b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053b6:	f7fe ff33 	bl	8004220 <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053bc:	e029      	b.n	8005412 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f043 0210 	orr.w	r2, r3, #16
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e023      	b.n	8005422 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053da:	f7fe ff21 	bl	8004220 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d914      	bls.n	8005412 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	f043 0210 	orr.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e007      	b.n	8005422 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1dc      	bne.n	80053da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005440:	2b00      	cmp	r3, #0
 8005442:	d14b      	bne.n	80054dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d021      	beq.n	80054a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe ff92 	bl	800438c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d032      	beq.n	80054d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d12b      	bne.n	80054d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11f      	bne.n	80054d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	655a      	str	r2, [r3, #84]	; 0x54
 80054a0:	e018      	b.n	80054d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d111      	bne.n	80054d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fb45 	bl	8004b64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054da:	e00e      	b.n	80054fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff fb4f 	bl	8004b8c <HAL_ADC_ErrorCallback>
}
 80054ee:	e004      	b.n	80054fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff fb31 	bl	8004b78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f043 0204 	orr.w	r2, r3, #4
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fb21 	bl	8004b8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a7a      	ldr	r2, [pc, #488]	; (800574c <ADC_ConfigureBoostMode+0x1f8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <ADC_ConfigureBoostMode+0x1c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a79      	ldr	r2, [pc, #484]	; (8005750 <ADC_ConfigureBoostMode+0x1fc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d109      	bne.n	8005584 <ADC_ConfigureBoostMode+0x30>
 8005570:	4b78      	ldr	r3, [pc, #480]	; (8005754 <ADC_ConfigureBoostMode+0x200>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e008      	b.n	8005596 <ADC_ConfigureBoostMode+0x42>
 8005584:	4b74      	ldr	r3, [pc, #464]	; (8005758 <ADC_ConfigureBoostMode+0x204>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01c      	beq.n	80055d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800559a:	f005 fd9f 	bl	800b0dc <HAL_RCC_GetHCLKFreq>
 800559e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055a8:	d010      	beq.n	80055cc <ADC_ConfigureBoostMode+0x78>
 80055aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ae:	d873      	bhi.n	8005698 <ADC_ConfigureBoostMode+0x144>
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d002      	beq.n	80055bc <ADC_ConfigureBoostMode+0x68>
 80055b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ba:	d16d      	bne.n	8005698 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	60fb      	str	r3, [r7, #12]
        break;
 80055ca:	e068      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	089b      	lsrs	r3, r3, #2
 80055d0:	60fb      	str	r3, [r7, #12]
        break;
 80055d2:	e064      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80055d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	f007 f826 	bl	800c62c <HAL_RCCEx_GetPeriphCLKFreq>
 80055e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80055ea:	d051      	beq.n	8005690 <ADC_ConfigureBoostMode+0x13c>
 80055ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80055f0:	d854      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 80055f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80055f6:	d047      	beq.n	8005688 <ADC_ConfigureBoostMode+0x134>
 80055f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80055fc:	d84e      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 80055fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005602:	d03d      	beq.n	8005680 <ADC_ConfigureBoostMode+0x12c>
 8005604:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005608:	d848      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560e:	d033      	beq.n	8005678 <ADC_ConfigureBoostMode+0x124>
 8005610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005614:	d842      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 8005616:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800561a:	d029      	beq.n	8005670 <ADC_ConfigureBoostMode+0x11c>
 800561c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005620:	d83c      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 8005622:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005626:	d01a      	beq.n	800565e <ADC_ConfigureBoostMode+0x10a>
 8005628:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800562c:	d836      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 800562e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005632:	d014      	beq.n	800565e <ADC_ConfigureBoostMode+0x10a>
 8005634:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005638:	d830      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563e:	d00e      	beq.n	800565e <ADC_ConfigureBoostMode+0x10a>
 8005640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005644:	d82a      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 8005646:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800564a:	d008      	beq.n	800565e <ADC_ConfigureBoostMode+0x10a>
 800564c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005650:	d824      	bhi.n	800569c <ADC_ConfigureBoostMode+0x148>
 8005652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005656:	d002      	beq.n	800565e <ADC_ConfigureBoostMode+0x10a>
 8005658:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800565c:	d11e      	bne.n	800569c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	0c9b      	lsrs	r3, r3, #18
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	60fb      	str	r3, [r7, #12]
        break;
 800566e:	e016      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	60fb      	str	r3, [r7, #12]
        break;
 8005676:	e012      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	60fb      	str	r3, [r7, #12]
        break;
 800567e:	e00e      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	099b      	lsrs	r3, r3, #6
 8005684:	60fb      	str	r3, [r7, #12]
        break;
 8005686:	e00a      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
        break;
 800568e:	e006      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	60fb      	str	r3, [r7, #12]
        break;
 8005696:	e002      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800569c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800569e:	f7fe fdcb 	bl	8004238 <HAL_GetREVID>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d815      	bhi.n	80056d8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a2b      	ldr	r2, [pc, #172]	; (800575c <ADC_ConfigureBoostMode+0x208>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d908      	bls.n	80056c6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80056c4:	e03e      	b.n	8005744 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	e035      	b.n	8005744 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <ADC_ConfigureBoostMode+0x20c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d808      	bhi.n	80056f8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056f4:	609a      	str	r2, [r3, #8]
}
 80056f6:	e025      	b.n	8005744 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <ADC_ConfigureBoostMode+0x210>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d80a      	bhi.n	8005716 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	e016      	b.n	8005744 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <ADC_ConfigureBoostMode+0x214>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d80a      	bhi.n	8005734 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005730:	609a      	str	r2, [r3, #8]
}
 8005732:	e007      	b.n	8005744 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40022000 	.word	0x40022000
 8005750:	40022100 	.word	0x40022100
 8005754:	40022300 	.word	0x40022300
 8005758:	58026300 	.word	0x58026300
 800575c:	01312d00 	.word	0x01312d00
 8005760:	005f5e10 	.word	0x005f5e10
 8005764:	00bebc20 	.word	0x00bebc20
 8005768:	017d7840 	.word	0x017d7840

0800576c <LL_ADC_IsEnabled>:
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <LL_ADC_IsEnabled+0x18>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <LL_ADC_IsEnabled+0x1a>
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <LL_ADC_StartCalibration>:
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <LL_ADC_StartCalibration+0x38>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057b4:	430a      	orrs	r2, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	3ffeffc0 	.word	0x3ffeffc0

080057d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e4:	d101      	bne.n	80057ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d101      	bne.n	8005810 <LL_ADC_REG_IsConversionOngoing+0x18>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_ADCEx_Calibration_Start+0x1e>
 800583a:	2302      	movs	r3, #2
 800583c:	e04c      	b.n	80058d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fd90 	bl	800536c <ADC_Disable>
 800584c:	4603      	mov	r3, r0
 800584e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d135      	bne.n	80058c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800585a:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800585c:	4013      	ands	r3, r2
 800585e:	f043 0202 	orr.w	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ff90 	bl	8005794 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005874:	e014      	b.n	80058a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d30d      	bcc.n	80058a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f023 0312 	bic.w	r3, r3, #18
 800588c:	f043 0210 	orr.w	r2, r3, #16
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e01b      	b.n	80058d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff ff93 	bl	80057d0 <LL_ADC_IsCalibrationOnGoing>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e2      	bne.n	8005876 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f023 0303 	bic.w	r3, r3, #3
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
 80058c0:	e005      	b.n	80058ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c6:	f043 0210 	orr.w	r2, r3, #16
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	ffffeefd 	.word	0xffffeefd
 80058e4:	25c3f800 	.word	0x25c3f800

080058e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b09f      	sub	sp, #124	; 0x7c
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005902:	2302      	movs	r3, #2
 8005904:	e0be      	b.n	8005a84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800590e:	2300      	movs	r3, #0
 8005910:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005912:	2300      	movs	r3, #0
 8005914:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a5c      	ldr	r2, [pc, #368]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d102      	bne.n	8005926 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005920:	4b5b      	ldr	r3, [pc, #364]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	e001      	b.n	800592a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10b      	bne.n	8005948 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e09d      	b.n	8005a84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff ff54 	bl	80057f8 <LL_ADC_REG_IsConversionOngoing>
 8005950:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff ff4e 	bl	80057f8 <LL_ADC_REG_IsConversionOngoing>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d17f      	bne.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005964:	2b00      	cmp	r3, #0
 8005966:	d17c      	bne.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a47      	ldr	r2, [pc, #284]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a46      	ldr	r2, [pc, #280]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800597c:	4b45      	ldr	r3, [pc, #276]	; (8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800597e:	e000      	b.n	8005982 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005980:	4b45      	ldr	r3, [pc, #276]	; (8005a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005982:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d039      	beq.n	8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	431a      	orrs	r2, r3
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a38      	ldr	r2, [pc, #224]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10e      	bne.n	80059d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80059b2:	4836      	ldr	r0, [pc, #216]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059b4:	f7ff feda 	bl	800576c <LL_ADC_IsEnabled>
 80059b8:	4604      	mov	r4, r0
 80059ba:	4835      	ldr	r0, [pc, #212]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059bc:	f7ff fed6 	bl	800576c <LL_ADC_IsEnabled>
 80059c0:	4603      	mov	r3, r0
 80059c2:	4323      	orrs	r3, r4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e008      	b.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80059d0:	4832      	ldr	r0, [pc, #200]	; (8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80059d2:	f7ff fecb 	bl	800576c <LL_ADC_IsEnabled>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d047      	beq.n	8005a76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	6811      	ldr	r1, [r2, #0]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	431a      	orrs	r2, r3
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059fe:	e03a      	b.n	8005a76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10e      	bne.n	8005a3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005a20:	481a      	ldr	r0, [pc, #104]	; (8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a22:	f7ff fea3 	bl	800576c <LL_ADC_IsEnabled>
 8005a26:	4604      	mov	r4, r0
 8005a28:	4819      	ldr	r0, [pc, #100]	; (8005a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a2a:	f7ff fe9f 	bl	800576c <LL_ADC_IsEnabled>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4323      	orrs	r3, r4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e008      	b.n	8005a50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005a3e:	4817      	ldr	r0, [pc, #92]	; (8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005a40:	f7ff fe94 	bl	800576c <LL_ADC_IsEnabled>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf0c      	ite	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	2300      	movne	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a60:	e009      	b.n	8005a76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f043 0220 	orr.w	r2, r3, #32
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005a74:	e000      	b.n	8005a78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	377c      	adds	r7, #124	; 0x7c
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd90      	pop	{r4, r7, pc}
 8005a8c:	40022000 	.word	0x40022000
 8005a90:	40022100 	.word	0x40022100
 8005a94:	40022300 	.word	0x40022300
 8005a98:	58026300 	.word	0x58026300
 8005a9c:	58026000 	.word	0x58026000
 8005aa0:	fffff0e0 	.word	0xfffff0e0

08005aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	60d3      	str	r3, [r2, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00
 8005ae8:	05fa0000 	.word	0x05fa0000

08005aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <__NVIC_GetPriorityGrouping+0x18>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	f003 0307 	and.w	r3, r3, #7
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	db0b      	blt.n	8005b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	f003 021f 	and.w	r2, r3, #31
 8005b20:	4907      	ldr	r1, [pc, #28]	; (8005b40 <__NVIC_EnableIRQ+0x38>)
 8005b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	2001      	movs	r0, #1
 8005b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e100 	.word	0xe000e100

08005b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	6039      	str	r1, [r7, #0]
 8005b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	db0a      	blt.n	8005b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	490c      	ldr	r1, [pc, #48]	; (8005b90 <__NVIC_SetPriority+0x4c>)
 8005b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b62:	0112      	lsls	r2, r2, #4
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	440b      	add	r3, r1
 8005b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b6c:	e00a      	b.n	8005b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4908      	ldr	r1, [pc, #32]	; (8005b94 <__NVIC_SetPriority+0x50>)
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	3b04      	subs	r3, #4
 8005b7c:	0112      	lsls	r2, r2, #4
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	440b      	add	r3, r1
 8005b82:	761a      	strb	r2, [r3, #24]
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	e000e100 	.word	0xe000e100
 8005b94:	e000ed00 	.word	0xe000ed00

08005b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b089      	sub	sp, #36	; 0x24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f1c3 0307 	rsb	r3, r3, #7
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	bf28      	it	cs
 8005bb6:	2304      	movcs	r3, #4
 8005bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d902      	bls.n	8005bc8 <NVIC_EncodePriority+0x30>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3b03      	subs	r3, #3
 8005bc6:	e000      	b.n	8005bca <NVIC_EncodePriority+0x32>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	401a      	ands	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bea:	43d9      	mvns	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bf0:	4313      	orrs	r3, r2
         );
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3724      	adds	r7, #36	; 0x24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ff4c 	bl	8005aa4 <__NVIC_SetPriorityGrouping>
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c22:	f7ff ff63 	bl	8005aec <__NVIC_GetPriorityGrouping>
 8005c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	6978      	ldr	r0, [r7, #20]
 8005c2e:	f7ff ffb3 	bl	8005b98 <NVIC_EncodePriority>
 8005c32:	4602      	mov	r2, r0
 8005c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff ff82 	bl	8005b44 <__NVIC_SetPriority>
}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ff56 	bl	8005b08 <__NVIC_EnableIRQ>
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e014      	b.n	8005ca0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	791b      	ldrb	r3, [r3, #4]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fd fc76 	bl	8003578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e046      	b.n	8005d4a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	795b      	ldrb	r3, [r3, #5]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_DAC_Start+0x20>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e040      	b.n	8005d4a <HAL_DAC_Start+0xa2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d11d      	bne.n	8005d3c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	605a      	str	r2, [r3, #4]
 8005d10:	e014      	b.n	8005d3c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2102      	movs	r1, #2
 8005d24:	fa01 f303 	lsl.w	r3, r1, r3
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d107      	bne.n	8005d3c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0202 	orr.w	r2, r2, #2
 8005d3a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0a2      	b.n	8005eb6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	795b      	ldrb	r3, [r3, #5]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_DAC_Start_DMA+0x24>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e09c      	b.n	8005eb6 <HAL_DAC_Start_DMA+0x15e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2202      	movs	r2, #2
 8005d86:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d129      	bne.n	8005de2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4a4b      	ldr	r2, [pc, #300]	; (8005ec0 <HAL_DAC_Start_DMA+0x168>)
 8005d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a4a      	ldr	r2, [pc, #296]	; (8005ec4 <HAL_DAC_Start_DMA+0x16c>)
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a49      	ldr	r2, [pc, #292]	; (8005ec8 <HAL_DAC_Start_DMA+0x170>)
 8005da4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005db4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_DAC_Start_DMA+0x6c>
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d005      	beq.n	8005dce <HAL_DAC_Start_DMA+0x76>
 8005dc2:	e009      	b.n	8005dd8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	613b      	str	r3, [r7, #16]
        break;
 8005dcc:	e033      	b.n	8005e36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	613b      	str	r3, [r7, #16]
        break;
 8005dd6:	e02e      	b.n	8005e36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3310      	adds	r3, #16
 8005dde:	613b      	str	r3, [r7, #16]
        break;
 8005de0:	e029      	b.n	8005e36 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4a39      	ldr	r2, [pc, #228]	; (8005ecc <HAL_DAC_Start_DMA+0x174>)
 8005de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4a38      	ldr	r2, [pc, #224]	; (8005ed0 <HAL_DAC_Start_DMA+0x178>)
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4a37      	ldr	r2, [pc, #220]	; (8005ed4 <HAL_DAC_Start_DMA+0x17c>)
 8005df8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_DAC_Start_DMA+0xc0>
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d005      	beq.n	8005e22 <HAL_DAC_Start_DMA+0xca>
 8005e16:	e009      	b.n	8005e2c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	613b      	str	r3, [r7, #16]
        break;
 8005e20:	e009      	b.n	8005e36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3318      	adds	r3, #24
 8005e28:	613b      	str	r3, [r7, #16]
        break;
 8005e2a:	e004      	b.n	8005e36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	331c      	adds	r3, #28
 8005e32:	613b      	str	r3, [r7, #16]
        break;
 8005e34:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d111      	bne.n	8005e60 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6898      	ldr	r0, [r3, #8]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	f000 fe67 	bl	8006b28 <HAL_DMA_Start_IT>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]
 8005e5e:	e010      	b.n	8005e82 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68d8      	ldr	r0, [r3, #12]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	f000 fe55 	bl	8006b28 <HAL_DMA_Start_IT>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e005      	b.n	8005eb4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f043 0204 	orr.w	r2, r3, #4
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	08006349 	.word	0x08006349
 8005ec4:	0800636b 	.word	0x0800636b
 8005ec8:	08006387 	.word	0x08006387
 8005ecc:	08006405 	.word	0x08006405
 8005ed0:	08006427 	.word	0x08006427
 8005ed4:	08006443 	.word	0x08006443

08005ed8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e03e      	b.n	8005f6a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6819      	ldr	r1, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43da      	mvns	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	400a      	ands	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2201      	movs	r2, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	43da      	mvns	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	400a      	ands	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10d      	bne.n	8005f48 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f863 	bl	8006ffc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e00c      	b.n	8005f62 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 f855 	bl	8006ffc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005f60:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01d      	beq.n	8005fd0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d018      	beq.n	8005fd0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fc8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f86f 	bl	80060ae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01d      	beq.n	8006016 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d018      	beq.n	8006016 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f043 0202 	orr.w	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800600e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f9ed 	bl	80063f0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006016:	bf00      	nop
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800601e:	b480      	push	{r7}
 8006020:	b087      	sub	sp, #28
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e015      	b.n	8006066 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d105      	bne.n	8006052 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	3308      	adds	r3, #8
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e004      	b.n	800605c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	3314      	adds	r3, #20
 800605a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	461a      	mov	r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_DAC_ConfigChannel+0x1e>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e12a      	b.n	800633c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	795b      	ldrb	r3, [r3, #5]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_DAC_ConfigChannel+0x2e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e124      	b.n	800633c <HAL_DAC_ConfigChannel+0x278>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2202      	movs	r2, #2
 80060fc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b04      	cmp	r3, #4
 8006104:	d17a      	bne.n	80061fc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006106:	f7fe f88b 	bl	8004220 <HAL_GetTick>
 800610a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d13d      	bne.n	800618e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006112:	e018      	b.n	8006146 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006114:	f7fe f884 	bl	8004220 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b01      	cmp	r3, #1
 8006120:	d911      	bls.n	8006146 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006128:	4b86      	ldr	r3, [pc, #536]	; (8006344 <HAL_DAC_ConfigChannel+0x280>)
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f043 0208 	orr.w	r2, r3, #8
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2203      	movs	r2, #3
 8006140:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e0fa      	b.n	800633c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614c:	4b7d      	ldr	r3, [pc, #500]	; (8006344 <HAL_DAC_ConfigChannel+0x280>)
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1df      	bne.n	8006114 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	6992      	ldr	r2, [r2, #24]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
 800615e:	e020      	b.n	80061a2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006160:	f7fe f85e 	bl	8004220 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d90f      	bls.n	800618e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	da0a      	bge.n	800618e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f043 0208 	orr.w	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2203      	movs	r2, #3
 8006188:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e0d6      	b.n	800633c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	dbe3      	blt.n	8006160 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	6992      	ldr	r2, [r2, #24]
 80061a0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	ea02 0103 	and.w	r1, r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	409a      	lsls	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	21ff      	movs	r1, #255	; 0xff
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	ea02 0103 	and.w	r1, r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	409a      	lsls	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d11d      	bne.n	8006240 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	221f      	movs	r2, #31
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4013      	ands	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4313      	orrs	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2207      	movs	r2, #7
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4013      	ands	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d102      	bne.n	800626a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006264:	2300      	movs	r3, #0
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
 8006268:	e00f      	b.n	800628a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d102      	bne.n	8006278 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006272:	2301      	movs	r3, #1
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
 8006276:	e008      	b.n	800628a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006280:	2301      	movs	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
 8006284:	e001      	b.n	800628a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006286:	2300      	movs	r3, #0
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	4313      	orrs	r3, r2
 8006294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43da      	mvns	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	400a      	ands	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	22c0      	movs	r2, #192	; 0xc0
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43da      	mvns	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	400a      	ands	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800633c:	4618      	mov	r0, r3
 800633e:	3728      	adds	r7, #40	; 0x28
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20008000 	.word	0x20008000

08006348 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff fe8b 	bl	8006072 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	711a      	strb	r2, [r3, #4]
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fe84 	bl	8006086 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f043 0204 	orr.w	r2, r3, #4
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff fe7a 	bl	800609a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	711a      	strb	r2, [r3, #4]
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff ffce 	bl	80063b4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	711a      	strb	r2, [r3, #4]
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff ffc7 	bl	80063c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f043 0204 	orr.w	r2, r3, #4
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff ffbd 	bl	80063dc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	711a      	strb	r2, [r3, #4]
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006478:	f7fd fed2 	bl	8004220 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e316      	b.n	8006ab6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a66      	ldr	r2, [pc, #408]	; (8006628 <HAL_DMA_Init+0x1b8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d04a      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a65      	ldr	r2, [pc, #404]	; (800662c <HAL_DMA_Init+0x1bc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d045      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a63      	ldr	r2, [pc, #396]	; (8006630 <HAL_DMA_Init+0x1c0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d040      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a62      	ldr	r2, [pc, #392]	; (8006634 <HAL_DMA_Init+0x1c4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d03b      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a60      	ldr	r2, [pc, #384]	; (8006638 <HAL_DMA_Init+0x1c8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d036      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a5f      	ldr	r2, [pc, #380]	; (800663c <HAL_DMA_Init+0x1cc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d031      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a5d      	ldr	r2, [pc, #372]	; (8006640 <HAL_DMA_Init+0x1d0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d02c      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a5c      	ldr	r2, [pc, #368]	; (8006644 <HAL_DMA_Init+0x1d4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d027      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a5a      	ldr	r2, [pc, #360]	; (8006648 <HAL_DMA_Init+0x1d8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d022      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a59      	ldr	r2, [pc, #356]	; (800664c <HAL_DMA_Init+0x1dc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d01d      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a57      	ldr	r2, [pc, #348]	; (8006650 <HAL_DMA_Init+0x1e0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d018      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a56      	ldr	r2, [pc, #344]	; (8006654 <HAL_DMA_Init+0x1e4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a54      	ldr	r2, [pc, #336]	; (8006658 <HAL_DMA_Init+0x1e8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00e      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a53      	ldr	r2, [pc, #332]	; (800665c <HAL_DMA_Init+0x1ec>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a51      	ldr	r2, [pc, #324]	; (8006660 <HAL_DMA_Init+0x1f0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_DMA_Init+0xb8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a50      	ldr	r2, [pc, #320]	; (8006664 <HAL_DMA_Init+0x1f4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d101      	bne.n	800652c <HAL_DMA_Init+0xbc>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <HAL_DMA_Init+0xbe>
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 813b 	beq.w	80067aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a37      	ldr	r2, [pc, #220]	; (8006628 <HAL_DMA_Init+0x1b8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d04a      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a36      	ldr	r2, [pc, #216]	; (800662c <HAL_DMA_Init+0x1bc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d045      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a34      	ldr	r2, [pc, #208]	; (8006630 <HAL_DMA_Init+0x1c0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d040      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a33      	ldr	r2, [pc, #204]	; (8006634 <HAL_DMA_Init+0x1c4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d03b      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a31      	ldr	r2, [pc, #196]	; (8006638 <HAL_DMA_Init+0x1c8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d036      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a30      	ldr	r2, [pc, #192]	; (800663c <HAL_DMA_Init+0x1cc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d031      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <HAL_DMA_Init+0x1d0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d02c      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <HAL_DMA_Init+0x1d4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d027      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <HAL_DMA_Init+0x1d8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2a      	ldr	r2, [pc, #168]	; (800664c <HAL_DMA_Init+0x1dc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <HAL_DMA_Init+0x1e0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a27      	ldr	r2, [pc, #156]	; (8006654 <HAL_DMA_Init+0x1e4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a25      	ldr	r2, [pc, #148]	; (8006658 <HAL_DMA_Init+0x1e8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a24      	ldr	r2, [pc, #144]	; (800665c <HAL_DMA_Init+0x1ec>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <HAL_DMA_Init+0x1f0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMA_Init+0x174>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a21      	ldr	r2, [pc, #132]	; (8006664 <HAL_DMA_Init+0x1f4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d108      	bne.n	80065f6 <HAL_DMA_Init+0x186>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e007      	b.n	8006606 <HAL_DMA_Init+0x196>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006606:	e02f      	b.n	8006668 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006608:	f7fd fe0a 	bl	8004220 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b05      	cmp	r3, #5
 8006614:	d928      	bls.n	8006668 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2203      	movs	r2, #3
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e246      	b.n	8006ab6 <HAL_DMA_Init+0x646>
 8006628:	40020010 	.word	0x40020010
 800662c:	40020028 	.word	0x40020028
 8006630:	40020040 	.word	0x40020040
 8006634:	40020058 	.word	0x40020058
 8006638:	40020070 	.word	0x40020070
 800663c:	40020088 	.word	0x40020088
 8006640:	400200a0 	.word	0x400200a0
 8006644:	400200b8 	.word	0x400200b8
 8006648:	40020410 	.word	0x40020410
 800664c:	40020428 	.word	0x40020428
 8006650:	40020440 	.word	0x40020440
 8006654:	40020458 	.word	0x40020458
 8006658:	40020470 	.word	0x40020470
 800665c:	40020488 	.word	0x40020488
 8006660:	400204a0 	.word	0x400204a0
 8006664:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1c8      	bne.n	8006608 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4b83      	ldr	r3, [pc, #524]	; (8006890 <HAL_DMA_Init+0x420>)
 8006682:	4013      	ands	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800668e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800669a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d107      	bne.n	80066cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	4313      	orrs	r3, r2
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80066cc:	4b71      	ldr	r3, [pc, #452]	; (8006894 <HAL_DMA_Init+0x424>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4b71      	ldr	r3, [pc, #452]	; (8006898 <HAL_DMA_Init+0x428>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d328      	bcc.n	800672c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b28      	cmp	r3, #40	; 0x28
 80066e0:	d903      	bls.n	80066ea <HAL_DMA_Init+0x27a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b2e      	cmp	r3, #46	; 0x2e
 80066e8:	d917      	bls.n	800671a <HAL_DMA_Init+0x2aa>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b3e      	cmp	r3, #62	; 0x3e
 80066f0:	d903      	bls.n	80066fa <HAL_DMA_Init+0x28a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b42      	cmp	r3, #66	; 0x42
 80066f8:	d90f      	bls.n	800671a <HAL_DMA_Init+0x2aa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b46      	cmp	r3, #70	; 0x46
 8006700:	d903      	bls.n	800670a <HAL_DMA_Init+0x29a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b48      	cmp	r3, #72	; 0x48
 8006708:	d907      	bls.n	800671a <HAL_DMA_Init+0x2aa>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b4e      	cmp	r3, #78	; 0x4e
 8006710:	d905      	bls.n	800671e <HAL_DMA_Init+0x2ae>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b52      	cmp	r3, #82	; 0x52
 8006718:	d801      	bhi.n	800671e <HAL_DMA_Init+0x2ae>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <HAL_DMA_Init+0x2b0>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800672a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 0307 	bic.w	r3, r3, #7
 8006742:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	2b04      	cmp	r3, #4
 8006754:	d117      	bne.n	8006786 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fb3f 	bl	8008dec <DMA_CheckFifoParam>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2240      	movs	r2, #64	; 0x40
 8006778:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e197      	b.n	8006ab6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f002 fa7a 	bl	8008c88 <DMA_CalcBaseAndBitshift>
 8006794:	4603      	mov	r3, r0
 8006796:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	f003 031f 	and.w	r3, r3, #31
 80067a0:	223f      	movs	r2, #63	; 0x3f
 80067a2:	409a      	lsls	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	e0cd      	b.n	8006946 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a3b      	ldr	r2, [pc, #236]	; (800689c <HAL_DMA_Init+0x42c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a39      	ldr	r2, [pc, #228]	; (80068a0 <HAL_DMA_Init+0x430>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01d      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a38      	ldr	r2, [pc, #224]	; (80068a4 <HAL_DMA_Init+0x434>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a36      	ldr	r2, [pc, #216]	; (80068a8 <HAL_DMA_Init+0x438>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a35      	ldr	r2, [pc, #212]	; (80068ac <HAL_DMA_Init+0x43c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a33      	ldr	r2, [pc, #204]	; (80068b0 <HAL_DMA_Init+0x440>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a32      	ldr	r2, [pc, #200]	; (80068b4 <HAL_DMA_Init+0x444>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_DMA_Init+0x38a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <HAL_DMA_Init+0x448>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d101      	bne.n	80067fe <HAL_DMA_Init+0x38e>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <HAL_DMA_Init+0x390>
 80067fe:	2300      	movs	r3, #0
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8097 	beq.w	8006934 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <HAL_DMA_Init+0x42c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d021      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <HAL_DMA_Init+0x430>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01c      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <HAL_DMA_Init+0x434>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d017      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <HAL_DMA_Init+0x438>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d012      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <HAL_DMA_Init+0x43c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00d      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <HAL_DMA_Init+0x440>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d008      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_DMA_Init+0x444>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <HAL_DMA_Init+0x3e4>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <HAL_DMA_Init+0x448>)
 8006852:	4293      	cmp	r3, r2
 8006854:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <HAL_DMA_Init+0x44c>)
 8006872:	4013      	ands	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d020      	beq.n	80068c0 <HAL_DMA_Init+0x450>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b80      	cmp	r3, #128	; 0x80
 8006884:	d102      	bne.n	800688c <HAL_DMA_Init+0x41c>
 8006886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800688a:	e01a      	b.n	80068c2 <HAL_DMA_Init+0x452>
 800688c:	2300      	movs	r3, #0
 800688e:	e018      	b.n	80068c2 <HAL_DMA_Init+0x452>
 8006890:	fe10803f 	.word	0xfe10803f
 8006894:	5c001000 	.word	0x5c001000
 8006898:	ffff0000 	.word	0xffff0000
 800689c:	58025408 	.word	0x58025408
 80068a0:	5802541c 	.word	0x5802541c
 80068a4:	58025430 	.word	0x58025430
 80068a8:	58025444 	.word	0x58025444
 80068ac:	58025458 	.word	0x58025458
 80068b0:	5802546c 	.word	0x5802546c
 80068b4:	58025480 	.word	0x58025480
 80068b8:	58025494 	.word	0x58025494
 80068bc:	fffe000f 	.word	0xfffe000f
 80068c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68d2      	ldr	r2, [r2, #12]
 80068c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	4b6e      	ldr	r3, [pc, #440]	; (8006ac0 <HAL_DMA_Init+0x650>)
 8006908:	4413      	add	r3, r2
 800690a:	4a6e      	ldr	r2, [pc, #440]	; (8006ac4 <HAL_DMA_Init+0x654>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 f9b5 	bl	8008c88 <DMA_CalcBaseAndBitshift>
 800691e:	4603      	mov	r3, r0
 8006920:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2201      	movs	r2, #1
 800692c:	409a      	lsls	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	e008      	b.n	8006946 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2240      	movs	r2, #64	; 0x40
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2203      	movs	r2, #3
 800693e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e0b7      	b.n	8006ab6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a5f      	ldr	r2, [pc, #380]	; (8006ac8 <HAL_DMA_Init+0x658>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d072      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a5d      	ldr	r2, [pc, #372]	; (8006acc <HAL_DMA_Init+0x65c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d06d      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a5c      	ldr	r2, [pc, #368]	; (8006ad0 <HAL_DMA_Init+0x660>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d068      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5a      	ldr	r2, [pc, #360]	; (8006ad4 <HAL_DMA_Init+0x664>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d063      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a59      	ldr	r2, [pc, #356]	; (8006ad8 <HAL_DMA_Init+0x668>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d05e      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a57      	ldr	r2, [pc, #348]	; (8006adc <HAL_DMA_Init+0x66c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d059      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a56      	ldr	r2, [pc, #344]	; (8006ae0 <HAL_DMA_Init+0x670>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d054      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a54      	ldr	r2, [pc, #336]	; (8006ae4 <HAL_DMA_Init+0x674>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d04f      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a53      	ldr	r2, [pc, #332]	; (8006ae8 <HAL_DMA_Init+0x678>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d04a      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a51      	ldr	r2, [pc, #324]	; (8006aec <HAL_DMA_Init+0x67c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d045      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a50      	ldr	r2, [pc, #320]	; (8006af0 <HAL_DMA_Init+0x680>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d040      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a4e      	ldr	r2, [pc, #312]	; (8006af4 <HAL_DMA_Init+0x684>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d03b      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4d      	ldr	r2, [pc, #308]	; (8006af8 <HAL_DMA_Init+0x688>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d036      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a4b      	ldr	r2, [pc, #300]	; (8006afc <HAL_DMA_Init+0x68c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d031      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a4a      	ldr	r2, [pc, #296]	; (8006b00 <HAL_DMA_Init+0x690>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d02c      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a48      	ldr	r2, [pc, #288]	; (8006b04 <HAL_DMA_Init+0x694>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d027      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a47      	ldr	r2, [pc, #284]	; (8006b08 <HAL_DMA_Init+0x698>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d022      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a45      	ldr	r2, [pc, #276]	; (8006b0c <HAL_DMA_Init+0x69c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01d      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a44      	ldr	r2, [pc, #272]	; (8006b10 <HAL_DMA_Init+0x6a0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d018      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a42      	ldr	r2, [pc, #264]	; (8006b14 <HAL_DMA_Init+0x6a4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a41      	ldr	r2, [pc, #260]	; (8006b18 <HAL_DMA_Init+0x6a8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00e      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a3f      	ldr	r2, [pc, #252]	; (8006b1c <HAL_DMA_Init+0x6ac>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a3e      	ldr	r2, [pc, #248]	; (8006b20 <HAL_DMA_Init+0x6b0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_DMA_Init+0x5c6>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a3c      	ldr	r2, [pc, #240]	; (8006b24 <HAL_DMA_Init+0x6b4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d101      	bne.n	8006a3a <HAL_DMA_Init+0x5ca>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <HAL_DMA_Init+0x5cc>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d032      	beq.n	8006aa6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f002 fa4f 	bl	8008ee4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b80      	cmp	r3, #128	; 0x80
 8006a4c:	d102      	bne.n	8006a54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <HAL_DMA_Init+0x624>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d80c      	bhi.n	8006a94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 facc 	bl	8009018 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e008      	b.n	8006aa6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	a7fdabf8 	.word	0xa7fdabf8
 8006ac4:	cccccccd 	.word	0xcccccccd
 8006ac8:	40020010 	.word	0x40020010
 8006acc:	40020028 	.word	0x40020028
 8006ad0:	40020040 	.word	0x40020040
 8006ad4:	40020058 	.word	0x40020058
 8006ad8:	40020070 	.word	0x40020070
 8006adc:	40020088 	.word	0x40020088
 8006ae0:	400200a0 	.word	0x400200a0
 8006ae4:	400200b8 	.word	0x400200b8
 8006ae8:	40020410 	.word	0x40020410
 8006aec:	40020428 	.word	0x40020428
 8006af0:	40020440 	.word	0x40020440
 8006af4:	40020458 	.word	0x40020458
 8006af8:	40020470 	.word	0x40020470
 8006afc:	40020488 	.word	0x40020488
 8006b00:	400204a0 	.word	0x400204a0
 8006b04:	400204b8 	.word	0x400204b8
 8006b08:	58025408 	.word	0x58025408
 8006b0c:	5802541c 	.word	0x5802541c
 8006b10:	58025430 	.word	0x58025430
 8006b14:	58025444 	.word	0x58025444
 8006b18:	58025458 	.word	0x58025458
 8006b1c:	5802546c 	.word	0x5802546c
 8006b20:	58025480 	.word	0x58025480
 8006b24:	58025494 	.word	0x58025494

08006b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e226      	b.n	8006f92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_DMA_Start_IT+0x2a>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e21f      	b.n	8006f92 <HAL_DMA_Start_IT+0x46a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	f040 820a 	bne.w	8006f7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a68      	ldr	r2, [pc, #416]	; (8006d1c <HAL_DMA_Start_IT+0x1f4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d04a      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a66      	ldr	r2, [pc, #408]	; (8006d20 <HAL_DMA_Start_IT+0x1f8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d045      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a65      	ldr	r2, [pc, #404]	; (8006d24 <HAL_DMA_Start_IT+0x1fc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d040      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a63      	ldr	r2, [pc, #396]	; (8006d28 <HAL_DMA_Start_IT+0x200>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d03b      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a62      	ldr	r2, [pc, #392]	; (8006d2c <HAL_DMA_Start_IT+0x204>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d036      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a60      	ldr	r2, [pc, #384]	; (8006d30 <HAL_DMA_Start_IT+0x208>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d031      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a5f      	ldr	r2, [pc, #380]	; (8006d34 <HAL_DMA_Start_IT+0x20c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a5d      	ldr	r2, [pc, #372]	; (8006d38 <HAL_DMA_Start_IT+0x210>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d027      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <HAL_DMA_Start_IT+0x214>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a5a      	ldr	r2, [pc, #360]	; (8006d40 <HAL_DMA_Start_IT+0x218>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a59      	ldr	r2, [pc, #356]	; (8006d44 <HAL_DMA_Start_IT+0x21c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <HAL_DMA_Start_IT+0x220>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a56      	ldr	r2, [pc, #344]	; (8006d4c <HAL_DMA_Start_IT+0x224>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a54      	ldr	r2, [pc, #336]	; (8006d50 <HAL_DMA_Start_IT+0x228>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a53      	ldr	r2, [pc, #332]	; (8006d54 <HAL_DMA_Start_IT+0x22c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_DMA_Start_IT+0xee>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a51      	ldr	r2, [pc, #324]	; (8006d58 <HAL_DMA_Start_IT+0x230>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <HAL_DMA_Start_IT+0x100>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	e007      	b.n	8006c38 <HAL_DMA_Start_IT+0x110>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0201 	bic.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f001 fe76 	bl	8008930 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a34      	ldr	r2, [pc, #208]	; (8006d1c <HAL_DMA_Start_IT+0x1f4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d04a      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <HAL_DMA_Start_IT+0x1f8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d045      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a31      	ldr	r2, [pc, #196]	; (8006d24 <HAL_DMA_Start_IT+0x1fc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d040      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a30      	ldr	r2, [pc, #192]	; (8006d28 <HAL_DMA_Start_IT+0x200>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d03b      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2e      	ldr	r2, [pc, #184]	; (8006d2c <HAL_DMA_Start_IT+0x204>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d036      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a2d      	ldr	r2, [pc, #180]	; (8006d30 <HAL_DMA_Start_IT+0x208>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d031      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <HAL_DMA_Start_IT+0x20c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d02c      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <HAL_DMA_Start_IT+0x210>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d027      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a28      	ldr	r2, [pc, #160]	; (8006d3c <HAL_DMA_Start_IT+0x214>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d022      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a27      	ldr	r2, [pc, #156]	; (8006d40 <HAL_DMA_Start_IT+0x218>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <HAL_DMA_Start_IT+0x21c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a24      	ldr	r2, [pc, #144]	; (8006d48 <HAL_DMA_Start_IT+0x220>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <HAL_DMA_Start_IT+0x224>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a21      	ldr	r2, [pc, #132]	; (8006d50 <HAL_DMA_Start_IT+0x228>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1f      	ldr	r2, [pc, #124]	; (8006d54 <HAL_DMA_Start_IT+0x22c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x1bc>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <HAL_DMA_Start_IT+0x230>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d101      	bne.n	8006ce8 <HAL_DMA_Start_IT+0x1c0>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <HAL_DMA_Start_IT+0x1c2>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d036      	beq.n	8006d5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f023 021e 	bic.w	r2, r3, #30
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0216 	orr.w	r2, r2, #22
 8006d00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d03e      	beq.n	8006d88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0208 	orr.w	r2, r2, #8
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e035      	b.n	8006d88 <HAL_DMA_Start_IT+0x260>
 8006d1c:	40020010 	.word	0x40020010
 8006d20:	40020028 	.word	0x40020028
 8006d24:	40020040 	.word	0x40020040
 8006d28:	40020058 	.word	0x40020058
 8006d2c:	40020070 	.word	0x40020070
 8006d30:	40020088 	.word	0x40020088
 8006d34:	400200a0 	.word	0x400200a0
 8006d38:	400200b8 	.word	0x400200b8
 8006d3c:	40020410 	.word	0x40020410
 8006d40:	40020428 	.word	0x40020428
 8006d44:	40020440 	.word	0x40020440
 8006d48:	40020458 	.word	0x40020458
 8006d4c:	40020470 	.word	0x40020470
 8006d50:	40020488 	.word	0x40020488
 8006d54:	400204a0 	.word	0x400204a0
 8006d58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f023 020e 	bic.w	r2, r3, #14
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 020a 	orr.w	r2, r2, #10
 8006d6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0204 	orr.w	r2, r2, #4
 8006d86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a83      	ldr	r2, [pc, #524]	; (8006f9c <HAL_DMA_Start_IT+0x474>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d072      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a82      	ldr	r2, [pc, #520]	; (8006fa0 <HAL_DMA_Start_IT+0x478>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d06d      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a80      	ldr	r2, [pc, #512]	; (8006fa4 <HAL_DMA_Start_IT+0x47c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d068      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a7f      	ldr	r2, [pc, #508]	; (8006fa8 <HAL_DMA_Start_IT+0x480>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d063      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a7d      	ldr	r2, [pc, #500]	; (8006fac <HAL_DMA_Start_IT+0x484>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d05e      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a7c      	ldr	r2, [pc, #496]	; (8006fb0 <HAL_DMA_Start_IT+0x488>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d059      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a7a      	ldr	r2, [pc, #488]	; (8006fb4 <HAL_DMA_Start_IT+0x48c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d054      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a79      	ldr	r2, [pc, #484]	; (8006fb8 <HAL_DMA_Start_IT+0x490>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d04f      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a77      	ldr	r2, [pc, #476]	; (8006fbc <HAL_DMA_Start_IT+0x494>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d04a      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a76      	ldr	r2, [pc, #472]	; (8006fc0 <HAL_DMA_Start_IT+0x498>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d045      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a74      	ldr	r2, [pc, #464]	; (8006fc4 <HAL_DMA_Start_IT+0x49c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d040      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a73      	ldr	r2, [pc, #460]	; (8006fc8 <HAL_DMA_Start_IT+0x4a0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d03b      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a71      	ldr	r2, [pc, #452]	; (8006fcc <HAL_DMA_Start_IT+0x4a4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d036      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a70      	ldr	r2, [pc, #448]	; (8006fd0 <HAL_DMA_Start_IT+0x4a8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d031      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a6e      	ldr	r2, [pc, #440]	; (8006fd4 <HAL_DMA_Start_IT+0x4ac>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d02c      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a6d      	ldr	r2, [pc, #436]	; (8006fd8 <HAL_DMA_Start_IT+0x4b0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d027      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6b      	ldr	r2, [pc, #428]	; (8006fdc <HAL_DMA_Start_IT+0x4b4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d022      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a6a      	ldr	r2, [pc, #424]	; (8006fe0 <HAL_DMA_Start_IT+0x4b8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01d      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a68      	ldr	r2, [pc, #416]	; (8006fe4 <HAL_DMA_Start_IT+0x4bc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d018      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a67      	ldr	r2, [pc, #412]	; (8006fe8 <HAL_DMA_Start_IT+0x4c0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a65      	ldr	r2, [pc, #404]	; (8006fec <HAL_DMA_Start_IT+0x4c4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a64      	ldr	r2, [pc, #400]	; (8006ff0 <HAL_DMA_Start_IT+0x4c8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a62      	ldr	r2, [pc, #392]	; (8006ff4 <HAL_DMA_Start_IT+0x4cc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_DMA_Start_IT+0x350>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a61      	ldr	r2, [pc, #388]	; (8006ff8 <HAL_DMA_Start_IT+0x4d0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <HAL_DMA_Start_IT+0x354>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_DMA_Start_IT+0x356>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01a      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a37      	ldr	r2, [pc, #220]	; (8006f9c <HAL_DMA_Start_IT+0x474>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d04a      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a36      	ldr	r2, [pc, #216]	; (8006fa0 <HAL_DMA_Start_IT+0x478>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d045      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a34      	ldr	r2, [pc, #208]	; (8006fa4 <HAL_DMA_Start_IT+0x47c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d040      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a33      	ldr	r2, [pc, #204]	; (8006fa8 <HAL_DMA_Start_IT+0x480>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d03b      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a31      	ldr	r2, [pc, #196]	; (8006fac <HAL_DMA_Start_IT+0x484>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d036      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a30      	ldr	r2, [pc, #192]	; (8006fb0 <HAL_DMA_Start_IT+0x488>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d031      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a2e      	ldr	r2, [pc, #184]	; (8006fb4 <HAL_DMA_Start_IT+0x48c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d02c      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <HAL_DMA_Start_IT+0x490>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d027      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a2b      	ldr	r2, [pc, #172]	; (8006fbc <HAL_DMA_Start_IT+0x494>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d022      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2a      	ldr	r2, [pc, #168]	; (8006fc0 <HAL_DMA_Start_IT+0x498>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d01d      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a28      	ldr	r2, [pc, #160]	; (8006fc4 <HAL_DMA_Start_IT+0x49c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d018      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a27      	ldr	r2, [pc, #156]	; (8006fc8 <HAL_DMA_Start_IT+0x4a0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a25      	ldr	r2, [pc, #148]	; (8006fcc <HAL_DMA_Start_IT+0x4a4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <HAL_DMA_Start_IT+0x4a8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <HAL_DMA_Start_IT+0x4ac>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_DMA_Start_IT+0x430>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a21      	ldr	r2, [pc, #132]	; (8006fd8 <HAL_DMA_Start_IT+0x4b0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d108      	bne.n	8006f6a <HAL_DMA_Start_IT+0x442>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e012      	b.n	8006f90 <HAL_DMA_Start_IT+0x468>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e009      	b.n	8006f90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40020010 	.word	0x40020010
 8006fa0:	40020028 	.word	0x40020028
 8006fa4:	40020040 	.word	0x40020040
 8006fa8:	40020058 	.word	0x40020058
 8006fac:	40020070 	.word	0x40020070
 8006fb0:	40020088 	.word	0x40020088
 8006fb4:	400200a0 	.word	0x400200a0
 8006fb8:	400200b8 	.word	0x400200b8
 8006fbc:	40020410 	.word	0x40020410
 8006fc0:	40020428 	.word	0x40020428
 8006fc4:	40020440 	.word	0x40020440
 8006fc8:	40020458 	.word	0x40020458
 8006fcc:	40020470 	.word	0x40020470
 8006fd0:	40020488 	.word	0x40020488
 8006fd4:	400204a0 	.word	0x400204a0
 8006fd8:	400204b8 	.word	0x400204b8
 8006fdc:	58025408 	.word	0x58025408
 8006fe0:	5802541c 	.word	0x5802541c
 8006fe4:	58025430 	.word	0x58025430
 8006fe8:	58025444 	.word	0x58025444
 8006fec:	58025458 	.word	0x58025458
 8006ff0:	5802546c 	.word	0x5802546c
 8006ff4:	58025480 	.word	0x58025480
 8006ff8:	58025494 	.word	0x58025494

08006ffc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007004:	f7fd f90c 	bl	8004220 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e2dc      	b.n	80075ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d008      	beq.n	8007032 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2280      	movs	r2, #128	; 0x80
 8007024:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e2cd      	b.n	80075ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a76      	ldr	r2, [pc, #472]	; (8007210 <HAL_DMA_Abort+0x214>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d04a      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a74      	ldr	r2, [pc, #464]	; (8007214 <HAL_DMA_Abort+0x218>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d045      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a73      	ldr	r2, [pc, #460]	; (8007218 <HAL_DMA_Abort+0x21c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d040      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a71      	ldr	r2, [pc, #452]	; (800721c <HAL_DMA_Abort+0x220>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d03b      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a70      	ldr	r2, [pc, #448]	; (8007220 <HAL_DMA_Abort+0x224>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d036      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a6e      	ldr	r2, [pc, #440]	; (8007224 <HAL_DMA_Abort+0x228>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6d      	ldr	r2, [pc, #436]	; (8007228 <HAL_DMA_Abort+0x22c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d02c      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6b      	ldr	r2, [pc, #428]	; (800722c <HAL_DMA_Abort+0x230>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6a      	ldr	r2, [pc, #424]	; (8007230 <HAL_DMA_Abort+0x234>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a68      	ldr	r2, [pc, #416]	; (8007234 <HAL_DMA_Abort+0x238>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a67      	ldr	r2, [pc, #412]	; (8007238 <HAL_DMA_Abort+0x23c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a65      	ldr	r2, [pc, #404]	; (800723c <HAL_DMA_Abort+0x240>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a64      	ldr	r2, [pc, #400]	; (8007240 <HAL_DMA_Abort+0x244>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a62      	ldr	r2, [pc, #392]	; (8007244 <HAL_DMA_Abort+0x248>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a61      	ldr	r2, [pc, #388]	; (8007248 <HAL_DMA_Abort+0x24c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_DMA_Abort+0xd6>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a5f      	ldr	r2, [pc, #380]	; (800724c <HAL_DMA_Abort+0x250>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d101      	bne.n	80070d6 <HAL_DMA_Abort+0xda>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <HAL_DMA_Abort+0xdc>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d013      	beq.n	8007104 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 021e 	bic.w	r2, r2, #30
 80070ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e00a      	b.n	800711a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 020e 	bic.w	r2, r2, #14
 8007112:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a3c      	ldr	r2, [pc, #240]	; (8007210 <HAL_DMA_Abort+0x214>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d072      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a3a      	ldr	r2, [pc, #232]	; (8007214 <HAL_DMA_Abort+0x218>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d06d      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a39      	ldr	r2, [pc, #228]	; (8007218 <HAL_DMA_Abort+0x21c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d068      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a37      	ldr	r2, [pc, #220]	; (800721c <HAL_DMA_Abort+0x220>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d063      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a36      	ldr	r2, [pc, #216]	; (8007220 <HAL_DMA_Abort+0x224>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d05e      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a34      	ldr	r2, [pc, #208]	; (8007224 <HAL_DMA_Abort+0x228>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d059      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a33      	ldr	r2, [pc, #204]	; (8007228 <HAL_DMA_Abort+0x22c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d054      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a31      	ldr	r2, [pc, #196]	; (800722c <HAL_DMA_Abort+0x230>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d04f      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a30      	ldr	r2, [pc, #192]	; (8007230 <HAL_DMA_Abort+0x234>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d04a      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2e      	ldr	r2, [pc, #184]	; (8007234 <HAL_DMA_Abort+0x238>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d045      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2d      	ldr	r2, [pc, #180]	; (8007238 <HAL_DMA_Abort+0x23c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d040      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a2b      	ldr	r2, [pc, #172]	; (800723c <HAL_DMA_Abort+0x240>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d03b      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2a      	ldr	r2, [pc, #168]	; (8007240 <HAL_DMA_Abort+0x244>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d036      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a28      	ldr	r2, [pc, #160]	; (8007244 <HAL_DMA_Abort+0x248>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d031      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a27      	ldr	r2, [pc, #156]	; (8007248 <HAL_DMA_Abort+0x24c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d02c      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a25      	ldr	r2, [pc, #148]	; (800724c <HAL_DMA_Abort+0x250>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d027      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a24      	ldr	r2, [pc, #144]	; (8007250 <HAL_DMA_Abort+0x254>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d022      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a22      	ldr	r2, [pc, #136]	; (8007254 <HAL_DMA_Abort+0x258>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01d      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a21      	ldr	r2, [pc, #132]	; (8007258 <HAL_DMA_Abort+0x25c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d018      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1f      	ldr	r2, [pc, #124]	; (800725c <HAL_DMA_Abort+0x260>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <HAL_DMA_Abort+0x264>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1c      	ldr	r2, [pc, #112]	; (8007264 <HAL_DMA_Abort+0x268>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <HAL_DMA_Abort+0x26c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_DMA_Abort+0x20e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <HAL_DMA_Abort+0x270>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d132      	bne.n	8007270 <HAL_DMA_Abort+0x274>
 800720a:	2301      	movs	r3, #1
 800720c:	e031      	b.n	8007272 <HAL_DMA_Abort+0x276>
 800720e:	bf00      	nop
 8007210:	40020010 	.word	0x40020010
 8007214:	40020028 	.word	0x40020028
 8007218:	40020040 	.word	0x40020040
 800721c:	40020058 	.word	0x40020058
 8007220:	40020070 	.word	0x40020070
 8007224:	40020088 	.word	0x40020088
 8007228:	400200a0 	.word	0x400200a0
 800722c:	400200b8 	.word	0x400200b8
 8007230:	40020410 	.word	0x40020410
 8007234:	40020428 	.word	0x40020428
 8007238:	40020440 	.word	0x40020440
 800723c:	40020458 	.word	0x40020458
 8007240:	40020470 	.word	0x40020470
 8007244:	40020488 	.word	0x40020488
 8007248:	400204a0 	.word	0x400204a0
 800724c:	400204b8 	.word	0x400204b8
 8007250:	58025408 	.word	0x58025408
 8007254:	5802541c 	.word	0x5802541c
 8007258:	58025430 	.word	0x58025430
 800725c:	58025444 	.word	0x58025444
 8007260:	58025458 	.word	0x58025458
 8007264:	5802546c 	.word	0x5802546c
 8007268:	58025480 	.word	0x58025480
 800726c:	58025494 	.word	0x58025494
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007284:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a6d      	ldr	r2, [pc, #436]	; (8007440 <HAL_DMA_Abort+0x444>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d04a      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a6b      	ldr	r2, [pc, #428]	; (8007444 <HAL_DMA_Abort+0x448>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d045      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a6a      	ldr	r2, [pc, #424]	; (8007448 <HAL_DMA_Abort+0x44c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d040      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a68      	ldr	r2, [pc, #416]	; (800744c <HAL_DMA_Abort+0x450>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d03b      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a67      	ldr	r2, [pc, #412]	; (8007450 <HAL_DMA_Abort+0x454>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d036      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a65      	ldr	r2, [pc, #404]	; (8007454 <HAL_DMA_Abort+0x458>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d031      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a64      	ldr	r2, [pc, #400]	; (8007458 <HAL_DMA_Abort+0x45c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d02c      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a62      	ldr	r2, [pc, #392]	; (800745c <HAL_DMA_Abort+0x460>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d027      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a61      	ldr	r2, [pc, #388]	; (8007460 <HAL_DMA_Abort+0x464>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5f      	ldr	r2, [pc, #380]	; (8007464 <HAL_DMA_Abort+0x468>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <HAL_DMA_Abort+0x46c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a5c      	ldr	r2, [pc, #368]	; (800746c <HAL_DMA_Abort+0x470>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a5b      	ldr	r2, [pc, #364]	; (8007470 <HAL_DMA_Abort+0x474>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a59      	ldr	r2, [pc, #356]	; (8007474 <HAL_DMA_Abort+0x478>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a58      	ldr	r2, [pc, #352]	; (8007478 <HAL_DMA_Abort+0x47c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_DMA_Abort+0x32a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a56      	ldr	r2, [pc, #344]	; (800747c <HAL_DMA_Abort+0x480>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d108      	bne.n	8007338 <HAL_DMA_Abort+0x33c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e007      	b.n	8007348 <HAL_DMA_Abort+0x34c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007348:	e013      	b.n	8007372 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800734a:	f7fc ff69 	bl	8004220 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b05      	cmp	r3, #5
 8007356:	d90c      	bls.n	8007372 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2203      	movs	r2, #3
 8007362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e12d      	b.n	80075ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e5      	bne.n	800734a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <HAL_DMA_Abort+0x444>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d04a      	beq.n	800741e <HAL_DMA_Abort+0x422>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2d      	ldr	r2, [pc, #180]	; (8007444 <HAL_DMA_Abort+0x448>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d045      	beq.n	800741e <HAL_DMA_Abort+0x422>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2c      	ldr	r2, [pc, #176]	; (8007448 <HAL_DMA_Abort+0x44c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d040      	beq.n	800741e <HAL_DMA_Abort+0x422>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2a      	ldr	r2, [pc, #168]	; (800744c <HAL_DMA_Abort+0x450>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d03b      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a29      	ldr	r2, [pc, #164]	; (8007450 <HAL_DMA_Abort+0x454>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d036      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a27      	ldr	r2, [pc, #156]	; (8007454 <HAL_DMA_Abort+0x458>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d031      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a26      	ldr	r2, [pc, #152]	; (8007458 <HAL_DMA_Abort+0x45c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d02c      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a24      	ldr	r2, [pc, #144]	; (800745c <HAL_DMA_Abort+0x460>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d027      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a23      	ldr	r2, [pc, #140]	; (8007460 <HAL_DMA_Abort+0x464>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d022      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a21      	ldr	r2, [pc, #132]	; (8007464 <HAL_DMA_Abort+0x468>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01d      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a20      	ldr	r2, [pc, #128]	; (8007468 <HAL_DMA_Abort+0x46c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d018      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1e      	ldr	r2, [pc, #120]	; (800746c <HAL_DMA_Abort+0x470>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <HAL_DMA_Abort+0x422>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <HAL_DMA_Abort+0x474>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00e      	beq.n	800741e <HAL_DMA_Abort+0x422>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_DMA_Abort+0x478>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <HAL_DMA_Abort+0x422>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_DMA_Abort+0x47c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_DMA_Abort+0x422>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_DMA_Abort+0x480>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <HAL_DMA_Abort+0x426>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <HAL_DMA_Abort+0x428>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d02b      	beq.n	8007480 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	223f      	movs	r2, #63	; 0x3f
 8007438:	409a      	lsls	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	609a      	str	r2, [r3, #8]
 800743e:	e02a      	b.n	8007496 <HAL_DMA_Abort+0x49a>
 8007440:	40020010 	.word	0x40020010
 8007444:	40020028 	.word	0x40020028
 8007448:	40020040 	.word	0x40020040
 800744c:	40020058 	.word	0x40020058
 8007450:	40020070 	.word	0x40020070
 8007454:	40020088 	.word	0x40020088
 8007458:	400200a0 	.word	0x400200a0
 800745c:	400200b8 	.word	0x400200b8
 8007460:	40020410 	.word	0x40020410
 8007464:	40020428 	.word	0x40020428
 8007468:	40020440 	.word	0x40020440
 800746c:	40020458 	.word	0x40020458
 8007470:	40020470 	.word	0x40020470
 8007474:	40020488 	.word	0x40020488
 8007478:	400204a0 	.word	0x400204a0
 800747c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007484:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	2201      	movs	r2, #1
 8007490:	409a      	lsls	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a4f      	ldr	r2, [pc, #316]	; (80075d8 <HAL_DMA_Abort+0x5dc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d072      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a4d      	ldr	r2, [pc, #308]	; (80075dc <HAL_DMA_Abort+0x5e0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d06d      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a4c      	ldr	r2, [pc, #304]	; (80075e0 <HAL_DMA_Abort+0x5e4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d068      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a4a      	ldr	r2, [pc, #296]	; (80075e4 <HAL_DMA_Abort+0x5e8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d063      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a49      	ldr	r2, [pc, #292]	; (80075e8 <HAL_DMA_Abort+0x5ec>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d05e      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a47      	ldr	r2, [pc, #284]	; (80075ec <HAL_DMA_Abort+0x5f0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d059      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a46      	ldr	r2, [pc, #280]	; (80075f0 <HAL_DMA_Abort+0x5f4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d054      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a44      	ldr	r2, [pc, #272]	; (80075f4 <HAL_DMA_Abort+0x5f8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d04f      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a43      	ldr	r2, [pc, #268]	; (80075f8 <HAL_DMA_Abort+0x5fc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a41      	ldr	r2, [pc, #260]	; (80075fc <HAL_DMA_Abort+0x600>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a40      	ldr	r2, [pc, #256]	; (8007600 <HAL_DMA_Abort+0x604>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3e      	ldr	r2, [pc, #248]	; (8007604 <HAL_DMA_Abort+0x608>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3d      	ldr	r2, [pc, #244]	; (8007608 <HAL_DMA_Abort+0x60c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3b      	ldr	r2, [pc, #236]	; (800760c <HAL_DMA_Abort+0x610>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a3a      	ldr	r2, [pc, #232]	; (8007610 <HAL_DMA_Abort+0x614>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a38      	ldr	r2, [pc, #224]	; (8007614 <HAL_DMA_Abort+0x618>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a37      	ldr	r2, [pc, #220]	; (8007618 <HAL_DMA_Abort+0x61c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a35      	ldr	r2, [pc, #212]	; (800761c <HAL_DMA_Abort+0x620>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a34      	ldr	r2, [pc, #208]	; (8007620 <HAL_DMA_Abort+0x624>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a32      	ldr	r2, [pc, #200]	; (8007624 <HAL_DMA_Abort+0x628>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a31      	ldr	r2, [pc, #196]	; (8007628 <HAL_DMA_Abort+0x62c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2f      	ldr	r2, [pc, #188]	; (800762c <HAL_DMA_Abort+0x630>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2e      	ldr	r2, [pc, #184]	; (8007630 <HAL_DMA_Abort+0x634>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_DMA_Abort+0x58a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2c      	ldr	r2, [pc, #176]	; (8007634 <HAL_DMA_Abort+0x638>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d101      	bne.n	800758a <HAL_DMA_Abort+0x58e>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <HAL_DMA_Abort+0x590>
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d015      	beq.n	80075bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007598:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00c      	beq.n	80075bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40020010 	.word	0x40020010
 80075dc:	40020028 	.word	0x40020028
 80075e0:	40020040 	.word	0x40020040
 80075e4:	40020058 	.word	0x40020058
 80075e8:	40020070 	.word	0x40020070
 80075ec:	40020088 	.word	0x40020088
 80075f0:	400200a0 	.word	0x400200a0
 80075f4:	400200b8 	.word	0x400200b8
 80075f8:	40020410 	.word	0x40020410
 80075fc:	40020428 	.word	0x40020428
 8007600:	40020440 	.word	0x40020440
 8007604:	40020458 	.word	0x40020458
 8007608:	40020470 	.word	0x40020470
 800760c:	40020488 	.word	0x40020488
 8007610:	400204a0 	.word	0x400204a0
 8007614:	400204b8 	.word	0x400204b8
 8007618:	58025408 	.word	0x58025408
 800761c:	5802541c 	.word	0x5802541c
 8007620:	58025430 	.word	0x58025430
 8007624:	58025444 	.word	0x58025444
 8007628:	58025458 	.word	0x58025458
 800762c:	5802546c 	.word	0x5802546c
 8007630:	58025480 	.word	0x58025480
 8007634:	58025494 	.word	0x58025494

08007638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e237      	b.n	8007aba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d004      	beq.n	8007660 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e22c      	b.n	8007aba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5c      	ldr	r2, [pc, #368]	; (80077d8 <HAL_DMA_Abort_IT+0x1a0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d04a      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5b      	ldr	r2, [pc, #364]	; (80077dc <HAL_DMA_Abort_IT+0x1a4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d045      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a59      	ldr	r2, [pc, #356]	; (80077e0 <HAL_DMA_Abort_IT+0x1a8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d040      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a58      	ldr	r2, [pc, #352]	; (80077e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d03b      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a56      	ldr	r2, [pc, #344]	; (80077e8 <HAL_DMA_Abort_IT+0x1b0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d036      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a55      	ldr	r2, [pc, #340]	; (80077ec <HAL_DMA_Abort_IT+0x1b4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d031      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a53      	ldr	r2, [pc, #332]	; (80077f0 <HAL_DMA_Abort_IT+0x1b8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d02c      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a52      	ldr	r2, [pc, #328]	; (80077f4 <HAL_DMA_Abort_IT+0x1bc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d027      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a50      	ldr	r2, [pc, #320]	; (80077f8 <HAL_DMA_Abort_IT+0x1c0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a4f      	ldr	r2, [pc, #316]	; (80077fc <HAL_DMA_Abort_IT+0x1c4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01d      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a4d      	ldr	r2, [pc, #308]	; (8007800 <HAL_DMA_Abort_IT+0x1c8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d018      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a4c      	ldr	r2, [pc, #304]	; (8007804 <HAL_DMA_Abort_IT+0x1cc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a4a      	ldr	r2, [pc, #296]	; (8007808 <HAL_DMA_Abort_IT+0x1d0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a49      	ldr	r2, [pc, #292]	; (800780c <HAL_DMA_Abort_IT+0x1d4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a47      	ldr	r2, [pc, #284]	; (8007810 <HAL_DMA_Abort_IT+0x1d8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_DMA_Abort_IT+0xc8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a46      	ldr	r2, [pc, #280]	; (8007814 <HAL_DMA_Abort_IT+0x1dc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d101      	bne.n	8007704 <HAL_DMA_Abort_IT+0xcc>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <HAL_DMA_Abort_IT+0xce>
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8086 	beq.w	8007818 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2204      	movs	r2, #4
 8007710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a2f      	ldr	r2, [pc, #188]	; (80077d8 <HAL_DMA_Abort_IT+0x1a0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d04a      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2e      	ldr	r2, [pc, #184]	; (80077dc <HAL_DMA_Abort_IT+0x1a4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d045      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a2c      	ldr	r2, [pc, #176]	; (80077e0 <HAL_DMA_Abort_IT+0x1a8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d040      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a2b      	ldr	r2, [pc, #172]	; (80077e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d03b      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <HAL_DMA_Abort_IT+0x1b0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d036      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a28      	ldr	r2, [pc, #160]	; (80077ec <HAL_DMA_Abort_IT+0x1b4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d031      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a26      	ldr	r2, [pc, #152]	; (80077f0 <HAL_DMA_Abort_IT+0x1b8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d02c      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a25      	ldr	r2, [pc, #148]	; (80077f4 <HAL_DMA_Abort_IT+0x1bc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d027      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a23      	ldr	r2, [pc, #140]	; (80077f8 <HAL_DMA_Abort_IT+0x1c0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d022      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a22      	ldr	r2, [pc, #136]	; (80077fc <HAL_DMA_Abort_IT+0x1c4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d01d      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a20      	ldr	r2, [pc, #128]	; (8007800 <HAL_DMA_Abort_IT+0x1c8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d018      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1f      	ldr	r2, [pc, #124]	; (8007804 <HAL_DMA_Abort_IT+0x1cc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d013      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <HAL_DMA_Abort_IT+0x1d0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00e      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a1c      	ldr	r2, [pc, #112]	; (800780c <HAL_DMA_Abort_IT+0x1d4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d009      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_DMA_Abort_IT+0x1d8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_DMA_Abort_IT+0x17c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a19      	ldr	r2, [pc, #100]	; (8007814 <HAL_DMA_Abort_IT+0x1dc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d108      	bne.n	80077c6 <HAL_DMA_Abort_IT+0x18e>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0201 	bic.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e178      	b.n	8007ab8 <HAL_DMA_Abort_IT+0x480>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e16f      	b.n	8007ab8 <HAL_DMA_Abort_IT+0x480>
 80077d8:	40020010 	.word	0x40020010
 80077dc:	40020028 	.word	0x40020028
 80077e0:	40020040 	.word	0x40020040
 80077e4:	40020058 	.word	0x40020058
 80077e8:	40020070 	.word	0x40020070
 80077ec:	40020088 	.word	0x40020088
 80077f0:	400200a0 	.word	0x400200a0
 80077f4:	400200b8 	.word	0x400200b8
 80077f8:	40020410 	.word	0x40020410
 80077fc:	40020428 	.word	0x40020428
 8007800:	40020440 	.word	0x40020440
 8007804:	40020458 	.word	0x40020458
 8007808:	40020470 	.word	0x40020470
 800780c:	40020488 	.word	0x40020488
 8007810:	400204a0 	.word	0x400204a0
 8007814:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 020e 	bic.w	r2, r2, #14
 8007826:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a6c      	ldr	r2, [pc, #432]	; (80079e0 <HAL_DMA_Abort_IT+0x3a8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d04a      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a6b      	ldr	r2, [pc, #428]	; (80079e4 <HAL_DMA_Abort_IT+0x3ac>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d045      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a69      	ldr	r2, [pc, #420]	; (80079e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d040      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a68      	ldr	r2, [pc, #416]	; (80079ec <HAL_DMA_Abort_IT+0x3b4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d03b      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a66      	ldr	r2, [pc, #408]	; (80079f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d036      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a65      	ldr	r2, [pc, #404]	; (80079f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d031      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a63      	ldr	r2, [pc, #396]	; (80079f8 <HAL_DMA_Abort_IT+0x3c0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d02c      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a62      	ldr	r2, [pc, #392]	; (80079fc <HAL_DMA_Abort_IT+0x3c4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d027      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a60      	ldr	r2, [pc, #384]	; (8007a00 <HAL_DMA_Abort_IT+0x3c8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d022      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a5f      	ldr	r2, [pc, #380]	; (8007a04 <HAL_DMA_Abort_IT+0x3cc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d01d      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a5d      	ldr	r2, [pc, #372]	; (8007a08 <HAL_DMA_Abort_IT+0x3d0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d018      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a5c      	ldr	r2, [pc, #368]	; (8007a0c <HAL_DMA_Abort_IT+0x3d4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a5a      	ldr	r2, [pc, #360]	; (8007a10 <HAL_DMA_Abort_IT+0x3d8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00e      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a59      	ldr	r2, [pc, #356]	; (8007a14 <HAL_DMA_Abort_IT+0x3dc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d009      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a57      	ldr	r2, [pc, #348]	; (8007a18 <HAL_DMA_Abort_IT+0x3e0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d004      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x290>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a56      	ldr	r2, [pc, #344]	; (8007a1c <HAL_DMA_Abort_IT+0x3e4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d108      	bne.n	80078da <HAL_DMA_Abort_IT+0x2a2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0201 	bic.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e007      	b.n	80078ea <HAL_DMA_Abort_IT+0x2b2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a3c      	ldr	r2, [pc, #240]	; (80079e0 <HAL_DMA_Abort_IT+0x3a8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d072      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a3a      	ldr	r2, [pc, #232]	; (80079e4 <HAL_DMA_Abort_IT+0x3ac>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d06d      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a39      	ldr	r2, [pc, #228]	; (80079e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d068      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a37      	ldr	r2, [pc, #220]	; (80079ec <HAL_DMA_Abort_IT+0x3b4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d063      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a36      	ldr	r2, [pc, #216]	; (80079f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d05e      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a34      	ldr	r2, [pc, #208]	; (80079f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d059      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a33      	ldr	r2, [pc, #204]	; (80079f8 <HAL_DMA_Abort_IT+0x3c0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d054      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a31      	ldr	r2, [pc, #196]	; (80079fc <HAL_DMA_Abort_IT+0x3c4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d04f      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a30      	ldr	r2, [pc, #192]	; (8007a00 <HAL_DMA_Abort_IT+0x3c8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d04a      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a2e      	ldr	r2, [pc, #184]	; (8007a04 <HAL_DMA_Abort_IT+0x3cc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d045      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a2d      	ldr	r2, [pc, #180]	; (8007a08 <HAL_DMA_Abort_IT+0x3d0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2b      	ldr	r2, [pc, #172]	; (8007a0c <HAL_DMA_Abort_IT+0x3d4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d03b      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <HAL_DMA_Abort_IT+0x3d8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d036      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <HAL_DMA_Abort_IT+0x3dc>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d031      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <HAL_DMA_Abort_IT+0x3e0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d02c      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a25      	ldr	r2, [pc, #148]	; (8007a1c <HAL_DMA_Abort_IT+0x3e4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <HAL_DMA_Abort_IT+0x3e8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d022      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a22      	ldr	r2, [pc, #136]	; (8007a24 <HAL_DMA_Abort_IT+0x3ec>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01d      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a21      	ldr	r2, [pc, #132]	; (8007a28 <HAL_DMA_Abort_IT+0x3f0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1f      	ldr	r2, [pc, #124]	; (8007a2c <HAL_DMA_Abort_IT+0x3f4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <HAL_DMA_Abort_IT+0x3f8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <HAL_DMA_Abort_IT+0x3fc>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1b      	ldr	r2, [pc, #108]	; (8007a38 <HAL_DMA_Abort_IT+0x400>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_DMA_Abort_IT+0x3a2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <HAL_DMA_Abort_IT+0x404>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d132      	bne.n	8007a40 <HAL_DMA_Abort_IT+0x408>
 80079da:	2301      	movs	r3, #1
 80079dc:	e031      	b.n	8007a42 <HAL_DMA_Abort_IT+0x40a>
 80079de:	bf00      	nop
 80079e0:	40020010 	.word	0x40020010
 80079e4:	40020028 	.word	0x40020028
 80079e8:	40020040 	.word	0x40020040
 80079ec:	40020058 	.word	0x40020058
 80079f0:	40020070 	.word	0x40020070
 80079f4:	40020088 	.word	0x40020088
 80079f8:	400200a0 	.word	0x400200a0
 80079fc:	400200b8 	.word	0x400200b8
 8007a00:	40020410 	.word	0x40020410
 8007a04:	40020428 	.word	0x40020428
 8007a08:	40020440 	.word	0x40020440
 8007a0c:	40020458 	.word	0x40020458
 8007a10:	40020470 	.word	0x40020470
 8007a14:	40020488 	.word	0x40020488
 8007a18:	400204a0 	.word	0x400204a0
 8007a1c:	400204b8 	.word	0x400204b8
 8007a20:	58025408 	.word	0x58025408
 8007a24:	5802541c 	.word	0x5802541c
 8007a28:	58025430 	.word	0x58025430
 8007a2c:	58025444 	.word	0x58025444
 8007a30:	58025458 	.word	0x58025458
 8007a34:	5802546c 	.word	0x5802546c
 8007a38:	58025480 	.word	0x58025480
 8007a3c:	58025494 	.word	0x58025494
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d028      	beq.n	8007a98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	2201      	movs	r2, #1
 8007a66:	409a      	lsls	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop

08007ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	; 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ad0:	4b67      	ldr	r3, [pc, #412]	; (8007c70 <HAL_DMA_IRQHandler+0x1ac>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a67      	ldr	r2, [pc, #412]	; (8007c74 <HAL_DMA_IRQHandler+0x1b0>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	0a9b      	lsrs	r3, r3, #10
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a5f      	ldr	r2, [pc, #380]	; (8007c78 <HAL_DMA_IRQHandler+0x1b4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d04a      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a5d      	ldr	r2, [pc, #372]	; (8007c7c <HAL_DMA_IRQHandler+0x1b8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d045      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a5c      	ldr	r2, [pc, #368]	; (8007c80 <HAL_DMA_IRQHandler+0x1bc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d040      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a5a      	ldr	r2, [pc, #360]	; (8007c84 <HAL_DMA_IRQHandler+0x1c0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d03b      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a59      	ldr	r2, [pc, #356]	; (8007c88 <HAL_DMA_IRQHandler+0x1c4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d036      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a57      	ldr	r2, [pc, #348]	; (8007c8c <HAL_DMA_IRQHandler+0x1c8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d031      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a56      	ldr	r2, [pc, #344]	; (8007c90 <HAL_DMA_IRQHandler+0x1cc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d02c      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a54      	ldr	r2, [pc, #336]	; (8007c94 <HAL_DMA_IRQHandler+0x1d0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d027      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a53      	ldr	r2, [pc, #332]	; (8007c98 <HAL_DMA_IRQHandler+0x1d4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d022      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a51      	ldr	r2, [pc, #324]	; (8007c9c <HAL_DMA_IRQHandler+0x1d8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01d      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a50      	ldr	r2, [pc, #320]	; (8007ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d018      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a4e      	ldr	r2, [pc, #312]	; (8007ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a4d      	ldr	r2, [pc, #308]	; (8007ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00e      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a4b      	ldr	r2, [pc, #300]	; (8007cac <HAL_DMA_IRQHandler+0x1e8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a4a      	ldr	r2, [pc, #296]	; (8007cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_DMA_IRQHandler+0xd2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a48      	ldr	r2, [pc, #288]	; (8007cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d101      	bne.n	8007b9a <HAL_DMA_IRQHandler+0xd6>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <HAL_DMA_IRQHandler+0xd8>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 842b 	beq.w	80083f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba6:	f003 031f 	and.w	r3, r3, #31
 8007baa:	2208      	movs	r2, #8
 8007bac:	409a      	lsls	r2, r3
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80a2 	beq.w	8007cfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2e      	ldr	r2, [pc, #184]	; (8007c78 <HAL_DMA_IRQHandler+0x1b4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d04a      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a2d      	ldr	r2, [pc, #180]	; (8007c7c <HAL_DMA_IRQHandler+0x1b8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d045      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2b      	ldr	r2, [pc, #172]	; (8007c80 <HAL_DMA_IRQHandler+0x1bc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d040      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <HAL_DMA_IRQHandler+0x1c0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d03b      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a28      	ldr	r2, [pc, #160]	; (8007c88 <HAL_DMA_IRQHandler+0x1c4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d036      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a27      	ldr	r2, [pc, #156]	; (8007c8c <HAL_DMA_IRQHandler+0x1c8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d031      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a25      	ldr	r2, [pc, #148]	; (8007c90 <HAL_DMA_IRQHandler+0x1cc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d02c      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a24      	ldr	r2, [pc, #144]	; (8007c94 <HAL_DMA_IRQHandler+0x1d0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d027      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <HAL_DMA_IRQHandler+0x1d4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d022      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <HAL_DMA_IRQHandler+0x1d8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d01d      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d018      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d013      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00e      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1b      	ldr	r2, [pc, #108]	; (8007cac <HAL_DMA_IRQHandler+0x1e8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d009      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x194>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a18      	ldr	r2, [pc, #96]	; (8007cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d12f      	bne.n	8007cb8 <HAL_DMA_IRQHandler+0x1f4>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0304 	and.w	r3, r3, #4
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	e02e      	b.n	8007ccc <HAL_DMA_IRQHandler+0x208>
 8007c6e:	bf00      	nop
 8007c70:	24000090 	.word	0x24000090
 8007c74:	1b4e81b5 	.word	0x1b4e81b5
 8007c78:	40020010 	.word	0x40020010
 8007c7c:	40020028 	.word	0x40020028
 8007c80:	40020040 	.word	0x40020040
 8007c84:	40020058 	.word	0x40020058
 8007c88:	40020070 	.word	0x40020070
 8007c8c:	40020088 	.word	0x40020088
 8007c90:	400200a0 	.word	0x400200a0
 8007c94:	400200b8 	.word	0x400200b8
 8007c98:	40020410 	.word	0x40020410
 8007c9c:	40020428 	.word	0x40020428
 8007ca0:	40020440 	.word	0x40020440
 8007ca4:	40020458 	.word	0x40020458
 8007ca8:	40020470 	.word	0x40020470
 8007cac:	40020488 	.word	0x40020488
 8007cb0:	400204a0 	.word	0x400204a0
 8007cb4:	400204b8 	.word	0x400204b8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d015      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0204 	bic.w	r2, r2, #4
 8007cde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	2208      	movs	r2, #8
 8007cea:	409a      	lsls	r2, r3
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	f043 0201 	orr.w	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d06e      	beq.n	8007df0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a69      	ldr	r2, [pc, #420]	; (8007ebc <HAL_DMA_IRQHandler+0x3f8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d04a      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a67      	ldr	r2, [pc, #412]	; (8007ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d045      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a66      	ldr	r2, [pc, #408]	; (8007ec4 <HAL_DMA_IRQHandler+0x400>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d040      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a64      	ldr	r2, [pc, #400]	; (8007ec8 <HAL_DMA_IRQHandler+0x404>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d03b      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a63      	ldr	r2, [pc, #396]	; (8007ecc <HAL_DMA_IRQHandler+0x408>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d036      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a61      	ldr	r2, [pc, #388]	; (8007ed0 <HAL_DMA_IRQHandler+0x40c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d031      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a60      	ldr	r2, [pc, #384]	; (8007ed4 <HAL_DMA_IRQHandler+0x410>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d02c      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a5e      	ldr	r2, [pc, #376]	; (8007ed8 <HAL_DMA_IRQHandler+0x414>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d027      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a5d      	ldr	r2, [pc, #372]	; (8007edc <HAL_DMA_IRQHandler+0x418>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a5b      	ldr	r2, [pc, #364]	; (8007ee0 <HAL_DMA_IRQHandler+0x41c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01d      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a5a      	ldr	r2, [pc, #360]	; (8007ee4 <HAL_DMA_IRQHandler+0x420>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a58      	ldr	r2, [pc, #352]	; (8007ee8 <HAL_DMA_IRQHandler+0x424>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a57      	ldr	r2, [pc, #348]	; (8007eec <HAL_DMA_IRQHandler+0x428>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a55      	ldr	r2, [pc, #340]	; (8007ef0 <HAL_DMA_IRQHandler+0x42c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a54      	ldr	r2, [pc, #336]	; (8007ef4 <HAL_DMA_IRQHandler+0x430>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x2ee>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a52      	ldr	r2, [pc, #328]	; (8007ef8 <HAL_DMA_IRQHandler+0x434>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d10a      	bne.n	8007dc8 <HAL_DMA_IRQHandler+0x304>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	e003      	b.n	8007dd0 <HAL_DMA_IRQHandler+0x30c>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00d      	beq.n	8007df0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2201      	movs	r2, #1
 8007dde:	409a      	lsls	r2, r3
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de8:	f043 0202 	orr.w	r2, r3, #2
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2204      	movs	r2, #4
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 808f 	beq.w	8007f24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <HAL_DMA_IRQHandler+0x3f8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04a      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d045      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <HAL_DMA_IRQHandler+0x400>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d040      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <HAL_DMA_IRQHandler+0x404>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d03b      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a26      	ldr	r2, [pc, #152]	; (8007ecc <HAL_DMA_IRQHandler+0x408>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d036      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <HAL_DMA_IRQHandler+0x40c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d031      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a23      	ldr	r2, [pc, #140]	; (8007ed4 <HAL_DMA_IRQHandler+0x410>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d02c      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a21      	ldr	r2, [pc, #132]	; (8007ed8 <HAL_DMA_IRQHandler+0x414>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d027      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a20      	ldr	r2, [pc, #128]	; (8007edc <HAL_DMA_IRQHandler+0x418>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <HAL_DMA_IRQHandler+0x41c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01d      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_DMA_IRQHandler+0x420>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d018      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_DMA_IRQHandler+0x424>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <HAL_DMA_IRQHandler+0x428>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_DMA_IRQHandler+0x42c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <HAL_DMA_IRQHandler+0x430>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x3e2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a15      	ldr	r2, [pc, #84]	; (8007ef8 <HAL_DMA_IRQHandler+0x434>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d12a      	bne.n	8007efc <HAL_DMA_IRQHandler+0x438>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2301      	movne	r3, #1
 8007eb6:	2300      	moveq	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	e023      	b.n	8007f04 <HAL_DMA_IRQHandler+0x440>
 8007ebc:	40020010 	.word	0x40020010
 8007ec0:	40020028 	.word	0x40020028
 8007ec4:	40020040 	.word	0x40020040
 8007ec8:	40020058 	.word	0x40020058
 8007ecc:	40020070 	.word	0x40020070
 8007ed0:	40020088 	.word	0x40020088
 8007ed4:	400200a0 	.word	0x400200a0
 8007ed8:	400200b8 	.word	0x400200b8
 8007edc:	40020410 	.word	0x40020410
 8007ee0:	40020428 	.word	0x40020428
 8007ee4:	40020440 	.word	0x40020440
 8007ee8:	40020458 	.word	0x40020458
 8007eec:	40020470 	.word	0x40020470
 8007ef0:	40020488 	.word	0x40020488
 8007ef4:	400204a0 	.word	0x400204a0
 8007ef8:	400204b8 	.word	0x400204b8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00d      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	2204      	movs	r2, #4
 8007f12:	409a      	lsls	r2, r3
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1c:	f043 0204 	orr.w	r2, r3, #4
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80a6 	beq.w	8008086 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a85      	ldr	r2, [pc, #532]	; (8008154 <HAL_DMA_IRQHandler+0x690>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d04a      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a83      	ldr	r2, [pc, #524]	; (8008158 <HAL_DMA_IRQHandler+0x694>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d045      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a82      	ldr	r2, [pc, #520]	; (800815c <HAL_DMA_IRQHandler+0x698>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d040      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a80      	ldr	r2, [pc, #512]	; (8008160 <HAL_DMA_IRQHandler+0x69c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d03b      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a7f      	ldr	r2, [pc, #508]	; (8008164 <HAL_DMA_IRQHandler+0x6a0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d036      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a7d      	ldr	r2, [pc, #500]	; (8008168 <HAL_DMA_IRQHandler+0x6a4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d031      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a7c      	ldr	r2, [pc, #496]	; (800816c <HAL_DMA_IRQHandler+0x6a8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d02c      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a7a      	ldr	r2, [pc, #488]	; (8008170 <HAL_DMA_IRQHandler+0x6ac>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d027      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a79      	ldr	r2, [pc, #484]	; (8008174 <HAL_DMA_IRQHandler+0x6b0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d022      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a77      	ldr	r2, [pc, #476]	; (8008178 <HAL_DMA_IRQHandler+0x6b4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d01d      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a76      	ldr	r2, [pc, #472]	; (800817c <HAL_DMA_IRQHandler+0x6b8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d018      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a74      	ldr	r2, [pc, #464]	; (8008180 <HAL_DMA_IRQHandler+0x6bc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a73      	ldr	r2, [pc, #460]	; (8008184 <HAL_DMA_IRQHandler+0x6c0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00e      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a71      	ldr	r2, [pc, #452]	; (8008188 <HAL_DMA_IRQHandler+0x6c4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d009      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a70      	ldr	r2, [pc, #448]	; (800818c <HAL_DMA_IRQHandler+0x6c8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d004      	beq.n	8007fda <HAL_DMA_IRQHandler+0x516>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a6e      	ldr	r2, [pc, #440]	; (8008190 <HAL_DMA_IRQHandler+0x6cc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_DMA_IRQHandler+0x52c>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	e009      	b.n	8008004 <HAL_DMA_IRQHandler+0x540>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf14      	ite	ne
 8007ffe:	2301      	movne	r3, #1
 8008000:	2300      	moveq	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d03e      	beq.n	8008086 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	2210      	movs	r2, #16
 8008012:	409a      	lsls	r2, r3
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d108      	bne.n	8008046 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d024      	beq.n	8008086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
 8008044:	e01f      	b.n	8008086 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01b      	beq.n	8008086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
 8008056:	e016      	b.n	8008086 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d107      	bne.n	8008076 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0208 	bic.w	r2, r2, #8
 8008074:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	f003 031f 	and.w	r3, r3, #31
 800808e:	2220      	movs	r2, #32
 8008090:	409a      	lsls	r2, r3
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	4013      	ands	r3, r2
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8110 	beq.w	80082bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a2c      	ldr	r2, [pc, #176]	; (8008154 <HAL_DMA_IRQHandler+0x690>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d04a      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a2b      	ldr	r2, [pc, #172]	; (8008158 <HAL_DMA_IRQHandler+0x694>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d045      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a29      	ldr	r2, [pc, #164]	; (800815c <HAL_DMA_IRQHandler+0x698>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d040      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a28      	ldr	r2, [pc, #160]	; (8008160 <HAL_DMA_IRQHandler+0x69c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d03b      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a26      	ldr	r2, [pc, #152]	; (8008164 <HAL_DMA_IRQHandler+0x6a0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d036      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a25      	ldr	r2, [pc, #148]	; (8008168 <HAL_DMA_IRQHandler+0x6a4>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d031      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a23      	ldr	r2, [pc, #140]	; (800816c <HAL_DMA_IRQHandler+0x6a8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d02c      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a22      	ldr	r2, [pc, #136]	; (8008170 <HAL_DMA_IRQHandler+0x6ac>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d027      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a20      	ldr	r2, [pc, #128]	; (8008174 <HAL_DMA_IRQHandler+0x6b0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d022      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <HAL_DMA_IRQHandler+0x6b4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d01d      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1d      	ldr	r2, [pc, #116]	; (800817c <HAL_DMA_IRQHandler+0x6b8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d018      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1c      	ldr	r2, [pc, #112]	; (8008180 <HAL_DMA_IRQHandler+0x6bc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d013      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <HAL_DMA_IRQHandler+0x6c0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00e      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a19      	ldr	r2, [pc, #100]	; (8008188 <HAL_DMA_IRQHandler+0x6c4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d009      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a17      	ldr	r2, [pc, #92]	; (800818c <HAL_DMA_IRQHandler+0x6c8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d004      	beq.n	800813c <HAL_DMA_IRQHandler+0x678>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a16      	ldr	r2, [pc, #88]	; (8008190 <HAL_DMA_IRQHandler+0x6cc>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d12b      	bne.n	8008194 <HAL_DMA_IRQHandler+0x6d0>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf14      	ite	ne
 800814a:	2301      	movne	r3, #1
 800814c:	2300      	moveq	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	e02a      	b.n	80081a8 <HAL_DMA_IRQHandler+0x6e4>
 8008152:	bf00      	nop
 8008154:	40020010 	.word	0x40020010
 8008158:	40020028 	.word	0x40020028
 800815c:	40020040 	.word	0x40020040
 8008160:	40020058 	.word	0x40020058
 8008164:	40020070 	.word	0x40020070
 8008168:	40020088 	.word	0x40020088
 800816c:	400200a0 	.word	0x400200a0
 8008170:	400200b8 	.word	0x400200b8
 8008174:	40020410 	.word	0x40020410
 8008178:	40020428 	.word	0x40020428
 800817c:	40020440 	.word	0x40020440
 8008180:	40020458 	.word	0x40020458
 8008184:	40020470 	.word	0x40020470
 8008188:	40020488 	.word	0x40020488
 800818c:	400204a0 	.word	0x400204a0
 8008190:	400204b8 	.word	0x400204b8
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8087 	beq.w	80082bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	2220      	movs	r2, #32
 80081b8:	409a      	lsls	r2, r3
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d139      	bne.n	800823e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0216 	bic.w	r2, r2, #22
 80081d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	695a      	ldr	r2, [r3, #20]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d103      	bne.n	80081fa <HAL_DMA_IRQHandler+0x736>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0208 	bic.w	r2, r2, #8
 8008208:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820e:	f003 031f 	and.w	r3, r3, #31
 8008212:	223f      	movs	r2, #63	; 0x3f
 8008214:	409a      	lsls	r2, r3
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 834a 	beq.w	80088c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	4798      	blx	r3
          }
          return;
 800823c:	e344      	b.n	80088c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d018      	beq.n	800827e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d108      	bne.n	800826c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825e:	2b00      	cmp	r3, #0
 8008260:	d02c      	beq.n	80082bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
 800826a:	e027      	b.n	80082bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d023      	beq.n	80082bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
 800827c:	e01e      	b.n	80082bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0210 	bic.w	r2, r2, #16
 800829a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8306 	beq.w	80088d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8088 	beq.w	80083e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2204      	movs	r2, #4
 80082d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a7a      	ldr	r2, [pc, #488]	; (80084cc <HAL_DMA_IRQHandler+0xa08>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d04a      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a79      	ldr	r2, [pc, #484]	; (80084d0 <HAL_DMA_IRQHandler+0xa0c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d045      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a77      	ldr	r2, [pc, #476]	; (80084d4 <HAL_DMA_IRQHandler+0xa10>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d040      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a76      	ldr	r2, [pc, #472]	; (80084d8 <HAL_DMA_IRQHandler+0xa14>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d03b      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a74      	ldr	r2, [pc, #464]	; (80084dc <HAL_DMA_IRQHandler+0xa18>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d036      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a73      	ldr	r2, [pc, #460]	; (80084e0 <HAL_DMA_IRQHandler+0xa1c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d031      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a71      	ldr	r2, [pc, #452]	; (80084e4 <HAL_DMA_IRQHandler+0xa20>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d02c      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a70      	ldr	r2, [pc, #448]	; (80084e8 <HAL_DMA_IRQHandler+0xa24>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d027      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a6e      	ldr	r2, [pc, #440]	; (80084ec <HAL_DMA_IRQHandler+0xa28>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d022      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a6d      	ldr	r2, [pc, #436]	; (80084f0 <HAL_DMA_IRQHandler+0xa2c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d01d      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a6b      	ldr	r2, [pc, #428]	; (80084f4 <HAL_DMA_IRQHandler+0xa30>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a6a      	ldr	r2, [pc, #424]	; (80084f8 <HAL_DMA_IRQHandler+0xa34>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a68      	ldr	r2, [pc, #416]	; (80084fc <HAL_DMA_IRQHandler+0xa38>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a67      	ldr	r2, [pc, #412]	; (8008500 <HAL_DMA_IRQHandler+0xa3c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a65      	ldr	r2, [pc, #404]	; (8008504 <HAL_DMA_IRQHandler+0xa40>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_DMA_IRQHandler+0x8b8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a64      	ldr	r2, [pc, #400]	; (8008508 <HAL_DMA_IRQHandler+0xa44>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d108      	bne.n	800838e <HAL_DMA_IRQHandler+0x8ca>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0201 	bic.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e007      	b.n	800839e <HAL_DMA_IRQHandler+0x8da>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d307      	bcc.n	80083ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1f2      	bne.n	800839e <HAL_DMA_IRQHandler+0x8da>
 80083b8:	e000      	b.n	80083bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80083ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2203      	movs	r2, #3
 80083ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80083d2:	e003      	b.n	80083dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8272 	beq.w	80088d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	e26c      	b.n	80088d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a43      	ldr	r2, [pc, #268]	; (800850c <HAL_DMA_IRQHandler+0xa48>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d022      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a42      	ldr	r2, [pc, #264]	; (8008510 <HAL_DMA_IRQHandler+0xa4c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d01d      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a40      	ldr	r2, [pc, #256]	; (8008514 <HAL_DMA_IRQHandler+0xa50>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d018      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a3f      	ldr	r2, [pc, #252]	; (8008518 <HAL_DMA_IRQHandler+0xa54>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d013      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a3d      	ldr	r2, [pc, #244]	; (800851c <HAL_DMA_IRQHandler+0xa58>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00e      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a3c      	ldr	r2, [pc, #240]	; (8008520 <HAL_DMA_IRQHandler+0xa5c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d009      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a3a      	ldr	r2, [pc, #232]	; (8008524 <HAL_DMA_IRQHandler+0xa60>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d004      	beq.n	8008448 <HAL_DMA_IRQHandler+0x984>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a39      	ldr	r2, [pc, #228]	; (8008528 <HAL_DMA_IRQHandler+0xa64>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d101      	bne.n	800844c <HAL_DMA_IRQHandler+0x988>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <HAL_DMA_IRQHandler+0x98a>
 800844c:	2300      	movs	r3, #0
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 823f 	beq.w	80088d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	2204      	movs	r2, #4
 8008466:	409a      	lsls	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80cd 	beq.w	800860c <HAL_DMA_IRQHandler+0xb48>
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80c7 	beq.w	800860c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2204      	movs	r2, #4
 8008488:	409a      	lsls	r2, r3
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d049      	beq.n	800852c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8210 	beq.w	80088cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084b4:	e20a      	b.n	80088cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8206 	beq.w	80088cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084c8:	e200      	b.n	80088cc <HAL_DMA_IRQHandler+0xe08>
 80084ca:	bf00      	nop
 80084cc:	40020010 	.word	0x40020010
 80084d0:	40020028 	.word	0x40020028
 80084d4:	40020040 	.word	0x40020040
 80084d8:	40020058 	.word	0x40020058
 80084dc:	40020070 	.word	0x40020070
 80084e0:	40020088 	.word	0x40020088
 80084e4:	400200a0 	.word	0x400200a0
 80084e8:	400200b8 	.word	0x400200b8
 80084ec:	40020410 	.word	0x40020410
 80084f0:	40020428 	.word	0x40020428
 80084f4:	40020440 	.word	0x40020440
 80084f8:	40020458 	.word	0x40020458
 80084fc:	40020470 	.word	0x40020470
 8008500:	40020488 	.word	0x40020488
 8008504:	400204a0 	.word	0x400204a0
 8008508:	400204b8 	.word	0x400204b8
 800850c:	58025408 	.word	0x58025408
 8008510:	5802541c 	.word	0x5802541c
 8008514:	58025430 	.word	0x58025430
 8008518:	58025444 	.word	0x58025444
 800851c:	58025458 	.word	0x58025458
 8008520:	5802546c 	.word	0x5802546c
 8008524:	58025480 	.word	0x58025480
 8008528:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d160      	bne.n	80085f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a7f      	ldr	r2, [pc, #508]	; (8008738 <HAL_DMA_IRQHandler+0xc74>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d04a      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a7d      	ldr	r2, [pc, #500]	; (800873c <HAL_DMA_IRQHandler+0xc78>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d045      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a7c      	ldr	r2, [pc, #496]	; (8008740 <HAL_DMA_IRQHandler+0xc7c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d040      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7a      	ldr	r2, [pc, #488]	; (8008744 <HAL_DMA_IRQHandler+0xc80>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d03b      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a79      	ldr	r2, [pc, #484]	; (8008748 <HAL_DMA_IRQHandler+0xc84>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d036      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a77      	ldr	r2, [pc, #476]	; (800874c <HAL_DMA_IRQHandler+0xc88>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d031      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a76      	ldr	r2, [pc, #472]	; (8008750 <HAL_DMA_IRQHandler+0xc8c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d02c      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a74      	ldr	r2, [pc, #464]	; (8008754 <HAL_DMA_IRQHandler+0xc90>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d027      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a73      	ldr	r2, [pc, #460]	; (8008758 <HAL_DMA_IRQHandler+0xc94>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d022      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a71      	ldr	r2, [pc, #452]	; (800875c <HAL_DMA_IRQHandler+0xc98>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d01d      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a70      	ldr	r2, [pc, #448]	; (8008760 <HAL_DMA_IRQHandler+0xc9c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d018      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a6e      	ldr	r2, [pc, #440]	; (8008764 <HAL_DMA_IRQHandler+0xca0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d013      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a6d      	ldr	r2, [pc, #436]	; (8008768 <HAL_DMA_IRQHandler+0xca4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00e      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a6b      	ldr	r2, [pc, #428]	; (800876c <HAL_DMA_IRQHandler+0xca8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d009      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a6a      	ldr	r2, [pc, #424]	; (8008770 <HAL_DMA_IRQHandler+0xcac>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d004      	beq.n	80085d6 <HAL_DMA_IRQHandler+0xb12>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a68      	ldr	r2, [pc, #416]	; (8008774 <HAL_DMA_IRQHandler+0xcb0>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d108      	bne.n	80085e8 <HAL_DMA_IRQHandler+0xb24>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0208 	bic.w	r2, r2, #8
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e007      	b.n	80085f8 <HAL_DMA_IRQHandler+0xb34>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0204 	bic.w	r2, r2, #4
 80085f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8165 	beq.w	80088cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800860a:	e15f      	b.n	80088cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	2202      	movs	r2, #2
 8008616:	409a      	lsls	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	4013      	ands	r3, r2
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80c5 	beq.w	80087ac <HAL_DMA_IRQHandler+0xce8>
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80bf 	beq.w	80087ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	2202      	movs	r2, #2
 8008638:	409a      	lsls	r2, r3
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d018      	beq.n	800867a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 813a 	beq.w	80088d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008664:	e134      	b.n	80088d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8130 	beq.w	80088d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008678:	e12a      	b.n	80088d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	f040 8089 	bne.w	8008798 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2b      	ldr	r2, [pc, #172]	; (8008738 <HAL_DMA_IRQHandler+0xc74>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d04a      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a29      	ldr	r2, [pc, #164]	; (800873c <HAL_DMA_IRQHandler+0xc78>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d045      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a28      	ldr	r2, [pc, #160]	; (8008740 <HAL_DMA_IRQHandler+0xc7c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d040      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a26      	ldr	r2, [pc, #152]	; (8008744 <HAL_DMA_IRQHandler+0xc80>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d03b      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a25      	ldr	r2, [pc, #148]	; (8008748 <HAL_DMA_IRQHandler+0xc84>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d036      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a23      	ldr	r2, [pc, #140]	; (800874c <HAL_DMA_IRQHandler+0xc88>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d031      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a22      	ldr	r2, [pc, #136]	; (8008750 <HAL_DMA_IRQHandler+0xc8c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d02c      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a20      	ldr	r2, [pc, #128]	; (8008754 <HAL_DMA_IRQHandler+0xc90>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d027      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <HAL_DMA_IRQHandler+0xc94>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1d      	ldr	r2, [pc, #116]	; (800875c <HAL_DMA_IRQHandler+0xc98>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01d      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a1c      	ldr	r2, [pc, #112]	; (8008760 <HAL_DMA_IRQHandler+0xc9c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1a      	ldr	r2, [pc, #104]	; (8008764 <HAL_DMA_IRQHandler+0xca0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a19      	ldr	r2, [pc, #100]	; (8008768 <HAL_DMA_IRQHandler+0xca4>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a17      	ldr	r2, [pc, #92]	; (800876c <HAL_DMA_IRQHandler+0xca8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a16      	ldr	r2, [pc, #88]	; (8008770 <HAL_DMA_IRQHandler+0xcac>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_DMA_IRQHandler+0xc62>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a14      	ldr	r2, [pc, #80]	; (8008774 <HAL_DMA_IRQHandler+0xcb0>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d128      	bne.n	8008778 <HAL_DMA_IRQHandler+0xcb4>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0214 	bic.w	r2, r2, #20
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	e027      	b.n	8008788 <HAL_DMA_IRQHandler+0xcc4>
 8008738:	40020010 	.word	0x40020010
 800873c:	40020028 	.word	0x40020028
 8008740:	40020040 	.word	0x40020040
 8008744:	40020058 	.word	0x40020058
 8008748:	40020070 	.word	0x40020070
 800874c:	40020088 	.word	0x40020088
 8008750:	400200a0 	.word	0x400200a0
 8008754:	400200b8 	.word	0x400200b8
 8008758:	40020410 	.word	0x40020410
 800875c:	40020428 	.word	0x40020428
 8008760:	40020440 	.word	0x40020440
 8008764:	40020458 	.word	0x40020458
 8008768:	40020470 	.word	0x40020470
 800876c:	40020488 	.word	0x40020488
 8008770:	400204a0 	.word	0x400204a0
 8008774:	400204b8 	.word	0x400204b8
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 020a 	bic.w	r2, r2, #10
 8008786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8097 	beq.w	80088d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087aa:	e091      	b.n	80088d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	2208      	movs	r2, #8
 80087b6:	409a      	lsls	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4013      	ands	r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8088 	beq.w	80088d2 <HAL_DMA_IRQHandler+0xe0e>
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 8082 	beq.w	80088d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a41      	ldr	r2, [pc, #260]	; (80088d8 <HAL_DMA_IRQHandler+0xe14>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d04a      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a3f      	ldr	r2, [pc, #252]	; (80088dc <HAL_DMA_IRQHandler+0xe18>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d045      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a3e      	ldr	r2, [pc, #248]	; (80088e0 <HAL_DMA_IRQHandler+0xe1c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d040      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a3c      	ldr	r2, [pc, #240]	; (80088e4 <HAL_DMA_IRQHandler+0xe20>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d03b      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a3b      	ldr	r2, [pc, #236]	; (80088e8 <HAL_DMA_IRQHandler+0xe24>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d036      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a39      	ldr	r2, [pc, #228]	; (80088ec <HAL_DMA_IRQHandler+0xe28>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d031      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a38      	ldr	r2, [pc, #224]	; (80088f0 <HAL_DMA_IRQHandler+0xe2c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d02c      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a36      	ldr	r2, [pc, #216]	; (80088f4 <HAL_DMA_IRQHandler+0xe30>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d027      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a35      	ldr	r2, [pc, #212]	; (80088f8 <HAL_DMA_IRQHandler+0xe34>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d022      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a33      	ldr	r2, [pc, #204]	; (80088fc <HAL_DMA_IRQHandler+0xe38>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01d      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a32      	ldr	r2, [pc, #200]	; (8008900 <HAL_DMA_IRQHandler+0xe3c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d018      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a30      	ldr	r2, [pc, #192]	; (8008904 <HAL_DMA_IRQHandler+0xe40>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <HAL_DMA_IRQHandler+0xe44>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00e      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a2d      	ldr	r2, [pc, #180]	; (800890c <HAL_DMA_IRQHandler+0xe48>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a2c      	ldr	r2, [pc, #176]	; (8008910 <HAL_DMA_IRQHandler+0xe4c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <HAL_DMA_IRQHandler+0xdaa>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <HAL_DMA_IRQHandler+0xe50>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d108      	bne.n	8008880 <HAL_DMA_IRQHandler+0xdbc>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 021c 	bic.w	r2, r2, #28
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e007      	b.n	8008890 <HAL_DMA_IRQHandler+0xdcc>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 020e 	bic.w	r2, r2, #14
 800888e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	2201      	movs	r2, #1
 800889a:	409a      	lsls	r2, r3
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
 80088c6:	e004      	b.n	80088d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80088c8:	bf00      	nop
 80088ca:	e002      	b.n	80088d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80088d2:	3728      	adds	r7, #40	; 0x28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40020010 	.word	0x40020010
 80088dc:	40020028 	.word	0x40020028
 80088e0:	40020040 	.word	0x40020040
 80088e4:	40020058 	.word	0x40020058
 80088e8:	40020070 	.word	0x40020070
 80088ec:	40020088 	.word	0x40020088
 80088f0:	400200a0 	.word	0x400200a0
 80088f4:	400200b8 	.word	0x400200b8
 80088f8:	40020410 	.word	0x40020410
 80088fc:	40020428 	.word	0x40020428
 8008900:	40020440 	.word	0x40020440
 8008904:	40020458 	.word	0x40020458
 8008908:	40020470 	.word	0x40020470
 800890c:	40020488 	.word	0x40020488
 8008910:	400204a0 	.word	0x400204a0
 8008914:	400204b8 	.word	0x400204b8

08008918 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008942:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008948:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a7f      	ldr	r2, [pc, #508]	; (8008b4c <DMA_SetConfig+0x21c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d072      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a7d      	ldr	r2, [pc, #500]	; (8008b50 <DMA_SetConfig+0x220>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d06d      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a7c      	ldr	r2, [pc, #496]	; (8008b54 <DMA_SetConfig+0x224>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d068      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a7a      	ldr	r2, [pc, #488]	; (8008b58 <DMA_SetConfig+0x228>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d063      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a79      	ldr	r2, [pc, #484]	; (8008b5c <DMA_SetConfig+0x22c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d05e      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a77      	ldr	r2, [pc, #476]	; (8008b60 <DMA_SetConfig+0x230>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d059      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a76      	ldr	r2, [pc, #472]	; (8008b64 <DMA_SetConfig+0x234>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d054      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a74      	ldr	r2, [pc, #464]	; (8008b68 <DMA_SetConfig+0x238>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d04f      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a73      	ldr	r2, [pc, #460]	; (8008b6c <DMA_SetConfig+0x23c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d04a      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a71      	ldr	r2, [pc, #452]	; (8008b70 <DMA_SetConfig+0x240>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d045      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a70      	ldr	r2, [pc, #448]	; (8008b74 <DMA_SetConfig+0x244>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d040      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a6e      	ldr	r2, [pc, #440]	; (8008b78 <DMA_SetConfig+0x248>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d03b      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a6d      	ldr	r2, [pc, #436]	; (8008b7c <DMA_SetConfig+0x24c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d036      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a6b      	ldr	r2, [pc, #428]	; (8008b80 <DMA_SetConfig+0x250>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d031      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a6a      	ldr	r2, [pc, #424]	; (8008b84 <DMA_SetConfig+0x254>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d02c      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a68      	ldr	r2, [pc, #416]	; (8008b88 <DMA_SetConfig+0x258>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d027      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a67      	ldr	r2, [pc, #412]	; (8008b8c <DMA_SetConfig+0x25c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d022      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a65      	ldr	r2, [pc, #404]	; (8008b90 <DMA_SetConfig+0x260>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01d      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a64      	ldr	r2, [pc, #400]	; (8008b94 <DMA_SetConfig+0x264>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d018      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a62      	ldr	r2, [pc, #392]	; (8008b98 <DMA_SetConfig+0x268>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a61      	ldr	r2, [pc, #388]	; (8008b9c <DMA_SetConfig+0x26c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00e      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a5f      	ldr	r2, [pc, #380]	; (8008ba0 <DMA_SetConfig+0x270>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d009      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a5e      	ldr	r2, [pc, #376]	; (8008ba4 <DMA_SetConfig+0x274>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d004      	beq.n	8008a3a <DMA_SetConfig+0x10a>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a5c      	ldr	r2, [pc, #368]	; (8008ba8 <DMA_SetConfig+0x278>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d101      	bne.n	8008a3e <DMA_SetConfig+0x10e>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <DMA_SetConfig+0x110>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00d      	beq.n	8008a60 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a4c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a5e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a39      	ldr	r2, [pc, #228]	; (8008b4c <DMA_SetConfig+0x21c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d04a      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a38      	ldr	r2, [pc, #224]	; (8008b50 <DMA_SetConfig+0x220>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d045      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a36      	ldr	r2, [pc, #216]	; (8008b54 <DMA_SetConfig+0x224>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d040      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a35      	ldr	r2, [pc, #212]	; (8008b58 <DMA_SetConfig+0x228>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d03b      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a33      	ldr	r2, [pc, #204]	; (8008b5c <DMA_SetConfig+0x22c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d036      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a32      	ldr	r2, [pc, #200]	; (8008b60 <DMA_SetConfig+0x230>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d031      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a30      	ldr	r2, [pc, #192]	; (8008b64 <DMA_SetConfig+0x234>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d02c      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a2f      	ldr	r2, [pc, #188]	; (8008b68 <DMA_SetConfig+0x238>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d027      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a2d      	ldr	r2, [pc, #180]	; (8008b6c <DMA_SetConfig+0x23c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d022      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a2c      	ldr	r2, [pc, #176]	; (8008b70 <DMA_SetConfig+0x240>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d01d      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a2a      	ldr	r2, [pc, #168]	; (8008b74 <DMA_SetConfig+0x244>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d018      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a29      	ldr	r2, [pc, #164]	; (8008b78 <DMA_SetConfig+0x248>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d013      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <DMA_SetConfig+0x24c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00e      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <DMA_SetConfig+0x250>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d009      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <DMA_SetConfig+0x254>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <DMA_SetConfig+0x1d0>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a23      	ldr	r2, [pc, #140]	; (8008b88 <DMA_SetConfig+0x258>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d101      	bne.n	8008b04 <DMA_SetConfig+0x1d4>
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <DMA_SetConfig+0x1d6>
 8008b04:	2300      	movs	r3, #0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d059      	beq.n	8008bbe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	223f      	movs	r2, #63	; 0x3f
 8008b14:	409a      	lsls	r2, r3
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b28:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b40      	cmp	r3, #64	; 0x40
 8008b38:	d138      	bne.n	8008bac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b4a:	e086      	b.n	8008c5a <DMA_SetConfig+0x32a>
 8008b4c:	40020010 	.word	0x40020010
 8008b50:	40020028 	.word	0x40020028
 8008b54:	40020040 	.word	0x40020040
 8008b58:	40020058 	.word	0x40020058
 8008b5c:	40020070 	.word	0x40020070
 8008b60:	40020088 	.word	0x40020088
 8008b64:	400200a0 	.word	0x400200a0
 8008b68:	400200b8 	.word	0x400200b8
 8008b6c:	40020410 	.word	0x40020410
 8008b70:	40020428 	.word	0x40020428
 8008b74:	40020440 	.word	0x40020440
 8008b78:	40020458 	.word	0x40020458
 8008b7c:	40020470 	.word	0x40020470
 8008b80:	40020488 	.word	0x40020488
 8008b84:	400204a0 	.word	0x400204a0
 8008b88:	400204b8 	.word	0x400204b8
 8008b8c:	58025408 	.word	0x58025408
 8008b90:	5802541c 	.word	0x5802541c
 8008b94:	58025430 	.word	0x58025430
 8008b98:	58025444 	.word	0x58025444
 8008b9c:	58025458 	.word	0x58025458
 8008ba0:	5802546c 	.word	0x5802546c
 8008ba4:	58025480 	.word	0x58025480
 8008ba8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	60da      	str	r2, [r3, #12]
}
 8008bbc:	e04d      	b.n	8008c5a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a29      	ldr	r2, [pc, #164]	; (8008c68 <DMA_SetConfig+0x338>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d022      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a27      	ldr	r2, [pc, #156]	; (8008c6c <DMA_SetConfig+0x33c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01d      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a26      	ldr	r2, [pc, #152]	; (8008c70 <DMA_SetConfig+0x340>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d018      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a24      	ldr	r2, [pc, #144]	; (8008c74 <DMA_SetConfig+0x344>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d013      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a23      	ldr	r2, [pc, #140]	; (8008c78 <DMA_SetConfig+0x348>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00e      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a21      	ldr	r2, [pc, #132]	; (8008c7c <DMA_SetConfig+0x34c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d009      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <DMA_SetConfig+0x350>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d004      	beq.n	8008c0e <DMA_SetConfig+0x2de>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <DMA_SetConfig+0x354>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d101      	bne.n	8008c12 <DMA_SetConfig+0x2e2>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <DMA_SetConfig+0x2e4>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d020      	beq.n	8008c5a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	2201      	movs	r2, #1
 8008c22:	409a      	lsls	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	2b40      	cmp	r3, #64	; 0x40
 8008c36:	d108      	bne.n	8008c4a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	60da      	str	r2, [r3, #12]
}
 8008c48:	e007      	b.n	8008c5a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	60da      	str	r2, [r3, #12]
}
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	58025408 	.word	0x58025408
 8008c6c:	5802541c 	.word	0x5802541c
 8008c70:	58025430 	.word	0x58025430
 8008c74:	58025444 	.word	0x58025444
 8008c78:	58025458 	.word	0x58025458
 8008c7c:	5802546c 	.word	0x5802546c
 8008c80:	58025480 	.word	0x58025480
 8008c84:	58025494 	.word	0x58025494

08008c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a42      	ldr	r2, [pc, #264]	; (8008da0 <DMA_CalcBaseAndBitshift+0x118>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d04a      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a41      	ldr	r2, [pc, #260]	; (8008da4 <DMA_CalcBaseAndBitshift+0x11c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d045      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a3f      	ldr	r2, [pc, #252]	; (8008da8 <DMA_CalcBaseAndBitshift+0x120>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d040      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a3e      	ldr	r2, [pc, #248]	; (8008dac <DMA_CalcBaseAndBitshift+0x124>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d03b      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a3c      	ldr	r2, [pc, #240]	; (8008db0 <DMA_CalcBaseAndBitshift+0x128>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d036      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a3b      	ldr	r2, [pc, #236]	; (8008db4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d031      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a39      	ldr	r2, [pc, #228]	; (8008db8 <DMA_CalcBaseAndBitshift+0x130>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d02c      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a38      	ldr	r2, [pc, #224]	; (8008dbc <DMA_CalcBaseAndBitshift+0x134>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d027      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a36      	ldr	r2, [pc, #216]	; (8008dc0 <DMA_CalcBaseAndBitshift+0x138>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d022      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a35      	ldr	r2, [pc, #212]	; (8008dc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d01d      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a33      	ldr	r2, [pc, #204]	; (8008dc8 <DMA_CalcBaseAndBitshift+0x140>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d018      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a32      	ldr	r2, [pc, #200]	; (8008dcc <DMA_CalcBaseAndBitshift+0x144>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d013      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a30      	ldr	r2, [pc, #192]	; (8008dd0 <DMA_CalcBaseAndBitshift+0x148>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00e      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a2f      	ldr	r2, [pc, #188]	; (8008dd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d009      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a2d      	ldr	r2, [pc, #180]	; (8008dd8 <DMA_CalcBaseAndBitshift+0x150>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d004      	beq.n	8008d30 <DMA_CalcBaseAndBitshift+0xa8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <DMA_CalcBaseAndBitshift+0x154>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d101      	bne.n	8008d34 <DMA_CalcBaseAndBitshift+0xac>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e000      	b.n	8008d36 <DMA_CalcBaseAndBitshift+0xae>
 8008d34:	2300      	movs	r3, #0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d024      	beq.n	8008d84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	3b10      	subs	r3, #16
 8008d42:	4a27      	ldr	r2, [pc, #156]	; (8008de0 <DMA_CalcBaseAndBitshift+0x158>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	091b      	lsrs	r3, r3, #4
 8008d4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	4a24      	ldr	r2, [pc, #144]	; (8008de4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008d54:	5cd3      	ldrb	r3, [r2, r3]
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d908      	bls.n	8008d74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	4b1f      	ldr	r3, [pc, #124]	; (8008de8 <DMA_CalcBaseAndBitshift+0x160>)
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	1d1a      	adds	r2, r3, #4
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	659a      	str	r2, [r3, #88]	; 0x58
 8008d72:	e00d      	b.n	8008d90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <DMA_CalcBaseAndBitshift+0x160>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6593      	str	r3, [r2, #88]	; 0x58
 8008d82:	e005      	b.n	8008d90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	40020010 	.word	0x40020010
 8008da4:	40020028 	.word	0x40020028
 8008da8:	40020040 	.word	0x40020040
 8008dac:	40020058 	.word	0x40020058
 8008db0:	40020070 	.word	0x40020070
 8008db4:	40020088 	.word	0x40020088
 8008db8:	400200a0 	.word	0x400200a0
 8008dbc:	400200b8 	.word	0x400200b8
 8008dc0:	40020410 	.word	0x40020410
 8008dc4:	40020428 	.word	0x40020428
 8008dc8:	40020440 	.word	0x40020440
 8008dcc:	40020458 	.word	0x40020458
 8008dd0:	40020470 	.word	0x40020470
 8008dd4:	40020488 	.word	0x40020488
 8008dd8:	400204a0 	.word	0x400204a0
 8008ddc:	400204b8 	.word	0x400204b8
 8008de0:	aaaaaaab 	.word	0xaaaaaaab
 8008de4:	08017b74 	.word	0x08017b74
 8008de8:	fffffc00 	.word	0xfffffc00

08008dec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d120      	bne.n	8008e42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d858      	bhi.n	8008eba <DMA_CheckFifoParam+0xce>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <DMA_CheckFifoParam+0x24>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e21 	.word	0x08008e21
 8008e14:	08008e33 	.word	0x08008e33
 8008e18:	08008e21 	.word	0x08008e21
 8008e1c:	08008ebb 	.word	0x08008ebb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d048      	beq.n	8008ebe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e30:	e045      	b.n	8008ebe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e3a:	d142      	bne.n	8008ec2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e40:	e03f      	b.n	8008ec2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e4a:	d123      	bne.n	8008e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d838      	bhi.n	8008ec6 <DMA_CheckFifoParam+0xda>
 8008e54:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <DMA_CheckFifoParam+0x70>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008e73 	.word	0x08008e73
 8008e64:	08008e6d 	.word	0x08008e6d
 8008e68:	08008e85 	.word	0x08008e85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
        break;
 8008e70:	e030      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d025      	beq.n	8008eca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e82:	e022      	b.n	8008eca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e8c:	d11f      	bne.n	8008ece <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e92:	e01c      	b.n	8008ece <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d902      	bls.n	8008ea2 <DMA_CheckFifoParam+0xb6>
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d003      	beq.n	8008ea8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008ea0:	e018      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ea6:	e015      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00e      	beq.n	8008ed2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb8:	e00b      	b.n	8008ed2 <DMA_CheckFifoParam+0xe6>
        break;
 8008eba:	bf00      	nop
 8008ebc:	e00a      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ebe:	bf00      	nop
 8008ec0:	e008      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ec2:	bf00      	nop
 8008ec4:	e006      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ec6:	bf00      	nop
 8008ec8:	e004      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <DMA_CheckFifoParam+0xe8>
    break;
 8008ed2:	bf00      	nop
    }
  }

  return status;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop

08008ee4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a38      	ldr	r2, [pc, #224]	; (8008fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d022      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a36      	ldr	r2, [pc, #216]	; (8008fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01d      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a35      	ldr	r2, [pc, #212]	; (8008fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d018      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a33      	ldr	r2, [pc, #204]	; (8008fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d013      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a32      	ldr	r2, [pc, #200]	; (8008fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00e      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a30      	ldr	r2, [pc, #192]	; (8008fec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d009      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a2f      	ldr	r2, [pc, #188]	; (8008ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a2d      	ldr	r2, [pc, #180]	; (8008ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d101      	bne.n	8008f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008f46:	2300      	movs	r3, #0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01a      	beq.n	8008f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	3b08      	subs	r3, #8
 8008f54:	4a28      	ldr	r2, [pc, #160]	; (8008ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008f56:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5a:	091b      	lsrs	r3, r3, #4
 8008f5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a24      	ldr	r2, [pc, #144]	; (8009000 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008f70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f003 031f 	and.w	r3, r3, #31
 8008f78:	2201      	movs	r2, #1
 8008f7a:	409a      	lsls	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008f80:	e024      	b.n	8008fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	3b10      	subs	r3, #16
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	; (8009004 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	091b      	lsrs	r3, r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4a1c      	ldr	r2, [pc, #112]	; (8009008 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d806      	bhi.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4a1b      	ldr	r2, [pc, #108]	; (800900c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d902      	bls.n	8008faa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4b18      	ldr	r3, [pc, #96]	; (8009010 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a16      	ldr	r2, [pc, #88]	; (8009014 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008fbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 031f 	and.w	r3, r3, #31
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	58025408 	.word	0x58025408
 8008fdc:	5802541c 	.word	0x5802541c
 8008fe0:	58025430 	.word	0x58025430
 8008fe4:	58025444 	.word	0x58025444
 8008fe8:	58025458 	.word	0x58025458
 8008fec:	5802546c 	.word	0x5802546c
 8008ff0:	58025480 	.word	0x58025480
 8008ff4:	58025494 	.word	0x58025494
 8008ff8:	cccccccd 	.word	0xcccccccd
 8008ffc:	16009600 	.word	0x16009600
 8009000:	58025880 	.word	0x58025880
 8009004:	aaaaaaab 	.word	0xaaaaaaab
 8009008:	400204b8 	.word	0x400204b8
 800900c:	4002040f 	.word	0x4002040f
 8009010:	10008200 	.word	0x10008200
 8009014:	40020880 	.word	0x40020880

08009018 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d04a      	beq.n	80090c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b08      	cmp	r3, #8
 8009032:	d847      	bhi.n	80090c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a25      	ldr	r2, [pc, #148]	; (80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d022      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a24      	ldr	r2, [pc, #144]	; (80090d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d01d      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a22      	ldr	r2, [pc, #136]	; (80090d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d018      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a21      	ldr	r2, [pc, #132]	; (80090dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d013      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00e      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1e      	ldr	r2, [pc, #120]	; (80090e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d009      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1c      	ldr	r2, [pc, #112]	; (80090e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1b      	ldr	r2, [pc, #108]	; (80090ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d101      	bne.n	8009088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009084:	2301      	movs	r3, #1
 8009086:	e000      	b.n	800908a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009088:	2300      	movs	r3, #0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4b17      	ldr	r3, [pc, #92]	; (80090f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	461a      	mov	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80090a0:	671a      	str	r2, [r3, #112]	; 0x70
 80090a2:	e009      	b.n	80090b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	461a      	mov	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a11      	ldr	r2, [pc, #68]	; (80090fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80090b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	2201      	movs	r2, #1
 80090be:	409a      	lsls	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80090c4:	bf00      	nop
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	58025408 	.word	0x58025408
 80090d4:	5802541c 	.word	0x5802541c
 80090d8:	58025430 	.word	0x58025430
 80090dc:	58025444 	.word	0x58025444
 80090e0:	58025458 	.word	0x58025458
 80090e4:	5802546c 	.word	0x5802546c
 80090e8:	58025480 	.word	0x58025480
 80090ec:	58025494 	.word	0x58025494
 80090f0:	1600963f 	.word	0x1600963f
 80090f4:	58025940 	.word	0x58025940
 80090f8:	1000823f 	.word	0x1000823f
 80090fc:	40020940 	.word	0x40020940

08009100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009100:	b480      	push	{r7}
 8009102:	b089      	sub	sp, #36	; 0x24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800910a:	2300      	movs	r3, #0
 800910c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800910e:	4b89      	ldr	r3, [pc, #548]	; (8009334 <HAL_GPIO_Init+0x234>)
 8009110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009112:	e194      	b.n	800943e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	2101      	movs	r1, #1
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	fa01 f303 	lsl.w	r3, r1, r3
 8009120:	4013      	ands	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8186 	beq.w	8009438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	2b01      	cmp	r3, #1
 8009136:	d005      	beq.n	8009144 <HAL_GPIO_Init+0x44>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f003 0303 	and.w	r3, r3, #3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d130      	bne.n	80091a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	2203      	movs	r2, #3
 8009150:	fa02 f303 	lsl.w	r3, r2, r3
 8009154:	43db      	mvns	r3, r3
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4013      	ands	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	fa02 f303 	lsl.w	r3, r2, r3
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	4313      	orrs	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800917a:	2201      	movs	r2, #1
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	43db      	mvns	r3, r3
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	4013      	ands	r3, r2
 8009188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	091b      	lsrs	r3, r3, #4
 8009190:	f003 0201 	and.w	r2, r3, #1
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	4313      	orrs	r3, r2
 800919e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d017      	beq.n	80091e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	2203      	movs	r2, #3
 80091be:	fa02 f303 	lsl.w	r3, r2, r3
 80091c2:	43db      	mvns	r3, r3
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	4013      	ands	r3, r2
 80091c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	4313      	orrs	r3, r2
 80091da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d123      	bne.n	8009236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	08da      	lsrs	r2, r3, #3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3208      	adds	r2, #8
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0307 	and.w	r3, r3, #7
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	220f      	movs	r2, #15
 8009206:	fa02 f303 	lsl.w	r3, r2, r3
 800920a:	43db      	mvns	r3, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	4013      	ands	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	691a      	ldr	r2, [r3, #16]
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	fa02 f303 	lsl.w	r3, r2, r3
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	4313      	orrs	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	08da      	lsrs	r2, r3, #3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3208      	adds	r2, #8
 8009230:	69b9      	ldr	r1, [r7, #24]
 8009232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	2203      	movs	r2, #3
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	43db      	mvns	r3, r3
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	4013      	ands	r3, r2
 800924c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f003 0203 	and.w	r2, r3, #3
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	4313      	orrs	r3, r2
 8009262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80e0 	beq.w	8009438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009278:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <HAL_GPIO_Init+0x238>)
 800927a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800927e:	4a2e      	ldr	r2, [pc, #184]	; (8009338 <HAL_GPIO_Init+0x238>)
 8009280:	f043 0302 	orr.w	r3, r3, #2
 8009284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009288:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <HAL_GPIO_Init+0x238>)
 800928a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009296:	4a29      	ldr	r2, [pc, #164]	; (800933c <HAL_GPIO_Init+0x23c>)
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	089b      	lsrs	r3, r3, #2
 800929c:	3302      	adds	r3, #2
 800929e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	220f      	movs	r2, #15
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	43db      	mvns	r3, r3
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	4013      	ands	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a20      	ldr	r2, [pc, #128]	; (8009340 <HAL_GPIO_Init+0x240>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d052      	beq.n	8009368 <HAL_GPIO_Init+0x268>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <HAL_GPIO_Init+0x244>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d031      	beq.n	800932e <HAL_GPIO_Init+0x22e>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a1e      	ldr	r2, [pc, #120]	; (8009348 <HAL_GPIO_Init+0x248>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d02b      	beq.n	800932a <HAL_GPIO_Init+0x22a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a1d      	ldr	r2, [pc, #116]	; (800934c <HAL_GPIO_Init+0x24c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d025      	beq.n	8009326 <HAL_GPIO_Init+0x226>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <HAL_GPIO_Init+0x250>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d01f      	beq.n	8009322 <HAL_GPIO_Init+0x222>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a1b      	ldr	r2, [pc, #108]	; (8009354 <HAL_GPIO_Init+0x254>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d019      	beq.n	800931e <HAL_GPIO_Init+0x21e>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a1a      	ldr	r2, [pc, #104]	; (8009358 <HAL_GPIO_Init+0x258>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d013      	beq.n	800931a <HAL_GPIO_Init+0x21a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a19      	ldr	r2, [pc, #100]	; (800935c <HAL_GPIO_Init+0x25c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00d      	beq.n	8009316 <HAL_GPIO_Init+0x216>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a18      	ldr	r2, [pc, #96]	; (8009360 <HAL_GPIO_Init+0x260>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d007      	beq.n	8009312 <HAL_GPIO_Init+0x212>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a17      	ldr	r2, [pc, #92]	; (8009364 <HAL_GPIO_Init+0x264>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d101      	bne.n	800930e <HAL_GPIO_Init+0x20e>
 800930a:	2309      	movs	r3, #9
 800930c:	e02d      	b.n	800936a <HAL_GPIO_Init+0x26a>
 800930e:	230a      	movs	r3, #10
 8009310:	e02b      	b.n	800936a <HAL_GPIO_Init+0x26a>
 8009312:	2308      	movs	r3, #8
 8009314:	e029      	b.n	800936a <HAL_GPIO_Init+0x26a>
 8009316:	2307      	movs	r3, #7
 8009318:	e027      	b.n	800936a <HAL_GPIO_Init+0x26a>
 800931a:	2306      	movs	r3, #6
 800931c:	e025      	b.n	800936a <HAL_GPIO_Init+0x26a>
 800931e:	2305      	movs	r3, #5
 8009320:	e023      	b.n	800936a <HAL_GPIO_Init+0x26a>
 8009322:	2304      	movs	r3, #4
 8009324:	e021      	b.n	800936a <HAL_GPIO_Init+0x26a>
 8009326:	2303      	movs	r3, #3
 8009328:	e01f      	b.n	800936a <HAL_GPIO_Init+0x26a>
 800932a:	2302      	movs	r3, #2
 800932c:	e01d      	b.n	800936a <HAL_GPIO_Init+0x26a>
 800932e:	2301      	movs	r3, #1
 8009330:	e01b      	b.n	800936a <HAL_GPIO_Init+0x26a>
 8009332:	bf00      	nop
 8009334:	58000080 	.word	0x58000080
 8009338:	58024400 	.word	0x58024400
 800933c:	58000400 	.word	0x58000400
 8009340:	58020000 	.word	0x58020000
 8009344:	58020400 	.word	0x58020400
 8009348:	58020800 	.word	0x58020800
 800934c:	58020c00 	.word	0x58020c00
 8009350:	58021000 	.word	0x58021000
 8009354:	58021400 	.word	0x58021400
 8009358:	58021800 	.word	0x58021800
 800935c:	58021c00 	.word	0x58021c00
 8009360:	58022000 	.word	0x58022000
 8009364:	58022400 	.word	0x58022400
 8009368:	2300      	movs	r3, #0
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	f002 0203 	and.w	r2, r2, #3
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	4093      	lsls	r3, r2
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	4313      	orrs	r3, r2
 8009378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800937a:	4938      	ldr	r1, [pc, #224]	; (800945c <HAL_GPIO_Init+0x35c>)
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	089b      	lsrs	r3, r3, #2
 8009380:	3302      	adds	r3, #2
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	43db      	mvns	r3, r3
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	4013      	ands	r3, r2
 8009398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80093ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80093b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	43db      	mvns	r3, r3
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	4013      	ands	r3, r2
 80093c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80093dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	43db      	mvns	r3, r3
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	4013      	ands	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	4313      	orrs	r3, r2
 8009406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	43db      	mvns	r3, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4013      	ands	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	3301      	adds	r3, #1
 800943c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	fa22 f303 	lsr.w	r3, r2, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	f47f ae63 	bne.w	8009114 <HAL_GPIO_Init+0x14>
  }
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	3724      	adds	r7, #36	; 0x24
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	58000400 	.word	0x58000400

08009460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691a      	ldr	r2, [r3, #16]
 8009470:	887b      	ldrh	r3, [r7, #2]
 8009472:	4013      	ands	r3, r2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
 800947c:	e001      	b.n	8009482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
 800949c:	4613      	mov	r3, r2
 800949e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094a0:	787b      	ldrb	r3, [r7, #1]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094a6:	887a      	ldrh	r2, [r7, #2]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80094ac:	e003      	b.n	80094b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80094ae:	887b      	ldrh	r3, [r7, #2]
 80094b0:	041a      	lsls	r2, r3, #16
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
	...

080094c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e08b      	b.n	80095ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fa f8c6 	bl	800367c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2224      	movs	r2, #36	; 0x24
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0201 	bic.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d107      	bne.n	800953e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800953a:	609a      	str	r2, [r3, #8]
 800953c:	e006      	b.n	800954c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800954a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d108      	bne.n	8009566 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009562:	605a      	str	r2, [r3, #4]
 8009564:	e007      	b.n	8009576 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6859      	ldr	r1, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <HAL_I2C_Init+0x134>)
 8009582:	430b      	orrs	r3, r1
 8009584:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009594:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	691a      	ldr	r2, [r3, #16]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	69d9      	ldr	r1, [r3, #28]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1a      	ldr	r2, [r3, #32]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	02008000 	.word	0x02008000

080095fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	461a      	mov	r2, r3
 8009608:	460b      	mov	r3, r1
 800960a:	817b      	strh	r3, [r7, #10]
 800960c:	4613      	mov	r3, r2
 800960e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b20      	cmp	r3, #32
 800961a:	f040 80fd 	bne.w	8009818 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_I2C_Master_Transmit+0x30>
 8009628:	2302      	movs	r3, #2
 800962a:	e0f6      	b.n	800981a <HAL_I2C_Master_Transmit+0x21e>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009634:	f7fa fdf4 	bl	8004220 <HAL_GetTick>
 8009638:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	2319      	movs	r3, #25
 8009640:	2201      	movs	r2, #1
 8009642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 fa0a 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e0e1      	b.n	800981a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2221      	movs	r2, #33	; 0x21
 800965a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2210      	movs	r2, #16
 8009662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	893a      	ldrh	r2, [r7, #8]
 8009676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009682:	b29b      	uxth	r3, r3
 8009684:	2bff      	cmp	r3, #255	; 0xff
 8009686:	d906      	bls.n	8009696 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	22ff      	movs	r2, #255	; 0xff
 800968c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800968e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	e007      	b.n	80096a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80096a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d024      	beq.n	80096f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	3301      	adds	r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	8979      	ldrh	r1, [r7, #10]
 80096ea:	4b4e      	ldr	r3, [pc, #312]	; (8009824 <HAL_I2C_Master_Transmit+0x228>)
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 fc05 	bl	8009f00 <I2C_TransferConfig>
 80096f6:	e066      	b.n	80097c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	8979      	ldrh	r1, [r7, #10]
 8009700:	4b48      	ldr	r3, [pc, #288]	; (8009824 <HAL_I2C_Master_Transmit+0x228>)
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 fbfa 	bl	8009f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800970c:	e05b      	b.n	80097c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	6a39      	ldr	r1, [r7, #32]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f9fd 	bl	8009b12 <I2C_WaitOnTXISFlagUntilTimeout>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e07b      	b.n	800981a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d034      	beq.n	80097c6 <HAL_I2C_Master_Transmit+0x1ca>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009760:	2b00      	cmp	r3, #0
 8009762:	d130      	bne.n	80097c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2200      	movs	r2, #0
 800976c:	2180      	movs	r1, #128	; 0x80
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f976 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e04d      	b.n	800981a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009782:	b29b      	uxth	r3, r3
 8009784:	2bff      	cmp	r3, #255	; 0xff
 8009786:	d90e      	bls.n	80097a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	22ff      	movs	r2, #255	; 0xff
 800978c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009792:	b2da      	uxtb	r2, r3
 8009794:	8979      	ldrh	r1, [r7, #10]
 8009796:	2300      	movs	r3, #0
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fbae 	bl	8009f00 <I2C_TransferConfig>
 80097a4:	e00f      	b.n	80097c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	8979      	ldrh	r1, [r7, #10]
 80097b8:	2300      	movs	r3, #0
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fb9d 	bl	8009f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d19e      	bne.n	800970e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	6a39      	ldr	r1, [r7, #32]
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f9e3 	bl	8009ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e01a      	b.n	800981a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2220      	movs	r2, #32
 80097ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <HAL_I2C_Master_Transmit+0x22c>)
 80097f8:	400b      	ands	r3, r1
 80097fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009818:	2302      	movs	r3, #2
  }
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	80002000 	.word	0x80002000
 8009828:	fe00e800 	.word	0xfe00e800

0800982c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	607a      	str	r2, [r7, #4]
 8009836:	461a      	mov	r2, r3
 8009838:	460b      	mov	r3, r1
 800983a:	817b      	strh	r3, [r7, #10]
 800983c:	4613      	mov	r3, r2
 800983e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b20      	cmp	r3, #32
 800984a:	f040 80db 	bne.w	8009a04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_I2C_Master_Receive+0x30>
 8009858:	2302      	movs	r3, #2
 800985a:	e0d4      	b.n	8009a06 <HAL_I2C_Master_Receive+0x1da>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009864:	f7fa fcdc 	bl	8004220 <HAL_GetTick>
 8009868:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	2319      	movs	r3, #25
 8009870:	2201      	movs	r2, #1
 8009872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 f8f2 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e0bf      	b.n	8009a06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2222      	movs	r2, #34	; 0x22
 800988a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2210      	movs	r2, #16
 8009892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	893a      	ldrh	r2, [r7, #8]
 80098a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2bff      	cmp	r3, #255	; 0xff
 80098b6:	d90e      	bls.n	80098d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	22ff      	movs	r2, #255	; 0xff
 80098bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	8979      	ldrh	r1, [r7, #10]
 80098c6:	4b52      	ldr	r3, [pc, #328]	; (8009a10 <HAL_I2C_Master_Receive+0x1e4>)
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 fb16 	bl	8009f00 <I2C_TransferConfig>
 80098d4:	e06d      	b.n	80099b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098da:	b29a      	uxth	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	8979      	ldrh	r1, [r7, #10]
 80098e8:	4b49      	ldr	r3, [pc, #292]	; (8009a10 <HAL_I2C_Master_Receive+0x1e4>)
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fb05 	bl	8009f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80098f6:	e05c      	b.n	80099b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	6a39      	ldr	r1, [r7, #32]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f993 	bl	8009c28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e07c      	b.n	8009a06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009928:	3b01      	subs	r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d034      	beq.n	80099b2 <HAL_I2C_Master_Receive+0x186>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994c:	2b00      	cmp	r3, #0
 800994e:	d130      	bne.n	80099b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	2200      	movs	r2, #0
 8009958:	2180      	movs	r1, #128	; 0x80
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f880 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e04d      	b.n	8009a06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996e:	b29b      	uxth	r3, r3
 8009970:	2bff      	cmp	r3, #255	; 0xff
 8009972:	d90e      	bls.n	8009992 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	22ff      	movs	r2, #255	; 0xff
 8009978:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997e:	b2da      	uxtb	r2, r3
 8009980:	8979      	ldrh	r1, [r7, #10]
 8009982:	2300      	movs	r3, #0
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fab8 	bl	8009f00 <I2C_TransferConfig>
 8009990:	e00f      	b.n	80099b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	8979      	ldrh	r1, [r7, #10]
 80099a4:	2300      	movs	r3, #0
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 faa7 	bl	8009f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d19d      	bne.n	80098f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	6a39      	ldr	r1, [r7, #32]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f8ed 	bl	8009ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e01a      	b.n	8009a06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2220      	movs	r2, #32
 80099d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6859      	ldr	r1, [r3, #4]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <HAL_I2C_Master_Receive+0x1e8>)
 80099e4:	400b      	ands	r3, r1
 80099e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	e000      	b.n	8009a06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009a04:	2302      	movs	r3, #2
  }
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	80002400 	.word	0x80002400
 8009a14:	fe00e800 	.word	0xfe00e800

08009a18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d103      	bne.n	8009a36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2200      	movs	r2, #0
 8009a34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d007      	beq.n	8009a54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699a      	ldr	r2, [r3, #24]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	619a      	str	r2, [r3, #24]
  }
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a70:	e03b      	b.n	8009aea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f962 	bl	8009d40 <I2C_IsErrorOccurred>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e041      	b.n	8009b0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a8c:	d02d      	beq.n	8009aea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a8e:	f7fa fbc7 	bl	8004220 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d302      	bcc.n	8009aa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d122      	bne.n	8009aea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4013      	ands	r3, r2
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	bf0c      	ite	eq
 8009ab4:	2301      	moveq	r3, #1
 8009ab6:	2300      	movne	r3, #0
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	461a      	mov	r2, r3
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d113      	bne.n	8009aea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac6:	f043 0220 	orr.w	r2, r3, #32
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e00f      	b.n	8009b0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	4013      	ands	r3, r2
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	bf0c      	ite	eq
 8009afa:	2301      	moveq	r3, #1
 8009afc:	2300      	movne	r3, #0
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d0b4      	beq.n	8009a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b1e:	e033      	b.n	8009b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f90b 	bl	8009d40 <I2C_IsErrorOccurred>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e031      	b.n	8009b98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b3a:	d025      	beq.n	8009b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b3c:	f7fa fb70 	bl	8004220 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d302      	bcc.n	8009b52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d11a      	bne.n	8009b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d013      	beq.n	8009b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e007      	b.n	8009b98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d1c4      	bne.n	8009b20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bac:	e02f      	b.n	8009c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f8c4 	bl	8009d40 <I2C_IsErrorOccurred>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e02d      	b.n	8009c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc2:	f7fa fb2d 	bl	8004220 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11a      	bne.n	8009c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	d013      	beq.n	8009c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	f043 0220 	orr.w	r2, r3, #32
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e007      	b.n	8009c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d1c8      	bne.n	8009bae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009c38:	e071      	b.n	8009d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 f87e 	bl	8009d40 <I2C_IsErrorOccurred>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	d13b      	bne.n	8009cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d138      	bne.n	8009cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d105      	bne.n	8009c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b10      	cmp	r3, #16
 8009c88:	d121      	bne.n	8009cce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2210      	movs	r2, #16
 8009c90:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2204      	movs	r2, #4
 8009c96:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4b24      	ldr	r3, [pc, #144]	; (8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009cac:	400b      	ands	r3, r1
 8009cae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	75fb      	strb	r3, [r7, #23]
 8009ccc:	e002      	b.n	8009cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009cd4:	f7fa faa4 	bl	8004220 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d302      	bcc.n	8009cea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d119      	bne.n	8009d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d116      	bne.n	8009d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d00f      	beq.n	8009d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	f043 0220 	orr.w	r2, r3, #32
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d002      	beq.n	8009d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d083      	beq.n	8009c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	fe00e800 	.word	0xfe00e800

08009d40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	; 0x28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d068      	beq.n	8009e3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2210      	movs	r2, #16
 8009d72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d74:	e049      	b.n	8009e0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7c:	d045      	beq.n	8009e0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d7e:	f7fa fa4f 	bl	8004220 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d302      	bcc.n	8009d94 <I2C_IsErrorOccurred+0x54>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d13a      	bne.n	8009e0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009da6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db6:	d121      	bne.n	8009dfc <I2C_IsErrorOccurred+0xbc>
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dbe:	d01d      	beq.n	8009dfc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009dc0:	7cfb      	ldrb	r3, [r7, #19]
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d01a      	beq.n	8009dfc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009dd6:	f7fa fa23 	bl	8004220 <HAL_GetTick>
 8009dda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ddc:	e00e      	b.n	8009dfc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009dde:	f7fa fa1f 	bl	8004220 <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b19      	cmp	r3, #25
 8009dea:	d907      	bls.n	8009dfc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	f043 0320 	orr.w	r3, r3, #32
 8009df2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009dfa:	e006      	b.n	8009e0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d1e9      	bne.n	8009dde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	f003 0320 	and.w	r3, r3, #32
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	d003      	beq.n	8009e20 <I2C_IsErrorOccurred+0xe0>
 8009e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0aa      	beq.n	8009d76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d103      	bne.n	8009e30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	f043 0304 	orr.w	r3, r3, #4
 8009e36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	f043 0301 	orr.w	r3, r3, #1
 8009e56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00b      	beq.n	8009e8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	f043 0308 	orr.w	r3, r3, #8
 8009e78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	f043 0302 	orr.w	r3, r3, #2
 8009e9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d01c      	beq.n	8009eee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff fdaf 	bl	8009a18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6859      	ldr	r1, [r3, #4]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <I2C_IsErrorOccurred+0x1bc>)
 8009ec6:	400b      	ands	r3, r1
 8009ec8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3728      	adds	r7, #40	; 0x28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	fe00e800 	.word	0xfe00e800

08009f00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	817b      	strh	r3, [r7, #10]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f12:	897b      	ldrh	r3, [r7, #10]
 8009f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f18:	7a7b      	ldrb	r3, [r7, #9]
 8009f1a:	041b      	lsls	r3, r3, #16
 8009f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	0d5b      	lsrs	r3, r3, #21
 8009f3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009f3e:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <I2C_TransferConfig+0x60>)
 8009f40:	430b      	orrs	r3, r1
 8009f42:	43db      	mvns	r3, r3
 8009f44:	ea02 0103 	and.w	r1, r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f52:	bf00      	nop
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	03ff63ff 	.word	0x03ff63ff

08009f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	d138      	bne.n	8009fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f84:	2302      	movs	r3, #2
 8009f86:	e032      	b.n	8009fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2224      	movs	r2, #36	; 0x24
 8009f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0201 	bic.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6819      	ldr	r1, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 0201 	orr.w	r2, r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e000      	b.n	8009fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fec:	2302      	movs	r3, #2
  }
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b085      	sub	sp, #20
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d139      	bne.n	800a084 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e033      	b.n	800a086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2224      	movs	r2, #36	; 0x24
 800a02a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 0201 	bic.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a04c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f042 0201 	orr.w	r2, r2, #1
 800a06e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e000      	b.n	800a086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a09e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0a2:	4a0c      	ldr	r2, [pc, #48]	; (800a0d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a0a4:	f043 0302 	orr.w	r3, r3, #2
 800a0a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a0ac:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a0ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a0ba:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	4906      	ldr	r1, [pc, #24]	; (800a0d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	604b      	str	r3, [r1, #4]
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	58000400 	.word	0x58000400

0800a0dc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800a0e8:	4b18      	ldr	r3, [pc, #96]	; (800a14c <HAL_PWR_EnterSTOPMode+0x70>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f023 0201 	bic.w	r2, r3, #1
 800a0f0:	4916      	ldr	r1, [pc, #88]	; (800a14c <HAL_PWR_EnterSTOPMode+0x70>)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800a0f8:	4b14      	ldr	r3, [pc, #80]	; (800a14c <HAL_PWR_EnterSTOPMode+0x70>)
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	4a13      	ldr	r2, [pc, #76]	; (800a14c <HAL_PWR_EnterSTOPMode+0x70>)
 800a0fe:	f023 0305 	bic.w	r3, r3, #5
 800a102:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <HAL_PWR_EnterSTOPMode+0x70>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	4a10      	ldr	r2, [pc, #64]	; (800a14c <HAL_PWR_EnterSTOPMode+0x70>)
 800a10a:	f023 0302 	bic.w	r3, r3, #2
 800a10e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a110:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <HAL_PWR_EnterSTOPMode+0x74>)
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	4a0e      	ldr	r2, [pc, #56]	; (800a150 <HAL_PWR_EnterSTOPMode+0x74>)
 800a116:	f043 0304 	orr.w	r3, r3, #4
 800a11a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a11c:	f3bf 8f4f 	dsb	sy
}
 800a120:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a122:	f3bf 8f6f 	isb	sy
}
 800a126:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800a12e:	bf30      	wfi
 800a130:	e000      	b.n	800a134 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800a132:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <HAL_PWR_EnterSTOPMode+0x74>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a05      	ldr	r2, [pc, #20]	; (800a150 <HAL_PWR_EnterSTOPMode+0x74>)
 800a13a:	f023 0304 	bic.w	r3, r3, #4
 800a13e:	6113      	str	r3, [r2, #16]
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	58024800 	.word	0x58024800
 800a150:	e000ed00 	.word	0xe000ed00

0800a154 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a15c:	4b19      	ldr	r3, [pc, #100]	; (800a1c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b04      	cmp	r3, #4
 800a166:	d00a      	beq.n	800a17e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a168:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d001      	beq.n	800a17a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e01f      	b.n	800a1ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	e01d      	b.n	800a1ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a17e:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f023 0207 	bic.w	r2, r3, #7
 800a186:	490f      	ldr	r1, [pc, #60]	; (800a1c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a18e:	f7fa f847 	bl	8004220 <HAL_GetTick>
 800a192:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a194:	e009      	b.n	800a1aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a196:	f7fa f843 	bl	8004220 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1a4:	d901      	bls.n	800a1aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e007      	b.n	800a1ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1b6:	d1ee      	bne.n	800a196 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	58024800 	.word	0x58024800

0800a1c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08c      	sub	sp, #48	; 0x30
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d102      	bne.n	800a1dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f000 bc48 	b.w	800aa6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 8088 	beq.w	800a2fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1ea:	4b99      	ldr	r3, [pc, #612]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1f4:	4b96      	ldr	r3, [pc, #600]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	2b10      	cmp	r3, #16
 800a1fe:	d007      	beq.n	800a210 <HAL_RCC_OscConfig+0x48>
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	2b18      	cmp	r3, #24
 800a204:	d111      	bne.n	800a22a <HAL_RCC_OscConfig+0x62>
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d10c      	bne.n	800a22a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a210:	4b8f      	ldr	r3, [pc, #572]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d06d      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x130>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d169      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	f000 bc21 	b.w	800aa6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a232:	d106      	bne.n	800a242 <HAL_RCC_OscConfig+0x7a>
 800a234:	4b86      	ldr	r3, [pc, #536]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a85      	ldr	r2, [pc, #532]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a23a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	e02e      	b.n	800a2a0 <HAL_RCC_OscConfig+0xd8>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10c      	bne.n	800a264 <HAL_RCC_OscConfig+0x9c>
 800a24a:	4b81      	ldr	r3, [pc, #516]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a80      	ldr	r2, [pc, #512]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	4b7e      	ldr	r3, [pc, #504]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a7d      	ldr	r2, [pc, #500]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a25c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	e01d      	b.n	800a2a0 <HAL_RCC_OscConfig+0xd8>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a26c:	d10c      	bne.n	800a288 <HAL_RCC_OscConfig+0xc0>
 800a26e:	4b78      	ldr	r3, [pc, #480]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a77      	ldr	r2, [pc, #476]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	4b75      	ldr	r3, [pc, #468]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a74      	ldr	r2, [pc, #464]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	e00b      	b.n	800a2a0 <HAL_RCC_OscConfig+0xd8>
 800a288:	4b71      	ldr	r3, [pc, #452]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a70      	ldr	r2, [pc, #448]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a28e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	4b6e      	ldr	r3, [pc, #440]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a6d      	ldr	r2, [pc, #436]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a29a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a29e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d013      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a8:	f7f9 ffba 	bl	8004220 <HAL_GetTick>
 800a2ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2ae:	e008      	b.n	800a2c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2b0:	f7f9 ffb6 	bl	8004220 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b64      	cmp	r3, #100	; 0x64
 800a2bc:	d901      	bls.n	800a2c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e3d4      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2c2:	4b63      	ldr	r3, [pc, #396]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0f0      	beq.n	800a2b0 <HAL_RCC_OscConfig+0xe8>
 800a2ce:	e014      	b.n	800a2fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d0:	f7f9 ffa6 	bl	8004220 <HAL_GetTick>
 800a2d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a2d6:	e008      	b.n	800a2ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2d8:	f7f9 ffa2 	bl	8004220 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b64      	cmp	r3, #100	; 0x64
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e3c0      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a2ea:	4b59      	ldr	r3, [pc, #356]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f0      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x110>
 800a2f6:	e000      	b.n	800a2fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 80ca 	beq.w	800a49c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a308:	4b51      	ldr	r3, [pc, #324]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a310:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a312:	4b4f      	ldr	r3, [pc, #316]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a316:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <HAL_RCC_OscConfig+0x166>
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	2b18      	cmp	r3, #24
 800a322:	d156      	bne.n	800a3d2 <HAL_RCC_OscConfig+0x20a>
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d151      	bne.n	800a3d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a32e:	4b48      	ldr	r3, [pc, #288]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <HAL_RCC_OscConfig+0x17e>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e392      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a346:	4b42      	ldr	r3, [pc, #264]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f023 0219 	bic.w	r2, r3, #25
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	493f      	ldr	r1, [pc, #252]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a354:	4313      	orrs	r3, r2
 800a356:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a358:	f7f9 ff62 	bl	8004220 <HAL_GetTick>
 800a35c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a360:	f7f9 ff5e 	bl	8004220 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e37c      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a372:	4b37      	ldr	r3, [pc, #220]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0f0      	beq.n	800a360 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a37e:	f7f9 ff5b 	bl	8004238 <HAL_GetREVID>
 800a382:	4603      	mov	r3, r0
 800a384:	f241 0203 	movw	r2, #4099	; 0x1003
 800a388:	4293      	cmp	r3, r2
 800a38a:	d817      	bhi.n	800a3bc <HAL_RCC_OscConfig+0x1f4>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	2b40      	cmp	r3, #64	; 0x40
 800a392:	d108      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x1de>
 800a394:	4b2e      	ldr	r3, [pc, #184]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a39c:	4a2c      	ldr	r2, [pc, #176]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a39e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3a4:	e07a      	b.n	800a49c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3a6:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	031b      	lsls	r3, r3, #12
 800a3b4:	4926      	ldr	r1, [pc, #152]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3ba:	e06f      	b.n	800a49c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3bc:	4b24      	ldr	r3, [pc, #144]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	061b      	lsls	r3, r3, #24
 800a3ca:	4921      	ldr	r1, [pc, #132]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3d0:	e064      	b.n	800a49c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d047      	beq.n	800a46a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3da:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f023 0219 	bic.w	r2, r3, #25
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	491a      	ldr	r1, [pc, #104]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ec:	f7f9 ff18 	bl	8004220 <HAL_GetTick>
 800a3f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3f2:	e008      	b.n	800a406 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3f4:	f7f9 ff14 	bl	8004220 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e332      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a406:	4b12      	ldr	r3, [pc, #72]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0f0      	beq.n	800a3f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a412:	f7f9 ff11 	bl	8004238 <HAL_GetREVID>
 800a416:	4603      	mov	r3, r0
 800a418:	f241 0203 	movw	r2, #4099	; 0x1003
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d819      	bhi.n	800a454 <HAL_RCC_OscConfig+0x28c>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b40      	cmp	r3, #64	; 0x40
 800a426:	d108      	bne.n	800a43a <HAL_RCC_OscConfig+0x272>
 800a428:	4b09      	ldr	r3, [pc, #36]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a430:	4a07      	ldr	r2, [pc, #28]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a436:	6053      	str	r3, [r2, #4]
 800a438:	e030      	b.n	800a49c <HAL_RCC_OscConfig+0x2d4>
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	031b      	lsls	r3, r3, #12
 800a448:	4901      	ldr	r1, [pc, #4]	; (800a450 <HAL_RCC_OscConfig+0x288>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	604b      	str	r3, [r1, #4]
 800a44e:	e025      	b.n	800a49c <HAL_RCC_OscConfig+0x2d4>
 800a450:	58024400 	.word	0x58024400
 800a454:	4b9a      	ldr	r3, [pc, #616]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	061b      	lsls	r3, r3, #24
 800a462:	4997      	ldr	r1, [pc, #604]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a464:	4313      	orrs	r3, r2
 800a466:	604b      	str	r3, [r1, #4]
 800a468:	e018      	b.n	800a49c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a46a:	4b95      	ldr	r3, [pc, #596]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a94      	ldr	r2, [pc, #592]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a470:	f023 0301 	bic.w	r3, r3, #1
 800a474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a476:	f7f9 fed3 	bl	8004220 <HAL_GetTick>
 800a47a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a47c:	e008      	b.n	800a490 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a47e:	f7f9 fecf 	bl	8004220 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d901      	bls.n	800a490 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e2ed      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a490:	4b8b      	ldr	r3, [pc, #556]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1f0      	bne.n	800a47e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80a9 	beq.w	800a5fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4aa:	4b85      	ldr	r3, [pc, #532]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4b4:	4b82      	ldr	r3, [pc, #520]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d007      	beq.n	800a4d0 <HAL_RCC_OscConfig+0x308>
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	2b18      	cmp	r3, #24
 800a4c4:	d13a      	bne.n	800a53c <HAL_RCC_OscConfig+0x374>
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f003 0303 	and.w	r3, r3, #3
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d135      	bne.n	800a53c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a4d0:	4b7b      	ldr	r3, [pc, #492]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x320>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d001      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e2c1      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4e8:	f7f9 fea6 	bl	8004238 <HAL_GetREVID>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f241 0203 	movw	r2, #4099	; 0x1003
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d817      	bhi.n	800a526 <HAL_RCC_OscConfig+0x35e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	d108      	bne.n	800a510 <HAL_RCC_OscConfig+0x348>
 800a4fe:	4b70      	ldr	r3, [pc, #448]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a506:	4a6e      	ldr	r2, [pc, #440]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a50c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a50e:	e075      	b.n	800a5fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a510:	4b6b      	ldr	r3, [pc, #428]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	069b      	lsls	r3, r3, #26
 800a51e:	4968      	ldr	r1, [pc, #416]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a520:	4313      	orrs	r3, r2
 800a522:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a524:	e06a      	b.n	800a5fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a526:	4b66      	ldr	r3, [pc, #408]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	061b      	lsls	r3, r3, #24
 800a534:	4962      	ldr	r1, [pc, #392]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a536:	4313      	orrs	r3, r2
 800a538:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a53a:	e05f      	b.n	800a5fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d042      	beq.n	800a5ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a544:	4b5e      	ldr	r3, [pc, #376]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a5d      	ldr	r2, [pc, #372]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a54a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a54e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a550:	f7f9 fe66 	bl	8004220 <HAL_GetTick>
 800a554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a556:	e008      	b.n	800a56a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a558:	f7f9 fe62 	bl	8004220 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d901      	bls.n	800a56a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e280      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a56a:	4b55      	ldr	r3, [pc, #340]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0f0      	beq.n	800a558 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a576:	f7f9 fe5f 	bl	8004238 <HAL_GetREVID>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a580:	4293      	cmp	r3, r2
 800a582:	d817      	bhi.n	800a5b4 <HAL_RCC_OscConfig+0x3ec>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d108      	bne.n	800a59e <HAL_RCC_OscConfig+0x3d6>
 800a58c:	4b4c      	ldr	r3, [pc, #304]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a594:	4a4a      	ldr	r2, [pc, #296]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a59a:	6053      	str	r3, [r2, #4]
 800a59c:	e02e      	b.n	800a5fc <HAL_RCC_OscConfig+0x434>
 800a59e:	4b48      	ldr	r3, [pc, #288]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	069b      	lsls	r3, r3, #26
 800a5ac:	4944      	ldr	r1, [pc, #272]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	604b      	str	r3, [r1, #4]
 800a5b2:	e023      	b.n	800a5fc <HAL_RCC_OscConfig+0x434>
 800a5b4:	4b42      	ldr	r3, [pc, #264]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	061b      	lsls	r3, r3, #24
 800a5c2:	493f      	ldr	r1, [pc, #252]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60cb      	str	r3, [r1, #12]
 800a5c8:	e018      	b.n	800a5fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a5ca:	4b3d      	ldr	r3, [pc, #244]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a3c      	ldr	r2, [pc, #240]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d6:	f7f9 fe23 	bl	8004220 <HAL_GetTick>
 800a5da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a5dc:	e008      	b.n	800a5f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a5de:	f7f9 fe1f 	bl	8004220 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d901      	bls.n	800a5f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e23d      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a5f0:	4b33      	ldr	r3, [pc, #204]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1f0      	bne.n	800a5de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b00      	cmp	r3, #0
 800a606:	d036      	beq.n	800a676 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d019      	beq.n	800a644 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a610:	4b2b      	ldr	r3, [pc, #172]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a614:	4a2a      	ldr	r2, [pc, #168]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a616:	f043 0301 	orr.w	r3, r3, #1
 800a61a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61c:	f7f9 fe00 	bl	8004220 <HAL_GetTick>
 800a620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a622:	e008      	b.n	800a636 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a624:	f7f9 fdfc 	bl	8004220 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e21a      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a636:	4b22      	ldr	r3, [pc, #136]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0f0      	beq.n	800a624 <HAL_RCC_OscConfig+0x45c>
 800a642:	e018      	b.n	800a676 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a644:	4b1e      	ldr	r3, [pc, #120]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a648:	4a1d      	ldr	r2, [pc, #116]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a64a:	f023 0301 	bic.w	r3, r3, #1
 800a64e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a650:	f7f9 fde6 	bl	8004220 <HAL_GetTick>
 800a654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a656:	e008      	b.n	800a66a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a658:	f7f9 fde2 	bl	8004220 <HAL_GetTick>
 800a65c:	4602      	mov	r2, r0
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	2b02      	cmp	r3, #2
 800a664:	d901      	bls.n	800a66a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e200      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a66a:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1f0      	bne.n	800a658 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0320 	and.w	r3, r3, #32
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d039      	beq.n	800a6f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01c      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a68a:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a0c      	ldr	r2, [pc, #48]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a694:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a696:	f7f9 fdc3 	bl	8004220 <HAL_GetTick>
 800a69a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a69c:	e008      	b.n	800a6b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a69e:	f7f9 fdbf 	bl	8004220 <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e1dd      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6b0:	4b03      	ldr	r3, [pc, #12]	; (800a6c0 <HAL_RCC_OscConfig+0x4f8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d0f0      	beq.n	800a69e <HAL_RCC_OscConfig+0x4d6>
 800a6bc:	e01b      	b.n	800a6f6 <HAL_RCC_OscConfig+0x52e>
 800a6be:	bf00      	nop
 800a6c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a6c4:	4b9b      	ldr	r3, [pc, #620]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a9a      	ldr	r2, [pc, #616]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a6ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6d0:	f7f9 fda6 	bl	8004220 <HAL_GetTick>
 800a6d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6d8:	f7f9 fda2 	bl	8004220 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e1c0      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a6ea:	4b92      	ldr	r3, [pc, #584]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f0      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 8081 	beq.w	800a806 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a704:	4b8c      	ldr	r3, [pc, #560]	; (800a938 <HAL_RCC_OscConfig+0x770>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a8b      	ldr	r2, [pc, #556]	; (800a938 <HAL_RCC_OscConfig+0x770>)
 800a70a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a70e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a710:	f7f9 fd86 	bl	8004220 <HAL_GetTick>
 800a714:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a716:	e008      	b.n	800a72a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a718:	f7f9 fd82 	bl	8004220 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b64      	cmp	r3, #100	; 0x64
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e1a0      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a72a:	4b83      	ldr	r3, [pc, #524]	; (800a938 <HAL_RCC_OscConfig+0x770>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0f0      	beq.n	800a718 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d106      	bne.n	800a74c <HAL_RCC_OscConfig+0x584>
 800a73e:	4b7d      	ldr	r3, [pc, #500]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a742:	4a7c      	ldr	r2, [pc, #496]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a744:	f043 0301 	orr.w	r3, r3, #1
 800a748:	6713      	str	r3, [r2, #112]	; 0x70
 800a74a:	e02d      	b.n	800a7a8 <HAL_RCC_OscConfig+0x5e0>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10c      	bne.n	800a76e <HAL_RCC_OscConfig+0x5a6>
 800a754:	4b77      	ldr	r3, [pc, #476]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a758:	4a76      	ldr	r2, [pc, #472]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a75a:	f023 0301 	bic.w	r3, r3, #1
 800a75e:	6713      	str	r3, [r2, #112]	; 0x70
 800a760:	4b74      	ldr	r3, [pc, #464]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a764:	4a73      	ldr	r2, [pc, #460]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a766:	f023 0304 	bic.w	r3, r3, #4
 800a76a:	6713      	str	r3, [r2, #112]	; 0x70
 800a76c:	e01c      	b.n	800a7a8 <HAL_RCC_OscConfig+0x5e0>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	2b05      	cmp	r3, #5
 800a774:	d10c      	bne.n	800a790 <HAL_RCC_OscConfig+0x5c8>
 800a776:	4b6f      	ldr	r3, [pc, #444]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77a:	4a6e      	ldr	r2, [pc, #440]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a77c:	f043 0304 	orr.w	r3, r3, #4
 800a780:	6713      	str	r3, [r2, #112]	; 0x70
 800a782:	4b6c      	ldr	r3, [pc, #432]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a786:	4a6b      	ldr	r2, [pc, #428]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a788:	f043 0301 	orr.w	r3, r3, #1
 800a78c:	6713      	str	r3, [r2, #112]	; 0x70
 800a78e:	e00b      	b.n	800a7a8 <HAL_RCC_OscConfig+0x5e0>
 800a790:	4b68      	ldr	r3, [pc, #416]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a794:	4a67      	ldr	r2, [pc, #412]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a796:	f023 0301 	bic.w	r3, r3, #1
 800a79a:	6713      	str	r3, [r2, #112]	; 0x70
 800a79c:	4b65      	ldr	r3, [pc, #404]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a0:	4a64      	ldr	r2, [pc, #400]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a7a2:	f023 0304 	bic.w	r3, r3, #4
 800a7a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d015      	beq.n	800a7dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7b0:	f7f9 fd36 	bl	8004220 <HAL_GetTick>
 800a7b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7b6:	e00a      	b.n	800a7ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7b8:	f7f9 fd32 	bl	8004220 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d901      	bls.n	800a7ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e14e      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7ce:	4b59      	ldr	r3, [pc, #356]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0ee      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x5f0>
 800a7da:	e014      	b.n	800a806 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7dc:	f7f9 fd20 	bl	8004220 <HAL_GetTick>
 800a7e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7e2:	e00a      	b.n	800a7fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7e4:	f7f9 fd1c 	bl	8004220 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e138      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7fa:	4b4e      	ldr	r3, [pc, #312]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1ee      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 812d 	beq.w	800aa6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a810:	4b48      	ldr	r3, [pc, #288]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a818:	2b18      	cmp	r3, #24
 800a81a:	f000 80bd 	beq.w	800a998 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	2b02      	cmp	r3, #2
 800a824:	f040 809e 	bne.w	800a964 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a828:	4b42      	ldr	r3, [pc, #264]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a41      	ldr	r2, [pc, #260]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a82e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a834:	f7f9 fcf4 	bl	8004220 <HAL_GetTick>
 800a838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a83c:	f7f9 fcf0 	bl	8004220 <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e10e      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a84e:	4b39      	ldr	r3, [pc, #228]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f0      	bne.n	800a83c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a85a:	4b36      	ldr	r3, [pc, #216]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a85c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a85e:	4b37      	ldr	r3, [pc, #220]	; (800a93c <HAL_RCC_OscConfig+0x774>)
 800a860:	4013      	ands	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a86a:	0112      	lsls	r2, r2, #4
 800a86c:	430a      	orrs	r2, r1
 800a86e:	4931      	ldr	r1, [pc, #196]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a870:	4313      	orrs	r3, r2
 800a872:	628b      	str	r3, [r1, #40]	; 0x28
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a878:	3b01      	subs	r3, #1
 800a87a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a882:	3b01      	subs	r3, #1
 800a884:	025b      	lsls	r3, r3, #9
 800a886:	b29b      	uxth	r3, r3
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88e:	3b01      	subs	r3, #1
 800a890:	041b      	lsls	r3, r3, #16
 800a892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a896:	431a      	orrs	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89c:	3b01      	subs	r3, #1
 800a89e:	061b      	lsls	r3, r3, #24
 800a8a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8a4:	4923      	ldr	r1, [pc, #140]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a8aa:	4b22      	ldr	r3, [pc, #136]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	4a21      	ldr	r2, [pc, #132]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8b0:	f023 0301 	bic.w	r3, r3, #1
 800a8b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8b6:	4b1f      	ldr	r3, [pc, #124]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ba:	4b21      	ldr	r3, [pc, #132]	; (800a940 <HAL_RCC_OscConfig+0x778>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8c2:	00d2      	lsls	r2, r2, #3
 800a8c4:	491b      	ldr	r1, [pc, #108]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a8ca:	4b1a      	ldr	r3, [pc, #104]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	f023 020c 	bic.w	r2, r3, #12
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	4917      	ldr	r1, [pc, #92]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a8dc:	4b15      	ldr	r3, [pc, #84]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e0:	f023 0202 	bic.w	r2, r3, #2
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e8:	4912      	ldr	r1, [pc, #72]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	4a10      	ldr	r2, [pc, #64]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fe:	4a0d      	ldr	r2, [pc, #52]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	4a0a      	ldr	r2, [pc, #40]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a90c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a912:	4b08      	ldr	r3, [pc, #32]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a916:	4a07      	ldr	r2, [pc, #28]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a918:	f043 0301 	orr.w	r3, r3, #1
 800a91c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a91e:	4b05      	ldr	r3, [pc, #20]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a04      	ldr	r2, [pc, #16]	; (800a934 <HAL_RCC_OscConfig+0x76c>)
 800a924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92a:	f7f9 fc79 	bl	8004220 <HAL_GetTick>
 800a92e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a930:	e011      	b.n	800a956 <HAL_RCC_OscConfig+0x78e>
 800a932:	bf00      	nop
 800a934:	58024400 	.word	0x58024400
 800a938:	58024800 	.word	0x58024800
 800a93c:	fffffc0c 	.word	0xfffffc0c
 800a940:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a944:	f7f9 fc6c 	bl	8004220 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e08a      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a956:	4b47      	ldr	r3, [pc, #284]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0f0      	beq.n	800a944 <HAL_RCC_OscConfig+0x77c>
 800a962:	e082      	b.n	800aa6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a964:	4b43      	ldr	r3, [pc, #268]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a42      	ldr	r2, [pc, #264]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800a96a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a96e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a970:	f7f9 fc56 	bl	8004220 <HAL_GetTick>
 800a974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a976:	e008      	b.n	800a98a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a978:	f7f9 fc52 	bl	8004220 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d901      	bls.n	800a98a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e070      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a98a:	4b3a      	ldr	r3, [pc, #232]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f0      	bne.n	800a978 <HAL_RCC_OscConfig+0x7b0>
 800a996:	e068      	b.n	800aa6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a998:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a99e:	4b35      	ldr	r3, [pc, #212]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d031      	beq.n	800aa10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f003 0203 	and.w	r2, r3, #3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d12a      	bne.n	800aa10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	091b      	lsrs	r3, r3, #4
 800a9be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d122      	bne.n	800aa10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d11a      	bne.n	800aa10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	0a5b      	lsrs	r3, r3, #9
 800a9de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d111      	bne.n	800aa10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	0c1b      	lsrs	r3, r3, #16
 800a9f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d108      	bne.n	800aa10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	0e1b      	lsrs	r3, r3, #24
 800aa02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d001      	beq.n	800aa14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e02b      	b.n	800aa6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aa14:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	08db      	lsrs	r3, r3, #3
 800aa1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d01f      	beq.n	800aa6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aa2a:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	4a11      	ldr	r2, [pc, #68]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa36:	f7f9 fbf3 	bl	8004220 <HAL_GetTick>
 800aa3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aa3c:	bf00      	nop
 800aa3e:	f7f9 fbef 	bl	8004220 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d0f9      	beq.n	800aa3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <HAL_RCC_OscConfig+0x8b0>)
 800aa50:	4013      	ands	r3, r2
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa56:	00d2      	lsls	r2, r2, #3
 800aa58:	4906      	ldr	r1, [pc, #24]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	4a04      	ldr	r2, [pc, #16]	; (800aa74 <HAL_RCC_OscConfig+0x8ac>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3730      	adds	r7, #48	; 0x30
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	58024400 	.word	0x58024400
 800aa78:	ffff0007 	.word	0xffff0007

0800aa7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e19c      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa90:	4b8a      	ldr	r3, [pc, #552]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d910      	bls.n	800aac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa9e:	4b87      	ldr	r3, [pc, #540]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f023 020f 	bic.w	r2, r3, #15
 800aaa6:	4985      	ldr	r1, [pc, #532]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaae:	4b83      	ldr	r3, [pc, #524]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d001      	beq.n	800aac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e184      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d010      	beq.n	800aaee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	4b7b      	ldr	r3, [pc, #492]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aad8:	429a      	cmp	r2, r3
 800aada:	d908      	bls.n	800aaee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aadc:	4b78      	ldr	r3, [pc, #480]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	4975      	ldr	r1, [pc, #468]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d010      	beq.n	800ab1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	695a      	ldr	r2, [r3, #20]
 800aafe:	4b70      	ldr	r3, [pc, #448]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab00:	69db      	ldr	r3, [r3, #28]
 800ab02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d908      	bls.n	800ab1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab0a:	4b6d      	ldr	r3, [pc, #436]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	496a      	ldr	r1, [pc, #424]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0310 	and.w	r3, r3, #16
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d010      	beq.n	800ab4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699a      	ldr	r2, [r3, #24]
 800ab2c:	4b64      	ldr	r3, [pc, #400]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d908      	bls.n	800ab4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab38:	4b61      	ldr	r3, [pc, #388]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	495e      	ldr	r1, [pc, #376]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d010      	beq.n	800ab78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	69da      	ldr	r2, [r3, #28]
 800ab5a:	4b59      	ldr	r3, [pc, #356]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d908      	bls.n	800ab78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab66:	4b56      	ldr	r3, [pc, #344]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	4953      	ldr	r1, [pc, #332]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d010      	beq.n	800aba6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	4b4d      	ldr	r3, [pc, #308]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d908      	bls.n	800aba6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab94:	4b4a      	ldr	r3, [pc, #296]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	f023 020f 	bic.w	r2, r3, #15
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4947      	ldr	r1, [pc, #284]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d055      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800abb2:	4b43      	ldr	r3, [pc, #268]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	4940      	ldr	r1, [pc, #256]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d107      	bne.n	800abdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abcc:	4b3c      	ldr	r3, [pc, #240]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d121      	bne.n	800ac1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e0f6      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d107      	bne.n	800abf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800abe4:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d115      	bne.n	800ac1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e0ea      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d107      	bne.n	800ac0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abfc:	4b30      	ldr	r3, [pc, #192]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d109      	bne.n	800ac1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e0de      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac0c:	4b2c      	ldr	r3, [pc, #176]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e0d6      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac1c:	4b28      	ldr	r3, [pc, #160]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	f023 0207 	bic.w	r2, r3, #7
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4925      	ldr	r1, [pc, #148]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac2e:	f7f9 faf7 	bl	8004220 <HAL_GetTick>
 800ac32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac34:	e00a      	b.n	800ac4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac36:	f7f9 faf3 	bl	8004220 <HAL_GetTick>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d901      	bls.n	800ac4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e0be      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac4c:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d1eb      	bne.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d010      	beq.n	800ac8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68da      	ldr	r2, [r3, #12]
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d208      	bcs.n	800ac8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac7a:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	f023 020f 	bic.w	r2, r3, #15
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	490e      	ldr	r1, [pc, #56]	; (800acc0 <HAL_RCC_ClockConfig+0x244>)
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac8c:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 030f 	and.w	r3, r3, #15
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d214      	bcs.n	800acc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac9a:	4b08      	ldr	r3, [pc, #32]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f023 020f 	bic.w	r2, r3, #15
 800aca2:	4906      	ldr	r1, [pc, #24]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acaa:	4b04      	ldr	r3, [pc, #16]	; (800acbc <HAL_RCC_ClockConfig+0x240>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d005      	beq.n	800acc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e086      	b.n	800adca <HAL_RCC_ClockConfig+0x34e>
 800acbc:	52002000 	.word	0x52002000
 800acc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b00      	cmp	r3, #0
 800acce:	d010      	beq.n	800acf2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	4b3f      	ldr	r3, [pc, #252]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acdc:	429a      	cmp	r2, r3
 800acde:	d208      	bcs.n	800acf2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ace0:	4b3c      	ldr	r3, [pc, #240]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	4939      	ldr	r1, [pc, #228]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800acee:	4313      	orrs	r3, r2
 800acf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 0308 	and.w	r3, r3, #8
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d010      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	695a      	ldr	r2, [r3, #20]
 800ad02:	4b34      	ldr	r3, [pc, #208]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d208      	bcs.n	800ad20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad0e:	4b31      	ldr	r3, [pc, #196]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	492e      	ldr	r1, [pc, #184]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0310 	and.w	r3, r3, #16
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d010      	beq.n	800ad4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	4b28      	ldr	r3, [pc, #160]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad32:	69db      	ldr	r3, [r3, #28]
 800ad34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d208      	bcs.n	800ad4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad3c:	4b25      	ldr	r3, [pc, #148]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	4922      	ldr	r1, [pc, #136]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0320 	and.w	r3, r3, #32
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d010      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	69da      	ldr	r2, [r3, #28]
 800ad5e:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d208      	bcs.n	800ad7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad6a:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	4917      	ldr	r1, [pc, #92]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ad7c:	f000 f834 	bl	800ade8 <HAL_RCC_GetSysClockFreq>
 800ad80:	4602      	mov	r2, r0
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	0a1b      	lsrs	r3, r3, #8
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	4912      	ldr	r1, [pc, #72]	; (800add8 <HAL_RCC_ClockConfig+0x35c>)
 800ad8e:	5ccb      	ldrb	r3, [r1, r3]
 800ad90:	f003 031f 	and.w	r3, r3, #31
 800ad94:	fa22 f303 	lsr.w	r3, r2, r3
 800ad98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <HAL_RCC_ClockConfig+0x358>)
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	f003 030f 	and.w	r3, r3, #15
 800ada2:	4a0d      	ldr	r2, [pc, #52]	; (800add8 <HAL_RCC_ClockConfig+0x35c>)
 800ada4:	5cd3      	ldrb	r3, [r2, r3]
 800ada6:	f003 031f 	and.w	r3, r3, #31
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	fa22 f303 	lsr.w	r3, r2, r3
 800adb0:	4a0a      	ldr	r2, [pc, #40]	; (800addc <HAL_RCC_ClockConfig+0x360>)
 800adb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800adb4:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <HAL_RCC_ClockConfig+0x364>)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800adba:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <HAL_RCC_ClockConfig+0x368>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f8 ff52 	bl	8003c68 <HAL_InitTick>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	58024400 	.word	0x58024400
 800add8:	08017b64 	.word	0x08017b64
 800addc:	24000094 	.word	0x24000094
 800ade0:	24000090 	.word	0x24000090
 800ade4:	24000098 	.word	0x24000098

0800ade8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ade8:	b480      	push	{r7}
 800adea:	b089      	sub	sp, #36	; 0x24
 800adec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adee:	4bb3      	ldr	r3, [pc, #716]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adf6:	2b18      	cmp	r3, #24
 800adf8:	f200 8155 	bhi.w	800b0a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800adfc:	a201      	add	r2, pc, #4	; (adr r2, 800ae04 <HAL_RCC_GetSysClockFreq+0x1c>)
 800adfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae02:	bf00      	nop
 800ae04:	0800ae69 	.word	0x0800ae69
 800ae08:	0800b0a7 	.word	0x0800b0a7
 800ae0c:	0800b0a7 	.word	0x0800b0a7
 800ae10:	0800b0a7 	.word	0x0800b0a7
 800ae14:	0800b0a7 	.word	0x0800b0a7
 800ae18:	0800b0a7 	.word	0x0800b0a7
 800ae1c:	0800b0a7 	.word	0x0800b0a7
 800ae20:	0800b0a7 	.word	0x0800b0a7
 800ae24:	0800ae8f 	.word	0x0800ae8f
 800ae28:	0800b0a7 	.word	0x0800b0a7
 800ae2c:	0800b0a7 	.word	0x0800b0a7
 800ae30:	0800b0a7 	.word	0x0800b0a7
 800ae34:	0800b0a7 	.word	0x0800b0a7
 800ae38:	0800b0a7 	.word	0x0800b0a7
 800ae3c:	0800b0a7 	.word	0x0800b0a7
 800ae40:	0800b0a7 	.word	0x0800b0a7
 800ae44:	0800ae95 	.word	0x0800ae95
 800ae48:	0800b0a7 	.word	0x0800b0a7
 800ae4c:	0800b0a7 	.word	0x0800b0a7
 800ae50:	0800b0a7 	.word	0x0800b0a7
 800ae54:	0800b0a7 	.word	0x0800b0a7
 800ae58:	0800b0a7 	.word	0x0800b0a7
 800ae5c:	0800b0a7 	.word	0x0800b0a7
 800ae60:	0800b0a7 	.word	0x0800b0a7
 800ae64:	0800ae9b 	.word	0x0800ae9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae68:	4b94      	ldr	r3, [pc, #592]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0320 	and.w	r3, r3, #32
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d009      	beq.n	800ae88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae74:	4b91      	ldr	r3, [pc, #580]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	08db      	lsrs	r3, r3, #3
 800ae7a:	f003 0303 	and.w	r3, r3, #3
 800ae7e:	4a90      	ldr	r2, [pc, #576]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae80:	fa22 f303 	lsr.w	r3, r2, r3
 800ae84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ae86:	e111      	b.n	800b0ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae88:	4b8d      	ldr	r3, [pc, #564]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae8a:	61bb      	str	r3, [r7, #24]
      break;
 800ae8c:	e10e      	b.n	800b0ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ae8e:	4b8d      	ldr	r3, [pc, #564]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae90:	61bb      	str	r3, [r7, #24]
      break;
 800ae92:	e10b      	b.n	800b0ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ae94:	4b8c      	ldr	r3, [pc, #560]	; (800b0c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ae96:	61bb      	str	r3, [r7, #24]
      break;
 800ae98:	e108      	b.n	800b0ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae9a:	4b88      	ldr	r3, [pc, #544]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9e:	f003 0303 	and.w	r3, r3, #3
 800aea2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aea4:	4b85      	ldr	r3, [pc, #532]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea8:	091b      	lsrs	r3, r3, #4
 800aeaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aeb0:	4b82      	ldr	r3, [pc, #520]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aeba:	4b80      	ldr	r3, [pc, #512]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aebe:	08db      	lsrs	r3, r3, #3
 800aec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	fb02 f303 	mul.w	r3, r2, r3
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 80e1 	beq.w	800b0a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	f000 8083 	beq.w	800afec <HAL_RCC_GetSysClockFreq+0x204>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	f200 80a1 	bhi.w	800b030 <HAL_RCC_GetSysClockFreq+0x248>
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d003      	beq.n	800aefc <HAL_RCC_GetSysClockFreq+0x114>
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d056      	beq.n	800afa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aefa:	e099      	b.n	800b030 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aefc:	4b6f      	ldr	r3, [pc, #444]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b00      	cmp	r3, #0
 800af06:	d02d      	beq.n	800af64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af08:	4b6c      	ldr	r3, [pc, #432]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	08db      	lsrs	r3, r3, #3
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	4a6b      	ldr	r2, [pc, #428]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af14:	fa22 f303 	lsr.w	r3, r2, r3
 800af18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	ee07 3a90 	vmov	s15, r3
 800af20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af32:	4b62      	ldr	r3, [pc, #392]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af42:	ed97 6a02 	vldr	s12, [r7, #8]
 800af46:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800af4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800af62:	e087      	b.n	800b074 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b0d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800af72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af76:	4b51      	ldr	r3, [pc, #324]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7e:	ee07 3a90 	vmov	s15, r3
 800af82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af86:	ed97 6a02 	vldr	s12, [r7, #8]
 800af8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800af8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afa6:	e065      	b.n	800b074 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b0d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800afb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afba:	4b40      	ldr	r3, [pc, #256]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afca:	ed97 6a02 	vldr	s12, [r7, #8]
 800afce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800afd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afea:	e043      	b.n	800b074 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	ee07 3a90 	vmov	s15, r3
 800aff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b0d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800affa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affe:	4b2f      	ldr	r3, [pc, #188]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b012:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b02e:	e021      	b.n	800b074 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b0d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b042:	4b1e      	ldr	r3, [pc, #120]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b052:	ed97 6a02 	vldr	s12, [r7, #8]
 800b056:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b0cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b072:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b074:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b078:	0a5b      	lsrs	r3, r3, #9
 800b07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07e:	3301      	adds	r3, #1
 800b080:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	ee07 3a90 	vmov	s15, r3
 800b088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b08c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b098:	ee17 3a90 	vmov	r3, s15
 800b09c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b09e:	e005      	b.n	800b0ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61bb      	str	r3, [r7, #24]
      break;
 800b0a4:	e002      	b.n	800b0ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b0a6:	4b07      	ldr	r3, [pc, #28]	; (800b0c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b0a8:	61bb      	str	r3, [r7, #24]
      break;
 800b0aa:	bf00      	nop
  }

  return sysclockfreq;
 800b0ac:	69bb      	ldr	r3, [r7, #24]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3724      	adds	r7, #36	; 0x24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	03d09000 	.word	0x03d09000
 800b0c4:	003d0900 	.word	0x003d0900
 800b0c8:	017d7840 	.word	0x017d7840
 800b0cc:	46000000 	.word	0x46000000
 800b0d0:	4c742400 	.word	0x4c742400
 800b0d4:	4a742400 	.word	0x4a742400
 800b0d8:	4bbebc20 	.word	0x4bbebc20

0800b0dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0e2:	f7ff fe81 	bl	800ade8 <HAL_RCC_GetSysClockFreq>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	4b10      	ldr	r3, [pc, #64]	; (800b12c <HAL_RCC_GetHCLKFreq+0x50>)
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	0a1b      	lsrs	r3, r3, #8
 800b0ee:	f003 030f 	and.w	r3, r3, #15
 800b0f2:	490f      	ldr	r1, [pc, #60]	; (800b130 <HAL_RCC_GetHCLKFreq+0x54>)
 800b0f4:	5ccb      	ldrb	r3, [r1, r3]
 800b0f6:	f003 031f 	and.w	r3, r3, #31
 800b0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <HAL_RCC_GetHCLKFreq+0x50>)
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	f003 030f 	and.w	r3, r3, #15
 800b108:	4a09      	ldr	r2, [pc, #36]	; (800b130 <HAL_RCC_GetHCLKFreq+0x54>)
 800b10a:	5cd3      	ldrb	r3, [r2, r3]
 800b10c:	f003 031f 	and.w	r3, r3, #31
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	fa22 f303 	lsr.w	r3, r2, r3
 800b116:	4a07      	ldr	r2, [pc, #28]	; (800b134 <HAL_RCC_GetHCLKFreq+0x58>)
 800b118:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b11a:	4a07      	ldr	r2, [pc, #28]	; (800b138 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b120:	4b04      	ldr	r3, [pc, #16]	; (800b134 <HAL_RCC_GetHCLKFreq+0x58>)
 800b122:	681b      	ldr	r3, [r3, #0]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	58024400 	.word	0x58024400
 800b130:	08017b64 	.word	0x08017b64
 800b134:	24000094 	.word	0x24000094
 800b138:	24000090 	.word	0x24000090

0800b13c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b140:	f7ff ffcc 	bl	800b0dc <HAL_RCC_GetHCLKFreq>
 800b144:	4602      	mov	r2, r0
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	091b      	lsrs	r3, r3, #4
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	4904      	ldr	r1, [pc, #16]	; (800b164 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b152:	5ccb      	ldrb	r3, [r1, r3]
 800b154:	f003 031f 	and.w	r3, r3, #31
 800b158:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	58024400 	.word	0x58024400
 800b164:	08017b64 	.word	0x08017b64

0800b168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b16c:	f7ff ffb6 	bl	800b0dc <HAL_RCC_GetHCLKFreq>
 800b170:	4602      	mov	r2, r0
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	0a1b      	lsrs	r3, r3, #8
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	4904      	ldr	r1, [pc, #16]	; (800b190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b17e:	5ccb      	ldrb	r3, [r1, r3]
 800b180:	f003 031f 	and.w	r3, r3, #31
 800b184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b188:	4618      	mov	r0, r3
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	58024400 	.word	0x58024400
 800b190:	08017b64 	.word	0x08017b64

0800b194 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	223f      	movs	r2, #63	; 0x3f
 800b1a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b1a4:	4b1a      	ldr	r3, [pc, #104]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	f003 0207 	and.w	r2, r3, #7
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b1b0:	4b17      	ldr	r3, [pc, #92]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b1bc:	4b14      	ldr	r3, [pc, #80]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	f003 020f 	and.w	r2, r3, #15
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b1c8:	4b11      	ldr	r3, [pc, #68]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b1ec:	4b08      	ldr	r3, [pc, #32]	; (800b210 <HAL_RCC_GetClockConfig+0x7c>)
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b1f8:	4b06      	ldr	r3, [pc, #24]	; (800b214 <HAL_RCC_GetClockConfig+0x80>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	601a      	str	r2, [r3, #0]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	58024400 	.word	0x58024400
 800b214:	52002000 	.word	0x52002000

0800b218 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b21c:	b0ca      	sub	sp, #296	; 0x128
 800b21e:	af00      	add	r7, sp, #0
 800b220:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b224:	2300      	movs	r3, #0
 800b226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b22a:	2300      	movs	r3, #0
 800b22c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b23c:	2500      	movs	r5, #0
 800b23e:	ea54 0305 	orrs.w	r3, r4, r5
 800b242:	d049      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b24a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b24e:	d02f      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b254:	d828      	bhi.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b25a:	d01a      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b25c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b260:	d822      	bhi.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b26a:	d007      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b26c:	e01c      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b26e:	4bb8      	ldr	r3, [pc, #736]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b272:	4ab7      	ldr	r2, [pc, #732]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b27a:	e01a      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b280:	3308      	adds	r3, #8
 800b282:	2102      	movs	r1, #2
 800b284:	4618      	mov	r0, r3
 800b286:	f002 fb61 	bl	800d94c <RCCEx_PLL2_Config>
 800b28a:	4603      	mov	r3, r0
 800b28c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b290:	e00f      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b296:	3328      	adds	r3, #40	; 0x28
 800b298:	2102      	movs	r1, #2
 800b29a:	4618      	mov	r0, r3
 800b29c:	f002 fc08 	bl	800dab0 <RCCEx_PLL3_Config>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b2a6:	e004      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2ae:	e000      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b2b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b2ba:	4ba5      	ldr	r3, [pc, #660]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2c8:	4aa1      	ldr	r2, [pc, #644]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	6513      	str	r3, [r2, #80]	; 0x50
 800b2ce:	e003      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b2e4:	f04f 0900 	mov.w	r9, #0
 800b2e8:	ea58 0309 	orrs.w	r3, r8, r9
 800b2ec:	d047      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d82a      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b315 	.word	0x0800b315
 800b304:	0800b323 	.word	0x0800b323
 800b308:	0800b339 	.word	0x0800b339
 800b30c:	0800b357 	.word	0x0800b357
 800b310:	0800b357 	.word	0x0800b357
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b314:	4b8e      	ldr	r3, [pc, #568]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	4a8d      	ldr	r2, [pc, #564]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b320:	e01a      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b326:	3308      	adds	r3, #8
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f002 fb0e 	bl	800d94c <RCCEx_PLL2_Config>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b336:	e00f      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33c:	3328      	adds	r3, #40	; 0x28
 800b33e:	2100      	movs	r1, #0
 800b340:	4618      	mov	r0, r3
 800b342:	f002 fbb5 	bl	800dab0 <RCCEx_PLL3_Config>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b34c:	e004      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b354:	e000      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b356:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b360:	4b7b      	ldr	r3, [pc, #492]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b364:	f023 0107 	bic.w	r1, r3, #7
 800b368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36e:	4a78      	ldr	r2, [pc, #480]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b370:	430b      	orrs	r3, r1
 800b372:	6513      	str	r3, [r2, #80]	; 0x50
 800b374:	e003      	b.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b38a:	f04f 0b00 	mov.w	fp, #0
 800b38e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b392:	d04c      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b39e:	d030      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a4:	d829      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b3a8:	d02d      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b3aa:	2bc0      	cmp	r3, #192	; 0xc0
 800b3ac:	d825      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3ae:	2b80      	cmp	r3, #128	; 0x80
 800b3b0:	d018      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b3b2:	2b80      	cmp	r3, #128	; 0x80
 800b3b4:	d821      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b3ba:	2b40      	cmp	r3, #64	; 0x40
 800b3bc:	d007      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b3be:	e01c      	b.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c0:	4b63      	ldr	r3, [pc, #396]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	4a62      	ldr	r2, [pc, #392]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3cc:	e01c      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f002 fab8 	bl	800d94c <RCCEx_PLL2_Config>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3e2:	e011      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e8:	3328      	adds	r3, #40	; 0x28
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f002 fb5f 	bl	800dab0 <RCCEx_PLL3_Config>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b3f8:	e006      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b400:	e002      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b402:	bf00      	nop
 800b404:	e000      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b406:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b410:	4b4f      	ldr	r3, [pc, #316]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b414:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b41e:	4a4c      	ldr	r2, [pc, #304]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b420:	430b      	orrs	r3, r1
 800b422:	6513      	str	r3, [r2, #80]	; 0x50
 800b424:	e003      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b42a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b43a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b43e:	2300      	movs	r3, #0
 800b440:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b444:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b448:	460b      	mov	r3, r1
 800b44a:	4313      	orrs	r3, r2
 800b44c:	d053      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b45a:	d035      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b45c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b460:	d82e      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b462:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b466:	d031      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b468:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b46c:	d828      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b46e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b472:	d01a      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b478:	d822      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b47e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b482:	d007      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b484:	e01c      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b486:	4b32      	ldr	r3, [pc, #200]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48a:	4a31      	ldr	r2, [pc, #196]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b48c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b490:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b492:	e01c      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b498:	3308      	adds	r3, #8
 800b49a:	2100      	movs	r1, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f002 fa55 	bl	800d94c <RCCEx_PLL2_Config>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b4a8:	e011      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ae:	3328      	adds	r3, #40	; 0x28
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f002 fafc 	bl	800dab0 <RCCEx_PLL3_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4be:	e006      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4c6:	e002      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b4c8:	bf00      	nop
 800b4ca:	e000      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b4cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b4d6:	4b1e      	ldr	r3, [pc, #120]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b4e6:	4a1a      	ldr	r2, [pc, #104]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4e8:	430b      	orrs	r3, r1
 800b4ea:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ec:	e003      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b502:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b506:	2300      	movs	r3, #0
 800b508:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b50c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b510:	460b      	mov	r3, r1
 800b512:	4313      	orrs	r3, r2
 800b514:	d056      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b51e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b522:	d038      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b528:	d831      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b52a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b52e:	d034      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b530:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b534:	d82b      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b53a:	d01d      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b53c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b540:	d825      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b542:	2b00      	cmp	r3, #0
 800b544:	d006      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b54a:	d00a      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b54c:	e01f      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b54e:	bf00      	nop
 800b550:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b554:	4ba2      	ldr	r3, [pc, #648]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	4aa1      	ldr	r2, [pc, #644]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b55a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b560:	e01c      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b566:	3308      	adds	r3, #8
 800b568:	2100      	movs	r1, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 f9ee 	bl	800d94c <RCCEx_PLL2_Config>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b576:	e011      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57c:	3328      	adds	r3, #40	; 0x28
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f002 fa95 	bl	800dab0 <RCCEx_PLL3_Config>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b58c:	e006      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b594:	e002      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b596:	bf00      	nop
 800b598:	e000      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5a4:	4b8e      	ldr	r3, [pc, #568]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5b4:	4a8a      	ldr	r2, [pc, #552]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ba:	e003      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b5d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	d03a      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ea:	2b30      	cmp	r3, #48	; 0x30
 800b5ec:	d01f      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b5ee:	2b30      	cmp	r3, #48	; 0x30
 800b5f0:	d819      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d00c      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b5f6:	2b20      	cmp	r3, #32
 800b5f8:	d815      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d019      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b5fe:	2b10      	cmp	r3, #16
 800b600:	d111      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b602:	4b77      	ldr	r3, [pc, #476]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b606:	4a76      	ldr	r2, [pc, #472]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b60e:	e011      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b614:	3308      	adds	r3, #8
 800b616:	2102      	movs	r1, #2
 800b618:	4618      	mov	r0, r3
 800b61a:	f002 f997 	bl	800d94c <RCCEx_PLL2_Config>
 800b61e:	4603      	mov	r3, r0
 800b620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b624:	e006      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b62c:	e002      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b632:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b63c:	4b68      	ldr	r3, [pc, #416]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b640:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64a:	4a65      	ldr	r2, [pc, #404]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b64c:	430b      	orrs	r3, r1
 800b64e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b650:	e003      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b670:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b674:	460b      	mov	r3, r1
 800b676:	4313      	orrs	r3, r2
 800b678:	d051      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b684:	d035      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b68a:	d82e      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b68c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b690:	d031      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b696:	d828      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b69c:	d01a      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b69e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a2:	d822      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b6a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ac:	d007      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b6ae:	e01c      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b0:	4b4b      	ldr	r3, [pc, #300]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	4a4a      	ldr	r2, [pc, #296]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6bc:	e01c      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f002 f940 	bl	800d94c <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6d2:	e011      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d8:	3328      	adds	r3, #40	; 0x28
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f002 f9e7 	bl	800dab0 <RCCEx_PLL3_Config>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6e8:	e006      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6f0:	e002      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b6f2:	bf00      	nop
 800b6f4:	e000      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b6f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10a      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b700:	4b37      	ldr	r3, [pc, #220]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b704:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b70e:	4a34      	ldr	r2, [pc, #208]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b710:	430b      	orrs	r3, r1
 800b712:	6513      	str	r3, [r2, #80]	; 0x50
 800b714:	e003      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b71a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b72a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b72e:	2300      	movs	r3, #0
 800b730:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b734:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b738:	460b      	mov	r3, r1
 800b73a:	4313      	orrs	r3, r2
 800b73c:	d056      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b748:	d033      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b74a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b74e:	d82c      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b754:	d02f      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b756:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b75a:	d826      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b75c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b760:	d02b      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b762:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b766:	d820      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b76c:	d012      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b772:	d81a      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b774:	2b00      	cmp	r3, #0
 800b776:	d022      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b77c:	d115      	bne.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b782:	3308      	adds	r3, #8
 800b784:	2101      	movs	r1, #1
 800b786:	4618      	mov	r0, r3
 800b788:	f002 f8e0 	bl	800d94c <RCCEx_PLL2_Config>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b792:	e015      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b798:	3328      	adds	r3, #40	; 0x28
 800b79a:	2101      	movs	r1, #1
 800b79c:	4618      	mov	r0, r3
 800b79e:	f002 f987 	bl	800dab0 <RCCEx_PLL3_Config>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00a      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7b0:	e006      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7b2:	bf00      	nop
 800b7b4:	e004      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7b6:	bf00      	nop
 800b7b8:	e002      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7ba:	bf00      	nop
 800b7bc:	e000      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10d      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d6:	4a02      	ldr	r2, [pc, #8]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7d8:	430b      	orrs	r3, r1
 800b7da:	6513      	str	r3, [r2, #80]	; 0x50
 800b7dc:	e006      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b7de:	bf00      	nop
 800b7e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b7f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b802:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b806:	460b      	mov	r3, r1
 800b808:	4313      	orrs	r3, r2
 800b80a:	d055      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b818:	d033      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b81a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b81e:	d82c      	bhi.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b824:	d02f      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82a:	d826      	bhi.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b82c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b830:	d02b      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b836:	d820      	bhi.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83c:	d012      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b83e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b842:	d81a      	bhi.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d022      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b84c:	d115      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b852:	3308      	adds	r3, #8
 800b854:	2101      	movs	r1, #1
 800b856:	4618      	mov	r0, r3
 800b858:	f002 f878 	bl	800d94c <RCCEx_PLL2_Config>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b862:	e015      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b868:	3328      	adds	r3, #40	; 0x28
 800b86a:	2101      	movs	r1, #1
 800b86c:	4618      	mov	r0, r3
 800b86e:	f002 f91f 	bl	800dab0 <RCCEx_PLL3_Config>
 800b872:	4603      	mov	r3, r0
 800b874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b878:	e00a      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b880:	e006      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b882:	bf00      	nop
 800b884:	e004      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b886:	bf00      	nop
 800b888:	e002      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b88a:	bf00      	nop
 800b88c:	e000      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b88e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10b      	bne.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b898:	4ba3      	ldr	r3, [pc, #652]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b89c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8a8:	4a9f      	ldr	r2, [pc, #636]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b8ae:	e003      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b8c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	d037      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e2:	d00e      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e8:	d816      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d018      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f2:	d111      	bne.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f4:	4b8c      	ldr	r3, [pc, #560]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	4a8b      	ldr	r2, [pc, #556]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b900:	e00f      	b.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b906:	3308      	adds	r3, #8
 800b908:	2101      	movs	r1, #1
 800b90a:	4618      	mov	r0, r3
 800b90c:	f002 f81e 	bl	800d94c <RCCEx_PLL2_Config>
 800b910:	4603      	mov	r3, r0
 800b912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b916:	e004      	b.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b91e:	e000      	b.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b920:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10a      	bne.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b92a:	4b7f      	ldr	r3, [pc, #508]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b92c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b938:	4a7b      	ldr	r2, [pc, #492]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b93a:	430b      	orrs	r3, r1
 800b93c:	6513      	str	r3, [r2, #80]	; 0x50
 800b93e:	e003      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b958:	2300      	movs	r3, #0
 800b95a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b95e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b962:	460b      	mov	r3, r1
 800b964:	4313      	orrs	r3, r2
 800b966:	d039      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d81c      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b9b5 	.word	0x0800b9b5
 800b97c:	0800b989 	.word	0x0800b989
 800b980:	0800b997 	.word	0x0800b997
 800b984:	0800b9b5 	.word	0x0800b9b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b988:	4b67      	ldr	r3, [pc, #412]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	4a66      	ldr	r2, [pc, #408]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b98e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b994:	e00f      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	3308      	adds	r3, #8
 800b99c:	2102      	movs	r1, #2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 ffd4 	bl	800d94c <RCCEx_PLL2_Config>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9aa:	e004      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9b2:	e000      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b9be:	4b5a      	ldr	r3, [pc, #360]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c2:	f023 0103 	bic.w	r1, r3, #3
 800b9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9cc:	4a56      	ldr	r2, [pc, #344]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9ce:	430b      	orrs	r3, r1
 800b9d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9d2:	e003      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b9e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	f000 809f 	beq.w	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9fe:	4b4b      	ldr	r3, [pc, #300]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a4a      	ldr	r2, [pc, #296]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba0a:	f7f8 fc09 	bl	8004220 <HAL_GetTick>
 800ba0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba12:	e00b      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba14:	f7f8 fc04 	bl	8004220 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	2b64      	cmp	r3, #100	; 0x64
 800ba22:	d903      	bls.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba2a:	e005      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba2c:	4b3f      	ldr	r3, [pc, #252]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0ed      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ba38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d179      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ba40:	4b39      	ldr	r3, [pc, #228]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba4c:	4053      	eors	r3, r2
 800ba4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d015      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba56:	4b34      	ldr	r3, [pc, #208]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba62:	4b31      	ldr	r3, [pc, #196]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba66:	4a30      	ldr	r2, [pc, #192]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba6e:	4b2e      	ldr	r3, [pc, #184]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba72:	4a2d      	ldr	r2, [pc, #180]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba7a:	4a2b      	ldr	r2, [pc, #172]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba8e:	d118      	bne.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba90:	f7f8 fbc6 	bl	8004220 <HAL_GetTick>
 800ba94:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba98:	e00d      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba9a:	f7f8 fbc1 	bl	8004220 <HAL_GetTick>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800baa4:	1ad2      	subs	r2, r2, r3
 800baa6:	f241 3388 	movw	r3, #5000	; 0x1388
 800baaa:	429a      	cmp	r2, r3
 800baac:	d903      	bls.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bab4:	e005      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bab6:	4b1c      	ldr	r3, [pc, #112]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0eb      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d129      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bada:	d10e      	bne.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800badc:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800baec:	091a      	lsrs	r2, r3, #4
 800baee:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baf4:	430b      	orrs	r3, r1
 800baf6:	6113      	str	r3, [r2, #16]
 800baf8:	e005      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bafa:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	4a0a      	ldr	r2, [pc, #40]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb04:	6113      	str	r3, [r2, #16]
 800bb06:	4b08      	ldr	r3, [pc, #32]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb16:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	6713      	str	r3, [r2, #112]	; 0x70
 800bb1c:	e00e      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bb26:	e009      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	58024800 	.word	0x58024800
 800bb30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f002 0301 	and.w	r3, r2, #1
 800bb48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	f000 8089 	beq.w	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb64:	2b28      	cmp	r3, #40	; 0x28
 800bb66:	d86b      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bb68:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6e:	bf00      	nop
 800bb70:	0800bc49 	.word	0x0800bc49
 800bb74:	0800bc41 	.word	0x0800bc41
 800bb78:	0800bc41 	.word	0x0800bc41
 800bb7c:	0800bc41 	.word	0x0800bc41
 800bb80:	0800bc41 	.word	0x0800bc41
 800bb84:	0800bc41 	.word	0x0800bc41
 800bb88:	0800bc41 	.word	0x0800bc41
 800bb8c:	0800bc41 	.word	0x0800bc41
 800bb90:	0800bc15 	.word	0x0800bc15
 800bb94:	0800bc41 	.word	0x0800bc41
 800bb98:	0800bc41 	.word	0x0800bc41
 800bb9c:	0800bc41 	.word	0x0800bc41
 800bba0:	0800bc41 	.word	0x0800bc41
 800bba4:	0800bc41 	.word	0x0800bc41
 800bba8:	0800bc41 	.word	0x0800bc41
 800bbac:	0800bc41 	.word	0x0800bc41
 800bbb0:	0800bc2b 	.word	0x0800bc2b
 800bbb4:	0800bc41 	.word	0x0800bc41
 800bbb8:	0800bc41 	.word	0x0800bc41
 800bbbc:	0800bc41 	.word	0x0800bc41
 800bbc0:	0800bc41 	.word	0x0800bc41
 800bbc4:	0800bc41 	.word	0x0800bc41
 800bbc8:	0800bc41 	.word	0x0800bc41
 800bbcc:	0800bc41 	.word	0x0800bc41
 800bbd0:	0800bc49 	.word	0x0800bc49
 800bbd4:	0800bc41 	.word	0x0800bc41
 800bbd8:	0800bc41 	.word	0x0800bc41
 800bbdc:	0800bc41 	.word	0x0800bc41
 800bbe0:	0800bc41 	.word	0x0800bc41
 800bbe4:	0800bc41 	.word	0x0800bc41
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bc49 	.word	0x0800bc49
 800bbf4:	0800bc41 	.word	0x0800bc41
 800bbf8:	0800bc41 	.word	0x0800bc41
 800bbfc:	0800bc41 	.word	0x0800bc41
 800bc00:	0800bc41 	.word	0x0800bc41
 800bc04:	0800bc41 	.word	0x0800bc41
 800bc08:	0800bc41 	.word	0x0800bc41
 800bc0c:	0800bc41 	.word	0x0800bc41
 800bc10:	0800bc49 	.word	0x0800bc49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc18:	3308      	adds	r3, #8
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 fe95 	bl	800d94c <RCCEx_PLL2_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc28:	e00f      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2e:	3328      	adds	r3, #40	; 0x28
 800bc30:	2101      	movs	r1, #1
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 ff3c 	bl	800dab0 <RCCEx_PLL3_Config>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc3e:	e004      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc46:	e000      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bc48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc52:	4bbf      	ldr	r3, [pc, #764]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc56:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc60:	4abb      	ldr	r2, [pc, #748]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc62:	430b      	orrs	r3, r1
 800bc64:	6553      	str	r3, [r2, #84]	; 0x54
 800bc66:	e003      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f002 0302 	and.w	r3, r2, #2
 800bc7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc80:	2300      	movs	r3, #0
 800bc82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bc86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	d041      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc96:	2b05      	cmp	r3, #5
 800bc98:	d824      	bhi.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bc9a:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bced 	.word	0x0800bced
 800bca4:	0800bcb9 	.word	0x0800bcb9
 800bca8:	0800bccf 	.word	0x0800bccf
 800bcac:	0800bced 	.word	0x0800bced
 800bcb0:	0800bced 	.word	0x0800bced
 800bcb4:	0800bced 	.word	0x0800bced
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 fe43 	bl	800d94c <RCCEx_PLL2_Config>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bccc:	e00f      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	3328      	adds	r3, #40	; 0x28
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 feea 	bl	800dab0 <RCCEx_PLL3_Config>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bce2:	e004      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcea:	e000      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bcec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bcf6:	4b96      	ldr	r3, [pc, #600]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfa:	f023 0107 	bic.w	r1, r3, #7
 800bcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd04:	4a92      	ldr	r2, [pc, #584]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd06:	430b      	orrs	r3, r1
 800bd08:	6553      	str	r3, [r2, #84]	; 0x54
 800bd0a:	e003      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f002 0304 	and.w	r3, r2, #4
 800bd20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd24:	2300      	movs	r3, #0
 800bd26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4313      	orrs	r3, r2
 800bd32:	d044      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd3c:	2b05      	cmp	r3, #5
 800bd3e:	d825      	bhi.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bd40:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bd95 	.word	0x0800bd95
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd77 	.word	0x0800bd77
 800bd54:	0800bd95 	.word	0x0800bd95
 800bd58:	0800bd95 	.word	0x0800bd95
 800bd5c:	0800bd95 	.word	0x0800bd95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd64:	3308      	adds	r3, #8
 800bd66:	2101      	movs	r1, #1
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f001 fdef 	bl	800d94c <RCCEx_PLL2_Config>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd74:	e00f      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7a:	3328      	adds	r3, #40	; 0x28
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fe96 	bl	800dab0 <RCCEx_PLL3_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd8a:	e004      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd92:	e000      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bd94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10b      	bne.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd9e:	4b6c      	ldr	r3, [pc, #432]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda2:	f023 0107 	bic.w	r1, r3, #7
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdae:	4a68      	ldr	r2, [pc, #416]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	6593      	str	r3, [r2, #88]	; 0x58
 800bdb4:	e003      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f002 0320 	and.w	r3, r2, #32
 800bdca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4313      	orrs	r3, r2
 800bddc:	d055      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdea:	d033      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bdec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdf0:	d82c      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf6:	d02f      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bdf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfc:	d826      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bdfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be02:	d02b      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800be04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be08:	d820      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0e:	d012      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800be10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be14:	d81a      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d022      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800be1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be1e:	d115      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be24:	3308      	adds	r3, #8
 800be26:	2100      	movs	r1, #0
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 fd8f 	bl	800d94c <RCCEx_PLL2_Config>
 800be2e:	4603      	mov	r3, r0
 800be30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be34:	e015      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3a:	3328      	adds	r3, #40	; 0x28
 800be3c:	2102      	movs	r1, #2
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 fe36 	bl	800dab0 <RCCEx_PLL3_Config>
 800be44:	4603      	mov	r3, r0
 800be46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be4a:	e00a      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be52:	e006      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be54:	bf00      	nop
 800be56:	e004      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be58:	bf00      	nop
 800be5a:	e002      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be5c:	bf00      	nop
 800be5e:	e000      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be6a:	4b39      	ldr	r3, [pc, #228]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800be72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be7a:	4a35      	ldr	r2, [pc, #212]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6553      	str	r3, [r2, #84]	; 0x54
 800be80:	e003      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800be96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be9a:	2300      	movs	r3, #0
 800be9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bea0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4313      	orrs	r3, r2
 800bea8:	d058      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800beb6:	d033      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800beb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bebc:	d82c      	bhi.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec2:	d02f      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec8:	d826      	bhi.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800beca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bece:	d02b      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bed0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed4:	d820      	bhi.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beda:	d012      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bedc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee0:	d81a      	bhi.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d022      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beea:	d115      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef0:	3308      	adds	r3, #8
 800bef2:	2100      	movs	r1, #0
 800bef4:	4618      	mov	r0, r3
 800bef6:	f001 fd29 	bl	800d94c <RCCEx_PLL2_Config>
 800befa:	4603      	mov	r3, r0
 800befc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf00:	e015      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf06:	3328      	adds	r3, #40	; 0x28
 800bf08:	2102      	movs	r1, #2
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f001 fdd0 	bl	800dab0 <RCCEx_PLL3_Config>
 800bf10:	4603      	mov	r3, r0
 800bf12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf16:	e00a      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf1e:	e006      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf20:	bf00      	nop
 800bf22:	e004      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf24:	bf00      	nop
 800bf26:	e002      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf28:	bf00      	nop
 800bf2a:	e000      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10e      	bne.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf36:	4b06      	ldr	r3, [pc, #24]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf46:	4a02      	ldr	r2, [pc, #8]	; (800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	6593      	str	r3, [r2, #88]	; 0x58
 800bf4c:	e006      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bf4e:	bf00      	nop
 800bf50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bf68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bf76:	460b      	mov	r3, r1
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	d055      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf88:	d033      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bf8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf8e:	d82c      	bhi.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf94:	d02f      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bf96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf9a:	d826      	bhi.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bf9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfa0:	d02b      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bfa2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfa6:	d820      	bhi.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfac:	d012      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bfae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfb2:	d81a      	bhi.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d022      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bfb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfbc:	d115      	bne.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 fcc0 	bl	800d94c <RCCEx_PLL2_Config>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfd2:	e015      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd8:	3328      	adds	r3, #40	; 0x28
 800bfda:	2102      	movs	r1, #2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f001 fd67 	bl	800dab0 <RCCEx_PLL3_Config>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfe8:	e00a      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bff0:	e006      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bff2:	bf00      	nop
 800bff4:	e004      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bff6:	bf00      	nop
 800bff8:	e002      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bffa:	bf00      	nop
 800bffc:	e000      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10b      	bne.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c008:	4ba1      	ldr	r3, [pc, #644]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c018:	4a9d      	ldr	r2, [pc, #628]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c01a:	430b      	orrs	r3, r1
 800c01c:	6593      	str	r3, [r2, #88]	; 0x58
 800c01e:	e003      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f002 0308 	and.w	r3, r2, #8
 800c034:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c038:	2300      	movs	r3, #0
 800c03a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c03e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c042:	460b      	mov	r3, r1
 800c044:	4313      	orrs	r3, r2
 800c046:	d01e      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c054:	d10c      	bne.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05a:	3328      	adds	r3, #40	; 0x28
 800c05c:	2102      	movs	r1, #2
 800c05e:	4618      	mov	r0, r3
 800c060:	f001 fd26 	bl	800dab0 <RCCEx_PLL3_Config>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d002      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c070:	4b87      	ldr	r3, [pc, #540]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c074:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c080:	4a83      	ldr	r2, [pc, #524]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c082:	430b      	orrs	r3, r1
 800c084:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	f002 0310 	and.w	r3, r2, #16
 800c092:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c096:	2300      	movs	r3, #0
 800c098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c09c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	d01e      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b2:	d10c      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b8:	3328      	adds	r3, #40	; 0x28
 800c0ba:	2102      	movs	r1, #2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f001 fcf7 	bl	800dab0 <RCCEx_PLL3_Config>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0ce:	4b70      	ldr	r3, [pc, #448]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0de:	4a6c      	ldr	r2, [pc, #432]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0e0:	430b      	orrs	r3, r1
 800c0e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c0f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c0fe:	460b      	mov	r3, r1
 800c100:	4313      	orrs	r3, r2
 800c102:	d03e      	beq.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c10c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c110:	d022      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c116:	d81b      	bhi.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c120:	d00b      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c122:	e015      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c128:	3308      	adds	r3, #8
 800c12a:	2100      	movs	r1, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 fc0d 	bl	800d94c <RCCEx_PLL2_Config>
 800c132:	4603      	mov	r3, r0
 800c134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c138:	e00f      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13e:	3328      	adds	r3, #40	; 0x28
 800c140:	2102      	movs	r1, #2
 800c142:	4618      	mov	r0, r3
 800c144:	f001 fcb4 	bl	800dab0 <RCCEx_PLL3_Config>
 800c148:	4603      	mov	r3, r0
 800c14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c14e:	e004      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c156:	e000      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10b      	bne.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c162:	4b4b      	ldr	r3, [pc, #300]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c166:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c172:	4a47      	ldr	r2, [pc, #284]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c174:	430b      	orrs	r3, r1
 800c176:	6593      	str	r3, [r2, #88]	; 0x58
 800c178:	e003      	b.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c17e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c18e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c190:	2300      	movs	r3, #0
 800c192:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c194:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c198:	460b      	mov	r3, r1
 800c19a:	4313      	orrs	r3, r2
 800c19c:	d03b      	beq.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1aa:	d01f      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c1ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1b0:	d818      	bhi.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c1b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1b6:	d003      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c1b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1bc:	d007      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c1be:	e011      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1c0:	4b33      	ldr	r3, [pc, #204]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c4:	4a32      	ldr	r2, [pc, #200]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1cc:	e00f      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d2:	3328      	adds	r3, #40	; 0x28
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f001 fc6a 	bl	800dab0 <RCCEx_PLL3_Config>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1e2:	e004      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1ea:	e000      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c1ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10b      	bne.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1f6:	4b26      	ldr	r3, [pc, #152]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c206:	4a22      	ldr	r2, [pc, #136]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c208:	430b      	orrs	r3, r1
 800c20a:	6553      	str	r3, [r2, #84]	; 0x54
 800c20c:	e003      	b.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c20e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c222:	673b      	str	r3, [r7, #112]	; 0x70
 800c224:	2300      	movs	r3, #0
 800c226:	677b      	str	r3, [r7, #116]	; 0x74
 800c228:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c22c:	460b      	mov	r3, r1
 800c22e:	4313      	orrs	r3, r2
 800c230:	d034      	beq.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c240:	d007      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c242:	e011      	b.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c244:	4b12      	ldr	r3, [pc, #72]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	4a11      	ldr	r2, [pc, #68]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c24a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c24e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c250:	e00e      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c256:	3308      	adds	r3, #8
 800c258:	2102      	movs	r1, #2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 fb76 	bl	800d94c <RCCEx_PLL2_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c266:	e003      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c26e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10d      	bne.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c27a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c27c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c286:	4a02      	ldr	r2, [pc, #8]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c288:	430b      	orrs	r3, r1
 800c28a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c28c:	e006      	b.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c28e:	bf00      	nop
 800c290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c298:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c2a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	d00c      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2bc:	3328      	adds	r3, #40	; 0x28
 800c2be:	2102      	movs	r1, #2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f001 fbf5 	bl	800dab0 <RCCEx_PLL3_Config>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c2de:	663b      	str	r3, [r7, #96]	; 0x60
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	667b      	str	r3, [r7, #100]	; 0x64
 800c2e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	d038      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2fa:	d018      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c2fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c300:	d811      	bhi.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c306:	d014      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c30c:	d80b      	bhi.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d011      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c316:	d106      	bne.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c318:	4bc3      	ldr	r3, [pc, #780]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	4ac2      	ldr	r2, [pc, #776]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c31e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c324:	e008      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c32c:	e004      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c32e:	bf00      	nop
 800c330:	e002      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c332:	bf00      	nop
 800c334:	e000      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c336:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10b      	bne.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c340:	4bb9      	ldr	r3, [pc, #740]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c344:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c350:	4ab5      	ldr	r2, [pc, #724]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c352:	430b      	orrs	r3, r1
 800c354:	6553      	str	r3, [r2, #84]	; 0x54
 800c356:	e003      	b.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c35c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c36c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c36e:	2300      	movs	r3, #0
 800c370:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c372:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c376:	460b      	mov	r3, r1
 800c378:	4313      	orrs	r3, r2
 800c37a:	d009      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c37c:	4baa      	ldr	r3, [pc, #680]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c380:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c38a:	4aa7      	ldr	r2, [pc, #668]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c38c:	430b      	orrs	r3, r1
 800c38e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c39c:	653b      	str	r3, [r7, #80]	; 0x50
 800c39e:	2300      	movs	r3, #0
 800c3a0:	657b      	str	r3, [r7, #84]	; 0x54
 800c3a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	d00a      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c3ac:	4b9e      	ldr	r3, [pc, #632]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c3bc:	4a9a      	ldr	r2, [pc, #616]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3be:	430b      	orrs	r3, r1
 800c3c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c3ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	d009      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3de:	4b92      	ldr	r3, [pc, #584]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ec:	4a8e      	ldr	r2, [pc, #568]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c3fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c400:	2300      	movs	r3, #0
 800c402:	647b      	str	r3, [r7, #68]	; 0x44
 800c404:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c408:	460b      	mov	r3, r1
 800c40a:	4313      	orrs	r3, r2
 800c40c:	d00e      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c40e:	4b86      	ldr	r3, [pc, #536]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	4a85      	ldr	r2, [pc, #532]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c418:	6113      	str	r3, [r2, #16]
 800c41a:	4b83      	ldr	r3, [pc, #524]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c41c:	6919      	ldr	r1, [r3, #16]
 800c41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c426:	4a80      	ldr	r2, [pc, #512]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c428:	430b      	orrs	r3, r1
 800c42a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c438:	63bb      	str	r3, [r7, #56]	; 0x38
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c442:	460b      	mov	r3, r1
 800c444:	4313      	orrs	r3, r2
 800c446:	d009      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c448:	4b77      	ldr	r3, [pc, #476]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c44a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c456:	4a74      	ldr	r2, [pc, #464]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c458:	430b      	orrs	r3, r1
 800c45a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c468:	633b      	str	r3, [r7, #48]	; 0x30
 800c46a:	2300      	movs	r3, #0
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34
 800c46e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c472:	460b      	mov	r3, r1
 800c474:	4313      	orrs	r3, r2
 800c476:	d00a      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c478:	4b6b      	ldr	r3, [pc, #428]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c488:	4a67      	ldr	r2, [pc, #412]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c48a:	430b      	orrs	r3, r1
 800c48c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	2100      	movs	r1, #0
 800c498:	62b9      	str	r1, [r7, #40]	; 0x28
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	d011      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f001 fa4a 	bl	800d94c <RCCEx_PLL2_Config>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	6239      	str	r1, [r7, #32]
 800c4da:	f003 0302 	and.w	r3, r3, #2
 800c4de:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	d011      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f001 fa2a 	bl	800d94c <RCCEx_PLL2_Config>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c50a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	2100      	movs	r1, #0
 800c518:	61b9      	str	r1, [r7, #24]
 800c51a:	f003 0304 	and.w	r3, r3, #4
 800c51e:	61fb      	str	r3, [r7, #28]
 800c520:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c524:	460b      	mov	r3, r1
 800c526:	4313      	orrs	r3, r2
 800c528:	d011      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c52e:	3308      	adds	r3, #8
 800c530:	2102      	movs	r1, #2
 800c532:	4618      	mov	r0, r3
 800c534:	f001 fa0a 	bl	800d94c <RCCEx_PLL2_Config>
 800c538:	4603      	mov	r3, r0
 800c53a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c53e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c54a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	2100      	movs	r1, #0
 800c558:	6139      	str	r1, [r7, #16]
 800c55a:	f003 0308 	and.w	r3, r3, #8
 800c55e:	617b      	str	r3, [r7, #20]
 800c560:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c564:	460b      	mov	r3, r1
 800c566:	4313      	orrs	r3, r2
 800c568:	d011      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c56e:	3328      	adds	r3, #40	; 0x28
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f001 fa9c 	bl	800dab0 <RCCEx_PLL3_Config>
 800c578:	4603      	mov	r3, r0
 800c57a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c57e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c58a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	2100      	movs	r1, #0
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	f003 0310 	and.w	r3, r3, #16
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	d011      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ae:	3328      	adds	r3, #40	; 0x28
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f001 fa7c 	bl	800dab0 <RCCEx_PLL3_Config>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	607b      	str	r3, [r7, #4]
 800c5e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	d011      	beq.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ee:	3328      	adds	r3, #40	; 0x28
 800c5f0:	2102      	movs	r1, #2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f001 fa5c 	bl	800dab0 <RCCEx_PLL3_Config>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c60a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c60e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	e000      	b.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c622:	46bd      	mov	sp, r7
 800c624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c628:	58024400 	.word	0x58024400

0800c62c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b090      	sub	sp, #64	; 0x40
 800c630:	af00      	add	r7, sp, #0
 800c632:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c63a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c63e:	430b      	orrs	r3, r1
 800c640:	f040 8094 	bne.w	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c644:	4b9e      	ldr	r3, [pc, #632]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c648:	f003 0307 	and.w	r3, r3, #7
 800c64c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	2b04      	cmp	r3, #4
 800c652:	f200 8087 	bhi.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c656:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65c:	0800c671 	.word	0x0800c671
 800c660:	0800c699 	.word	0x0800c699
 800c664:	0800c6c1 	.word	0x0800c6c1
 800c668:	0800c75d 	.word	0x0800c75d
 800c66c:	0800c6e9 	.word	0x0800c6e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c670:	4b93      	ldr	r3, [pc, #588]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c67c:	d108      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c682:	4618      	mov	r0, r3
 800c684:	f001 f810 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c68c:	f000 bd45 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c694:	f000 bd41 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c698:	4b89      	ldr	r3, [pc, #548]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6a4:	d108      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a6:	f107 0318 	add.w	r3, r7, #24
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fd54 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b4:	f000 bd31 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	f000 bd2d 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6c0:	4b7f      	ldr	r3, [pc, #508]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6cc:	d108      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ce:	f107 030c 	add.w	r3, r7, #12
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fe94 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6dc:	f000 bd1d 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	f000 bd19 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6e8:	4b75      	ldr	r3, [pc, #468]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6f2:	4b73      	ldr	r3, [pc, #460]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f003 0304 	and.w	r3, r3, #4
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	d10c      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c704:	4b6e      	ldr	r3, [pc, #440]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	08db      	lsrs	r3, r3, #3
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	4a6d      	ldr	r2, [pc, #436]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c710:	fa22 f303 	lsr.w	r3, r2, r3
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c716:	e01f      	b.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c718:	4b69      	ldr	r3, [pc, #420]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c724:	d106      	bne.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c72c:	d102      	bne.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c72e:	4b66      	ldr	r3, [pc, #408]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c732:	e011      	b.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c734:	4b62      	ldr	r3, [pc, #392]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c740:	d106      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c748:	d102      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c74a:	4b60      	ldr	r3, [pc, #384]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74e:	e003      	b.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c754:	f000 bce1 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c758:	f000 bcdf 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c75c:	4b5c      	ldr	r3, [pc, #368]	; (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c760:	f000 bcdb 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c768:	f000 bcd7 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c76c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c770:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c774:	430b      	orrs	r3, r1
 800c776:	f040 80ad 	bne.w	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c77a:	4b51      	ldr	r3, [pc, #324]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c782:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78a:	d056      	beq.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c792:	f200 8090 	bhi.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2bc0      	cmp	r3, #192	; 0xc0
 800c79a:	f000 8088 	beq.w	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	2bc0      	cmp	r3, #192	; 0xc0
 800c7a2:	f200 8088 	bhi.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	2b80      	cmp	r3, #128	; 0x80
 800c7aa:	d032      	beq.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	2b80      	cmp	r3, #128	; 0x80
 800c7b0:	f200 8081 	bhi.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	2b40      	cmp	r3, #64	; 0x40
 800c7be:	d014      	beq.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c7c0:	e079      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7c2:	4b3f      	ldr	r3, [pc, #252]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ce:	d108      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 ff67 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7de:	f000 bc9c 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e6:	f000 bc98 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7ea:	4b35      	ldr	r3, [pc, #212]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7f6:	d108      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f8:	f107 0318 	add.w	r3, r7, #24
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fcab 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c806:	f000 bc88 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80e:	f000 bc84 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c812:	4b2b      	ldr	r3, [pc, #172]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c81a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c81e:	d108      	bne.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c820:	f107 030c 	add.w	r3, r7, #12
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fdeb 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c82e:	f000 bc74 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c836:	f000 bc70 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c83a:	4b21      	ldr	r3, [pc, #132]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c842:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c844:	4b1e      	ldr	r3, [pc, #120]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f003 0304 	and.w	r3, r3, #4
 800c84c:	2b04      	cmp	r3, #4
 800c84e:	d10c      	bne.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c852:	2b00      	cmp	r3, #0
 800c854:	d109      	bne.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c856:	4b1a      	ldr	r3, [pc, #104]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	08db      	lsrs	r3, r3, #3
 800c85c:	f003 0303 	and.w	r3, r3, #3
 800c860:	4a18      	ldr	r2, [pc, #96]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c862:	fa22 f303 	lsr.w	r3, r2, r3
 800c866:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c868:	e01f      	b.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c86a:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c876:	d106      	bne.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c87e:	d102      	bne.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c880:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c884:	e011      	b.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c886:	4b0e      	ldr	r3, [pc, #56]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c88e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c892:	d106      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c89a:	d102      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c89c:	4b0b      	ldr	r3, [pc, #44]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a0:	e003      	b.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8a6:	f000 bc38 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8aa:	f000 bc36 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8ae:	4b08      	ldr	r3, [pc, #32]	; (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b2:	f000 bc32 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ba:	f000 bc2e 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8be:	bf00      	nop
 800c8c0:	58024400 	.word	0x58024400
 800c8c4:	03d09000 	.word	0x03d09000
 800c8c8:	003d0900 	.word	0x003d0900
 800c8cc:	017d7840 	.word	0x017d7840
 800c8d0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	f040 809c 	bne.w	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c8e2:	4b9e      	ldr	r3, [pc, #632]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c8ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8f2:	d054      	beq.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8fa:	f200 808b 	bhi.w	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c904:	f000 8083 	beq.w	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c90e:	f200 8081 	bhi.w	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c918:	d02f      	beq.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c920:	d878      	bhi.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c924:	2b00      	cmp	r3, #0
 800c926:	d004      	beq.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c92e:	d012      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c930:	e070      	b.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c932:	4b8a      	ldr	r3, [pc, #552]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c93a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c93e:	d107      	bne.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c944:	4618      	mov	r0, r3
 800c946:	f000 feaf 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c94e:	e3e4      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c954:	e3e1      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c956:	4b81      	ldr	r3, [pc, #516]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c95e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c962:	d107      	bne.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c964:	f107 0318 	add.w	r3, r7, #24
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fbf5 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c972:	e3d2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c978:	e3cf      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c97a:	4b78      	ldr	r3, [pc, #480]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c986:	d107      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c988:	f107 030c 	add.w	r3, r7, #12
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fd37 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c996:	e3c0      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99c:	e3bd      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c99e:	4b6f      	ldr	r3, [pc, #444]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9a8:	4b6c      	ldr	r3, [pc, #432]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 0304 	and.w	r3, r3, #4
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	d10c      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d109      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ba:	4b68      	ldr	r3, [pc, #416]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	08db      	lsrs	r3, r3, #3
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	4a66      	ldr	r2, [pc, #408]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9cc:	e01e      	b.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9ce:	4b63      	ldr	r3, [pc, #396]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9da:	d106      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9e2:	d102      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9e4:	4b5f      	ldr	r3, [pc, #380]	; (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9e8:	e010      	b.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9ea:	4b5c      	ldr	r3, [pc, #368]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f6:	d106      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9fe:	d102      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca00:	4b59      	ldr	r3, [pc, #356]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ca02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca04:	e002      	b.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca0a:	e386      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca0c:	e385      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca0e:	4b57      	ldr	r3, [pc, #348]	; (800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca12:	e382      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca18:	e37f      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ca1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ca22:	430b      	orrs	r3, r1
 800ca24:	f040 80a7 	bne.w	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ca28:	4b4c      	ldr	r3, [pc, #304]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca2c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ca30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ca32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca38:	d055      	beq.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca40:	f200 8096 	bhi.w	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca4a:	f000 8084 	beq.w	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca54:	f200 808c 	bhi.w	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca5e:	d030      	beq.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ca60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca66:	f200 8083 	bhi.w	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d004      	beq.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca76:	d012      	beq.n	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ca78:	e07a      	b.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca7a:	4b38      	ldr	r3, [pc, #224]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca86:	d107      	bne.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 fe0b 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca96:	e340      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9c:	e33d      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca9e:	4b2f      	ldr	r3, [pc, #188]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caaa:	d107      	bne.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caac:	f107 0318 	add.w	r3, r7, #24
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 fb51 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caba:	e32e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac0:	e32b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cac2:	4b26      	ldr	r3, [pc, #152]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800caca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cace:	d107      	bne.n	800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad0:	f107 030c 	add.w	r3, r7, #12
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 fc93 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cade:	e31c      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cae4:	e319      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cae6:	4b1d      	ldr	r3, [pc, #116]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caf0:	4b1a      	ldr	r3, [pc, #104]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d10c      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d109      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb02:	4b16      	ldr	r3, [pc, #88]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	08db      	lsrs	r3, r3, #3
 800cb08:	f003 0303 	and.w	r3, r3, #3
 800cb0c:	4a14      	ldr	r2, [pc, #80]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cb0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb14:	e01e      	b.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb16:	4b11      	ldr	r3, [pc, #68]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb22:	d106      	bne.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb2a:	d102      	bne.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb2c:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb30:	e010      	b.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb32:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb3e:	d106      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb46:	d102      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb48:	4b07      	ldr	r3, [pc, #28]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4c:	e002      	b.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb52:	e2e2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb54:	e2e1      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb56:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb5a:	e2de      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb5c:	58024400 	.word	0x58024400
 800cb60:	03d09000 	.word	0x03d09000
 800cb64:	003d0900 	.word	0x003d0900
 800cb68:	017d7840 	.word	0x017d7840
 800cb6c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb74:	e2d1      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb7a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cb7e:	430b      	orrs	r3, r1
 800cb80:	f040 809c 	bne.w	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cb84:	4b93      	ldr	r3, [pc, #588]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb94:	d054      	beq.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb9c:	f200 808b 	bhi.w	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cba6:	f000 8083 	beq.w	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbb0:	f200 8081 	bhi.w	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbba:	d02f      	beq.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbc2:	d878      	bhi.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d004      	beq.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbd0:	d012      	beq.n	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cbd2:	e070      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbd4:	4b7f      	ldr	r3, [pc, #508]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbe0:	d107      	bne.n	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 fd5e 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf0:	e293      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf6:	e290      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbf8:	4b76      	ldr	r3, [pc, #472]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc04:	d107      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc06:	f107 0318 	add.w	r3, r7, #24
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 faa4 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc14:	e281      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1a:	e27e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc1c:	4b6d      	ldr	r3, [pc, #436]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc28:	d107      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc2a:	f107 030c 	add.w	r3, r7, #12
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fbe6 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc38:	e26f      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3e:	e26c      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc40:	4b64      	ldr	r3, [pc, #400]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc4a:	4b62      	ldr	r3, [pc, #392]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0304 	and.w	r3, r3, #4
 800cc52:	2b04      	cmp	r3, #4
 800cc54:	d10c      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d109      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc5c:	4b5d      	ldr	r3, [pc, #372]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	08db      	lsrs	r3, r3, #3
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	4a5c      	ldr	r2, [pc, #368]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc68:	fa22 f303 	lsr.w	r3, r2, r3
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc6e:	e01e      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc70:	4b58      	ldr	r3, [pc, #352]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc7c:	d106      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc84:	d102      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc86:	4b55      	ldr	r3, [pc, #340]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8a:	e010      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc8c:	4b51      	ldr	r3, [pc, #324]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc98:	d106      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cca0:	d102      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cca2:	4b4f      	ldr	r3, [pc, #316]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca6:	e002      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ccac:	e235      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ccae:	e234      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccb0:	4b4c      	ldr	r3, [pc, #304]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb4:	e231      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccba:	e22e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ccbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ccc4:	430b      	orrs	r3, r1
 800ccc6:	f040 808f 	bne.w	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ccca:	4b42      	ldr	r3, [pc, #264]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ccd2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccda:	d06b      	beq.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cce2:	d874      	bhi.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccea:	d056      	beq.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ccec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccf2:	d86c      	bhi.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccfa:	d03b      	beq.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd02:	d864      	bhi.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd0a:	d021      	beq.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd12:	d85c      	bhi.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d004      	beq.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd20:	d004      	beq.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cd22:	e054      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd24:	f7fe fa0a 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 800cd28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd2a:	e1f6      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd2c:	4b29      	ldr	r3, [pc, #164]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd38:	d107      	bne.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd3a:	f107 0318 	add.w	r3, r7, #24
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 fa0a 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd48:	e1e7      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4e:	e1e4      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd50:	4b20      	ldr	r3, [pc, #128]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5c:	d107      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd5e:	f107 030c 	add.w	r3, r7, #12
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 fb4c 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd6c:	e1d5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd72:	e1d2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd74:	4b17      	ldr	r3, [pc, #92]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0304 	and.w	r3, r3, #4
 800cd7c:	2b04      	cmp	r3, #4
 800cd7e:	d109      	bne.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd80:	4b14      	ldr	r3, [pc, #80]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	08db      	lsrs	r3, r3, #3
 800cd86:	f003 0303 	and.w	r3, r3, #3
 800cd8a:	4a13      	ldr	r2, [pc, #76]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cd8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd92:	e1c2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd98:	e1bf      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd9a:	4b0e      	ldr	r3, [pc, #56]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda6:	d102      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cda8:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdac:	e1b5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb2:	e1b2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdb4:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdc0:	d102      	bne.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cdc2:	4b07      	ldr	r3, [pc, #28]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc6:	e1a8      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdcc:	e1a5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd2:	e1a2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdd4:	58024400 	.word	0x58024400
 800cdd8:	03d09000 	.word	0x03d09000
 800cddc:	003d0900 	.word	0x003d0900
 800cde0:	017d7840 	.word	0x017d7840
 800cde4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cdf0:	430b      	orrs	r3, r1
 800cdf2:	d173      	bne.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cdf4:	4b9c      	ldr	r3, [pc, #624]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cdfc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce04:	d02f      	beq.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce0c:	d863      	bhi.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d004      	beq.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce1a:	d012      	beq.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ce1c:	e05b      	b.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce1e:	4b92      	ldr	r3, [pc, #584]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce2a:	d107      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce2c:	f107 0318 	add.w	r3, r7, #24
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 f991 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce3a:	e16e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce40:	e16b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce42:	4b89      	ldr	r3, [pc, #548]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce4e:	d107      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce50:	f107 030c 	add.w	r3, r7, #12
 800ce54:	4618      	mov	r0, r3
 800ce56:	f000 fad3 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce5e:	e15c      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce64:	e159      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce66:	4b80      	ldr	r3, [pc, #512]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce70:	4b7d      	ldr	r3, [pc, #500]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d10c      	bne.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d109      	bne.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce82:	4b79      	ldr	r3, [pc, #484]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	08db      	lsrs	r3, r3, #3
 800ce88:	f003 0303 	and.w	r3, r3, #3
 800ce8c:	4a77      	ldr	r2, [pc, #476]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ce8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce94:	e01e      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce96:	4b74      	ldr	r3, [pc, #464]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cea2:	d106      	bne.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceaa:	d102      	bne.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ceac:	4b70      	ldr	r3, [pc, #448]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceb0:	e010      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ceb2:	4b6d      	ldr	r3, [pc, #436]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cebe:	d106      	bne.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cec6:	d102      	bne.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cec8:	4b6a      	ldr	r3, [pc, #424]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cecc:	e002      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ced2:	e122      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ced4:	e121      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceda:	e11e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cedc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cee0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cee4:	430b      	orrs	r3, r1
 800cee6:	d133      	bne.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cee8:	4b5f      	ldr	r3, [pc, #380]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cef0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d004      	beq.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cefe:	d012      	beq.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cf00:	e023      	b.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf02:	4b59      	ldr	r3, [pc, #356]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf0e:	d107      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 fbc7 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf1e:	e0fc      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf24:	e0f9      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf26:	4b50      	ldr	r3, [pc, #320]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf32:	d107      	bne.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf34:	f107 0318 	add.w	r3, r7, #24
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 f90d 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf42:	e0ea      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf48:	e0e7      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4e:	e0e4      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cf50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf54:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cf58:	430b      	orrs	r3, r1
 800cf5a:	f040 808d 	bne.w	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf5e:	4b42      	ldr	r3, [pc, #264]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cf66:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf6e:	d06b      	beq.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf76:	d874      	bhi.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7e:	d056      	beq.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf86:	d86c      	bhi.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf8e:	d03b      	beq.n	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf96:	d864      	bhi.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9e:	d021      	beq.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa6:	d85c      	bhi.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d004      	beq.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfb4:	d004      	beq.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cfb6:	e054      	b.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cfb8:	f000 f8b8 	bl	800d12c <HAL_RCCEx_GetD3PCLK1Freq>
 800cfbc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfbe:	e0ac      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfc0:	4b29      	ldr	r3, [pc, #164]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfcc:	d107      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfce:	f107 0318 	add.w	r3, r7, #24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 f8c0 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfdc:	e09d      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfe2:	e09a      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfe4:	4b20      	ldr	r3, [pc, #128]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cff0:	d107      	bne.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cff2:	f107 030c 	add.w	r3, r7, #12
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fa02 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d000:	e08b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d006:	e088      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d008:	4b17      	ldr	r3, [pc, #92]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b04      	cmp	r3, #4
 800d012:	d109      	bne.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d014:	4b14      	ldr	r3, [pc, #80]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	08db      	lsrs	r3, r3, #3
 800d01a:	f003 0303 	and.w	r3, r3, #3
 800d01e:	4a13      	ldr	r2, [pc, #76]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d020:	fa22 f303 	lsr.w	r3, r2, r3
 800d024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d026:	e078      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d02c:	e075      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d02e:	4b0e      	ldr	r3, [pc, #56]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d03a:	d102      	bne.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d03c:	4b0c      	ldr	r3, [pc, #48]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d040:	e06b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d042:	2300      	movs	r3, #0
 800d044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d046:	e068      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d048:	4b07      	ldr	r3, [pc, #28]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d054:	d102      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d056:	4b07      	ldr	r3, [pc, #28]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d05a:	e05e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d060:	e05b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d066:	e058      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d068:	58024400 	.word	0x58024400
 800d06c:	03d09000 	.word	0x03d09000
 800d070:	003d0900 	.word	0x003d0900
 800d074:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d080:	430b      	orrs	r3, r1
 800d082:	d148      	bne.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d084:	4b27      	ldr	r3, [pc, #156]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d08c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d094:	d02a      	beq.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d09c:	d838      	bhi.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0aa:	d00d      	beq.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d0ac:	e030      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0ae:	4b1d      	ldr	r3, [pc, #116]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0ba:	d102      	bne.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d0bc:	4b1a      	ldr	r3, [pc, #104]	; (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0c0:	e02b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c6:	e028      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0c8:	4b16      	ldr	r3, [pc, #88]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0d4:	d107      	bne.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 fae4 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0e4:	e019      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ea:	e016      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0ec:	4b0d      	ldr	r3, [pc, #52]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f8:	d107      	bne.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0fa:	f107 0318 	add.w	r3, r7, #24
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f82a 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d108:	e007      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d10e:	e004      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d114:	e001      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3740      	adds	r7, #64	; 0x40
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	58024400 	.word	0x58024400
 800d128:	017d7840 	.word	0x017d7840

0800d12c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d130:	f7fd ffd4 	bl	800b0dc <HAL_RCC_GetHCLKFreq>
 800d134:	4602      	mov	r2, r0
 800d136:	4b06      	ldr	r3, [pc, #24]	; (800d150 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	091b      	lsrs	r3, r3, #4
 800d13c:	f003 0307 	and.w	r3, r3, #7
 800d140:	4904      	ldr	r1, [pc, #16]	; (800d154 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d142:	5ccb      	ldrb	r3, [r1, r3]
 800d144:	f003 031f 	and.w	r3, r3, #31
 800d148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	58024400 	.word	0x58024400
 800d154:	08017b64 	.word	0x08017b64

0800d158 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d158:	b480      	push	{r7}
 800d15a:	b089      	sub	sp, #36	; 0x24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d160:	4ba1      	ldr	r3, [pc, #644]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d164:	f003 0303 	and.w	r3, r3, #3
 800d168:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d16a:	4b9f      	ldr	r3, [pc, #636]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16e:	0b1b      	lsrs	r3, r3, #12
 800d170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d174:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d176:	4b9c      	ldr	r3, [pc, #624]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	091b      	lsrs	r3, r3, #4
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d182:	4b99      	ldr	r3, [pc, #612]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	08db      	lsrs	r3, r3, #3
 800d188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	fb02 f303 	mul.w	r3, r2, r3
 800d192:	ee07 3a90 	vmov	s15, r3
 800d196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 8111 	beq.w	800d3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	f000 8083 	beq.w	800d2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	f200 80a1 	bhi.w	800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d056      	beq.n	800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d1c2:	e099      	b.n	800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1c4:	4b88      	ldr	r3, [pc, #544]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0320 	and.w	r3, r3, #32
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d02d      	beq.n	800d22c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1d0:	4b85      	ldr	r3, [pc, #532]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	08db      	lsrs	r3, r3, #3
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	4a84      	ldr	r2, [pc, #528]	; (800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d1e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	ee07 3a90 	vmov	s15, r3
 800d1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	ee07 3a90 	vmov	s15, r3
 800d1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1fa:	4b7b      	ldr	r3, [pc, #492]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d202:	ee07 3a90 	vmov	s15, r3
 800d206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d20a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d20e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d226:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d22a:	e087      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	ee07 3a90 	vmov	s15, r3
 800d232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d236:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d23e:	4b6a      	ldr	r3, [pc, #424]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d252:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d26e:	e065      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	ee07 3a90 	vmov	s15, r3
 800d276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d282:	4b59      	ldr	r3, [pc, #356]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28a:	ee07 3a90 	vmov	s15, r3
 800d28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d292:	ed97 6a03 	vldr	s12, [r7, #12]
 800d296:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2b2:	e043      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2c6:	4b48      	ldr	r3, [pc, #288]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ce:	ee07 3a90 	vmov	s15, r3
 800d2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2f6:	e021      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d302:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d30a:	4b37      	ldr	r3, [pc, #220]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d312:	ee07 3a90 	vmov	s15, r3
 800d316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d31e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d33a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d33c:	4b2a      	ldr	r3, [pc, #168]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d340:	0a5b      	lsrs	r3, r3, #9
 800d342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d352:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d356:	edd7 6a07 	vldr	s13, [r7, #28]
 800d35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d362:	ee17 2a90 	vmov	r2, s15
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d36a:	4b1f      	ldr	r3, [pc, #124]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36e:	0c1b      	lsrs	r3, r3, #16
 800d370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d374:	ee07 3a90 	vmov	s15, r3
 800d378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d380:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d384:	edd7 6a07 	vldr	s13, [r7, #28]
 800d388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d38c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d390:	ee17 2a90 	vmov	r2, s15
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d398:	4b13      	ldr	r3, [pc, #76]	; (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	0e1b      	lsrs	r3, r3, #24
 800d39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3be:	ee17 2a90 	vmov	r2, s15
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3c6:	e008      	b.n	800d3da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	609a      	str	r2, [r3, #8]
}
 800d3da:	bf00      	nop
 800d3dc:	3724      	adds	r7, #36	; 0x24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	58024400 	.word	0x58024400
 800d3ec:	03d09000 	.word	0x03d09000
 800d3f0:	46000000 	.word	0x46000000
 800d3f4:	4c742400 	.word	0x4c742400
 800d3f8:	4a742400 	.word	0x4a742400
 800d3fc:	4bbebc20 	.word	0x4bbebc20

0800d400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d400:	b480      	push	{r7}
 800d402:	b089      	sub	sp, #36	; 0x24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d408:	4ba1      	ldr	r3, [pc, #644]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40c:	f003 0303 	and.w	r3, r3, #3
 800d410:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d412:	4b9f      	ldr	r3, [pc, #636]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d416:	0d1b      	lsrs	r3, r3, #20
 800d418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d41c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d41e:	4b9c      	ldr	r3, [pc, #624]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d422:	0a1b      	lsrs	r3, r3, #8
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d42a:	4b99      	ldr	r3, [pc, #612]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42e:	08db      	lsrs	r3, r3, #3
 800d430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	fb02 f303 	mul.w	r3, r2, r3
 800d43a:	ee07 3a90 	vmov	s15, r3
 800d43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 8111 	beq.w	800d670 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	2b02      	cmp	r3, #2
 800d452:	f000 8083 	beq.w	800d55c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	f200 80a1 	bhi.w	800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d056      	beq.n	800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d46a:	e099      	b.n	800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d46c:	4b88      	ldr	r3, [pc, #544]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 0320 	and.w	r3, r3, #32
 800d474:	2b00      	cmp	r3, #0
 800d476:	d02d      	beq.n	800d4d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d478:	4b85      	ldr	r3, [pc, #532]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	08db      	lsrs	r3, r3, #3
 800d47e:	f003 0303 	and.w	r3, r3, #3
 800d482:	4a84      	ldr	r2, [pc, #528]	; (800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d484:	fa22 f303 	lsr.w	r3, r2, r3
 800d488:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	ee07 3a90 	vmov	s15, r3
 800d490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4a2:	4b7b      	ldr	r3, [pc, #492]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4aa:	ee07 3a90 	vmov	s15, r3
 800d4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4d2:	e087      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e6:	4b6a      	ldr	r3, [pc, #424]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d516:	e065      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	ee07 3a90 	vmov	s15, r3
 800d51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d522:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52a:	4b59      	ldr	r3, [pc, #356]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d532:	ee07 3a90 	vmov	s15, r3
 800d536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d53a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d53e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d55a:	e043      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56e:	4b48      	ldr	r3, [pc, #288]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d576:	ee07 3a90 	vmov	s15, r3
 800d57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d582:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d59e:	e021      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b2:	4b37      	ldr	r3, [pc, #220]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d5e4:	4b2a      	ldr	r3, [pc, #168]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e8:	0a5b      	lsrs	r3, r3, #9
 800d5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d60a:	ee17 2a90 	vmov	r2, s15
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d612:	4b1f      	ldr	r3, [pc, #124]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d616:	0c1b      	lsrs	r3, r3, #16
 800d618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d61c:	ee07 3a90 	vmov	s15, r3
 800d620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d62c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d638:	ee17 2a90 	vmov	r2, s15
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d640:	4b13      	ldr	r3, [pc, #76]	; (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d644:	0e1b      	lsrs	r3, r3, #24
 800d646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d64a:	ee07 3a90 	vmov	s15, r3
 800d64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d65a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d65e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d666:	ee17 2a90 	vmov	r2, s15
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d66e:	e008      	b.n	800d682 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	609a      	str	r2, [r3, #8]
}
 800d682:	bf00      	nop
 800d684:	3724      	adds	r7, #36	; 0x24
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	58024400 	.word	0x58024400
 800d694:	03d09000 	.word	0x03d09000
 800d698:	46000000 	.word	0x46000000
 800d69c:	4c742400 	.word	0x4c742400
 800d6a0:	4a742400 	.word	0x4a742400
 800d6a4:	4bbebc20 	.word	0x4bbebc20

0800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b089      	sub	sp, #36	; 0x24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6b0:	4ba0      	ldr	r3, [pc, #640]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b4:	f003 0303 	and.w	r3, r3, #3
 800d6b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d6ba:	4b9e      	ldr	r3, [pc, #632]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6be:	091b      	lsrs	r3, r3, #4
 800d6c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d6c6:	4b9b      	ldr	r3, [pc, #620]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6d0:	4b98      	ldr	r3, [pc, #608]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d4:	08db      	lsrs	r3, r3, #3
 800d6d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6da:	693a      	ldr	r2, [r7, #16]
 800d6dc:	fb02 f303 	mul.w	r3, r2, r3
 800d6e0:	ee07 3a90 	vmov	s15, r3
 800d6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 8111 	beq.w	800d916 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	f000 8083 	beq.w	800d802 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	f200 80a1 	bhi.w	800d846 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d056      	beq.n	800d7be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d710:	e099      	b.n	800d846 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d712:	4b88      	ldr	r3, [pc, #544]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 0320 	and.w	r3, r3, #32
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d02d      	beq.n	800d77a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d71e:	4b85      	ldr	r3, [pc, #532]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	08db      	lsrs	r3, r3, #3
 800d724:	f003 0303 	and.w	r3, r3, #3
 800d728:	4a83      	ldr	r2, [pc, #524]	; (800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d72a:	fa22 f303 	lsr.w	r3, r2, r3
 800d72e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	ee07 3a90 	vmov	s15, r3
 800d736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	ee07 3a90 	vmov	s15, r3
 800d740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d748:	4b7a      	ldr	r3, [pc, #488]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d750:	ee07 3a90 	vmov	s15, r3
 800d754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d758:	ed97 6a03 	vldr	s12, [r7, #12]
 800d75c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d76c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d774:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d778:	e087      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d784:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d78c:	4b69      	ldr	r3, [pc, #420]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d794:	ee07 3a90 	vmov	s15, r3
 800d798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d79c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7bc:	e065      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	ee07 3a90 	vmov	s15, r3
 800d7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d944 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d7cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7d0:	4b58      	ldr	r3, [pc, #352]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d8:	ee07 3a90 	vmov	s15, r3
 800d7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d800:	e043      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	ee07 3a90 	vmov	s15, r3
 800d808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d814:	4b47      	ldr	r3, [pc, #284]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d81c:	ee07 3a90 	vmov	s15, r3
 800d820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d824:	ed97 6a03 	vldr	s12, [r7, #12]
 800d828:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d82c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d83c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d840:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d844:	e021      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	ee07 3a90 	vmov	s15, r3
 800d84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d850:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d858:	4b36      	ldr	r3, [pc, #216]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d860:	ee07 3a90 	vmov	s15, r3
 800d864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d868:	ed97 6a03 	vldr	s12, [r7, #12]
 800d86c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d87c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d880:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d888:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d88a:	4b2a      	ldr	r3, [pc, #168]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	0a5b      	lsrs	r3, r3, #9
 800d890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d894:	ee07 3a90 	vmov	s15, r3
 800d898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d89c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8b0:	ee17 2a90 	vmov	r2, s15
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d8b8:	4b1e      	ldr	r3, [pc, #120]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8bc:	0c1b      	lsrs	r3, r3, #16
 800d8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c2:	ee07 3a90 	vmov	s15, r3
 800d8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8de:	ee17 2a90 	vmov	r2, s15
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d8e6:	4b13      	ldr	r3, [pc, #76]	; (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ea:	0e1b      	lsrs	r3, r3, #24
 800d8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d900:	edd7 6a07 	vldr	s13, [r7, #28]
 800d904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d90c:	ee17 2a90 	vmov	r2, s15
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d914:	e008      	b.n	800d928 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	609a      	str	r2, [r3, #8]
}
 800d928:	bf00      	nop
 800d92a:	3724      	adds	r7, #36	; 0x24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	58024400 	.word	0x58024400
 800d938:	03d09000 	.word	0x03d09000
 800d93c:	46000000 	.word	0x46000000
 800d940:	4c742400 	.word	0x4c742400
 800d944:	4a742400 	.word	0x4a742400
 800d948:	4bbebc20 	.word	0x4bbebc20

0800d94c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d95a:	4b53      	ldr	r3, [pc, #332]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d95e:	f003 0303 	and.w	r3, r3, #3
 800d962:	2b03      	cmp	r3, #3
 800d964:	d101      	bne.n	800d96a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	e099      	b.n	800da9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d96a:	4b4f      	ldr	r3, [pc, #316]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a4e      	ldr	r2, [pc, #312]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d970:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d976:	f7f6 fc53 	bl	8004220 <HAL_GetTick>
 800d97a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d97c:	e008      	b.n	800d990 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d97e:	f7f6 fc4f 	bl	8004220 <HAL_GetTick>
 800d982:	4602      	mov	r2, r0
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d901      	bls.n	800d990 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e086      	b.n	800da9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d990:	4b45      	ldr	r3, [pc, #276]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1f0      	bne.n	800d97e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d99c:	4b42      	ldr	r3, [pc, #264]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	031b      	lsls	r3, r3, #12
 800d9aa:	493f      	ldr	r1, [pc, #252]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	628b      	str	r3, [r1, #40]	; 0x28
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	025b      	lsls	r3, r3, #9
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	041b      	lsls	r3, r3, #16
 800d9ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	061b      	lsls	r3, r3, #24
 800d9dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9e0:	4931      	ldr	r1, [pc, #196]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d9e6:	4b30      	ldr	r3, [pc, #192]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	492d      	ldr	r1, [pc, #180]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d9f8:	4b2b      	ldr	r3, [pc, #172]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fc:	f023 0220 	bic.w	r2, r3, #32
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	699b      	ldr	r3, [r3, #24]
 800da04:	4928      	ldr	r1, [pc, #160]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da06:	4313      	orrs	r3, r2
 800da08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da0a:	4b27      	ldr	r3, [pc, #156]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0e:	4a26      	ldr	r2, [pc, #152]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da10:	f023 0310 	bic.w	r3, r3, #16
 800da14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da16:	4b24      	ldr	r3, [pc, #144]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da1a:	4b24      	ldr	r3, [pc, #144]	; (800daac <RCCEx_PLL2_Config+0x160>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	69d2      	ldr	r2, [r2, #28]
 800da22:	00d2      	lsls	r2, r2, #3
 800da24:	4920      	ldr	r1, [pc, #128]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da26:	4313      	orrs	r3, r2
 800da28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800da2a:	4b1f      	ldr	r3, [pc, #124]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	4a1e      	ldr	r2, [pc, #120]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da30:	f043 0310 	orr.w	r3, r3, #16
 800da34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800da3c:	4b1a      	ldr	r3, [pc, #104]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	4a19      	ldr	r2, [pc, #100]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da48:	e00f      	b.n	800da6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d106      	bne.n	800da5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da50:	4b15      	ldr	r3, [pc, #84]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da54:	4a14      	ldr	r2, [pc, #80]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da5c:	e005      	b.n	800da6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da5e:	4b12      	ldr	r3, [pc, #72]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da62:	4a11      	ldr	r2, [pc, #68]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da6a:	4b0f      	ldr	r3, [pc, #60]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a0e      	ldr	r2, [pc, #56]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da76:	f7f6 fbd3 	bl	8004220 <HAL_GetTick>
 800da7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da7c:	e008      	b.n	800da90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da7e:	f7f6 fbcf 	bl	8004220 <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d901      	bls.n	800da90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da8c:	2303      	movs	r3, #3
 800da8e:	e006      	b.n	800da9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da90:	4b05      	ldr	r3, [pc, #20]	; (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d0f0      	beq.n	800da7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	58024400 	.word	0x58024400
 800daac:	ffff0007 	.word	0xffff0007

0800dab0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dabe:	4b53      	ldr	r3, [pc, #332]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac2:	f003 0303 	and.w	r3, r3, #3
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d101      	bne.n	800dace <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e099      	b.n	800dc02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dace:	4b4f      	ldr	r3, [pc, #316]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a4e      	ldr	r2, [pc, #312]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dada:	f7f6 fba1 	bl	8004220 <HAL_GetTick>
 800dade:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dae0:	e008      	b.n	800daf4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dae2:	f7f6 fb9d 	bl	8004220 <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d901      	bls.n	800daf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e086      	b.n	800dc02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800daf4:	4b45      	ldr	r3, [pc, #276]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1f0      	bne.n	800dae2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800db00:	4b42      	ldr	r3, [pc, #264]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	051b      	lsls	r3, r3, #20
 800db0e:	493f      	ldr	r1, [pc, #252]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db10:	4313      	orrs	r3, r2
 800db12:	628b      	str	r3, [r1, #40]	; 0x28
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	3b01      	subs	r3, #1
 800db1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	3b01      	subs	r3, #1
 800db24:	025b      	lsls	r3, r3, #9
 800db26:	b29b      	uxth	r3, r3
 800db28:	431a      	orrs	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	3b01      	subs	r3, #1
 800db30:	041b      	lsls	r3, r3, #16
 800db32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db36:	431a      	orrs	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	061b      	lsls	r3, r3, #24
 800db40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db44:	4931      	ldr	r1, [pc, #196]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db46:	4313      	orrs	r3, r2
 800db48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800db4a:	4b30      	ldr	r3, [pc, #192]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	492d      	ldr	r1, [pc, #180]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db58:	4313      	orrs	r3, r2
 800db5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db5c:	4b2b      	ldr	r3, [pc, #172]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	4928      	ldr	r1, [pc, #160]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db6a:	4313      	orrs	r3, r2
 800db6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800db6e:	4b27      	ldr	r3, [pc, #156]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db72:	4a26      	ldr	r2, [pc, #152]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800db7a:	4b24      	ldr	r3, [pc, #144]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db7e:	4b24      	ldr	r3, [pc, #144]	; (800dc10 <RCCEx_PLL3_Config+0x160>)
 800db80:	4013      	ands	r3, r2
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	69d2      	ldr	r2, [r2, #28]
 800db86:	00d2      	lsls	r2, r2, #3
 800db88:	4920      	ldr	r1, [pc, #128]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db8e:	4b1f      	ldr	r3, [pc, #124]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	4a1e      	ldr	r2, [pc, #120]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d106      	bne.n	800dbae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dba0:	4b1a      	ldr	r3, [pc, #104]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba4:	4a19      	ldr	r2, [pc, #100]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dba6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dbaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbac:	e00f      	b.n	800dbce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d106      	bne.n	800dbc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dbb4:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb8:	4a14      	ldr	r2, [pc, #80]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dbbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbc0:	e005      	b.n	800dbce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dbc2:	4b12      	ldr	r3, [pc, #72]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc6:	4a11      	ldr	r2, [pc, #68]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dbcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dbce:	4b0f      	ldr	r3, [pc, #60]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a0e      	ldr	r2, [pc, #56]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbda:	f7f6 fb21 	bl	8004220 <HAL_GetTick>
 800dbde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbe0:	e008      	b.n	800dbf4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbe2:	f7f6 fb1d 	bl	8004220 <HAL_GetTick>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d901      	bls.n	800dbf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	e006      	b.n	800dc02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbf4:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0f0      	beq.n	800dbe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	58024400 	.word	0x58024400
 800dc10:	ffff0007 	.word	0xffff0007

0800dc14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d071      	beq.n	800dd0a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7f5 fd88 	bl	8003750 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2202      	movs	r2, #2
 800dc44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	f003 0310 	and.w	r3, r3, #16
 800dc52:	2b10      	cmp	r3, #16
 800dc54:	d050      	beq.n	800dcf8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	22ca      	movs	r2, #202	; 0xca
 800dc5c:	625a      	str	r2, [r3, #36]	; 0x24
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2253      	movs	r2, #83	; 0x53
 800dc64:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fa4a 	bl	800e100 <RTC_EnterInitMode>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d124      	bne.n	800dcc0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6899      	ldr	r1, [r3, #8]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	4b24      	ldr	r3, [pc, #144]	; (800dd14 <HAL_RTC_Init+0x100>)
 800dc82:	400b      	ands	r3, r1
 800dc84:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6899      	ldr	r1, [r3, #8]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	431a      	orrs	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	431a      	orrs	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	430a      	orrs	r2, r1
 800dca2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	0419      	lsls	r1, r3, #16
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fa56 	bl	800e168 <RTC_ExitInitMode>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d113      	bne.n	800dcee <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f022 0203 	bic.w	r2, r2, #3
 800dcd4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	69da      	ldr	r2, [r3, #28]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	431a      	orrs	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	430a      	orrs	r2, r1
 800dcec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	22ff      	movs	r2, #255	; 0xff
 800dcf4:	625a      	str	r2, [r3, #36]	; 0x24
 800dcf6:	e001      	b.n	800dcfc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d103      	bne.n	800dd0a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	ff8fffbf 	.word	0xff8fffbf

0800dd18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dd18:	b590      	push	{r4, r7, lr}
 800dd1a:	b087      	sub	sp, #28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d101      	bne.n	800dd32 <HAL_RTC_SetTime+0x1a>
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e089      	b.n	800de46 <HAL_RTC_SetTime+0x12e>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2202      	movs	r2, #2
 800dd3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	22ca      	movs	r2, #202	; 0xca
 800dd48:	625a      	str	r2, [r3, #36]	; 0x24
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2253      	movs	r2, #83	; 0x53
 800dd50:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 f9d4 	bl	800e100 <RTC_EnterInitMode>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dd5c:	7cfb      	ldrb	r3, [r7, #19]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d161      	bne.n	800de26 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d126      	bne.n	800ddb6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f000 fa2f 	bl	800e1e4 <RTC_ByteToBcd2>
 800dd86:	4603      	mov	r3, r0
 800dd88:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	785b      	ldrb	r3, [r3, #1]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 fa28 	bl	800e1e4 <RTC_ByteToBcd2>
 800dd94:	4603      	mov	r3, r0
 800dd96:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dd98:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	789b      	ldrb	r3, [r3, #2]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 fa20 	bl	800e1e4 <RTC_ByteToBcd2>
 800dda4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dda6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	78db      	ldrb	r3, [r3, #3]
 800ddae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	e018      	b.n	800dde8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d102      	bne.n	800ddca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddd6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dddc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	78db      	ldrb	r3, [r3, #3]
 800dde2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dde4:	4313      	orrs	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	6979      	ldr	r1, [r7, #20]
 800ddee:	4b18      	ldr	r3, [pc, #96]	; (800de50 <HAL_RTC_SetTime+0x138>)
 800ddf0:	400b      	ands	r3, r1
 800ddf2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800de02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	6899      	ldr	r1, [r3, #8]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	68da      	ldr	r2, [r3, #12]
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	431a      	orrs	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	430a      	orrs	r2, r1
 800de1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f000 f9a3 	bl	800e168 <RTC_ExitInitMode>
 800de22:	4603      	mov	r3, r0
 800de24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	22ff      	movs	r2, #255	; 0xff
 800de2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de2e:	7cfb      	ldrb	r3, [r7, #19]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d103      	bne.n	800de3c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800de44:	7cfb      	ldrb	r3, [r7, #19]
}
 800de46:	4618      	mov	r0, r3
 800de48:	371c      	adds	r7, #28
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd90      	pop	{r4, r7, pc}
 800de4e:	bf00      	nop
 800de50:	007f7f7f 	.word	0x007f7f7f

0800de54 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b22      	ldr	r3, [pc, #136]	; (800df08 <HAL_RTC_GetTime+0xb4>)
 800de80:	4013      	ands	r3, r2
 800de82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	0c1b      	lsrs	r3, r3, #16
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	0a1b      	lsrs	r3, r3, #8
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deac:	b2da      	uxtb	r2, r3
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	0d9b      	lsrs	r3, r3, #22
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	f003 0301 	and.w	r3, r3, #1
 800debc:	b2da      	uxtb	r2, r3
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d11a      	bne.n	800defe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 f9a9 	bl	800e224 <RTC_Bcd2ToByte>
 800ded2:	4603      	mov	r3, r0
 800ded4:	461a      	mov	r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	785b      	ldrb	r3, [r3, #1]
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 f9a0 	bl	800e224 <RTC_Bcd2ToByte>
 800dee4:	4603      	mov	r3, r0
 800dee6:	461a      	mov	r2, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	789b      	ldrb	r3, [r3, #2]
 800def0:	4618      	mov	r0, r3
 800def2:	f000 f997 	bl	800e224 <RTC_Bcd2ToByte>
 800def6:	4603      	mov	r3, r0
 800def8:	461a      	mov	r2, r3
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3718      	adds	r7, #24
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	007f7f7f 	.word	0x007f7f7f

0800df0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800df0c:	b590      	push	{r4, r7, lr}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d101      	bne.n	800df26 <HAL_RTC_SetDate+0x1a>
 800df22:	2302      	movs	r3, #2
 800df24:	e073      	b.n	800e00e <HAL_RTC_SetDate+0x102>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2202      	movs	r2, #2
 800df32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10e      	bne.n	800df5a <HAL_RTC_SetDate+0x4e>
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	f003 0310 	and.w	r3, r3, #16
 800df44:	2b00      	cmp	r3, #0
 800df46:	d008      	beq.n	800df5a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	f023 0310 	bic.w	r3, r3, #16
 800df50:	b2db      	uxtb	r3, r3
 800df52:	330a      	adds	r3, #10
 800df54:	b2da      	uxtb	r2, r3
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d11c      	bne.n	800df9a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	78db      	ldrb	r3, [r3, #3]
 800df64:	4618      	mov	r0, r3
 800df66:	f000 f93d 	bl	800e1e4 <RTC_ByteToBcd2>
 800df6a:	4603      	mov	r3, r0
 800df6c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 f936 	bl	800e1e4 <RTC_ByteToBcd2>
 800df78:	4603      	mov	r3, r0
 800df7a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df7c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	789b      	ldrb	r3, [r3, #2]
 800df82:	4618      	mov	r0, r3
 800df84:	f000 f92e 	bl	800e1e4 <RTC_ByteToBcd2>
 800df88:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800df8a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df94:	4313      	orrs	r3, r2
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e00e      	b.n	800dfb8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	78db      	ldrb	r3, [r3, #3]
 800df9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	785b      	ldrb	r3, [r3, #1]
 800dfa4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dfa6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dfac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	22ca      	movs	r2, #202	; 0xca
 800dfbe:	625a      	str	r2, [r3, #36]	; 0x24
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2253      	movs	r2, #83	; 0x53
 800dfc6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f000 f899 	bl	800e100 <RTC_EnterInitMode>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dfd2:	7cfb      	ldrb	r3, [r7, #19]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	6979      	ldr	r1, [r7, #20]
 800dfde:	4b0e      	ldr	r3, [pc, #56]	; (800e018 <HAL_RTC_SetDate+0x10c>)
 800dfe0:	400b      	ands	r3, r1
 800dfe2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 f8bf 	bl	800e168 <RTC_ExitInitMode>
 800dfea:	4603      	mov	r3, r0
 800dfec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	22ff      	movs	r2, #255	; 0xff
 800dff4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dff6:	7cfb      	ldrb	r3, [r7, #19]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d103      	bne.n	800e004 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e00c:	7cfb      	ldrb	r3, [r7, #19]


}
 800e00e:	4618      	mov	r0, r3
 800e010:	371c      	adds	r7, #28
 800e012:	46bd      	mov	sp, r7
 800e014:	bd90      	pop	{r4, r7, pc}
 800e016:	bf00      	nop
 800e018:	00ffff3f 	.word	0x00ffff3f

0800e01c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	4b21      	ldr	r3, [pc, #132]	; (800e0b4 <HAL_RTC_GetDate+0x98>)
 800e030:	4013      	ands	r3, r2
 800e032:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	0c1b      	lsrs	r3, r3, #16
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	0a1b      	lsrs	r3, r3, #8
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f003 031f 	and.w	r3, r3, #31
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	b2db      	uxtb	r3, r3
 800e052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e056:	b2da      	uxtb	r2, r3
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	0b5b      	lsrs	r3, r3, #13
 800e060:	b2db      	uxtb	r3, r3
 800e062:	f003 0307 	and.w	r3, r3, #7
 800e066:	b2da      	uxtb	r2, r3
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d11a      	bne.n	800e0a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	78db      	ldrb	r3, [r3, #3]
 800e076:	4618      	mov	r0, r3
 800e078:	f000 f8d4 	bl	800e224 <RTC_Bcd2ToByte>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461a      	mov	r2, r3
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	785b      	ldrb	r3, [r3, #1]
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 f8cb 	bl	800e224 <RTC_Bcd2ToByte>
 800e08e:	4603      	mov	r3, r0
 800e090:	461a      	mov	r2, r3
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	789b      	ldrb	r3, [r3, #2]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f000 f8c2 	bl	800e224 <RTC_Bcd2ToByte>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3718      	adds	r7, #24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	00ffff3f 	.word	0x00ffff3f

0800e0b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <HAL_RTC_WaitForSynchro+0x44>)
 800e0c6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e0c8:	f7f6 f8aa 	bl	8004220 <HAL_GetTick>
 800e0cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e0ce:	e009      	b.n	800e0e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e0d0:	f7f6 f8a6 	bl	8004220 <HAL_GetTick>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0de:	d901      	bls.n	800e0e4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e007      	b.n	800e0f4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	f003 0320 	and.w	r3, r3, #32
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0ee      	beq.n	800e0d0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	0003ff5f 	.word	0x0003ff5f

0800e100 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e116:	2b00      	cmp	r3, #0
 800e118:	d120      	bne.n	800e15c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e122:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e124:	f7f6 f87c 	bl	8004220 <HAL_GetTick>
 800e128:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e12a:	e00d      	b.n	800e148 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e12c:	f7f6 f878 	bl	8004220 <HAL_GetTick>
 800e130:	4602      	mov	r2, r0
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e13a:	d905      	bls.n	800e148 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e13c:	2303      	movs	r3, #3
 800e13e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2203      	movs	r2, #3
 800e144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <RTC_EnterInitMode+0x5c>
 800e156:	7bfb      	ldrb	r3, [r7, #15]
 800e158:	2b03      	cmp	r3, #3
 800e15a:	d1e7      	bne.n	800e12c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e174:	4b1a      	ldr	r3, [pc, #104]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	4a19      	ldr	r2, [pc, #100]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e17a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e17e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e180:	4b17      	ldr	r3, [pc, #92]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10c      	bne.n	800e1a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff ff93 	bl	800e0b8 <HAL_RTC_WaitForSynchro>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d01e      	beq.n	800e1d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2203      	movs	r2, #3
 800e19c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	73fb      	strb	r3, [r7, #15]
 800e1a4:	e017      	b.n	800e1d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1a6:	4b0e      	ldr	r3, [pc, #56]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	4a0d      	ldr	r2, [pc, #52]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e1ac:	f023 0320 	bic.w	r3, r3, #32
 800e1b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff ff80 	bl	800e0b8 <HAL_RTC_WaitForSynchro>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d005      	beq.n	800e1ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2203      	movs	r2, #3
 800e1c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1ca:	4b05      	ldr	r3, [pc, #20]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	4a04      	ldr	r2, [pc, #16]	; (800e1e0 <RTC_ExitInitMode+0x78>)
 800e1d0:	f043 0320 	orr.w	r3, r3, #32
 800e1d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	58004000 	.word	0x58004000

0800e1e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e1f6:	e005      	b.n	800e204 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e1fe:	7afb      	ldrb	r3, [r7, #11]
 800e200:	3b0a      	subs	r3, #10
 800e202:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e204:	7afb      	ldrb	r3, [r7, #11]
 800e206:	2b09      	cmp	r3, #9
 800e208:	d8f6      	bhi.n	800e1f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	011b      	lsls	r3, r3, #4
 800e210:	b2da      	uxtb	r2, r3
 800e212:	7afb      	ldrb	r3, [r7, #11]
 800e214:	4313      	orrs	r3, r2
 800e216:	b2db      	uxtb	r3, r3
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	4603      	mov	r3, r0
 800e22c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e22e:	79fb      	ldrb	r3, [r7, #7]
 800e230:	091b      	lsrs	r3, r3, #4
 800e232:	b2db      	uxtb	r3, r3
 800e234:	461a      	mov	r2, r3
 800e236:	0092      	lsls	r2, r2, #2
 800e238:	4413      	add	r3, r2
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	f003 030f 	and.w	r3, r3, #15
 800e244:	b2da      	uxtb	r2, r3
 800e246:	7bfb      	ldrb	r3, [r7, #15]
 800e248:	4413      	add	r3, r2
 800e24a:	b2db      	uxtb	r3, r3
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e10f      	b.n	800e48a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a87      	ldr	r2, [pc, #540]	; (800e494 <HAL_SPI_Init+0x23c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d00f      	beq.n	800e29a <HAL_SPI_Init+0x42>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a86      	ldr	r2, [pc, #536]	; (800e498 <HAL_SPI_Init+0x240>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d00a      	beq.n	800e29a <HAL_SPI_Init+0x42>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a84      	ldr	r2, [pc, #528]	; (800e49c <HAL_SPI_Init+0x244>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d005      	beq.n	800e29a <HAL_SPI_Init+0x42>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	2b0f      	cmp	r3, #15
 800e294:	d901      	bls.n	800e29a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	e0f7      	b.n	800e48a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fc12 	bl	800eac4 <SPI_GetPacketSize>
 800e2a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a7b      	ldr	r2, [pc, #492]	; (800e494 <HAL_SPI_Init+0x23c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d00c      	beq.n	800e2c6 <HAL_SPI_Init+0x6e>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a79      	ldr	r2, [pc, #484]	; (800e498 <HAL_SPI_Init+0x240>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d007      	beq.n	800e2c6 <HAL_SPI_Init+0x6e>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a78      	ldr	r2, [pc, #480]	; (800e49c <HAL_SPI_Init+0x244>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d002      	beq.n	800e2c6 <HAL_SPI_Init+0x6e>
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b08      	cmp	r3, #8
 800e2c4:	d811      	bhi.n	800e2ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e2ca:	4a72      	ldr	r2, [pc, #456]	; (800e494 <HAL_SPI_Init+0x23c>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d009      	beq.n	800e2e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a70      	ldr	r2, [pc, #448]	; (800e498 <HAL_SPI_Init+0x240>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d004      	beq.n	800e2e4 <HAL_SPI_Init+0x8c>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a6f      	ldr	r2, [pc, #444]	; (800e49c <HAL_SPI_Init+0x244>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d104      	bne.n	800e2ee <HAL_SPI_Init+0x96>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b10      	cmp	r3, #16
 800e2e8:	d901      	bls.n	800e2ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e0cd      	b.n	800e48a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d106      	bne.n	800e308 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7f5 fa58 	bl	80037b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2202      	movs	r2, #2
 800e30c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f022 0201 	bic.w	r2, r2, #1
 800e31e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e32a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e334:	d119      	bne.n	800e36a <HAL_SPI_Init+0x112>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e33e:	d103      	bne.n	800e348 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e344:	2b00      	cmp	r3, #0
 800e346:	d008      	beq.n	800e35a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10c      	bne.n	800e36a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e358:	d107      	bne.n	800e36a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e368:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00f      	beq.n	800e396 <HAL_SPI_Init+0x13e>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	2b06      	cmp	r3, #6
 800e37c:	d90b      	bls.n	800e396 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	430a      	orrs	r2, r1
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	e007      	b.n	800e3a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	69da      	ldr	r2, [r3, #28]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ae:	431a      	orrs	r2, r3
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	431a      	orrs	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b8:	ea42 0103 	orr.w	r1, r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	68da      	ldr	r2, [r3, #12]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	430a      	orrs	r2, r1
 800e3c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d0:	431a      	orrs	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	699b      	ldr	r3, [r3, #24]
 800e3dc:	431a      	orrs	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	431a      	orrs	r2, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	431a      	orrs	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	431a      	orrs	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3fa:	431a      	orrs	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	431a      	orrs	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e406:	ea42 0103 	orr.w	r1, r2, r3
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d113      	bne.n	800e446 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e430:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e444:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f022 0201 	bic.w	r2, r2, #1
 800e454:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	430a      	orrs	r2, r1
 800e476:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2200      	movs	r2, #0
 800e47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2201      	movs	r2, #1
 800e484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	40013000 	.word	0x40013000
 800e498:	40003800 	.word	0x40003800
 800e49c:	40003c00 	.word	0x40003c00

0800e4a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b088      	sub	sp, #32
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	603b      	str	r3, [r7, #0]
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b4:	095b      	lsrs	r3, r3, #5
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3330      	adds	r3, #48	; 0x30
 800e4c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4c4:	f7f5 feac 	bl	8004220 <HAL_GetTick>
 800e4c8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d001      	beq.n	800e4da <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	e250      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <HAL_SPI_Receive+0x46>
 800e4e0:	88fb      	ldrh	r3, [r7, #6]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d101      	bne.n	800e4ea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e248      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d101      	bne.n	800e4f8 <HAL_SPI_Receive+0x58>
 800e4f4:	2302      	movs	r3, #2
 800e4f6:	e241      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2204      	movs	r2, #4
 800e504:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	88fa      	ldrh	r2, [r7, #6]
 800e51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	88fa      	ldrh	r2, [r7, #6]
 800e522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e550:	d108      	bne.n	800e564 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	e009      	b.n	800e578 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e576:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	4b95      	ldr	r3, [pc, #596]	; (800e7d4 <HAL_SPI_Receive+0x334>)
 800e580:	4013      	ands	r3, r2
 800e582:	88f9      	ldrh	r1, [r7, #6]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	6812      	ldr	r2, [r2, #0]
 800e588:	430b      	orrs	r3, r1
 800e58a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f042 0201 	orr.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5a4:	d107      	bne.n	800e5b6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	2b0f      	cmp	r3, #15
 800e5bc:	d96c      	bls.n	800e698 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e5be:	e064      	b.n	800e68a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	695b      	ldr	r3, [r3, #20]
 800e5ce:	f003 0301 	and.w	r3, r3, #1
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d114      	bne.n	800e600 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e6:	1d1a      	adds	r2, r3, #4
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5fe:	e044      	b.n	800e68a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e606:	b29b      	uxth	r3, r3
 800e608:	8bfa      	ldrh	r2, [r7, #30]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d919      	bls.n	800e642 <HAL_SPI_Receive+0x1a2>
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d014      	beq.n	800e642 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e620:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e622:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e628:	1d1a      	adds	r2, r3, #4
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e634:	b29b      	uxth	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	b29a      	uxth	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e640:	e023      	b.n	800e68a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e642:	f7f5 fded 	bl	8004220 <HAL_GetTick>
 800e646:	4602      	mov	r2, r0
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d803      	bhi.n	800e65a <HAL_SPI_Receive+0x1ba>
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e658:	d102      	bne.n	800e660 <HAL_SPI_Receive+0x1c0>
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d114      	bne.n	800e68a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 f98f 	bl	800e984 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e66c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2201      	movs	r2, #1
 800e67a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e686:	2303      	movs	r3, #3
 800e688:	e178      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e690:	b29b      	uxth	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d194      	bne.n	800e5c0 <HAL_SPI_Receive+0x120>
 800e696:	e15e      	b.n	800e956 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	2b07      	cmp	r3, #7
 800e69e:	f240 8153 	bls.w	800e948 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e6a2:	e08f      	b.n	800e7c4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	695b      	ldr	r3, [r3, #20]
 800e6aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	f003 0301 	and.w	r3, r3, #1
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d114      	bne.n	800e6e4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	8812      	ldrh	r2, [r2, #0]
 800e6c2:	b292      	uxth	r2, r2
 800e6c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ca:	1c9a      	adds	r2, r3, #2
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6e2:	e06f      	b.n	800e7c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	8bfa      	ldrh	r2, [r7, #30]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d924      	bls.n	800e73c <HAL_SPI_Receive+0x29c>
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01f      	beq.n	800e73c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	8812      	ldrh	r2, [r2, #0]
 800e704:	b292      	uxth	r2, r2
 800e706:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e70c:	1c9a      	adds	r2, r3, #2
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e716:	69ba      	ldr	r2, [r7, #24]
 800e718:	8812      	ldrh	r2, [r2, #0]
 800e71a:	b292      	uxth	r2, r2
 800e71c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e722:	1c9a      	adds	r2, r3, #2
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e72e:	b29b      	uxth	r3, r3
 800e730:	3b02      	subs	r3, #2
 800e732:	b29a      	uxth	r2, r3
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e73a:	e043      	b.n	800e7c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e742:	b29b      	uxth	r3, r3
 800e744:	2b01      	cmp	r3, #1
 800e746:	d119      	bne.n	800e77c <HAL_SPI_Receive+0x2dc>
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d014      	beq.n	800e77c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	8812      	ldrh	r2, [r2, #0]
 800e75a:	b292      	uxth	r2, r2
 800e75c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e762:	1c9a      	adds	r2, r3, #2
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e76e:	b29b      	uxth	r3, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	b29a      	uxth	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e77a:	e023      	b.n	800e7c4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e77c:	f7f5 fd50 	bl	8004220 <HAL_GetTick>
 800e780:	4602      	mov	r2, r0
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d803      	bhi.n	800e794 <HAL_SPI_Receive+0x2f4>
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e792:	d102      	bne.n	800e79a <HAL_SPI_Receive+0x2fa>
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d114      	bne.n	800e7c4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f000 f8f2 	bl	800e984 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	e0db      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f47f af69 	bne.w	800e6a4 <HAL_SPI_Receive+0x204>
 800e7d2:	e0c0      	b.n	800e956 <HAL_SPI_Receive+0x4b6>
 800e7d4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	695b      	ldr	r3, [r3, #20]
 800e7de:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d117      	bne.n	800e81e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7fa:	7812      	ldrb	r2, [r2, #0]
 800e7fc:	b2d2      	uxtb	r2, r2
 800e7fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e804:	1c5a      	adds	r2, r3, #1
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e810:	b29b      	uxth	r3, r3
 800e812:	3b01      	subs	r3, #1
 800e814:	b29a      	uxth	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e81c:	e094      	b.n	800e948 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e824:	b29b      	uxth	r3, r3
 800e826:	8bfa      	ldrh	r2, [r7, #30]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d946      	bls.n	800e8ba <HAL_SPI_Receive+0x41a>
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e832:	2b00      	cmp	r3, #0
 800e834:	d041      	beq.n	800e8ba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e842:	7812      	ldrb	r2, [r2, #0]
 800e844:	b2d2      	uxtb	r2, r2
 800e846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e85e:	7812      	ldrb	r2, [r2, #0]
 800e860:	b2d2      	uxtb	r2, r2
 800e862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e87a:	7812      	ldrb	r2, [r2, #0]
 800e87c:	b2d2      	uxtb	r2, r2
 800e87e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	b2d2      	uxtb	r2, r2
 800e89a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	3b04      	subs	r3, #4
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8b8:	e046      	b.n	800e948 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d81c      	bhi.n	800e900 <HAL_SPI_Receive+0x460>
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d017      	beq.n	800e900 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8dc:	7812      	ldrb	r2, [r2, #0]
 800e8de:	b2d2      	uxtb	r2, r2
 800e8e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e6:	1c5a      	adds	r2, r3, #1
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8fe:	e023      	b.n	800e948 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e900:	f7f5 fc8e 	bl	8004220 <HAL_GetTick>
 800e904:	4602      	mov	r2, r0
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d803      	bhi.n	800e918 <HAL_SPI_Receive+0x478>
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e916:	d102      	bne.n	800e91e <HAL_SPI_Receive+0x47e>
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d114      	bne.n	800e948 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f000 f830 	bl	800e984 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e92a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2200      	movs	r2, #0
 800e940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e944:	2303      	movs	r3, #3
 800e946:	e019      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e94e:	b29b      	uxth	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	f47f af41 	bne.w	800e7d8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f000 f814 	bl	800e984 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	e000      	b.n	800e97c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e97a:	2300      	movs	r3, #0
  }
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3720      	adds	r7, #32
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e984:	b480      	push	{r7}
 800e986:	b085      	sub	sp, #20
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	695b      	ldr	r3, [r3, #20]
 800e992:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	699a      	ldr	r2, [r3, #24]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f042 0208 	orr.w	r2, r2, #8
 800e9a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	699a      	ldr	r2, [r3, #24]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f042 0210 	orr.w	r2, r2, #16
 800e9b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f022 0201 	bic.w	r2, r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6919      	ldr	r1, [r3, #16]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	4b3c      	ldr	r3, [pc, #240]	; (800eac0 <SPI_CloseTransfer+0x13c>)
 800e9d0:	400b      	ands	r3, r1
 800e9d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	689a      	ldr	r2, [r3, #8]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e9e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	2b04      	cmp	r3, #4
 800e9ee:	d014      	beq.n	800ea1a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f003 0320 	and.w	r3, r3, #32
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00f      	beq.n	800ea1a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	699a      	ldr	r2, [r3, #24]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f042 0220 	orr.w	r2, r2, #32
 800ea18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	d014      	beq.n	800ea50 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00f      	beq.n	800ea50 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea36:	f043 0204 	orr.w	r2, r3, #4
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	699a      	ldr	r2, [r3, #24]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00f      	beq.n	800ea7a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea60:	f043 0201 	orr.w	r2, r3, #1
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	699a      	ldr	r2, [r3, #24]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00f      	beq.n	800eaa4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea8a:	f043 0208 	orr.w	r2, r3, #8
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	699a      	ldr	r2, [r3, #24]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eaa2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eab4:	bf00      	nop
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	fffffc90 	.word	0xfffffc90

0800eac4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead0:	095b      	lsrs	r3, r3, #5
 800ead2:	3301      	adds	r3, #1
 800ead4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	3301      	adds	r3, #1
 800eadc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	3307      	adds	r3, #7
 800eae2:	08db      	lsrs	r3, r3, #3
 800eae4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	fb02 f303 	mul.w	r3, r2, r3
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3714      	adds	r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr

0800eafa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b082      	sub	sp, #8
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d101      	bne.n	800eb0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e049      	b.n	800eba0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d106      	bne.n	800eb26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7f4 feff 	bl	8003924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2202      	movs	r2, #2
 800eb2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	3304      	adds	r3, #4
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f000 fe7d 	bl	800f838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d001      	beq.n	800ebc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e054      	b.n	800ec6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68da      	ldr	r2, [r3, #12]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f042 0201 	orr.w	r2, r2, #1
 800ebd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a26      	ldr	r2, [pc, #152]	; (800ec78 <HAL_TIM_Base_Start_IT+0xd0>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d022      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebea:	d01d      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a22      	ldr	r2, [pc, #136]	; (800ec7c <HAL_TIM_Base_Start_IT+0xd4>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d018      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a21      	ldr	r2, [pc, #132]	; (800ec80 <HAL_TIM_Base_Start_IT+0xd8>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d013      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a1f      	ldr	r2, [pc, #124]	; (800ec84 <HAL_TIM_Base_Start_IT+0xdc>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d00e      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a1e      	ldr	r2, [pc, #120]	; (800ec88 <HAL_TIM_Base_Start_IT+0xe0>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d009      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a1c      	ldr	r2, [pc, #112]	; (800ec8c <HAL_TIM_Base_Start_IT+0xe4>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d004      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x80>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4a1b      	ldr	r2, [pc, #108]	; (800ec90 <HAL_TIM_Base_Start_IT+0xe8>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d115      	bne.n	800ec54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	689a      	ldr	r2, [r3, #8]
 800ec2e:	4b19      	ldr	r3, [pc, #100]	; (800ec94 <HAL_TIM_Base_Start_IT+0xec>)
 800ec30:	4013      	ands	r3, r2
 800ec32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2b06      	cmp	r3, #6
 800ec38:	d015      	beq.n	800ec66 <HAL_TIM_Base_Start_IT+0xbe>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec40:	d011      	beq.n	800ec66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f042 0201 	orr.w	r2, r2, #1
 800ec50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec52:	e008      	b.n	800ec66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f042 0201 	orr.w	r2, r2, #1
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	e000      	b.n	800ec68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	40010000 	.word	0x40010000
 800ec7c:	40000400 	.word	0x40000400
 800ec80:	40000800 	.word	0x40000800
 800ec84:	40000c00 	.word	0x40000c00
 800ec88:	40010400 	.word	0x40010400
 800ec8c:	40001800 	.word	0x40001800
 800ec90:	40014000 	.word	0x40014000
 800ec94:	00010007 	.word	0x00010007

0800ec98 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d109      	bne.n	800ecc0 <HAL_TIM_OC_Start_IT+0x28>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	bf14      	ite	ne
 800ecb8:	2301      	movne	r3, #1
 800ecba:	2300      	moveq	r3, #0
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	e03c      	b.n	800ed3a <HAL_TIM_OC_Start_IT+0xa2>
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b04      	cmp	r3, #4
 800ecc4:	d109      	bne.n	800ecda <HAL_TIM_OC_Start_IT+0x42>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	bf14      	ite	ne
 800ecd2:	2301      	movne	r3, #1
 800ecd4:	2300      	moveq	r3, #0
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	e02f      	b.n	800ed3a <HAL_TIM_OC_Start_IT+0xa2>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b08      	cmp	r3, #8
 800ecde:	d109      	bne.n	800ecf4 <HAL_TIM_OC_Start_IT+0x5c>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	bf14      	ite	ne
 800ecec:	2301      	movne	r3, #1
 800ecee:	2300      	moveq	r3, #0
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	e022      	b.n	800ed3a <HAL_TIM_OC_Start_IT+0xa2>
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	2b0c      	cmp	r3, #12
 800ecf8:	d109      	bne.n	800ed0e <HAL_TIM_OC_Start_IT+0x76>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	bf14      	ite	ne
 800ed06:	2301      	movne	r3, #1
 800ed08:	2300      	moveq	r3, #0
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	e015      	b.n	800ed3a <HAL_TIM_OC_Start_IT+0xa2>
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b10      	cmp	r3, #16
 800ed12:	d109      	bne.n	800ed28 <HAL_TIM_OC_Start_IT+0x90>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	bf14      	ite	ne
 800ed20:	2301      	movne	r3, #1
 800ed22:	2300      	moveq	r3, #0
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	e008      	b.n	800ed3a <HAL_TIM_OC_Start_IT+0xa2>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	bf14      	ite	ne
 800ed34:	2301      	movne	r3, #1
 800ed36:	2300      	moveq	r3, #0
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e0ec      	b.n	800ef1c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d104      	bne.n	800ed52 <HAL_TIM_OC_Start_IT+0xba>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2202      	movs	r2, #2
 800ed4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed50:	e023      	b.n	800ed9a <HAL_TIM_OC_Start_IT+0x102>
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	2b04      	cmp	r3, #4
 800ed56:	d104      	bne.n	800ed62 <HAL_TIM_OC_Start_IT+0xca>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2202      	movs	r2, #2
 800ed5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed60:	e01b      	b.n	800ed9a <HAL_TIM_OC_Start_IT+0x102>
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	2b08      	cmp	r3, #8
 800ed66:	d104      	bne.n	800ed72 <HAL_TIM_OC_Start_IT+0xda>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2202      	movs	r2, #2
 800ed6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed70:	e013      	b.n	800ed9a <HAL_TIM_OC_Start_IT+0x102>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b0c      	cmp	r3, #12
 800ed76:	d104      	bne.n	800ed82 <HAL_TIM_OC_Start_IT+0xea>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2202      	movs	r2, #2
 800ed7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed80:	e00b      	b.n	800ed9a <HAL_TIM_OC_Start_IT+0x102>
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b10      	cmp	r3, #16
 800ed86:	d104      	bne.n	800ed92 <HAL_TIM_OC_Start_IT+0xfa>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2202      	movs	r2, #2
 800ed8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed90:	e003      	b.n	800ed9a <HAL_TIM_OC_Start_IT+0x102>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2202      	movs	r2, #2
 800ed96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b0c      	cmp	r3, #12
 800ed9e:	d841      	bhi.n	800ee24 <HAL_TIM_OC_Start_IT+0x18c>
 800eda0:	a201      	add	r2, pc, #4	; (adr r2, 800eda8 <HAL_TIM_OC_Start_IT+0x110>)
 800eda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda6:	bf00      	nop
 800eda8:	0800eddd 	.word	0x0800eddd
 800edac:	0800ee25 	.word	0x0800ee25
 800edb0:	0800ee25 	.word	0x0800ee25
 800edb4:	0800ee25 	.word	0x0800ee25
 800edb8:	0800edef 	.word	0x0800edef
 800edbc:	0800ee25 	.word	0x0800ee25
 800edc0:	0800ee25 	.word	0x0800ee25
 800edc4:	0800ee25 	.word	0x0800ee25
 800edc8:	0800ee01 	.word	0x0800ee01
 800edcc:	0800ee25 	.word	0x0800ee25
 800edd0:	0800ee25 	.word	0x0800ee25
 800edd4:	0800ee25 	.word	0x0800ee25
 800edd8:	0800ee13 	.word	0x0800ee13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68da      	ldr	r2, [r3, #12]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f042 0202 	orr.w	r2, r2, #2
 800edea:	60da      	str	r2, [r3, #12]
      break;
 800edec:	e01d      	b.n	800ee2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68da      	ldr	r2, [r3, #12]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f042 0204 	orr.w	r2, r2, #4
 800edfc:	60da      	str	r2, [r3, #12]
      break;
 800edfe:	e014      	b.n	800ee2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68da      	ldr	r2, [r3, #12]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f042 0208 	orr.w	r2, r2, #8
 800ee0e:	60da      	str	r2, [r3, #12]
      break;
 800ee10:	e00b      	b.n	800ee2a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	68da      	ldr	r2, [r3, #12]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f042 0210 	orr.w	r2, r2, #16
 800ee20:	60da      	str	r2, [r3, #12]
      break;
 800ee22:	e002      	b.n	800ee2a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	73fb      	strb	r3, [r7, #15]
      break;
 800ee28:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d174      	bne.n	800ef1a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2201      	movs	r2, #1
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f001 f917 	bl	801006c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a38      	ldr	r2, [pc, #224]	; (800ef24 <HAL_TIM_OC_Start_IT+0x28c>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d013      	beq.n	800ee70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a36      	ldr	r2, [pc, #216]	; (800ef28 <HAL_TIM_OC_Start_IT+0x290>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d00e      	beq.n	800ee70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a35      	ldr	r2, [pc, #212]	; (800ef2c <HAL_TIM_OC_Start_IT+0x294>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d009      	beq.n	800ee70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a33      	ldr	r2, [pc, #204]	; (800ef30 <HAL_TIM_OC_Start_IT+0x298>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d004      	beq.n	800ee70 <HAL_TIM_OC_Start_IT+0x1d8>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a32      	ldr	r2, [pc, #200]	; (800ef34 <HAL_TIM_OC_Start_IT+0x29c>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d101      	bne.n	800ee74 <HAL_TIM_OC_Start_IT+0x1dc>
 800ee70:	2301      	movs	r3, #1
 800ee72:	e000      	b.n	800ee76 <HAL_TIM_OC_Start_IT+0x1de>
 800ee74:	2300      	movs	r3, #0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d007      	beq.n	800ee8a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a25      	ldr	r2, [pc, #148]	; (800ef24 <HAL_TIM_OC_Start_IT+0x28c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d022      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee9c:	d01d      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a25      	ldr	r2, [pc, #148]	; (800ef38 <HAL_TIM_OC_Start_IT+0x2a0>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d018      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a23      	ldr	r2, [pc, #140]	; (800ef3c <HAL_TIM_OC_Start_IT+0x2a4>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d013      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a22      	ldr	r2, [pc, #136]	; (800ef40 <HAL_TIM_OC_Start_IT+0x2a8>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00e      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a19      	ldr	r2, [pc, #100]	; (800ef28 <HAL_TIM_OC_Start_IT+0x290>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d009      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a1e      	ldr	r2, [pc, #120]	; (800ef44 <HAL_TIM_OC_Start_IT+0x2ac>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d004      	beq.n	800eeda <HAL_TIM_OC_Start_IT+0x242>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a15      	ldr	r2, [pc, #84]	; (800ef2c <HAL_TIM_OC_Start_IT+0x294>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d115      	bne.n	800ef06 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	689a      	ldr	r2, [r3, #8]
 800eee0:	4b19      	ldr	r3, [pc, #100]	; (800ef48 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eee2:	4013      	ands	r3, r2
 800eee4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	2b06      	cmp	r3, #6
 800eeea:	d015      	beq.n	800ef18 <HAL_TIM_OC_Start_IT+0x280>
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eef2:	d011      	beq.n	800ef18 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f042 0201 	orr.w	r2, r2, #1
 800ef02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef04:	e008      	b.n	800ef18 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f042 0201 	orr.w	r2, r2, #1
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	e000      	b.n	800ef1a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	40010000 	.word	0x40010000
 800ef28:	40010400 	.word	0x40010400
 800ef2c:	40014000 	.word	0x40014000
 800ef30:	40014400 	.word	0x40014400
 800ef34:	40014800 	.word	0x40014800
 800ef38:	40000400 	.word	0x40000400
 800ef3c:	40000800 	.word	0x40000800
 800ef40:	40000c00 	.word	0x40000c00
 800ef44:	40001800 	.word	0x40001800
 800ef48:	00010007 	.word	0x00010007

0800ef4c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef56:	2300      	movs	r3, #0
 800ef58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	2b0c      	cmp	r3, #12
 800ef5e:	d841      	bhi.n	800efe4 <HAL_TIM_OC_Stop_IT+0x98>
 800ef60:	a201      	add	r2, pc, #4	; (adr r2, 800ef68 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ef62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef66:	bf00      	nop
 800ef68:	0800ef9d 	.word	0x0800ef9d
 800ef6c:	0800efe5 	.word	0x0800efe5
 800ef70:	0800efe5 	.word	0x0800efe5
 800ef74:	0800efe5 	.word	0x0800efe5
 800ef78:	0800efaf 	.word	0x0800efaf
 800ef7c:	0800efe5 	.word	0x0800efe5
 800ef80:	0800efe5 	.word	0x0800efe5
 800ef84:	0800efe5 	.word	0x0800efe5
 800ef88:	0800efc1 	.word	0x0800efc1
 800ef8c:	0800efe5 	.word	0x0800efe5
 800ef90:	0800efe5 	.word	0x0800efe5
 800ef94:	0800efe5 	.word	0x0800efe5
 800ef98:	0800efd3 	.word	0x0800efd3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68da      	ldr	r2, [r3, #12]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f022 0202 	bic.w	r2, r2, #2
 800efaa:	60da      	str	r2, [r3, #12]
      break;
 800efac:	e01d      	b.n	800efea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68da      	ldr	r2, [r3, #12]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f022 0204 	bic.w	r2, r2, #4
 800efbc:	60da      	str	r2, [r3, #12]
      break;
 800efbe:	e014      	b.n	800efea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	68da      	ldr	r2, [r3, #12]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f022 0208 	bic.w	r2, r2, #8
 800efce:	60da      	str	r2, [r3, #12]
      break;
 800efd0:	e00b      	b.n	800efea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68da      	ldr	r2, [r3, #12]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f022 0210 	bic.w	r2, r2, #16
 800efe0:	60da      	str	r2, [r3, #12]
      break;
 800efe2:	e002      	b.n	800efea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800efe4:	2301      	movs	r3, #1
 800efe6:	73fb      	strb	r3, [r7, #15]
      break;
 800efe8:	bf00      	nop
  }

  if (status == HAL_OK)
 800efea:	7bfb      	ldrb	r3, [r7, #15]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f040 8081 	bne.w	800f0f4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2200      	movs	r2, #0
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	4618      	mov	r0, r3
 800effc:	f001 f836 	bl	801006c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a3e      	ldr	r2, [pc, #248]	; (800f100 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d013      	beq.n	800f032 <HAL_TIM_OC_Stop_IT+0xe6>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4a3d      	ldr	r2, [pc, #244]	; (800f104 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d00e      	beq.n	800f032 <HAL_TIM_OC_Stop_IT+0xe6>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a3b      	ldr	r2, [pc, #236]	; (800f108 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d009      	beq.n	800f032 <HAL_TIM_OC_Stop_IT+0xe6>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a3a      	ldr	r2, [pc, #232]	; (800f10c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d004      	beq.n	800f032 <HAL_TIM_OC_Stop_IT+0xe6>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a38      	ldr	r2, [pc, #224]	; (800f110 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d101      	bne.n	800f036 <HAL_TIM_OC_Stop_IT+0xea>
 800f032:	2301      	movs	r3, #1
 800f034:	e000      	b.n	800f038 <HAL_TIM_OC_Stop_IT+0xec>
 800f036:	2300      	movs	r3, #0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d017      	beq.n	800f06c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6a1a      	ldr	r2, [r3, #32]
 800f042:	f241 1311 	movw	r3, #4369	; 0x1111
 800f046:	4013      	ands	r3, r2
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10f      	bne.n	800f06c <HAL_TIM_OC_Stop_IT+0x120>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6a1a      	ldr	r2, [r3, #32]
 800f052:	f240 4344 	movw	r3, #1092	; 0x444
 800f056:	4013      	ands	r3, r2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d107      	bne.n	800f06c <HAL_TIM_OC_Stop_IT+0x120>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f06a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	6a1a      	ldr	r2, [r3, #32]
 800f072:	f241 1311 	movw	r3, #4369	; 0x1111
 800f076:	4013      	ands	r3, r2
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10f      	bne.n	800f09c <HAL_TIM_OC_Stop_IT+0x150>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6a1a      	ldr	r2, [r3, #32]
 800f082:	f240 4344 	movw	r3, #1092	; 0x444
 800f086:	4013      	ands	r3, r2
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d107      	bne.n	800f09c <HAL_TIM_OC_Stop_IT+0x150>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f022 0201 	bic.w	r2, r2, #1
 800f09a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d104      	bne.n	800f0ac <HAL_TIM_OC_Stop_IT+0x160>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0aa:	e023      	b.n	800f0f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b04      	cmp	r3, #4
 800f0b0:	d104      	bne.n	800f0bc <HAL_TIM_OC_Stop_IT+0x170>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0ba:	e01b      	b.n	800f0f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2b08      	cmp	r3, #8
 800f0c0:	d104      	bne.n	800f0cc <HAL_TIM_OC_Stop_IT+0x180>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0ca:	e013      	b.n	800f0f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	2b0c      	cmp	r3, #12
 800f0d0:	d104      	bne.n	800f0dc <HAL_TIM_OC_Stop_IT+0x190>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0da:	e00b      	b.n	800f0f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2b10      	cmp	r3, #16
 800f0e0:	d104      	bne.n	800f0ec <HAL_TIM_OC_Stop_IT+0x1a0>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0ea:	e003      	b.n	800f0f4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	40010000 	.word	0x40010000
 800f104:	40010400 	.word	0x40010400
 800f108:	40014000 	.word	0x40014000
 800f10c:	40014400 	.word	0x40014400
 800f110:	40014800 	.word	0x40014800

0800f114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d101      	bne.n	800f126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f122:	2301      	movs	r3, #1
 800f124:	e049      	b.n	800f1ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 f841 	bl	800f1c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2202      	movs	r2, #2
 800f144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	3304      	adds	r3, #4
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f000 fb70 	bl	800f838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2201      	movs	r2, #1
 800f164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b083      	sub	sp, #12
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f1ca:	bf00      	nop
 800f1cc:	370c      	adds	r7, #12
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d4:	4770      	bx	lr

0800f1d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b084      	sub	sp, #16
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	f003 0302 	and.w	r3, r3, #2
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d020      	beq.n	800f23a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f003 0302 	and.w	r3, r3, #2
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d01b      	beq.n	800f23a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f06f 0202 	mvn.w	r2, #2
 800f20a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2201      	movs	r2, #1
 800f210:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	f003 0303 	and.w	r3, r3, #3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d003      	beq.n	800f228 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 faeb 	bl	800f7fc <HAL_TIM_IC_CaptureCallback>
 800f226:	e005      	b.n	800f234 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f7f1 f9e9 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 faee 	bl	800f810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	f003 0304 	and.w	r3, r3, #4
 800f240:	2b00      	cmp	r3, #0
 800f242:	d020      	beq.n	800f286 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f003 0304 	and.w	r3, r3, #4
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d01b      	beq.n	800f286 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f06f 0204 	mvn.w	r2, #4
 800f256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2202      	movs	r2, #2
 800f25c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d003      	beq.n	800f274 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fac5 	bl	800f7fc <HAL_TIM_IC_CaptureCallback>
 800f272:	e005      	b.n	800f280 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7f1 f9c3 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fac8 	bl	800f810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f003 0308 	and.w	r3, r3, #8
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d020      	beq.n	800f2d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f003 0308 	and.w	r3, r3, #8
 800f296:	2b00      	cmp	r3, #0
 800f298:	d01b      	beq.n	800f2d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f06f 0208 	mvn.w	r2, #8
 800f2a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2204      	movs	r2, #4
 800f2a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	69db      	ldr	r3, [r3, #28]
 800f2b0:	f003 0303 	and.w	r3, r3, #3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fa9f 	bl	800f7fc <HAL_TIM_IC_CaptureCallback>
 800f2be:	e005      	b.n	800f2cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7f1 f99d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 faa2 	bl	800f810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	f003 0310 	and.w	r3, r3, #16
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d020      	beq.n	800f31e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f003 0310 	and.w	r3, r3, #16
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d01b      	beq.n	800f31e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f06f 0210 	mvn.w	r2, #16
 800f2ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2208      	movs	r2, #8
 800f2f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f300:	2b00      	cmp	r3, #0
 800f302:	d003      	beq.n	800f30c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fa79 	bl	800f7fc <HAL_TIM_IC_CaptureCallback>
 800f30a:	e005      	b.n	800f318 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7f1 f977 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fa7c 	bl	800f810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00c      	beq.n	800f342 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d007      	beq.n	800f342 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f06f 0201 	mvn.w	r2, #1
 800f33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7f3 ffcb 	bl	80032d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d104      	bne.n	800f356 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00c      	beq.n	800f370 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d007      	beq.n	800f370 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 ffba 	bl	80102e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00c      	beq.n	800f394 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f380:	2b00      	cmp	r3, #0
 800f382:	d007      	beq.n	800f394 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 ffb2 	bl	80102f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00c      	beq.n	800f3b8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d007      	beq.n	800f3b8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f000 fa36 	bl	800f824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	f003 0320 	and.w	r3, r3, #32
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00c      	beq.n	800f3dc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f003 0320 	and.w	r3, r3, #32
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d007      	beq.n	800f3dc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f06f 0220 	mvn.w	r2, #32
 800f3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 ff7a 	bl	80102d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3dc:	bf00      	nop
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d101      	bne.n	800f402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f3fe:	2302      	movs	r3, #2
 800f400:	e0ff      	b.n	800f602 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b14      	cmp	r3, #20
 800f40e:	f200 80f0 	bhi.w	800f5f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f412:	a201      	add	r2, pc, #4	; (adr r2, 800f418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f418:	0800f46d 	.word	0x0800f46d
 800f41c:	0800f5f3 	.word	0x0800f5f3
 800f420:	0800f5f3 	.word	0x0800f5f3
 800f424:	0800f5f3 	.word	0x0800f5f3
 800f428:	0800f4ad 	.word	0x0800f4ad
 800f42c:	0800f5f3 	.word	0x0800f5f3
 800f430:	0800f5f3 	.word	0x0800f5f3
 800f434:	0800f5f3 	.word	0x0800f5f3
 800f438:	0800f4ef 	.word	0x0800f4ef
 800f43c:	0800f5f3 	.word	0x0800f5f3
 800f440:	0800f5f3 	.word	0x0800f5f3
 800f444:	0800f5f3 	.word	0x0800f5f3
 800f448:	0800f52f 	.word	0x0800f52f
 800f44c:	0800f5f3 	.word	0x0800f5f3
 800f450:	0800f5f3 	.word	0x0800f5f3
 800f454:	0800f5f3 	.word	0x0800f5f3
 800f458:	0800f571 	.word	0x0800f571
 800f45c:	0800f5f3 	.word	0x0800f5f3
 800f460:	0800f5f3 	.word	0x0800f5f3
 800f464:	0800f5f3 	.word	0x0800f5f3
 800f468:	0800f5b1 	.word	0x0800f5b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	4618      	mov	r0, r3
 800f474:	f000 fa86 	bl	800f984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	699a      	ldr	r2, [r3, #24]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f042 0208 	orr.w	r2, r2, #8
 800f486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	699a      	ldr	r2, [r3, #24]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f022 0204 	bic.w	r2, r2, #4
 800f496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6999      	ldr	r1, [r3, #24]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	691a      	ldr	r2, [r3, #16]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	430a      	orrs	r2, r1
 800f4a8:	619a      	str	r2, [r3, #24]
      break;
 800f4aa:	e0a5      	b.n	800f5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68b9      	ldr	r1, [r7, #8]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 faf6 	bl	800faa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	699a      	ldr	r2, [r3, #24]
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	699a      	ldr	r2, [r3, #24]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6999      	ldr	r1, [r3, #24]
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	021a      	lsls	r2, r3, #8
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	430a      	orrs	r2, r1
 800f4ea:	619a      	str	r2, [r3, #24]
      break;
 800f4ec:	e084      	b.n	800f5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68b9      	ldr	r1, [r7, #8]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f000 fb5f 	bl	800fbb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	69da      	ldr	r2, [r3, #28]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f042 0208 	orr.w	r2, r2, #8
 800f508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	69da      	ldr	r2, [r3, #28]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f022 0204 	bic.w	r2, r2, #4
 800f518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	69d9      	ldr	r1, [r3, #28]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	691a      	ldr	r2, [r3, #16]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	430a      	orrs	r2, r1
 800f52a:	61da      	str	r2, [r3, #28]
      break;
 800f52c:	e064      	b.n	800f5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	4618      	mov	r0, r3
 800f536:	f000 fbc7 	bl	800fcc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69da      	ldr	r2, [r3, #28]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	69da      	ldr	r2, [r3, #28]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	69d9      	ldr	r1, [r3, #28]
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	021a      	lsls	r2, r3, #8
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	430a      	orrs	r2, r1
 800f56c:	61da      	str	r2, [r3, #28]
      break;
 800f56e:	e043      	b.n	800f5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	68b9      	ldr	r1, [r7, #8]
 800f576:	4618      	mov	r0, r3
 800f578:	f000 fc10 	bl	800fd9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f042 0208 	orr.w	r2, r2, #8
 800f58a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f022 0204 	bic.w	r2, r2, #4
 800f59a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	691a      	ldr	r2, [r3, #16]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	430a      	orrs	r2, r1
 800f5ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f5ae:	e023      	b.n	800f5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f000 fc54 	bl	800fe64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	691b      	ldr	r3, [r3, #16]
 800f5e6:	021a      	lsls	r2, r3, #8
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	430a      	orrs	r2, r1
 800f5ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f5f0:	e002      	b.n	800f5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f5f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f600:	7dfb      	ldrb	r3, [r7, #23]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3718      	adds	r7, #24
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop

0800f60c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f616:	2300      	movs	r3, #0
 800f618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f620:	2b01      	cmp	r3, #1
 800f622:	d101      	bne.n	800f628 <HAL_TIM_ConfigClockSource+0x1c>
 800f624:	2302      	movs	r3, #2
 800f626:	e0dc      	b.n	800f7e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2202      	movs	r2, #2
 800f634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	4b6a      	ldr	r3, [pc, #424]	; (800f7ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800f644:	4013      	ands	r3, r2
 800f646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f64e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a64      	ldr	r2, [pc, #400]	; (800f7f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	f000 80a9 	beq.w	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f664:	4a62      	ldr	r2, [pc, #392]	; (800f7f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f666:	4293      	cmp	r3, r2
 800f668:	f200 80ae 	bhi.w	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f66c:	4a61      	ldr	r2, [pc, #388]	; (800f7f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	f000 80a1 	beq.w	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f674:	4a5f      	ldr	r2, [pc, #380]	; (800f7f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f676:	4293      	cmp	r3, r2
 800f678:	f200 80a6 	bhi.w	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f67c:	4a5e      	ldr	r2, [pc, #376]	; (800f7f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	f000 8099 	beq.w	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f684:	4a5c      	ldr	r2, [pc, #368]	; (800f7f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f686:	4293      	cmp	r3, r2
 800f688:	f200 809e 	bhi.w	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f68c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f690:	f000 8091 	beq.w	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f694:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f698:	f200 8096 	bhi.w	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6a0:	f000 8089 	beq.w	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6a8:	f200 808e 	bhi.w	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6b0:	d03e      	beq.n	800f730 <HAL_TIM_ConfigClockSource+0x124>
 800f6b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6b6:	f200 8087 	bhi.w	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6be:	f000 8086 	beq.w	800f7ce <HAL_TIM_ConfigClockSource+0x1c2>
 800f6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6c6:	d87f      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6c8:	2b70      	cmp	r3, #112	; 0x70
 800f6ca:	d01a      	beq.n	800f702 <HAL_TIM_ConfigClockSource+0xf6>
 800f6cc:	2b70      	cmp	r3, #112	; 0x70
 800f6ce:	d87b      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6d0:	2b60      	cmp	r3, #96	; 0x60
 800f6d2:	d050      	beq.n	800f776 <HAL_TIM_ConfigClockSource+0x16a>
 800f6d4:	2b60      	cmp	r3, #96	; 0x60
 800f6d6:	d877      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6d8:	2b50      	cmp	r3, #80	; 0x50
 800f6da:	d03c      	beq.n	800f756 <HAL_TIM_ConfigClockSource+0x14a>
 800f6dc:	2b50      	cmp	r3, #80	; 0x50
 800f6de:	d873      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6e0:	2b40      	cmp	r3, #64	; 0x40
 800f6e2:	d058      	beq.n	800f796 <HAL_TIM_ConfigClockSource+0x18a>
 800f6e4:	2b40      	cmp	r3, #64	; 0x40
 800f6e6:	d86f      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6e8:	2b30      	cmp	r3, #48	; 0x30
 800f6ea:	d064      	beq.n	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6ec:	2b30      	cmp	r3, #48	; 0x30
 800f6ee:	d86b      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6f0:	2b20      	cmp	r3, #32
 800f6f2:	d060      	beq.n	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	d867      	bhi.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d05c      	beq.n	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f6fc:	2b10      	cmp	r3, #16
 800f6fe:	d05a      	beq.n	800f7b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f700:	e062      	b.n	800f7c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	6899      	ldr	r1, [r3, #8]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	f000 fc8b 	bl	801002c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	609a      	str	r2, [r3, #8]
      break;
 800f72e:	e04f      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	6899      	ldr	r1, [r3, #8]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	f000 fc74 	bl	801002c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	689a      	ldr	r2, [r3, #8]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f752:	609a      	str	r2, [r3, #8]
      break;
 800f754:	e03c      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6818      	ldr	r0, [r3, #0]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	6859      	ldr	r1, [r3, #4]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	461a      	mov	r2, r3
 800f764:	f000 fbe4 	bl	800ff30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2150      	movs	r1, #80	; 0x50
 800f76e:	4618      	mov	r0, r3
 800f770:	f000 fc3e 	bl	800fff0 <TIM_ITRx_SetConfig>
      break;
 800f774:	e02c      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6818      	ldr	r0, [r3, #0]
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	6859      	ldr	r1, [r3, #4]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	461a      	mov	r2, r3
 800f784:	f000 fc03 	bl	800ff8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2160      	movs	r1, #96	; 0x60
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 fc2e 	bl	800fff0 <TIM_ITRx_SetConfig>
      break;
 800f794:	e01c      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	6859      	ldr	r1, [r3, #4]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	f000 fbc4 	bl	800ff30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2140      	movs	r1, #64	; 0x40
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 fc1e 	bl	800fff0 <TIM_ITRx_SetConfig>
      break;
 800f7b4:	e00c      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	f000 fc15 	bl	800fff0 <TIM_ITRx_SetConfig>
      break;
 800f7c6:	e003      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f7cc:	e000      	b.n	800f7d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f7ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	ffceff88 	.word	0xffceff88
 800f7f0:	00100040 	.word	0x00100040
 800f7f4:	00100030 	.word	0x00100030
 800f7f8:	00100020 	.word	0x00100020

0800f7fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a46      	ldr	r2, [pc, #280]	; (800f964 <TIM_Base_SetConfig+0x12c>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d013      	beq.n	800f878 <TIM_Base_SetConfig+0x40>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f856:	d00f      	beq.n	800f878 <TIM_Base_SetConfig+0x40>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4a43      	ldr	r2, [pc, #268]	; (800f968 <TIM_Base_SetConfig+0x130>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d00b      	beq.n	800f878 <TIM_Base_SetConfig+0x40>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a42      	ldr	r2, [pc, #264]	; (800f96c <TIM_Base_SetConfig+0x134>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d007      	beq.n	800f878 <TIM_Base_SetConfig+0x40>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a41      	ldr	r2, [pc, #260]	; (800f970 <TIM_Base_SetConfig+0x138>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d003      	beq.n	800f878 <TIM_Base_SetConfig+0x40>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a40      	ldr	r2, [pc, #256]	; (800f974 <TIM_Base_SetConfig+0x13c>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d108      	bne.n	800f88a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f87e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	4313      	orrs	r3, r2
 800f888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4a35      	ldr	r2, [pc, #212]	; (800f964 <TIM_Base_SetConfig+0x12c>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d01f      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f898:	d01b      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a32      	ldr	r2, [pc, #200]	; (800f968 <TIM_Base_SetConfig+0x130>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d017      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a31      	ldr	r2, [pc, #196]	; (800f96c <TIM_Base_SetConfig+0x134>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d013      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4a30      	ldr	r2, [pc, #192]	; (800f970 <TIM_Base_SetConfig+0x138>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d00f      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4a2f      	ldr	r2, [pc, #188]	; (800f974 <TIM_Base_SetConfig+0x13c>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d00b      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a2e      	ldr	r2, [pc, #184]	; (800f978 <TIM_Base_SetConfig+0x140>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d007      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a2d      	ldr	r2, [pc, #180]	; (800f97c <TIM_Base_SetConfig+0x144>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d003      	beq.n	800f8d2 <TIM_Base_SetConfig+0x9a>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a2c      	ldr	r2, [pc, #176]	; (800f980 <TIM_Base_SetConfig+0x148>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d108      	bne.n	800f8e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	695b      	ldr	r3, [r3, #20]
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	689a      	ldr	r2, [r3, #8]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a16      	ldr	r2, [pc, #88]	; (800f964 <TIM_Base_SetConfig+0x12c>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d00f      	beq.n	800f930 <TIM_Base_SetConfig+0xf8>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a18      	ldr	r2, [pc, #96]	; (800f974 <TIM_Base_SetConfig+0x13c>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d00b      	beq.n	800f930 <TIM_Base_SetConfig+0xf8>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a17      	ldr	r2, [pc, #92]	; (800f978 <TIM_Base_SetConfig+0x140>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d007      	beq.n	800f930 <TIM_Base_SetConfig+0xf8>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a16      	ldr	r2, [pc, #88]	; (800f97c <TIM_Base_SetConfig+0x144>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d003      	beq.n	800f930 <TIM_Base_SetConfig+0xf8>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a15      	ldr	r2, [pc, #84]	; (800f980 <TIM_Base_SetConfig+0x148>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d103      	bne.n	800f938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	691a      	ldr	r2, [r3, #16]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2201      	movs	r2, #1
 800f93c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	691b      	ldr	r3, [r3, #16]
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	2b01      	cmp	r3, #1
 800f948:	d105      	bne.n	800f956 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	f023 0201 	bic.w	r2, r3, #1
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	611a      	str	r2, [r3, #16]
  }
}
 800f956:	bf00      	nop
 800f958:	3714      	adds	r7, #20
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	40010000 	.word	0x40010000
 800f968:	40000400 	.word	0x40000400
 800f96c:	40000800 	.word	0x40000800
 800f970:	40000c00 	.word	0x40000c00
 800f974:	40010400 	.word	0x40010400
 800f978:	40014000 	.word	0x40014000
 800f97c:	40014400 	.word	0x40014400
 800f980:	40014800 	.word	0x40014800

0800f984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f984:	b480      	push	{r7}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a1b      	ldr	r3, [r3, #32]
 800f998:	f023 0201 	bic.w	r2, r3, #1
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	699b      	ldr	r3, [r3, #24]
 800f9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	4b37      	ldr	r3, [pc, #220]	; (800fa8c <TIM_OC1_SetConfig+0x108>)
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f023 0303 	bic.w	r3, r3, #3
 800f9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	68fa      	ldr	r2, [r7, #12]
 800f9c2:	4313      	orrs	r3, r2
 800f9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f023 0302 	bic.w	r3, r3, #2
 800f9cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	689b      	ldr	r3, [r3, #8]
 800f9d2:	697a      	ldr	r2, [r7, #20]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a2d      	ldr	r2, [pc, #180]	; (800fa90 <TIM_OC1_SetConfig+0x10c>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d00f      	beq.n	800fa00 <TIM_OC1_SetConfig+0x7c>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a2c      	ldr	r2, [pc, #176]	; (800fa94 <TIM_OC1_SetConfig+0x110>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d00b      	beq.n	800fa00 <TIM_OC1_SetConfig+0x7c>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a2b      	ldr	r2, [pc, #172]	; (800fa98 <TIM_OC1_SetConfig+0x114>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d007      	beq.n	800fa00 <TIM_OC1_SetConfig+0x7c>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a2a      	ldr	r2, [pc, #168]	; (800fa9c <TIM_OC1_SetConfig+0x118>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d003      	beq.n	800fa00 <TIM_OC1_SetConfig+0x7c>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a29      	ldr	r2, [pc, #164]	; (800faa0 <TIM_OC1_SetConfig+0x11c>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d10c      	bne.n	800fa1a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f023 0308 	bic.w	r3, r3, #8
 800fa06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	f023 0304 	bic.w	r3, r3, #4
 800fa18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a1c      	ldr	r2, [pc, #112]	; (800fa90 <TIM_OC1_SetConfig+0x10c>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d00f      	beq.n	800fa42 <TIM_OC1_SetConfig+0xbe>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a1b      	ldr	r2, [pc, #108]	; (800fa94 <TIM_OC1_SetConfig+0x110>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d00b      	beq.n	800fa42 <TIM_OC1_SetConfig+0xbe>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a1a      	ldr	r2, [pc, #104]	; (800fa98 <TIM_OC1_SetConfig+0x114>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d007      	beq.n	800fa42 <TIM_OC1_SetConfig+0xbe>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a19      	ldr	r2, [pc, #100]	; (800fa9c <TIM_OC1_SetConfig+0x118>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d003      	beq.n	800fa42 <TIM_OC1_SetConfig+0xbe>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a18      	ldr	r2, [pc, #96]	; (800faa0 <TIM_OC1_SetConfig+0x11c>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d111      	bne.n	800fa66 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	695b      	ldr	r3, [r3, #20]
 800fa56:	693a      	ldr	r2, [r7, #16]
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	693a      	ldr	r2, [r7, #16]
 800fa6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	685a      	ldr	r2, [r3, #4]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	697a      	ldr	r2, [r7, #20]
 800fa7e:	621a      	str	r2, [r3, #32]
}
 800fa80:	bf00      	nop
 800fa82:	371c      	adds	r7, #28
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	fffeff8f 	.word	0xfffeff8f
 800fa90:	40010000 	.word	0x40010000
 800fa94:	40010400 	.word	0x40010400
 800fa98:	40014000 	.word	0x40014000
 800fa9c:	40014400 	.word	0x40014400
 800faa0:	40014800 	.word	0x40014800

0800faa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b087      	sub	sp, #28
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a1b      	ldr	r3, [r3, #32]
 800fab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a1b      	ldr	r3, [r3, #32]
 800fab8:	f023 0210 	bic.w	r2, r3, #16
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	4b34      	ldr	r3, [pc, #208]	; (800fba0 <TIM_OC2_SetConfig+0xfc>)
 800fad0:	4013      	ands	r3, r2
 800fad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	021b      	lsls	r3, r3, #8
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	4313      	orrs	r3, r2
 800fae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f023 0320 	bic.w	r3, r3, #32
 800faee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	011b      	lsls	r3, r3, #4
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	4313      	orrs	r3, r2
 800fafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a29      	ldr	r2, [pc, #164]	; (800fba4 <TIM_OC2_SetConfig+0x100>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d003      	beq.n	800fb0c <TIM_OC2_SetConfig+0x68>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a28      	ldr	r2, [pc, #160]	; (800fba8 <TIM_OC2_SetConfig+0x104>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d10d      	bne.n	800fb28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	011b      	lsls	r3, r3, #4
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a1e      	ldr	r2, [pc, #120]	; (800fba4 <TIM_OC2_SetConfig+0x100>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d00f      	beq.n	800fb50 <TIM_OC2_SetConfig+0xac>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a1d      	ldr	r2, [pc, #116]	; (800fba8 <TIM_OC2_SetConfig+0x104>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d00b      	beq.n	800fb50 <TIM_OC2_SetConfig+0xac>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a1c      	ldr	r2, [pc, #112]	; (800fbac <TIM_OC2_SetConfig+0x108>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d007      	beq.n	800fb50 <TIM_OC2_SetConfig+0xac>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a1b      	ldr	r2, [pc, #108]	; (800fbb0 <TIM_OC2_SetConfig+0x10c>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d003      	beq.n	800fb50 <TIM_OC2_SetConfig+0xac>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a1a      	ldr	r2, [pc, #104]	; (800fbb4 <TIM_OC2_SetConfig+0x110>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d113      	bne.n	800fb78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	693a      	ldr	r2, [r7, #16]
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	685a      	ldr	r2, [r3, #4]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	621a      	str	r2, [r3, #32]
}
 800fb92:	bf00      	nop
 800fb94:	371c      	adds	r7, #28
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	feff8fff 	.word	0xfeff8fff
 800fba4:	40010000 	.word	0x40010000
 800fba8:	40010400 	.word	0x40010400
 800fbac:	40014000 	.word	0x40014000
 800fbb0:	40014400 	.word	0x40014400
 800fbb4:	40014800 	.word	0x40014800

0800fbb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b087      	sub	sp, #28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a1b      	ldr	r3, [r3, #32]
 800fbc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6a1b      	ldr	r3, [r3, #32]
 800fbcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	4b33      	ldr	r3, [pc, #204]	; (800fcb0 <TIM_OC3_SetConfig+0xf8>)
 800fbe4:	4013      	ands	r3, r2
 800fbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f023 0303 	bic.w	r3, r3, #3
 800fbee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	021b      	lsls	r3, r3, #8
 800fc08:	697a      	ldr	r2, [r7, #20]
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a28      	ldr	r2, [pc, #160]	; (800fcb4 <TIM_OC3_SetConfig+0xfc>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d003      	beq.n	800fc1e <TIM_OC3_SetConfig+0x66>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4a27      	ldr	r2, [pc, #156]	; (800fcb8 <TIM_OC3_SetConfig+0x100>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d10d      	bne.n	800fc3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	021b      	lsls	r3, r3, #8
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a1d      	ldr	r2, [pc, #116]	; (800fcb4 <TIM_OC3_SetConfig+0xfc>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d00f      	beq.n	800fc62 <TIM_OC3_SetConfig+0xaa>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4a1c      	ldr	r2, [pc, #112]	; (800fcb8 <TIM_OC3_SetConfig+0x100>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d00b      	beq.n	800fc62 <TIM_OC3_SetConfig+0xaa>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4a1b      	ldr	r2, [pc, #108]	; (800fcbc <TIM_OC3_SetConfig+0x104>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d007      	beq.n	800fc62 <TIM_OC3_SetConfig+0xaa>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4a1a      	ldr	r2, [pc, #104]	; (800fcc0 <TIM_OC3_SetConfig+0x108>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d003      	beq.n	800fc62 <TIM_OC3_SetConfig+0xaa>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4a19      	ldr	r2, [pc, #100]	; (800fcc4 <TIM_OC3_SetConfig+0x10c>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d113      	bne.n	800fc8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	011b      	lsls	r3, r3, #4
 800fc78:	693a      	ldr	r2, [r7, #16]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	011b      	lsls	r3, r3, #4
 800fc84:	693a      	ldr	r2, [r7, #16]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	685a      	ldr	r2, [r3, #4]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	621a      	str	r2, [r3, #32]
}
 800fca4:	bf00      	nop
 800fca6:	371c      	adds	r7, #28
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr
 800fcb0:	fffeff8f 	.word	0xfffeff8f
 800fcb4:	40010000 	.word	0x40010000
 800fcb8:	40010400 	.word	0x40010400
 800fcbc:	40014000 	.word	0x40014000
 800fcc0:	40014400 	.word	0x40014400
 800fcc4:	40014800 	.word	0x40014800

0800fcc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b087      	sub	sp, #28
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a1b      	ldr	r3, [r3, #32]
 800fcd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6a1b      	ldr	r3, [r3, #32]
 800fcdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	69db      	ldr	r3, [r3, #28]
 800fcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	4b24      	ldr	r3, [pc, #144]	; (800fd84 <TIM_OC4_SetConfig+0xbc>)
 800fcf4:	4013      	ands	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	021b      	lsls	r3, r3, #8
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	031b      	lsls	r3, r3, #12
 800fd1a:	693a      	ldr	r2, [r7, #16]
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a19      	ldr	r2, [pc, #100]	; (800fd88 <TIM_OC4_SetConfig+0xc0>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d00f      	beq.n	800fd48 <TIM_OC4_SetConfig+0x80>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4a18      	ldr	r2, [pc, #96]	; (800fd8c <TIM_OC4_SetConfig+0xc4>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d00b      	beq.n	800fd48 <TIM_OC4_SetConfig+0x80>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4a17      	ldr	r2, [pc, #92]	; (800fd90 <TIM_OC4_SetConfig+0xc8>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d007      	beq.n	800fd48 <TIM_OC4_SetConfig+0x80>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a16      	ldr	r2, [pc, #88]	; (800fd94 <TIM_OC4_SetConfig+0xcc>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d003      	beq.n	800fd48 <TIM_OC4_SetConfig+0x80>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a15      	ldr	r2, [pc, #84]	; (800fd98 <TIM_OC4_SetConfig+0xd0>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d109      	bne.n	800fd5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	695b      	ldr	r3, [r3, #20]
 800fd54:	019b      	lsls	r3, r3, #6
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	697a      	ldr	r2, [r7, #20]
 800fd60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	621a      	str	r2, [r3, #32]
}
 800fd76:	bf00      	nop
 800fd78:	371c      	adds	r7, #28
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	feff8fff 	.word	0xfeff8fff
 800fd88:	40010000 	.word	0x40010000
 800fd8c:	40010400 	.word	0x40010400
 800fd90:	40014000 	.word	0x40014000
 800fd94:	40014400 	.word	0x40014400
 800fd98:	40014800 	.word	0x40014800

0800fd9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a1b      	ldr	r3, [r3, #32]
 800fdb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	4b21      	ldr	r3, [pc, #132]	; (800fe4c <TIM_OC5_SetConfig+0xb0>)
 800fdc8:	4013      	ands	r3, r2
 800fdca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	041b      	lsls	r3, r3, #16
 800fde4:	693a      	ldr	r2, [r7, #16]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a18      	ldr	r2, [pc, #96]	; (800fe50 <TIM_OC5_SetConfig+0xb4>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d00f      	beq.n	800fe12 <TIM_OC5_SetConfig+0x76>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4a17      	ldr	r2, [pc, #92]	; (800fe54 <TIM_OC5_SetConfig+0xb8>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d00b      	beq.n	800fe12 <TIM_OC5_SetConfig+0x76>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a16      	ldr	r2, [pc, #88]	; (800fe58 <TIM_OC5_SetConfig+0xbc>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d007      	beq.n	800fe12 <TIM_OC5_SetConfig+0x76>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a15      	ldr	r2, [pc, #84]	; (800fe5c <TIM_OC5_SetConfig+0xc0>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d003      	beq.n	800fe12 <TIM_OC5_SetConfig+0x76>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4a14      	ldr	r2, [pc, #80]	; (800fe60 <TIM_OC5_SetConfig+0xc4>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d109      	bne.n	800fe26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	021b      	lsls	r3, r3, #8
 800fe20:	697a      	ldr	r2, [r7, #20]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	693a      	ldr	r2, [r7, #16]
 800fe3e:	621a      	str	r2, [r3, #32]
}
 800fe40:	bf00      	nop
 800fe42:	371c      	adds	r7, #28
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	fffeff8f 	.word	0xfffeff8f
 800fe50:	40010000 	.word	0x40010000
 800fe54:	40010400 	.word	0x40010400
 800fe58:	40014000 	.word	0x40014000
 800fe5c:	40014400 	.word	0x40014400
 800fe60:	40014800 	.word	0x40014800

0800fe64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b087      	sub	sp, #28
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6a1b      	ldr	r3, [r3, #32]
 800fe78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4b22      	ldr	r3, [pc, #136]	; (800ff18 <TIM_OC6_SetConfig+0xb4>)
 800fe90:	4013      	ands	r3, r2
 800fe92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	021b      	lsls	r3, r3, #8
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	051b      	lsls	r3, r3, #20
 800feae:	693a      	ldr	r2, [r7, #16]
 800feb0:	4313      	orrs	r3, r2
 800feb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	4a19      	ldr	r2, [pc, #100]	; (800ff1c <TIM_OC6_SetConfig+0xb8>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d00f      	beq.n	800fedc <TIM_OC6_SetConfig+0x78>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4a18      	ldr	r2, [pc, #96]	; (800ff20 <TIM_OC6_SetConfig+0xbc>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d00b      	beq.n	800fedc <TIM_OC6_SetConfig+0x78>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4a17      	ldr	r2, [pc, #92]	; (800ff24 <TIM_OC6_SetConfig+0xc0>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d007      	beq.n	800fedc <TIM_OC6_SetConfig+0x78>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4a16      	ldr	r2, [pc, #88]	; (800ff28 <TIM_OC6_SetConfig+0xc4>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d003      	beq.n	800fedc <TIM_OC6_SetConfig+0x78>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4a15      	ldr	r2, [pc, #84]	; (800ff2c <TIM_OC6_SetConfig+0xc8>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d109      	bne.n	800fef0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	695b      	ldr	r3, [r3, #20]
 800fee8:	029b      	lsls	r3, r3, #10
 800feea:	697a      	ldr	r2, [r7, #20]
 800feec:	4313      	orrs	r3, r2
 800feee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	697a      	ldr	r2, [r7, #20]
 800fef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685a      	ldr	r2, [r3, #4]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	693a      	ldr	r2, [r7, #16]
 800ff08:	621a      	str	r2, [r3, #32]
}
 800ff0a:	bf00      	nop
 800ff0c:	371c      	adds	r7, #28
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	feff8fff 	.word	0xfeff8fff
 800ff1c:	40010000 	.word	0x40010000
 800ff20:	40010400 	.word	0x40010400
 800ff24:	40014000 	.word	0x40014000
 800ff28:	40014400 	.word	0x40014400
 800ff2c:	40014800 	.word	0x40014800

0800ff30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b087      	sub	sp, #28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	6a1b      	ldr	r3, [r3, #32]
 800ff46:	f023 0201 	bic.w	r2, r3, #1
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	699b      	ldr	r3, [r3, #24]
 800ff52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ff5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	011b      	lsls	r3, r3, #4
 800ff60:	693a      	ldr	r2, [r7, #16]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	f023 030a 	bic.w	r3, r3, #10
 800ff6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ff6e:	697a      	ldr	r2, [r7, #20]
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	693a      	ldr	r2, [r7, #16]
 800ff7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	697a      	ldr	r2, [r7, #20]
 800ff80:	621a      	str	r2, [r3, #32]
}
 800ff82:	bf00      	nop
 800ff84:	371c      	adds	r7, #28
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b087      	sub	sp, #28
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	60f8      	str	r0, [r7, #12]
 800ff96:	60b9      	str	r1, [r7, #8]
 800ff98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6a1b      	ldr	r3, [r3, #32]
 800ffa4:	f023 0210 	bic.w	r2, r3, #16
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	699b      	ldr	r3, [r3, #24]
 800ffb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ffb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	031b      	lsls	r3, r3, #12
 800ffbe:	693a      	ldr	r2, [r7, #16]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ffca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	011b      	lsls	r3, r3, #4
 800ffd0:	697a      	ldr	r2, [r7, #20]
 800ffd2:	4313      	orrs	r3, r2
 800ffd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	693a      	ldr	r2, [r7, #16]
 800ffda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	697a      	ldr	r2, [r7, #20]
 800ffe0:	621a      	str	r2, [r3, #32]
}
 800ffe2:	bf00      	nop
 800ffe4:	371c      	adds	r7, #28
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
	...

0800fff0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	4b09      	ldr	r3, [pc, #36]	; (8010028 <TIM_ITRx_SetConfig+0x38>)
 8010004:	4013      	ands	r3, r2
 8010006:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	4313      	orrs	r3, r2
 801000e:	f043 0307 	orr.w	r3, r3, #7
 8010012:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	609a      	str	r2, [r3, #8]
}
 801001a:	bf00      	nop
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	ffcfff8f 	.word	0xffcfff8f

0801002c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801002c:	b480      	push	{r7}
 801002e:	b087      	sub	sp, #28
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	021a      	lsls	r2, r3, #8
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	431a      	orrs	r2, r3
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	4313      	orrs	r3, r2
 8010054:	697a      	ldr	r2, [r7, #20]
 8010056:	4313      	orrs	r3, r2
 8010058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	609a      	str	r2, [r3, #8]
}
 8010060:	bf00      	nop
 8010062:	371c      	adds	r7, #28
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801006c:	b480      	push	{r7}
 801006e:	b087      	sub	sp, #28
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	f003 031f 	and.w	r3, r3, #31
 801007e:	2201      	movs	r2, #1
 8010080:	fa02 f303 	lsl.w	r3, r2, r3
 8010084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6a1a      	ldr	r2, [r3, #32]
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	43db      	mvns	r3, r3
 801008e:	401a      	ands	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6a1a      	ldr	r2, [r3, #32]
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	f003 031f 	and.w	r3, r3, #31
 801009e:	6879      	ldr	r1, [r7, #4]
 80100a0:	fa01 f303 	lsl.w	r3, r1, r3
 80100a4:	431a      	orrs	r2, r3
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	621a      	str	r2, [r3, #32]
}
 80100aa:	bf00      	nop
 80100ac:	371c      	adds	r7, #28
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d101      	bne.n	80100d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80100cc:	2302      	movs	r3, #2
 80100ce:	e06d      	b.n	80101ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2202      	movs	r2, #2
 80100dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a30      	ldr	r2, [pc, #192]	; (80101b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d004      	beq.n	8010104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a2f      	ldr	r2, [pc, #188]	; (80101bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d108      	bne.n	8010116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801010a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	4313      	orrs	r3, r2
 8010114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801011c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	4313      	orrs	r3, r2
 8010126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a20      	ldr	r2, [pc, #128]	; (80101b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d022      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010142:	d01d      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a1d      	ldr	r2, [pc, #116]	; (80101c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d018      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4a1c      	ldr	r2, [pc, #112]	; (80101c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d013      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4a1a      	ldr	r2, [pc, #104]	; (80101c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d00e      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a15      	ldr	r2, [pc, #84]	; (80101bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d009      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a16      	ldr	r2, [pc, #88]	; (80101cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d004      	beq.n	8010180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a15      	ldr	r2, [pc, #84]	; (80101d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d10c      	bne.n	801019a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	689b      	ldr	r3, [r3, #8]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	4313      	orrs	r3, r2
 8010190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2201      	movs	r2, #1
 801019e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3714      	adds	r7, #20
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr
 80101b8:	40010000 	.word	0x40010000
 80101bc:	40010400 	.word	0x40010400
 80101c0:	40000400 	.word	0x40000400
 80101c4:	40000800 	.word	0x40000800
 80101c8:	40000c00 	.word	0x40000c00
 80101cc:	40001800 	.word	0x40001800
 80101d0:	40014000 	.word	0x40014000

080101d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80101de:	2300      	movs	r3, #0
 80101e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d101      	bne.n	80101f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80101ec:	2302      	movs	r3, #2
 80101ee:	e065      	b.n	80102bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2201      	movs	r2, #1
 80101f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	4313      	orrs	r3, r2
 8010204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	4313      	orrs	r3, r2
 8010212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	4313      	orrs	r3, r2
 8010220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4313      	orrs	r3, r2
 801022e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	4313      	orrs	r3, r2
 801023c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	695b      	ldr	r3, [r3, #20]
 8010248:	4313      	orrs	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010256:	4313      	orrs	r3, r2
 8010258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	699b      	ldr	r3, [r3, #24]
 8010264:	041b      	lsls	r3, r3, #16
 8010266:	4313      	orrs	r3, r2
 8010268:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4a16      	ldr	r2, [pc, #88]	; (80102c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d004      	beq.n	801027e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4a14      	ldr	r2, [pc, #80]	; (80102cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d115      	bne.n	80102aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010288:	051b      	lsls	r3, r3, #20
 801028a:	4313      	orrs	r3, r2
 801028c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	69db      	ldr	r3, [r3, #28]
 8010298:	4313      	orrs	r3, r2
 801029a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	4313      	orrs	r3, r2
 80102a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80102ba:	2300      	movs	r3, #0
}
 80102bc:	4618      	mov	r0, r3
 80102be:	3714      	adds	r7, #20
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	40010000 	.word	0x40010000
 80102cc:	40010400 	.word	0x40010400

080102d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80102d8:	bf00      	nop
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80102ec:	bf00      	nop
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010300:	bf00      	nop
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d101      	bne.n	801031e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801031a:	2301      	movs	r3, #1
 801031c:	e042      	b.n	80103a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010324:	2b00      	cmp	r3, #0
 8010326:	d106      	bne.n	8010336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2200      	movs	r2, #0
 801032c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7f3 fbf7 	bl	8003b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2224      	movs	r2, #36	; 0x24
 801033a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f022 0201 	bic.w	r2, r2, #1
 801034c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010352:	2b00      	cmp	r3, #0
 8010354:	d002      	beq.n	801035c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f001 fc42 	bl	8011be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 fed7 	bl	8011110 <UART_SetConfig>
 8010362:	4603      	mov	r3, r0
 8010364:	2b01      	cmp	r3, #1
 8010366:	d101      	bne.n	801036c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010368:	2301      	movs	r3, #1
 801036a:	e01b      	b.n	80103a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	685a      	ldr	r2, [r3, #4]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801037a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689a      	ldr	r2, [r3, #8]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801038a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f042 0201 	orr.w	r2, r2, #1
 801039a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f001 fcc1 	bl	8011d24 <UART_CheckIdleState>
 80103a2:	4603      	mov	r3, r0
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b08a      	sub	sp, #40	; 0x28
 80103b0:	af02      	add	r7, sp, #8
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	4613      	mov	r3, r2
 80103ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103c2:	2b20      	cmp	r3, #32
 80103c4:	d17b      	bne.n	80104be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d002      	beq.n	80103d2 <HAL_UART_Transmit+0x26>
 80103cc:	88fb      	ldrh	r3, [r7, #6]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d101      	bne.n	80103d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80103d2:	2301      	movs	r3, #1
 80103d4:	e074      	b.n	80104c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2221      	movs	r2, #33	; 0x21
 80103e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103e6:	f7f3 ff1b 	bl	8004220 <HAL_GetTick>
 80103ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	88fa      	ldrh	r2, [r7, #6]
 80103f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	88fa      	ldrh	r2, [r7, #6]
 80103f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010404:	d108      	bne.n	8010418 <HAL_UART_Transmit+0x6c>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	691b      	ldr	r3, [r3, #16]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d104      	bne.n	8010418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801040e:	2300      	movs	r3, #0
 8010410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	61bb      	str	r3, [r7, #24]
 8010416:	e003      	b.n	8010420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801041c:	2300      	movs	r3, #0
 801041e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010420:	e030      	b.n	8010484 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	2200      	movs	r2, #0
 801042a:	2180      	movs	r1, #128	; 0x80
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f001 fd23 	bl	8011e78 <UART_WaitOnFlagUntilTimeout>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d005      	beq.n	8010444 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2220      	movs	r2, #32
 801043c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010440:	2303      	movs	r3, #3
 8010442:	e03d      	b.n	80104c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d10b      	bne.n	8010462 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	881b      	ldrh	r3, [r3, #0]
 801044e:	461a      	mov	r2, r3
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010458:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	3302      	adds	r3, #2
 801045e:	61bb      	str	r3, [r7, #24]
 8010460:	e007      	b.n	8010472 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	781a      	ldrb	r2, [r3, #0]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	3301      	adds	r3, #1
 8010470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010478:	b29b      	uxth	r3, r3
 801047a:	3b01      	subs	r3, #1
 801047c:	b29a      	uxth	r2, r3
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801048a:	b29b      	uxth	r3, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1c8      	bne.n	8010422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	2200      	movs	r2, #0
 8010498:	2140      	movs	r1, #64	; 0x40
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	f001 fcec 	bl	8011e78 <UART_WaitOnFlagUntilTimeout>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d005      	beq.n	80104b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2220      	movs	r2, #32
 80104aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80104ae:	2303      	movs	r3, #3
 80104b0:	e006      	b.n	80104c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2220      	movs	r2, #32
 80104b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80104ba:	2300      	movs	r3, #0
 80104bc:	e000      	b.n	80104c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80104be:	2302      	movs	r3, #2
  }
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3720      	adds	r7, #32
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08a      	sub	sp, #40	; 0x28
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	603b      	str	r3, [r7, #0]
 80104d4:	4613      	mov	r3, r2
 80104d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104de:	2b20      	cmp	r3, #32
 80104e0:	f040 80b5 	bne.w	801064e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <HAL_UART_Receive+0x28>
 80104ea:	88fb      	ldrh	r3, [r7, #6]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d101      	bne.n	80104f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80104f0:	2301      	movs	r3, #1
 80104f2:	e0ad      	b.n	8010650 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2222      	movs	r2, #34	; 0x22
 8010500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2200      	movs	r2, #0
 8010508:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801050a:	f7f3 fe89 	bl	8004220 <HAL_GetTick>
 801050e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	88fa      	ldrh	r2, [r7, #6]
 8010514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	88fa      	ldrh	r2, [r7, #6]
 801051c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	689b      	ldr	r3, [r3, #8]
 8010524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010528:	d10e      	bne.n	8010548 <HAL_UART_Receive+0x80>
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d105      	bne.n	801053e <HAL_UART_Receive+0x76>
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801053c:	e02d      	b.n	801059a <HAL_UART_Receive+0xd2>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	22ff      	movs	r2, #255	; 0xff
 8010542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010546:	e028      	b.n	801059a <HAL_UART_Receive+0xd2>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d10d      	bne.n	801056c <HAL_UART_Receive+0xa4>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	691b      	ldr	r3, [r3, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d104      	bne.n	8010562 <HAL_UART_Receive+0x9a>
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	22ff      	movs	r2, #255	; 0xff
 801055c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010560:	e01b      	b.n	801059a <HAL_UART_Receive+0xd2>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	227f      	movs	r2, #127	; 0x7f
 8010566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801056a:	e016      	b.n	801059a <HAL_UART_Receive+0xd2>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010574:	d10d      	bne.n	8010592 <HAL_UART_Receive+0xca>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d104      	bne.n	8010588 <HAL_UART_Receive+0xc0>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	227f      	movs	r2, #127	; 0x7f
 8010582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010586:	e008      	b.n	801059a <HAL_UART_Receive+0xd2>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	223f      	movs	r2, #63	; 0x3f
 801058c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010590:	e003      	b.n	801059a <HAL_UART_Receive+0xd2>
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2200      	movs	r2, #0
 8010596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105aa:	d108      	bne.n	80105be <HAL_UART_Receive+0xf6>
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	691b      	ldr	r3, [r3, #16]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d104      	bne.n	80105be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80105b4:	2300      	movs	r3, #0
 80105b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	61bb      	str	r3, [r7, #24]
 80105bc:	e003      	b.n	80105c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80105c6:	e036      	b.n	8010636 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	9300      	str	r3, [sp, #0]
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	2200      	movs	r2, #0
 80105d0:	2120      	movs	r1, #32
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f001 fc50 	bl	8011e78 <UART_WaitOnFlagUntilTimeout>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d005      	beq.n	80105ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2220      	movs	r2, #32
 80105e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80105e6:	2303      	movs	r3, #3
 80105e8:	e032      	b.n	8010650 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d10c      	bne.n	801060a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	8a7b      	ldrh	r3, [r7, #18]
 80105fa:	4013      	ands	r3, r2
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	3302      	adds	r3, #2
 8010606:	61bb      	str	r3, [r7, #24]
 8010608:	e00c      	b.n	8010624 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010610:	b2da      	uxtb	r2, r3
 8010612:	8a7b      	ldrh	r3, [r7, #18]
 8010614:	b2db      	uxtb	r3, r3
 8010616:	4013      	ands	r3, r2
 8010618:	b2da      	uxtb	r2, r3
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	3301      	adds	r3, #1
 8010622:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801062a:	b29b      	uxth	r3, r3
 801062c:	3b01      	subs	r3, #1
 801062e:	b29a      	uxth	r2, r3
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801063c:	b29b      	uxth	r3, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	d1c2      	bne.n	80105c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2220      	movs	r2, #32
 8010646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801064a:	2300      	movs	r3, #0
 801064c:	e000      	b.n	8010650 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801064e:	2302      	movs	r3, #2
  }
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08a      	sub	sp, #40	; 0x28
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4613      	mov	r3, r2
 8010664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801066c:	2b20      	cmp	r3, #32
 801066e:	d137      	bne.n	80106e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d002      	beq.n	801067c <HAL_UART_Receive_IT+0x24>
 8010676:	88fb      	ldrh	r3, [r7, #6]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801067c:	2301      	movs	r3, #1
 801067e:	e030      	b.n	80106e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2200      	movs	r2, #0
 8010684:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a18      	ldr	r2, [pc, #96]	; (80106ec <HAL_UART_Receive_IT+0x94>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d01f      	beq.n	80106d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801069a:	2b00      	cmp	r3, #0
 801069c:	d018      	beq.n	80106d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	e853 3f00 	ldrex	r3, [r3]
 80106aa:	613b      	str	r3, [r7, #16]
   return(result);
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106b2:	627b      	str	r3, [r7, #36]	; 0x24
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	461a      	mov	r2, r3
 80106ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106bc:	623b      	str	r3, [r7, #32]
 80106be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c0:	69f9      	ldr	r1, [r7, #28]
 80106c2:	6a3a      	ldr	r2, [r7, #32]
 80106c4:	e841 2300 	strex	r3, r2, [r1]
 80106c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1e6      	bne.n	801069e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80106d0:	88fb      	ldrh	r3, [r7, #6]
 80106d2:	461a      	mov	r2, r3
 80106d4:	68b9      	ldr	r1, [r7, #8]
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f001 fc3c 	bl	8011f54 <UART_Start_Receive_IT>
 80106dc:	4603      	mov	r3, r0
 80106de:	e000      	b.n	80106e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80106e0:	2302      	movs	r3, #2
  }
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3728      	adds	r7, #40	; 0x28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	58000c00 	.word	0x58000c00

080106f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b08a      	sub	sp, #40	; 0x28
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010704:	2b20      	cmp	r3, #32
 8010706:	d167      	bne.n	80107d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d002      	beq.n	8010714 <HAL_UART_Transmit_DMA+0x24>
 801070e:	88fb      	ldrh	r3, [r7, #6]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d101      	bne.n	8010718 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	e060      	b.n	80107da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	88fa      	ldrh	r2, [r7, #6]
 8010722:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	88fa      	ldrh	r2, [r7, #6]
 801072a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2221      	movs	r2, #33	; 0x21
 801073a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010742:	2b00      	cmp	r3, #0
 8010744:	d028      	beq.n	8010798 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801074a:	4a26      	ldr	r2, [pc, #152]	; (80107e4 <HAL_UART_Transmit_DMA+0xf4>)
 801074c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010752:	4a25      	ldr	r2, [pc, #148]	; (80107e8 <HAL_UART_Transmit_DMA+0xf8>)
 8010754:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801075a:	4a24      	ldr	r2, [pc, #144]	; (80107ec <HAL_UART_Transmit_DMA+0xfc>)
 801075c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010762:	2200      	movs	r2, #0
 8010764:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801076e:	4619      	mov	r1, r3
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	3328      	adds	r3, #40	; 0x28
 8010776:	461a      	mov	r2, r3
 8010778:	88fb      	ldrh	r3, [r7, #6]
 801077a:	f7f6 f9d5 	bl	8006b28 <HAL_DMA_Start_IT>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d009      	beq.n	8010798 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2210      	movs	r2, #16
 8010788:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2220      	movs	r2, #32
 8010790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010794:	2301      	movs	r3, #1
 8010796:	e020      	b.n	80107da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2240      	movs	r2, #64	; 0x40
 801079e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	3308      	adds	r3, #8
 80107a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	e853 3f00 	ldrex	r3, [r3]
 80107ae:	613b      	str	r3, [r7, #16]
   return(result);
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107b6:	627b      	str	r3, [r7, #36]	; 0x24
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3308      	adds	r3, #8
 80107be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c0:	623a      	str	r2, [r7, #32]
 80107c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c4:	69f9      	ldr	r1, [r7, #28]
 80107c6:	6a3a      	ldr	r2, [r7, #32]
 80107c8:	e841 2300 	strex	r3, r2, [r1]
 80107cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e5      	bne.n	80107a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80107d4:	2300      	movs	r3, #0
 80107d6:	e000      	b.n	80107da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80107d8:	2302      	movs	r3, #2
  }
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3728      	adds	r7, #40	; 0x28
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	080122e9 	.word	0x080122e9
 80107e8:	0801237f 	.word	0x0801237f
 80107ec:	0801239b 	.word	0x0801239b

080107f0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b09a      	sub	sp, #104	; 0x68
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010800:	e853 3f00 	ldrex	r3, [r3]
 8010804:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801080c:	667b      	str	r3, [r7, #100]	; 0x64
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010816:	657b      	str	r3, [r7, #84]	; 0x54
 8010818:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801081c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801081e:	e841 2300 	strex	r3, r2, [r1]
 8010822:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1e6      	bne.n	80107f8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3308      	adds	r3, #8
 8010830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010834:	e853 3f00 	ldrex	r3, [r3]
 8010838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801083a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801083c:	4b46      	ldr	r3, [pc, #280]	; (8010958 <HAL_UART_AbortReceive+0x168>)
 801083e:	4013      	ands	r3, r2
 8010840:	663b      	str	r3, [r7, #96]	; 0x60
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3308      	adds	r3, #8
 8010848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801084a:	643a      	str	r2, [r7, #64]	; 0x40
 801084c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010852:	e841 2300 	strex	r3, r2, [r1]
 8010856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1e5      	bne.n	801082a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010862:	2b01      	cmp	r3, #1
 8010864:	d118      	bne.n	8010898 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801086c:	6a3b      	ldr	r3, [r7, #32]
 801086e:	e853 3f00 	ldrex	r3, [r3]
 8010872:	61fb      	str	r3, [r7, #28]
   return(result);
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	f023 0310 	bic.w	r3, r3, #16
 801087a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	461a      	mov	r2, r3
 8010882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010886:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801088a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801088c:	e841 2300 	strex	r3, r2, [r1]
 8010890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1e6      	bne.n	8010866 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a2:	2b40      	cmp	r3, #64	; 0x40
 80108a4:	d13b      	bne.n	801091e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	3308      	adds	r3, #8
 80108ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	e853 3f00 	ldrex	r3, [r3]
 80108b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	3308      	adds	r3, #8
 80108c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108c6:	61ba      	str	r2, [r7, #24]
 80108c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ca:	6979      	ldr	r1, [r7, #20]
 80108cc:	69ba      	ldr	r2, [r7, #24]
 80108ce:	e841 2300 	strex	r3, r2, [r1]
 80108d2:	613b      	str	r3, [r7, #16]
   return(result);
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1e5      	bne.n	80108a6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d01c      	beq.n	801091e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ea:	2200      	movs	r2, #0
 80108ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f6 fb81 	bl	8006ffc <HAL_DMA_Abort>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00e      	beq.n	801091e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010906:	4618      	mov	r0, r3
 8010908:	f7f8 f806 	bl	8008918 <HAL_DMA_GetError>
 801090c:	4603      	mov	r3, r0
 801090e:	2b20      	cmp	r3, #32
 8010910:	d105      	bne.n	801091e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2210      	movs	r2, #16
 8010916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801091a:	2303      	movs	r3, #3
 801091c:	e017      	b.n	801094e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	220f      	movs	r2, #15
 801092c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	699a      	ldr	r2, [r3, #24]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f042 0208 	orr.w	r2, r2, #8
 801093c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2220      	movs	r2, #32
 8010942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801094c:	2300      	movs	r3, #0
}
 801094e:	4618      	mov	r0, r3
 8010950:	3768      	adds	r7, #104	; 0x68
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	effffffe 	.word	0xeffffffe

0801095c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b0ba      	sub	sp, #232	; 0xe8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	69db      	ldr	r3, [r3, #28]
 801096a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010982:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010986:	f640 030f 	movw	r3, #2063	; 0x80f
 801098a:	4013      	ands	r3, r2
 801098c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010994:	2b00      	cmp	r3, #0
 8010996:	d11b      	bne.n	80109d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801099c:	f003 0320 	and.w	r3, r3, #32
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d015      	beq.n	80109d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109a8:	f003 0320 	and.w	r3, r3, #32
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d105      	bne.n	80109bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d009      	beq.n	80109d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f000 8377 	beq.w	80110b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	4798      	blx	r3
      }
      return;
 80109ce:	e371      	b.n	80110b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80109d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 8123 	beq.w	8010c20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80109da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80109de:	4b8d      	ldr	r3, [pc, #564]	; (8010c14 <HAL_UART_IRQHandler+0x2b8>)
 80109e0:	4013      	ands	r3, r2
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80109e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80109ea:	4b8b      	ldr	r3, [pc, #556]	; (8010c18 <HAL_UART_IRQHandler+0x2bc>)
 80109ec:	4013      	ands	r3, r2
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f000 8116 	beq.w	8010c20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80109f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109f8:	f003 0301 	and.w	r3, r3, #1
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d011      	beq.n	8010a24 <HAL_UART_IRQHandler+0xc8>
 8010a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	2201      	movs	r2, #1
 8010a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a1a:	f043 0201 	orr.w	r2, r3, #1
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a28:	f003 0302 	and.w	r3, r3, #2
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d011      	beq.n	8010a54 <HAL_UART_IRQHandler+0xf8>
 8010a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a34:	f003 0301 	and.w	r3, r3, #1
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00b      	beq.n	8010a54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2202      	movs	r2, #2
 8010a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a4a:	f043 0204 	orr.w	r2, r3, #4
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d011      	beq.n	8010a84 <HAL_UART_IRQHandler+0x128>
 8010a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a64:	f003 0301 	and.w	r3, r3, #1
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00b      	beq.n	8010a84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2204      	movs	r2, #4
 8010a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a7a:	f043 0202 	orr.w	r2, r3, #2
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a88:	f003 0308 	and.w	r3, r3, #8
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d017      	beq.n	8010ac0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a94:	f003 0320 	and.w	r3, r3, #32
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d105      	bne.n	8010aa8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010a9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010aa0:	4b5c      	ldr	r3, [pc, #368]	; (8010c14 <HAL_UART_IRQHandler+0x2b8>)
 8010aa2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00b      	beq.n	8010ac0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2208      	movs	r2, #8
 8010aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ab6:	f043 0208 	orr.w	r2, r3, #8
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d012      	beq.n	8010af2 <HAL_UART_IRQHandler+0x196>
 8010acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00c      	beq.n	8010af2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ae8:	f043 0220 	orr.w	r2, r3, #32
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f000 82dd 	beq.w	80110b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b02:	f003 0320 	and.w	r3, r3, #32
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d013      	beq.n	8010b32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b0e:	f003 0320 	and.w	r3, r3, #32
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d105      	bne.n	8010b22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d007      	beq.n	8010b32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d003      	beq.n	8010b32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	689b      	ldr	r3, [r3, #8]
 8010b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b46:	2b40      	cmp	r3, #64	; 0x40
 8010b48:	d005      	beq.n	8010b56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d054      	beq.n	8010c00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f001 fb60 	bl	801221c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b66:	2b40      	cmp	r3, #64	; 0x40
 8010b68:	d146      	bne.n	8010bf8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	3308      	adds	r3, #8
 8010b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b78:	e853 3f00 	ldrex	r3, [r3]
 8010b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	3308      	adds	r3, #8
 8010b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010ba6:	e841 2300 	strex	r3, r2, [r1]
 8010baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1d9      	bne.n	8010b6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d017      	beq.n	8010bf0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc6:	4a15      	ldr	r2, [pc, #84]	; (8010c1c <HAL_UART_IRQHandler+0x2c0>)
 8010bc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7f6 fd31 	bl	8007638 <HAL_DMA_Abort_IT>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d019      	beq.n	8010c10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010bea:	4610      	mov	r0, r2
 8010bec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bee:	e00f      	b.n	8010c10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fa77 	bl	80110e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bf6:	e00b      	b.n	8010c10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 fa73 	bl	80110e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bfe:	e007      	b.n	8010c10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 fa6f 	bl	80110e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010c0e:	e253      	b.n	80110b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c10:	bf00      	nop
    return;
 8010c12:	e251      	b.n	80110b8 <HAL_UART_IRQHandler+0x75c>
 8010c14:	10000001 	.word	0x10000001
 8010c18:	04000120 	.word	0x04000120
 8010c1c:	0801241b 	.word	0x0801241b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	f040 81e7 	bne.w	8010ff8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c2e:	f003 0310 	and.w	r3, r3, #16
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 81e0 	beq.w	8010ff8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c3c:	f003 0310 	and.w	r3, r3, #16
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f000 81d9 	beq.w	8010ff8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2210      	movs	r2, #16
 8010c4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c58:	2b40      	cmp	r3, #64	; 0x40
 8010c5a:	f040 8151 	bne.w	8010f00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a96      	ldr	r2, [pc, #600]	; (8010ec0 <HAL_UART_IRQHandler+0x564>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d068      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4a93      	ldr	r2, [pc, #588]	; (8010ec4 <HAL_UART_IRQHandler+0x568>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d061      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4a91      	ldr	r2, [pc, #580]	; (8010ec8 <HAL_UART_IRQHandler+0x56c>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d05a      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a8e      	ldr	r2, [pc, #568]	; (8010ecc <HAL_UART_IRQHandler+0x570>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d053      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4a8c      	ldr	r2, [pc, #560]	; (8010ed0 <HAL_UART_IRQHandler+0x574>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d04c      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a89      	ldr	r2, [pc, #548]	; (8010ed4 <HAL_UART_IRQHandler+0x578>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d045      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4a87      	ldr	r2, [pc, #540]	; (8010ed8 <HAL_UART_IRQHandler+0x57c>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d03e      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a84      	ldr	r2, [pc, #528]	; (8010edc <HAL_UART_IRQHandler+0x580>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d037      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a82      	ldr	r2, [pc, #520]	; (8010ee0 <HAL_UART_IRQHandler+0x584>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d030      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4a7f      	ldr	r2, [pc, #508]	; (8010ee4 <HAL_UART_IRQHandler+0x588>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d029      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	4a7d      	ldr	r2, [pc, #500]	; (8010ee8 <HAL_UART_IRQHandler+0x58c>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d022      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a7a      	ldr	r2, [pc, #488]	; (8010eec <HAL_UART_IRQHandler+0x590>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d01b      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4a78      	ldr	r2, [pc, #480]	; (8010ef0 <HAL_UART_IRQHandler+0x594>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d014      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a75      	ldr	r2, [pc, #468]	; (8010ef4 <HAL_UART_IRQHandler+0x598>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d00d      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a73      	ldr	r2, [pc, #460]	; (8010ef8 <HAL_UART_IRQHandler+0x59c>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d006      	beq.n	8010d3e <HAL_UART_IRQHandler+0x3e2>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4a70      	ldr	r2, [pc, #448]	; (8010efc <HAL_UART_IRQHandler+0x5a0>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d106      	bne.n	8010d4c <HAL_UART_IRQHandler+0x3f0>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	e005      	b.n	8010d58 <HAL_UART_IRQHandler+0x3fc>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 81ab 	beq.w	80110bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010d70:	429a      	cmp	r2, r3
 8010d72:	f080 81a3 	bcs.w	80110bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d86:	69db      	ldr	r3, [r3, #28]
 8010d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d8c:	f000 8087 	beq.w	8010e9e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d9c:	e853 3f00 	ldrex	r3, [r3]
 8010da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	461a      	mov	r2, r3
 8010db6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010dbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010dca:	e841 2300 	strex	r3, r2, [r1]
 8010dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1da      	bne.n	8010d90 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3308      	adds	r3, #8
 8010de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010de4:	e853 3f00 	ldrex	r3, [r3]
 8010de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dec:	f023 0301 	bic.w	r3, r3, #1
 8010df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	3308      	adds	r3, #8
 8010dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e0a:	e841 2300 	strex	r3, r2, [r1]
 8010e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d1e1      	bne.n	8010dda <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	3308      	adds	r3, #8
 8010e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e20:	e853 3f00 	ldrex	r3, [r3]
 8010e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	3308      	adds	r3, #8
 8010e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010e42:	e841 2300 	strex	r3, r2, [r1]
 8010e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1e3      	bne.n	8010e16 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2220      	movs	r2, #32
 8010e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e64:	e853 3f00 	ldrex	r3, [r3]
 8010e68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e6c:	f023 0310 	bic.w	r3, r3, #16
 8010e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	461a      	mov	r2, r3
 8010e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e86:	e841 2300 	strex	r3, r2, [r1]
 8010e8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1e4      	bne.n	8010e5c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7f6 f8af 	bl	8006ffc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2202      	movs	r2, #2
 8010ea2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f000 f91d 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010ebe:	e0fd      	b.n	80110bc <HAL_UART_IRQHandler+0x760>
 8010ec0:	40020010 	.word	0x40020010
 8010ec4:	40020028 	.word	0x40020028
 8010ec8:	40020040 	.word	0x40020040
 8010ecc:	40020058 	.word	0x40020058
 8010ed0:	40020070 	.word	0x40020070
 8010ed4:	40020088 	.word	0x40020088
 8010ed8:	400200a0 	.word	0x400200a0
 8010edc:	400200b8 	.word	0x400200b8
 8010ee0:	40020410 	.word	0x40020410
 8010ee4:	40020428 	.word	0x40020428
 8010ee8:	40020440 	.word	0x40020440
 8010eec:	40020458 	.word	0x40020458
 8010ef0:	40020470 	.word	0x40020470
 8010ef4:	40020488 	.word	0x40020488
 8010ef8:	400204a0 	.word	0x400204a0
 8010efc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f000 80cf 	beq.w	80110c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f000 80ca 	beq.w	80110c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f34:	e853 3f00 	ldrex	r3, [r3]
 8010f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	461a      	mov	r2, r3
 8010f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8010f50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f56:	e841 2300 	strex	r3, r2, [r1]
 8010f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1e4      	bne.n	8010f2c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	3308      	adds	r3, #8
 8010f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6c:	e853 3f00 	ldrex	r3, [r3]
 8010f70:	623b      	str	r3, [r7, #32]
   return(result);
 8010f72:	6a3a      	ldr	r2, [r7, #32]
 8010f74:	4b55      	ldr	r3, [pc, #340]	; (80110cc <HAL_UART_IRQHandler+0x770>)
 8010f76:	4013      	ands	r3, r2
 8010f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3308      	adds	r3, #8
 8010f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010f86:	633a      	str	r2, [r7, #48]	; 0x30
 8010f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f8e:	e841 2300 	strex	r3, r2, [r1]
 8010f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d1e3      	bne.n	8010f62 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2220      	movs	r2, #32
 8010f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	e853 3f00 	ldrex	r3, [r3]
 8010fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	f023 0310 	bic.w	r3, r3, #16
 8010fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010fd0:	61fb      	str	r3, [r7, #28]
 8010fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd4:	69b9      	ldr	r1, [r7, #24]
 8010fd6:	69fa      	ldr	r2, [r7, #28]
 8010fd8:	e841 2300 	strex	r3, r2, [r1]
 8010fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1e4      	bne.n	8010fae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2202      	movs	r2, #2
 8010fe8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010fee:	4619      	mov	r1, r3
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 f881 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010ff6:	e063      	b.n	80110c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00e      	beq.n	8011022 <HAL_UART_IRQHandler+0x6c6>
 8011004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801100c:	2b00      	cmp	r3, #0
 801100e:	d008      	beq.n	8011022 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f001 ff5a 	bl	8012ed4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011020:	e051      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801102a:	2b00      	cmp	r3, #0
 801102c:	d014      	beq.n	8011058 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801102e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011036:	2b00      	cmp	r3, #0
 8011038:	d105      	bne.n	8011046 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801103a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801103e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011042:	2b00      	cmp	r3, #0
 8011044:	d008      	beq.n	8011058 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801104a:	2b00      	cmp	r3, #0
 801104c:	d03a      	beq.n	80110c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	4798      	blx	r3
    }
    return;
 8011056:	e035      	b.n	80110c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801105c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011060:	2b00      	cmp	r3, #0
 8011062:	d009      	beq.n	8011078 <HAL_UART_IRQHandler+0x71c>
 8011064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801106c:	2b00      	cmp	r3, #0
 801106e:	d003      	beq.n	8011078 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f001 f9e8 	bl	8012446 <UART_EndTransmit_IT>
    return;
 8011076:	e026      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801107c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011080:	2b00      	cmp	r3, #0
 8011082:	d009      	beq.n	8011098 <HAL_UART_IRQHandler+0x73c>
 8011084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011088:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801108c:	2b00      	cmp	r3, #0
 801108e:	d003      	beq.n	8011098 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f001 ff33 	bl	8012efc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011096:	e016      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801109c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d010      	beq.n	80110c6 <HAL_UART_IRQHandler+0x76a>
 80110a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	da0c      	bge.n	80110c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f001 ff1b 	bl	8012ee8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80110b2:	e008      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80110b4:	bf00      	nop
 80110b6:	e006      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80110b8:	bf00      	nop
 80110ba:	e004      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80110bc:	bf00      	nop
 80110be:	e002      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
      return;
 80110c0:	bf00      	nop
 80110c2:	e000      	b.n	80110c6 <HAL_UART_IRQHandler+0x76a>
    return;
 80110c4:	bf00      	nop
  }
}
 80110c6:	37e8      	adds	r7, #232	; 0xe8
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	effffffe 	.word	0xeffffffe

080110d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80110d8:	bf00      	nop
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80110ec:	bf00      	nop
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011114:	b092      	sub	sp, #72	; 0x48
 8011116:	af00      	add	r7, sp, #0
 8011118:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	689a      	ldr	r2, [r3, #8]
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	691b      	ldr	r3, [r3, #16]
 8011128:	431a      	orrs	r2, r3
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	695b      	ldr	r3, [r3, #20]
 801112e:	431a      	orrs	r2, r3
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	69db      	ldr	r3, [r3, #28]
 8011134:	4313      	orrs	r3, r2
 8011136:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	4bbe      	ldr	r3, [pc, #760]	; (8011438 <UART_SetConfig+0x328>)
 8011140:	4013      	ands	r3, r2
 8011142:	697a      	ldr	r2, [r7, #20]
 8011144:	6812      	ldr	r2, [r2, #0]
 8011146:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011148:	430b      	orrs	r3, r1
 801114a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	430a      	orrs	r2, r1
 8011160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	699b      	ldr	r3, [r3, #24]
 8011166:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4ab3      	ldr	r2, [pc, #716]	; (801143c <UART_SetConfig+0x32c>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d004      	beq.n	801117c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	6a1b      	ldr	r3, [r3, #32]
 8011176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011178:	4313      	orrs	r3, r2
 801117a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	689a      	ldr	r2, [r3, #8]
 8011182:	4baf      	ldr	r3, [pc, #700]	; (8011440 <UART_SetConfig+0x330>)
 8011184:	4013      	ands	r3, r2
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	6812      	ldr	r2, [r2, #0]
 801118a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801118c:	430b      	orrs	r3, r1
 801118e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011196:	f023 010f 	bic.w	r1, r3, #15
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	430a      	orrs	r2, r1
 80111a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4aa6      	ldr	r2, [pc, #664]	; (8011444 <UART_SetConfig+0x334>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d177      	bne.n	80112a0 <UART_SetConfig+0x190>
 80111b0:	4ba5      	ldr	r3, [pc, #660]	; (8011448 <UART_SetConfig+0x338>)
 80111b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111b8:	2b28      	cmp	r3, #40	; 0x28
 80111ba:	d86d      	bhi.n	8011298 <UART_SetConfig+0x188>
 80111bc:	a201      	add	r2, pc, #4	; (adr r2, 80111c4 <UART_SetConfig+0xb4>)
 80111be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c2:	bf00      	nop
 80111c4:	08011269 	.word	0x08011269
 80111c8:	08011299 	.word	0x08011299
 80111cc:	08011299 	.word	0x08011299
 80111d0:	08011299 	.word	0x08011299
 80111d4:	08011299 	.word	0x08011299
 80111d8:	08011299 	.word	0x08011299
 80111dc:	08011299 	.word	0x08011299
 80111e0:	08011299 	.word	0x08011299
 80111e4:	08011271 	.word	0x08011271
 80111e8:	08011299 	.word	0x08011299
 80111ec:	08011299 	.word	0x08011299
 80111f0:	08011299 	.word	0x08011299
 80111f4:	08011299 	.word	0x08011299
 80111f8:	08011299 	.word	0x08011299
 80111fc:	08011299 	.word	0x08011299
 8011200:	08011299 	.word	0x08011299
 8011204:	08011279 	.word	0x08011279
 8011208:	08011299 	.word	0x08011299
 801120c:	08011299 	.word	0x08011299
 8011210:	08011299 	.word	0x08011299
 8011214:	08011299 	.word	0x08011299
 8011218:	08011299 	.word	0x08011299
 801121c:	08011299 	.word	0x08011299
 8011220:	08011299 	.word	0x08011299
 8011224:	08011281 	.word	0x08011281
 8011228:	08011299 	.word	0x08011299
 801122c:	08011299 	.word	0x08011299
 8011230:	08011299 	.word	0x08011299
 8011234:	08011299 	.word	0x08011299
 8011238:	08011299 	.word	0x08011299
 801123c:	08011299 	.word	0x08011299
 8011240:	08011299 	.word	0x08011299
 8011244:	08011289 	.word	0x08011289
 8011248:	08011299 	.word	0x08011299
 801124c:	08011299 	.word	0x08011299
 8011250:	08011299 	.word	0x08011299
 8011254:	08011299 	.word	0x08011299
 8011258:	08011299 	.word	0x08011299
 801125c:	08011299 	.word	0x08011299
 8011260:	08011299 	.word	0x08011299
 8011264:	08011291 	.word	0x08011291
 8011268:	2301      	movs	r3, #1
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e222      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011270:	2304      	movs	r3, #4
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e21e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011278:	2308      	movs	r3, #8
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e21a      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011280:	2310      	movs	r3, #16
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e216      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011288:	2320      	movs	r3, #32
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128e:	e212      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011290:	2340      	movs	r3, #64	; 0x40
 8011292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011296:	e20e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011298:	2380      	movs	r3, #128	; 0x80
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129e:	e20a      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4a69      	ldr	r2, [pc, #420]	; (801144c <UART_SetConfig+0x33c>)
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d130      	bne.n	801130c <UART_SetConfig+0x1fc>
 80112aa:	4b67      	ldr	r3, [pc, #412]	; (8011448 <UART_SetConfig+0x338>)
 80112ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112ae:	f003 0307 	and.w	r3, r3, #7
 80112b2:	2b05      	cmp	r3, #5
 80112b4:	d826      	bhi.n	8011304 <UART_SetConfig+0x1f4>
 80112b6:	a201      	add	r2, pc, #4	; (adr r2, 80112bc <UART_SetConfig+0x1ac>)
 80112b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112bc:	080112d5 	.word	0x080112d5
 80112c0:	080112dd 	.word	0x080112dd
 80112c4:	080112e5 	.word	0x080112e5
 80112c8:	080112ed 	.word	0x080112ed
 80112cc:	080112f5 	.word	0x080112f5
 80112d0:	080112fd 	.word	0x080112fd
 80112d4:	2300      	movs	r3, #0
 80112d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112da:	e1ec      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80112dc:	2304      	movs	r3, #4
 80112de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e2:	e1e8      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80112e4:	2308      	movs	r3, #8
 80112e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ea:	e1e4      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80112ec:	2310      	movs	r3, #16
 80112ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f2:	e1e0      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80112f4:	2320      	movs	r3, #32
 80112f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fa:	e1dc      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80112fc:	2340      	movs	r3, #64	; 0x40
 80112fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011302:	e1d8      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011304:	2380      	movs	r3, #128	; 0x80
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130a:	e1d4      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4a4f      	ldr	r2, [pc, #316]	; (8011450 <UART_SetConfig+0x340>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d130      	bne.n	8011378 <UART_SetConfig+0x268>
 8011316:	4b4c      	ldr	r3, [pc, #304]	; (8011448 <UART_SetConfig+0x338>)
 8011318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801131a:	f003 0307 	and.w	r3, r3, #7
 801131e:	2b05      	cmp	r3, #5
 8011320:	d826      	bhi.n	8011370 <UART_SetConfig+0x260>
 8011322:	a201      	add	r2, pc, #4	; (adr r2, 8011328 <UART_SetConfig+0x218>)
 8011324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011328:	08011341 	.word	0x08011341
 801132c:	08011349 	.word	0x08011349
 8011330:	08011351 	.word	0x08011351
 8011334:	08011359 	.word	0x08011359
 8011338:	08011361 	.word	0x08011361
 801133c:	08011369 	.word	0x08011369
 8011340:	2300      	movs	r3, #0
 8011342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011346:	e1b6      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011348:	2304      	movs	r3, #4
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134e:	e1b2      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011350:	2308      	movs	r3, #8
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011356:	e1ae      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011358:	2310      	movs	r3, #16
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e1aa      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011360:	2320      	movs	r3, #32
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e1a6      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011368:	2340      	movs	r3, #64	; 0x40
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136e:	e1a2      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011370:	2380      	movs	r3, #128	; 0x80
 8011372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011376:	e19e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a35      	ldr	r2, [pc, #212]	; (8011454 <UART_SetConfig+0x344>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d130      	bne.n	80113e4 <UART_SetConfig+0x2d4>
 8011382:	4b31      	ldr	r3, [pc, #196]	; (8011448 <UART_SetConfig+0x338>)
 8011384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011386:	f003 0307 	and.w	r3, r3, #7
 801138a:	2b05      	cmp	r3, #5
 801138c:	d826      	bhi.n	80113dc <UART_SetConfig+0x2cc>
 801138e:	a201      	add	r2, pc, #4	; (adr r2, 8011394 <UART_SetConfig+0x284>)
 8011390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011394:	080113ad 	.word	0x080113ad
 8011398:	080113b5 	.word	0x080113b5
 801139c:	080113bd 	.word	0x080113bd
 80113a0:	080113c5 	.word	0x080113c5
 80113a4:	080113cd 	.word	0x080113cd
 80113a8:	080113d5 	.word	0x080113d5
 80113ac:	2300      	movs	r3, #0
 80113ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b2:	e180      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113b4:	2304      	movs	r3, #4
 80113b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ba:	e17c      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113bc:	2308      	movs	r3, #8
 80113be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c2:	e178      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113c4:	2310      	movs	r3, #16
 80113c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ca:	e174      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113cc:	2320      	movs	r3, #32
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d2:	e170      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113d4:	2340      	movs	r3, #64	; 0x40
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113da:	e16c      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113dc:	2380      	movs	r3, #128	; 0x80
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e168      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4a1b      	ldr	r2, [pc, #108]	; (8011458 <UART_SetConfig+0x348>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d142      	bne.n	8011474 <UART_SetConfig+0x364>
 80113ee:	4b16      	ldr	r3, [pc, #88]	; (8011448 <UART_SetConfig+0x338>)
 80113f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113f2:	f003 0307 	and.w	r3, r3, #7
 80113f6:	2b05      	cmp	r3, #5
 80113f8:	d838      	bhi.n	801146c <UART_SetConfig+0x35c>
 80113fa:	a201      	add	r2, pc, #4	; (adr r2, 8011400 <UART_SetConfig+0x2f0>)
 80113fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011400:	08011419 	.word	0x08011419
 8011404:	08011421 	.word	0x08011421
 8011408:	08011429 	.word	0x08011429
 801140c:	08011431 	.word	0x08011431
 8011410:	0801145d 	.word	0x0801145d
 8011414:	08011465 	.word	0x08011465
 8011418:	2300      	movs	r3, #0
 801141a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141e:	e14a      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011420:	2304      	movs	r3, #4
 8011422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011426:	e146      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011428:	2308      	movs	r3, #8
 801142a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142e:	e142      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011430:	2310      	movs	r3, #16
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011436:	e13e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011438:	cfff69f3 	.word	0xcfff69f3
 801143c:	58000c00 	.word	0x58000c00
 8011440:	11fff4ff 	.word	0x11fff4ff
 8011444:	40011000 	.word	0x40011000
 8011448:	58024400 	.word	0x58024400
 801144c:	40004400 	.word	0x40004400
 8011450:	40004800 	.word	0x40004800
 8011454:	40004c00 	.word	0x40004c00
 8011458:	40005000 	.word	0x40005000
 801145c:	2320      	movs	r3, #32
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011462:	e128      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011464:	2340      	movs	r3, #64	; 0x40
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146a:	e124      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801146c:	2380      	movs	r3, #128	; 0x80
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011472:	e120      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4acb      	ldr	r2, [pc, #812]	; (80117a8 <UART_SetConfig+0x698>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d176      	bne.n	801156c <UART_SetConfig+0x45c>
 801147e:	4bcb      	ldr	r3, [pc, #812]	; (80117ac <UART_SetConfig+0x69c>)
 8011480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011486:	2b28      	cmp	r3, #40	; 0x28
 8011488:	d86c      	bhi.n	8011564 <UART_SetConfig+0x454>
 801148a:	a201      	add	r2, pc, #4	; (adr r2, 8011490 <UART_SetConfig+0x380>)
 801148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011490:	08011535 	.word	0x08011535
 8011494:	08011565 	.word	0x08011565
 8011498:	08011565 	.word	0x08011565
 801149c:	08011565 	.word	0x08011565
 80114a0:	08011565 	.word	0x08011565
 80114a4:	08011565 	.word	0x08011565
 80114a8:	08011565 	.word	0x08011565
 80114ac:	08011565 	.word	0x08011565
 80114b0:	0801153d 	.word	0x0801153d
 80114b4:	08011565 	.word	0x08011565
 80114b8:	08011565 	.word	0x08011565
 80114bc:	08011565 	.word	0x08011565
 80114c0:	08011565 	.word	0x08011565
 80114c4:	08011565 	.word	0x08011565
 80114c8:	08011565 	.word	0x08011565
 80114cc:	08011565 	.word	0x08011565
 80114d0:	08011545 	.word	0x08011545
 80114d4:	08011565 	.word	0x08011565
 80114d8:	08011565 	.word	0x08011565
 80114dc:	08011565 	.word	0x08011565
 80114e0:	08011565 	.word	0x08011565
 80114e4:	08011565 	.word	0x08011565
 80114e8:	08011565 	.word	0x08011565
 80114ec:	08011565 	.word	0x08011565
 80114f0:	0801154d 	.word	0x0801154d
 80114f4:	08011565 	.word	0x08011565
 80114f8:	08011565 	.word	0x08011565
 80114fc:	08011565 	.word	0x08011565
 8011500:	08011565 	.word	0x08011565
 8011504:	08011565 	.word	0x08011565
 8011508:	08011565 	.word	0x08011565
 801150c:	08011565 	.word	0x08011565
 8011510:	08011555 	.word	0x08011555
 8011514:	08011565 	.word	0x08011565
 8011518:	08011565 	.word	0x08011565
 801151c:	08011565 	.word	0x08011565
 8011520:	08011565 	.word	0x08011565
 8011524:	08011565 	.word	0x08011565
 8011528:	08011565 	.word	0x08011565
 801152c:	08011565 	.word	0x08011565
 8011530:	0801155d 	.word	0x0801155d
 8011534:	2301      	movs	r3, #1
 8011536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153a:	e0bc      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801153c:	2304      	movs	r3, #4
 801153e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011542:	e0b8      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011544:	2308      	movs	r3, #8
 8011546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154a:	e0b4      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801154c:	2310      	movs	r3, #16
 801154e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011552:	e0b0      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011554:	2320      	movs	r3, #32
 8011556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155a:	e0ac      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801155c:	2340      	movs	r3, #64	; 0x40
 801155e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011562:	e0a8      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011564:	2380      	movs	r3, #128	; 0x80
 8011566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156a:	e0a4      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4a8f      	ldr	r2, [pc, #572]	; (80117b0 <UART_SetConfig+0x6a0>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d130      	bne.n	80115d8 <UART_SetConfig+0x4c8>
 8011576:	4b8d      	ldr	r3, [pc, #564]	; (80117ac <UART_SetConfig+0x69c>)
 8011578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801157a:	f003 0307 	and.w	r3, r3, #7
 801157e:	2b05      	cmp	r3, #5
 8011580:	d826      	bhi.n	80115d0 <UART_SetConfig+0x4c0>
 8011582:	a201      	add	r2, pc, #4	; (adr r2, 8011588 <UART_SetConfig+0x478>)
 8011584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011588:	080115a1 	.word	0x080115a1
 801158c:	080115a9 	.word	0x080115a9
 8011590:	080115b1 	.word	0x080115b1
 8011594:	080115b9 	.word	0x080115b9
 8011598:	080115c1 	.word	0x080115c1
 801159c:	080115c9 	.word	0x080115c9
 80115a0:	2300      	movs	r3, #0
 80115a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a6:	e086      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115a8:	2304      	movs	r3, #4
 80115aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ae:	e082      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115b0:	2308      	movs	r3, #8
 80115b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b6:	e07e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115b8:	2310      	movs	r3, #16
 80115ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115be:	e07a      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115c0:	2320      	movs	r3, #32
 80115c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c6:	e076      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115c8:	2340      	movs	r3, #64	; 0x40
 80115ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ce:	e072      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115d0:	2380      	movs	r3, #128	; 0x80
 80115d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115d6:	e06e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	4a75      	ldr	r2, [pc, #468]	; (80117b4 <UART_SetConfig+0x6a4>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d130      	bne.n	8011644 <UART_SetConfig+0x534>
 80115e2:	4b72      	ldr	r3, [pc, #456]	; (80117ac <UART_SetConfig+0x69c>)
 80115e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115e6:	f003 0307 	and.w	r3, r3, #7
 80115ea:	2b05      	cmp	r3, #5
 80115ec:	d826      	bhi.n	801163c <UART_SetConfig+0x52c>
 80115ee:	a201      	add	r2, pc, #4	; (adr r2, 80115f4 <UART_SetConfig+0x4e4>)
 80115f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f4:	0801160d 	.word	0x0801160d
 80115f8:	08011615 	.word	0x08011615
 80115fc:	0801161d 	.word	0x0801161d
 8011600:	08011625 	.word	0x08011625
 8011604:	0801162d 	.word	0x0801162d
 8011608:	08011635 	.word	0x08011635
 801160c:	2300      	movs	r3, #0
 801160e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011612:	e050      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011614:	2304      	movs	r3, #4
 8011616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161a:	e04c      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801161c:	2308      	movs	r3, #8
 801161e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011622:	e048      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011624:	2310      	movs	r3, #16
 8011626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162a:	e044      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801162c:	2320      	movs	r3, #32
 801162e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011632:	e040      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011634:	2340      	movs	r3, #64	; 0x40
 8011636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163a:	e03c      	b.n	80116b6 <UART_SetConfig+0x5a6>
 801163c:	2380      	movs	r3, #128	; 0x80
 801163e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011642:	e038      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	4a5b      	ldr	r2, [pc, #364]	; (80117b8 <UART_SetConfig+0x6a8>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d130      	bne.n	80116b0 <UART_SetConfig+0x5a0>
 801164e:	4b57      	ldr	r3, [pc, #348]	; (80117ac <UART_SetConfig+0x69c>)
 8011650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011652:	f003 0307 	and.w	r3, r3, #7
 8011656:	2b05      	cmp	r3, #5
 8011658:	d826      	bhi.n	80116a8 <UART_SetConfig+0x598>
 801165a:	a201      	add	r2, pc, #4	; (adr r2, 8011660 <UART_SetConfig+0x550>)
 801165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011660:	08011679 	.word	0x08011679
 8011664:	08011681 	.word	0x08011681
 8011668:	08011689 	.word	0x08011689
 801166c:	08011691 	.word	0x08011691
 8011670:	08011699 	.word	0x08011699
 8011674:	080116a1 	.word	0x080116a1
 8011678:	2302      	movs	r3, #2
 801167a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167e:	e01a      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011680:	2304      	movs	r3, #4
 8011682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011686:	e016      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011688:	2308      	movs	r3, #8
 801168a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168e:	e012      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011690:	2310      	movs	r3, #16
 8011692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011696:	e00e      	b.n	80116b6 <UART_SetConfig+0x5a6>
 8011698:	2320      	movs	r3, #32
 801169a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169e:	e00a      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80116a0:	2340      	movs	r3, #64	; 0x40
 80116a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a6:	e006      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80116a8:	2380      	movs	r3, #128	; 0x80
 80116aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ae:	e002      	b.n	80116b6 <UART_SetConfig+0x5a6>
 80116b0:	2380      	movs	r3, #128	; 0x80
 80116b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4a3f      	ldr	r2, [pc, #252]	; (80117b8 <UART_SetConfig+0x6a8>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	f040 80f8 	bne.w	80118b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80116c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116c6:	2b20      	cmp	r3, #32
 80116c8:	dc46      	bgt.n	8011758 <UART_SetConfig+0x648>
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	f2c0 8082 	blt.w	80117d4 <UART_SetConfig+0x6c4>
 80116d0:	3b02      	subs	r3, #2
 80116d2:	2b1e      	cmp	r3, #30
 80116d4:	d87e      	bhi.n	80117d4 <UART_SetConfig+0x6c4>
 80116d6:	a201      	add	r2, pc, #4	; (adr r2, 80116dc <UART_SetConfig+0x5cc>)
 80116d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116dc:	0801175f 	.word	0x0801175f
 80116e0:	080117d5 	.word	0x080117d5
 80116e4:	08011767 	.word	0x08011767
 80116e8:	080117d5 	.word	0x080117d5
 80116ec:	080117d5 	.word	0x080117d5
 80116f0:	080117d5 	.word	0x080117d5
 80116f4:	08011777 	.word	0x08011777
 80116f8:	080117d5 	.word	0x080117d5
 80116fc:	080117d5 	.word	0x080117d5
 8011700:	080117d5 	.word	0x080117d5
 8011704:	080117d5 	.word	0x080117d5
 8011708:	080117d5 	.word	0x080117d5
 801170c:	080117d5 	.word	0x080117d5
 8011710:	080117d5 	.word	0x080117d5
 8011714:	08011787 	.word	0x08011787
 8011718:	080117d5 	.word	0x080117d5
 801171c:	080117d5 	.word	0x080117d5
 8011720:	080117d5 	.word	0x080117d5
 8011724:	080117d5 	.word	0x080117d5
 8011728:	080117d5 	.word	0x080117d5
 801172c:	080117d5 	.word	0x080117d5
 8011730:	080117d5 	.word	0x080117d5
 8011734:	080117d5 	.word	0x080117d5
 8011738:	080117d5 	.word	0x080117d5
 801173c:	080117d5 	.word	0x080117d5
 8011740:	080117d5 	.word	0x080117d5
 8011744:	080117d5 	.word	0x080117d5
 8011748:	080117d5 	.word	0x080117d5
 801174c:	080117d5 	.word	0x080117d5
 8011750:	080117d5 	.word	0x080117d5
 8011754:	080117c7 	.word	0x080117c7
 8011758:	2b40      	cmp	r3, #64	; 0x40
 801175a:	d037      	beq.n	80117cc <UART_SetConfig+0x6bc>
 801175c:	e03a      	b.n	80117d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801175e:	f7fb fce5 	bl	800d12c <HAL_RCCEx_GetD3PCLK1Freq>
 8011762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011764:	e03c      	b.n	80117e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801176a:	4618      	mov	r0, r3
 801176c:	f7fb fcf4 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011774:	e034      	b.n	80117e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011776:	f107 0318 	add.w	r3, r7, #24
 801177a:	4618      	mov	r0, r3
 801177c:	f7fb fe40 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011784:	e02c      	b.n	80117e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011786:	4b09      	ldr	r3, [pc, #36]	; (80117ac <UART_SetConfig+0x69c>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f003 0320 	and.w	r3, r3, #32
 801178e:	2b00      	cmp	r3, #0
 8011790:	d016      	beq.n	80117c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011792:	4b06      	ldr	r3, [pc, #24]	; (80117ac <UART_SetConfig+0x69c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	08db      	lsrs	r3, r3, #3
 8011798:	f003 0303 	and.w	r3, r3, #3
 801179c:	4a07      	ldr	r2, [pc, #28]	; (80117bc <UART_SetConfig+0x6ac>)
 801179e:	fa22 f303 	lsr.w	r3, r2, r3
 80117a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117a4:	e01c      	b.n	80117e0 <UART_SetConfig+0x6d0>
 80117a6:	bf00      	nop
 80117a8:	40011400 	.word	0x40011400
 80117ac:	58024400 	.word	0x58024400
 80117b0:	40007800 	.word	0x40007800
 80117b4:	40007c00 	.word	0x40007c00
 80117b8:	58000c00 	.word	0x58000c00
 80117bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80117c0:	4b9d      	ldr	r3, [pc, #628]	; (8011a38 <UART_SetConfig+0x928>)
 80117c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c4:	e00c      	b.n	80117e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117c6:	4b9d      	ldr	r3, [pc, #628]	; (8011a3c <UART_SetConfig+0x92c>)
 80117c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117ca:	e009      	b.n	80117e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117d2:	e005      	b.n	80117e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80117d4:	2300      	movs	r3, #0
 80117d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117d8:	2301      	movs	r3, #1
 80117da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80117e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 81de 	beq.w	8011ba4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ec:	4a94      	ldr	r2, [pc, #592]	; (8011a40 <UART_SetConfig+0x930>)
 80117ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117f2:	461a      	mov	r2, r3
 80117f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80117fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	685a      	ldr	r2, [r3, #4]
 8011800:	4613      	mov	r3, r2
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	4413      	add	r3, r2
 8011806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011808:	429a      	cmp	r2, r3
 801180a:	d305      	bcc.n	8011818 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011814:	429a      	cmp	r2, r3
 8011816:	d903      	bls.n	8011820 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011818:	2301      	movs	r3, #1
 801181a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801181e:	e1c1      	b.n	8011ba4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011822:	2200      	movs	r2, #0
 8011824:	60bb      	str	r3, [r7, #8]
 8011826:	60fa      	str	r2, [r7, #12]
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182c:	4a84      	ldr	r2, [pc, #528]	; (8011a40 <UART_SetConfig+0x930>)
 801182e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011832:	b29b      	uxth	r3, r3
 8011834:	2200      	movs	r2, #0
 8011836:	603b      	str	r3, [r7, #0]
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801183e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011842:	f7ee fd4d 	bl	80002e0 <__aeabi_uldivmod>
 8011846:	4602      	mov	r2, r0
 8011848:	460b      	mov	r3, r1
 801184a:	4610      	mov	r0, r2
 801184c:	4619      	mov	r1, r3
 801184e:	f04f 0200 	mov.w	r2, #0
 8011852:	f04f 0300 	mov.w	r3, #0
 8011856:	020b      	lsls	r3, r1, #8
 8011858:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801185c:	0202      	lsls	r2, r0, #8
 801185e:	6979      	ldr	r1, [r7, #20]
 8011860:	6849      	ldr	r1, [r1, #4]
 8011862:	0849      	lsrs	r1, r1, #1
 8011864:	2000      	movs	r0, #0
 8011866:	460c      	mov	r4, r1
 8011868:	4605      	mov	r5, r0
 801186a:	eb12 0804 	adds.w	r8, r2, r4
 801186e:	eb43 0905 	adc.w	r9, r3, r5
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	469a      	mov	sl, r3
 801187a:	4693      	mov	fp, r2
 801187c:	4652      	mov	r2, sl
 801187e:	465b      	mov	r3, fp
 8011880:	4640      	mov	r0, r8
 8011882:	4649      	mov	r1, r9
 8011884:	f7ee fd2c 	bl	80002e0 <__aeabi_uldivmod>
 8011888:	4602      	mov	r2, r0
 801188a:	460b      	mov	r3, r1
 801188c:	4613      	mov	r3, r2
 801188e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011896:	d308      	bcc.n	80118aa <UART_SetConfig+0x79a>
 8011898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801189e:	d204      	bcs.n	80118aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118a6:	60da      	str	r2, [r3, #12]
 80118a8:	e17c      	b.n	8011ba4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80118b0:	e178      	b.n	8011ba4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	69db      	ldr	r3, [r3, #28]
 80118b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118ba:	f040 80c5 	bne.w	8011a48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80118be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118c2:	2b20      	cmp	r3, #32
 80118c4:	dc48      	bgt.n	8011958 <UART_SetConfig+0x848>
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	db7b      	blt.n	80119c2 <UART_SetConfig+0x8b2>
 80118ca:	2b20      	cmp	r3, #32
 80118cc:	d879      	bhi.n	80119c2 <UART_SetConfig+0x8b2>
 80118ce:	a201      	add	r2, pc, #4	; (adr r2, 80118d4 <UART_SetConfig+0x7c4>)
 80118d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d4:	0801195f 	.word	0x0801195f
 80118d8:	08011967 	.word	0x08011967
 80118dc:	080119c3 	.word	0x080119c3
 80118e0:	080119c3 	.word	0x080119c3
 80118e4:	0801196f 	.word	0x0801196f
 80118e8:	080119c3 	.word	0x080119c3
 80118ec:	080119c3 	.word	0x080119c3
 80118f0:	080119c3 	.word	0x080119c3
 80118f4:	0801197f 	.word	0x0801197f
 80118f8:	080119c3 	.word	0x080119c3
 80118fc:	080119c3 	.word	0x080119c3
 8011900:	080119c3 	.word	0x080119c3
 8011904:	080119c3 	.word	0x080119c3
 8011908:	080119c3 	.word	0x080119c3
 801190c:	080119c3 	.word	0x080119c3
 8011910:	080119c3 	.word	0x080119c3
 8011914:	0801198f 	.word	0x0801198f
 8011918:	080119c3 	.word	0x080119c3
 801191c:	080119c3 	.word	0x080119c3
 8011920:	080119c3 	.word	0x080119c3
 8011924:	080119c3 	.word	0x080119c3
 8011928:	080119c3 	.word	0x080119c3
 801192c:	080119c3 	.word	0x080119c3
 8011930:	080119c3 	.word	0x080119c3
 8011934:	080119c3 	.word	0x080119c3
 8011938:	080119c3 	.word	0x080119c3
 801193c:	080119c3 	.word	0x080119c3
 8011940:	080119c3 	.word	0x080119c3
 8011944:	080119c3 	.word	0x080119c3
 8011948:	080119c3 	.word	0x080119c3
 801194c:	080119c3 	.word	0x080119c3
 8011950:	080119c3 	.word	0x080119c3
 8011954:	080119b5 	.word	0x080119b5
 8011958:	2b40      	cmp	r3, #64	; 0x40
 801195a:	d02e      	beq.n	80119ba <UART_SetConfig+0x8aa>
 801195c:	e031      	b.n	80119c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801195e:	f7f9 fbed 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 8011962:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011964:	e033      	b.n	80119ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011966:	f7f9 fbff 	bl	800b168 <HAL_RCC_GetPCLK2Freq>
 801196a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801196c:	e02f      	b.n	80119ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011972:	4618      	mov	r0, r3
 8011974:	f7fb fbf0 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801197c:	e027      	b.n	80119ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801197e:	f107 0318 	add.w	r3, r7, #24
 8011982:	4618      	mov	r0, r3
 8011984:	f7fb fd3c 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801198c:	e01f      	b.n	80119ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801198e:	4b2d      	ldr	r3, [pc, #180]	; (8011a44 <UART_SetConfig+0x934>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f003 0320 	and.w	r3, r3, #32
 8011996:	2b00      	cmp	r3, #0
 8011998:	d009      	beq.n	80119ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801199a:	4b2a      	ldr	r3, [pc, #168]	; (8011a44 <UART_SetConfig+0x934>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	08db      	lsrs	r3, r3, #3
 80119a0:	f003 0303 	and.w	r3, r3, #3
 80119a4:	4a24      	ldr	r2, [pc, #144]	; (8011a38 <UART_SetConfig+0x928>)
 80119a6:	fa22 f303 	lsr.w	r3, r2, r3
 80119aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119ac:	e00f      	b.n	80119ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80119ae:	4b22      	ldr	r3, [pc, #136]	; (8011a38 <UART_SetConfig+0x928>)
 80119b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119b2:	e00c      	b.n	80119ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119b4:	4b21      	ldr	r3, [pc, #132]	; (8011a3c <UART_SetConfig+0x92c>)
 80119b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119b8:	e009      	b.n	80119ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119c0:	e005      	b.n	80119ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80119c2:	2300      	movs	r3, #0
 80119c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119c6:	2301      	movs	r3, #1
 80119c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80119ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f000 80e7 	beq.w	8011ba4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119da:	4a19      	ldr	r2, [pc, #100]	; (8011a40 <UART_SetConfig+0x930>)
 80119dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119e0:	461a      	mov	r2, r3
 80119e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80119e8:	005a      	lsls	r2, r3, #1
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	085b      	lsrs	r3, r3, #1
 80119f0:	441a      	add	r2, r3
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80119fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fe:	2b0f      	cmp	r3, #15
 8011a00:	d916      	bls.n	8011a30 <UART_SetConfig+0x920>
 8011a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a08:	d212      	bcs.n	8011a30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	f023 030f 	bic.w	r3, r3, #15
 8011a12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a16:	085b      	lsrs	r3, r3, #1
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	f003 0307 	and.w	r3, r3, #7
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a22:	4313      	orrs	r3, r2
 8011a24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011a2c:	60da      	str	r2, [r3, #12]
 8011a2e:	e0b9      	b.n	8011ba4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011a30:	2301      	movs	r3, #1
 8011a32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a36:	e0b5      	b.n	8011ba4 <UART_SetConfig+0xa94>
 8011a38:	03d09000 	.word	0x03d09000
 8011a3c:	003d0900 	.word	0x003d0900
 8011a40:	08017b7c 	.word	0x08017b7c
 8011a44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011a48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a4c:	2b20      	cmp	r3, #32
 8011a4e:	dc49      	bgt.n	8011ae4 <UART_SetConfig+0x9d4>
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	db7c      	blt.n	8011b4e <UART_SetConfig+0xa3e>
 8011a54:	2b20      	cmp	r3, #32
 8011a56:	d87a      	bhi.n	8011b4e <UART_SetConfig+0xa3e>
 8011a58:	a201      	add	r2, pc, #4	; (adr r2, 8011a60 <UART_SetConfig+0x950>)
 8011a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a5e:	bf00      	nop
 8011a60:	08011aeb 	.word	0x08011aeb
 8011a64:	08011af3 	.word	0x08011af3
 8011a68:	08011b4f 	.word	0x08011b4f
 8011a6c:	08011b4f 	.word	0x08011b4f
 8011a70:	08011afb 	.word	0x08011afb
 8011a74:	08011b4f 	.word	0x08011b4f
 8011a78:	08011b4f 	.word	0x08011b4f
 8011a7c:	08011b4f 	.word	0x08011b4f
 8011a80:	08011b0b 	.word	0x08011b0b
 8011a84:	08011b4f 	.word	0x08011b4f
 8011a88:	08011b4f 	.word	0x08011b4f
 8011a8c:	08011b4f 	.word	0x08011b4f
 8011a90:	08011b4f 	.word	0x08011b4f
 8011a94:	08011b4f 	.word	0x08011b4f
 8011a98:	08011b4f 	.word	0x08011b4f
 8011a9c:	08011b4f 	.word	0x08011b4f
 8011aa0:	08011b1b 	.word	0x08011b1b
 8011aa4:	08011b4f 	.word	0x08011b4f
 8011aa8:	08011b4f 	.word	0x08011b4f
 8011aac:	08011b4f 	.word	0x08011b4f
 8011ab0:	08011b4f 	.word	0x08011b4f
 8011ab4:	08011b4f 	.word	0x08011b4f
 8011ab8:	08011b4f 	.word	0x08011b4f
 8011abc:	08011b4f 	.word	0x08011b4f
 8011ac0:	08011b4f 	.word	0x08011b4f
 8011ac4:	08011b4f 	.word	0x08011b4f
 8011ac8:	08011b4f 	.word	0x08011b4f
 8011acc:	08011b4f 	.word	0x08011b4f
 8011ad0:	08011b4f 	.word	0x08011b4f
 8011ad4:	08011b4f 	.word	0x08011b4f
 8011ad8:	08011b4f 	.word	0x08011b4f
 8011adc:	08011b4f 	.word	0x08011b4f
 8011ae0:	08011b41 	.word	0x08011b41
 8011ae4:	2b40      	cmp	r3, #64	; 0x40
 8011ae6:	d02e      	beq.n	8011b46 <UART_SetConfig+0xa36>
 8011ae8:	e031      	b.n	8011b4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011aea:	f7f9 fb27 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 8011aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011af0:	e033      	b.n	8011b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011af2:	f7f9 fb39 	bl	800b168 <HAL_RCC_GetPCLK2Freq>
 8011af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011af8:	e02f      	b.n	8011b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fb fb2a 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b08:	e027      	b.n	8011b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b0a:	f107 0318 	add.w	r3, r7, #24
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fb fc76 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b18:	e01f      	b.n	8011b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b1a:	4b2d      	ldr	r3, [pc, #180]	; (8011bd0 <UART_SetConfig+0xac0>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f003 0320 	and.w	r3, r3, #32
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d009      	beq.n	8011b3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b26:	4b2a      	ldr	r3, [pc, #168]	; (8011bd0 <UART_SetConfig+0xac0>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	08db      	lsrs	r3, r3, #3
 8011b2c:	f003 0303 	and.w	r3, r3, #3
 8011b30:	4a28      	ldr	r2, [pc, #160]	; (8011bd4 <UART_SetConfig+0xac4>)
 8011b32:	fa22 f303 	lsr.w	r3, r2, r3
 8011b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b38:	e00f      	b.n	8011b5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011b3a:	4b26      	ldr	r3, [pc, #152]	; (8011bd4 <UART_SetConfig+0xac4>)
 8011b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b3e:	e00c      	b.n	8011b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b40:	4b25      	ldr	r3, [pc, #148]	; (8011bd8 <UART_SetConfig+0xac8>)
 8011b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b44:	e009      	b.n	8011b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b4c:	e005      	b.n	8011b5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011b52:	2301      	movs	r3, #1
 8011b54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b58:	bf00      	nop
    }

    if (pclk != 0U)
 8011b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d021      	beq.n	8011ba4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b64:	4a1d      	ldr	r2, [pc, #116]	; (8011bdc <UART_SetConfig+0xacc>)
 8011b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	085b      	lsrs	r3, r3, #1
 8011b78:	441a      	add	r2, r3
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b86:	2b0f      	cmp	r3, #15
 8011b88:	d909      	bls.n	8011b9e <UART_SetConfig+0xa8e>
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b90:	d205      	bcs.n	8011b9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	60da      	str	r2, [r3, #12]
 8011b9c:	e002      	b.n	8011ba4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	2201      	movs	r2, #1
 8011bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011bc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3748      	adds	r7, #72	; 0x48
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011bce:	bf00      	nop
 8011bd0:	58024400 	.word	0x58024400
 8011bd4:	03d09000 	.word	0x03d09000
 8011bd8:	003d0900 	.word	0x003d0900
 8011bdc:	08017b7c 	.word	0x08017b7c

08011be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bec:	f003 0308 	and.w	r3, r3, #8
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00a      	beq.n	8011c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	430a      	orrs	r2, r1
 8011c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c0e:	f003 0301 	and.w	r3, r3, #1
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00a      	beq.n	8011c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	430a      	orrs	r2, r1
 8011c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c30:	f003 0302 	and.w	r3, r3, #2
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d00a      	beq.n	8011c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	430a      	orrs	r2, r1
 8011c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c52:	f003 0304 	and.w	r3, r3, #4
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d00a      	beq.n	8011c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	430a      	orrs	r2, r1
 8011c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c74:	f003 0310 	and.w	r3, r3, #16
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00a      	beq.n	8011c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	689b      	ldr	r3, [r3, #8]
 8011c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	430a      	orrs	r2, r1
 8011c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c96:	f003 0320 	and.w	r3, r3, #32
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00a      	beq.n	8011cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	430a      	orrs	r2, r1
 8011cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d01a      	beq.n	8011cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	430a      	orrs	r2, r1
 8011cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cde:	d10a      	bne.n	8011cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	430a      	orrs	r2, r1
 8011cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00a      	beq.n	8011d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	430a      	orrs	r2, r1
 8011d16:	605a      	str	r2, [r3, #4]
  }
}
 8011d18:	bf00      	nop
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b098      	sub	sp, #96	; 0x60
 8011d28:	af02      	add	r7, sp, #8
 8011d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d34:	f7f2 fa74 	bl	8004220 <HAL_GetTick>
 8011d38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f003 0308 	and.w	r3, r3, #8
 8011d44:	2b08      	cmp	r3, #8
 8011d46:	d12f      	bne.n	8011da8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d50:	2200      	movs	r2, #0
 8011d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 f88e 	bl	8011e78 <UART_WaitOnFlagUntilTimeout>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d022      	beq.n	8011da8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	e853 3f00 	ldrex	r3, [r3]
 8011d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d76:	653b      	str	r3, [r7, #80]	; 0x50
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d80:	647b      	str	r3, [r7, #68]	; 0x44
 8011d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d88:	e841 2300 	strex	r3, r2, [r1]
 8011d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d1e6      	bne.n	8011d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2220      	movs	r2, #32
 8011d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011da4:	2303      	movs	r3, #3
 8011da6:	e063      	b.n	8011e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	f003 0304 	and.w	r3, r3, #4
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	d149      	bne.n	8011e4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011db6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 f857 	bl	8011e78 <UART_WaitOnFlagUntilTimeout>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d03c      	beq.n	8011e4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	e853 3f00 	ldrex	r3, [r3]
 8011ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8011dde:	6a3b      	ldr	r3, [r7, #32]
 8011de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	461a      	mov	r2, r3
 8011dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dee:	633b      	str	r3, [r7, #48]	; 0x30
 8011df0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011df6:	e841 2300 	strex	r3, r2, [r1]
 8011dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1e6      	bne.n	8011dd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	3308      	adds	r3, #8
 8011e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	e853 3f00 	ldrex	r3, [r3]
 8011e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f023 0301 	bic.w	r3, r3, #1
 8011e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	3308      	adds	r3, #8
 8011e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e22:	61fa      	str	r2, [r7, #28]
 8011e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e26:	69b9      	ldr	r1, [r7, #24]
 8011e28:	69fa      	ldr	r2, [r7, #28]
 8011e2a:	e841 2300 	strex	r3, r2, [r1]
 8011e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1e5      	bne.n	8011e02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2220      	movs	r2, #32
 8011e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e46:	2303      	movs	r3, #3
 8011e48:	e012      	b.n	8011e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2220      	movs	r2, #32
 8011e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2220      	movs	r2, #32
 8011e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3758      	adds	r7, #88	; 0x58
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	603b      	str	r3, [r7, #0]
 8011e84:	4613      	mov	r3, r2
 8011e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e88:	e04f      	b.n	8011f2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e90:	d04b      	beq.n	8011f2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e92:	f7f2 f9c5 	bl	8004220 <HAL_GetTick>
 8011e96:	4602      	mov	r2, r0
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	69ba      	ldr	r2, [r7, #24]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d302      	bcc.n	8011ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d101      	bne.n	8011eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ea8:	2303      	movs	r3, #3
 8011eaa:	e04e      	b.n	8011f4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f003 0304 	and.w	r3, r3, #4
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d037      	beq.n	8011f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	2b80      	cmp	r3, #128	; 0x80
 8011ebe:	d034      	beq.n	8011f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	2b40      	cmp	r3, #64	; 0x40
 8011ec4:	d031      	beq.n	8011f2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	69db      	ldr	r3, [r3, #28]
 8011ecc:	f003 0308 	and.w	r3, r3, #8
 8011ed0:	2b08      	cmp	r3, #8
 8011ed2:	d110      	bne.n	8011ef6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2208      	movs	r2, #8
 8011eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f000 f99d 	bl	801221c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2208      	movs	r2, #8
 8011ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2200      	movs	r2, #0
 8011eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e029      	b.n	8011f4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	69db      	ldr	r3, [r3, #28]
 8011efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f04:	d111      	bne.n	8011f2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f10:	68f8      	ldr	r0, [r7, #12]
 8011f12:	f000 f983 	bl	801221c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2220      	movs	r2, #32
 8011f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2200      	movs	r2, #0
 8011f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011f26:	2303      	movs	r3, #3
 8011f28:	e00f      	b.n	8011f4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	69da      	ldr	r2, [r3, #28]
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	4013      	ands	r3, r2
 8011f34:	68ba      	ldr	r2, [r7, #8]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	bf0c      	ite	eq
 8011f3a:	2301      	moveq	r3, #1
 8011f3c:	2300      	movne	r3, #0
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	461a      	mov	r2, r3
 8011f42:	79fb      	ldrb	r3, [r7, #7]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d0a0      	beq.n	8011e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
	...

08011f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b0a3      	sub	sp, #140	; 0x8c
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	88fa      	ldrh	r2, [r7, #6]
 8011f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	88fa      	ldrh	r2, [r7, #6]
 8011f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f86:	d10e      	bne.n	8011fa6 <UART_Start_Receive_IT+0x52>
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	691b      	ldr	r3, [r3, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d105      	bne.n	8011f9c <UART_Start_Receive_IT+0x48>
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011f96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011f9a:	e02d      	b.n	8011ff8 <UART_Start_Receive_IT+0xa4>
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	22ff      	movs	r2, #255	; 0xff
 8011fa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fa4:	e028      	b.n	8011ff8 <UART_Start_Receive_IT+0xa4>
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d10d      	bne.n	8011fca <UART_Start_Receive_IT+0x76>
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	691b      	ldr	r3, [r3, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d104      	bne.n	8011fc0 <UART_Start_Receive_IT+0x6c>
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	22ff      	movs	r2, #255	; 0xff
 8011fba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fbe:	e01b      	b.n	8011ff8 <UART_Start_Receive_IT+0xa4>
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	227f      	movs	r2, #127	; 0x7f
 8011fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fc8:	e016      	b.n	8011ff8 <UART_Start_Receive_IT+0xa4>
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	689b      	ldr	r3, [r3, #8]
 8011fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011fd2:	d10d      	bne.n	8011ff0 <UART_Start_Receive_IT+0x9c>
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	691b      	ldr	r3, [r3, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d104      	bne.n	8011fe6 <UART_Start_Receive_IT+0x92>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	227f      	movs	r2, #127	; 0x7f
 8011fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fe4:	e008      	b.n	8011ff8 <UART_Start_Receive_IT+0xa4>
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	223f      	movs	r2, #63	; 0x3f
 8011fea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011fee:	e003      	b.n	8011ff8 <UART_Start_Receive_IT+0xa4>
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2222      	movs	r2, #34	; 0x22
 8012004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3308      	adds	r3, #8
 801200e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801201a:	f043 0301 	orr.w	r3, r3, #1
 801201e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	3308      	adds	r3, #8
 8012028:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801202c:	673a      	str	r2, [r7, #112]	; 0x70
 801202e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012030:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012032:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012034:	e841 2300 	strex	r3, r2, [r1]
 8012038:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801203a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1e3      	bne.n	8012008 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012048:	d14f      	bne.n	80120ea <UART_Start_Receive_IT+0x196>
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012050:	88fa      	ldrh	r2, [r7, #6]
 8012052:	429a      	cmp	r2, r3
 8012054:	d349      	bcc.n	80120ea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	689b      	ldr	r3, [r3, #8]
 801205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801205e:	d107      	bne.n	8012070 <UART_Start_Receive_IT+0x11c>
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d103      	bne.n	8012070 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	4a47      	ldr	r2, [pc, #284]	; (8012188 <UART_Start_Receive_IT+0x234>)
 801206c:	675a      	str	r2, [r3, #116]	; 0x74
 801206e:	e002      	b.n	8012076 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	4a46      	ldr	r2, [pc, #280]	; (801218c <UART_Start_Receive_IT+0x238>)
 8012074:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	691b      	ldr	r3, [r3, #16]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d01a      	beq.n	80120b4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012086:	e853 3f00 	ldrex	r3, [r3]
 801208a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	461a      	mov	r2, r3
 801209c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80120a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80120a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80120a8:	e841 2300 	strex	r3, r2, [r1]
 80120ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80120ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d1e4      	bne.n	801207e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3308      	adds	r3, #8
 80120ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120be:	e853 3f00 	ldrex	r3, [r3]
 80120c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3308      	adds	r3, #8
 80120d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80120d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80120d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80120da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120dc:	e841 2300 	strex	r3, r2, [r1]
 80120e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80120e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d1e5      	bne.n	80120b4 <UART_Start_Receive_IT+0x160>
 80120e8:	e046      	b.n	8012178 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	689b      	ldr	r3, [r3, #8]
 80120ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120f2:	d107      	bne.n	8012104 <UART_Start_Receive_IT+0x1b0>
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	691b      	ldr	r3, [r3, #16]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d103      	bne.n	8012104 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	4a24      	ldr	r2, [pc, #144]	; (8012190 <UART_Start_Receive_IT+0x23c>)
 8012100:	675a      	str	r2, [r3, #116]	; 0x74
 8012102:	e002      	b.n	801210a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	4a23      	ldr	r2, [pc, #140]	; (8012194 <UART_Start_Receive_IT+0x240>)
 8012108:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	691b      	ldr	r3, [r3, #16]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d019      	beq.n	8012146 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801211a:	e853 3f00 	ldrex	r3, [r3]
 801211e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012126:	677b      	str	r3, [r7, #116]	; 0x74
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	461a      	mov	r2, r3
 801212e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012130:	637b      	str	r3, [r7, #52]	; 0x34
 8012132:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012138:	e841 2300 	strex	r3, r2, [r1]
 801213c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1e6      	bne.n	8012112 <UART_Start_Receive_IT+0x1be>
 8012144:	e018      	b.n	8012178 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	e853 3f00 	ldrex	r3, [r3]
 8012152:	613b      	str	r3, [r7, #16]
   return(result);
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	f043 0320 	orr.w	r3, r3, #32
 801215a:	67bb      	str	r3, [r7, #120]	; 0x78
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	461a      	mov	r2, r3
 8012162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012164:	623b      	str	r3, [r7, #32]
 8012166:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012168:	69f9      	ldr	r1, [r7, #28]
 801216a:	6a3a      	ldr	r2, [r7, #32]
 801216c:	e841 2300 	strex	r3, r2, [r1]
 8012170:	61bb      	str	r3, [r7, #24]
   return(result);
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1e6      	bne.n	8012146 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012178:	2300      	movs	r3, #0
}
 801217a:	4618      	mov	r0, r3
 801217c:	378c      	adds	r7, #140	; 0x8c
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	08012b6d 	.word	0x08012b6d
 801218c:	0801280d 	.word	0x0801280d
 8012190:	08012655 	.word	0x08012655
 8012194:	0801249d 	.word	0x0801249d

08012198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012198:	b480      	push	{r7}
 801219a:	b08f      	sub	sp, #60	; 0x3c
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	e853 3f00 	ldrex	r3, [r3]
 80121ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ae:	69fb      	ldr	r3, [r7, #28]
 80121b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80121b4:	637b      	str	r3, [r7, #52]	; 0x34
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	461a      	mov	r2, r3
 80121bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121c6:	e841 2300 	strex	r3, r2, [r1]
 80121ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1e6      	bne.n	80121a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	3308      	adds	r3, #8
 80121d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	e853 3f00 	ldrex	r3, [r3]
 80121e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80121e8:	633b      	str	r3, [r7, #48]	; 0x30
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	3308      	adds	r3, #8
 80121f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121f2:	61ba      	str	r2, [r7, #24]
 80121f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121f6:	6979      	ldr	r1, [r7, #20]
 80121f8:	69ba      	ldr	r2, [r7, #24]
 80121fa:	e841 2300 	strex	r3, r2, [r1]
 80121fe:	613b      	str	r3, [r7, #16]
   return(result);
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1e5      	bne.n	80121d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2220      	movs	r2, #32
 801220a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801220e:	bf00      	nop
 8012210:	373c      	adds	r7, #60	; 0x3c
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
	...

0801221c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801221c:	b480      	push	{r7}
 801221e:	b095      	sub	sp, #84	; 0x54
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222c:	e853 3f00 	ldrex	r3, [r3]
 8012230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012238:	64fb      	str	r3, [r7, #76]	; 0x4c
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	461a      	mov	r2, r3
 8012240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012242:	643b      	str	r3, [r7, #64]	; 0x40
 8012244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801224a:	e841 2300 	strex	r3, r2, [r1]
 801224e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012252:	2b00      	cmp	r3, #0
 8012254:	d1e6      	bne.n	8012224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	3308      	adds	r3, #8
 801225c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	e853 3f00 	ldrex	r3, [r3]
 8012264:	61fb      	str	r3, [r7, #28]
   return(result);
 8012266:	69fa      	ldr	r2, [r7, #28]
 8012268:	4b1e      	ldr	r3, [pc, #120]	; (80122e4 <UART_EndRxTransfer+0xc8>)
 801226a:	4013      	ands	r3, r2
 801226c:	64bb      	str	r3, [r7, #72]	; 0x48
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	3308      	adds	r3, #8
 8012274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801227a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801227c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801227e:	e841 2300 	strex	r3, r2, [r1]
 8012282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	2b00      	cmp	r3, #0
 8012288:	d1e5      	bne.n	8012256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801228e:	2b01      	cmp	r3, #1
 8012290:	d118      	bne.n	80122c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	e853 3f00 	ldrex	r3, [r3]
 801229e:	60bb      	str	r3, [r7, #8]
   return(result);
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	f023 0310 	bic.w	r3, r3, #16
 80122a6:	647b      	str	r3, [r7, #68]	; 0x44
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	461a      	mov	r2, r3
 80122ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122b0:	61bb      	str	r3, [r7, #24]
 80122b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b4:	6979      	ldr	r1, [r7, #20]
 80122b6:	69ba      	ldr	r2, [r7, #24]
 80122b8:	e841 2300 	strex	r3, r2, [r1]
 80122bc:	613b      	str	r3, [r7, #16]
   return(result);
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1e6      	bne.n	8012292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2220      	movs	r2, #32
 80122c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80122d8:	bf00      	nop
 80122da:	3754      	adds	r7, #84	; 0x54
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr
 80122e4:	effffffe 	.word	0xeffffffe

080122e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b090      	sub	sp, #64	; 0x40
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	69db      	ldr	r3, [r3, #28]
 80122fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122fe:	d037      	beq.n	8012370 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012302:	2200      	movs	r2, #0
 8012304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	3308      	adds	r3, #8
 801230e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012312:	e853 3f00 	ldrex	r3, [r3]
 8012316:	623b      	str	r3, [r7, #32]
   return(result);
 8012318:	6a3b      	ldr	r3, [r7, #32]
 801231a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801231e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3308      	adds	r3, #8
 8012326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012328:	633a      	str	r2, [r7, #48]	; 0x30
 801232a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801232e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012330:	e841 2300 	strex	r3, r2, [r1]
 8012334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1e5      	bne.n	8012308 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	e853 3f00 	ldrex	r3, [r3]
 8012348:	60fb      	str	r3, [r7, #12]
   return(result);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012350:	637b      	str	r3, [r7, #52]	; 0x34
 8012352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	461a      	mov	r2, r3
 8012358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801235a:	61fb      	str	r3, [r7, #28]
 801235c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801235e:	69b9      	ldr	r1, [r7, #24]
 8012360:	69fa      	ldr	r2, [r7, #28]
 8012362:	e841 2300 	strex	r3, r2, [r1]
 8012366:	617b      	str	r3, [r7, #20]
   return(result);
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d1e6      	bne.n	801233c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801236e:	e002      	b.n	8012376 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012370:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012372:	f7f0 f86d 	bl	8002450 <HAL_UART_TxCpltCallback>
}
 8012376:	bf00      	nop
 8012378:	3740      	adds	r7, #64	; 0x40
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b084      	sub	sp, #16
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801238a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f7fe fe9f 	bl	80110d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012392:	bf00      	nop
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}

0801239a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b086      	sub	sp, #24
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123c2:	2b80      	cmp	r3, #128	; 0x80
 80123c4:	d109      	bne.n	80123da <UART_DMAError+0x40>
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	2b21      	cmp	r3, #33	; 0x21
 80123ca:	d106      	bne.n	80123da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80123d4:	6978      	ldr	r0, [r7, #20]
 80123d6:	f7ff fedf 	bl	8012198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	689b      	ldr	r3, [r3, #8]
 80123e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123e4:	2b40      	cmp	r3, #64	; 0x40
 80123e6:	d109      	bne.n	80123fc <UART_DMAError+0x62>
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2b22      	cmp	r3, #34	; 0x22
 80123ec:	d106      	bne.n	80123fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	2200      	movs	r2, #0
 80123f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80123f6:	6978      	ldr	r0, [r7, #20]
 80123f8:	f7ff ff10 	bl	801221c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012402:	f043 0210 	orr.w	r2, r3, #16
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801240c:	6978      	ldr	r0, [r7, #20]
 801240e:	f7fe fe69 	bl	80110e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012412:	bf00      	nop
 8012414:	3718      	adds	r7, #24
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801241a:	b580      	push	{r7, lr}
 801241c:	b084      	sub	sp, #16
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012426:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2200      	movs	r2, #0
 801242c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2200      	movs	r2, #0
 8012434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f7fe fe53 	bl	80110e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801243e:	bf00      	nop
 8012440:	3710      	adds	r7, #16
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b088      	sub	sp, #32
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	e853 3f00 	ldrex	r3, [r3]
 801245a:	60bb      	str	r3, [r7, #8]
   return(result);
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012462:	61fb      	str	r3, [r7, #28]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	461a      	mov	r2, r3
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	61bb      	str	r3, [r7, #24]
 801246e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012470:	6979      	ldr	r1, [r7, #20]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	e841 2300 	strex	r3, r2, [r1]
 8012478:	613b      	str	r3, [r7, #16]
   return(result);
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1e6      	bne.n	801244e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2220      	movs	r2, #32
 8012484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ef ffde 	bl	8002450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012494:	bf00      	nop
 8012496:	3720      	adds	r7, #32
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b09c      	sub	sp, #112	; 0x70
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124b4:	2b22      	cmp	r3, #34	; 0x22
 80124b6:	f040 80be 	bne.w	8012636 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80124c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80124c8:	b2d9      	uxtb	r1, r3
 80124ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80124ce:	b2da      	uxtb	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124d4:	400a      	ands	r2, r1
 80124d6:	b2d2      	uxtb	r2, r2
 80124d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124de:	1c5a      	adds	r2, r3, #1
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	3b01      	subs	r3, #1
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	2b00      	cmp	r3, #0
 8012500:	f040 80a1 	bne.w	8012646 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801250c:	e853 3f00 	ldrex	r3, [r3]
 8012510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012518:	66bb      	str	r3, [r7, #104]	; 0x68
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	461a      	mov	r2, r3
 8012520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012522:	65bb      	str	r3, [r7, #88]	; 0x58
 8012524:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012526:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801252a:	e841 2300 	strex	r3, r2, [r1]
 801252e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012532:	2b00      	cmp	r3, #0
 8012534:	d1e6      	bne.n	8012504 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	3308      	adds	r3, #8
 801253c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012540:	e853 3f00 	ldrex	r3, [r3]
 8012544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012548:	f023 0301 	bic.w	r3, r3, #1
 801254c:	667b      	str	r3, [r7, #100]	; 0x64
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	3308      	adds	r3, #8
 8012554:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012556:	647a      	str	r2, [r7, #68]	; 0x44
 8012558:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801255c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801255e:	e841 2300 	strex	r3, r2, [r1]
 8012562:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012566:	2b00      	cmp	r3, #0
 8012568:	d1e5      	bne.n	8012536 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2220      	movs	r2, #32
 801256e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	4a33      	ldr	r2, [pc, #204]	; (8012650 <UART_RxISR_8BIT+0x1b4>)
 8012584:	4293      	cmp	r3, r2
 8012586:	d01f      	beq.n	80125c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012592:	2b00      	cmp	r3, #0
 8012594:	d018      	beq.n	80125c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	e853 3f00 	ldrex	r3, [r3]
 80125a2:	623b      	str	r3, [r7, #32]
   return(result);
 80125a4:	6a3b      	ldr	r3, [r7, #32]
 80125a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125aa:	663b      	str	r3, [r7, #96]	; 0x60
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	461a      	mov	r2, r3
 80125b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125b4:	633b      	str	r3, [r7, #48]	; 0x30
 80125b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125bc:	e841 2300 	strex	r3, r2, [r1]
 80125c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80125c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d1e6      	bne.n	8012596 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d12e      	bne.n	801262e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	e853 3f00 	ldrex	r3, [r3]
 80125e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f023 0310 	bic.w	r3, r3, #16
 80125ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	461a      	mov	r2, r3
 80125f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125f4:	61fb      	str	r3, [r7, #28]
 80125f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f8:	69b9      	ldr	r1, [r7, #24]
 80125fa:	69fa      	ldr	r2, [r7, #28]
 80125fc:	e841 2300 	strex	r3, r2, [r1]
 8012600:	617b      	str	r3, [r7, #20]
   return(result);
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1e6      	bne.n	80125d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	69db      	ldr	r3, [r3, #28]
 801260e:	f003 0310 	and.w	r3, r3, #16
 8012612:	2b10      	cmp	r3, #16
 8012614:	d103      	bne.n	801261e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2210      	movs	r2, #16
 801261c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012624:	4619      	mov	r1, r3
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f7fe fd66 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801262c:	e00b      	b.n	8012646 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f7ee f82a 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012634:	e007      	b.n	8012646 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	699a      	ldr	r2, [r3, #24]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f042 0208 	orr.w	r2, r2, #8
 8012644:	619a      	str	r2, [r3, #24]
}
 8012646:	bf00      	nop
 8012648:	3770      	adds	r7, #112	; 0x70
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	58000c00 	.word	0x58000c00

08012654 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b09c      	sub	sp, #112	; 0x70
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012662:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801266c:	2b22      	cmp	r3, #34	; 0x22
 801266e:	f040 80be 	bne.w	80127ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012678:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012680:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012682:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012686:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801268a:	4013      	ands	r3, r2
 801268c:	b29a      	uxth	r2, r3
 801268e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012690:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012696:	1c9a      	adds	r2, r3, #2
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	3b01      	subs	r3, #1
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f040 80a1 	bne.w	80127fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126c4:	e853 3f00 	ldrex	r3, [r3]
 80126c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80126ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80126d0:	667b      	str	r3, [r7, #100]	; 0x64
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	461a      	mov	r2, r3
 80126d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126da:	657b      	str	r3, [r7, #84]	; 0x54
 80126dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80126e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80126e2:	e841 2300 	strex	r3, r2, [r1]
 80126e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80126e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1e6      	bne.n	80126bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	3308      	adds	r3, #8
 80126f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f8:	e853 3f00 	ldrex	r3, [r3]
 80126fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80126fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012700:	f023 0301 	bic.w	r3, r3, #1
 8012704:	663b      	str	r3, [r7, #96]	; 0x60
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	3308      	adds	r3, #8
 801270c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801270e:	643a      	str	r2, [r7, #64]	; 0x40
 8012710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012716:	e841 2300 	strex	r3, r2, [r1]
 801271a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1e5      	bne.n	80126ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2220      	movs	r2, #32
 8012726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2200      	movs	r2, #0
 801272e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a33      	ldr	r2, [pc, #204]	; (8012808 <UART_RxISR_16BIT+0x1b4>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d01f      	beq.n	8012780 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801274a:	2b00      	cmp	r3, #0
 801274c:	d018      	beq.n	8012780 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012754:	6a3b      	ldr	r3, [r7, #32]
 8012756:	e853 3f00 	ldrex	r3, [r3]
 801275a:	61fb      	str	r3, [r7, #28]
   return(result);
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	461a      	mov	r2, r3
 801276a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801276c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801276e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012774:	e841 2300 	strex	r3, r2, [r1]
 8012778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277c:	2b00      	cmp	r3, #0
 801277e:	d1e6      	bne.n	801274e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012784:	2b01      	cmp	r3, #1
 8012786:	d12e      	bne.n	80127e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	e853 3f00 	ldrex	r3, [r3]
 801279a:	60bb      	str	r3, [r7, #8]
   return(result);
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	f023 0310 	bic.w	r3, r3, #16
 80127a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	461a      	mov	r2, r3
 80127aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127ac:	61bb      	str	r3, [r7, #24]
 80127ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127b0:	6979      	ldr	r1, [r7, #20]
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	e841 2300 	strex	r3, r2, [r1]
 80127b8:	613b      	str	r3, [r7, #16]
   return(result);
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d1e6      	bne.n	801278e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	69db      	ldr	r3, [r3, #28]
 80127c6:	f003 0310 	and.w	r3, r3, #16
 80127ca:	2b10      	cmp	r3, #16
 80127cc:	d103      	bne.n	80127d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2210      	movs	r2, #16
 80127d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127dc:	4619      	mov	r1, r3
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7fe fc8a 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80127e4:	e00b      	b.n	80127fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7ed ff4e 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80127ec:	e007      	b.n	80127fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	699a      	ldr	r2, [r3, #24]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f042 0208 	orr.w	r2, r2, #8
 80127fc:	619a      	str	r2, [r3, #24]
}
 80127fe:	bf00      	nop
 8012800:	3770      	adds	r7, #112	; 0x70
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	58000c00 	.word	0x58000c00

0801280c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b0ac      	sub	sp, #176	; 0xb0
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801281a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	69db      	ldr	r3, [r3, #28]
 8012824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012842:	2b22      	cmp	r3, #34	; 0x22
 8012844:	f040 8180 	bne.w	8012b48 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801284e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012852:	e123      	b.n	8012a9c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801285a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801285e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012862:	b2d9      	uxtb	r1, r3
 8012864:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012868:	b2da      	uxtb	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801286e:	400a      	ands	r2, r1
 8012870:	b2d2      	uxtb	r2, r2
 8012872:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012878:	1c5a      	adds	r2, r3, #1
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012884:	b29b      	uxth	r3, r3
 8012886:	3b01      	subs	r3, #1
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801289a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801289e:	f003 0307 	and.w	r3, r3, #7
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d053      	beq.n	801294e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80128a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128aa:	f003 0301 	and.w	r3, r3, #1
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d011      	beq.n	80128d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80128b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80128b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00b      	beq.n	80128d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2201      	movs	r2, #1
 80128c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128cc:	f043 0201 	orr.w	r2, r3, #1
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80128d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128da:	f003 0302 	and.w	r3, r3, #2
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d011      	beq.n	8012906 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80128e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128e6:	f003 0301 	and.w	r3, r3, #1
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00b      	beq.n	8012906 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2202      	movs	r2, #2
 80128f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128fc:	f043 0204 	orr.w	r2, r3, #4
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801290a:	f003 0304 	and.w	r3, r3, #4
 801290e:	2b00      	cmp	r3, #0
 8012910:	d011      	beq.n	8012936 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012916:	f003 0301 	and.w	r3, r3, #1
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00b      	beq.n	8012936 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	2204      	movs	r2, #4
 8012924:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801292c:	f043 0202 	orr.w	r2, r3, #2
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801293c:	2b00      	cmp	r3, #0
 801293e:	d006      	beq.n	801294e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7fe fbcf 	bl	80110e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012954:	b29b      	uxth	r3, r3
 8012956:	2b00      	cmp	r3, #0
 8012958:	f040 80a0 	bne.w	8012a9c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012964:	e853 3f00 	ldrex	r3, [r3]
 8012968:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801296c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	461a      	mov	r2, r3
 801297a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801297e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012980:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012982:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012984:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012986:	e841 2300 	strex	r3, r2, [r1]
 801298a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801298c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1e4      	bne.n	801295c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	3308      	adds	r3, #8
 8012998:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801299a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801299c:	e853 3f00 	ldrex	r3, [r3]
 80129a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80129a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129a4:	4b6e      	ldr	r3, [pc, #440]	; (8012b60 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80129a6:	4013      	ands	r3, r2
 80129a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	3308      	adds	r3, #8
 80129b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80129b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80129b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80129bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80129be:	e841 2300 	strex	r3, r2, [r1]
 80129c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80129c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1e3      	bne.n	8012992 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2220      	movs	r2, #32
 80129ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2200      	movs	r2, #0
 80129d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a60      	ldr	r2, [pc, #384]	; (8012b64 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80129e4:	4293      	cmp	r3, r2
 80129e6:	d021      	beq.n	8012a2c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d01a      	beq.n	8012a2c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129fe:	e853 3f00 	ldrex	r3, [r3]
 8012a02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	461a      	mov	r2, r3
 8012a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a18:	657b      	str	r3, [r7, #84]	; 0x54
 8012a1a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a20:	e841 2300 	strex	r3, r2, [r1]
 8012a24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d1e4      	bne.n	80129f6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d130      	bne.n	8012a96 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2200      	movs	r2, #0
 8012a38:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a42:	e853 3f00 	ldrex	r3, [r3]
 8012a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4a:	f023 0310 	bic.w	r3, r3, #16
 8012a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	461a      	mov	r2, r3
 8012a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8012a5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a64:	e841 2300 	strex	r3, r2, [r1]
 8012a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d1e4      	bne.n	8012a3a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	69db      	ldr	r3, [r3, #28]
 8012a76:	f003 0310 	and.w	r3, r3, #16
 8012a7a:	2b10      	cmp	r3, #16
 8012a7c:	d103      	bne.n	8012a86 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2210      	movs	r2, #16
 8012a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f7fe fb32 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
 8012a94:	e002      	b.n	8012a9c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f7ed fdf6 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d006      	beq.n	8012ab2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012aa8:	f003 0320 	and.w	r3, r3, #32
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f47f aed1 	bne.w	8012854 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ab8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012abc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d049      	beq.n	8012b58 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012aca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d242      	bcs.n	8012b58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ada:	6a3b      	ldr	r3, [r7, #32]
 8012adc:	e853 3f00 	ldrex	r3, [r3]
 8012ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	3308      	adds	r3, #8
 8012af2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012afe:	e841 2300 	strex	r3, r2, [r1]
 8012b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1e3      	bne.n	8012ad2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4a16      	ldr	r2, [pc, #88]	; (8012b68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012b0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	e853 3f00 	ldrex	r3, [r3]
 8012b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	f043 0320 	orr.w	r3, r3, #32
 8012b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b32:	61bb      	str	r3, [r7, #24]
 8012b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b36:	6979      	ldr	r1, [r7, #20]
 8012b38:	69ba      	ldr	r2, [r7, #24]
 8012b3a:	e841 2300 	strex	r3, r2, [r1]
 8012b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1e4      	bne.n	8012b10 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012b46:	e007      	b.n	8012b58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	699a      	ldr	r2, [r3, #24]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	f042 0208 	orr.w	r2, r2, #8
 8012b56:	619a      	str	r2, [r3, #24]
}
 8012b58:	bf00      	nop
 8012b5a:	37b0      	adds	r7, #176	; 0xb0
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	effffffe 	.word	0xeffffffe
 8012b64:	58000c00 	.word	0x58000c00
 8012b68:	0801249d 	.word	0x0801249d

08012b6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b0ae      	sub	sp, #184	; 0xb8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	69db      	ldr	r3, [r3, #28]
 8012b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	689b      	ldr	r3, [r3, #8]
 8012b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ba2:	2b22      	cmp	r3, #34	; 0x22
 8012ba4:	f040 8184 	bne.w	8012eb0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012bae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012bb2:	e127      	b.n	8012e04 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012bc6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012bca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012bce:	4013      	ands	r3, r2
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012bd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bdc:	1c9a      	adds	r2, r3, #2
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	3b01      	subs	r3, #1
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	69db      	ldr	r3, [r3, #28]
 8012bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c02:	f003 0307 	and.w	r3, r3, #7
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d053      	beq.n	8012cb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c0e:	f003 0301 	and.w	r3, r3, #1
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d011      	beq.n	8012c3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d00b      	beq.n	8012c3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2201      	movs	r2, #1
 8012c28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c30:	f043 0201 	orr.w	r2, r3, #1
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c3e:	f003 0302 	and.w	r3, r3, #2
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d011      	beq.n	8012c6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012c4a:	f003 0301 	and.w	r3, r3, #1
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00b      	beq.n	8012c6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2202      	movs	r2, #2
 8012c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c60:	f043 0204 	orr.w	r2, r3, #4
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c6e:	f003 0304 	and.w	r3, r3, #4
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d011      	beq.n	8012c9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012c7a:	f003 0301 	and.w	r3, r3, #1
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d00b      	beq.n	8012c9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2204      	movs	r2, #4
 8012c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c90:	f043 0202 	orr.w	r2, r3, #2
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d006      	beq.n	8012cb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7fe fa1d 	bl	80110e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	f040 80a2 	bne.w	8012e04 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012cc8:	e853 3f00 	ldrex	r3, [r3]
 8012ccc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	461a      	mov	r2, r3
 8012cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012cee:	e841 2300 	strex	r3, r2, [r1]
 8012cf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1e2      	bne.n	8012cc0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	3308      	adds	r3, #8
 8012d00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d04:	e853 3f00 	ldrex	r3, [r3]
 8012d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012d0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012d0c:	4b6e      	ldr	r3, [pc, #440]	; (8012ec8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012d0e:	4013      	ands	r3, r2
 8012d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	3308      	adds	r3, #8
 8012d1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012d26:	e841 2300 	strex	r3, r2, [r1]
 8012d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1e3      	bne.n	8012cfa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2220      	movs	r2, #32
 8012d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2200      	movs	r2, #0
 8012d44:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4a60      	ldr	r2, [pc, #384]	; (8012ecc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d021      	beq.n	8012d94 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d01a      	beq.n	8012d94 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d66:	e853 3f00 	ldrex	r3, [r3]
 8012d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8012d82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d88:	e841 2300 	strex	r3, r2, [r1]
 8012d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d1e4      	bne.n	8012d5e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	d130      	bne.n	8012dfe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012daa:	e853 3f00 	ldrex	r3, [r3]
 8012dae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012db2:	f023 0310 	bic.w	r3, r3, #16
 8012db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8012dc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dcc:	e841 2300 	strex	r3, r2, [r1]
 8012dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d1e4      	bne.n	8012da2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	69db      	ldr	r3, [r3, #28]
 8012dde:	f003 0310 	and.w	r3, r3, #16
 8012de2:	2b10      	cmp	r3, #16
 8012de4:	d103      	bne.n	8012dee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2210      	movs	r2, #16
 8012dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012df4:	4619      	mov	r1, r3
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f7fe f97e 	bl	80110f8 <HAL_UARTEx_RxEventCallback>
 8012dfc:	e002      	b.n	8012e04 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ed fc42 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012e04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d006      	beq.n	8012e1a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e10:	f003 0320 	and.w	r3, r3, #32
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	f47f aecd 	bne.w	8012bb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e20:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012e24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d049      	beq.n	8012ec0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012e32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d242      	bcs.n	8012ec0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	3308      	adds	r3, #8
 8012e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e44:	e853 3f00 	ldrex	r3, [r3]
 8012e48:	623b      	str	r3, [r7, #32]
   return(result);
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	3308      	adds	r3, #8
 8012e5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8012e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e66:	e841 2300 	strex	r3, r2, [r1]
 8012e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d1e3      	bne.n	8012e3a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4a16      	ldr	r2, [pc, #88]	; (8012ed0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012e76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	e853 3f00 	ldrex	r3, [r3]
 8012e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f043 0320 	orr.w	r3, r3, #32
 8012e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	461a      	mov	r2, r3
 8012e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e9a:	61fb      	str	r3, [r7, #28]
 8012e9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e9e:	69b9      	ldr	r1, [r7, #24]
 8012ea0:	69fa      	ldr	r2, [r7, #28]
 8012ea2:	e841 2300 	strex	r3, r2, [r1]
 8012ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d1e4      	bne.n	8012e78 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012eae:	e007      	b.n	8012ec0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	699a      	ldr	r2, [r3, #24]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f042 0208 	orr.w	r2, r2, #8
 8012ebe:	619a      	str	r2, [r3, #24]
}
 8012ec0:	bf00      	nop
 8012ec2:	37b8      	adds	r7, #184	; 0xb8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	effffffe 	.word	0xeffffffe
 8012ecc:	58000c00 	.word	0x58000c00
 8012ed0:	08012655 	.word	0x08012655

08012ed4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012edc:	bf00      	nop
 8012ede:	370c      	adds	r7, #12
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr

08012ee8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b083      	sub	sp, #12
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr

08012efc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b083      	sub	sp, #12
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012f04:	bf00      	nop
 8012f06:	370c      	adds	r7, #12
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b089      	sub	sp, #36	; 0x24
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d101      	bne.n	8012f26 <HAL_UARTEx_EnableStopMode+0x16>
 8012f22:	2302      	movs	r3, #2
 8012f24:	e021      	b.n	8012f6a <HAL_UARTEx_EnableStopMode+0x5a>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	e853 3f00 	ldrex	r3, [r3]
 8012f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	f043 0302 	orr.w	r3, r3, #2
 8012f42:	61fb      	str	r3, [r7, #28]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	461a      	mov	r2, r3
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	61bb      	str	r3, [r7, #24]
 8012f4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f50:	6979      	ldr	r1, [r7, #20]
 8012f52:	69ba      	ldr	r2, [r7, #24]
 8012f54:	e841 2300 	strex	r3, r2, [r1]
 8012f58:	613b      	str	r3, [r7, #16]
   return(result);
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d1e6      	bne.n	8012f2e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f68:	2300      	movs	r3, #0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3724      	adds	r7, #36	; 0x24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr

08012f76 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012f76:	b580      	push	{r7, lr}
 8012f78:	b084      	sub	sp, #16
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d101      	bne.n	8012f8c <HAL_UARTEx_EnableFifoMode+0x16>
 8012f88:	2302      	movs	r3, #2
 8012f8a:	e02b      	b.n	8012fe4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2201      	movs	r2, #1
 8012f90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2224      	movs	r2, #36	; 0x24
 8012f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f022 0201 	bic.w	r2, r2, #1
 8012fb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012fba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012fc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 f8c3 	bl	8013158 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2220      	movs	r2, #32
 8012fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012fe2:	2300      	movs	r3, #0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012fec:	b480      	push	{r7}
 8012fee:	b085      	sub	sp, #20
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d101      	bne.n	8013002 <HAL_UARTEx_DisableFifoMode+0x16>
 8012ffe:	2302      	movs	r3, #2
 8013000:	e027      	b.n	8013052 <HAL_UARTEx_DisableFifoMode+0x66>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2201      	movs	r2, #1
 8013006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2224      	movs	r2, #36	; 0x24
 801300e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f022 0201 	bic.w	r2, r2, #1
 8013028:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013030:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2220      	movs	r2, #32
 8013044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2200      	movs	r2, #0
 801304c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013050:	2300      	movs	r3, #0
}
 8013052:	4618      	mov	r0, r3
 8013054:	3714      	adds	r7, #20
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr

0801305e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b084      	sub	sp, #16
 8013062:	af00      	add	r7, sp, #0
 8013064:	6078      	str	r0, [r7, #4]
 8013066:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801306e:	2b01      	cmp	r3, #1
 8013070:	d101      	bne.n	8013076 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013072:	2302      	movs	r3, #2
 8013074:	e02d      	b.n	80130d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2201      	movs	r2, #1
 801307a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2224      	movs	r2, #36	; 0x24
 8013082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f022 0201 	bic.w	r2, r2, #1
 801309c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	689b      	ldr	r3, [r3, #8]
 80130a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	430a      	orrs	r2, r1
 80130b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f000 f850 	bl	8013158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2220      	movs	r2, #32
 80130c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80130d0:	2300      	movs	r3, #0
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b084      	sub	sp, #16
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
 80130e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	d101      	bne.n	80130f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80130ee:	2302      	movs	r3, #2
 80130f0:	e02d      	b.n	801314e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2201      	movs	r2, #1
 80130f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2224      	movs	r2, #36	; 0x24
 80130fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	681a      	ldr	r2, [r3, #0]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	f022 0201 	bic.w	r2, r2, #1
 8013118:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	689b      	ldr	r3, [r3, #8]
 8013120:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	683a      	ldr	r2, [r7, #0]
 801312a:	430a      	orrs	r2, r1
 801312c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 f812 	bl	8013158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	68fa      	ldr	r2, [r7, #12]
 801313a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2220      	movs	r2, #32
 8013140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2200      	movs	r2, #0
 8013148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3710      	adds	r7, #16
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
	...

08013158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013158:	b480      	push	{r7}
 801315a:	b085      	sub	sp, #20
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013164:	2b00      	cmp	r3, #0
 8013166:	d108      	bne.n	801317a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2201      	movs	r2, #1
 8013174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013178:	e031      	b.n	80131de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801317a:	2310      	movs	r3, #16
 801317c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801317e:	2310      	movs	r3, #16
 8013180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	0e5b      	lsrs	r3, r3, #25
 801318a:	b2db      	uxtb	r3, r3
 801318c:	f003 0307 	and.w	r3, r3, #7
 8013190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	0f5b      	lsrs	r3, r3, #29
 801319a:	b2db      	uxtb	r3, r3
 801319c:	f003 0307 	and.w	r3, r3, #7
 80131a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80131a2:	7bbb      	ldrb	r3, [r7, #14]
 80131a4:	7b3a      	ldrb	r2, [r7, #12]
 80131a6:	4911      	ldr	r1, [pc, #68]	; (80131ec <UARTEx_SetNbDataToProcess+0x94>)
 80131a8:	5c8a      	ldrb	r2, [r1, r2]
 80131aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80131ae:	7b3a      	ldrb	r2, [r7, #12]
 80131b0:	490f      	ldr	r1, [pc, #60]	; (80131f0 <UARTEx_SetNbDataToProcess+0x98>)
 80131b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80131b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80131c0:	7bfb      	ldrb	r3, [r7, #15]
 80131c2:	7b7a      	ldrb	r2, [r7, #13]
 80131c4:	4909      	ldr	r1, [pc, #36]	; (80131ec <UARTEx_SetNbDataToProcess+0x94>)
 80131c6:	5c8a      	ldrb	r2, [r1, r2]
 80131c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80131cc:	7b7a      	ldrb	r2, [r7, #13]
 80131ce:	4908      	ldr	r1, [pc, #32]	; (80131f0 <UARTEx_SetNbDataToProcess+0x98>)
 80131d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80131d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80131d6:	b29a      	uxth	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80131de:	bf00      	nop
 80131e0:	3714      	adds	r7, #20
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	08017b94 	.word	0x08017b94
 80131f0:	08017b9c 	.word	0x08017b9c

080131f4 <__NVIC_SetPriority>:
{
 80131f4:	b480      	push	{r7}
 80131f6:	b083      	sub	sp, #12
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	4603      	mov	r3, r0
 80131fc:	6039      	str	r1, [r7, #0]
 80131fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013204:	2b00      	cmp	r3, #0
 8013206:	db0a      	blt.n	801321e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	b2da      	uxtb	r2, r3
 801320c:	490c      	ldr	r1, [pc, #48]	; (8013240 <__NVIC_SetPriority+0x4c>)
 801320e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013212:	0112      	lsls	r2, r2, #4
 8013214:	b2d2      	uxtb	r2, r2
 8013216:	440b      	add	r3, r1
 8013218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801321c:	e00a      	b.n	8013234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	b2da      	uxtb	r2, r3
 8013222:	4908      	ldr	r1, [pc, #32]	; (8013244 <__NVIC_SetPriority+0x50>)
 8013224:	88fb      	ldrh	r3, [r7, #6]
 8013226:	f003 030f 	and.w	r3, r3, #15
 801322a:	3b04      	subs	r3, #4
 801322c:	0112      	lsls	r2, r2, #4
 801322e:	b2d2      	uxtb	r2, r2
 8013230:	440b      	add	r3, r1
 8013232:	761a      	strb	r2, [r3, #24]
}
 8013234:	bf00      	nop
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr
 8013240:	e000e100 	.word	0xe000e100
 8013244:	e000ed00 	.word	0xe000ed00

08013248 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013248:	b580      	push	{r7, lr}
 801324a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <SysTick_Handler+0x1c>)
 801324e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013250:	f002 fc92 	bl	8015b78 <xTaskGetSchedulerState>
 8013254:	4603      	mov	r3, r0
 8013256:	2b01      	cmp	r3, #1
 8013258:	d001      	beq.n	801325e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801325a:	f003 fab5 	bl	80167c8 <xPortSysTickHandler>
  }
}
 801325e:	bf00      	nop
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	e000e010 	.word	0xe000e010

08013268 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013268:	b580      	push	{r7, lr}
 801326a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801326c:	2100      	movs	r1, #0
 801326e:	f06f 0004 	mvn.w	r0, #4
 8013272:	f7ff ffbf 	bl	80131f4 <__NVIC_SetPriority>
#endif
}
 8013276:	bf00      	nop
 8013278:	bd80      	pop	{r7, pc}
	...

0801327c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013282:	f3ef 8305 	mrs	r3, IPSR
 8013286:	603b      	str	r3, [r7, #0]
  return(result);
 8013288:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801328a:	2b00      	cmp	r3, #0
 801328c:	d003      	beq.n	8013296 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801328e:	f06f 0305 	mvn.w	r3, #5
 8013292:	607b      	str	r3, [r7, #4]
 8013294:	e00c      	b.n	80132b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013296:	4b0a      	ldr	r3, [pc, #40]	; (80132c0 <osKernelInitialize+0x44>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d105      	bne.n	80132aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801329e:	4b08      	ldr	r3, [pc, #32]	; (80132c0 <osKernelInitialize+0x44>)
 80132a0:	2201      	movs	r2, #1
 80132a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80132a4:	2300      	movs	r3, #0
 80132a6:	607b      	str	r3, [r7, #4]
 80132a8:	e002      	b.n	80132b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80132aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80132b0:	687b      	ldr	r3, [r7, #4]
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	24001130 	.word	0x24001130

080132c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132ca:	f3ef 8305 	mrs	r3, IPSR
 80132ce:	603b      	str	r3, [r7, #0]
  return(result);
 80132d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d003      	beq.n	80132de <osKernelStart+0x1a>
    stat = osErrorISR;
 80132d6:	f06f 0305 	mvn.w	r3, #5
 80132da:	607b      	str	r3, [r7, #4]
 80132dc:	e010      	b.n	8013300 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80132de:	4b0b      	ldr	r3, [pc, #44]	; (801330c <osKernelStart+0x48>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d109      	bne.n	80132fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80132e6:	f7ff ffbf 	bl	8013268 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80132ea:	4b08      	ldr	r3, [pc, #32]	; (801330c <osKernelStart+0x48>)
 80132ec:	2202      	movs	r2, #2
 80132ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80132f0:	f001 ff54 	bl	801519c <vTaskStartScheduler>
      stat = osOK;
 80132f4:	2300      	movs	r3, #0
 80132f6:	607b      	str	r3, [r7, #4]
 80132f8:	e002      	b.n	8013300 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80132fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013300:	687b      	ldr	r3, [r7, #4]
}
 8013302:	4618      	mov	r0, r3
 8013304:	3708      	adds	r7, #8
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop
 801330c:	24001130 	.word	0x24001130

08013310 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013310:	b580      	push	{r7, lr}
 8013312:	b08e      	sub	sp, #56	; 0x38
 8013314:	af04      	add	r7, sp, #16
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801331c:	2300      	movs	r3, #0
 801331e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013320:	f3ef 8305 	mrs	r3, IPSR
 8013324:	617b      	str	r3, [r7, #20]
  return(result);
 8013326:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013328:	2b00      	cmp	r3, #0
 801332a:	d17e      	bne.n	801342a <osThreadNew+0x11a>
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d07b      	beq.n	801342a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013332:	2380      	movs	r3, #128	; 0x80
 8013334:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013336:	2318      	movs	r3, #24
 8013338:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801333a:	2300      	movs	r3, #0
 801333c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801333e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013342:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d045      	beq.n	80133d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <osThreadNew+0x48>
        name = attr->name;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	699b      	ldr	r3, [r3, #24]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d002      	beq.n	8013366 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	699b      	ldr	r3, [r3, #24]
 8013364:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013366:	69fb      	ldr	r3, [r7, #28]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d008      	beq.n	801337e <osThreadNew+0x6e>
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	2b38      	cmp	r3, #56	; 0x38
 8013370:	d805      	bhi.n	801337e <osThreadNew+0x6e>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	f003 0301 	and.w	r3, r3, #1
 801337a:	2b00      	cmp	r3, #0
 801337c:	d001      	beq.n	8013382 <osThreadNew+0x72>
        return (NULL);
 801337e:	2300      	movs	r3, #0
 8013380:	e054      	b.n	801342c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	695b      	ldr	r3, [r3, #20]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d003      	beq.n	8013392 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	695b      	ldr	r3, [r3, #20]
 801338e:	089b      	lsrs	r3, r3, #2
 8013390:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d00e      	beq.n	80133b8 <osThreadNew+0xa8>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	68db      	ldr	r3, [r3, #12]
 801339e:	2b5b      	cmp	r3, #91	; 0x5b
 80133a0:	d90a      	bls.n	80133b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d006      	beq.n	80133b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	695b      	ldr	r3, [r3, #20]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d002      	beq.n	80133b8 <osThreadNew+0xa8>
        mem = 1;
 80133b2:	2301      	movs	r3, #1
 80133b4:	61bb      	str	r3, [r7, #24]
 80133b6:	e010      	b.n	80133da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	689b      	ldr	r3, [r3, #8]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d10c      	bne.n	80133da <osThreadNew+0xca>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d108      	bne.n	80133da <osThreadNew+0xca>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d104      	bne.n	80133da <osThreadNew+0xca>
          mem = 0;
 80133d0:	2300      	movs	r3, #0
 80133d2:	61bb      	str	r3, [r7, #24]
 80133d4:	e001      	b.n	80133da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80133d6:	2300      	movs	r3, #0
 80133d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d110      	bne.n	8013402 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80133e8:	9202      	str	r2, [sp, #8]
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	69fb      	ldr	r3, [r7, #28]
 80133ee:	9300      	str	r3, [sp, #0]
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	6a3a      	ldr	r2, [r7, #32]
 80133f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	f001 fbe0 	bl	8014bbc <xTaskCreateStatic>
 80133fc:	4603      	mov	r3, r0
 80133fe:	613b      	str	r3, [r7, #16]
 8013400:	e013      	b.n	801342a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d110      	bne.n	801342a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013408:	6a3b      	ldr	r3, [r7, #32]
 801340a:	b29a      	uxth	r2, r3
 801340c:	f107 0310 	add.w	r3, r7, #16
 8013410:	9301      	str	r3, [sp, #4]
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	9300      	str	r3, [sp, #0]
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f001 fc2b 	bl	8014c76 <xTaskCreate>
 8013420:	4603      	mov	r3, r0
 8013422:	2b01      	cmp	r3, #1
 8013424:	d001      	beq.n	801342a <osThreadNew+0x11a>
            hTask = NULL;
 8013426:	2300      	movs	r3, #0
 8013428:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801342a:	693b      	ldr	r3, [r7, #16]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3728      	adds	r7, #40	; 0x28
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}

08013434 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013434:	b480      	push	{r7}
 8013436:	b083      	sub	sp, #12
 8013438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801343a:	f3ef 8305 	mrs	r3, IPSR
 801343e:	603b      	str	r3, [r7, #0]
  return(result);
 8013440:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013442:	2b00      	cmp	r3, #0
 8013444:	d003      	beq.n	801344e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013446:	f06f 0305 	mvn.w	r3, #5
 801344a:	607b      	str	r3, [r7, #4]
 801344c:	e009      	b.n	8013462 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801344e:	2300      	movs	r3, #0
 8013450:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013452:	4b07      	ldr	r3, [pc, #28]	; (8013470 <osThreadYield+0x3c>)
 8013454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013458:	601a      	str	r2, [r3, #0]
 801345a:	f3bf 8f4f 	dsb	sy
 801345e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013462:	687b      	ldr	r3, [r7, #4]
}
 8013464:	4618      	mov	r0, r3
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr
 8013470:	e000ed04 	.word	0xe000ed04

08013474 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013474:	b580      	push	{r7, lr}
 8013476:	b086      	sub	sp, #24
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013480:	f3ef 8305 	mrs	r3, IPSR
 8013484:	60fb      	str	r3, [r7, #12]
  return(result);
 8013486:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013488:	2b00      	cmp	r3, #0
 801348a:	d003      	beq.n	8013494 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801348c:	f06f 0305 	mvn.w	r3, #5
 8013490:	617b      	str	r3, [r7, #20]
 8013492:	e00b      	b.n	80134ac <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d103      	bne.n	80134a2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801349a:	f06f 0303 	mvn.w	r3, #3
 801349e:	617b      	str	r3, [r7, #20]
 80134a0:	e004      	b.n	80134ac <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80134a2:	2300      	movs	r3, #0
 80134a4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80134a6:	6938      	ldr	r0, [r7, #16]
 80134a8:	f001 fd5e 	bl	8014f68 <vTaskSuspend>
  }

  return (stat);
 80134ac:	697b      	ldr	r3, [r7, #20]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3718      	adds	r7, #24
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b084      	sub	sp, #16
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134be:	f3ef 8305 	mrs	r3, IPSR
 80134c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80134c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d003      	beq.n	80134d2 <osDelay+0x1c>
    stat = osErrorISR;
 80134ca:	f06f 0305 	mvn.w	r3, #5
 80134ce:	60fb      	str	r3, [r7, #12]
 80134d0:	e007      	b.n	80134e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80134d2:	2300      	movs	r3, #0
 80134d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f001 fd0f 	bl	8014f00 <vTaskDelay>
    }
  }

  return (stat);
 80134e2:	68fb      	ldr	r3, [r7, #12]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b086      	sub	sp, #24
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80134f4:	2300      	movs	r3, #0
 80134f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134f8:	f3ef 8305 	mrs	r3, IPSR
 80134fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80134fe:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013500:	2b00      	cmp	r3, #0
 8013502:	d12d      	bne.n	8013560 <osEventFlagsNew+0x74>
    mem = -1;
 8013504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013508:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d015      	beq.n	801353c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d006      	beq.n	8013526 <osEventFlagsNew+0x3a>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	2b1f      	cmp	r3, #31
 801351e:	d902      	bls.n	8013526 <osEventFlagsNew+0x3a>
        mem = 1;
 8013520:	2301      	movs	r3, #1
 8013522:	613b      	str	r3, [r7, #16]
 8013524:	e00c      	b.n	8013540 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d108      	bne.n	8013540 <osEventFlagsNew+0x54>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d104      	bne.n	8013540 <osEventFlagsNew+0x54>
          mem = 0;
 8013536:	2300      	movs	r3, #0
 8013538:	613b      	str	r3, [r7, #16]
 801353a:	e001      	b.n	8013540 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801353c:	2300      	movs	r3, #0
 801353e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d106      	bne.n	8013554 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	4618      	mov	r0, r3
 801354c:	f000 fa70 	bl	8013a30 <xEventGroupCreateStatic>
 8013550:	6178      	str	r0, [r7, #20]
 8013552:	e005      	b.n	8013560 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801355a:	f000 faa0 	bl	8013a9e <xEventGroupCreate>
 801355e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013560:	697b      	ldr	r3, [r7, #20]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3718      	adds	r7, #24
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
	...

0801356c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d004      	beq.n	801358a <osEventFlagsSet+0x1e>
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013586:	2b00      	cmp	r3, #0
 8013588:	d003      	beq.n	8013592 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801358a:	f06f 0303 	mvn.w	r3, #3
 801358e:	617b      	str	r3, [r7, #20]
 8013590:	e028      	b.n	80135e4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013592:	f3ef 8305 	mrs	r3, IPSR
 8013596:	60fb      	str	r3, [r7, #12]
  return(result);
 8013598:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801359a:	2b00      	cmp	r3, #0
 801359c:	d01d      	beq.n	80135da <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801359e:	2300      	movs	r3, #0
 80135a0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80135a2:	f107 0308 	add.w	r3, r7, #8
 80135a6:	461a      	mov	r2, r3
 80135a8:	6839      	ldr	r1, [r7, #0]
 80135aa:	6938      	ldr	r0, [r7, #16]
 80135ac:	f000 fc98 	bl	8013ee0 <xEventGroupSetBitsFromISR>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d103      	bne.n	80135be <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80135b6:	f06f 0302 	mvn.w	r3, #2
 80135ba:	617b      	str	r3, [r7, #20]
 80135bc:	e012      	b.n	80135e4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00d      	beq.n	80135e4 <osEventFlagsSet+0x78>
 80135c8:	4b09      	ldr	r3, [pc, #36]	; (80135f0 <osEventFlagsSet+0x84>)
 80135ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ce:	601a      	str	r2, [r3, #0]
 80135d0:	f3bf 8f4f 	dsb	sy
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	e004      	b.n	80135e4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80135da:	6839      	ldr	r1, [r7, #0]
 80135dc:	6938      	ldr	r0, [r7, #16]
 80135de:	f000 fbb7 	bl	8013d50 <xEventGroupSetBits>
 80135e2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80135e4:	697b      	ldr	r3, [r7, #20]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3718      	adds	r7, #24
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	e000ed04 	.word	0xe000ed04

080135f4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b086      	sub	sp, #24
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d004      	beq.n	8013612 <osEventFlagsClear+0x1e>
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801360e:	2b00      	cmp	r3, #0
 8013610:	d003      	beq.n	801361a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013612:	f06f 0303 	mvn.w	r3, #3
 8013616:	617b      	str	r3, [r7, #20]
 8013618:	e019      	b.n	801364e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801361a:	f3ef 8305 	mrs	r3, IPSR
 801361e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013620:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00e      	beq.n	8013644 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013626:	6938      	ldr	r0, [r7, #16]
 8013628:	f000 fb6e 	bl	8013d08 <xEventGroupGetBitsFromISR>
 801362c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801362e:	6839      	ldr	r1, [r7, #0]
 8013630:	6938      	ldr	r0, [r7, #16]
 8013632:	f000 fb55 	bl	8013ce0 <xEventGroupClearBitsFromISR>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d108      	bne.n	801364e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801363c:	f06f 0302 	mvn.w	r3, #2
 8013640:	617b      	str	r3, [r7, #20]
 8013642:	e004      	b.n	801364e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013644:	6839      	ldr	r1, [r7, #0]
 8013646:	6938      	ldr	r0, [r7, #16]
 8013648:	f000 fb12 	bl	8013c70 <xEventGroupClearBits>
 801364c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801364e:	697b      	ldr	r3, [r7, #20]
}
 8013650:	4618      	mov	r0, r3
 8013652:	3718      	adds	r7, #24
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}

08013658 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013658:	b580      	push	{r7, lr}
 801365a:	b086      	sub	sp, #24
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d102      	bne.n	8013670 <osEventFlagsGet+0x18>
    rflags = 0U;
 801366a:	2300      	movs	r3, #0
 801366c:	617b      	str	r3, [r7, #20]
 801366e:	e00f      	b.n	8013690 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013670:	f3ef 8305 	mrs	r3, IPSR
 8013674:	60fb      	str	r3, [r7, #12]
  return(result);
 8013676:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013678:	2b00      	cmp	r3, #0
 801367a:	d004      	beq.n	8013686 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801367c:	6938      	ldr	r0, [r7, #16]
 801367e:	f000 fb43 	bl	8013d08 <xEventGroupGetBitsFromISR>
 8013682:	6178      	str	r0, [r7, #20]
 8013684:	e004      	b.n	8013690 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8013686:	2100      	movs	r1, #0
 8013688:	6938      	ldr	r0, [r7, #16]
 801368a:	f000 faf1 	bl	8013c70 <xEventGroupClearBits>
 801368e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013690:	697b      	ldr	r3, [r7, #20]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3718      	adds	r7, #24
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}

0801369a <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801369a:	b580      	push	{r7, lr}
 801369c:	b08c      	sub	sp, #48	; 0x30
 801369e:	af02      	add	r7, sp, #8
 80136a0:	60f8      	str	r0, [r7, #12]
 80136a2:	60b9      	str	r1, [r7, #8]
 80136a4:	607a      	str	r2, [r7, #4]
 80136a6:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d004      	beq.n	80136bc <osEventFlagsWait+0x22>
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d003      	beq.n	80136c4 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80136bc:	f06f 0303 	mvn.w	r3, #3
 80136c0:	61fb      	str	r3, [r7, #28]
 80136c2:	e04b      	b.n	801375c <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136c4:	f3ef 8305 	mrs	r3, IPSR
 80136c8:	617b      	str	r3, [r7, #20]
  return(result);
 80136ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d003      	beq.n	80136d8 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80136d0:	f06f 0305 	mvn.w	r3, #5
 80136d4:	61fb      	str	r3, [r7, #28]
 80136d6:	e041      	b.n	801375c <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f003 0301 	and.w	r3, r3, #1
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d002      	beq.n	80136e8 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80136e2:	2301      	movs	r3, #1
 80136e4:	627b      	str	r3, [r7, #36]	; 0x24
 80136e6:	e001      	b.n	80136ec <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80136e8:	2300      	movs	r3, #0
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f003 0302 	and.w	r3, r3, #2
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80136f6:	2300      	movs	r3, #0
 80136f8:	623b      	str	r3, [r7, #32]
 80136fa:	e001      	b.n	8013700 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80136fc:	2301      	movs	r3, #1
 80136fe:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013706:	6a3a      	ldr	r2, [r7, #32]
 8013708:	68b9      	ldr	r1, [r7, #8]
 801370a:	69b8      	ldr	r0, [r7, #24]
 801370c:	f000 f9e2 	bl	8013ad4 <xEventGroupWaitBits>
 8013710:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f003 0301 	and.w	r3, r3, #1
 8013718:	2b00      	cmp	r3, #0
 801371a:	d010      	beq.n	801373e <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801371c:	68ba      	ldr	r2, [r7, #8]
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	4013      	ands	r3, r2
 8013722:	68ba      	ldr	r2, [r7, #8]
 8013724:	429a      	cmp	r2, r3
 8013726:	d019      	beq.n	801375c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d003      	beq.n	8013736 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801372e:	f06f 0301 	mvn.w	r3, #1
 8013732:	61fb      	str	r3, [r7, #28]
 8013734:	e012      	b.n	801375c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013736:	f06f 0302 	mvn.w	r3, #2
 801373a:	61fb      	str	r3, [r7, #28]
 801373c:	e00e      	b.n	801375c <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801373e:	68ba      	ldr	r2, [r7, #8]
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	4013      	ands	r3, r2
 8013744:	2b00      	cmp	r3, #0
 8013746:	d109      	bne.n	801375c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d003      	beq.n	8013756 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801374e:	f06f 0301 	mvn.w	r3, #1
 8013752:	61fb      	str	r3, [r7, #28]
 8013754:	e002      	b.n	801375c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013756:	f06f 0302 	mvn.w	r3, #2
 801375a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801375c:	69fb      	ldr	r3, [r7, #28]
}
 801375e:	4618      	mov	r0, r3
 8013760:	3728      	adds	r7, #40	; 0x28
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013766:	b580      	push	{r7, lr}
 8013768:	b08a      	sub	sp, #40	; 0x28
 801376a:	af02      	add	r7, sp, #8
 801376c:	60f8      	str	r0, [r7, #12]
 801376e:	60b9      	str	r1, [r7, #8]
 8013770:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013772:	2300      	movs	r3, #0
 8013774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013776:	f3ef 8305 	mrs	r3, IPSR
 801377a:	613b      	str	r3, [r7, #16]
  return(result);
 801377c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801377e:	2b00      	cmp	r3, #0
 8013780:	d15f      	bne.n	8013842 <osMessageQueueNew+0xdc>
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d05c      	beq.n	8013842 <osMessageQueueNew+0xdc>
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d059      	beq.n	8013842 <osMessageQueueNew+0xdc>
    mem = -1;
 801378e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013792:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d029      	beq.n	80137ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	689b      	ldr	r3, [r3, #8]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d012      	beq.n	80137c8 <osMessageQueueNew+0x62>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	2b4f      	cmp	r3, #79	; 0x4f
 80137a8:	d90e      	bls.n	80137c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d00a      	beq.n	80137c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	695a      	ldr	r2, [r3, #20]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	68b9      	ldr	r1, [r7, #8]
 80137ba:	fb01 f303 	mul.w	r3, r1, r3
 80137be:	429a      	cmp	r2, r3
 80137c0:	d302      	bcc.n	80137c8 <osMessageQueueNew+0x62>
        mem = 1;
 80137c2:	2301      	movs	r3, #1
 80137c4:	61bb      	str	r3, [r7, #24]
 80137c6:	e014      	b.n	80137f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	689b      	ldr	r3, [r3, #8]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d110      	bne.n	80137f2 <osMessageQueueNew+0x8c>
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d10c      	bne.n	80137f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d108      	bne.n	80137f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	695b      	ldr	r3, [r3, #20]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d104      	bne.n	80137f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80137e8:	2300      	movs	r3, #0
 80137ea:	61bb      	str	r3, [r7, #24]
 80137ec:	e001      	b.n	80137f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80137ee:	2300      	movs	r3, #0
 80137f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	d10b      	bne.n	8013810 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	691a      	ldr	r2, [r3, #16]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	689b      	ldr	r3, [r3, #8]
 8013800:	2100      	movs	r1, #0
 8013802:	9100      	str	r1, [sp, #0]
 8013804:	68b9      	ldr	r1, [r7, #8]
 8013806:	68f8      	ldr	r0, [r7, #12]
 8013808:	f000 fc9a 	bl	8014140 <xQueueGenericCreateStatic>
 801380c:	61f8      	str	r0, [r7, #28]
 801380e:	e008      	b.n	8013822 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d105      	bne.n	8013822 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013816:	2200      	movs	r2, #0
 8013818:	68b9      	ldr	r1, [r7, #8]
 801381a:	68f8      	ldr	r0, [r7, #12]
 801381c:	f000 fd08 	bl	8014230 <xQueueGenericCreate>
 8013820:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00c      	beq.n	8013842 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d003      	beq.n	8013836 <osMessageQueueNew+0xd0>
        name = attr->name;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	617b      	str	r3, [r7, #20]
 8013834:	e001      	b.n	801383a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013836:	2300      	movs	r3, #0
 8013838:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801383a:	6979      	ldr	r1, [r7, #20]
 801383c:	69f8      	ldr	r0, [r7, #28]
 801383e:	f001 f95f 	bl	8014b00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013842:	69fb      	ldr	r3, [r7, #28]
}
 8013844:	4618      	mov	r0, r3
 8013846:	3720      	adds	r7, #32
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801384c:	b580      	push	{r7, lr}
 801384e:	b088      	sub	sp, #32
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	603b      	str	r3, [r7, #0]
 8013858:	4613      	mov	r3, r2
 801385a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013860:	2300      	movs	r3, #0
 8013862:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013864:	f3ef 8305 	mrs	r3, IPSR
 8013868:	617b      	str	r3, [r7, #20]
  return(result);
 801386a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801386c:	2b00      	cmp	r3, #0
 801386e:	d028      	beq.n	80138c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d005      	beq.n	8013882 <osMessageQueuePut+0x36>
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d002      	beq.n	8013882 <osMessageQueuePut+0x36>
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d003      	beq.n	801388a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013882:	f06f 0303 	mvn.w	r3, #3
 8013886:	61fb      	str	r3, [r7, #28]
 8013888:	e038      	b.n	80138fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801388a:	2300      	movs	r3, #0
 801388c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801388e:	f107 0210 	add.w	r2, r7, #16
 8013892:	2300      	movs	r3, #0
 8013894:	68b9      	ldr	r1, [r7, #8]
 8013896:	69b8      	ldr	r0, [r7, #24]
 8013898:	f000 fe26 	bl	80144e8 <xQueueGenericSendFromISR>
 801389c:	4603      	mov	r3, r0
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d003      	beq.n	80138aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80138a2:	f06f 0302 	mvn.w	r3, #2
 80138a6:	61fb      	str	r3, [r7, #28]
 80138a8:	e028      	b.n	80138fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d025      	beq.n	80138fc <osMessageQueuePut+0xb0>
 80138b0:	4b15      	ldr	r3, [pc, #84]	; (8013908 <osMessageQueuePut+0xbc>)
 80138b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b6:	601a      	str	r2, [r3, #0]
 80138b8:	f3bf 8f4f 	dsb	sy
 80138bc:	f3bf 8f6f 	isb	sy
 80138c0:	e01c      	b.n	80138fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d002      	beq.n	80138ce <osMessageQueuePut+0x82>
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d103      	bne.n	80138d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80138ce:	f06f 0303 	mvn.w	r3, #3
 80138d2:	61fb      	str	r3, [r7, #28]
 80138d4:	e012      	b.n	80138fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80138d6:	2300      	movs	r3, #0
 80138d8:	683a      	ldr	r2, [r7, #0]
 80138da:	68b9      	ldr	r1, [r7, #8]
 80138dc:	69b8      	ldr	r0, [r7, #24]
 80138de:	f000 fd05 	bl	80142ec <xQueueGenericSend>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d009      	beq.n	80138fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d003      	beq.n	80138f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80138ee:	f06f 0301 	mvn.w	r3, #1
 80138f2:	61fb      	str	r3, [r7, #28]
 80138f4:	e002      	b.n	80138fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80138f6:	f06f 0302 	mvn.w	r3, #2
 80138fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80138fc:	69fb      	ldr	r3, [r7, #28]
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3720      	adds	r7, #32
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	e000ed04 	.word	0xe000ed04

0801390c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801390c:	b580      	push	{r7, lr}
 801390e:	b088      	sub	sp, #32
 8013910:	af00      	add	r7, sp, #0
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
 8013918:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801391e:	2300      	movs	r3, #0
 8013920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013922:	f3ef 8305 	mrs	r3, IPSR
 8013926:	617b      	str	r3, [r7, #20]
  return(result);
 8013928:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801392a:	2b00      	cmp	r3, #0
 801392c:	d028      	beq.n	8013980 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d005      	beq.n	8013940 <osMessageQueueGet+0x34>
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d002      	beq.n	8013940 <osMessageQueueGet+0x34>
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d003      	beq.n	8013948 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013940:	f06f 0303 	mvn.w	r3, #3
 8013944:	61fb      	str	r3, [r7, #28]
 8013946:	e037      	b.n	80139b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013948:	2300      	movs	r3, #0
 801394a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801394c:	f107 0310 	add.w	r3, r7, #16
 8013950:	461a      	mov	r2, r3
 8013952:	68b9      	ldr	r1, [r7, #8]
 8013954:	69b8      	ldr	r0, [r7, #24]
 8013956:	f000 ff43 	bl	80147e0 <xQueueReceiveFromISR>
 801395a:	4603      	mov	r3, r0
 801395c:	2b01      	cmp	r3, #1
 801395e:	d003      	beq.n	8013968 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013960:	f06f 0302 	mvn.w	r3, #2
 8013964:	61fb      	str	r3, [r7, #28]
 8013966:	e027      	b.n	80139b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d024      	beq.n	80139b8 <osMessageQueueGet+0xac>
 801396e:	4b15      	ldr	r3, [pc, #84]	; (80139c4 <osMessageQueueGet+0xb8>)
 8013970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013974:	601a      	str	r2, [r3, #0]
 8013976:	f3bf 8f4f 	dsb	sy
 801397a:	f3bf 8f6f 	isb	sy
 801397e:	e01b      	b.n	80139b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <osMessageQueueGet+0x80>
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d103      	bne.n	8013994 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801398c:	f06f 0303 	mvn.w	r3, #3
 8013990:	61fb      	str	r3, [r7, #28]
 8013992:	e011      	b.n	80139b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	68b9      	ldr	r1, [r7, #8]
 8013998:	69b8      	ldr	r0, [r7, #24]
 801399a:	f000 fe41 	bl	8014620 <xQueueReceive>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d009      	beq.n	80139b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d003      	beq.n	80139b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80139aa:	f06f 0301 	mvn.w	r3, #1
 80139ae:	61fb      	str	r3, [r7, #28]
 80139b0:	e002      	b.n	80139b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80139b2:	f06f 0302 	mvn.w	r3, #2
 80139b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80139b8:	69fb      	ldr	r3, [r7, #28]
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3720      	adds	r7, #32
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	e000ed04 	.word	0xe000ed04

080139c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	4a07      	ldr	r2, [pc, #28]	; (80139f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80139d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	4a06      	ldr	r2, [pc, #24]	; (80139f8 <vApplicationGetIdleTaskMemory+0x30>)
 80139de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2280      	movs	r2, #128	; 0x80
 80139e4:	601a      	str	r2, [r3, #0]
}
 80139e6:	bf00      	nop
 80139e8:	3714      	adds	r7, #20
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	24001134 	.word	0x24001134
 80139f8:	24001190 	.word	0x24001190

080139fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80139fc:	b480      	push	{r7}
 80139fe:	b085      	sub	sp, #20
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	4a07      	ldr	r2, [pc, #28]	; (8013a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8013a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	4a06      	ldr	r2, [pc, #24]	; (8013a2c <vApplicationGetTimerTaskMemory+0x30>)
 8013a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013a1a:	601a      	str	r2, [r3, #0]
}
 8013a1c:	bf00      	nop
 8013a1e:	3714      	adds	r7, #20
 8013a20:	46bd      	mov	sp, r7
 8013a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a26:	4770      	bx	lr
 8013a28:	24001390 	.word	0x24001390
 8013a2c:	240013ec 	.word	0x240013ec

08013a30 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b086      	sub	sp, #24
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d10a      	bne.n	8013a54 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013a50:	bf00      	nop
 8013a52:	e7fe      	b.n	8013a52 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013a54:	2320      	movs	r3, #32
 8013a56:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	2b20      	cmp	r3, #32
 8013a5c:	d00a      	beq.n	8013a74 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a62:	f383 8811 	msr	BASEPRI, r3
 8013a66:	f3bf 8f6f 	isb	sy
 8013a6a:	f3bf 8f4f 	dsb	sy
 8013a6e:	60fb      	str	r3, [r7, #12]
}
 8013a70:	bf00      	nop
 8013a72:	e7fe      	b.n	8013a72 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d00a      	beq.n	8013a94 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	2200      	movs	r2, #0
 8013a82:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	3304      	adds	r3, #4
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f000 fa3d 	bl	8013f08 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	2201      	movs	r2, #1
 8013a92:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013a94:	697b      	ldr	r3, [r7, #20]
	}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3718      	adds	r7, #24
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013aa4:	2020      	movs	r0, #32
 8013aa6:	f002 ff1f 	bl	80168e8 <pvPortMalloc>
 8013aaa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d00a      	beq.n	8013ac8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	3304      	adds	r3, #4
 8013abc:	4618      	mov	r0, r3
 8013abe:	f000 fa23 	bl	8013f08 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013ac8:	687b      	ldr	r3, [r7, #4]
	}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3708      	adds	r7, #8
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
	...

08013ad4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b090      	sub	sp, #64	; 0x40
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
 8013ae0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013aea:	2300      	movs	r3, #0
 8013aec:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10a      	bne.n	8013b0a <xEventGroupWaitBits+0x36>
	__asm volatile
 8013af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af8:	f383 8811 	msr	BASEPRI, r3
 8013afc:	f3bf 8f6f 	isb	sy
 8013b00:	f3bf 8f4f 	dsb	sy
 8013b04:	623b      	str	r3, [r7, #32]
}
 8013b06:	bf00      	nop
 8013b08:	e7fe      	b.n	8013b08 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d00a      	beq.n	8013b2a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b18:	f383 8811 	msr	BASEPRI, r3
 8013b1c:	f3bf 8f6f 	isb	sy
 8013b20:	f3bf 8f4f 	dsb	sy
 8013b24:	61fb      	str	r3, [r7, #28]
}
 8013b26:	bf00      	nop
 8013b28:	e7fe      	b.n	8013b28 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10a      	bne.n	8013b46 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	f383 8811 	msr	BASEPRI, r3
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	61bb      	str	r3, [r7, #24]
}
 8013b42:	bf00      	nop
 8013b44:	e7fe      	b.n	8013b44 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b46:	f002 f817 	bl	8015b78 <xTaskGetSchedulerState>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d102      	bne.n	8013b56 <xEventGroupWaitBits+0x82>
 8013b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d101      	bne.n	8013b5a <xEventGroupWaitBits+0x86>
 8013b56:	2301      	movs	r3, #1
 8013b58:	e000      	b.n	8013b5c <xEventGroupWaitBits+0x88>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d10a      	bne.n	8013b76 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b64:	f383 8811 	msr	BASEPRI, r3
 8013b68:	f3bf 8f6f 	isb	sy
 8013b6c:	f3bf 8f4f 	dsb	sy
 8013b70:	617b      	str	r3, [r7, #20]
}
 8013b72:	bf00      	nop
 8013b74:	e7fe      	b.n	8013b74 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013b76:	f001 fb77 	bl	8015268 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013b80:	683a      	ldr	r2, [r7, #0]
 8013b82:	68b9      	ldr	r1, [r7, #8]
 8013b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013b86:	f000 f988 	bl	8013e9a <prvTestWaitCondition>
 8013b8a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00e      	beq.n	8013bb0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013b96:	2300      	movs	r3, #0
 8013b98:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d028      	beq.n	8013bf2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	43db      	mvns	r3, r3
 8013ba8:	401a      	ands	r2, r3
 8013baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bac:	601a      	str	r2, [r3, #0]
 8013bae:	e020      	b.n	8013bf2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d104      	bne.n	8013bc0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013bba:	2301      	movs	r3, #1
 8013bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8013bbe:	e018      	b.n	8013bf2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d003      	beq.n	8013bce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013bcc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d003      	beq.n	8013bdc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013bda:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bde:	1d18      	adds	r0, r3, #4
 8013be0:	68ba      	ldr	r2, [r7, #8]
 8013be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be4:	4313      	orrs	r3, r2
 8013be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013be8:	4619      	mov	r1, r3
 8013bea:	f001 fd3d 	bl	8015668 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013bf2:	f001 fb47 	bl	8015284 <xTaskResumeAll>
 8013bf6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d031      	beq.n	8013c62 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d107      	bne.n	8013c14 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013c04:	4b19      	ldr	r3, [pc, #100]	; (8013c6c <xEventGroupWaitBits+0x198>)
 8013c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c0a:	601a      	str	r2, [r3, #0]
 8013c0c:	f3bf 8f4f 	dsb	sy
 8013c10:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013c14:	f002 f83c 	bl	8015c90 <uxTaskResetEventItemValue>
 8013c18:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d11a      	bne.n	8013c5a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013c24:	f002 fd3e 	bl	80166a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013c2e:	683a      	ldr	r2, [r7, #0]
 8013c30:	68b9      	ldr	r1, [r7, #8]
 8013c32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c34:	f000 f931 	bl	8013e9a <prvTestWaitCondition>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d009      	beq.n	8013c52 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d006      	beq.n	8013c52 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	43db      	mvns	r3, r3
 8013c4c:	401a      	ands	r2, r3
 8013c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c50:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013c52:	2301      	movs	r3, #1
 8013c54:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013c56:	f002 fd55 	bl	8016704 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c60:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3740      	adds	r7, #64	; 0x40
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	e000ed04 	.word	0xe000ed04

08013c70 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b086      	sub	sp, #24
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d10a      	bne.n	8013c9a <xEventGroupClearBits+0x2a>
	__asm volatile
 8013c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c88:	f383 8811 	msr	BASEPRI, r3
 8013c8c:	f3bf 8f6f 	isb	sy
 8013c90:	f3bf 8f4f 	dsb	sy
 8013c94:	60fb      	str	r3, [r7, #12]
}
 8013c96:	bf00      	nop
 8013c98:	e7fe      	b.n	8013c98 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d00a      	beq.n	8013cba <xEventGroupClearBits+0x4a>
	__asm volatile
 8013ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca8:	f383 8811 	msr	BASEPRI, r3
 8013cac:	f3bf 8f6f 	isb	sy
 8013cb0:	f3bf 8f4f 	dsb	sy
 8013cb4:	60bb      	str	r3, [r7, #8]
}
 8013cb6:	bf00      	nop
 8013cb8:	e7fe      	b.n	8013cb8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013cba:	f002 fcf3 	bl	80166a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	43db      	mvns	r3, r3
 8013ccc:	401a      	ands	r2, r3
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013cd2:	f002 fd17 	bl	8016704 <vPortExitCritical>

	return uxReturn;
 8013cd6:	693b      	ldr	r3, [r7, #16]
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3718      	adds	r7, #24
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013cea:	2300      	movs	r3, #0
 8013cec:	683a      	ldr	r2, [r7, #0]
 8013cee:	6879      	ldr	r1, [r7, #4]
 8013cf0:	4804      	ldr	r0, [pc, #16]	; (8013d04 <xEventGroupClearBitsFromISR+0x24>)
 8013cf2:	f002 fb87 	bl	8016404 <xTimerPendFunctionCallFromISR>
 8013cf6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
	}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3710      	adds	r7, #16
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	08013e81 	.word	0x08013e81

08013d08 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b089      	sub	sp, #36	; 0x24
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013d14:	f3ef 8211 	mrs	r2, BASEPRI
 8013d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1c:	f383 8811 	msr	BASEPRI, r3
 8013d20:	f3bf 8f6f 	isb	sy
 8013d24:	f3bf 8f4f 	dsb	sy
 8013d28:	60fa      	str	r2, [r7, #12]
 8013d2a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d2e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	617b      	str	r3, [r7, #20]
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013d40:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013d42:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013d44:	4618      	mov	r0, r3
 8013d46:	3724      	adds	r7, #36	; 0x24
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b08e      	sub	sp, #56	; 0x38
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013d62:	2300      	movs	r3, #0
 8013d64:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10a      	bne.n	8013d82 <xEventGroupSetBits+0x32>
	__asm volatile
 8013d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d70:	f383 8811 	msr	BASEPRI, r3
 8013d74:	f3bf 8f6f 	isb	sy
 8013d78:	f3bf 8f4f 	dsb	sy
 8013d7c:	613b      	str	r3, [r7, #16]
}
 8013d7e:	bf00      	nop
 8013d80:	e7fe      	b.n	8013d80 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00a      	beq.n	8013da2 <xEventGroupSetBits+0x52>
	__asm volatile
 8013d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d90:	f383 8811 	msr	BASEPRI, r3
 8013d94:	f3bf 8f6f 	isb	sy
 8013d98:	f3bf 8f4f 	dsb	sy
 8013d9c:	60fb      	str	r3, [r7, #12]
}
 8013d9e:	bf00      	nop
 8013da0:	e7fe      	b.n	8013da0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da4:	3304      	adds	r3, #4
 8013da6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	3308      	adds	r3, #8
 8013dac:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013dae:	f001 fa5b 	bl	8015268 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db4:	68db      	ldr	r3, [r3, #12]
 8013db6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dba:	681a      	ldr	r2, [r3, #0]
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	431a      	orrs	r2, r3
 8013dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013dc4:	e03c      	b.n	8013e40 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ddc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013de4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d108      	bne.n	8013e02 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	4013      	ands	r3, r2
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d00b      	beq.n	8013e14 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e00:	e008      	b.n	8013e14 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	4013      	ands	r3, r2
 8013e0a:	69ba      	ldr	r2, [r7, #24]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d101      	bne.n	8013e14 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013e10:	2301      	movs	r3, #1
 8013e12:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d010      	beq.n	8013e3c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d003      	beq.n	8013e2c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013e34:	4619      	mov	r1, r3
 8013e36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013e38:	f001 fce2 	bl	8015800 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e42:	6a3b      	ldr	r3, [r7, #32]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d1be      	bne.n	8013dc6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4e:	43db      	mvns	r3, r3
 8013e50:	401a      	ands	r2, r3
 8013e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e54:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013e56:	f001 fa15 	bl	8015284 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e5c:	681b      	ldr	r3, [r3, #0]
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3738      	adds	r7, #56	; 0x38
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}

08013e66 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b082      	sub	sp, #8
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
 8013e6e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013e70:	6839      	ldr	r1, [r7, #0]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7ff ff6c 	bl	8013d50 <xEventGroupSetBits>
}
 8013e78:	bf00      	nop
 8013e7a:	3708      	adds	r7, #8
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013e8a:	6839      	ldr	r1, [r7, #0]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7ff feef 	bl	8013c70 <xEventGroupClearBits>
}
 8013e92:	bf00      	nop
 8013e94:	3708      	adds	r7, #8
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013e9a:	b480      	push	{r7}
 8013e9c:	b087      	sub	sp, #28
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	60f8      	str	r0, [r7, #12]
 8013ea2:	60b9      	str	r1, [r7, #8]
 8013ea4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d107      	bne.n	8013ec0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013eb0:	68fa      	ldr	r2, [r7, #12]
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	4013      	ands	r3, r2
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00a      	beq.n	8013ed0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013eba:	2301      	movs	r3, #1
 8013ebc:	617b      	str	r3, [r7, #20]
 8013ebe:	e007      	b.n	8013ed0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013ec0:	68fa      	ldr	r2, [r7, #12]
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	4013      	ands	r3, r2
 8013ec6:	68ba      	ldr	r2, [r7, #8]
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d101      	bne.n	8013ed0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013ecc:	2301      	movs	r3, #1
 8013ece:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013ed0:	697b      	ldr	r3, [r7, #20]
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	371c      	adds	r7, #28
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr
	...

08013ee0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b086      	sub	sp, #24
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	68f9      	ldr	r1, [r7, #12]
 8013ef2:	4804      	ldr	r0, [pc, #16]	; (8013f04 <xEventGroupSetBitsFromISR+0x24>)
 8013ef4:	f002 fa86 	bl	8016404 <xTimerPendFunctionCallFromISR>
 8013ef8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013efa:	697b      	ldr	r3, [r7, #20]
	}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3718      	adds	r7, #24
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	08013e67 	.word	0x08013e67

08013f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f103 0208 	add.w	r2, r3, #8
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f103 0208 	add.w	r2, r3, #8
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f103 0208 	add.w	r2, r3, #8
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013f3c:	bf00      	nop
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2200      	movs	r2, #0
 8013f54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013f56:	bf00      	nop
 8013f58:	370c      	adds	r7, #12
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f62:	b480      	push	{r7}
 8013f64:	b085      	sub	sp, #20
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
 8013f6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	68fa      	ldr	r2, [r7, #12]
 8013f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	689a      	ldr	r2, [r3, #8]
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	683a      	ldr	r2, [r7, #0]
 8013f86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	683a      	ldr	r2, [r7, #0]
 8013f8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	1c5a      	adds	r2, r3, #1
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	601a      	str	r2, [r3, #0]
}
 8013f9e:	bf00      	nop
 8013fa0:	3714      	adds	r7, #20
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa8:	4770      	bx	lr

08013faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013faa:	b480      	push	{r7}
 8013fac:	b085      	sub	sp, #20
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
 8013fb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fc0:	d103      	bne.n	8013fca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	691b      	ldr	r3, [r3, #16]
 8013fc6:	60fb      	str	r3, [r7, #12]
 8013fc8:	e00c      	b.n	8013fe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	3308      	adds	r3, #8
 8013fce:	60fb      	str	r3, [r7, #12]
 8013fd0:	e002      	b.n	8013fd8 <vListInsert+0x2e>
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	60fb      	str	r3, [r7, #12]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	68ba      	ldr	r2, [r7, #8]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d2f6      	bcs.n	8013fd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	685a      	ldr	r2, [r3, #4]
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	683a      	ldr	r2, [r7, #0]
 8013ff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	68fa      	ldr	r2, [r7, #12]
 8013ff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	683a      	ldr	r2, [r7, #0]
 8013ffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	1c5a      	adds	r2, r3, #1
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	601a      	str	r2, [r3, #0]
}
 8014010:	bf00      	nop
 8014012:	3714      	adds	r7, #20
 8014014:	46bd      	mov	sp, r7
 8014016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401a:	4770      	bx	lr

0801401c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801401c:	b480      	push	{r7}
 801401e:	b085      	sub	sp, #20
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	691b      	ldr	r3, [r3, #16]
 8014028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	6892      	ldr	r2, [r2, #8]
 8014032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	689b      	ldr	r3, [r3, #8]
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	6852      	ldr	r2, [r2, #4]
 801403c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	429a      	cmp	r2, r3
 8014046:	d103      	bne.n	8014050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	689a      	ldr	r2, [r3, #8]
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2200      	movs	r2, #0
 8014054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	1e5a      	subs	r2, r3, #1
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	681b      	ldr	r3, [r3, #0]
}
 8014064:	4618      	mov	r0, r3
 8014066:	3714      	adds	r7, #20
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr

08014070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d10a      	bne.n	801409a <xQueueGenericReset+0x2a>
	__asm volatile
 8014084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014088:	f383 8811 	msr	BASEPRI, r3
 801408c:	f3bf 8f6f 	isb	sy
 8014090:	f3bf 8f4f 	dsb	sy
 8014094:	60bb      	str	r3, [r7, #8]
}
 8014096:	bf00      	nop
 8014098:	e7fe      	b.n	8014098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801409a:	f002 fb03 	bl	80166a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140a6:	68f9      	ldr	r1, [r7, #12]
 80140a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140aa:	fb01 f303 	mul.w	r3, r1, r3
 80140ae:	441a      	add	r2, r3
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2200      	movs	r2, #0
 80140b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ca:	3b01      	subs	r3, #1
 80140cc:	68f9      	ldr	r1, [r7, #12]
 80140ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140d0:	fb01 f303 	mul.w	r3, r1, r3
 80140d4:	441a      	add	r2, r3
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	22ff      	movs	r2, #255	; 0xff
 80140de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	22ff      	movs	r2, #255	; 0xff
 80140e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d114      	bne.n	801411a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	691b      	ldr	r3, [r3, #16]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d01a      	beq.n	801412e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	3310      	adds	r3, #16
 80140fc:	4618      	mov	r0, r3
 80140fe:	f001 fb1b 	bl	8015738 <xTaskRemoveFromEventList>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d012      	beq.n	801412e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014108:	4b0c      	ldr	r3, [pc, #48]	; (801413c <xQueueGenericReset+0xcc>)
 801410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801410e:	601a      	str	r2, [r3, #0]
 8014110:	f3bf 8f4f 	dsb	sy
 8014114:	f3bf 8f6f 	isb	sy
 8014118:	e009      	b.n	801412e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	3310      	adds	r3, #16
 801411e:	4618      	mov	r0, r3
 8014120:	f7ff fef2 	bl	8013f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	3324      	adds	r3, #36	; 0x24
 8014128:	4618      	mov	r0, r3
 801412a:	f7ff feed 	bl	8013f08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801412e:	f002 fae9 	bl	8016704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014132:	2301      	movs	r3, #1
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	e000ed04 	.word	0xe000ed04

08014140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014140:	b580      	push	{r7, lr}
 8014142:	b08e      	sub	sp, #56	; 0x38
 8014144:	af02      	add	r7, sp, #8
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10a      	bne.n	801416a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014158:	f383 8811 	msr	BASEPRI, r3
 801415c:	f3bf 8f6f 	isb	sy
 8014160:	f3bf 8f4f 	dsb	sy
 8014164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014166:	bf00      	nop
 8014168:	e7fe      	b.n	8014168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10a      	bne.n	8014186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014174:	f383 8811 	msr	BASEPRI, r3
 8014178:	f3bf 8f6f 	isb	sy
 801417c:	f3bf 8f4f 	dsb	sy
 8014180:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014182:	bf00      	nop
 8014184:	e7fe      	b.n	8014184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d002      	beq.n	8014192 <xQueueGenericCreateStatic+0x52>
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d001      	beq.n	8014196 <xQueueGenericCreateStatic+0x56>
 8014192:	2301      	movs	r3, #1
 8014194:	e000      	b.n	8014198 <xQueueGenericCreateStatic+0x58>
 8014196:	2300      	movs	r3, #0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d10a      	bne.n	80141b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a0:	f383 8811 	msr	BASEPRI, r3
 80141a4:	f3bf 8f6f 	isb	sy
 80141a8:	f3bf 8f4f 	dsb	sy
 80141ac:	623b      	str	r3, [r7, #32]
}
 80141ae:	bf00      	nop
 80141b0:	e7fe      	b.n	80141b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d102      	bne.n	80141be <xQueueGenericCreateStatic+0x7e>
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d101      	bne.n	80141c2 <xQueueGenericCreateStatic+0x82>
 80141be:	2301      	movs	r3, #1
 80141c0:	e000      	b.n	80141c4 <xQueueGenericCreateStatic+0x84>
 80141c2:	2300      	movs	r3, #0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10a      	bne.n	80141de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80141c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141cc:	f383 8811 	msr	BASEPRI, r3
 80141d0:	f3bf 8f6f 	isb	sy
 80141d4:	f3bf 8f4f 	dsb	sy
 80141d8:	61fb      	str	r3, [r7, #28]
}
 80141da:	bf00      	nop
 80141dc:	e7fe      	b.n	80141dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80141de:	2350      	movs	r3, #80	; 0x50
 80141e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	2b50      	cmp	r3, #80	; 0x50
 80141e6:	d00a      	beq.n	80141fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80141e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ec:	f383 8811 	msr	BASEPRI, r3
 80141f0:	f3bf 8f6f 	isb	sy
 80141f4:	f3bf 8f4f 	dsb	sy
 80141f8:	61bb      	str	r3, [r7, #24]
}
 80141fa:	bf00      	nop
 80141fc:	e7fe      	b.n	80141fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80141fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00d      	beq.n	8014226 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420c:	2201      	movs	r2, #1
 801420e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014212:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	4613      	mov	r3, r2
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	68b9      	ldr	r1, [r7, #8]
 8014220:	68f8      	ldr	r0, [r7, #12]
 8014222:	f000 f83f 	bl	80142a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014228:	4618      	mov	r0, r3
 801422a:	3730      	adds	r7, #48	; 0x30
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08a      	sub	sp, #40	; 0x28
 8014234:	af02      	add	r7, sp, #8
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	4613      	mov	r3, r2
 801423c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d10a      	bne.n	801425a <xQueueGenericCreate+0x2a>
	__asm volatile
 8014244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014248:	f383 8811 	msr	BASEPRI, r3
 801424c:	f3bf 8f6f 	isb	sy
 8014250:	f3bf 8f4f 	dsb	sy
 8014254:	613b      	str	r3, [r7, #16]
}
 8014256:	bf00      	nop
 8014258:	e7fe      	b.n	8014258 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	68ba      	ldr	r2, [r7, #8]
 801425e:	fb02 f303 	mul.w	r3, r2, r3
 8014262:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	3350      	adds	r3, #80	; 0x50
 8014268:	4618      	mov	r0, r3
 801426a:	f002 fb3d 	bl	80168e8 <pvPortMalloc>
 801426e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014270:	69bb      	ldr	r3, [r7, #24]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d011      	beq.n	801429a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	3350      	adds	r3, #80	; 0x50
 801427e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	2200      	movs	r2, #0
 8014284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014288:	79fa      	ldrb	r2, [r7, #7]
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	9300      	str	r3, [sp, #0]
 801428e:	4613      	mov	r3, r2
 8014290:	697a      	ldr	r2, [r7, #20]
 8014292:	68b9      	ldr	r1, [r7, #8]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 f805 	bl	80142a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801429a:	69bb      	ldr	r3, [r7, #24]
	}
 801429c:	4618      	mov	r0, r3
 801429e:	3720      	adds	r7, #32
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	607a      	str	r2, [r7, #4]
 80142b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d103      	bne.n	80142c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	69ba      	ldr	r2, [r7, #24]
 80142bc:	601a      	str	r2, [r3, #0]
 80142be:	e002      	b.n	80142c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80142c0:	69bb      	ldr	r3, [r7, #24]
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	68fa      	ldr	r2, [r7, #12]
 80142ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	68ba      	ldr	r2, [r7, #8]
 80142d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80142d2:	2101      	movs	r1, #1
 80142d4:	69b8      	ldr	r0, [r7, #24]
 80142d6:	f7ff fecb 	bl	8014070 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	78fa      	ldrb	r2, [r7, #3]
 80142de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80142e2:	bf00      	nop
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
	...

080142ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b08e      	sub	sp, #56	; 0x38
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]
 80142f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80142fa:	2300      	movs	r3, #0
 80142fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014304:	2b00      	cmp	r3, #0
 8014306:	d10a      	bne.n	801431e <xQueueGenericSend+0x32>
	__asm volatile
 8014308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801430c:	f383 8811 	msr	BASEPRI, r3
 8014310:	f3bf 8f6f 	isb	sy
 8014314:	f3bf 8f4f 	dsb	sy
 8014318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801431a:	bf00      	nop
 801431c:	e7fe      	b.n	801431c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d103      	bne.n	801432c <xQueueGenericSend+0x40>
 8014324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014328:	2b00      	cmp	r3, #0
 801432a:	d101      	bne.n	8014330 <xQueueGenericSend+0x44>
 801432c:	2301      	movs	r3, #1
 801432e:	e000      	b.n	8014332 <xQueueGenericSend+0x46>
 8014330:	2300      	movs	r3, #0
 8014332:	2b00      	cmp	r3, #0
 8014334:	d10a      	bne.n	801434c <xQueueGenericSend+0x60>
	__asm volatile
 8014336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801433a:	f383 8811 	msr	BASEPRI, r3
 801433e:	f3bf 8f6f 	isb	sy
 8014342:	f3bf 8f4f 	dsb	sy
 8014346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014348:	bf00      	nop
 801434a:	e7fe      	b.n	801434a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	2b02      	cmp	r3, #2
 8014350:	d103      	bne.n	801435a <xQueueGenericSend+0x6e>
 8014352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014356:	2b01      	cmp	r3, #1
 8014358:	d101      	bne.n	801435e <xQueueGenericSend+0x72>
 801435a:	2301      	movs	r3, #1
 801435c:	e000      	b.n	8014360 <xQueueGenericSend+0x74>
 801435e:	2300      	movs	r3, #0
 8014360:	2b00      	cmp	r3, #0
 8014362:	d10a      	bne.n	801437a <xQueueGenericSend+0x8e>
	__asm volatile
 8014364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014368:	f383 8811 	msr	BASEPRI, r3
 801436c:	f3bf 8f6f 	isb	sy
 8014370:	f3bf 8f4f 	dsb	sy
 8014374:	623b      	str	r3, [r7, #32]
}
 8014376:	bf00      	nop
 8014378:	e7fe      	b.n	8014378 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801437a:	f001 fbfd 	bl	8015b78 <xTaskGetSchedulerState>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d102      	bne.n	801438a <xQueueGenericSend+0x9e>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d101      	bne.n	801438e <xQueueGenericSend+0xa2>
 801438a:	2301      	movs	r3, #1
 801438c:	e000      	b.n	8014390 <xQueueGenericSend+0xa4>
 801438e:	2300      	movs	r3, #0
 8014390:	2b00      	cmp	r3, #0
 8014392:	d10a      	bne.n	80143aa <xQueueGenericSend+0xbe>
	__asm volatile
 8014394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014398:	f383 8811 	msr	BASEPRI, r3
 801439c:	f3bf 8f6f 	isb	sy
 80143a0:	f3bf 8f4f 	dsb	sy
 80143a4:	61fb      	str	r3, [r7, #28]
}
 80143a6:	bf00      	nop
 80143a8:	e7fe      	b.n	80143a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80143aa:	f002 f97b 	bl	80166a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d302      	bcc.n	80143c0 <xQueueGenericSend+0xd4>
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	2b02      	cmp	r3, #2
 80143be:	d129      	bne.n	8014414 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80143c0:	683a      	ldr	r2, [r7, #0]
 80143c2:	68b9      	ldr	r1, [r7, #8]
 80143c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143c6:	f000 fa8b 	bl	80148e0 <prvCopyDataToQueue>
 80143ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d010      	beq.n	80143f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d6:	3324      	adds	r3, #36	; 0x24
 80143d8:	4618      	mov	r0, r3
 80143da:	f001 f9ad 	bl	8015738 <xTaskRemoveFromEventList>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d013      	beq.n	801440c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80143e4:	4b3f      	ldr	r3, [pc, #252]	; (80144e4 <xQueueGenericSend+0x1f8>)
 80143e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143ea:	601a      	str	r2, [r3, #0]
 80143ec:	f3bf 8f4f 	dsb	sy
 80143f0:	f3bf 8f6f 	isb	sy
 80143f4:	e00a      	b.n	801440c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80143f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d007      	beq.n	801440c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80143fc:	4b39      	ldr	r3, [pc, #228]	; (80144e4 <xQueueGenericSend+0x1f8>)
 80143fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	f3bf 8f4f 	dsb	sy
 8014408:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801440c:	f002 f97a 	bl	8016704 <vPortExitCritical>
				return pdPASS;
 8014410:	2301      	movs	r3, #1
 8014412:	e063      	b.n	80144dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d103      	bne.n	8014422 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801441a:	f002 f973 	bl	8016704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801441e:	2300      	movs	r3, #0
 8014420:	e05c      	b.n	80144dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014424:	2b00      	cmp	r3, #0
 8014426:	d106      	bne.n	8014436 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014428:	f107 0314 	add.w	r3, r7, #20
 801442c:	4618      	mov	r0, r3
 801442e:	f001 fa49 	bl	80158c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014432:	2301      	movs	r3, #1
 8014434:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014436:	f002 f965 	bl	8016704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801443a:	f000 ff15 	bl	8015268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801443e:	f002 f931 	bl	80166a4 <vPortEnterCritical>
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014448:	b25b      	sxtb	r3, r3
 801444a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801444e:	d103      	bne.n	8014458 <xQueueGenericSend+0x16c>
 8014450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014452:	2200      	movs	r2, #0
 8014454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801445e:	b25b      	sxtb	r3, r3
 8014460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014464:	d103      	bne.n	801446e <xQueueGenericSend+0x182>
 8014466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014468:	2200      	movs	r2, #0
 801446a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801446e:	f002 f949 	bl	8016704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014472:	1d3a      	adds	r2, r7, #4
 8014474:	f107 0314 	add.w	r3, r7, #20
 8014478:	4611      	mov	r1, r2
 801447a:	4618      	mov	r0, r3
 801447c:	f001 fa38 	bl	80158f0 <xTaskCheckForTimeOut>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d124      	bne.n	80144d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014488:	f000 fb22 	bl	8014ad0 <prvIsQueueFull>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	d018      	beq.n	80144c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	3310      	adds	r3, #16
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	4611      	mov	r1, r2
 801449a:	4618      	mov	r0, r3
 801449c:	f001 f8c0 	bl	8015620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80144a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144a2:	f000 faad 	bl	8014a00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80144a6:	f000 feed 	bl	8015284 <xTaskResumeAll>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	f47f af7c 	bne.w	80143aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80144b2:	4b0c      	ldr	r3, [pc, #48]	; (80144e4 <xQueueGenericSend+0x1f8>)
 80144b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b8:	601a      	str	r2, [r3, #0]
 80144ba:	f3bf 8f4f 	dsb	sy
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	e772      	b.n	80143aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80144c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144c6:	f000 fa9b 	bl	8014a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80144ca:	f000 fedb 	bl	8015284 <xTaskResumeAll>
 80144ce:	e76c      	b.n	80143aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80144d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144d2:	f000 fa95 	bl	8014a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80144d6:	f000 fed5 	bl	8015284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80144da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3738      	adds	r7, #56	; 0x38
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}
 80144e4:	e000ed04 	.word	0xe000ed04

080144e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b090      	sub	sp, #64	; 0x40
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	607a      	str	r2, [r7, #4]
 80144f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80144fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d10a      	bne.n	8014516 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014504:	f383 8811 	msr	BASEPRI, r3
 8014508:	f3bf 8f6f 	isb	sy
 801450c:	f3bf 8f4f 	dsb	sy
 8014510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014512:	bf00      	nop
 8014514:	e7fe      	b.n	8014514 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d103      	bne.n	8014524 <xQueueGenericSendFromISR+0x3c>
 801451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014520:	2b00      	cmp	r3, #0
 8014522:	d101      	bne.n	8014528 <xQueueGenericSendFromISR+0x40>
 8014524:	2301      	movs	r3, #1
 8014526:	e000      	b.n	801452a <xQueueGenericSendFromISR+0x42>
 8014528:	2300      	movs	r3, #0
 801452a:	2b00      	cmp	r3, #0
 801452c:	d10a      	bne.n	8014544 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014540:	bf00      	nop
 8014542:	e7fe      	b.n	8014542 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	2b02      	cmp	r3, #2
 8014548:	d103      	bne.n	8014552 <xQueueGenericSendFromISR+0x6a>
 801454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801454e:	2b01      	cmp	r3, #1
 8014550:	d101      	bne.n	8014556 <xQueueGenericSendFromISR+0x6e>
 8014552:	2301      	movs	r3, #1
 8014554:	e000      	b.n	8014558 <xQueueGenericSendFromISR+0x70>
 8014556:	2300      	movs	r3, #0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d10a      	bne.n	8014572 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014560:	f383 8811 	msr	BASEPRI, r3
 8014564:	f3bf 8f6f 	isb	sy
 8014568:	f3bf 8f4f 	dsb	sy
 801456c:	623b      	str	r3, [r7, #32]
}
 801456e:	bf00      	nop
 8014570:	e7fe      	b.n	8014570 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014572:	f002 f979 	bl	8016868 <vPortValidateInterruptPriority>
	__asm volatile
 8014576:	f3ef 8211 	mrs	r2, BASEPRI
 801457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	61fa      	str	r2, [r7, #28]
 801458c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801458e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014590:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801459a:	429a      	cmp	r2, r3
 801459c:	d302      	bcc.n	80145a4 <xQueueGenericSendFromISR+0xbc>
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	2b02      	cmp	r3, #2
 80145a2:	d12f      	bne.n	8014604 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80145a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80145ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145b4:	683a      	ldr	r2, [r7, #0]
 80145b6:	68b9      	ldr	r1, [r7, #8]
 80145b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145ba:	f000 f991 	bl	80148e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80145be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80145c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145c6:	d112      	bne.n	80145ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d016      	beq.n	80145fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d2:	3324      	adds	r3, #36	; 0x24
 80145d4:	4618      	mov	r0, r3
 80145d6:	f001 f8af 	bl	8015738 <xTaskRemoveFromEventList>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d00e      	beq.n	80145fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d00b      	beq.n	80145fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2201      	movs	r2, #1
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	e007      	b.n	80145fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80145ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80145f2:	3301      	adds	r3, #1
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	b25a      	sxtb	r2, r3
 80145f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80145fe:	2301      	movs	r3, #1
 8014600:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014602:	e001      	b.n	8014608 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014604:	2300      	movs	r3, #0
 8014606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801460a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	f383 8811 	msr	BASEPRI, r3
}
 8014612:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014616:	4618      	mov	r0, r3
 8014618:	3740      	adds	r7, #64	; 0x40
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
	...

08014620 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b08c      	sub	sp, #48	; 0x30
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801462c:	2300      	movs	r3, #0
 801462e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014636:	2b00      	cmp	r3, #0
 8014638:	d10a      	bne.n	8014650 <xQueueReceive+0x30>
	__asm volatile
 801463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801463e:	f383 8811 	msr	BASEPRI, r3
 8014642:	f3bf 8f6f 	isb	sy
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	623b      	str	r3, [r7, #32]
}
 801464c:	bf00      	nop
 801464e:	e7fe      	b.n	801464e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d103      	bne.n	801465e <xQueueReceive+0x3e>
 8014656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801465a:	2b00      	cmp	r3, #0
 801465c:	d101      	bne.n	8014662 <xQueueReceive+0x42>
 801465e:	2301      	movs	r3, #1
 8014660:	e000      	b.n	8014664 <xQueueReceive+0x44>
 8014662:	2300      	movs	r3, #0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d10a      	bne.n	801467e <xQueueReceive+0x5e>
	__asm volatile
 8014668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801466c:	f383 8811 	msr	BASEPRI, r3
 8014670:	f3bf 8f6f 	isb	sy
 8014674:	f3bf 8f4f 	dsb	sy
 8014678:	61fb      	str	r3, [r7, #28]
}
 801467a:	bf00      	nop
 801467c:	e7fe      	b.n	801467c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801467e:	f001 fa7b 	bl	8015b78 <xTaskGetSchedulerState>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d102      	bne.n	801468e <xQueueReceive+0x6e>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d101      	bne.n	8014692 <xQueueReceive+0x72>
 801468e:	2301      	movs	r3, #1
 8014690:	e000      	b.n	8014694 <xQueueReceive+0x74>
 8014692:	2300      	movs	r3, #0
 8014694:	2b00      	cmp	r3, #0
 8014696:	d10a      	bne.n	80146ae <xQueueReceive+0x8e>
	__asm volatile
 8014698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801469c:	f383 8811 	msr	BASEPRI, r3
 80146a0:	f3bf 8f6f 	isb	sy
 80146a4:	f3bf 8f4f 	dsb	sy
 80146a8:	61bb      	str	r3, [r7, #24]
}
 80146aa:	bf00      	nop
 80146ac:	e7fe      	b.n	80146ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80146ae:	f001 fff9 	bl	80166a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d01f      	beq.n	80146fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80146be:	68b9      	ldr	r1, [r7, #8]
 80146c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146c2:	f000 f977 	bl	80149b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80146c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c8:	1e5a      	subs	r2, r3, #1
 80146ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d0:	691b      	ldr	r3, [r3, #16]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d00f      	beq.n	80146f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d8:	3310      	adds	r3, #16
 80146da:	4618      	mov	r0, r3
 80146dc:	f001 f82c 	bl	8015738 <xTaskRemoveFromEventList>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d007      	beq.n	80146f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80146e6:	4b3d      	ldr	r3, [pc, #244]	; (80147dc <xQueueReceive+0x1bc>)
 80146e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146ec:	601a      	str	r2, [r3, #0]
 80146ee:	f3bf 8f4f 	dsb	sy
 80146f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80146f6:	f002 f805 	bl	8016704 <vPortExitCritical>
				return pdPASS;
 80146fa:	2301      	movs	r3, #1
 80146fc:	e069      	b.n	80147d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d103      	bne.n	801470c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014704:	f001 fffe 	bl	8016704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014708:	2300      	movs	r3, #0
 801470a:	e062      	b.n	80147d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014712:	f107 0310 	add.w	r3, r7, #16
 8014716:	4618      	mov	r0, r3
 8014718:	f001 f8d4 	bl	80158c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801471c:	2301      	movs	r3, #1
 801471e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014720:	f001 fff0 	bl	8016704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014724:	f000 fda0 	bl	8015268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014728:	f001 ffbc 	bl	80166a4 <vPortEnterCritical>
 801472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801472e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014732:	b25b      	sxtb	r3, r3
 8014734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014738:	d103      	bne.n	8014742 <xQueueReceive+0x122>
 801473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473c:	2200      	movs	r2, #0
 801473e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014748:	b25b      	sxtb	r3, r3
 801474a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474e:	d103      	bne.n	8014758 <xQueueReceive+0x138>
 8014750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014752:	2200      	movs	r2, #0
 8014754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014758:	f001 ffd4 	bl	8016704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801475c:	1d3a      	adds	r2, r7, #4
 801475e:	f107 0310 	add.w	r3, r7, #16
 8014762:	4611      	mov	r1, r2
 8014764:	4618      	mov	r0, r3
 8014766:	f001 f8c3 	bl	80158f0 <xTaskCheckForTimeOut>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d123      	bne.n	80147b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014772:	f000 f997 	bl	8014aa4 <prvIsQueueEmpty>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d017      	beq.n	80147ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477e:	3324      	adds	r3, #36	; 0x24
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	4611      	mov	r1, r2
 8014784:	4618      	mov	r0, r3
 8014786:	f000 ff4b 	bl	8015620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801478a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801478c:	f000 f938 	bl	8014a00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014790:	f000 fd78 	bl	8015284 <xTaskResumeAll>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d189      	bne.n	80146ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801479a:	4b10      	ldr	r3, [pc, #64]	; (80147dc <xQueueReceive+0x1bc>)
 801479c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	f3bf 8f4f 	dsb	sy
 80147a6:	f3bf 8f6f 	isb	sy
 80147aa:	e780      	b.n	80146ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80147ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147ae:	f000 f927 	bl	8014a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80147b2:	f000 fd67 	bl	8015284 <xTaskResumeAll>
 80147b6:	e77a      	b.n	80146ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80147b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147ba:	f000 f921 	bl	8014a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80147be:	f000 fd61 	bl	8015284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80147c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147c4:	f000 f96e 	bl	8014aa4 <prvIsQueueEmpty>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f43f af6f 	beq.w	80146ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80147d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3730      	adds	r7, #48	; 0x30
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	e000ed04 	.word	0xe000ed04

080147e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b08e      	sub	sp, #56	; 0x38
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80147f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10a      	bne.n	801480c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	623b      	str	r3, [r7, #32]
}
 8014808:	bf00      	nop
 801480a:	e7fe      	b.n	801480a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d103      	bne.n	801481a <xQueueReceiveFromISR+0x3a>
 8014812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014816:	2b00      	cmp	r3, #0
 8014818:	d101      	bne.n	801481e <xQueueReceiveFromISR+0x3e>
 801481a:	2301      	movs	r3, #1
 801481c:	e000      	b.n	8014820 <xQueueReceiveFromISR+0x40>
 801481e:	2300      	movs	r3, #0
 8014820:	2b00      	cmp	r3, #0
 8014822:	d10a      	bne.n	801483a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014828:	f383 8811 	msr	BASEPRI, r3
 801482c:	f3bf 8f6f 	isb	sy
 8014830:	f3bf 8f4f 	dsb	sy
 8014834:	61fb      	str	r3, [r7, #28]
}
 8014836:	bf00      	nop
 8014838:	e7fe      	b.n	8014838 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801483a:	f002 f815 	bl	8016868 <vPortValidateInterruptPriority>
	__asm volatile
 801483e:	f3ef 8211 	mrs	r2, BASEPRI
 8014842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014846:	f383 8811 	msr	BASEPRI, r3
 801484a:	f3bf 8f6f 	isb	sy
 801484e:	f3bf 8f4f 	dsb	sy
 8014852:	61ba      	str	r2, [r7, #24]
 8014854:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014856:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014858:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801485e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014862:	2b00      	cmp	r3, #0
 8014864:	d02f      	beq.n	80148c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801486c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014870:	68b9      	ldr	r1, [r7, #8]
 8014872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014874:	f000 f89e 	bl	80149b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487a:	1e5a      	subs	r2, r3, #1
 801487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014880:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014888:	d112      	bne.n	80148b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	691b      	ldr	r3, [r3, #16]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d016      	beq.n	80148c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014894:	3310      	adds	r3, #16
 8014896:	4618      	mov	r0, r3
 8014898:	f000 ff4e 	bl	8015738 <xTaskRemoveFromEventList>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d00e      	beq.n	80148c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d00b      	beq.n	80148c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2201      	movs	r2, #1
 80148ac:	601a      	str	r2, [r3, #0]
 80148ae:	e007      	b.n	80148c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80148b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148b4:	3301      	adds	r3, #1
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	b25a      	sxtb	r2, r3
 80148ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80148c0:	2301      	movs	r3, #1
 80148c2:	637b      	str	r3, [r7, #52]	; 0x34
 80148c4:	e001      	b.n	80148ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80148c6:	2300      	movs	r3, #0
 80148c8:	637b      	str	r3, [r7, #52]	; 0x34
 80148ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	f383 8811 	msr	BASEPRI, r3
}
 80148d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80148d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80148d8:	4618      	mov	r0, r3
 80148da:	3738      	adds	r7, #56	; 0x38
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}

080148e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80148ec:	2300      	movs	r3, #0
 80148ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d10d      	bne.n	801491a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d14d      	bne.n	80149a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	689b      	ldr	r3, [r3, #8]
 801490a:	4618      	mov	r0, r3
 801490c:	f001 f952 	bl	8015bb4 <xTaskPriorityDisinherit>
 8014910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2200      	movs	r2, #0
 8014916:	609a      	str	r2, [r3, #8]
 8014918:	e043      	b.n	80149a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d119      	bne.n	8014954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	6858      	ldr	r0, [r3, #4]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014928:	461a      	mov	r2, r3
 801492a:	68b9      	ldr	r1, [r7, #8]
 801492c:	f002 fa00 	bl	8016d30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	685a      	ldr	r2, [r3, #4]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014938:	441a      	add	r2, r3
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	685a      	ldr	r2, [r3, #4]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	689b      	ldr	r3, [r3, #8]
 8014946:	429a      	cmp	r2, r3
 8014948:	d32b      	bcc.n	80149a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	605a      	str	r2, [r3, #4]
 8014952:	e026      	b.n	80149a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	68d8      	ldr	r0, [r3, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801495c:	461a      	mov	r2, r3
 801495e:	68b9      	ldr	r1, [r7, #8]
 8014960:	f002 f9e6 	bl	8016d30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	68da      	ldr	r2, [r3, #12]
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801496c:	425b      	negs	r3, r3
 801496e:	441a      	add	r2, r3
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	68da      	ldr	r2, [r3, #12]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	429a      	cmp	r2, r3
 801497e:	d207      	bcs.n	8014990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	689a      	ldr	r2, [r3, #8]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014988:	425b      	negs	r3, r3
 801498a:	441a      	add	r2, r3
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2b02      	cmp	r3, #2
 8014994:	d105      	bne.n	80149a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d002      	beq.n	80149a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	3b01      	subs	r3, #1
 80149a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	1c5a      	adds	r2, r3, #1
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80149aa:	697b      	ldr	r3, [r7, #20]
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3718      	adds	r7, #24
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d018      	beq.n	80149f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	68da      	ldr	r2, [r3, #12]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ce:	441a      	add	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	68da      	ldr	r2, [r3, #12]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	689b      	ldr	r3, [r3, #8]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d303      	bcc.n	80149e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	68d9      	ldr	r1, [r3, #12]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149f0:	461a      	mov	r2, r3
 80149f2:	6838      	ldr	r0, [r7, #0]
 80149f4:	f002 f99c 	bl	8016d30 <memcpy>
	}
}
 80149f8:	bf00      	nop
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014a08:	f001 fe4c 	bl	80166a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a14:	e011      	b.n	8014a3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d012      	beq.n	8014a44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	3324      	adds	r3, #36	; 0x24
 8014a22:	4618      	mov	r0, r3
 8014a24:	f000 fe88 	bl	8015738 <xTaskRemoveFromEventList>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d001      	beq.n	8014a32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014a2e:	f000 ffc1 	bl	80159b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014a32:	7bfb      	ldrb	r3, [r7, #15]
 8014a34:	3b01      	subs	r3, #1
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	dce9      	bgt.n	8014a16 <prvUnlockQueue+0x16>
 8014a42:	e000      	b.n	8014a46 <prvUnlockQueue+0x46>
					break;
 8014a44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	22ff      	movs	r2, #255	; 0xff
 8014a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014a4e:	f001 fe59 	bl	8016704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014a52:	f001 fe27 	bl	80166a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a5e:	e011      	b.n	8014a84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	691b      	ldr	r3, [r3, #16]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d012      	beq.n	8014a8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	3310      	adds	r3, #16
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f000 fe63 	bl	8015738 <xTaskRemoveFromEventList>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d001      	beq.n	8014a7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014a78:	f000 ff9c 	bl	80159b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014a7c:	7bbb      	ldrb	r3, [r7, #14]
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	b2db      	uxtb	r3, r3
 8014a82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	dce9      	bgt.n	8014a60 <prvUnlockQueue+0x60>
 8014a8c:	e000      	b.n	8014a90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014a8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	22ff      	movs	r2, #255	; 0xff
 8014a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014a98:	f001 fe34 	bl	8016704 <vPortExitCritical>
}
 8014a9c:	bf00      	nop
 8014a9e:	3710      	adds	r7, #16
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014aac:	f001 fdfa 	bl	80166a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d102      	bne.n	8014abe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014ab8:	2301      	movs	r3, #1
 8014aba:	60fb      	str	r3, [r7, #12]
 8014abc:	e001      	b.n	8014ac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014ac2:	f001 fe1f 	bl	8016704 <vPortExitCritical>

	return xReturn;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3710      	adds	r7, #16
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014ad8:	f001 fde4 	bl	80166a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d102      	bne.n	8014aee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	60fb      	str	r3, [r7, #12]
 8014aec:	e001      	b.n	8014af2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014aee:	2300      	movs	r3, #0
 8014af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014af2:	f001 fe07 	bl	8016704 <vPortExitCritical>

	return xReturn;
 8014af6:	68fb      	ldr	r3, [r7, #12]
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3710      	adds	r7, #16
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}

08014b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	60fb      	str	r3, [r7, #12]
 8014b0e:	e014      	b.n	8014b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014b10:	4a0f      	ldr	r2, [pc, #60]	; (8014b50 <vQueueAddToRegistry+0x50>)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d10b      	bne.n	8014b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014b1c:	490c      	ldr	r1, [pc, #48]	; (8014b50 <vQueueAddToRegistry+0x50>)
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	683a      	ldr	r2, [r7, #0]
 8014b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014b26:	4a0a      	ldr	r2, [pc, #40]	; (8014b50 <vQueueAddToRegistry+0x50>)
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	00db      	lsls	r3, r3, #3
 8014b2c:	4413      	add	r3, r2
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014b32:	e006      	b.n	8014b42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	3301      	adds	r3, #1
 8014b38:	60fb      	str	r3, [r7, #12]
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	2b07      	cmp	r3, #7
 8014b3e:	d9e7      	bls.n	8014b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014b40:	bf00      	nop
 8014b42:	bf00      	nop
 8014b44:	3714      	adds	r7, #20
 8014b46:	46bd      	mov	sp, r7
 8014b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4c:	4770      	bx	lr
 8014b4e:	bf00      	nop
 8014b50:	240017ec 	.word	0x240017ec

08014b54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b086      	sub	sp, #24
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014b64:	f001 fd9e 	bl	80166a4 <vPortEnterCritical>
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014b6e:	b25b      	sxtb	r3, r3
 8014b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b74:	d103      	bne.n	8014b7e <vQueueWaitForMessageRestricted+0x2a>
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014b84:	b25b      	sxtb	r3, r3
 8014b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b8a:	d103      	bne.n	8014b94 <vQueueWaitForMessageRestricted+0x40>
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014b94:	f001 fdb6 	bl	8016704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d106      	bne.n	8014bae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	3324      	adds	r3, #36	; 0x24
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	68b9      	ldr	r1, [r7, #8]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f000 fd99 	bl	80156e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014bae:	6978      	ldr	r0, [r7, #20]
 8014bb0:	f7ff ff26 	bl	8014a00 <prvUnlockQueue>
	}
 8014bb4:	bf00      	nop
 8014bb6:	3718      	adds	r7, #24
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b08e      	sub	sp, #56	; 0x38
 8014bc0:	af04      	add	r7, sp, #16
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	607a      	str	r2, [r7, #4]
 8014bc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d10a      	bne.n	8014be6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd4:	f383 8811 	msr	BASEPRI, r3
 8014bd8:	f3bf 8f6f 	isb	sy
 8014bdc:	f3bf 8f4f 	dsb	sy
 8014be0:	623b      	str	r3, [r7, #32]
}
 8014be2:	bf00      	nop
 8014be4:	e7fe      	b.n	8014be4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d10a      	bne.n	8014c02 <xTaskCreateStatic+0x46>
	__asm volatile
 8014bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	61fb      	str	r3, [r7, #28]
}
 8014bfe:	bf00      	nop
 8014c00:	e7fe      	b.n	8014c00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014c02:	235c      	movs	r3, #92	; 0x5c
 8014c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	2b5c      	cmp	r3, #92	; 0x5c
 8014c0a:	d00a      	beq.n	8014c22 <xTaskCreateStatic+0x66>
	__asm volatile
 8014c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c10:	f383 8811 	msr	BASEPRI, r3
 8014c14:	f3bf 8f6f 	isb	sy
 8014c18:	f3bf 8f4f 	dsb	sy
 8014c1c:	61bb      	str	r3, [r7, #24]
}
 8014c1e:	bf00      	nop
 8014c20:	e7fe      	b.n	8014c20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014c22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d01e      	beq.n	8014c68 <xTaskCreateStatic+0xac>
 8014c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d01b      	beq.n	8014c68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3c:	2202      	movs	r2, #2
 8014c3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014c42:	2300      	movs	r3, #0
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c48:	9302      	str	r3, [sp, #8]
 8014c4a:	f107 0314 	add.w	r3, r7, #20
 8014c4e:	9301      	str	r3, [sp, #4]
 8014c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c52:	9300      	str	r3, [sp, #0]
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	68b9      	ldr	r1, [r7, #8]
 8014c5a:	68f8      	ldr	r0, [r7, #12]
 8014c5c:	f000 f850 	bl	8014d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c62:	f000 f8dd 	bl	8014e20 <prvAddNewTaskToReadyList>
 8014c66:	e001      	b.n	8014c6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014c6c:	697b      	ldr	r3, [r7, #20]
	}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3728      	adds	r7, #40	; 0x28
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b08c      	sub	sp, #48	; 0x30
 8014c7a:	af04      	add	r7, sp, #16
 8014c7c:	60f8      	str	r0, [r7, #12]
 8014c7e:	60b9      	str	r1, [r7, #8]
 8014c80:	603b      	str	r3, [r7, #0]
 8014c82:	4613      	mov	r3, r2
 8014c84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c86:	88fb      	ldrh	r3, [r7, #6]
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f001 fe2c 	bl	80168e8 <pvPortMalloc>
 8014c90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d00e      	beq.n	8014cb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014c98:	205c      	movs	r0, #92	; 0x5c
 8014c9a:	f001 fe25 	bl	80168e8 <pvPortMalloc>
 8014c9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ca0:	69fb      	ldr	r3, [r7, #28]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d003      	beq.n	8014cae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	697a      	ldr	r2, [r7, #20]
 8014caa:	631a      	str	r2, [r3, #48]	; 0x30
 8014cac:	e005      	b.n	8014cba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014cae:	6978      	ldr	r0, [r7, #20]
 8014cb0:	f001 fee6 	bl	8016a80 <vPortFree>
 8014cb4:	e001      	b.n	8014cba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d017      	beq.n	8014cf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014cc0:	69fb      	ldr	r3, [r7, #28]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014cc8:	88fa      	ldrh	r2, [r7, #6]
 8014cca:	2300      	movs	r3, #0
 8014ccc:	9303      	str	r3, [sp, #12]
 8014cce:	69fb      	ldr	r3, [r7, #28]
 8014cd0:	9302      	str	r3, [sp, #8]
 8014cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	68b9      	ldr	r1, [r7, #8]
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	f000 f80e 	bl	8014d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ce4:	69f8      	ldr	r0, [r7, #28]
 8014ce6:	f000 f89b 	bl	8014e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014cea:	2301      	movs	r3, #1
 8014cec:	61bb      	str	r3, [r7, #24]
 8014cee:	e002      	b.n	8014cf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3720      	adds	r7, #32
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b088      	sub	sp, #32
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	60b9      	str	r1, [r7, #8]
 8014d0a:	607a      	str	r2, [r7, #4]
 8014d0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	461a      	mov	r2, r3
 8014d18:	21a5      	movs	r1, #165	; 0xa5
 8014d1a:	f002 f817 	bl	8016d4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d22:	6879      	ldr	r1, [r7, #4]
 8014d24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014d28:	440b      	add	r3, r1
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4413      	add	r3, r2
 8014d2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014d30:	69bb      	ldr	r3, [r7, #24]
 8014d32:	f023 0307 	bic.w	r3, r3, #7
 8014d36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	f003 0307 	and.w	r3, r3, #7
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00a      	beq.n	8014d58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d46:	f383 8811 	msr	BASEPRI, r3
 8014d4a:	f3bf 8f6f 	isb	sy
 8014d4e:	f3bf 8f4f 	dsb	sy
 8014d52:	617b      	str	r3, [r7, #20]
}
 8014d54:	bf00      	nop
 8014d56:	e7fe      	b.n	8014d56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d01f      	beq.n	8014d9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d5e:	2300      	movs	r3, #0
 8014d60:	61fb      	str	r3, [r7, #28]
 8014d62:	e012      	b.n	8014d8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014d64:	68ba      	ldr	r2, [r7, #8]
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	4413      	add	r3, r2
 8014d6a:	7819      	ldrb	r1, [r3, #0]
 8014d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	4413      	add	r3, r2
 8014d72:	3334      	adds	r3, #52	; 0x34
 8014d74:	460a      	mov	r2, r1
 8014d76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014d78:	68ba      	ldr	r2, [r7, #8]
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d006      	beq.n	8014d92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	3301      	adds	r3, #1
 8014d88:	61fb      	str	r3, [r7, #28]
 8014d8a:	69fb      	ldr	r3, [r7, #28]
 8014d8c:	2b0f      	cmp	r3, #15
 8014d8e:	d9e9      	bls.n	8014d64 <prvInitialiseNewTask+0x64>
 8014d90:	e000      	b.n	8014d94 <prvInitialiseNewTask+0x94>
			{
				break;
 8014d92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d96:	2200      	movs	r2, #0
 8014d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014d9c:	e003      	b.n	8014da6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014da0:	2200      	movs	r2, #0
 8014da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da8:	2b37      	cmp	r3, #55	; 0x37
 8014daa:	d901      	bls.n	8014db0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014dac:	2337      	movs	r3, #55	; 0x37
 8014dae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014db4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc4:	3304      	adds	r3, #4
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7ff f8be 	bl	8013f48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dce:	3318      	adds	r3, #24
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7ff f8b9 	bl	8013f48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dee:	2200      	movs	r2, #0
 8014df0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	2200      	movs	r2, #0
 8014df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014dfa:	683a      	ldr	r2, [r7, #0]
 8014dfc:	68f9      	ldr	r1, [r7, #12]
 8014dfe:	69b8      	ldr	r0, [r7, #24]
 8014e00:	f001 fb20 	bl	8016444 <pxPortInitialiseStack>
 8014e04:	4602      	mov	r2, r0
 8014e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d002      	beq.n	8014e16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e16:	bf00      	nop
 8014e18:	3720      	adds	r7, #32
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
	...

08014e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014e28:	f001 fc3c 	bl	80166a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014e2c:	4b2d      	ldr	r3, [pc, #180]	; (8014ee4 <prvAddNewTaskToReadyList+0xc4>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	3301      	adds	r3, #1
 8014e32:	4a2c      	ldr	r2, [pc, #176]	; (8014ee4 <prvAddNewTaskToReadyList+0xc4>)
 8014e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014e36:	4b2c      	ldr	r3, [pc, #176]	; (8014ee8 <prvAddNewTaskToReadyList+0xc8>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d109      	bne.n	8014e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014e3e:	4a2a      	ldr	r2, [pc, #168]	; (8014ee8 <prvAddNewTaskToReadyList+0xc8>)
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014e44:	4b27      	ldr	r3, [pc, #156]	; (8014ee4 <prvAddNewTaskToReadyList+0xc4>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d110      	bne.n	8014e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014e4c:	f000 fdd6 	bl	80159fc <prvInitialiseTaskLists>
 8014e50:	e00d      	b.n	8014e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e52:	4b26      	ldr	r3, [pc, #152]	; (8014eec <prvAddNewTaskToReadyList+0xcc>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d109      	bne.n	8014e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014e5a:	4b23      	ldr	r3, [pc, #140]	; (8014ee8 <prvAddNewTaskToReadyList+0xc8>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d802      	bhi.n	8014e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e68:	4a1f      	ldr	r2, [pc, #124]	; (8014ee8 <prvAddNewTaskToReadyList+0xc8>)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e6e:	4b20      	ldr	r3, [pc, #128]	; (8014ef0 <prvAddNewTaskToReadyList+0xd0>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	3301      	adds	r3, #1
 8014e74:	4a1e      	ldr	r2, [pc, #120]	; (8014ef0 <prvAddNewTaskToReadyList+0xd0>)
 8014e76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014e78:	4b1d      	ldr	r3, [pc, #116]	; (8014ef0 <prvAddNewTaskToReadyList+0xd0>)
 8014e7a:	681a      	ldr	r2, [r3, #0]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e84:	4b1b      	ldr	r3, [pc, #108]	; (8014ef4 <prvAddNewTaskToReadyList+0xd4>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d903      	bls.n	8014e94 <prvAddNewTaskToReadyList+0x74>
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e90:	4a18      	ldr	r2, [pc, #96]	; (8014ef4 <prvAddNewTaskToReadyList+0xd4>)
 8014e92:	6013      	str	r3, [r2, #0]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e98:	4613      	mov	r3, r2
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	4413      	add	r3, r2
 8014e9e:	009b      	lsls	r3, r3, #2
 8014ea0:	4a15      	ldr	r2, [pc, #84]	; (8014ef8 <prvAddNewTaskToReadyList+0xd8>)
 8014ea2:	441a      	add	r2, r3
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	3304      	adds	r3, #4
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	4610      	mov	r0, r2
 8014eac:	f7ff f859 	bl	8013f62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014eb0:	f001 fc28 	bl	8016704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014eb4:	4b0d      	ldr	r3, [pc, #52]	; (8014eec <prvAddNewTaskToReadyList+0xcc>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d00e      	beq.n	8014eda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014ebc:	4b0a      	ldr	r3, [pc, #40]	; (8014ee8 <prvAddNewTaskToReadyList+0xc8>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d207      	bcs.n	8014eda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014eca:	4b0c      	ldr	r3, [pc, #48]	; (8014efc <prvAddNewTaskToReadyList+0xdc>)
 8014ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ed0:	601a      	str	r2, [r3, #0]
 8014ed2:	f3bf 8f4f 	dsb	sy
 8014ed6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014eda:	bf00      	nop
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	24001d00 	.word	0x24001d00
 8014ee8:	2400182c 	.word	0x2400182c
 8014eec:	24001d0c 	.word	0x24001d0c
 8014ef0:	24001d1c 	.word	0x24001d1c
 8014ef4:	24001d08 	.word	0x24001d08
 8014ef8:	24001830 	.word	0x24001830
 8014efc:	e000ed04 	.word	0xe000ed04

08014f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b084      	sub	sp, #16
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d017      	beq.n	8014f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014f12:	4b13      	ldr	r3, [pc, #76]	; (8014f60 <vTaskDelay+0x60>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d00a      	beq.n	8014f30 <vTaskDelay+0x30>
	__asm volatile
 8014f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f1e:	f383 8811 	msr	BASEPRI, r3
 8014f22:	f3bf 8f6f 	isb	sy
 8014f26:	f3bf 8f4f 	dsb	sy
 8014f2a:	60bb      	str	r3, [r7, #8]
}
 8014f2c:	bf00      	nop
 8014f2e:	e7fe      	b.n	8014f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014f30:	f000 f99a 	bl	8015268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014f34:	2100      	movs	r1, #0
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f000 fec2 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014f3c:	f000 f9a2 	bl	8015284 <xTaskResumeAll>
 8014f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d107      	bne.n	8014f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014f48:	4b06      	ldr	r3, [pc, #24]	; (8014f64 <vTaskDelay+0x64>)
 8014f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f4e:	601a      	str	r2, [r3, #0]
 8014f50:	f3bf 8f4f 	dsb	sy
 8014f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f58:	bf00      	nop
 8014f5a:	3710      	adds	r7, #16
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	24001d28 	.word	0x24001d28
 8014f64:	e000ed04 	.word	0xe000ed04

08014f68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014f70:	f001 fb98 	bl	80166a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d102      	bne.n	8014f80 <vTaskSuspend+0x18>
 8014f7a:	4b30      	ldr	r3, [pc, #192]	; (801503c <vTaskSuspend+0xd4>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	e000      	b.n	8014f82 <vTaskSuspend+0x1a>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	3304      	adds	r3, #4
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7ff f847 	bl	801401c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d004      	beq.n	8014fa0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	3318      	adds	r3, #24
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7ff f83e 	bl	801401c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	4826      	ldr	r0, [pc, #152]	; (8015040 <vTaskSuspend+0xd8>)
 8014fa8:	f7fe ffdb 	bl	8013f62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014fb2:	b2db      	uxtb	r3, r3
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d103      	bne.n	8014fc0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014fc0:	f001 fba0 	bl	8016704 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014fc4:	4b1f      	ldr	r3, [pc, #124]	; (8015044 <vTaskSuspend+0xdc>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d005      	beq.n	8014fd8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014fcc:	f001 fb6a 	bl	80166a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014fd0:	f000 fdb2 	bl	8015b38 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014fd4:	f001 fb96 	bl	8016704 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014fd8:	4b18      	ldr	r3, [pc, #96]	; (801503c <vTaskSuspend+0xd4>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	68fa      	ldr	r2, [r7, #12]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d127      	bne.n	8015032 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014fe2:	4b18      	ldr	r3, [pc, #96]	; (8015044 <vTaskSuspend+0xdc>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d017      	beq.n	801501a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014fea:	4b17      	ldr	r3, [pc, #92]	; (8015048 <vTaskSuspend+0xe0>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d00a      	beq.n	8015008 <vTaskSuspend+0xa0>
	__asm volatile
 8014ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff6:	f383 8811 	msr	BASEPRI, r3
 8014ffa:	f3bf 8f6f 	isb	sy
 8014ffe:	f3bf 8f4f 	dsb	sy
 8015002:	60bb      	str	r3, [r7, #8]
}
 8015004:	bf00      	nop
 8015006:	e7fe      	b.n	8015006 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8015008:	4b10      	ldr	r3, [pc, #64]	; (801504c <vTaskSuspend+0xe4>)
 801500a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801500e:	601a      	str	r2, [r3, #0]
 8015010:	f3bf 8f4f 	dsb	sy
 8015014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015018:	e00b      	b.n	8015032 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801501a:	4b09      	ldr	r3, [pc, #36]	; (8015040 <vTaskSuspend+0xd8>)
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	4b0c      	ldr	r3, [pc, #48]	; (8015050 <vTaskSuspend+0xe8>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	429a      	cmp	r2, r3
 8015024:	d103      	bne.n	801502e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8015026:	4b05      	ldr	r3, [pc, #20]	; (801503c <vTaskSuspend+0xd4>)
 8015028:	2200      	movs	r2, #0
 801502a:	601a      	str	r2, [r3, #0]
	}
 801502c:	e001      	b.n	8015032 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801502e:	f000 fa99 	bl	8015564 <vTaskSwitchContext>
	}
 8015032:	bf00      	nop
 8015034:	3710      	adds	r7, #16
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	2400182c 	.word	0x2400182c
 8015040:	24001cec 	.word	0x24001cec
 8015044:	24001d0c 	.word	0x24001d0c
 8015048:	24001d28 	.word	0x24001d28
 801504c:	e000ed04 	.word	0xe000ed04
 8015050:	24001d00 	.word	0x24001d00

08015054 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015054:	b480      	push	{r7}
 8015056:	b087      	sub	sp, #28
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801505c:	2300      	movs	r3, #0
 801505e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d10a      	bne.n	8015080 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801506e:	f383 8811 	msr	BASEPRI, r3
 8015072:	f3bf 8f6f 	isb	sy
 8015076:	f3bf 8f4f 	dsb	sy
 801507a:	60fb      	str	r3, [r7, #12]
}
 801507c:	bf00      	nop
 801507e:	e7fe      	b.n	801507e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	695b      	ldr	r3, [r3, #20]
 8015084:	4a0a      	ldr	r2, [pc, #40]	; (80150b0 <prvTaskIsTaskSuspended+0x5c>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d10a      	bne.n	80150a0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801508e:	4a09      	ldr	r2, [pc, #36]	; (80150b4 <prvTaskIsTaskSuspended+0x60>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d005      	beq.n	80150a0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015098:	2b00      	cmp	r3, #0
 801509a:	d101      	bne.n	80150a0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801509c:	2301      	movs	r3, #1
 801509e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80150a0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80150a2:	4618      	mov	r0, r3
 80150a4:	371c      	adds	r7, #28
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	24001cec 	.word	0x24001cec
 80150b4:	24001cc0 	.word	0x24001cc0

080150b8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b08a      	sub	sp, #40	; 0x28
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80150c0:	2300      	movs	r3, #0
 80150c2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d10a      	bne.n	80150e4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	61bb      	str	r3, [r7, #24]
}
 80150e0:	bf00      	nop
 80150e2:	e7fe      	b.n	80150e2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80150e4:	f001 fbc0 	bl	8016868 <vPortValidateInterruptPriority>
	__asm volatile
 80150e8:	f3ef 8211 	mrs	r2, BASEPRI
 80150ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f0:	f383 8811 	msr	BASEPRI, r3
 80150f4:	f3bf 8f6f 	isb	sy
 80150f8:	f3bf 8f4f 	dsb	sy
 80150fc:	617a      	str	r2, [r7, #20]
 80150fe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015100:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015102:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8015104:	6a38      	ldr	r0, [r7, #32]
 8015106:	f7ff ffa5 	bl	8015054 <prvTaskIsTaskSuspended>
 801510a:	4603      	mov	r3, r0
 801510c:	2b00      	cmp	r3, #0
 801510e:	d030      	beq.n	8015172 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015110:	4b1d      	ldr	r3, [pc, #116]	; (8015188 <xTaskResumeFromISR+0xd0>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d126      	bne.n	8015166 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015118:	6a3b      	ldr	r3, [r7, #32]
 801511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801511c:	4b1b      	ldr	r3, [pc, #108]	; (801518c <xTaskResumeFromISR+0xd4>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015122:	429a      	cmp	r2, r3
 8015124:	d301      	bcc.n	801512a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8015126:	2301      	movs	r3, #1
 8015128:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801512a:	6a3b      	ldr	r3, [r7, #32]
 801512c:	3304      	adds	r3, #4
 801512e:	4618      	mov	r0, r3
 8015130:	f7fe ff74 	bl	801401c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015134:	6a3b      	ldr	r3, [r7, #32]
 8015136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015138:	4b15      	ldr	r3, [pc, #84]	; (8015190 <xTaskResumeFromISR+0xd8>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	429a      	cmp	r2, r3
 801513e:	d903      	bls.n	8015148 <xTaskResumeFromISR+0x90>
 8015140:	6a3b      	ldr	r3, [r7, #32]
 8015142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015144:	4a12      	ldr	r2, [pc, #72]	; (8015190 <xTaskResumeFromISR+0xd8>)
 8015146:	6013      	str	r3, [r2, #0]
 8015148:	6a3b      	ldr	r3, [r7, #32]
 801514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801514c:	4613      	mov	r3, r2
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	4413      	add	r3, r2
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	4a0f      	ldr	r2, [pc, #60]	; (8015194 <xTaskResumeFromISR+0xdc>)
 8015156:	441a      	add	r2, r3
 8015158:	6a3b      	ldr	r3, [r7, #32]
 801515a:	3304      	adds	r3, #4
 801515c:	4619      	mov	r1, r3
 801515e:	4610      	mov	r0, r2
 8015160:	f7fe feff 	bl	8013f62 <vListInsertEnd>
 8015164:	e005      	b.n	8015172 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015166:	6a3b      	ldr	r3, [r7, #32]
 8015168:	3318      	adds	r3, #24
 801516a:	4619      	mov	r1, r3
 801516c:	480a      	ldr	r0, [pc, #40]	; (8015198 <xTaskResumeFromISR+0xe0>)
 801516e:	f7fe fef8 	bl	8013f62 <vListInsertEnd>
 8015172:	69fb      	ldr	r3, [r7, #28]
 8015174:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f383 8811 	msr	BASEPRI, r3
}
 801517c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015180:	4618      	mov	r0, r3
 8015182:	3728      	adds	r7, #40	; 0x28
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	24001d28 	.word	0x24001d28
 801518c:	2400182c 	.word	0x2400182c
 8015190:	24001d08 	.word	0x24001d08
 8015194:	24001830 	.word	0x24001830
 8015198:	24001cc0 	.word	0x24001cc0

0801519c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b08a      	sub	sp, #40	; 0x28
 80151a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80151a6:	2300      	movs	r3, #0
 80151a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80151aa:	463a      	mov	r2, r7
 80151ac:	1d39      	adds	r1, r7, #4
 80151ae:	f107 0308 	add.w	r3, r7, #8
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fe fc08 	bl	80139c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80151b8:	6839      	ldr	r1, [r7, #0]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	9202      	str	r2, [sp, #8]
 80151c0:	9301      	str	r3, [sp, #4]
 80151c2:	2300      	movs	r3, #0
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	2300      	movs	r3, #0
 80151c8:	460a      	mov	r2, r1
 80151ca:	4921      	ldr	r1, [pc, #132]	; (8015250 <vTaskStartScheduler+0xb4>)
 80151cc:	4821      	ldr	r0, [pc, #132]	; (8015254 <vTaskStartScheduler+0xb8>)
 80151ce:	f7ff fcf5 	bl	8014bbc <xTaskCreateStatic>
 80151d2:	4603      	mov	r3, r0
 80151d4:	4a20      	ldr	r2, [pc, #128]	; (8015258 <vTaskStartScheduler+0xbc>)
 80151d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151d8:	4b1f      	ldr	r3, [pc, #124]	; (8015258 <vTaskStartScheduler+0xbc>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d002      	beq.n	80151e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80151e0:	2301      	movs	r3, #1
 80151e2:	617b      	str	r3, [r7, #20]
 80151e4:	e001      	b.n	80151ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80151e6:	2300      	movs	r3, #0
 80151e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	d102      	bne.n	80151f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80151f0:	f000 fdba 	bl	8015d68 <xTimerCreateTimerTask>
 80151f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d116      	bne.n	801522a <vTaskStartScheduler+0x8e>
	__asm volatile
 80151fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015200:	f383 8811 	msr	BASEPRI, r3
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	613b      	str	r3, [r7, #16]
}
 801520e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015210:	4b12      	ldr	r3, [pc, #72]	; (801525c <vTaskStartScheduler+0xc0>)
 8015212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015216:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015218:	4b11      	ldr	r3, [pc, #68]	; (8015260 <vTaskStartScheduler+0xc4>)
 801521a:	2201      	movs	r2, #1
 801521c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801521e:	4b11      	ldr	r3, [pc, #68]	; (8015264 <vTaskStartScheduler+0xc8>)
 8015220:	2200      	movs	r2, #0
 8015222:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015224:	f001 f99c 	bl	8016560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015228:	e00e      	b.n	8015248 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015230:	d10a      	bne.n	8015248 <vTaskStartScheduler+0xac>
	__asm volatile
 8015232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015236:	f383 8811 	msr	BASEPRI, r3
 801523a:	f3bf 8f6f 	isb	sy
 801523e:	f3bf 8f4f 	dsb	sy
 8015242:	60fb      	str	r3, [r7, #12]
}
 8015244:	bf00      	nop
 8015246:	e7fe      	b.n	8015246 <vTaskStartScheduler+0xaa>
}
 8015248:	bf00      	nop
 801524a:	3718      	adds	r7, #24
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	080179e4 	.word	0x080179e4
 8015254:	080159cd 	.word	0x080159cd
 8015258:	24001d24 	.word	0x24001d24
 801525c:	24001d20 	.word	0x24001d20
 8015260:	24001d0c 	.word	0x24001d0c
 8015264:	24001d04 	.word	0x24001d04

08015268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015268:	b480      	push	{r7}
 801526a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801526c:	4b04      	ldr	r3, [pc, #16]	; (8015280 <vTaskSuspendAll+0x18>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	3301      	adds	r3, #1
 8015272:	4a03      	ldr	r2, [pc, #12]	; (8015280 <vTaskSuspendAll+0x18>)
 8015274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015276:	bf00      	nop
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr
 8015280:	24001d28 	.word	0x24001d28

08015284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801528a:	2300      	movs	r3, #0
 801528c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801528e:	2300      	movs	r3, #0
 8015290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015292:	4b42      	ldr	r3, [pc, #264]	; (801539c <xTaskResumeAll+0x118>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d10a      	bne.n	80152b0 <xTaskResumeAll+0x2c>
	__asm volatile
 801529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801529e:	f383 8811 	msr	BASEPRI, r3
 80152a2:	f3bf 8f6f 	isb	sy
 80152a6:	f3bf 8f4f 	dsb	sy
 80152aa:	603b      	str	r3, [r7, #0]
}
 80152ac:	bf00      	nop
 80152ae:	e7fe      	b.n	80152ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80152b0:	f001 f9f8 	bl	80166a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80152b4:	4b39      	ldr	r3, [pc, #228]	; (801539c <xTaskResumeAll+0x118>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	3b01      	subs	r3, #1
 80152ba:	4a38      	ldr	r2, [pc, #224]	; (801539c <xTaskResumeAll+0x118>)
 80152bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152be:	4b37      	ldr	r3, [pc, #220]	; (801539c <xTaskResumeAll+0x118>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d162      	bne.n	801538c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80152c6:	4b36      	ldr	r3, [pc, #216]	; (80153a0 <xTaskResumeAll+0x11c>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d05e      	beq.n	801538c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152ce:	e02f      	b.n	8015330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152d0:	4b34      	ldr	r3, [pc, #208]	; (80153a4 <xTaskResumeAll+0x120>)
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	3318      	adds	r3, #24
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fe fe9d 	bl	801401c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	3304      	adds	r3, #4
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7fe fe98 	bl	801401c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f0:	4b2d      	ldr	r3, [pc, #180]	; (80153a8 <xTaskResumeAll+0x124>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d903      	bls.n	8015300 <xTaskResumeAll+0x7c>
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152fc:	4a2a      	ldr	r2, [pc, #168]	; (80153a8 <xTaskResumeAll+0x124>)
 80152fe:	6013      	str	r3, [r2, #0]
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015304:	4613      	mov	r3, r2
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4413      	add	r3, r2
 801530a:	009b      	lsls	r3, r3, #2
 801530c:	4a27      	ldr	r2, [pc, #156]	; (80153ac <xTaskResumeAll+0x128>)
 801530e:	441a      	add	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	3304      	adds	r3, #4
 8015314:	4619      	mov	r1, r3
 8015316:	4610      	mov	r0, r2
 8015318:	f7fe fe23 	bl	8013f62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015320:	4b23      	ldr	r3, [pc, #140]	; (80153b0 <xTaskResumeAll+0x12c>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015326:	429a      	cmp	r2, r3
 8015328:	d302      	bcc.n	8015330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801532a:	4b22      	ldr	r3, [pc, #136]	; (80153b4 <xTaskResumeAll+0x130>)
 801532c:	2201      	movs	r2, #1
 801532e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015330:	4b1c      	ldr	r3, [pc, #112]	; (80153a4 <xTaskResumeAll+0x120>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d1cb      	bne.n	80152d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d001      	beq.n	8015342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801533e:	f000 fbfb 	bl	8015b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015342:	4b1d      	ldr	r3, [pc, #116]	; (80153b8 <xTaskResumeAll+0x134>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d010      	beq.n	8015370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801534e:	f000 f847 	bl	80153e0 <xTaskIncrementTick>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d002      	beq.n	801535e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015358:	4b16      	ldr	r3, [pc, #88]	; (80153b4 <xTaskResumeAll+0x130>)
 801535a:	2201      	movs	r2, #1
 801535c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	3b01      	subs	r3, #1
 8015362:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d1f1      	bne.n	801534e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801536a:	4b13      	ldr	r3, [pc, #76]	; (80153b8 <xTaskResumeAll+0x134>)
 801536c:	2200      	movs	r2, #0
 801536e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015370:	4b10      	ldr	r3, [pc, #64]	; (80153b4 <xTaskResumeAll+0x130>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d009      	beq.n	801538c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015378:	2301      	movs	r3, #1
 801537a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801537c:	4b0f      	ldr	r3, [pc, #60]	; (80153bc <xTaskResumeAll+0x138>)
 801537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015382:	601a      	str	r2, [r3, #0]
 8015384:	f3bf 8f4f 	dsb	sy
 8015388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801538c:	f001 f9ba 	bl	8016704 <vPortExitCritical>

	return xAlreadyYielded;
 8015390:	68bb      	ldr	r3, [r7, #8]
}
 8015392:	4618      	mov	r0, r3
 8015394:	3710      	adds	r7, #16
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	24001d28 	.word	0x24001d28
 80153a0:	24001d00 	.word	0x24001d00
 80153a4:	24001cc0 	.word	0x24001cc0
 80153a8:	24001d08 	.word	0x24001d08
 80153ac:	24001830 	.word	0x24001830
 80153b0:	2400182c 	.word	0x2400182c
 80153b4:	24001d14 	.word	0x24001d14
 80153b8:	24001d10 	.word	0x24001d10
 80153bc:	e000ed04 	.word	0xe000ed04

080153c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80153c0:	b480      	push	{r7}
 80153c2:	b083      	sub	sp, #12
 80153c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80153c6:	4b05      	ldr	r3, [pc, #20]	; (80153dc <xTaskGetTickCount+0x1c>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80153cc:	687b      	ldr	r3, [r7, #4]
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	370c      	adds	r7, #12
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr
 80153da:	bf00      	nop
 80153dc:	24001d04 	.word	0x24001d04

080153e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80153e6:	2300      	movs	r3, #0
 80153e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153ea:	4b53      	ldr	r3, [pc, #332]	; (8015538 <xTaskIncrementTick+0x158>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f040 8095 	bne.w	801551e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80153f4:	4b51      	ldr	r3, [pc, #324]	; (801553c <xTaskIncrementTick+0x15c>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	3301      	adds	r3, #1
 80153fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80153fc:	4a4f      	ldr	r2, [pc, #316]	; (801553c <xTaskIncrementTick+0x15c>)
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d120      	bne.n	801544a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015408:	4b4d      	ldr	r3, [pc, #308]	; (8015540 <xTaskIncrementTick+0x160>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d00a      	beq.n	8015428 <xTaskIncrementTick+0x48>
	__asm volatile
 8015412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015416:	f383 8811 	msr	BASEPRI, r3
 801541a:	f3bf 8f6f 	isb	sy
 801541e:	f3bf 8f4f 	dsb	sy
 8015422:	603b      	str	r3, [r7, #0]
}
 8015424:	bf00      	nop
 8015426:	e7fe      	b.n	8015426 <xTaskIncrementTick+0x46>
 8015428:	4b45      	ldr	r3, [pc, #276]	; (8015540 <xTaskIncrementTick+0x160>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	60fb      	str	r3, [r7, #12]
 801542e:	4b45      	ldr	r3, [pc, #276]	; (8015544 <xTaskIncrementTick+0x164>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	4a43      	ldr	r2, [pc, #268]	; (8015540 <xTaskIncrementTick+0x160>)
 8015434:	6013      	str	r3, [r2, #0]
 8015436:	4a43      	ldr	r2, [pc, #268]	; (8015544 <xTaskIncrementTick+0x164>)
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	6013      	str	r3, [r2, #0]
 801543c:	4b42      	ldr	r3, [pc, #264]	; (8015548 <xTaskIncrementTick+0x168>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	3301      	adds	r3, #1
 8015442:	4a41      	ldr	r2, [pc, #260]	; (8015548 <xTaskIncrementTick+0x168>)
 8015444:	6013      	str	r3, [r2, #0]
 8015446:	f000 fb77 	bl	8015b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801544a:	4b40      	ldr	r3, [pc, #256]	; (801554c <xTaskIncrementTick+0x16c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	693a      	ldr	r2, [r7, #16]
 8015450:	429a      	cmp	r2, r3
 8015452:	d349      	bcc.n	80154e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015454:	4b3a      	ldr	r3, [pc, #232]	; (8015540 <xTaskIncrementTick+0x160>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d104      	bne.n	8015468 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801545e:	4b3b      	ldr	r3, [pc, #236]	; (801554c <xTaskIncrementTick+0x16c>)
 8015460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015464:	601a      	str	r2, [r3, #0]
					break;
 8015466:	e03f      	b.n	80154e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015468:	4b35      	ldr	r3, [pc, #212]	; (8015540 <xTaskIncrementTick+0x160>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015478:	693a      	ldr	r2, [r7, #16]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	429a      	cmp	r2, r3
 801547e:	d203      	bcs.n	8015488 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015480:	4a32      	ldr	r2, [pc, #200]	; (801554c <xTaskIncrementTick+0x16c>)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015486:	e02f      	b.n	80154e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	3304      	adds	r3, #4
 801548c:	4618      	mov	r0, r3
 801548e:	f7fe fdc5 	bl	801401c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015496:	2b00      	cmp	r3, #0
 8015498:	d004      	beq.n	80154a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	3318      	adds	r3, #24
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fe fdbc 	bl	801401c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a8:	4b29      	ldr	r3, [pc, #164]	; (8015550 <xTaskIncrementTick+0x170>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d903      	bls.n	80154b8 <xTaskIncrementTick+0xd8>
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b4:	4a26      	ldr	r2, [pc, #152]	; (8015550 <xTaskIncrementTick+0x170>)
 80154b6:	6013      	str	r3, [r2, #0]
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154bc:	4613      	mov	r3, r2
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	4413      	add	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4a23      	ldr	r2, [pc, #140]	; (8015554 <xTaskIncrementTick+0x174>)
 80154c6:	441a      	add	r2, r3
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	3304      	adds	r3, #4
 80154cc:	4619      	mov	r1, r3
 80154ce:	4610      	mov	r0, r2
 80154d0:	f7fe fd47 	bl	8013f62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154d8:	4b1f      	ldr	r3, [pc, #124]	; (8015558 <xTaskIncrementTick+0x178>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154de:	429a      	cmp	r2, r3
 80154e0:	d3b8      	bcc.n	8015454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80154e2:	2301      	movs	r3, #1
 80154e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154e6:	e7b5      	b.n	8015454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80154e8:	4b1b      	ldr	r3, [pc, #108]	; (8015558 <xTaskIncrementTick+0x178>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ee:	4919      	ldr	r1, [pc, #100]	; (8015554 <xTaskIncrementTick+0x174>)
 80154f0:	4613      	mov	r3, r2
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	4413      	add	r3, r2
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	440b      	add	r3, r1
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d901      	bls.n	8015504 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015500:	2301      	movs	r3, #1
 8015502:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015504:	4b15      	ldr	r3, [pc, #84]	; (801555c <xTaskIncrementTick+0x17c>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d101      	bne.n	8015510 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801550c:	f7eb f86a 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015510:	4b13      	ldr	r3, [pc, #76]	; (8015560 <xTaskIncrementTick+0x180>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d009      	beq.n	801552c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015518:	2301      	movs	r3, #1
 801551a:	617b      	str	r3, [r7, #20]
 801551c:	e006      	b.n	801552c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801551e:	4b0f      	ldr	r3, [pc, #60]	; (801555c <xTaskIncrementTick+0x17c>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	3301      	adds	r3, #1
 8015524:	4a0d      	ldr	r2, [pc, #52]	; (801555c <xTaskIncrementTick+0x17c>)
 8015526:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015528:	f7eb f85c 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801552c:	697b      	ldr	r3, [r7, #20]
}
 801552e:	4618      	mov	r0, r3
 8015530:	3718      	adds	r7, #24
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	24001d28 	.word	0x24001d28
 801553c:	24001d04 	.word	0x24001d04
 8015540:	24001cb8 	.word	0x24001cb8
 8015544:	24001cbc 	.word	0x24001cbc
 8015548:	24001d18 	.word	0x24001d18
 801554c:	24001d20 	.word	0x24001d20
 8015550:	24001d08 	.word	0x24001d08
 8015554:	24001830 	.word	0x24001830
 8015558:	2400182c 	.word	0x2400182c
 801555c:	24001d10 	.word	0x24001d10
 8015560:	24001d14 	.word	0x24001d14

08015564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801556a:	4b28      	ldr	r3, [pc, #160]	; (801560c <vTaskSwitchContext+0xa8>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d003      	beq.n	801557a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015572:	4b27      	ldr	r3, [pc, #156]	; (8015610 <vTaskSwitchContext+0xac>)
 8015574:	2201      	movs	r2, #1
 8015576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015578:	e041      	b.n	80155fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801557a:	4b25      	ldr	r3, [pc, #148]	; (8015610 <vTaskSwitchContext+0xac>)
 801557c:	2200      	movs	r2, #0
 801557e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015580:	4b24      	ldr	r3, [pc, #144]	; (8015614 <vTaskSwitchContext+0xb0>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	60fb      	str	r3, [r7, #12]
 8015586:	e010      	b.n	80155aa <vTaskSwitchContext+0x46>
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d10a      	bne.n	80155a4 <vTaskSwitchContext+0x40>
	__asm volatile
 801558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015592:	f383 8811 	msr	BASEPRI, r3
 8015596:	f3bf 8f6f 	isb	sy
 801559a:	f3bf 8f4f 	dsb	sy
 801559e:	607b      	str	r3, [r7, #4]
}
 80155a0:	bf00      	nop
 80155a2:	e7fe      	b.n	80155a2 <vTaskSwitchContext+0x3e>
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	3b01      	subs	r3, #1
 80155a8:	60fb      	str	r3, [r7, #12]
 80155aa:	491b      	ldr	r1, [pc, #108]	; (8015618 <vTaskSwitchContext+0xb4>)
 80155ac:	68fa      	ldr	r2, [r7, #12]
 80155ae:	4613      	mov	r3, r2
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	4413      	add	r3, r2
 80155b4:	009b      	lsls	r3, r3, #2
 80155b6:	440b      	add	r3, r1
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d0e4      	beq.n	8015588 <vTaskSwitchContext+0x24>
 80155be:	68fa      	ldr	r2, [r7, #12]
 80155c0:	4613      	mov	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	4413      	add	r3, r2
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	4a13      	ldr	r2, [pc, #76]	; (8015618 <vTaskSwitchContext+0xb4>)
 80155ca:	4413      	add	r3, r2
 80155cc:	60bb      	str	r3, [r7, #8]
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	685a      	ldr	r2, [r3, #4]
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	605a      	str	r2, [r3, #4]
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	685a      	ldr	r2, [r3, #4]
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	3308      	adds	r3, #8
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d104      	bne.n	80155ee <vTaskSwitchContext+0x8a>
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	685a      	ldr	r2, [r3, #4]
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	605a      	str	r2, [r3, #4]
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	4a09      	ldr	r2, [pc, #36]	; (801561c <vTaskSwitchContext+0xb8>)
 80155f6:	6013      	str	r3, [r2, #0]
 80155f8:	4a06      	ldr	r2, [pc, #24]	; (8015614 <vTaskSwitchContext+0xb0>)
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	6013      	str	r3, [r2, #0]
}
 80155fe:	bf00      	nop
 8015600:	3714      	adds	r7, #20
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr
 801560a:	bf00      	nop
 801560c:	24001d28 	.word	0x24001d28
 8015610:	24001d14 	.word	0x24001d14
 8015614:	24001d08 	.word	0x24001d08
 8015618:	24001830 	.word	0x24001830
 801561c:	2400182c 	.word	0x2400182c

08015620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b084      	sub	sp, #16
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d10a      	bne.n	8015646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015634:	f383 8811 	msr	BASEPRI, r3
 8015638:	f3bf 8f6f 	isb	sy
 801563c:	f3bf 8f4f 	dsb	sy
 8015640:	60fb      	str	r3, [r7, #12]
}
 8015642:	bf00      	nop
 8015644:	e7fe      	b.n	8015644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015646:	4b07      	ldr	r3, [pc, #28]	; (8015664 <vTaskPlaceOnEventList+0x44>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3318      	adds	r3, #24
 801564c:	4619      	mov	r1, r3
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7fe fcab 	bl	8013faa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015654:	2101      	movs	r1, #1
 8015656:	6838      	ldr	r0, [r7, #0]
 8015658:	f000 fb32 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
}
 801565c:	bf00      	nop
 801565e:	3710      	adds	r7, #16
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	2400182c 	.word	0x2400182c

08015668 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d10a      	bne.n	8015690 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801567e:	f383 8811 	msr	BASEPRI, r3
 8015682:	f3bf 8f6f 	isb	sy
 8015686:	f3bf 8f4f 	dsb	sy
 801568a:	617b      	str	r3, [r7, #20]
}
 801568c:	bf00      	nop
 801568e:	e7fe      	b.n	801568e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015690:	4b11      	ldr	r3, [pc, #68]	; (80156d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d10a      	bne.n	80156ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801569c:	f383 8811 	msr	BASEPRI, r3
 80156a0:	f3bf 8f6f 	isb	sy
 80156a4:	f3bf 8f4f 	dsb	sy
 80156a8:	613b      	str	r3, [r7, #16]
}
 80156aa:	bf00      	nop
 80156ac:	e7fe      	b.n	80156ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80156ae:	4b0b      	ldr	r3, [pc, #44]	; (80156dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	68ba      	ldr	r2, [r7, #8]
 80156b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80156b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156ba:	4b08      	ldr	r3, [pc, #32]	; (80156dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	3318      	adds	r3, #24
 80156c0:	4619      	mov	r1, r3
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f7fe fc4d 	bl	8013f62 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80156c8:	2101      	movs	r1, #1
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 faf8 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
}
 80156d0:	bf00      	nop
 80156d2:	3718      	adds	r7, #24
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	24001d28 	.word	0x24001d28
 80156dc:	2400182c 	.word	0x2400182c

080156e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b086      	sub	sp, #24
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	60b9      	str	r1, [r7, #8]
 80156ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10a      	bne.n	8015708 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80156f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f6:	f383 8811 	msr	BASEPRI, r3
 80156fa:	f3bf 8f6f 	isb	sy
 80156fe:	f3bf 8f4f 	dsb	sy
 8015702:	617b      	str	r3, [r7, #20]
}
 8015704:	bf00      	nop
 8015706:	e7fe      	b.n	8015706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015708:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <vTaskPlaceOnEventListRestricted+0x54>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	3318      	adds	r3, #24
 801570e:	4619      	mov	r1, r3
 8015710:	68f8      	ldr	r0, [r7, #12]
 8015712:	f7fe fc26 	bl	8013f62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d002      	beq.n	8015722 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801571c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015720:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015722:	6879      	ldr	r1, [r7, #4]
 8015724:	68b8      	ldr	r0, [r7, #8]
 8015726:	f000 facb 	bl	8015cc0 <prvAddCurrentTaskToDelayedList>
	}
 801572a:	bf00      	nop
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	2400182c 	.word	0x2400182c

08015738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b086      	sub	sp, #24
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d10a      	bne.n	8015764 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015752:	f383 8811 	msr	BASEPRI, r3
 8015756:	f3bf 8f6f 	isb	sy
 801575a:	f3bf 8f4f 	dsb	sy
 801575e:	60fb      	str	r3, [r7, #12]
}
 8015760:	bf00      	nop
 8015762:	e7fe      	b.n	8015762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	3318      	adds	r3, #24
 8015768:	4618      	mov	r0, r3
 801576a:	f7fe fc57 	bl	801401c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801576e:	4b1e      	ldr	r3, [pc, #120]	; (80157e8 <xTaskRemoveFromEventList+0xb0>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d11d      	bne.n	80157b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	3304      	adds	r3, #4
 801577a:	4618      	mov	r0, r3
 801577c:	f7fe fc4e 	bl	801401c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015784:	4b19      	ldr	r3, [pc, #100]	; (80157ec <xTaskRemoveFromEventList+0xb4>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	429a      	cmp	r2, r3
 801578a:	d903      	bls.n	8015794 <xTaskRemoveFromEventList+0x5c>
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015790:	4a16      	ldr	r2, [pc, #88]	; (80157ec <xTaskRemoveFromEventList+0xb4>)
 8015792:	6013      	str	r3, [r2, #0]
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015798:	4613      	mov	r3, r2
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	4413      	add	r3, r2
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	4a13      	ldr	r2, [pc, #76]	; (80157f0 <xTaskRemoveFromEventList+0xb8>)
 80157a2:	441a      	add	r2, r3
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	3304      	adds	r3, #4
 80157a8:	4619      	mov	r1, r3
 80157aa:	4610      	mov	r0, r2
 80157ac:	f7fe fbd9 	bl	8013f62 <vListInsertEnd>
 80157b0:	e005      	b.n	80157be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	3318      	adds	r3, #24
 80157b6:	4619      	mov	r1, r3
 80157b8:	480e      	ldr	r0, [pc, #56]	; (80157f4 <xTaskRemoveFromEventList+0xbc>)
 80157ba:	f7fe fbd2 	bl	8013f62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157c2:	4b0d      	ldr	r3, [pc, #52]	; (80157f8 <xTaskRemoveFromEventList+0xc0>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d905      	bls.n	80157d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80157cc:	2301      	movs	r3, #1
 80157ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80157d0:	4b0a      	ldr	r3, [pc, #40]	; (80157fc <xTaskRemoveFromEventList+0xc4>)
 80157d2:	2201      	movs	r2, #1
 80157d4:	601a      	str	r2, [r3, #0]
 80157d6:	e001      	b.n	80157dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80157d8:	2300      	movs	r3, #0
 80157da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80157dc:	697b      	ldr	r3, [r7, #20]
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3718      	adds	r7, #24
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	24001d28 	.word	0x24001d28
 80157ec:	24001d08 	.word	0x24001d08
 80157f0:	24001830 	.word	0x24001830
 80157f4:	24001cc0 	.word	0x24001cc0
 80157f8:	2400182c 	.word	0x2400182c
 80157fc:	24001d14 	.word	0x24001d14

08015800 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b086      	sub	sp, #24
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801580a:	4b29      	ldr	r3, [pc, #164]	; (80158b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d10a      	bne.n	8015828 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015816:	f383 8811 	msr	BASEPRI, r3
 801581a:	f3bf 8f6f 	isb	sy
 801581e:	f3bf 8f4f 	dsb	sy
 8015822:	613b      	str	r3, [r7, #16]
}
 8015824:	bf00      	nop
 8015826:	e7fe      	b.n	8015826 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10a      	bne.n	8015854 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	60fb      	str	r3, [r7, #12]
}
 8015850:	bf00      	nop
 8015852:	e7fe      	b.n	8015852 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f7fe fbe1 	bl	801401c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	3304      	adds	r3, #4
 801585e:	4618      	mov	r0, r3
 8015860:	f7fe fbdc 	bl	801401c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015868:	4b12      	ldr	r3, [pc, #72]	; (80158b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d903      	bls.n	8015878 <vTaskRemoveFromUnorderedEventList+0x78>
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015874:	4a0f      	ldr	r2, [pc, #60]	; (80158b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015876:	6013      	str	r3, [r2, #0]
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801587c:	4613      	mov	r3, r2
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	4413      	add	r3, r2
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	4a0c      	ldr	r2, [pc, #48]	; (80158b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015886:	441a      	add	r2, r3
 8015888:	697b      	ldr	r3, [r7, #20]
 801588a:	3304      	adds	r3, #4
 801588c:	4619      	mov	r1, r3
 801588e:	4610      	mov	r0, r2
 8015890:	f7fe fb67 	bl	8013f62 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015898:	4b08      	ldr	r3, [pc, #32]	; (80158bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801589e:	429a      	cmp	r2, r3
 80158a0:	d902      	bls.n	80158a8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80158a2:	4b07      	ldr	r3, [pc, #28]	; (80158c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80158a4:	2201      	movs	r2, #1
 80158a6:	601a      	str	r2, [r3, #0]
	}
}
 80158a8:	bf00      	nop
 80158aa:	3718      	adds	r7, #24
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	24001d28 	.word	0x24001d28
 80158b4:	24001d08 	.word	0x24001d08
 80158b8:	24001830 	.word	0x24001830
 80158bc:	2400182c 	.word	0x2400182c
 80158c0:	24001d14 	.word	0x24001d14

080158c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <vTaskInternalSetTimeOutState+0x24>)
 80158ce:	681a      	ldr	r2, [r3, #0]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80158d4:	4b05      	ldr	r3, [pc, #20]	; (80158ec <vTaskInternalSetTimeOutState+0x28>)
 80158d6:	681a      	ldr	r2, [r3, #0]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	605a      	str	r2, [r3, #4]
}
 80158dc:	bf00      	nop
 80158de:	370c      	adds	r7, #12
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr
 80158e8:	24001d18 	.word	0x24001d18
 80158ec:	24001d04 	.word	0x24001d04

080158f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b088      	sub	sp, #32
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d10a      	bne.n	8015916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	613b      	str	r3, [r7, #16]
}
 8015912:	bf00      	nop
 8015914:	e7fe      	b.n	8015914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d10a      	bne.n	8015932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015920:	f383 8811 	msr	BASEPRI, r3
 8015924:	f3bf 8f6f 	isb	sy
 8015928:	f3bf 8f4f 	dsb	sy
 801592c:	60fb      	str	r3, [r7, #12]
}
 801592e:	bf00      	nop
 8015930:	e7fe      	b.n	8015930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015932:	f000 feb7 	bl	80166a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015936:	4b1d      	ldr	r3, [pc, #116]	; (80159ac <xTaskCheckForTimeOut+0xbc>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	69ba      	ldr	r2, [r7, #24]
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801594e:	d102      	bne.n	8015956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015950:	2300      	movs	r3, #0
 8015952:	61fb      	str	r3, [r7, #28]
 8015954:	e023      	b.n	801599e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	4b15      	ldr	r3, [pc, #84]	; (80159b0 <xTaskCheckForTimeOut+0xc0>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	429a      	cmp	r2, r3
 8015960:	d007      	beq.n	8015972 <xTaskCheckForTimeOut+0x82>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	69ba      	ldr	r2, [r7, #24]
 8015968:	429a      	cmp	r2, r3
 801596a:	d302      	bcc.n	8015972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801596c:	2301      	movs	r3, #1
 801596e:	61fb      	str	r3, [r7, #28]
 8015970:	e015      	b.n	801599e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015972:	683b      	ldr	r3, [r7, #0]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	697a      	ldr	r2, [r7, #20]
 8015978:	429a      	cmp	r2, r3
 801597a:	d20b      	bcs.n	8015994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	681a      	ldr	r2, [r3, #0]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	1ad2      	subs	r2, r2, r3
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f7ff ff9b 	bl	80158c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801598e:	2300      	movs	r3, #0
 8015990:	61fb      	str	r3, [r7, #28]
 8015992:	e004      	b.n	801599e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801599a:	2301      	movs	r3, #1
 801599c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801599e:	f000 feb1 	bl	8016704 <vPortExitCritical>

	return xReturn;
 80159a2:	69fb      	ldr	r3, [r7, #28]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3720      	adds	r7, #32
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	24001d04 	.word	0x24001d04
 80159b0:	24001d18 	.word	0x24001d18

080159b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80159b4:	b480      	push	{r7}
 80159b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80159b8:	4b03      	ldr	r3, [pc, #12]	; (80159c8 <vTaskMissedYield+0x14>)
 80159ba:	2201      	movs	r2, #1
 80159bc:	601a      	str	r2, [r3, #0]
}
 80159be:	bf00      	nop
 80159c0:	46bd      	mov	sp, r7
 80159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c6:	4770      	bx	lr
 80159c8:	24001d14 	.word	0x24001d14

080159cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80159d4:	f000 f852 	bl	8015a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80159d8:	4b06      	ldr	r3, [pc, #24]	; (80159f4 <prvIdleTask+0x28>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b01      	cmp	r3, #1
 80159de:	d9f9      	bls.n	80159d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80159e0:	4b05      	ldr	r3, [pc, #20]	; (80159f8 <prvIdleTask+0x2c>)
 80159e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159e6:	601a      	str	r2, [r3, #0]
 80159e8:	f3bf 8f4f 	dsb	sy
 80159ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80159f0:	e7f0      	b.n	80159d4 <prvIdleTask+0x8>
 80159f2:	bf00      	nop
 80159f4:	24001830 	.word	0x24001830
 80159f8:	e000ed04 	.word	0xe000ed04

080159fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a02:	2300      	movs	r3, #0
 8015a04:	607b      	str	r3, [r7, #4]
 8015a06:	e00c      	b.n	8015a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	4413      	add	r3, r2
 8015a10:	009b      	lsls	r3, r3, #2
 8015a12:	4a12      	ldr	r2, [pc, #72]	; (8015a5c <prvInitialiseTaskLists+0x60>)
 8015a14:	4413      	add	r3, r2
 8015a16:	4618      	mov	r0, r3
 8015a18:	f7fe fa76 	bl	8013f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	607b      	str	r3, [r7, #4]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2b37      	cmp	r3, #55	; 0x37
 8015a26:	d9ef      	bls.n	8015a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015a28:	480d      	ldr	r0, [pc, #52]	; (8015a60 <prvInitialiseTaskLists+0x64>)
 8015a2a:	f7fe fa6d 	bl	8013f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015a2e:	480d      	ldr	r0, [pc, #52]	; (8015a64 <prvInitialiseTaskLists+0x68>)
 8015a30:	f7fe fa6a 	bl	8013f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015a34:	480c      	ldr	r0, [pc, #48]	; (8015a68 <prvInitialiseTaskLists+0x6c>)
 8015a36:	f7fe fa67 	bl	8013f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015a3a:	480c      	ldr	r0, [pc, #48]	; (8015a6c <prvInitialiseTaskLists+0x70>)
 8015a3c:	f7fe fa64 	bl	8013f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015a40:	480b      	ldr	r0, [pc, #44]	; (8015a70 <prvInitialiseTaskLists+0x74>)
 8015a42:	f7fe fa61 	bl	8013f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015a46:	4b0b      	ldr	r3, [pc, #44]	; (8015a74 <prvInitialiseTaskLists+0x78>)
 8015a48:	4a05      	ldr	r2, [pc, #20]	; (8015a60 <prvInitialiseTaskLists+0x64>)
 8015a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015a4c:	4b0a      	ldr	r3, [pc, #40]	; (8015a78 <prvInitialiseTaskLists+0x7c>)
 8015a4e:	4a05      	ldr	r2, [pc, #20]	; (8015a64 <prvInitialiseTaskLists+0x68>)
 8015a50:	601a      	str	r2, [r3, #0]
}
 8015a52:	bf00      	nop
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	24001830 	.word	0x24001830
 8015a60:	24001c90 	.word	0x24001c90
 8015a64:	24001ca4 	.word	0x24001ca4
 8015a68:	24001cc0 	.word	0x24001cc0
 8015a6c:	24001cd4 	.word	0x24001cd4
 8015a70:	24001cec 	.word	0x24001cec
 8015a74:	24001cb8 	.word	0x24001cb8
 8015a78:	24001cbc 	.word	0x24001cbc

08015a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015a82:	e019      	b.n	8015ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015a84:	f000 fe0e 	bl	80166a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a88:	4b10      	ldr	r3, [pc, #64]	; (8015acc <prvCheckTasksWaitingTermination+0x50>)
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	3304      	adds	r3, #4
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fe fac1 	bl	801401c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015a9a:	4b0d      	ldr	r3, [pc, #52]	; (8015ad0 <prvCheckTasksWaitingTermination+0x54>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	3b01      	subs	r3, #1
 8015aa0:	4a0b      	ldr	r2, [pc, #44]	; (8015ad0 <prvCheckTasksWaitingTermination+0x54>)
 8015aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015aa4:	4b0b      	ldr	r3, [pc, #44]	; (8015ad4 <prvCheckTasksWaitingTermination+0x58>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	3b01      	subs	r3, #1
 8015aaa:	4a0a      	ldr	r2, [pc, #40]	; (8015ad4 <prvCheckTasksWaitingTermination+0x58>)
 8015aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015aae:	f000 fe29 	bl	8016704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 f810 	bl	8015ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ab8:	4b06      	ldr	r3, [pc, #24]	; (8015ad4 <prvCheckTasksWaitingTermination+0x58>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1e1      	bne.n	8015a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015ac0:	bf00      	nop
 8015ac2:	bf00      	nop
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	24001cd4 	.word	0x24001cd4
 8015ad0:	24001d00 	.word	0x24001d00
 8015ad4:	24001ce8 	.word	0x24001ce8

08015ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d108      	bne.n	8015afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aee:	4618      	mov	r0, r3
 8015af0:	f000 ffc6 	bl	8016a80 <vPortFree>
				vPortFree( pxTCB );
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 ffc3 	bl	8016a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015afa:	e018      	b.n	8015b2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015b02:	2b01      	cmp	r3, #1
 8015b04:	d103      	bne.n	8015b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 ffba 	bl	8016a80 <vPortFree>
	}
 8015b0c:	e00f      	b.n	8015b2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015b14:	2b02      	cmp	r3, #2
 8015b16:	d00a      	beq.n	8015b2e <prvDeleteTCB+0x56>
	__asm volatile
 8015b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b1c:	f383 8811 	msr	BASEPRI, r3
 8015b20:	f3bf 8f6f 	isb	sy
 8015b24:	f3bf 8f4f 	dsb	sy
 8015b28:	60fb      	str	r3, [r7, #12]
}
 8015b2a:	bf00      	nop
 8015b2c:	e7fe      	b.n	8015b2c <prvDeleteTCB+0x54>
	}
 8015b2e:	bf00      	nop
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
	...

08015b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b3e:	4b0c      	ldr	r3, [pc, #48]	; (8015b70 <prvResetNextTaskUnblockTime+0x38>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d104      	bne.n	8015b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015b48:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <prvResetNextTaskUnblockTime+0x3c>)
 8015b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015b50:	e008      	b.n	8015b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b52:	4b07      	ldr	r3, [pc, #28]	; (8015b70 <prvResetNextTaskUnblockTime+0x38>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	4a04      	ldr	r2, [pc, #16]	; (8015b74 <prvResetNextTaskUnblockTime+0x3c>)
 8015b62:	6013      	str	r3, [r2, #0]
}
 8015b64:	bf00      	nop
 8015b66:	370c      	adds	r7, #12
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr
 8015b70:	24001cb8 	.word	0x24001cb8
 8015b74:	24001d20 	.word	0x24001d20

08015b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015b7e:	4b0b      	ldr	r3, [pc, #44]	; (8015bac <xTaskGetSchedulerState+0x34>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d102      	bne.n	8015b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015b86:	2301      	movs	r3, #1
 8015b88:	607b      	str	r3, [r7, #4]
 8015b8a:	e008      	b.n	8015b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b8c:	4b08      	ldr	r3, [pc, #32]	; (8015bb0 <xTaskGetSchedulerState+0x38>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d102      	bne.n	8015b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015b94:	2302      	movs	r3, #2
 8015b96:	607b      	str	r3, [r7, #4]
 8015b98:	e001      	b.n	8015b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015b9e:	687b      	ldr	r3, [r7, #4]
	}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	370c      	adds	r7, #12
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr
 8015bac:	24001d0c 	.word	0x24001d0c
 8015bb0:	24001d28 	.word	0x24001d28

08015bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b086      	sub	sp, #24
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d056      	beq.n	8015c78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015bca:	4b2e      	ldr	r3, [pc, #184]	; (8015c84 <xTaskPriorityDisinherit+0xd0>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	693a      	ldr	r2, [r7, #16]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d00a      	beq.n	8015bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd8:	f383 8811 	msr	BASEPRI, r3
 8015bdc:	f3bf 8f6f 	isb	sy
 8015be0:	f3bf 8f4f 	dsb	sy
 8015be4:	60fb      	str	r3, [r7, #12]
}
 8015be6:	bf00      	nop
 8015be8:	e7fe      	b.n	8015be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10a      	bne.n	8015c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf6:	f383 8811 	msr	BASEPRI, r3
 8015bfa:	f3bf 8f6f 	isb	sy
 8015bfe:	f3bf 8f4f 	dsb	sy
 8015c02:	60bb      	str	r3, [r7, #8]
}
 8015c04:	bf00      	nop
 8015c06:	e7fe      	b.n	8015c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c0c:	1e5a      	subs	r2, r3, #1
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d02c      	beq.n	8015c78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d128      	bne.n	8015c78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	3304      	adds	r3, #4
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7fe f9f6 	bl	801401c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c48:	4b0f      	ldr	r3, [pc, #60]	; (8015c88 <xTaskPriorityDisinherit+0xd4>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d903      	bls.n	8015c58 <xTaskPriorityDisinherit+0xa4>
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c54:	4a0c      	ldr	r2, [pc, #48]	; (8015c88 <xTaskPriorityDisinherit+0xd4>)
 8015c56:	6013      	str	r3, [r2, #0]
 8015c58:	693b      	ldr	r3, [r7, #16]
 8015c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4413      	add	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	4a09      	ldr	r2, [pc, #36]	; (8015c8c <xTaskPriorityDisinherit+0xd8>)
 8015c66:	441a      	add	r2, r3
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	4610      	mov	r0, r2
 8015c70:	f7fe f977 	bl	8013f62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015c74:	2301      	movs	r3, #1
 8015c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015c78:	697b      	ldr	r3, [r7, #20]
	}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3718      	adds	r7, #24
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop
 8015c84:	2400182c 	.word	0x2400182c
 8015c88:	24001d08 	.word	0x24001d08
 8015c8c:	24001830 	.word	0x24001830

08015c90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015c96:	4b09      	ldr	r3, [pc, #36]	; (8015cbc <uxTaskResetEventItemValue+0x2c>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	699b      	ldr	r3, [r3, #24]
 8015c9c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c9e:	4b07      	ldr	r3, [pc, #28]	; (8015cbc <uxTaskResetEventItemValue+0x2c>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca4:	4b05      	ldr	r3, [pc, #20]	; (8015cbc <uxTaskResetEventItemValue+0x2c>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015cac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015cae:	687b      	ldr	r3, [r7, #4]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr
 8015cbc:	2400182c 	.word	0x2400182c

08015cc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015cca:	4b21      	ldr	r3, [pc, #132]	; (8015d50 <prvAddCurrentTaskToDelayedList+0x90>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015cd0:	4b20      	ldr	r3, [pc, #128]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fe f9a0 	bl	801401c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ce2:	d10a      	bne.n	8015cfa <prvAddCurrentTaskToDelayedList+0x3a>
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d007      	beq.n	8015cfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cea:	4b1a      	ldr	r3, [pc, #104]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	3304      	adds	r3, #4
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	4819      	ldr	r0, [pc, #100]	; (8015d58 <prvAddCurrentTaskToDelayedList+0x98>)
 8015cf4:	f7fe f935 	bl	8013f62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015cf8:	e026      	b.n	8015d48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015cfa:	68fa      	ldr	r2, [r7, #12]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	4413      	add	r3, r2
 8015d00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015d02:	4b14      	ldr	r3, [pc, #80]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	68ba      	ldr	r2, [r7, #8]
 8015d08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015d0a:	68ba      	ldr	r2, [r7, #8]
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d209      	bcs.n	8015d26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d12:	4b12      	ldr	r3, [pc, #72]	; (8015d5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	4b0f      	ldr	r3, [pc, #60]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	4610      	mov	r0, r2
 8015d20:	f7fe f943 	bl	8013faa <vListInsert>
}
 8015d24:	e010      	b.n	8015d48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d26:	4b0e      	ldr	r3, [pc, #56]	; (8015d60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	4b0a      	ldr	r3, [pc, #40]	; (8015d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	3304      	adds	r3, #4
 8015d30:	4619      	mov	r1, r3
 8015d32:	4610      	mov	r0, r2
 8015d34:	f7fe f939 	bl	8013faa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d38:	4b0a      	ldr	r3, [pc, #40]	; (8015d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	68ba      	ldr	r2, [r7, #8]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d202      	bcs.n	8015d48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d42:	4a08      	ldr	r2, [pc, #32]	; (8015d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	6013      	str	r3, [r2, #0]
}
 8015d48:	bf00      	nop
 8015d4a:	3710      	adds	r7, #16
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}
 8015d50:	24001d04 	.word	0x24001d04
 8015d54:	2400182c 	.word	0x2400182c
 8015d58:	24001cec 	.word	0x24001cec
 8015d5c:	24001cbc 	.word	0x24001cbc
 8015d60:	24001cb8 	.word	0x24001cb8
 8015d64:	24001d20 	.word	0x24001d20

08015d68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b08a      	sub	sp, #40	; 0x28
 8015d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015d72:	f000 fb07 	bl	8016384 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015d76:	4b1c      	ldr	r3, [pc, #112]	; (8015de8 <xTimerCreateTimerTask+0x80>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d021      	beq.n	8015dc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015d82:	2300      	movs	r3, #0
 8015d84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015d86:	1d3a      	adds	r2, r7, #4
 8015d88:	f107 0108 	add.w	r1, r7, #8
 8015d8c:	f107 030c 	add.w	r3, r7, #12
 8015d90:	4618      	mov	r0, r3
 8015d92:	f7fd fe33 	bl	80139fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	68fa      	ldr	r2, [r7, #12]
 8015d9c:	9202      	str	r2, [sp, #8]
 8015d9e:	9301      	str	r3, [sp, #4]
 8015da0:	2302      	movs	r3, #2
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	2300      	movs	r3, #0
 8015da6:	460a      	mov	r2, r1
 8015da8:	4910      	ldr	r1, [pc, #64]	; (8015dec <xTimerCreateTimerTask+0x84>)
 8015daa:	4811      	ldr	r0, [pc, #68]	; (8015df0 <xTimerCreateTimerTask+0x88>)
 8015dac:	f7fe ff06 	bl	8014bbc <xTaskCreateStatic>
 8015db0:	4603      	mov	r3, r0
 8015db2:	4a10      	ldr	r2, [pc, #64]	; (8015df4 <xTimerCreateTimerTask+0x8c>)
 8015db4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015db6:	4b0f      	ldr	r3, [pc, #60]	; (8015df4 <xTimerCreateTimerTask+0x8c>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d001      	beq.n	8015dc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d10a      	bne.n	8015dde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dcc:	f383 8811 	msr	BASEPRI, r3
 8015dd0:	f3bf 8f6f 	isb	sy
 8015dd4:	f3bf 8f4f 	dsb	sy
 8015dd8:	613b      	str	r3, [r7, #16]
}
 8015dda:	bf00      	nop
 8015ddc:	e7fe      	b.n	8015ddc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015dde:	697b      	ldr	r3, [r7, #20]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3718      	adds	r7, #24
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	24001d5c 	.word	0x24001d5c
 8015dec:	080179ec 	.word	0x080179ec
 8015df0:	08015f2d 	.word	0x08015f2d
 8015df4:	24001d60 	.word	0x24001d60

08015df8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b08a      	sub	sp, #40	; 0x28
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d10a      	bne.n	8015e26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e14:	f383 8811 	msr	BASEPRI, r3
 8015e18:	f3bf 8f6f 	isb	sy
 8015e1c:	f3bf 8f4f 	dsb	sy
 8015e20:	623b      	str	r3, [r7, #32]
}
 8015e22:	bf00      	nop
 8015e24:	e7fe      	b.n	8015e24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015e26:	4b1a      	ldr	r3, [pc, #104]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d02a      	beq.n	8015e84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	2b05      	cmp	r3, #5
 8015e3e:	dc18      	bgt.n	8015e72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015e40:	f7ff fe9a 	bl	8015b78 <xTaskGetSchedulerState>
 8015e44:	4603      	mov	r3, r0
 8015e46:	2b02      	cmp	r3, #2
 8015e48:	d109      	bne.n	8015e5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015e4a:	4b11      	ldr	r3, [pc, #68]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e4c:	6818      	ldr	r0, [r3, #0]
 8015e4e:	f107 0110 	add.w	r1, r7, #16
 8015e52:	2300      	movs	r3, #0
 8015e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e56:	f7fe fa49 	bl	80142ec <xQueueGenericSend>
 8015e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e5c:	e012      	b.n	8015e84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015e5e:	4b0c      	ldr	r3, [pc, #48]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e60:	6818      	ldr	r0, [r3, #0]
 8015e62:	f107 0110 	add.w	r1, r7, #16
 8015e66:	2300      	movs	r3, #0
 8015e68:	2200      	movs	r2, #0
 8015e6a:	f7fe fa3f 	bl	80142ec <xQueueGenericSend>
 8015e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8015e70:	e008      	b.n	8015e84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015e72:	4b07      	ldr	r3, [pc, #28]	; (8015e90 <xTimerGenericCommand+0x98>)
 8015e74:	6818      	ldr	r0, [r3, #0]
 8015e76:	f107 0110 	add.w	r1, r7, #16
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	683a      	ldr	r2, [r7, #0]
 8015e7e:	f7fe fb33 	bl	80144e8 <xQueueGenericSendFromISR>
 8015e82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3728      	adds	r7, #40	; 0x28
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}
 8015e8e:	bf00      	nop
 8015e90:	24001d5c 	.word	0x24001d5c

08015e94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b088      	sub	sp, #32
 8015e98:	af02      	add	r7, sp, #8
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e9e:	4b22      	ldr	r3, [pc, #136]	; (8015f28 <prvProcessExpiredTimer+0x94>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	68db      	ldr	r3, [r3, #12]
 8015ea4:	68db      	ldr	r3, [r3, #12]
 8015ea6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	3304      	adds	r3, #4
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7fe f8b5 	bl	801401c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eb8:	f003 0304 	and.w	r3, r3, #4
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d022      	beq.n	8015f06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	699a      	ldr	r2, [r3, #24]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	18d1      	adds	r1, r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	683a      	ldr	r2, [r7, #0]
 8015ecc:	6978      	ldr	r0, [r7, #20]
 8015ece:	f000 f8d1 	bl	8016074 <prvInsertTimerInActiveList>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d01f      	beq.n	8015f18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ed8:	2300      	movs	r3, #0
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	2300      	movs	r3, #0
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	6978      	ldr	r0, [r7, #20]
 8015ee4:	f7ff ff88 	bl	8015df8 <xTimerGenericCommand>
 8015ee8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d113      	bne.n	8015f18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	60fb      	str	r3, [r7, #12]
}
 8015f02:	bf00      	nop
 8015f04:	e7fe      	b.n	8015f04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f0c:	f023 0301 	bic.w	r3, r3, #1
 8015f10:	b2da      	uxtb	r2, r3
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	6a1b      	ldr	r3, [r3, #32]
 8015f1c:	6978      	ldr	r0, [r7, #20]
 8015f1e:	4798      	blx	r3
}
 8015f20:	bf00      	nop
 8015f22:	3718      	adds	r7, #24
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	24001d54 	.word	0x24001d54

08015f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f34:	f107 0308 	add.w	r3, r7, #8
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f000 f857 	bl	8015fec <prvGetNextExpireTime>
 8015f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	4619      	mov	r1, r3
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f000 f803 	bl	8015f50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015f4a:	f000 f8d5 	bl	80160f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f4e:	e7f1      	b.n	8015f34 <prvTimerTask+0x8>

08015f50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
 8015f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015f5a:	f7ff f985 	bl	8015268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f5e:	f107 0308 	add.w	r3, r7, #8
 8015f62:	4618      	mov	r0, r3
 8015f64:	f000 f866 	bl	8016034 <prvSampleTimeNow>
 8015f68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d130      	bne.n	8015fd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d10a      	bne.n	8015f8c <prvProcessTimerOrBlockTask+0x3c>
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d806      	bhi.n	8015f8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015f7e:	f7ff f981 	bl	8015284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015f82:	68f9      	ldr	r1, [r7, #12]
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7ff ff85 	bl	8015e94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015f8a:	e024      	b.n	8015fd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d008      	beq.n	8015fa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015f92:	4b13      	ldr	r3, [pc, #76]	; (8015fe0 <prvProcessTimerOrBlockTask+0x90>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d101      	bne.n	8015fa0 <prvProcessTimerOrBlockTask+0x50>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	e000      	b.n	8015fa2 <prvProcessTimerOrBlockTask+0x52>
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015fa4:	4b0f      	ldr	r3, [pc, #60]	; (8015fe4 <prvProcessTimerOrBlockTask+0x94>)
 8015fa6:	6818      	ldr	r0, [r3, #0]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	683a      	ldr	r2, [r7, #0]
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	f7fe fdcf 	bl	8014b54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015fb6:	f7ff f965 	bl	8015284 <xTaskResumeAll>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d10a      	bne.n	8015fd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015fc0:	4b09      	ldr	r3, [pc, #36]	; (8015fe8 <prvProcessTimerOrBlockTask+0x98>)
 8015fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fc6:	601a      	str	r2, [r3, #0]
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	f3bf 8f6f 	isb	sy
}
 8015fd0:	e001      	b.n	8015fd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015fd2:	f7ff f957 	bl	8015284 <xTaskResumeAll>
}
 8015fd6:	bf00      	nop
 8015fd8:	3710      	adds	r7, #16
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	24001d58 	.word	0x24001d58
 8015fe4:	24001d5c 	.word	0x24001d5c
 8015fe8:	e000ed04 	.word	0xe000ed04

08015fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015fec:	b480      	push	{r7}
 8015fee:	b085      	sub	sp, #20
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015ff4:	4b0e      	ldr	r3, [pc, #56]	; (8016030 <prvGetNextExpireTime+0x44>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d101      	bne.n	8016002 <prvGetNextExpireTime+0x16>
 8015ffe:	2201      	movs	r2, #1
 8016000:	e000      	b.n	8016004 <prvGetNextExpireTime+0x18>
 8016002:	2200      	movs	r2, #0
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d105      	bne.n	801601c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016010:	4b07      	ldr	r3, [pc, #28]	; (8016030 <prvGetNextExpireTime+0x44>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	68db      	ldr	r3, [r3, #12]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	60fb      	str	r3, [r7, #12]
 801601a:	e001      	b.n	8016020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801601c:	2300      	movs	r3, #0
 801601e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016020:	68fb      	ldr	r3, [r7, #12]
}
 8016022:	4618      	mov	r0, r3
 8016024:	3714      	adds	r7, #20
 8016026:	46bd      	mov	sp, r7
 8016028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602c:	4770      	bx	lr
 801602e:	bf00      	nop
 8016030:	24001d54 	.word	0x24001d54

08016034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801603c:	f7ff f9c0 	bl	80153c0 <xTaskGetTickCount>
 8016040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016042:	4b0b      	ldr	r3, [pc, #44]	; (8016070 <prvSampleTimeNow+0x3c>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	68fa      	ldr	r2, [r7, #12]
 8016048:	429a      	cmp	r2, r3
 801604a:	d205      	bcs.n	8016058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801604c:	f000 f936 	bl	80162bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2201      	movs	r2, #1
 8016054:	601a      	str	r2, [r3, #0]
 8016056:	e002      	b.n	801605e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801605e:	4a04      	ldr	r2, [pc, #16]	; (8016070 <prvSampleTimeNow+0x3c>)
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016064:	68fb      	ldr	r3, [r7, #12]
}
 8016066:	4618      	mov	r0, r3
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	24001d64 	.word	0x24001d64

08016074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b086      	sub	sp, #24
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
 8016080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016082:	2300      	movs	r3, #0
 8016084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	68fa      	ldr	r2, [r7, #12]
 8016090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016092:	68ba      	ldr	r2, [r7, #8]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	429a      	cmp	r2, r3
 8016098:	d812      	bhi.n	80160c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	1ad2      	subs	r2, r2, r3
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	699b      	ldr	r3, [r3, #24]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d302      	bcc.n	80160ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80160a8:	2301      	movs	r3, #1
 80160aa:	617b      	str	r3, [r7, #20]
 80160ac:	e01b      	b.n	80160e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80160ae:	4b10      	ldr	r3, [pc, #64]	; (80160f0 <prvInsertTimerInActiveList+0x7c>)
 80160b0:	681a      	ldr	r2, [r3, #0]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	3304      	adds	r3, #4
 80160b6:	4619      	mov	r1, r3
 80160b8:	4610      	mov	r0, r2
 80160ba:	f7fd ff76 	bl	8013faa <vListInsert>
 80160be:	e012      	b.n	80160e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d206      	bcs.n	80160d6 <prvInsertTimerInActiveList+0x62>
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d302      	bcc.n	80160d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80160d0:	2301      	movs	r3, #1
 80160d2:	617b      	str	r3, [r7, #20]
 80160d4:	e007      	b.n	80160e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80160d6:	4b07      	ldr	r3, [pc, #28]	; (80160f4 <prvInsertTimerInActiveList+0x80>)
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	3304      	adds	r3, #4
 80160de:	4619      	mov	r1, r3
 80160e0:	4610      	mov	r0, r2
 80160e2:	f7fd ff62 	bl	8013faa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80160e6:	697b      	ldr	r3, [r7, #20]
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3718      	adds	r7, #24
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	24001d58 	.word	0x24001d58
 80160f4:	24001d54 	.word	0x24001d54

080160f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b08e      	sub	sp, #56	; 0x38
 80160fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160fe:	e0ca      	b.n	8016296 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2b00      	cmp	r3, #0
 8016104:	da18      	bge.n	8016138 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016106:	1d3b      	adds	r3, r7, #4
 8016108:	3304      	adds	r3, #4
 801610a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610e:	2b00      	cmp	r3, #0
 8016110:	d10a      	bne.n	8016128 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8016112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016116:	f383 8811 	msr	BASEPRI, r3
 801611a:	f3bf 8f6f 	isb	sy
 801611e:	f3bf 8f4f 	dsb	sy
 8016122:	61fb      	str	r3, [r7, #28]
}
 8016124:	bf00      	nop
 8016126:	e7fe      	b.n	8016126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801612e:	6850      	ldr	r0, [r2, #4]
 8016130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016132:	6892      	ldr	r2, [r2, #8]
 8016134:	4611      	mov	r1, r2
 8016136:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2b00      	cmp	r3, #0
 801613c:	f2c0 80aa 	blt.w	8016294 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016146:	695b      	ldr	r3, [r3, #20]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d004      	beq.n	8016156 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801614e:	3304      	adds	r3, #4
 8016150:	4618      	mov	r0, r3
 8016152:	f7fd ff63 	bl	801401c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016156:	463b      	mov	r3, r7
 8016158:	4618      	mov	r0, r3
 801615a:	f7ff ff6b 	bl	8016034 <prvSampleTimeNow>
 801615e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b09      	cmp	r3, #9
 8016164:	f200 8097 	bhi.w	8016296 <prvProcessReceivedCommands+0x19e>
 8016168:	a201      	add	r2, pc, #4	; (adr r2, 8016170 <prvProcessReceivedCommands+0x78>)
 801616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801616e:	bf00      	nop
 8016170:	08016199 	.word	0x08016199
 8016174:	08016199 	.word	0x08016199
 8016178:	08016199 	.word	0x08016199
 801617c:	0801620d 	.word	0x0801620d
 8016180:	08016221 	.word	0x08016221
 8016184:	0801626b 	.word	0x0801626b
 8016188:	08016199 	.word	0x08016199
 801618c:	08016199 	.word	0x08016199
 8016190:	0801620d 	.word	0x0801620d
 8016194:	08016221 	.word	0x08016221
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801619a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801619e:	f043 0301 	orr.w	r3, r3, #1
 80161a2:	b2da      	uxtb	r2, r3
 80161a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ae:	699b      	ldr	r3, [r3, #24]
 80161b0:	18d1      	adds	r1, r2, r3
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161b8:	f7ff ff5c 	bl	8016074 <prvInsertTimerInActiveList>
 80161bc:	4603      	mov	r3, r0
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d069      	beq.n	8016296 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80161c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c4:	6a1b      	ldr	r3, [r3, #32]
 80161c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161d0:	f003 0304 	and.w	r3, r3, #4
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d05e      	beq.n	8016296 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80161d8:	68ba      	ldr	r2, [r7, #8]
 80161da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	441a      	add	r2, r3
 80161e0:	2300      	movs	r3, #0
 80161e2:	9300      	str	r3, [sp, #0]
 80161e4:	2300      	movs	r3, #0
 80161e6:	2100      	movs	r1, #0
 80161e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161ea:	f7ff fe05 	bl	8015df8 <xTimerGenericCommand>
 80161ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d14f      	bne.n	8016296 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80161f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161fa:	f383 8811 	msr	BASEPRI, r3
 80161fe:	f3bf 8f6f 	isb	sy
 8016202:	f3bf 8f4f 	dsb	sy
 8016206:	61bb      	str	r3, [r7, #24]
}
 8016208:	bf00      	nop
 801620a:	e7fe      	b.n	801620a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016212:	f023 0301 	bic.w	r3, r3, #1
 8016216:	b2da      	uxtb	r2, r3
 8016218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801621e:	e03a      	b.n	8016296 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016226:	f043 0301 	orr.w	r3, r3, #1
 801622a:	b2da      	uxtb	r2, r3
 801622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016232:	68ba      	ldr	r2, [r7, #8]
 8016234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016236:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d10a      	bne.n	8016256 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	617b      	str	r3, [r7, #20]
}
 8016252:	bf00      	nop
 8016254:	e7fe      	b.n	8016254 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	699a      	ldr	r2, [r3, #24]
 801625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625c:	18d1      	adds	r1, r2, r3
 801625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016264:	f7ff ff06 	bl	8016074 <prvInsertTimerInActiveList>
					break;
 8016268:	e015      	b.n	8016296 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016270:	f003 0302 	and.w	r3, r3, #2
 8016274:	2b00      	cmp	r3, #0
 8016276:	d103      	bne.n	8016280 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801627a:	f000 fc01 	bl	8016a80 <vPortFree>
 801627e:	e00a      	b.n	8016296 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016286:	f023 0301 	bic.w	r3, r3, #1
 801628a:	b2da      	uxtb	r2, r3
 801628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016292:	e000      	b.n	8016296 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016294:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016296:	4b08      	ldr	r3, [pc, #32]	; (80162b8 <prvProcessReceivedCommands+0x1c0>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	1d39      	adds	r1, r7, #4
 801629c:	2200      	movs	r2, #0
 801629e:	4618      	mov	r0, r3
 80162a0:	f7fe f9be 	bl	8014620 <xQueueReceive>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f47f af2a 	bne.w	8016100 <prvProcessReceivedCommands+0x8>
	}
}
 80162ac:	bf00      	nop
 80162ae:	bf00      	nop
 80162b0:	3730      	adds	r7, #48	; 0x30
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	24001d5c 	.word	0x24001d5c

080162bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b088      	sub	sp, #32
 80162c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80162c2:	e048      	b.n	8016356 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162c4:	4b2d      	ldr	r3, [pc, #180]	; (801637c <prvSwitchTimerLists+0xc0>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ce:	4b2b      	ldr	r3, [pc, #172]	; (801637c <prvSwitchTimerLists+0xc0>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	3304      	adds	r3, #4
 80162dc:	4618      	mov	r0, r3
 80162de:	f7fd fe9d 	bl	801401c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	6a1b      	ldr	r3, [r3, #32]
 80162e6:	68f8      	ldr	r0, [r7, #12]
 80162e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162f0:	f003 0304 	and.w	r3, r3, #4
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d02e      	beq.n	8016356 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	699b      	ldr	r3, [r3, #24]
 80162fc:	693a      	ldr	r2, [r7, #16]
 80162fe:	4413      	add	r3, r2
 8016300:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	429a      	cmp	r2, r3
 8016308:	d90e      	bls.n	8016328 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	68ba      	ldr	r2, [r7, #8]
 801630e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	68fa      	ldr	r2, [r7, #12]
 8016314:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016316:	4b19      	ldr	r3, [pc, #100]	; (801637c <prvSwitchTimerLists+0xc0>)
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3304      	adds	r3, #4
 801631e:	4619      	mov	r1, r3
 8016320:	4610      	mov	r0, r2
 8016322:	f7fd fe42 	bl	8013faa <vListInsert>
 8016326:	e016      	b.n	8016356 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016328:	2300      	movs	r3, #0
 801632a:	9300      	str	r3, [sp, #0]
 801632c:	2300      	movs	r3, #0
 801632e:	693a      	ldr	r2, [r7, #16]
 8016330:	2100      	movs	r1, #0
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f7ff fd60 	bl	8015df8 <xTimerGenericCommand>
 8016338:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d10a      	bne.n	8016356 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016344:	f383 8811 	msr	BASEPRI, r3
 8016348:	f3bf 8f6f 	isb	sy
 801634c:	f3bf 8f4f 	dsb	sy
 8016350:	603b      	str	r3, [r7, #0]
}
 8016352:	bf00      	nop
 8016354:	e7fe      	b.n	8016354 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016356:	4b09      	ldr	r3, [pc, #36]	; (801637c <prvSwitchTimerLists+0xc0>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d1b1      	bne.n	80162c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016360:	4b06      	ldr	r3, [pc, #24]	; (801637c <prvSwitchTimerLists+0xc0>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016366:	4b06      	ldr	r3, [pc, #24]	; (8016380 <prvSwitchTimerLists+0xc4>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4a04      	ldr	r2, [pc, #16]	; (801637c <prvSwitchTimerLists+0xc0>)
 801636c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801636e:	4a04      	ldr	r2, [pc, #16]	; (8016380 <prvSwitchTimerLists+0xc4>)
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	6013      	str	r3, [r2, #0]
}
 8016374:	bf00      	nop
 8016376:	3718      	adds	r7, #24
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	24001d54 	.word	0x24001d54
 8016380:	24001d58 	.word	0x24001d58

08016384 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801638a:	f000 f98b 	bl	80166a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801638e:	4b15      	ldr	r3, [pc, #84]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d120      	bne.n	80163d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016396:	4814      	ldr	r0, [pc, #80]	; (80163e8 <prvCheckForValidListAndQueue+0x64>)
 8016398:	f7fd fdb6 	bl	8013f08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801639c:	4813      	ldr	r0, [pc, #76]	; (80163ec <prvCheckForValidListAndQueue+0x68>)
 801639e:	f7fd fdb3 	bl	8013f08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80163a2:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <prvCheckForValidListAndQueue+0x6c>)
 80163a4:	4a10      	ldr	r2, [pc, #64]	; (80163e8 <prvCheckForValidListAndQueue+0x64>)
 80163a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80163a8:	4b12      	ldr	r3, [pc, #72]	; (80163f4 <prvCheckForValidListAndQueue+0x70>)
 80163aa:	4a10      	ldr	r2, [pc, #64]	; (80163ec <prvCheckForValidListAndQueue+0x68>)
 80163ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80163ae:	2300      	movs	r3, #0
 80163b0:	9300      	str	r3, [sp, #0]
 80163b2:	4b11      	ldr	r3, [pc, #68]	; (80163f8 <prvCheckForValidListAndQueue+0x74>)
 80163b4:	4a11      	ldr	r2, [pc, #68]	; (80163fc <prvCheckForValidListAndQueue+0x78>)
 80163b6:	2110      	movs	r1, #16
 80163b8:	200a      	movs	r0, #10
 80163ba:	f7fd fec1 	bl	8014140 <xQueueGenericCreateStatic>
 80163be:	4603      	mov	r3, r0
 80163c0:	4a08      	ldr	r2, [pc, #32]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 80163c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80163c4:	4b07      	ldr	r3, [pc, #28]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d005      	beq.n	80163d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80163cc:	4b05      	ldr	r3, [pc, #20]	; (80163e4 <prvCheckForValidListAndQueue+0x60>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	490b      	ldr	r1, [pc, #44]	; (8016400 <prvCheckForValidListAndQueue+0x7c>)
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7fe fb94 	bl	8014b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163d8:	f000 f994 	bl	8016704 <vPortExitCritical>
}
 80163dc:	bf00      	nop
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	24001d5c 	.word	0x24001d5c
 80163e8:	24001d2c 	.word	0x24001d2c
 80163ec:	24001d40 	.word	0x24001d40
 80163f0:	24001d54 	.word	0x24001d54
 80163f4:	24001d58 	.word	0x24001d58
 80163f8:	24001e08 	.word	0x24001e08
 80163fc:	24001d68 	.word	0x24001d68
 8016400:	080179f4 	.word	0x080179f4

08016404 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016404:	b580      	push	{r7, lr}
 8016406:	b08a      	sub	sp, #40	; 0x28
 8016408:	af00      	add	r7, sp, #0
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
 8016410:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016412:	f06f 0301 	mvn.w	r3, #1
 8016416:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016424:	4b06      	ldr	r3, [pc, #24]	; (8016440 <xTimerPendFunctionCallFromISR+0x3c>)
 8016426:	6818      	ldr	r0, [r3, #0]
 8016428:	f107 0114 	add.w	r1, r7, #20
 801642c:	2300      	movs	r3, #0
 801642e:	683a      	ldr	r2, [r7, #0]
 8016430:	f7fe f85a 	bl	80144e8 <xQueueGenericSendFromISR>
 8016434:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8016436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016438:	4618      	mov	r0, r3
 801643a:	3728      	adds	r7, #40	; 0x28
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	24001d5c 	.word	0x24001d5c

08016444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016444:	b480      	push	{r7}
 8016446:	b085      	sub	sp, #20
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	3b04      	subs	r3, #4
 8016454:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	3b04      	subs	r3, #4
 8016462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	f023 0201 	bic.w	r2, r3, #1
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	3b04      	subs	r3, #4
 8016472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016474:	4a0c      	ldr	r2, [pc, #48]	; (80164a8 <pxPortInitialiseStack+0x64>)
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	3b14      	subs	r3, #20
 801647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	3b04      	subs	r3, #4
 801648a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	f06f 0202 	mvn.w	r2, #2
 8016492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	3b20      	subs	r3, #32
 8016498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801649a:	68fb      	ldr	r3, [r7, #12]
}
 801649c:	4618      	mov	r0, r3
 801649e:	3714      	adds	r7, #20
 80164a0:	46bd      	mov	sp, r7
 80164a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a6:	4770      	bx	lr
 80164a8:	080164ad 	.word	0x080164ad

080164ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80164ac:	b480      	push	{r7}
 80164ae:	b085      	sub	sp, #20
 80164b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80164b6:	4b12      	ldr	r3, [pc, #72]	; (8016500 <prvTaskExitError+0x54>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164be:	d00a      	beq.n	80164d6 <prvTaskExitError+0x2a>
	__asm volatile
 80164c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c4:	f383 8811 	msr	BASEPRI, r3
 80164c8:	f3bf 8f6f 	isb	sy
 80164cc:	f3bf 8f4f 	dsb	sy
 80164d0:	60fb      	str	r3, [r7, #12]
}
 80164d2:	bf00      	nop
 80164d4:	e7fe      	b.n	80164d4 <prvTaskExitError+0x28>
	__asm volatile
 80164d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164da:	f383 8811 	msr	BASEPRI, r3
 80164de:	f3bf 8f6f 	isb	sy
 80164e2:	f3bf 8f4f 	dsb	sy
 80164e6:	60bb      	str	r3, [r7, #8]
}
 80164e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80164ea:	bf00      	nop
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d0fc      	beq.n	80164ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80164f2:	bf00      	nop
 80164f4:	bf00      	nop
 80164f6:	3714      	adds	r7, #20
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr
 8016500:	240000a0 	.word	0x240000a0
	...

08016510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016510:	4b07      	ldr	r3, [pc, #28]	; (8016530 <pxCurrentTCBConst2>)
 8016512:	6819      	ldr	r1, [r3, #0]
 8016514:	6808      	ldr	r0, [r1, #0]
 8016516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651a:	f380 8809 	msr	PSP, r0
 801651e:	f3bf 8f6f 	isb	sy
 8016522:	f04f 0000 	mov.w	r0, #0
 8016526:	f380 8811 	msr	BASEPRI, r0
 801652a:	4770      	bx	lr
 801652c:	f3af 8000 	nop.w

08016530 <pxCurrentTCBConst2>:
 8016530:	2400182c 	.word	0x2400182c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop

08016538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016538:	4808      	ldr	r0, [pc, #32]	; (801655c <prvPortStartFirstTask+0x24>)
 801653a:	6800      	ldr	r0, [r0, #0]
 801653c:	6800      	ldr	r0, [r0, #0]
 801653e:	f380 8808 	msr	MSP, r0
 8016542:	f04f 0000 	mov.w	r0, #0
 8016546:	f380 8814 	msr	CONTROL, r0
 801654a:	b662      	cpsie	i
 801654c:	b661      	cpsie	f
 801654e:	f3bf 8f4f 	dsb	sy
 8016552:	f3bf 8f6f 	isb	sy
 8016556:	df00      	svc	0
 8016558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801655a:	bf00      	nop
 801655c:	e000ed08 	.word	0xe000ed08

08016560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b086      	sub	sp, #24
 8016564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016566:	4b46      	ldr	r3, [pc, #280]	; (8016680 <xPortStartScheduler+0x120>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	4a46      	ldr	r2, [pc, #280]	; (8016684 <xPortStartScheduler+0x124>)
 801656c:	4293      	cmp	r3, r2
 801656e:	d10a      	bne.n	8016586 <xPortStartScheduler+0x26>
	__asm volatile
 8016570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016574:	f383 8811 	msr	BASEPRI, r3
 8016578:	f3bf 8f6f 	isb	sy
 801657c:	f3bf 8f4f 	dsb	sy
 8016580:	613b      	str	r3, [r7, #16]
}
 8016582:	bf00      	nop
 8016584:	e7fe      	b.n	8016584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016586:	4b3e      	ldr	r3, [pc, #248]	; (8016680 <xPortStartScheduler+0x120>)
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	4a3f      	ldr	r2, [pc, #252]	; (8016688 <xPortStartScheduler+0x128>)
 801658c:	4293      	cmp	r3, r2
 801658e:	d10a      	bne.n	80165a6 <xPortStartScheduler+0x46>
	__asm volatile
 8016590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016594:	f383 8811 	msr	BASEPRI, r3
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	f3bf 8f4f 	dsb	sy
 80165a0:	60fb      	str	r3, [r7, #12]
}
 80165a2:	bf00      	nop
 80165a4:	e7fe      	b.n	80165a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80165a6:	4b39      	ldr	r3, [pc, #228]	; (801668c <xPortStartScheduler+0x12c>)
 80165a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	22ff      	movs	r2, #255	; 0xff
 80165b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80165c0:	78fb      	ldrb	r3, [r7, #3]
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	4b31      	ldr	r3, [pc, #196]	; (8016690 <xPortStartScheduler+0x130>)
 80165cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80165ce:	4b31      	ldr	r3, [pc, #196]	; (8016694 <xPortStartScheduler+0x134>)
 80165d0:	2207      	movs	r2, #7
 80165d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165d4:	e009      	b.n	80165ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80165d6:	4b2f      	ldr	r3, [pc, #188]	; (8016694 <xPortStartScheduler+0x134>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	3b01      	subs	r3, #1
 80165dc:	4a2d      	ldr	r2, [pc, #180]	; (8016694 <xPortStartScheduler+0x134>)
 80165de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80165e0:	78fb      	ldrb	r3, [r7, #3]
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165ea:	78fb      	ldrb	r3, [r7, #3]
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165f2:	2b80      	cmp	r3, #128	; 0x80
 80165f4:	d0ef      	beq.n	80165d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80165f6:	4b27      	ldr	r3, [pc, #156]	; (8016694 <xPortStartScheduler+0x134>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f1c3 0307 	rsb	r3, r3, #7
 80165fe:	2b04      	cmp	r3, #4
 8016600:	d00a      	beq.n	8016618 <xPortStartScheduler+0xb8>
	__asm volatile
 8016602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016606:	f383 8811 	msr	BASEPRI, r3
 801660a:	f3bf 8f6f 	isb	sy
 801660e:	f3bf 8f4f 	dsb	sy
 8016612:	60bb      	str	r3, [r7, #8]
}
 8016614:	bf00      	nop
 8016616:	e7fe      	b.n	8016616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016618:	4b1e      	ldr	r3, [pc, #120]	; (8016694 <xPortStartScheduler+0x134>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	021b      	lsls	r3, r3, #8
 801661e:	4a1d      	ldr	r2, [pc, #116]	; (8016694 <xPortStartScheduler+0x134>)
 8016620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016622:	4b1c      	ldr	r3, [pc, #112]	; (8016694 <xPortStartScheduler+0x134>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801662a:	4a1a      	ldr	r2, [pc, #104]	; (8016694 <xPortStartScheduler+0x134>)
 801662c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	b2da      	uxtb	r2, r3
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016636:	4b18      	ldr	r3, [pc, #96]	; (8016698 <xPortStartScheduler+0x138>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	4a17      	ldr	r2, [pc, #92]	; (8016698 <xPortStartScheduler+0x138>)
 801663c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016642:	4b15      	ldr	r3, [pc, #84]	; (8016698 <xPortStartScheduler+0x138>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4a14      	ldr	r2, [pc, #80]	; (8016698 <xPortStartScheduler+0x138>)
 8016648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801664c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801664e:	f000 f8dd 	bl	801680c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016652:	4b12      	ldr	r3, [pc, #72]	; (801669c <xPortStartScheduler+0x13c>)
 8016654:	2200      	movs	r2, #0
 8016656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016658:	f000 f8fc 	bl	8016854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801665c:	4b10      	ldr	r3, [pc, #64]	; (80166a0 <xPortStartScheduler+0x140>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	4a0f      	ldr	r2, [pc, #60]	; (80166a0 <xPortStartScheduler+0x140>)
 8016662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016668:	f7ff ff66 	bl	8016538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801666c:	f7fe ff7a 	bl	8015564 <vTaskSwitchContext>
	prvTaskExitError();
 8016670:	f7ff ff1c 	bl	80164ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016674:	2300      	movs	r3, #0
}
 8016676:	4618      	mov	r0, r3
 8016678:	3718      	adds	r7, #24
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	e000ed00 	.word	0xe000ed00
 8016684:	410fc271 	.word	0x410fc271
 8016688:	410fc270 	.word	0x410fc270
 801668c:	e000e400 	.word	0xe000e400
 8016690:	24001e58 	.word	0x24001e58
 8016694:	24001e5c 	.word	0x24001e5c
 8016698:	e000ed20 	.word	0xe000ed20
 801669c:	240000a0 	.word	0x240000a0
 80166a0:	e000ef34 	.word	0xe000ef34

080166a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
	__asm volatile
 80166aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ae:	f383 8811 	msr	BASEPRI, r3
 80166b2:	f3bf 8f6f 	isb	sy
 80166b6:	f3bf 8f4f 	dsb	sy
 80166ba:	607b      	str	r3, [r7, #4]
}
 80166bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80166be:	4b0f      	ldr	r3, [pc, #60]	; (80166fc <vPortEnterCritical+0x58>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	3301      	adds	r3, #1
 80166c4:	4a0d      	ldr	r2, [pc, #52]	; (80166fc <vPortEnterCritical+0x58>)
 80166c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80166c8:	4b0c      	ldr	r3, [pc, #48]	; (80166fc <vPortEnterCritical+0x58>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d10f      	bne.n	80166f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166d0:	4b0b      	ldr	r3, [pc, #44]	; (8016700 <vPortEnterCritical+0x5c>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00a      	beq.n	80166f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80166da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166de:	f383 8811 	msr	BASEPRI, r3
 80166e2:	f3bf 8f6f 	isb	sy
 80166e6:	f3bf 8f4f 	dsb	sy
 80166ea:	603b      	str	r3, [r7, #0]
}
 80166ec:	bf00      	nop
 80166ee:	e7fe      	b.n	80166ee <vPortEnterCritical+0x4a>
	}
}
 80166f0:	bf00      	nop
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr
 80166fc:	240000a0 	.word	0x240000a0
 8016700:	e000ed04 	.word	0xe000ed04

08016704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016704:	b480      	push	{r7}
 8016706:	b083      	sub	sp, #12
 8016708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801670a:	4b12      	ldr	r3, [pc, #72]	; (8016754 <vPortExitCritical+0x50>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d10a      	bne.n	8016728 <vPortExitCritical+0x24>
	__asm volatile
 8016712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016716:	f383 8811 	msr	BASEPRI, r3
 801671a:	f3bf 8f6f 	isb	sy
 801671e:	f3bf 8f4f 	dsb	sy
 8016722:	607b      	str	r3, [r7, #4]
}
 8016724:	bf00      	nop
 8016726:	e7fe      	b.n	8016726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016728:	4b0a      	ldr	r3, [pc, #40]	; (8016754 <vPortExitCritical+0x50>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	3b01      	subs	r3, #1
 801672e:	4a09      	ldr	r2, [pc, #36]	; (8016754 <vPortExitCritical+0x50>)
 8016730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016732:	4b08      	ldr	r3, [pc, #32]	; (8016754 <vPortExitCritical+0x50>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d105      	bne.n	8016746 <vPortExitCritical+0x42>
 801673a:	2300      	movs	r3, #0
 801673c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	f383 8811 	msr	BASEPRI, r3
}
 8016744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016746:	bf00      	nop
 8016748:	370c      	adds	r7, #12
 801674a:	46bd      	mov	sp, r7
 801674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016750:	4770      	bx	lr
 8016752:	bf00      	nop
 8016754:	240000a0 	.word	0x240000a0
	...

08016760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016760:	f3ef 8009 	mrs	r0, PSP
 8016764:	f3bf 8f6f 	isb	sy
 8016768:	4b15      	ldr	r3, [pc, #84]	; (80167c0 <pxCurrentTCBConst>)
 801676a:	681a      	ldr	r2, [r3, #0]
 801676c:	f01e 0f10 	tst.w	lr, #16
 8016770:	bf08      	it	eq
 8016772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801677a:	6010      	str	r0, [r2, #0]
 801677c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016784:	f380 8811 	msr	BASEPRI, r0
 8016788:	f3bf 8f4f 	dsb	sy
 801678c:	f3bf 8f6f 	isb	sy
 8016790:	f7fe fee8 	bl	8015564 <vTaskSwitchContext>
 8016794:	f04f 0000 	mov.w	r0, #0
 8016798:	f380 8811 	msr	BASEPRI, r0
 801679c:	bc09      	pop	{r0, r3}
 801679e:	6819      	ldr	r1, [r3, #0]
 80167a0:	6808      	ldr	r0, [r1, #0]
 80167a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a6:	f01e 0f10 	tst.w	lr, #16
 80167aa:	bf08      	it	eq
 80167ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80167b0:	f380 8809 	msr	PSP, r0
 80167b4:	f3bf 8f6f 	isb	sy
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop
 80167bc:	f3af 8000 	nop.w

080167c0 <pxCurrentTCBConst>:
 80167c0:	2400182c 	.word	0x2400182c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80167c4:	bf00      	nop
 80167c6:	bf00      	nop

080167c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
	__asm volatile
 80167ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d2:	f383 8811 	msr	BASEPRI, r3
 80167d6:	f3bf 8f6f 	isb	sy
 80167da:	f3bf 8f4f 	dsb	sy
 80167de:	607b      	str	r3, [r7, #4]
}
 80167e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80167e2:	f7fe fdfd 	bl	80153e0 <xTaskIncrementTick>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d003      	beq.n	80167f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80167ec:	4b06      	ldr	r3, [pc, #24]	; (8016808 <xPortSysTickHandler+0x40>)
 80167ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167f2:	601a      	str	r2, [r3, #0]
 80167f4:	2300      	movs	r3, #0
 80167f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	f383 8811 	msr	BASEPRI, r3
}
 80167fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016800:	bf00      	nop
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	e000ed04 	.word	0xe000ed04

0801680c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801680c:	b480      	push	{r7}
 801680e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016810:	4b0b      	ldr	r3, [pc, #44]	; (8016840 <vPortSetupTimerInterrupt+0x34>)
 8016812:	2200      	movs	r2, #0
 8016814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016816:	4b0b      	ldr	r3, [pc, #44]	; (8016844 <vPortSetupTimerInterrupt+0x38>)
 8016818:	2200      	movs	r2, #0
 801681a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801681c:	4b0a      	ldr	r3, [pc, #40]	; (8016848 <vPortSetupTimerInterrupt+0x3c>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	4a0a      	ldr	r2, [pc, #40]	; (801684c <vPortSetupTimerInterrupt+0x40>)
 8016822:	fba2 2303 	umull	r2, r3, r2, r3
 8016826:	099b      	lsrs	r3, r3, #6
 8016828:	4a09      	ldr	r2, [pc, #36]	; (8016850 <vPortSetupTimerInterrupt+0x44>)
 801682a:	3b01      	subs	r3, #1
 801682c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801682e:	4b04      	ldr	r3, [pc, #16]	; (8016840 <vPortSetupTimerInterrupt+0x34>)
 8016830:	2207      	movs	r2, #7
 8016832:	601a      	str	r2, [r3, #0]
}
 8016834:	bf00      	nop
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	e000e010 	.word	0xe000e010
 8016844:	e000e018 	.word	0xe000e018
 8016848:	24000090 	.word	0x24000090
 801684c:	10624dd3 	.word	0x10624dd3
 8016850:	e000e014 	.word	0xe000e014

08016854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016864 <vPortEnableVFP+0x10>
 8016858:	6801      	ldr	r1, [r0, #0]
 801685a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801685e:	6001      	str	r1, [r0, #0]
 8016860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016862:	bf00      	nop
 8016864:	e000ed88 	.word	0xe000ed88

08016868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016868:	b480      	push	{r7}
 801686a:	b085      	sub	sp, #20
 801686c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801686e:	f3ef 8305 	mrs	r3, IPSR
 8016872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	2b0f      	cmp	r3, #15
 8016878:	d914      	bls.n	80168a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801687a:	4a17      	ldr	r2, [pc, #92]	; (80168d8 <vPortValidateInterruptPriority+0x70>)
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	4413      	add	r3, r2
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016884:	4b15      	ldr	r3, [pc, #84]	; (80168dc <vPortValidateInterruptPriority+0x74>)
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	7afa      	ldrb	r2, [r7, #11]
 801688a:	429a      	cmp	r2, r3
 801688c:	d20a      	bcs.n	80168a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016892:	f383 8811 	msr	BASEPRI, r3
 8016896:	f3bf 8f6f 	isb	sy
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	607b      	str	r3, [r7, #4]
}
 80168a0:	bf00      	nop
 80168a2:	e7fe      	b.n	80168a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80168a4:	4b0e      	ldr	r3, [pc, #56]	; (80168e0 <vPortValidateInterruptPriority+0x78>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80168ac:	4b0d      	ldr	r3, [pc, #52]	; (80168e4 <vPortValidateInterruptPriority+0x7c>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d90a      	bls.n	80168ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80168b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b8:	f383 8811 	msr	BASEPRI, r3
 80168bc:	f3bf 8f6f 	isb	sy
 80168c0:	f3bf 8f4f 	dsb	sy
 80168c4:	603b      	str	r3, [r7, #0]
}
 80168c6:	bf00      	nop
 80168c8:	e7fe      	b.n	80168c8 <vPortValidateInterruptPriority+0x60>
	}
 80168ca:	bf00      	nop
 80168cc:	3714      	adds	r7, #20
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	e000e3f0 	.word	0xe000e3f0
 80168dc:	24001e58 	.word	0x24001e58
 80168e0:	e000ed0c 	.word	0xe000ed0c
 80168e4:	24001e5c 	.word	0x24001e5c

080168e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b08a      	sub	sp, #40	; 0x28
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80168f0:	2300      	movs	r3, #0
 80168f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80168f4:	f7fe fcb8 	bl	8015268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80168f8:	4b5b      	ldr	r3, [pc, #364]	; (8016a68 <pvPortMalloc+0x180>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d101      	bne.n	8016904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016900:	f000 f920 	bl	8016b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016904:	4b59      	ldr	r3, [pc, #356]	; (8016a6c <pvPortMalloc+0x184>)
 8016906:	681a      	ldr	r2, [r3, #0]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	4013      	ands	r3, r2
 801690c:	2b00      	cmp	r3, #0
 801690e:	f040 8093 	bne.w	8016a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d01d      	beq.n	8016954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016918:	2208      	movs	r2, #8
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4413      	add	r3, r2
 801691e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f003 0307 	and.w	r3, r3, #7
 8016926:	2b00      	cmp	r3, #0
 8016928:	d014      	beq.n	8016954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f023 0307 	bic.w	r3, r3, #7
 8016930:	3308      	adds	r3, #8
 8016932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f003 0307 	and.w	r3, r3, #7
 801693a:	2b00      	cmp	r3, #0
 801693c:	d00a      	beq.n	8016954 <pvPortMalloc+0x6c>
	__asm volatile
 801693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016942:	f383 8811 	msr	BASEPRI, r3
 8016946:	f3bf 8f6f 	isb	sy
 801694a:	f3bf 8f4f 	dsb	sy
 801694e:	617b      	str	r3, [r7, #20]
}
 8016950:	bf00      	nop
 8016952:	e7fe      	b.n	8016952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d06e      	beq.n	8016a38 <pvPortMalloc+0x150>
 801695a:	4b45      	ldr	r3, [pc, #276]	; (8016a70 <pvPortMalloc+0x188>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	429a      	cmp	r2, r3
 8016962:	d869      	bhi.n	8016a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016964:	4b43      	ldr	r3, [pc, #268]	; (8016a74 <pvPortMalloc+0x18c>)
 8016966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016968:	4b42      	ldr	r3, [pc, #264]	; (8016a74 <pvPortMalloc+0x18c>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801696e:	e004      	b.n	801697a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	429a      	cmp	r2, r3
 8016982:	d903      	bls.n	801698c <pvPortMalloc+0xa4>
 8016984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d1f1      	bne.n	8016970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801698c:	4b36      	ldr	r3, [pc, #216]	; (8016a68 <pvPortMalloc+0x180>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016992:	429a      	cmp	r2, r3
 8016994:	d050      	beq.n	8016a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016996:	6a3b      	ldr	r3, [r7, #32]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	2208      	movs	r2, #8
 801699c:	4413      	add	r3, r2
 801699e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80169a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a2:	681a      	ldr	r2, [r3, #0]
 80169a4:	6a3b      	ldr	r3, [r7, #32]
 80169a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80169a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169aa:	685a      	ldr	r2, [r3, #4]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	1ad2      	subs	r2, r2, r3
 80169b0:	2308      	movs	r3, #8
 80169b2:	005b      	lsls	r3, r3, #1
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d91f      	bls.n	80169f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	4413      	add	r3, r2
 80169be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169c0:	69bb      	ldr	r3, [r7, #24]
 80169c2:	f003 0307 	and.w	r3, r3, #7
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d00a      	beq.n	80169e0 <pvPortMalloc+0xf8>
	__asm volatile
 80169ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ce:	f383 8811 	msr	BASEPRI, r3
 80169d2:	f3bf 8f6f 	isb	sy
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	613b      	str	r3, [r7, #16]
}
 80169dc:	bf00      	nop
 80169de:	e7fe      	b.n	80169de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80169e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e2:	685a      	ldr	r2, [r3, #4]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	1ad2      	subs	r2, r2, r3
 80169e8:	69bb      	ldr	r3, [r7, #24]
 80169ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80169f2:	69b8      	ldr	r0, [r7, #24]
 80169f4:	f000 f908 	bl	8016c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80169f8:	4b1d      	ldr	r3, [pc, #116]	; (8016a70 <pvPortMalloc+0x188>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	4a1b      	ldr	r2, [pc, #108]	; (8016a70 <pvPortMalloc+0x188>)
 8016a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a06:	4b1a      	ldr	r3, [pc, #104]	; (8016a70 <pvPortMalloc+0x188>)
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	4b1b      	ldr	r3, [pc, #108]	; (8016a78 <pvPortMalloc+0x190>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d203      	bcs.n	8016a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a12:	4b17      	ldr	r3, [pc, #92]	; (8016a70 <pvPortMalloc+0x188>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4a18      	ldr	r2, [pc, #96]	; (8016a78 <pvPortMalloc+0x190>)
 8016a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1c:	685a      	ldr	r2, [r3, #4]
 8016a1e:	4b13      	ldr	r3, [pc, #76]	; (8016a6c <pvPortMalloc+0x184>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	431a      	orrs	r2, r3
 8016a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016a2e:	4b13      	ldr	r3, [pc, #76]	; (8016a7c <pvPortMalloc+0x194>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	3301      	adds	r3, #1
 8016a34:	4a11      	ldr	r2, [pc, #68]	; (8016a7c <pvPortMalloc+0x194>)
 8016a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a38:	f7fe fc24 	bl	8015284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	f003 0307 	and.w	r3, r3, #7
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d00a      	beq.n	8016a5c <pvPortMalloc+0x174>
	__asm volatile
 8016a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4a:	f383 8811 	msr	BASEPRI, r3
 8016a4e:	f3bf 8f6f 	isb	sy
 8016a52:	f3bf 8f4f 	dsb	sy
 8016a56:	60fb      	str	r3, [r7, #12]
}
 8016a58:	bf00      	nop
 8016a5a:	e7fe      	b.n	8016a5a <pvPortMalloc+0x172>
	return pvReturn;
 8016a5c:	69fb      	ldr	r3, [r7, #28]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3728      	adds	r7, #40	; 0x28
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	24005a68 	.word	0x24005a68
 8016a6c:	24005a7c 	.word	0x24005a7c
 8016a70:	24005a6c 	.word	0x24005a6c
 8016a74:	24005a60 	.word	0x24005a60
 8016a78:	24005a70 	.word	0x24005a70
 8016a7c:	24005a74 	.word	0x24005a74

08016a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b086      	sub	sp, #24
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d04d      	beq.n	8016b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a92:	2308      	movs	r3, #8
 8016a94:	425b      	negs	r3, r3
 8016a96:	697a      	ldr	r2, [r7, #20]
 8016a98:	4413      	add	r3, r2
 8016a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	685a      	ldr	r2, [r3, #4]
 8016aa4:	4b24      	ldr	r3, [pc, #144]	; (8016b38 <vPortFree+0xb8>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	4013      	ands	r3, r2
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d10a      	bne.n	8016ac4 <vPortFree+0x44>
	__asm volatile
 8016aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab2:	f383 8811 	msr	BASEPRI, r3
 8016ab6:	f3bf 8f6f 	isb	sy
 8016aba:	f3bf 8f4f 	dsb	sy
 8016abe:	60fb      	str	r3, [r7, #12]
}
 8016ac0:	bf00      	nop
 8016ac2:	e7fe      	b.n	8016ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00a      	beq.n	8016ae2 <vPortFree+0x62>
	__asm volatile
 8016acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad0:	f383 8811 	msr	BASEPRI, r3
 8016ad4:	f3bf 8f6f 	isb	sy
 8016ad8:	f3bf 8f4f 	dsb	sy
 8016adc:	60bb      	str	r3, [r7, #8]
}
 8016ade:	bf00      	nop
 8016ae0:	e7fe      	b.n	8016ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	685a      	ldr	r2, [r3, #4]
 8016ae6:	4b14      	ldr	r3, [pc, #80]	; (8016b38 <vPortFree+0xb8>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	4013      	ands	r3, r2
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d01e      	beq.n	8016b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d11a      	bne.n	8016b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	685a      	ldr	r2, [r3, #4]
 8016afc:	4b0e      	ldr	r3, [pc, #56]	; (8016b38 <vPortFree+0xb8>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	43db      	mvns	r3, r3
 8016b02:	401a      	ands	r2, r3
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016b08:	f7fe fbae 	bl	8015268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	685a      	ldr	r2, [r3, #4]
 8016b10:	4b0a      	ldr	r3, [pc, #40]	; (8016b3c <vPortFree+0xbc>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	4413      	add	r3, r2
 8016b16:	4a09      	ldr	r2, [pc, #36]	; (8016b3c <vPortFree+0xbc>)
 8016b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b1a:	6938      	ldr	r0, [r7, #16]
 8016b1c:	f000 f874 	bl	8016c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016b20:	4b07      	ldr	r3, [pc, #28]	; (8016b40 <vPortFree+0xc0>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	3301      	adds	r3, #1
 8016b26:	4a06      	ldr	r2, [pc, #24]	; (8016b40 <vPortFree+0xc0>)
 8016b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016b2a:	f7fe fbab 	bl	8015284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016b2e:	bf00      	nop
 8016b30:	3718      	adds	r7, #24
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	24005a7c 	.word	0x24005a7c
 8016b3c:	24005a6c 	.word	0x24005a6c
 8016b40:	24005a78 	.word	0x24005a78

08016b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b44:	b480      	push	{r7}
 8016b46:	b085      	sub	sp, #20
 8016b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b50:	4b27      	ldr	r3, [pc, #156]	; (8016bf0 <prvHeapInit+0xac>)
 8016b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	f003 0307 	and.w	r3, r3, #7
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00c      	beq.n	8016b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	3307      	adds	r3, #7
 8016b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	f023 0307 	bic.w	r3, r3, #7
 8016b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b6c:	68ba      	ldr	r2, [r7, #8]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	4a1f      	ldr	r2, [pc, #124]	; (8016bf0 <prvHeapInit+0xac>)
 8016b74:	4413      	add	r3, r2
 8016b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b7c:	4a1d      	ldr	r2, [pc, #116]	; (8016bf4 <prvHeapInit+0xb0>)
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b82:	4b1c      	ldr	r3, [pc, #112]	; (8016bf4 <prvHeapInit+0xb0>)
 8016b84:	2200      	movs	r2, #0
 8016b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	68ba      	ldr	r2, [r7, #8]
 8016b8c:	4413      	add	r3, r2
 8016b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b90:	2208      	movs	r2, #8
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	1a9b      	subs	r3, r3, r2
 8016b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f023 0307 	bic.w	r3, r3, #7
 8016b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	4a15      	ldr	r2, [pc, #84]	; (8016bf8 <prvHeapInit+0xb4>)
 8016ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016ba6:	4b14      	ldr	r3, [pc, #80]	; (8016bf8 <prvHeapInit+0xb4>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2200      	movs	r2, #0
 8016bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016bae:	4b12      	ldr	r3, [pc, #72]	; (8016bf8 <prvHeapInit+0xb4>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	1ad2      	subs	r2, r2, r3
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016bc4:	4b0c      	ldr	r3, [pc, #48]	; (8016bf8 <prvHeapInit+0xb4>)
 8016bc6:	681a      	ldr	r2, [r3, #0]
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	4a0a      	ldr	r2, [pc, #40]	; (8016bfc <prvHeapInit+0xb8>)
 8016bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	4a09      	ldr	r2, [pc, #36]	; (8016c00 <prvHeapInit+0xbc>)
 8016bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016bdc:	4b09      	ldr	r3, [pc, #36]	; (8016c04 <prvHeapInit+0xc0>)
 8016bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016be2:	601a      	str	r2, [r3, #0]
}
 8016be4:	bf00      	nop
 8016be6:	3714      	adds	r7, #20
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr
 8016bf0:	24001e60 	.word	0x24001e60
 8016bf4:	24005a60 	.word	0x24005a60
 8016bf8:	24005a68 	.word	0x24005a68
 8016bfc:	24005a70 	.word	0x24005a70
 8016c00:	24005a6c 	.word	0x24005a6c
 8016c04:	24005a7c 	.word	0x24005a7c

08016c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b085      	sub	sp, #20
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016c10:	4b28      	ldr	r3, [pc, #160]	; (8016cb4 <prvInsertBlockIntoFreeList+0xac>)
 8016c12:	60fb      	str	r3, [r7, #12]
 8016c14:	e002      	b.n	8016c1c <prvInsertBlockIntoFreeList+0x14>
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	60fb      	str	r3, [r7, #12]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d8f7      	bhi.n	8016c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	68ba      	ldr	r2, [r7, #8]
 8016c30:	4413      	add	r3, r2
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d108      	bne.n	8016c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	685a      	ldr	r2, [r3, #4]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	441a      	add	r2, r3
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	68ba      	ldr	r2, [r7, #8]
 8016c54:	441a      	add	r2, r3
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d118      	bne.n	8016c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681a      	ldr	r2, [r3, #0]
 8016c62:	4b15      	ldr	r3, [pc, #84]	; (8016cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d00d      	beq.n	8016c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	685a      	ldr	r2, [r3, #4]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	685b      	ldr	r3, [r3, #4]
 8016c74:	441a      	add	r2, r3
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	601a      	str	r2, [r3, #0]
 8016c84:	e008      	b.n	8016c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c86:	4b0c      	ldr	r3, [pc, #48]	; (8016cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	601a      	str	r2, [r3, #0]
 8016c8e:	e003      	b.n	8016c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681a      	ldr	r2, [r3, #0]
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c98:	68fa      	ldr	r2, [r7, #12]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d002      	beq.n	8016ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	687a      	ldr	r2, [r7, #4]
 8016ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ca6:	bf00      	nop
 8016ca8:	3714      	adds	r7, #20
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	24005a60 	.word	0x24005a60
 8016cb8:	24005a68 	.word	0x24005a68

08016cbc <__errno>:
 8016cbc:	4b01      	ldr	r3, [pc, #4]	; (8016cc4 <__errno+0x8>)
 8016cbe:	6818      	ldr	r0, [r3, #0]
 8016cc0:	4770      	bx	lr
 8016cc2:	bf00      	nop
 8016cc4:	240000a4 	.word	0x240000a4

08016cc8 <__libc_init_array>:
 8016cc8:	b570      	push	{r4, r5, r6, lr}
 8016cca:	4d0d      	ldr	r5, [pc, #52]	; (8016d00 <__libc_init_array+0x38>)
 8016ccc:	4c0d      	ldr	r4, [pc, #52]	; (8016d04 <__libc_init_array+0x3c>)
 8016cce:	1b64      	subs	r4, r4, r5
 8016cd0:	10a4      	asrs	r4, r4, #2
 8016cd2:	2600      	movs	r6, #0
 8016cd4:	42a6      	cmp	r6, r4
 8016cd6:	d109      	bne.n	8016cec <__libc_init_array+0x24>
 8016cd8:	4d0b      	ldr	r5, [pc, #44]	; (8016d08 <__libc_init_array+0x40>)
 8016cda:	4c0c      	ldr	r4, [pc, #48]	; (8016d0c <__libc_init_array+0x44>)
 8016cdc:	f000 fd3c 	bl	8017758 <_init>
 8016ce0:	1b64      	subs	r4, r4, r5
 8016ce2:	10a4      	asrs	r4, r4, #2
 8016ce4:	2600      	movs	r6, #0
 8016ce6:	42a6      	cmp	r6, r4
 8016ce8:	d105      	bne.n	8016cf6 <__libc_init_array+0x2e>
 8016cea:	bd70      	pop	{r4, r5, r6, pc}
 8016cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cf0:	4798      	blx	r3
 8016cf2:	3601      	adds	r6, #1
 8016cf4:	e7ee      	b.n	8016cd4 <__libc_init_array+0xc>
 8016cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cfa:	4798      	blx	r3
 8016cfc:	3601      	adds	r6, #1
 8016cfe:	e7f2      	b.n	8016ce6 <__libc_init_array+0x1e>
 8016d00:	08017c10 	.word	0x08017c10
 8016d04:	08017c10 	.word	0x08017c10
 8016d08:	08017c10 	.word	0x08017c10
 8016d0c:	08017c14 	.word	0x08017c14

08016d10 <malloc>:
 8016d10:	4b02      	ldr	r3, [pc, #8]	; (8016d1c <malloc+0xc>)
 8016d12:	4601      	mov	r1, r0
 8016d14:	6818      	ldr	r0, [r3, #0]
 8016d16:	f000 b88d 	b.w	8016e34 <_malloc_r>
 8016d1a:	bf00      	nop
 8016d1c:	240000a4 	.word	0x240000a4

08016d20 <free>:
 8016d20:	4b02      	ldr	r3, [pc, #8]	; (8016d2c <free+0xc>)
 8016d22:	4601      	mov	r1, r0
 8016d24:	6818      	ldr	r0, [r3, #0]
 8016d26:	f000 b819 	b.w	8016d5c <_free_r>
 8016d2a:	bf00      	nop
 8016d2c:	240000a4 	.word	0x240000a4

08016d30 <memcpy>:
 8016d30:	440a      	add	r2, r1
 8016d32:	4291      	cmp	r1, r2
 8016d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d38:	d100      	bne.n	8016d3c <memcpy+0xc>
 8016d3a:	4770      	bx	lr
 8016d3c:	b510      	push	{r4, lr}
 8016d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d46:	4291      	cmp	r1, r2
 8016d48:	d1f9      	bne.n	8016d3e <memcpy+0xe>
 8016d4a:	bd10      	pop	{r4, pc}

08016d4c <memset>:
 8016d4c:	4402      	add	r2, r0
 8016d4e:	4603      	mov	r3, r0
 8016d50:	4293      	cmp	r3, r2
 8016d52:	d100      	bne.n	8016d56 <memset+0xa>
 8016d54:	4770      	bx	lr
 8016d56:	f803 1b01 	strb.w	r1, [r3], #1
 8016d5a:	e7f9      	b.n	8016d50 <memset+0x4>

08016d5c <_free_r>:
 8016d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d5e:	2900      	cmp	r1, #0
 8016d60:	d044      	beq.n	8016dec <_free_r+0x90>
 8016d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d66:	9001      	str	r0, [sp, #4]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8016d6e:	bfb8      	it	lt
 8016d70:	18e4      	addlt	r4, r4, r3
 8016d72:	f000 fc39 	bl	80175e8 <__malloc_lock>
 8016d76:	4a1e      	ldr	r2, [pc, #120]	; (8016df0 <_free_r+0x94>)
 8016d78:	9801      	ldr	r0, [sp, #4]
 8016d7a:	6813      	ldr	r3, [r2, #0]
 8016d7c:	b933      	cbnz	r3, 8016d8c <_free_r+0x30>
 8016d7e:	6063      	str	r3, [r4, #4]
 8016d80:	6014      	str	r4, [r2, #0]
 8016d82:	b003      	add	sp, #12
 8016d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d88:	f000 bc34 	b.w	80175f4 <__malloc_unlock>
 8016d8c:	42a3      	cmp	r3, r4
 8016d8e:	d908      	bls.n	8016da2 <_free_r+0x46>
 8016d90:	6825      	ldr	r5, [r4, #0]
 8016d92:	1961      	adds	r1, r4, r5
 8016d94:	428b      	cmp	r3, r1
 8016d96:	bf01      	itttt	eq
 8016d98:	6819      	ldreq	r1, [r3, #0]
 8016d9a:	685b      	ldreq	r3, [r3, #4]
 8016d9c:	1949      	addeq	r1, r1, r5
 8016d9e:	6021      	streq	r1, [r4, #0]
 8016da0:	e7ed      	b.n	8016d7e <_free_r+0x22>
 8016da2:	461a      	mov	r2, r3
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	b10b      	cbz	r3, 8016dac <_free_r+0x50>
 8016da8:	42a3      	cmp	r3, r4
 8016daa:	d9fa      	bls.n	8016da2 <_free_r+0x46>
 8016dac:	6811      	ldr	r1, [r2, #0]
 8016dae:	1855      	adds	r5, r2, r1
 8016db0:	42a5      	cmp	r5, r4
 8016db2:	d10b      	bne.n	8016dcc <_free_r+0x70>
 8016db4:	6824      	ldr	r4, [r4, #0]
 8016db6:	4421      	add	r1, r4
 8016db8:	1854      	adds	r4, r2, r1
 8016dba:	42a3      	cmp	r3, r4
 8016dbc:	6011      	str	r1, [r2, #0]
 8016dbe:	d1e0      	bne.n	8016d82 <_free_r+0x26>
 8016dc0:	681c      	ldr	r4, [r3, #0]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	6053      	str	r3, [r2, #4]
 8016dc6:	4421      	add	r1, r4
 8016dc8:	6011      	str	r1, [r2, #0]
 8016dca:	e7da      	b.n	8016d82 <_free_r+0x26>
 8016dcc:	d902      	bls.n	8016dd4 <_free_r+0x78>
 8016dce:	230c      	movs	r3, #12
 8016dd0:	6003      	str	r3, [r0, #0]
 8016dd2:	e7d6      	b.n	8016d82 <_free_r+0x26>
 8016dd4:	6825      	ldr	r5, [r4, #0]
 8016dd6:	1961      	adds	r1, r4, r5
 8016dd8:	428b      	cmp	r3, r1
 8016dda:	bf04      	itt	eq
 8016ddc:	6819      	ldreq	r1, [r3, #0]
 8016dde:	685b      	ldreq	r3, [r3, #4]
 8016de0:	6063      	str	r3, [r4, #4]
 8016de2:	bf04      	itt	eq
 8016de4:	1949      	addeq	r1, r1, r5
 8016de6:	6021      	streq	r1, [r4, #0]
 8016de8:	6054      	str	r4, [r2, #4]
 8016dea:	e7ca      	b.n	8016d82 <_free_r+0x26>
 8016dec:	b003      	add	sp, #12
 8016dee:	bd30      	pop	{r4, r5, pc}
 8016df0:	24005a80 	.word	0x24005a80

08016df4 <sbrk_aligned>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	4e0e      	ldr	r6, [pc, #56]	; (8016e30 <sbrk_aligned+0x3c>)
 8016df8:	460c      	mov	r4, r1
 8016dfa:	6831      	ldr	r1, [r6, #0]
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	b911      	cbnz	r1, 8016e06 <sbrk_aligned+0x12>
 8016e00:	f000 f902 	bl	8017008 <_sbrk_r>
 8016e04:	6030      	str	r0, [r6, #0]
 8016e06:	4621      	mov	r1, r4
 8016e08:	4628      	mov	r0, r5
 8016e0a:	f000 f8fd 	bl	8017008 <_sbrk_r>
 8016e0e:	1c43      	adds	r3, r0, #1
 8016e10:	d00a      	beq.n	8016e28 <sbrk_aligned+0x34>
 8016e12:	1cc4      	adds	r4, r0, #3
 8016e14:	f024 0403 	bic.w	r4, r4, #3
 8016e18:	42a0      	cmp	r0, r4
 8016e1a:	d007      	beq.n	8016e2c <sbrk_aligned+0x38>
 8016e1c:	1a21      	subs	r1, r4, r0
 8016e1e:	4628      	mov	r0, r5
 8016e20:	f000 f8f2 	bl	8017008 <_sbrk_r>
 8016e24:	3001      	adds	r0, #1
 8016e26:	d101      	bne.n	8016e2c <sbrk_aligned+0x38>
 8016e28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	bd70      	pop	{r4, r5, r6, pc}
 8016e30:	24005a84 	.word	0x24005a84

08016e34 <_malloc_r>:
 8016e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e38:	1ccd      	adds	r5, r1, #3
 8016e3a:	f025 0503 	bic.w	r5, r5, #3
 8016e3e:	3508      	adds	r5, #8
 8016e40:	2d0c      	cmp	r5, #12
 8016e42:	bf38      	it	cc
 8016e44:	250c      	movcc	r5, #12
 8016e46:	2d00      	cmp	r5, #0
 8016e48:	4607      	mov	r7, r0
 8016e4a:	db01      	blt.n	8016e50 <_malloc_r+0x1c>
 8016e4c:	42a9      	cmp	r1, r5
 8016e4e:	d905      	bls.n	8016e5c <_malloc_r+0x28>
 8016e50:	230c      	movs	r3, #12
 8016e52:	603b      	str	r3, [r7, #0]
 8016e54:	2600      	movs	r6, #0
 8016e56:	4630      	mov	r0, r6
 8016e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e5c:	4e2e      	ldr	r6, [pc, #184]	; (8016f18 <_malloc_r+0xe4>)
 8016e5e:	f000 fbc3 	bl	80175e8 <__malloc_lock>
 8016e62:	6833      	ldr	r3, [r6, #0]
 8016e64:	461c      	mov	r4, r3
 8016e66:	bb34      	cbnz	r4, 8016eb6 <_malloc_r+0x82>
 8016e68:	4629      	mov	r1, r5
 8016e6a:	4638      	mov	r0, r7
 8016e6c:	f7ff ffc2 	bl	8016df4 <sbrk_aligned>
 8016e70:	1c43      	adds	r3, r0, #1
 8016e72:	4604      	mov	r4, r0
 8016e74:	d14d      	bne.n	8016f12 <_malloc_r+0xde>
 8016e76:	6834      	ldr	r4, [r6, #0]
 8016e78:	4626      	mov	r6, r4
 8016e7a:	2e00      	cmp	r6, #0
 8016e7c:	d140      	bne.n	8016f00 <_malloc_r+0xcc>
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	4631      	mov	r1, r6
 8016e82:	4638      	mov	r0, r7
 8016e84:	eb04 0803 	add.w	r8, r4, r3
 8016e88:	f000 f8be 	bl	8017008 <_sbrk_r>
 8016e8c:	4580      	cmp	r8, r0
 8016e8e:	d13a      	bne.n	8016f06 <_malloc_r+0xd2>
 8016e90:	6821      	ldr	r1, [r4, #0]
 8016e92:	3503      	adds	r5, #3
 8016e94:	1a6d      	subs	r5, r5, r1
 8016e96:	f025 0503 	bic.w	r5, r5, #3
 8016e9a:	3508      	adds	r5, #8
 8016e9c:	2d0c      	cmp	r5, #12
 8016e9e:	bf38      	it	cc
 8016ea0:	250c      	movcc	r5, #12
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	f7ff ffa5 	bl	8016df4 <sbrk_aligned>
 8016eaa:	3001      	adds	r0, #1
 8016eac:	d02b      	beq.n	8016f06 <_malloc_r+0xd2>
 8016eae:	6823      	ldr	r3, [r4, #0]
 8016eb0:	442b      	add	r3, r5
 8016eb2:	6023      	str	r3, [r4, #0]
 8016eb4:	e00e      	b.n	8016ed4 <_malloc_r+0xa0>
 8016eb6:	6822      	ldr	r2, [r4, #0]
 8016eb8:	1b52      	subs	r2, r2, r5
 8016eba:	d41e      	bmi.n	8016efa <_malloc_r+0xc6>
 8016ebc:	2a0b      	cmp	r2, #11
 8016ebe:	d916      	bls.n	8016eee <_malloc_r+0xba>
 8016ec0:	1961      	adds	r1, r4, r5
 8016ec2:	42a3      	cmp	r3, r4
 8016ec4:	6025      	str	r5, [r4, #0]
 8016ec6:	bf18      	it	ne
 8016ec8:	6059      	strne	r1, [r3, #4]
 8016eca:	6863      	ldr	r3, [r4, #4]
 8016ecc:	bf08      	it	eq
 8016ece:	6031      	streq	r1, [r6, #0]
 8016ed0:	5162      	str	r2, [r4, r5]
 8016ed2:	604b      	str	r3, [r1, #4]
 8016ed4:	4638      	mov	r0, r7
 8016ed6:	f104 060b 	add.w	r6, r4, #11
 8016eda:	f000 fb8b 	bl	80175f4 <__malloc_unlock>
 8016ede:	f026 0607 	bic.w	r6, r6, #7
 8016ee2:	1d23      	adds	r3, r4, #4
 8016ee4:	1af2      	subs	r2, r6, r3
 8016ee6:	d0b6      	beq.n	8016e56 <_malloc_r+0x22>
 8016ee8:	1b9b      	subs	r3, r3, r6
 8016eea:	50a3      	str	r3, [r4, r2]
 8016eec:	e7b3      	b.n	8016e56 <_malloc_r+0x22>
 8016eee:	6862      	ldr	r2, [r4, #4]
 8016ef0:	42a3      	cmp	r3, r4
 8016ef2:	bf0c      	ite	eq
 8016ef4:	6032      	streq	r2, [r6, #0]
 8016ef6:	605a      	strne	r2, [r3, #4]
 8016ef8:	e7ec      	b.n	8016ed4 <_malloc_r+0xa0>
 8016efa:	4623      	mov	r3, r4
 8016efc:	6864      	ldr	r4, [r4, #4]
 8016efe:	e7b2      	b.n	8016e66 <_malloc_r+0x32>
 8016f00:	4634      	mov	r4, r6
 8016f02:	6876      	ldr	r6, [r6, #4]
 8016f04:	e7b9      	b.n	8016e7a <_malloc_r+0x46>
 8016f06:	230c      	movs	r3, #12
 8016f08:	603b      	str	r3, [r7, #0]
 8016f0a:	4638      	mov	r0, r7
 8016f0c:	f000 fb72 	bl	80175f4 <__malloc_unlock>
 8016f10:	e7a1      	b.n	8016e56 <_malloc_r+0x22>
 8016f12:	6025      	str	r5, [r4, #0]
 8016f14:	e7de      	b.n	8016ed4 <_malloc_r+0xa0>
 8016f16:	bf00      	nop
 8016f18:	24005a80 	.word	0x24005a80

08016f1c <_puts_r>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	460e      	mov	r6, r1
 8016f20:	4605      	mov	r5, r0
 8016f22:	b118      	cbz	r0, 8016f2c <_puts_r+0x10>
 8016f24:	6983      	ldr	r3, [r0, #24]
 8016f26:	b90b      	cbnz	r3, 8016f2c <_puts_r+0x10>
 8016f28:	f000 fa58 	bl	80173dc <__sinit>
 8016f2c:	69ab      	ldr	r3, [r5, #24]
 8016f2e:	68ac      	ldr	r4, [r5, #8]
 8016f30:	b913      	cbnz	r3, 8016f38 <_puts_r+0x1c>
 8016f32:	4628      	mov	r0, r5
 8016f34:	f000 fa52 	bl	80173dc <__sinit>
 8016f38:	4b2c      	ldr	r3, [pc, #176]	; (8016fec <_puts_r+0xd0>)
 8016f3a:	429c      	cmp	r4, r3
 8016f3c:	d120      	bne.n	8016f80 <_puts_r+0x64>
 8016f3e:	686c      	ldr	r4, [r5, #4]
 8016f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f42:	07db      	lsls	r3, r3, #31
 8016f44:	d405      	bmi.n	8016f52 <_puts_r+0x36>
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	0598      	lsls	r0, r3, #22
 8016f4a:	d402      	bmi.n	8016f52 <_puts_r+0x36>
 8016f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f4e:	f000 fae3 	bl	8017518 <__retarget_lock_acquire_recursive>
 8016f52:	89a3      	ldrh	r3, [r4, #12]
 8016f54:	0719      	lsls	r1, r3, #28
 8016f56:	d51d      	bpl.n	8016f94 <_puts_r+0x78>
 8016f58:	6923      	ldr	r3, [r4, #16]
 8016f5a:	b1db      	cbz	r3, 8016f94 <_puts_r+0x78>
 8016f5c:	3e01      	subs	r6, #1
 8016f5e:	68a3      	ldr	r3, [r4, #8]
 8016f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f64:	3b01      	subs	r3, #1
 8016f66:	60a3      	str	r3, [r4, #8]
 8016f68:	bb39      	cbnz	r1, 8016fba <_puts_r+0x9e>
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	da38      	bge.n	8016fe0 <_puts_r+0xc4>
 8016f6e:	4622      	mov	r2, r4
 8016f70:	210a      	movs	r1, #10
 8016f72:	4628      	mov	r0, r5
 8016f74:	f000 f858 	bl	8017028 <__swbuf_r>
 8016f78:	3001      	adds	r0, #1
 8016f7a:	d011      	beq.n	8016fa0 <_puts_r+0x84>
 8016f7c:	250a      	movs	r5, #10
 8016f7e:	e011      	b.n	8016fa4 <_puts_r+0x88>
 8016f80:	4b1b      	ldr	r3, [pc, #108]	; (8016ff0 <_puts_r+0xd4>)
 8016f82:	429c      	cmp	r4, r3
 8016f84:	d101      	bne.n	8016f8a <_puts_r+0x6e>
 8016f86:	68ac      	ldr	r4, [r5, #8]
 8016f88:	e7da      	b.n	8016f40 <_puts_r+0x24>
 8016f8a:	4b1a      	ldr	r3, [pc, #104]	; (8016ff4 <_puts_r+0xd8>)
 8016f8c:	429c      	cmp	r4, r3
 8016f8e:	bf08      	it	eq
 8016f90:	68ec      	ldreq	r4, [r5, #12]
 8016f92:	e7d5      	b.n	8016f40 <_puts_r+0x24>
 8016f94:	4621      	mov	r1, r4
 8016f96:	4628      	mov	r0, r5
 8016f98:	f000 f898 	bl	80170cc <__swsetup_r>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d0dd      	beq.n	8016f5c <_puts_r+0x40>
 8016fa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fa6:	07da      	lsls	r2, r3, #31
 8016fa8:	d405      	bmi.n	8016fb6 <_puts_r+0x9a>
 8016faa:	89a3      	ldrh	r3, [r4, #12]
 8016fac:	059b      	lsls	r3, r3, #22
 8016fae:	d402      	bmi.n	8016fb6 <_puts_r+0x9a>
 8016fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fb2:	f000 fab2 	bl	801751a <__retarget_lock_release_recursive>
 8016fb6:	4628      	mov	r0, r5
 8016fb8:	bd70      	pop	{r4, r5, r6, pc}
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	da04      	bge.n	8016fc8 <_puts_r+0xac>
 8016fbe:	69a2      	ldr	r2, [r4, #24]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	dc06      	bgt.n	8016fd2 <_puts_r+0xb6>
 8016fc4:	290a      	cmp	r1, #10
 8016fc6:	d004      	beq.n	8016fd2 <_puts_r+0xb6>
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	1c5a      	adds	r2, r3, #1
 8016fcc:	6022      	str	r2, [r4, #0]
 8016fce:	7019      	strb	r1, [r3, #0]
 8016fd0:	e7c5      	b.n	8016f5e <_puts_r+0x42>
 8016fd2:	4622      	mov	r2, r4
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 f827 	bl	8017028 <__swbuf_r>
 8016fda:	3001      	adds	r0, #1
 8016fdc:	d1bf      	bne.n	8016f5e <_puts_r+0x42>
 8016fde:	e7df      	b.n	8016fa0 <_puts_r+0x84>
 8016fe0:	6823      	ldr	r3, [r4, #0]
 8016fe2:	250a      	movs	r5, #10
 8016fe4:	1c5a      	adds	r2, r3, #1
 8016fe6:	6022      	str	r2, [r4, #0]
 8016fe8:	701d      	strb	r5, [r3, #0]
 8016fea:	e7db      	b.n	8016fa4 <_puts_r+0x88>
 8016fec:	08017bc8 	.word	0x08017bc8
 8016ff0:	08017be8 	.word	0x08017be8
 8016ff4:	08017ba8 	.word	0x08017ba8

08016ff8 <puts>:
 8016ff8:	4b02      	ldr	r3, [pc, #8]	; (8017004 <puts+0xc>)
 8016ffa:	4601      	mov	r1, r0
 8016ffc:	6818      	ldr	r0, [r3, #0]
 8016ffe:	f7ff bf8d 	b.w	8016f1c <_puts_r>
 8017002:	bf00      	nop
 8017004:	240000a4 	.word	0x240000a4

08017008 <_sbrk_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4d06      	ldr	r5, [pc, #24]	; (8017024 <_sbrk_r+0x1c>)
 801700c:	2300      	movs	r3, #0
 801700e:	4604      	mov	r4, r0
 8017010:	4608      	mov	r0, r1
 8017012:	602b      	str	r3, [r5, #0]
 8017014:	f7ec ffcc 	bl	8003fb0 <_sbrk>
 8017018:	1c43      	adds	r3, r0, #1
 801701a:	d102      	bne.n	8017022 <_sbrk_r+0x1a>
 801701c:	682b      	ldr	r3, [r5, #0]
 801701e:	b103      	cbz	r3, 8017022 <_sbrk_r+0x1a>
 8017020:	6023      	str	r3, [r4, #0]
 8017022:	bd38      	pop	{r3, r4, r5, pc}
 8017024:	24005a8c 	.word	0x24005a8c

08017028 <__swbuf_r>:
 8017028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801702a:	460e      	mov	r6, r1
 801702c:	4614      	mov	r4, r2
 801702e:	4605      	mov	r5, r0
 8017030:	b118      	cbz	r0, 801703a <__swbuf_r+0x12>
 8017032:	6983      	ldr	r3, [r0, #24]
 8017034:	b90b      	cbnz	r3, 801703a <__swbuf_r+0x12>
 8017036:	f000 f9d1 	bl	80173dc <__sinit>
 801703a:	4b21      	ldr	r3, [pc, #132]	; (80170c0 <__swbuf_r+0x98>)
 801703c:	429c      	cmp	r4, r3
 801703e:	d12b      	bne.n	8017098 <__swbuf_r+0x70>
 8017040:	686c      	ldr	r4, [r5, #4]
 8017042:	69a3      	ldr	r3, [r4, #24]
 8017044:	60a3      	str	r3, [r4, #8]
 8017046:	89a3      	ldrh	r3, [r4, #12]
 8017048:	071a      	lsls	r2, r3, #28
 801704a:	d52f      	bpl.n	80170ac <__swbuf_r+0x84>
 801704c:	6923      	ldr	r3, [r4, #16]
 801704e:	b36b      	cbz	r3, 80170ac <__swbuf_r+0x84>
 8017050:	6923      	ldr	r3, [r4, #16]
 8017052:	6820      	ldr	r0, [r4, #0]
 8017054:	1ac0      	subs	r0, r0, r3
 8017056:	6963      	ldr	r3, [r4, #20]
 8017058:	b2f6      	uxtb	r6, r6
 801705a:	4283      	cmp	r3, r0
 801705c:	4637      	mov	r7, r6
 801705e:	dc04      	bgt.n	801706a <__swbuf_r+0x42>
 8017060:	4621      	mov	r1, r4
 8017062:	4628      	mov	r0, r5
 8017064:	f000 f926 	bl	80172b4 <_fflush_r>
 8017068:	bb30      	cbnz	r0, 80170b8 <__swbuf_r+0x90>
 801706a:	68a3      	ldr	r3, [r4, #8]
 801706c:	3b01      	subs	r3, #1
 801706e:	60a3      	str	r3, [r4, #8]
 8017070:	6823      	ldr	r3, [r4, #0]
 8017072:	1c5a      	adds	r2, r3, #1
 8017074:	6022      	str	r2, [r4, #0]
 8017076:	701e      	strb	r6, [r3, #0]
 8017078:	6963      	ldr	r3, [r4, #20]
 801707a:	3001      	adds	r0, #1
 801707c:	4283      	cmp	r3, r0
 801707e:	d004      	beq.n	801708a <__swbuf_r+0x62>
 8017080:	89a3      	ldrh	r3, [r4, #12]
 8017082:	07db      	lsls	r3, r3, #31
 8017084:	d506      	bpl.n	8017094 <__swbuf_r+0x6c>
 8017086:	2e0a      	cmp	r6, #10
 8017088:	d104      	bne.n	8017094 <__swbuf_r+0x6c>
 801708a:	4621      	mov	r1, r4
 801708c:	4628      	mov	r0, r5
 801708e:	f000 f911 	bl	80172b4 <_fflush_r>
 8017092:	b988      	cbnz	r0, 80170b8 <__swbuf_r+0x90>
 8017094:	4638      	mov	r0, r7
 8017096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017098:	4b0a      	ldr	r3, [pc, #40]	; (80170c4 <__swbuf_r+0x9c>)
 801709a:	429c      	cmp	r4, r3
 801709c:	d101      	bne.n	80170a2 <__swbuf_r+0x7a>
 801709e:	68ac      	ldr	r4, [r5, #8]
 80170a0:	e7cf      	b.n	8017042 <__swbuf_r+0x1a>
 80170a2:	4b09      	ldr	r3, [pc, #36]	; (80170c8 <__swbuf_r+0xa0>)
 80170a4:	429c      	cmp	r4, r3
 80170a6:	bf08      	it	eq
 80170a8:	68ec      	ldreq	r4, [r5, #12]
 80170aa:	e7ca      	b.n	8017042 <__swbuf_r+0x1a>
 80170ac:	4621      	mov	r1, r4
 80170ae:	4628      	mov	r0, r5
 80170b0:	f000 f80c 	bl	80170cc <__swsetup_r>
 80170b4:	2800      	cmp	r0, #0
 80170b6:	d0cb      	beq.n	8017050 <__swbuf_r+0x28>
 80170b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170bc:	e7ea      	b.n	8017094 <__swbuf_r+0x6c>
 80170be:	bf00      	nop
 80170c0:	08017bc8 	.word	0x08017bc8
 80170c4:	08017be8 	.word	0x08017be8
 80170c8:	08017ba8 	.word	0x08017ba8

080170cc <__swsetup_r>:
 80170cc:	4b32      	ldr	r3, [pc, #200]	; (8017198 <__swsetup_r+0xcc>)
 80170ce:	b570      	push	{r4, r5, r6, lr}
 80170d0:	681d      	ldr	r5, [r3, #0]
 80170d2:	4606      	mov	r6, r0
 80170d4:	460c      	mov	r4, r1
 80170d6:	b125      	cbz	r5, 80170e2 <__swsetup_r+0x16>
 80170d8:	69ab      	ldr	r3, [r5, #24]
 80170da:	b913      	cbnz	r3, 80170e2 <__swsetup_r+0x16>
 80170dc:	4628      	mov	r0, r5
 80170de:	f000 f97d 	bl	80173dc <__sinit>
 80170e2:	4b2e      	ldr	r3, [pc, #184]	; (801719c <__swsetup_r+0xd0>)
 80170e4:	429c      	cmp	r4, r3
 80170e6:	d10f      	bne.n	8017108 <__swsetup_r+0x3c>
 80170e8:	686c      	ldr	r4, [r5, #4]
 80170ea:	89a3      	ldrh	r3, [r4, #12]
 80170ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170f0:	0719      	lsls	r1, r3, #28
 80170f2:	d42c      	bmi.n	801714e <__swsetup_r+0x82>
 80170f4:	06dd      	lsls	r5, r3, #27
 80170f6:	d411      	bmi.n	801711c <__swsetup_r+0x50>
 80170f8:	2309      	movs	r3, #9
 80170fa:	6033      	str	r3, [r6, #0]
 80170fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017100:	81a3      	strh	r3, [r4, #12]
 8017102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017106:	e03e      	b.n	8017186 <__swsetup_r+0xba>
 8017108:	4b25      	ldr	r3, [pc, #148]	; (80171a0 <__swsetup_r+0xd4>)
 801710a:	429c      	cmp	r4, r3
 801710c:	d101      	bne.n	8017112 <__swsetup_r+0x46>
 801710e:	68ac      	ldr	r4, [r5, #8]
 8017110:	e7eb      	b.n	80170ea <__swsetup_r+0x1e>
 8017112:	4b24      	ldr	r3, [pc, #144]	; (80171a4 <__swsetup_r+0xd8>)
 8017114:	429c      	cmp	r4, r3
 8017116:	bf08      	it	eq
 8017118:	68ec      	ldreq	r4, [r5, #12]
 801711a:	e7e6      	b.n	80170ea <__swsetup_r+0x1e>
 801711c:	0758      	lsls	r0, r3, #29
 801711e:	d512      	bpl.n	8017146 <__swsetup_r+0x7a>
 8017120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017122:	b141      	cbz	r1, 8017136 <__swsetup_r+0x6a>
 8017124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017128:	4299      	cmp	r1, r3
 801712a:	d002      	beq.n	8017132 <__swsetup_r+0x66>
 801712c:	4630      	mov	r0, r6
 801712e:	f7ff fe15 	bl	8016d5c <_free_r>
 8017132:	2300      	movs	r3, #0
 8017134:	6363      	str	r3, [r4, #52]	; 0x34
 8017136:	89a3      	ldrh	r3, [r4, #12]
 8017138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801713c:	81a3      	strh	r3, [r4, #12]
 801713e:	2300      	movs	r3, #0
 8017140:	6063      	str	r3, [r4, #4]
 8017142:	6923      	ldr	r3, [r4, #16]
 8017144:	6023      	str	r3, [r4, #0]
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	f043 0308 	orr.w	r3, r3, #8
 801714c:	81a3      	strh	r3, [r4, #12]
 801714e:	6923      	ldr	r3, [r4, #16]
 8017150:	b94b      	cbnz	r3, 8017166 <__swsetup_r+0x9a>
 8017152:	89a3      	ldrh	r3, [r4, #12]
 8017154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801715c:	d003      	beq.n	8017166 <__swsetup_r+0x9a>
 801715e:	4621      	mov	r1, r4
 8017160:	4630      	mov	r0, r6
 8017162:	f000 fa01 	bl	8017568 <__smakebuf_r>
 8017166:	89a0      	ldrh	r0, [r4, #12]
 8017168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801716c:	f010 0301 	ands.w	r3, r0, #1
 8017170:	d00a      	beq.n	8017188 <__swsetup_r+0xbc>
 8017172:	2300      	movs	r3, #0
 8017174:	60a3      	str	r3, [r4, #8]
 8017176:	6963      	ldr	r3, [r4, #20]
 8017178:	425b      	negs	r3, r3
 801717a:	61a3      	str	r3, [r4, #24]
 801717c:	6923      	ldr	r3, [r4, #16]
 801717e:	b943      	cbnz	r3, 8017192 <__swsetup_r+0xc6>
 8017180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017184:	d1ba      	bne.n	80170fc <__swsetup_r+0x30>
 8017186:	bd70      	pop	{r4, r5, r6, pc}
 8017188:	0781      	lsls	r1, r0, #30
 801718a:	bf58      	it	pl
 801718c:	6963      	ldrpl	r3, [r4, #20]
 801718e:	60a3      	str	r3, [r4, #8]
 8017190:	e7f4      	b.n	801717c <__swsetup_r+0xb0>
 8017192:	2000      	movs	r0, #0
 8017194:	e7f7      	b.n	8017186 <__swsetup_r+0xba>
 8017196:	bf00      	nop
 8017198:	240000a4 	.word	0x240000a4
 801719c:	08017bc8 	.word	0x08017bc8
 80171a0:	08017be8 	.word	0x08017be8
 80171a4:	08017ba8 	.word	0x08017ba8

080171a8 <__sflush_r>:
 80171a8:	898a      	ldrh	r2, [r1, #12]
 80171aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ae:	4605      	mov	r5, r0
 80171b0:	0710      	lsls	r0, r2, #28
 80171b2:	460c      	mov	r4, r1
 80171b4:	d458      	bmi.n	8017268 <__sflush_r+0xc0>
 80171b6:	684b      	ldr	r3, [r1, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	dc05      	bgt.n	80171c8 <__sflush_r+0x20>
 80171bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80171be:	2b00      	cmp	r3, #0
 80171c0:	dc02      	bgt.n	80171c8 <__sflush_r+0x20>
 80171c2:	2000      	movs	r0, #0
 80171c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171ca:	2e00      	cmp	r6, #0
 80171cc:	d0f9      	beq.n	80171c2 <__sflush_r+0x1a>
 80171ce:	2300      	movs	r3, #0
 80171d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80171d4:	682f      	ldr	r7, [r5, #0]
 80171d6:	602b      	str	r3, [r5, #0]
 80171d8:	d032      	beq.n	8017240 <__sflush_r+0x98>
 80171da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80171dc:	89a3      	ldrh	r3, [r4, #12]
 80171de:	075a      	lsls	r2, r3, #29
 80171e0:	d505      	bpl.n	80171ee <__sflush_r+0x46>
 80171e2:	6863      	ldr	r3, [r4, #4]
 80171e4:	1ac0      	subs	r0, r0, r3
 80171e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171e8:	b10b      	cbz	r3, 80171ee <__sflush_r+0x46>
 80171ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80171ec:	1ac0      	subs	r0, r0, r3
 80171ee:	2300      	movs	r3, #0
 80171f0:	4602      	mov	r2, r0
 80171f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171f4:	6a21      	ldr	r1, [r4, #32]
 80171f6:	4628      	mov	r0, r5
 80171f8:	47b0      	blx	r6
 80171fa:	1c43      	adds	r3, r0, #1
 80171fc:	89a3      	ldrh	r3, [r4, #12]
 80171fe:	d106      	bne.n	801720e <__sflush_r+0x66>
 8017200:	6829      	ldr	r1, [r5, #0]
 8017202:	291d      	cmp	r1, #29
 8017204:	d82c      	bhi.n	8017260 <__sflush_r+0xb8>
 8017206:	4a2a      	ldr	r2, [pc, #168]	; (80172b0 <__sflush_r+0x108>)
 8017208:	40ca      	lsrs	r2, r1
 801720a:	07d6      	lsls	r6, r2, #31
 801720c:	d528      	bpl.n	8017260 <__sflush_r+0xb8>
 801720e:	2200      	movs	r2, #0
 8017210:	6062      	str	r2, [r4, #4]
 8017212:	04d9      	lsls	r1, r3, #19
 8017214:	6922      	ldr	r2, [r4, #16]
 8017216:	6022      	str	r2, [r4, #0]
 8017218:	d504      	bpl.n	8017224 <__sflush_r+0x7c>
 801721a:	1c42      	adds	r2, r0, #1
 801721c:	d101      	bne.n	8017222 <__sflush_r+0x7a>
 801721e:	682b      	ldr	r3, [r5, #0]
 8017220:	b903      	cbnz	r3, 8017224 <__sflush_r+0x7c>
 8017222:	6560      	str	r0, [r4, #84]	; 0x54
 8017224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017226:	602f      	str	r7, [r5, #0]
 8017228:	2900      	cmp	r1, #0
 801722a:	d0ca      	beq.n	80171c2 <__sflush_r+0x1a>
 801722c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017230:	4299      	cmp	r1, r3
 8017232:	d002      	beq.n	801723a <__sflush_r+0x92>
 8017234:	4628      	mov	r0, r5
 8017236:	f7ff fd91 	bl	8016d5c <_free_r>
 801723a:	2000      	movs	r0, #0
 801723c:	6360      	str	r0, [r4, #52]	; 0x34
 801723e:	e7c1      	b.n	80171c4 <__sflush_r+0x1c>
 8017240:	6a21      	ldr	r1, [r4, #32]
 8017242:	2301      	movs	r3, #1
 8017244:	4628      	mov	r0, r5
 8017246:	47b0      	blx	r6
 8017248:	1c41      	adds	r1, r0, #1
 801724a:	d1c7      	bne.n	80171dc <__sflush_r+0x34>
 801724c:	682b      	ldr	r3, [r5, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d0c4      	beq.n	80171dc <__sflush_r+0x34>
 8017252:	2b1d      	cmp	r3, #29
 8017254:	d001      	beq.n	801725a <__sflush_r+0xb2>
 8017256:	2b16      	cmp	r3, #22
 8017258:	d101      	bne.n	801725e <__sflush_r+0xb6>
 801725a:	602f      	str	r7, [r5, #0]
 801725c:	e7b1      	b.n	80171c2 <__sflush_r+0x1a>
 801725e:	89a3      	ldrh	r3, [r4, #12]
 8017260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	e7ad      	b.n	80171c4 <__sflush_r+0x1c>
 8017268:	690f      	ldr	r7, [r1, #16]
 801726a:	2f00      	cmp	r7, #0
 801726c:	d0a9      	beq.n	80171c2 <__sflush_r+0x1a>
 801726e:	0793      	lsls	r3, r2, #30
 8017270:	680e      	ldr	r6, [r1, #0]
 8017272:	bf08      	it	eq
 8017274:	694b      	ldreq	r3, [r1, #20]
 8017276:	600f      	str	r7, [r1, #0]
 8017278:	bf18      	it	ne
 801727a:	2300      	movne	r3, #0
 801727c:	eba6 0807 	sub.w	r8, r6, r7
 8017280:	608b      	str	r3, [r1, #8]
 8017282:	f1b8 0f00 	cmp.w	r8, #0
 8017286:	dd9c      	ble.n	80171c2 <__sflush_r+0x1a>
 8017288:	6a21      	ldr	r1, [r4, #32]
 801728a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801728c:	4643      	mov	r3, r8
 801728e:	463a      	mov	r2, r7
 8017290:	4628      	mov	r0, r5
 8017292:	47b0      	blx	r6
 8017294:	2800      	cmp	r0, #0
 8017296:	dc06      	bgt.n	80172a6 <__sflush_r+0xfe>
 8017298:	89a3      	ldrh	r3, [r4, #12]
 801729a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801729e:	81a3      	strh	r3, [r4, #12]
 80172a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172a4:	e78e      	b.n	80171c4 <__sflush_r+0x1c>
 80172a6:	4407      	add	r7, r0
 80172a8:	eba8 0800 	sub.w	r8, r8, r0
 80172ac:	e7e9      	b.n	8017282 <__sflush_r+0xda>
 80172ae:	bf00      	nop
 80172b0:	20400001 	.word	0x20400001

080172b4 <_fflush_r>:
 80172b4:	b538      	push	{r3, r4, r5, lr}
 80172b6:	690b      	ldr	r3, [r1, #16]
 80172b8:	4605      	mov	r5, r0
 80172ba:	460c      	mov	r4, r1
 80172bc:	b913      	cbnz	r3, 80172c4 <_fflush_r+0x10>
 80172be:	2500      	movs	r5, #0
 80172c0:	4628      	mov	r0, r5
 80172c2:	bd38      	pop	{r3, r4, r5, pc}
 80172c4:	b118      	cbz	r0, 80172ce <_fflush_r+0x1a>
 80172c6:	6983      	ldr	r3, [r0, #24]
 80172c8:	b90b      	cbnz	r3, 80172ce <_fflush_r+0x1a>
 80172ca:	f000 f887 	bl	80173dc <__sinit>
 80172ce:	4b14      	ldr	r3, [pc, #80]	; (8017320 <_fflush_r+0x6c>)
 80172d0:	429c      	cmp	r4, r3
 80172d2:	d11b      	bne.n	801730c <_fflush_r+0x58>
 80172d4:	686c      	ldr	r4, [r5, #4]
 80172d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d0ef      	beq.n	80172be <_fflush_r+0xa>
 80172de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80172e0:	07d0      	lsls	r0, r2, #31
 80172e2:	d404      	bmi.n	80172ee <_fflush_r+0x3a>
 80172e4:	0599      	lsls	r1, r3, #22
 80172e6:	d402      	bmi.n	80172ee <_fflush_r+0x3a>
 80172e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172ea:	f000 f915 	bl	8017518 <__retarget_lock_acquire_recursive>
 80172ee:	4628      	mov	r0, r5
 80172f0:	4621      	mov	r1, r4
 80172f2:	f7ff ff59 	bl	80171a8 <__sflush_r>
 80172f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172f8:	07da      	lsls	r2, r3, #31
 80172fa:	4605      	mov	r5, r0
 80172fc:	d4e0      	bmi.n	80172c0 <_fflush_r+0xc>
 80172fe:	89a3      	ldrh	r3, [r4, #12]
 8017300:	059b      	lsls	r3, r3, #22
 8017302:	d4dd      	bmi.n	80172c0 <_fflush_r+0xc>
 8017304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017306:	f000 f908 	bl	801751a <__retarget_lock_release_recursive>
 801730a:	e7d9      	b.n	80172c0 <_fflush_r+0xc>
 801730c:	4b05      	ldr	r3, [pc, #20]	; (8017324 <_fflush_r+0x70>)
 801730e:	429c      	cmp	r4, r3
 8017310:	d101      	bne.n	8017316 <_fflush_r+0x62>
 8017312:	68ac      	ldr	r4, [r5, #8]
 8017314:	e7df      	b.n	80172d6 <_fflush_r+0x22>
 8017316:	4b04      	ldr	r3, [pc, #16]	; (8017328 <_fflush_r+0x74>)
 8017318:	429c      	cmp	r4, r3
 801731a:	bf08      	it	eq
 801731c:	68ec      	ldreq	r4, [r5, #12]
 801731e:	e7da      	b.n	80172d6 <_fflush_r+0x22>
 8017320:	08017bc8 	.word	0x08017bc8
 8017324:	08017be8 	.word	0x08017be8
 8017328:	08017ba8 	.word	0x08017ba8

0801732c <std>:
 801732c:	2300      	movs	r3, #0
 801732e:	b510      	push	{r4, lr}
 8017330:	4604      	mov	r4, r0
 8017332:	e9c0 3300 	strd	r3, r3, [r0]
 8017336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801733a:	6083      	str	r3, [r0, #8]
 801733c:	8181      	strh	r1, [r0, #12]
 801733e:	6643      	str	r3, [r0, #100]	; 0x64
 8017340:	81c2      	strh	r2, [r0, #14]
 8017342:	6183      	str	r3, [r0, #24]
 8017344:	4619      	mov	r1, r3
 8017346:	2208      	movs	r2, #8
 8017348:	305c      	adds	r0, #92	; 0x5c
 801734a:	f7ff fcff 	bl	8016d4c <memset>
 801734e:	4b05      	ldr	r3, [pc, #20]	; (8017364 <std+0x38>)
 8017350:	6263      	str	r3, [r4, #36]	; 0x24
 8017352:	4b05      	ldr	r3, [pc, #20]	; (8017368 <std+0x3c>)
 8017354:	62a3      	str	r3, [r4, #40]	; 0x28
 8017356:	4b05      	ldr	r3, [pc, #20]	; (801736c <std+0x40>)
 8017358:	62e3      	str	r3, [r4, #44]	; 0x2c
 801735a:	4b05      	ldr	r3, [pc, #20]	; (8017370 <std+0x44>)
 801735c:	6224      	str	r4, [r4, #32]
 801735e:	6323      	str	r3, [r4, #48]	; 0x30
 8017360:	bd10      	pop	{r4, pc}
 8017362:	bf00      	nop
 8017364:	08017601 	.word	0x08017601
 8017368:	08017623 	.word	0x08017623
 801736c:	0801765b 	.word	0x0801765b
 8017370:	0801767f 	.word	0x0801767f

08017374 <_cleanup_r>:
 8017374:	4901      	ldr	r1, [pc, #4]	; (801737c <_cleanup_r+0x8>)
 8017376:	f000 b8af 	b.w	80174d8 <_fwalk_reent>
 801737a:	bf00      	nop
 801737c:	080172b5 	.word	0x080172b5

08017380 <__sfmoreglue>:
 8017380:	b570      	push	{r4, r5, r6, lr}
 8017382:	2268      	movs	r2, #104	; 0x68
 8017384:	1e4d      	subs	r5, r1, #1
 8017386:	4355      	muls	r5, r2
 8017388:	460e      	mov	r6, r1
 801738a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801738e:	f7ff fd51 	bl	8016e34 <_malloc_r>
 8017392:	4604      	mov	r4, r0
 8017394:	b140      	cbz	r0, 80173a8 <__sfmoreglue+0x28>
 8017396:	2100      	movs	r1, #0
 8017398:	e9c0 1600 	strd	r1, r6, [r0]
 801739c:	300c      	adds	r0, #12
 801739e:	60a0      	str	r0, [r4, #8]
 80173a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80173a4:	f7ff fcd2 	bl	8016d4c <memset>
 80173a8:	4620      	mov	r0, r4
 80173aa:	bd70      	pop	{r4, r5, r6, pc}

080173ac <__sfp_lock_acquire>:
 80173ac:	4801      	ldr	r0, [pc, #4]	; (80173b4 <__sfp_lock_acquire+0x8>)
 80173ae:	f000 b8b3 	b.w	8017518 <__retarget_lock_acquire_recursive>
 80173b2:	bf00      	nop
 80173b4:	24005a89 	.word	0x24005a89

080173b8 <__sfp_lock_release>:
 80173b8:	4801      	ldr	r0, [pc, #4]	; (80173c0 <__sfp_lock_release+0x8>)
 80173ba:	f000 b8ae 	b.w	801751a <__retarget_lock_release_recursive>
 80173be:	bf00      	nop
 80173c0:	24005a89 	.word	0x24005a89

080173c4 <__sinit_lock_acquire>:
 80173c4:	4801      	ldr	r0, [pc, #4]	; (80173cc <__sinit_lock_acquire+0x8>)
 80173c6:	f000 b8a7 	b.w	8017518 <__retarget_lock_acquire_recursive>
 80173ca:	bf00      	nop
 80173cc:	24005a8a 	.word	0x24005a8a

080173d0 <__sinit_lock_release>:
 80173d0:	4801      	ldr	r0, [pc, #4]	; (80173d8 <__sinit_lock_release+0x8>)
 80173d2:	f000 b8a2 	b.w	801751a <__retarget_lock_release_recursive>
 80173d6:	bf00      	nop
 80173d8:	24005a8a 	.word	0x24005a8a

080173dc <__sinit>:
 80173dc:	b510      	push	{r4, lr}
 80173de:	4604      	mov	r4, r0
 80173e0:	f7ff fff0 	bl	80173c4 <__sinit_lock_acquire>
 80173e4:	69a3      	ldr	r3, [r4, #24]
 80173e6:	b11b      	cbz	r3, 80173f0 <__sinit+0x14>
 80173e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ec:	f7ff bff0 	b.w	80173d0 <__sinit_lock_release>
 80173f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80173f4:	6523      	str	r3, [r4, #80]	; 0x50
 80173f6:	4b13      	ldr	r3, [pc, #76]	; (8017444 <__sinit+0x68>)
 80173f8:	4a13      	ldr	r2, [pc, #76]	; (8017448 <__sinit+0x6c>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80173fe:	42a3      	cmp	r3, r4
 8017400:	bf04      	itt	eq
 8017402:	2301      	moveq	r3, #1
 8017404:	61a3      	streq	r3, [r4, #24]
 8017406:	4620      	mov	r0, r4
 8017408:	f000 f820 	bl	801744c <__sfp>
 801740c:	6060      	str	r0, [r4, #4]
 801740e:	4620      	mov	r0, r4
 8017410:	f000 f81c 	bl	801744c <__sfp>
 8017414:	60a0      	str	r0, [r4, #8]
 8017416:	4620      	mov	r0, r4
 8017418:	f000 f818 	bl	801744c <__sfp>
 801741c:	2200      	movs	r2, #0
 801741e:	60e0      	str	r0, [r4, #12]
 8017420:	2104      	movs	r1, #4
 8017422:	6860      	ldr	r0, [r4, #4]
 8017424:	f7ff ff82 	bl	801732c <std>
 8017428:	68a0      	ldr	r0, [r4, #8]
 801742a:	2201      	movs	r2, #1
 801742c:	2109      	movs	r1, #9
 801742e:	f7ff ff7d 	bl	801732c <std>
 8017432:	68e0      	ldr	r0, [r4, #12]
 8017434:	2202      	movs	r2, #2
 8017436:	2112      	movs	r1, #18
 8017438:	f7ff ff78 	bl	801732c <std>
 801743c:	2301      	movs	r3, #1
 801743e:	61a3      	str	r3, [r4, #24]
 8017440:	e7d2      	b.n	80173e8 <__sinit+0xc>
 8017442:	bf00      	nop
 8017444:	08017ba4 	.word	0x08017ba4
 8017448:	08017375 	.word	0x08017375

0801744c <__sfp>:
 801744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801744e:	4607      	mov	r7, r0
 8017450:	f7ff ffac 	bl	80173ac <__sfp_lock_acquire>
 8017454:	4b1e      	ldr	r3, [pc, #120]	; (80174d0 <__sfp+0x84>)
 8017456:	681e      	ldr	r6, [r3, #0]
 8017458:	69b3      	ldr	r3, [r6, #24]
 801745a:	b913      	cbnz	r3, 8017462 <__sfp+0x16>
 801745c:	4630      	mov	r0, r6
 801745e:	f7ff ffbd 	bl	80173dc <__sinit>
 8017462:	3648      	adds	r6, #72	; 0x48
 8017464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017468:	3b01      	subs	r3, #1
 801746a:	d503      	bpl.n	8017474 <__sfp+0x28>
 801746c:	6833      	ldr	r3, [r6, #0]
 801746e:	b30b      	cbz	r3, 80174b4 <__sfp+0x68>
 8017470:	6836      	ldr	r6, [r6, #0]
 8017472:	e7f7      	b.n	8017464 <__sfp+0x18>
 8017474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017478:	b9d5      	cbnz	r5, 80174b0 <__sfp+0x64>
 801747a:	4b16      	ldr	r3, [pc, #88]	; (80174d4 <__sfp+0x88>)
 801747c:	60e3      	str	r3, [r4, #12]
 801747e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017482:	6665      	str	r5, [r4, #100]	; 0x64
 8017484:	f000 f847 	bl	8017516 <__retarget_lock_init_recursive>
 8017488:	f7ff ff96 	bl	80173b8 <__sfp_lock_release>
 801748c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017494:	6025      	str	r5, [r4, #0]
 8017496:	61a5      	str	r5, [r4, #24]
 8017498:	2208      	movs	r2, #8
 801749a:	4629      	mov	r1, r5
 801749c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80174a0:	f7ff fc54 	bl	8016d4c <memset>
 80174a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80174a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80174ac:	4620      	mov	r0, r4
 80174ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174b0:	3468      	adds	r4, #104	; 0x68
 80174b2:	e7d9      	b.n	8017468 <__sfp+0x1c>
 80174b4:	2104      	movs	r1, #4
 80174b6:	4638      	mov	r0, r7
 80174b8:	f7ff ff62 	bl	8017380 <__sfmoreglue>
 80174bc:	4604      	mov	r4, r0
 80174be:	6030      	str	r0, [r6, #0]
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d1d5      	bne.n	8017470 <__sfp+0x24>
 80174c4:	f7ff ff78 	bl	80173b8 <__sfp_lock_release>
 80174c8:	230c      	movs	r3, #12
 80174ca:	603b      	str	r3, [r7, #0]
 80174cc:	e7ee      	b.n	80174ac <__sfp+0x60>
 80174ce:	bf00      	nop
 80174d0:	08017ba4 	.word	0x08017ba4
 80174d4:	ffff0001 	.word	0xffff0001

080174d8 <_fwalk_reent>:
 80174d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174dc:	4606      	mov	r6, r0
 80174de:	4688      	mov	r8, r1
 80174e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80174e4:	2700      	movs	r7, #0
 80174e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174ea:	f1b9 0901 	subs.w	r9, r9, #1
 80174ee:	d505      	bpl.n	80174fc <_fwalk_reent+0x24>
 80174f0:	6824      	ldr	r4, [r4, #0]
 80174f2:	2c00      	cmp	r4, #0
 80174f4:	d1f7      	bne.n	80174e6 <_fwalk_reent+0xe>
 80174f6:	4638      	mov	r0, r7
 80174f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174fc:	89ab      	ldrh	r3, [r5, #12]
 80174fe:	2b01      	cmp	r3, #1
 8017500:	d907      	bls.n	8017512 <_fwalk_reent+0x3a>
 8017502:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017506:	3301      	adds	r3, #1
 8017508:	d003      	beq.n	8017512 <_fwalk_reent+0x3a>
 801750a:	4629      	mov	r1, r5
 801750c:	4630      	mov	r0, r6
 801750e:	47c0      	blx	r8
 8017510:	4307      	orrs	r7, r0
 8017512:	3568      	adds	r5, #104	; 0x68
 8017514:	e7e9      	b.n	80174ea <_fwalk_reent+0x12>

08017516 <__retarget_lock_init_recursive>:
 8017516:	4770      	bx	lr

08017518 <__retarget_lock_acquire_recursive>:
 8017518:	4770      	bx	lr

0801751a <__retarget_lock_release_recursive>:
 801751a:	4770      	bx	lr

0801751c <__swhatbuf_r>:
 801751c:	b570      	push	{r4, r5, r6, lr}
 801751e:	460e      	mov	r6, r1
 8017520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017524:	2900      	cmp	r1, #0
 8017526:	b096      	sub	sp, #88	; 0x58
 8017528:	4614      	mov	r4, r2
 801752a:	461d      	mov	r5, r3
 801752c:	da08      	bge.n	8017540 <__swhatbuf_r+0x24>
 801752e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017532:	2200      	movs	r2, #0
 8017534:	602a      	str	r2, [r5, #0]
 8017536:	061a      	lsls	r2, r3, #24
 8017538:	d410      	bmi.n	801755c <__swhatbuf_r+0x40>
 801753a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801753e:	e00e      	b.n	801755e <__swhatbuf_r+0x42>
 8017540:	466a      	mov	r2, sp
 8017542:	f000 f8c3 	bl	80176cc <_fstat_r>
 8017546:	2800      	cmp	r0, #0
 8017548:	dbf1      	blt.n	801752e <__swhatbuf_r+0x12>
 801754a:	9a01      	ldr	r2, [sp, #4]
 801754c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017554:	425a      	negs	r2, r3
 8017556:	415a      	adcs	r2, r3
 8017558:	602a      	str	r2, [r5, #0]
 801755a:	e7ee      	b.n	801753a <__swhatbuf_r+0x1e>
 801755c:	2340      	movs	r3, #64	; 0x40
 801755e:	2000      	movs	r0, #0
 8017560:	6023      	str	r3, [r4, #0]
 8017562:	b016      	add	sp, #88	; 0x58
 8017564:	bd70      	pop	{r4, r5, r6, pc}
	...

08017568 <__smakebuf_r>:
 8017568:	898b      	ldrh	r3, [r1, #12]
 801756a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801756c:	079d      	lsls	r5, r3, #30
 801756e:	4606      	mov	r6, r0
 8017570:	460c      	mov	r4, r1
 8017572:	d507      	bpl.n	8017584 <__smakebuf_r+0x1c>
 8017574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017578:	6023      	str	r3, [r4, #0]
 801757a:	6123      	str	r3, [r4, #16]
 801757c:	2301      	movs	r3, #1
 801757e:	6163      	str	r3, [r4, #20]
 8017580:	b002      	add	sp, #8
 8017582:	bd70      	pop	{r4, r5, r6, pc}
 8017584:	ab01      	add	r3, sp, #4
 8017586:	466a      	mov	r2, sp
 8017588:	f7ff ffc8 	bl	801751c <__swhatbuf_r>
 801758c:	9900      	ldr	r1, [sp, #0]
 801758e:	4605      	mov	r5, r0
 8017590:	4630      	mov	r0, r6
 8017592:	f7ff fc4f 	bl	8016e34 <_malloc_r>
 8017596:	b948      	cbnz	r0, 80175ac <__smakebuf_r+0x44>
 8017598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801759c:	059a      	lsls	r2, r3, #22
 801759e:	d4ef      	bmi.n	8017580 <__smakebuf_r+0x18>
 80175a0:	f023 0303 	bic.w	r3, r3, #3
 80175a4:	f043 0302 	orr.w	r3, r3, #2
 80175a8:	81a3      	strh	r3, [r4, #12]
 80175aa:	e7e3      	b.n	8017574 <__smakebuf_r+0xc>
 80175ac:	4b0d      	ldr	r3, [pc, #52]	; (80175e4 <__smakebuf_r+0x7c>)
 80175ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	6020      	str	r0, [r4, #0]
 80175b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175b8:	81a3      	strh	r3, [r4, #12]
 80175ba:	9b00      	ldr	r3, [sp, #0]
 80175bc:	6163      	str	r3, [r4, #20]
 80175be:	9b01      	ldr	r3, [sp, #4]
 80175c0:	6120      	str	r0, [r4, #16]
 80175c2:	b15b      	cbz	r3, 80175dc <__smakebuf_r+0x74>
 80175c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175c8:	4630      	mov	r0, r6
 80175ca:	f000 f891 	bl	80176f0 <_isatty_r>
 80175ce:	b128      	cbz	r0, 80175dc <__smakebuf_r+0x74>
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	f023 0303 	bic.w	r3, r3, #3
 80175d6:	f043 0301 	orr.w	r3, r3, #1
 80175da:	81a3      	strh	r3, [r4, #12]
 80175dc:	89a0      	ldrh	r0, [r4, #12]
 80175de:	4305      	orrs	r5, r0
 80175e0:	81a5      	strh	r5, [r4, #12]
 80175e2:	e7cd      	b.n	8017580 <__smakebuf_r+0x18>
 80175e4:	08017375 	.word	0x08017375

080175e8 <__malloc_lock>:
 80175e8:	4801      	ldr	r0, [pc, #4]	; (80175f0 <__malloc_lock+0x8>)
 80175ea:	f7ff bf95 	b.w	8017518 <__retarget_lock_acquire_recursive>
 80175ee:	bf00      	nop
 80175f0:	24005a88 	.word	0x24005a88

080175f4 <__malloc_unlock>:
 80175f4:	4801      	ldr	r0, [pc, #4]	; (80175fc <__malloc_unlock+0x8>)
 80175f6:	f7ff bf90 	b.w	801751a <__retarget_lock_release_recursive>
 80175fa:	bf00      	nop
 80175fc:	24005a88 	.word	0x24005a88

08017600 <__sread>:
 8017600:	b510      	push	{r4, lr}
 8017602:	460c      	mov	r4, r1
 8017604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017608:	f000 f894 	bl	8017734 <_read_r>
 801760c:	2800      	cmp	r0, #0
 801760e:	bfab      	itete	ge
 8017610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017612:	89a3      	ldrhlt	r3, [r4, #12]
 8017614:	181b      	addge	r3, r3, r0
 8017616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801761a:	bfac      	ite	ge
 801761c:	6563      	strge	r3, [r4, #84]	; 0x54
 801761e:	81a3      	strhlt	r3, [r4, #12]
 8017620:	bd10      	pop	{r4, pc}

08017622 <__swrite>:
 8017622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017626:	461f      	mov	r7, r3
 8017628:	898b      	ldrh	r3, [r1, #12]
 801762a:	05db      	lsls	r3, r3, #23
 801762c:	4605      	mov	r5, r0
 801762e:	460c      	mov	r4, r1
 8017630:	4616      	mov	r6, r2
 8017632:	d505      	bpl.n	8017640 <__swrite+0x1e>
 8017634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017638:	2302      	movs	r3, #2
 801763a:	2200      	movs	r2, #0
 801763c:	f000 f868 	bl	8017710 <_lseek_r>
 8017640:	89a3      	ldrh	r3, [r4, #12]
 8017642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801764a:	81a3      	strh	r3, [r4, #12]
 801764c:	4632      	mov	r2, r6
 801764e:	463b      	mov	r3, r7
 8017650:	4628      	mov	r0, r5
 8017652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017656:	f000 b817 	b.w	8017688 <_write_r>

0801765a <__sseek>:
 801765a:	b510      	push	{r4, lr}
 801765c:	460c      	mov	r4, r1
 801765e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017662:	f000 f855 	bl	8017710 <_lseek_r>
 8017666:	1c43      	adds	r3, r0, #1
 8017668:	89a3      	ldrh	r3, [r4, #12]
 801766a:	bf15      	itete	ne
 801766c:	6560      	strne	r0, [r4, #84]	; 0x54
 801766e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017676:	81a3      	strheq	r3, [r4, #12]
 8017678:	bf18      	it	ne
 801767a:	81a3      	strhne	r3, [r4, #12]
 801767c:	bd10      	pop	{r4, pc}

0801767e <__sclose>:
 801767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017682:	f000 b813 	b.w	80176ac <_close_r>
	...

08017688 <_write_r>:
 8017688:	b538      	push	{r3, r4, r5, lr}
 801768a:	4d07      	ldr	r5, [pc, #28]	; (80176a8 <_write_r+0x20>)
 801768c:	4604      	mov	r4, r0
 801768e:	4608      	mov	r0, r1
 8017690:	4611      	mov	r1, r2
 8017692:	2200      	movs	r2, #0
 8017694:	602a      	str	r2, [r5, #0]
 8017696:	461a      	mov	r2, r3
 8017698:	f7ec fc39 	bl	8003f0e <_write>
 801769c:	1c43      	adds	r3, r0, #1
 801769e:	d102      	bne.n	80176a6 <_write_r+0x1e>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	b103      	cbz	r3, 80176a6 <_write_r+0x1e>
 80176a4:	6023      	str	r3, [r4, #0]
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	24005a8c 	.word	0x24005a8c

080176ac <_close_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4d06      	ldr	r5, [pc, #24]	; (80176c8 <_close_r+0x1c>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4604      	mov	r4, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	602b      	str	r3, [r5, #0]
 80176b8:	f7ec fc45 	bl	8003f46 <_close>
 80176bc:	1c43      	adds	r3, r0, #1
 80176be:	d102      	bne.n	80176c6 <_close_r+0x1a>
 80176c0:	682b      	ldr	r3, [r5, #0]
 80176c2:	b103      	cbz	r3, 80176c6 <_close_r+0x1a>
 80176c4:	6023      	str	r3, [r4, #0]
 80176c6:	bd38      	pop	{r3, r4, r5, pc}
 80176c8:	24005a8c 	.word	0x24005a8c

080176cc <_fstat_r>:
 80176cc:	b538      	push	{r3, r4, r5, lr}
 80176ce:	4d07      	ldr	r5, [pc, #28]	; (80176ec <_fstat_r+0x20>)
 80176d0:	2300      	movs	r3, #0
 80176d2:	4604      	mov	r4, r0
 80176d4:	4608      	mov	r0, r1
 80176d6:	4611      	mov	r1, r2
 80176d8:	602b      	str	r3, [r5, #0]
 80176da:	f7ec fc40 	bl	8003f5e <_fstat>
 80176de:	1c43      	adds	r3, r0, #1
 80176e0:	d102      	bne.n	80176e8 <_fstat_r+0x1c>
 80176e2:	682b      	ldr	r3, [r5, #0]
 80176e4:	b103      	cbz	r3, 80176e8 <_fstat_r+0x1c>
 80176e6:	6023      	str	r3, [r4, #0]
 80176e8:	bd38      	pop	{r3, r4, r5, pc}
 80176ea:	bf00      	nop
 80176ec:	24005a8c 	.word	0x24005a8c

080176f0 <_isatty_r>:
 80176f0:	b538      	push	{r3, r4, r5, lr}
 80176f2:	4d06      	ldr	r5, [pc, #24]	; (801770c <_isatty_r+0x1c>)
 80176f4:	2300      	movs	r3, #0
 80176f6:	4604      	mov	r4, r0
 80176f8:	4608      	mov	r0, r1
 80176fa:	602b      	str	r3, [r5, #0]
 80176fc:	f7ec fc3f 	bl	8003f7e <_isatty>
 8017700:	1c43      	adds	r3, r0, #1
 8017702:	d102      	bne.n	801770a <_isatty_r+0x1a>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	b103      	cbz	r3, 801770a <_isatty_r+0x1a>
 8017708:	6023      	str	r3, [r4, #0]
 801770a:	bd38      	pop	{r3, r4, r5, pc}
 801770c:	24005a8c 	.word	0x24005a8c

08017710 <_lseek_r>:
 8017710:	b538      	push	{r3, r4, r5, lr}
 8017712:	4d07      	ldr	r5, [pc, #28]	; (8017730 <_lseek_r+0x20>)
 8017714:	4604      	mov	r4, r0
 8017716:	4608      	mov	r0, r1
 8017718:	4611      	mov	r1, r2
 801771a:	2200      	movs	r2, #0
 801771c:	602a      	str	r2, [r5, #0]
 801771e:	461a      	mov	r2, r3
 8017720:	f7ec fc38 	bl	8003f94 <_lseek>
 8017724:	1c43      	adds	r3, r0, #1
 8017726:	d102      	bne.n	801772e <_lseek_r+0x1e>
 8017728:	682b      	ldr	r3, [r5, #0]
 801772a:	b103      	cbz	r3, 801772e <_lseek_r+0x1e>
 801772c:	6023      	str	r3, [r4, #0]
 801772e:	bd38      	pop	{r3, r4, r5, pc}
 8017730:	24005a8c 	.word	0x24005a8c

08017734 <_read_r>:
 8017734:	b538      	push	{r3, r4, r5, lr}
 8017736:	4d07      	ldr	r5, [pc, #28]	; (8017754 <_read_r+0x20>)
 8017738:	4604      	mov	r4, r0
 801773a:	4608      	mov	r0, r1
 801773c:	4611      	mov	r1, r2
 801773e:	2200      	movs	r2, #0
 8017740:	602a      	str	r2, [r5, #0]
 8017742:	461a      	mov	r2, r3
 8017744:	f7ec fbc6 	bl	8003ed4 <_read>
 8017748:	1c43      	adds	r3, r0, #1
 801774a:	d102      	bne.n	8017752 <_read_r+0x1e>
 801774c:	682b      	ldr	r3, [r5, #0]
 801774e:	b103      	cbz	r3, 8017752 <_read_r+0x1e>
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	bd38      	pop	{r3, r4, r5, pc}
 8017754:	24005a8c 	.word	0x24005a8c

08017758 <_init>:
 8017758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775a:	bf00      	nop
 801775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801775e:	bc08      	pop	{r3}
 8017760:	469e      	mov	lr, r3
 8017762:	4770      	bx	lr

08017764 <_fini>:
 8017764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017766:	bf00      	nop
 8017768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801776a:	bc08      	pop	{r3}
 801776c:	469e      	mov	lr, r3
 801776e:	4770      	bx	lr
